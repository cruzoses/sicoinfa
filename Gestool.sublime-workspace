{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"nReg",
				"nRegIva"
			],
			[
				"oDbf",
				"oDbfArCFac"
			],
			[
				"oDbfArC",
				"oDbfArCFac"
			],
			[
				"ARTCOM",
				"ARTCOM"
			],
			[
				"aTotAlb",
				"aTotAlb"
			],
			[
				"oDbfFap",
				"oDbfFapTGst"
			],
			[
				"cPro",
				"cProp2"
			],
			[
				"t",
				"t"
			],
			[
				"cImgWeb",
				"cImgWeb"
			],
			[
				"cNbrArt",
				"cNbrArt"
			],
			[
				"Msg",
				"ApoloMsgNoYes"
			],
			[
				"dbfA",
				"dbfFacCliL"
			],
			[
				"Cursor",
				"CursorWE"
			],
			[
				"Da",
				"day"
			],
			[
				"Mo",
				"month"
			],
			[
				"case",
				"case"
			],
			[
				"lSel",
				"lSelPr2"
			],
			[
				"lSelPR",
				"lSelPr1"
			],
			[
				"nCont",
				"nContEdt"
			],
			[
				"nSave",
				"nSave"
			],
			[
				"nTotIva",
				"nTotIva"
			],
			[
				"cNumPed",
				"cNumPed"
			],
			[
				"ntotPed",
				"nTotPed"
			],
			[
				"id_shop",
				"id_shop"
			],
			[
				"cPref",
				"cPrefixTable"
			],
			[
				"Co",
				"Codigo"
			],
			[
				"ctext",
				"cTextoWait"
			],
			[
				"cText",
				"cTextoWait"
			],
			[
				"lChange",
				"lChangeImage"
			],
			[
				"lchange",
				"lChangeImage"
			],
			[
				"Prepare",
				"PrepareTemporal"
			],
			[
				"Destroy",
				"DestroyTemporalLbl"
			],
			[
				"lCreate",
				"lCreateTemporalLbl"
			],
			[
				"desi",
				"DesignLabelProducc"
			],
			[
				"Producción",
				"Producción"
			],
			[
				"Pro",
				"Produccion"
			],
			[
				"oBrw",
				"oBrwLabel"
			],
			[
				"Nombre",
				"cNombre"
			],
			[
				"cFile",
				"cFileTmpLabel"
			],
			[
				"TPro",
				"TProduccion"
			],
			[
				"tPro",
				"TProduccion"
			],
			[
				"TCo",
				"TProduccion"
			],
			[
				"Create",
				"CreateEtiqueta"
			],
			[
				"Init",
				"InitLabel"
			],
			[
				"p",
				"p"
			],
			[
				"cCodPro",
				"cCodProduct"
			],
			[
				"delete",
				"DeleteProductsPrestashop"
			],
			[
				"familia",
				"familia"
			],
			[
				"if",
				"if	if..endif"
			],
			[
				"cCom",
				"cCommand"
			],
			[
				"nCodigo",
				"nCodigoGrupo"
			],
			[
				"EDIT",
				"EDIT_MODE"
			],
			[
				"ncodigo",
				"nCodigoPropiedad"
			],
			[
				"nCodig",
				"nCodigoPropiedad"
			],
			[
				"nCodi",
				"nCodigoPropiedad"
			],
			[
				"id_A",
				"id_attribute_group"
			],
			[
				"Attr",
				"attribute_group"
			],
			[
				"oPro",
				"oPro"
			],
			[
				"cCodi",
				"cCodigoPropiedad"
			],
			[
				"id_at",
				"id_attribute"
			],
			[
				"id_atr",
				"id_attribute_group"
			],
			[
				"attr",
				"attribute"
			],
			[
				"id_attr",
				"id_attribute_group"
			],
			[
				"attribute_g",
				"attribute_group_lang"
			],
			[
				"lSbrInt",
				"LSBRINT"
			],
			[
				"id_pro",
				"id_product_attribute"
			],
			[
				"product",
				"products_attributes_id"
			],
			[
				"feature_",
				"feature_product"
			],
			[
				"image_",
				"image_shop"
			],
			[
				"feature",
				"feature_value_lang"
			],
			[
				"product_gr",
				"product_group_reduction_cache"
			],
			[
				"product_att",
				"product_attribute_image"
			],
			[
				"cPre",
				"cPrefixTable"
			],
			[
				"METHOD",
				"METHOD"
			],
			[
				"cCodigo",
				"cCodigoGrupo"
			],
			[
				"tc",
				"TComercio"
			],
			[
				"Clas",
				"CLASS"
			],
			[
				"cCodFam",
				"cCodFam"
			],
			[
				"oBmp",
				"oBmpWait"
			],
			[
				"oDlg",
				"oDlgWait"
			],
			[
				"lRe",
				"lReady"
			],
			[
				"cCodGr",
				"cCodGrp"
			],
			[
				"cCodig",
				"cCodigoGrupo"
			],
			[
				"See",
				"SeekInOrd"
			],
			[
				"lOpen",
				"lOpenFiles"
			],
			[
				"lRE",
				"lReady"
			],
			[
				"new",
				"NEW"
			],
			[
				"Di",
				"Directory"
			],
			[
				"cSerie",
				"cNumeroSerie"
			],
			[
				"cVal",
				"cValPr2"
			],
			[
				"cCodP",
				"cCodPr2"
			],
			[
				"Update",
				"Update"
			],
			[
				"elimino",
				"Elimino"
			],
			[
				"else",
				"else"
			],
			[
				"oCon",
				"oCon"
			],
			[
				"T",
				"TGrpFam"
			],
			[
				"f",
				"f"
			],
			[
				"cPrefi",
				"cPreFixtable"
			],
			[
				"tax_ru",
				"tax_rules_group"
			],
			[
				"cPrefijo",
				"cPrefijoBaseDatos"
			],
			[
				"lUp",
				"lUpdateFabricantesPrestashop"
			],
			[
				"Cur",
				"CursorWait"
			],
			[
				"alquiler",
				"cSayAlquiler"
			],
			[
				"oSa",
				"oSayAlquiler"
			],
			[
				"oSay",
				"oSaySerial"
			],
			[
				"Control",
				"ControlAcceso"
			],
			[
				"dFecPed",
				"dFecPed"
			],
			[
				"nDto",
				"nDto"
			],
			[
				"nLin",
				"nNumLin"
			],
			[
				"nServicio",
				"nServicioAnterior"
			],
			[
				"nSer",
				"nServicioAnterior"
			],
			[
				"nDpp",
				"nDpp"
			],
			[
				"oGrupo",
				"oGrupoImprimir"
			],
			[
				"nU",
				"nUbiTik"
			],
			[
				"lIni",
				"lInitCheckDividirMesas"
			],
			[
				"oPunto",
				"oPunto"
			],
			[
				"cNumero",
				"cNumeroDevuelto"
			],
			[
				"Class",
				"ClassName"
			],
			[
				"tt",
				"TTpvSalon"
			],
			[
				"cCod",
				"cCodigoSala"
			],
			[
				"wh",
				"with"
			],
			[
				"lbu",
				"LButtonUp"
			],
			[
				"Guar",
				"GuardaDocumentoPendiente"
			],
			[
				"nOp",
				"nOption"
			],
			[
				"cNume",
				"cNumeroTicket"
			],
			[
				"Field",
				"FieldGetByName"
			],
			[
				"oTik",
				"oTiketCabecera"
			],
			[
				"cUbi",
				"cUbicacion"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#ifndef __PDA__\n   #include \"FiveWin.Ch\"\n   #include \"Folder.ch\"\n   #include \"Report.ch\"\n   #include \"Print.ch\"\n   #include \"TWMail.ch\"\n   #include \"FastRepH.ch\"\n   #include \"Xbrowse.ch\"\n#else\n   #include \"FWCE.ch\"\n   REQUEST DBFCDX\n#endif\n   #include \"Factu.ch\"\n\n#define OFN_PATHMUSTEXIST    0x00000800\n#define OFN_NOCHANGEDIR      0x00000008\n#define OFN_ALLOWMULTISELECT 0x00000200\n#define OFN_EXPLORER         0x00080000     // new look commdlg\n#define OFN_LONGNAMES        0x00200000     // force long names for 3.x modules\n#define OFN_ENABLESIZING     0x00800000\n\n#define _MENUITEM_           \"01058\"\n\n#define CLR_BAR              14197607\n#define CLR_KIT              Rgb( 239, 239, 239 )\n\n#define IGIC_DESG            1\n#define IGIC_INCL            2\n\n#define _CSERIE              1      //,\"C\",  1, 0, \"Serie de la factura A o B\" },;\n#define _NNUMFAC             2      //,\"N\",  9, 0, \"Numero de la factura\" },;\n#define _CSUFFAC             3      //,\"C\",  2, 0, \"Sufijo de la factura\" },;\n#define _CTURFAC             4      //,\"C\",  2, 0, \"Sufijo de la factura\" },;\n#define _DFECFAC             5      //,\"D\",  8, 0, \"Fecha de la factura\" },;\n#define _CCODCLI             6      //,\"C\", 12, 0, \"Codigo del cliente\" },;\n#define _CCODALM             7      //,\"C\",  3, 0, \"Codigo de almacen\" },;\n#define _CCODCAJ             8      //,\"C\",  3, 0, \"Codigo de almacen\" },;\n#define _CNOMCLI             9      //,\"C\", 50, 0, \"Nombre del cliente\" },;\n#define _CDIRCLI            10      //,\"C\", 60, 0, \"Dirección del cliente\" },;\n#define _CPOBCLI            11      //,\"C\", 25, 0, \"Población del cliente\" },;\n#define _CPRVCLI            12      //,\"C\", 20, 0, \"Provincia del cliente\" },;\n#define _NCODPROV           13      //,\"N\",  2, 0, \"Número de provincia cliente\" },;\n#define _CPOSCLI            14      //,\"C\",  5, 0, \"Codigos postal del cliente\" },;\n#define _CDNICLI            15      //,\"C\", 15, 0, \"DNI/CIF del cliente\" },;\n#define _LMODCLI            16\n#define _LMAYOR             17      //,\"L\",  1, 0, \"Lógico de mayorista\" },;\n#define _NTARIFA            18      //,\"L\",  1, 0, \"Lógico de mayorista\" },;\n#define _CCODAGE            19      //,\"C\",  3, 0, \"Codigo del agente\" },;\n#define _CCODRUT            20      //,\"C\",  4, 0, \"Codigo de la ruta\" },;\n#define _CCODTAR            21      //,\"C\",  5, 0, \"Codigo de la tarifa\" },;\n#define _CCODOBR            22      //,\"C\",  3, 0, \"Codigo de la obra\" },;\n#define _NPCTCOMAGE         23      //,\"N\",  6, 2, \"Porcentaje de comisión del agente\" },;\n#define _LLIQUIDADA         24      //,\"L\",  1, 0, \"Lógico de la liquidación\" },;\n#define _LCONTAB            25      //,\"L\",  1, 0, \"Lógico de la contabilización\" },;\n#define _DFECENT            26      //,\"D\",  8, 0, \"Fecha de entrega\" },;\n#define _CSUFAC             27      //,\"C\", 10, 0, \"Su factura\" },;\n#define _LIMPALB            28      //,\"L\", 10, 0, \"Su pedido\" },;\n#define _CCONDENT           29      //,\"C\", 20, 0, \"Condición de entrada\" },;\n#define _MCOMENT            30      //,\"M\", 10, 0, \"Comentarios\" },;\n#define _MOBSERV            31      //,\"M\", 10, 0, \"Observaciones\" },;\n#define _CCODPAGO           32      //,\"C\",  2, 0, \"Codigo del tipo de pago\" },;\n#define _NBULTOS            33      //,\"N\",  3, 0, \"Número de bultos\" },;\n#define _NPORTES            34      //,\"N\",  6, 0, \"Valor de los portes\" },;\n#define _NIVAMAN            35      //,\"N\",  6, 0, \"IvaValor de la mano de obra\" },;\n#define _NMANOBR            36      //,\"N\",  6, 0, \"Valor de la mano de obra\" },;\n#define _CNUMALB            37      //,\"C\", 12, 0, \"Número de albaran\" },;\n#define _CNUMPED            38      //,\"C\", 12, 0, \"Número de pedido\n#define _CNUMPRE            39      //,\"C\", 12, 0, \"Número de presupuesto\n#define _CNUMSAT            40      //,\"C\", 12, 0, \"Número de presupuesto\n#define _NTIPOFAC           41      //,\"N\",  1, 0, \"Número del tipo de factura\" },;\n#define _CDTOESP            42      //,\"N\",  5, 2, \"Porcentaje de descuento especial\" },;\n#define _NDTOESP            43      //,\"N\",  5, 2, \"Porcentaje de descuento especial\" },;\n#define _CDPP               44      //,\"N\",  5, 2, \"Porcentaje de descuento por pronto pago\" },;\n#define _NDPP               45      //,\"N\",  5, 2, \"Porcentaje de descuento por pronto pago\" },;\n#define _CDTOUNO            46      //,\"C\", 25, 0, \"Descripción de porcentaje de descuento personalizado\"\n#define _NDTOUNO            47      //,\"N\",  4, 1, \"Porcentaje de descuento por descuento personalizado\"\n#define _CDTODOS            48      //,\"C\", 25, 0, \"Descripción de porcentaje de descuento personalizado\"\n#define _NDTODOS            49      //,\"N\",  4, 1, \"Porcentaje de descuento por descuento personalizado\"\n#define _NDTOCNT            50      //,\"N\",  6, 2, \"Porcentaje de Descuento por pago de Contado\" },;\n#define _NDTORAP            51      //,\"N\",  6, 2, \"Porcentaje de Descuento por Rappel\" },;\n#define _NDTOPUB            52      //,\"N\",  6, 2, \"Porcentaje de Descuento por Publicidad\" },;\n#define _NDTOPGO            53      //,\"N\",  6, 2, \"Porcentaje de Descuento por Pago Centralizado\" },;\n#define _NDTOPTF            54      //,\"N\",  7, 2, \"Descuento por plataforma\" },;\n#define _NTIPOIVA           55      //,\"N\",  1, 0, \"Número del tipo de \" + cImp() },;\n#define _NPORCIVA           56      //,\"N\",  4, 1, \"Porcentaje de \" + cImp() },;\n#define _LRECARGO           57      //,\"L\",  1, 0, \"Lógico para recargo\" },;\n#define _CREMITIDO          58      //,\"C\", 50, 0, \"Campo de remitido\" },;\n#define _LIVAINC            59      //,\"N\",  1, 0, \"Selección de \" + cImp() },;\n#define _LSNDDOC            60      //,\"L\",  1, 0, \"Lógico para documento enviado\" },;\n#define _CDIVFAC            61      //,\"C\",  3, 0, \"Codigo de la divisa\" },;\n#define _NVDVFAC            62      //,\"N\", 10, 4, \"Cambio de la divisa\" },;\n#define _CRETPOR            63      //,\"C\",100, 0, \"Retirado por\" },;\n#define _CRETMAT            64      //,\"C\",  8, 0, \"Matricula\" } }\n#define _CNUMDOC            65      //,\"C\",  8, 0, \"Matricula\" } }\n#define _NREGIVA            66\n#define _CCODPRO            67\n#define _CDOCORG            68\n#define _NNUMLIQ            69     //\"N\",  9, 0, \"Número liquidación\" }                                  \"\",                   \"\", \"( cDbf )\"} )\n#define _CSUFLIQ            70     //\"C\",  2, 0, \"Sufijo liquidación\" }                                  \"\",                   \"\", \"( cDbf )\"} )\n#define _NIMPLIQ            71     //\"N\", 16, 6, \"Importe liquidación\" }                                 \"\",                   \"\", \"( cDbf )\"} )\n#define _LLIQUID            72     //\"L\",  1, 0, \"Logico de liquidado\" }                                 \"\",                   \"\", \"( cDbf )\"} )\n#define _CCODTRN            73     //\"L\",  1, 0, \"Logico de liquidado\" }                                 \"\",                   \"\", \"( cDbf )\"} )\n#define _NKGSTRN            74     //\"L\",  1, 0, \"Logico de liquidado\" }                                 \"\",                   \"\", \"( cDbf )\"} )\n#define _LCLOFAC            75     //\"L\",  1, 0, \"Logico de liquidado\" }                                 \"\",                   \"\", \"( cDbf )\"} )\n#define _CABNFAC            76     //\"C\", 12, 0, \"Número de presupuesto\n#define _CANTFAC            77     //\"C\", 12, 0, \"Número de presupuesto\n#define _NTIPRET            78\n#define _NPCTRET            79\n#define _CCODUSR            80\n#define _DFECCRE            81\n#define _CTIMCRE            82\n#define _CCODGRP            83\n#define _LIMPRIMIDO         84      //   L      1     0\n#define _DFECIMP            85      //   D      8     0\n#define _CHORIMP            86      //   C      5     0\n#define _CCODDLG            87\n#define _NDTOATP            88      //   N      6     2     Porcentaje de descuento atípico\n#define _NSBRATP            89      //   N      1     0     Lugar donde aplicar dto atípico\n#define _DFECENTR           90\n#define _DFECSAL            91\n#define _LALQUILER          92\n#define _LPAYCLI            93\n#define _NPAYCLI            94\n#define _CMANOBR            95\n#define _LEXPEDI            96\n#define _DFECEDI            97\n#define _CHOREDI            98\n#define _CSUALB             99\n#define _LEXPFAC           100\n#define _CTLFCLI           101\n#define _NTOTNET           102\n#define _NTOTSUP           103\n#define _NTOTIVA           104\n#define _NTOTREQ           105\n#define _NTOTFAC           106\n#define _NENTINI           107\n#define _NPCTDTO           108\n#define _CNFC              109\n#define _CFACPRV           110\n#define _CBANCO            111\n#define _CENTBNC           112\n#define _CSUCBNC           113\n#define _CDIGBNC           114\n#define _CCTABNC           115\n#define _NTOTLIQ           116\n#define _NTOTPDT           117\n#define _LOPERPV           118\n\n/*\nDefinici¢n de la base de datos de lineas de detalle\n*/\n\n#define _dCSERIE                  1      //   C      1     0\n#define _dNNUMFAC                 2      //   N      9     0\n#define _dCSUFFAC                 3      //   C      2     0\n#define _CREF                     4      //   C     14     0\n#define _CDETALLE                 5      //   C     50     0\n#define _NPREUNIT                 6      //   N     13     3\n#define _NPNTVER                  7      //   N     13     6\n#define _NIMPTRN                  8      //   N     13     6\n#define _NDTO                     9      //   N      5     1\n#define _NDTOPRM                 10      //   N      5     1\n#define _NIVA                    11      //   N      6     2\n#define _NCANENT                 12      //   N     13     3\n#define _LCONTROL                13      //   L      1     0\n#define _NPESOKG                 14      //   N      7     3\n#define _CPESOKG                 15      //   N      7     3\n#define _CUNIDAD                 16      //   C      2     0\n#define __CCODAGE                17      //   N      5     1\n#define _NCOMAGE                 18      //   N      5     1\n#define _NUNICAJA                19      //   N      9     3\n#define _NUNDKIT                 20      //   N     16     6\n#define _DFECHA                  21      //   D      8     0\n#define _CTIPMOV                 22      //   C      2     0\n#define _MLNGDES                 23      //   M     10     0\n#define _CCODALB                 24      //   C     12     0\n#define _DFECALB                 25      //   C     12     0\n#define _LTOTLIN                 26      //   L      1     0\n#define _LIMPLIN                 27      //   L      1     0\n#define _CCODPR1                 28\n#define _CCODPR2                 29\n#define _CVALPR1                 30\n#define _CVALPR2                 31\n#define _NFACCNV                 32\n#define _NDTODIV                 33\n#define _LSEL                    34\n#define _NNUMLIN                 35\n#define _NCTLSTK                 36\n#define _NCOSDIV                 37      //   N     13     3\n#define _NPVPREC                 38      //   N     13     3\n#define _CALMLIN                 39      //   C     3      0\n#define _LIVALIN                 40      //   C     3      0\n#define _CCODIMP                 41      //   C     3      0\n#define _NVALIMP                 42      //   N    16      6\n#define _LLOTE                   43      //   L     1      0\n#define _NLOTE                   44      //   N     4      0\n#define _CLOTE                   45      //   N     4      0\n#define _DFECCAD                 46      //   N     4      0\n#define _LKITART                 47      //   L     1      0\n#define _LKITCHL                 48      //   L     1      0\n#define _LKITPRC                 49      //   L     1      0\n#define _NMESGRT                 50      //   N     2      0\n#define _LMSGVTA                 51\n#define _LNOTVTA                 52\n#define _CCODTIP                 53      //   C     3      0\n#define _MNUMSER                 54\n#define _CCODFAM                 55      //   C     8      0\n#define _CGRPFAM                 56      //   C     3      0\n#define _NREQ                    57      //   N    16      6\n#define _MOBSLIN                 58      //   M    10      0\n#define _CCODPRV                 59      //   C    12      0\n#define _CNOMPRV                 60      //   C    30      0\n#define _CIMAGEN                 61      //   C    30      0\n#define _NPUNTOS                 62\n#define _NVALPNT                 63\n#define _NDTOPNT                 64\n#define _NINCPNT                 65\n#define _CREFPRV                 66\n#define _NVOLUMEN                67\n#define _CVOLUMEN                68\n#define __LALQUILER              69\n#define __DFECENT                70\n#define __DFECSAL                71\n#define _NPREALQ                 72\n#define _NNUMMED                 73\n#define _NMEDUNO                 74\n#define _NMEDDOS                 75\n#define _NMEDTRE                 76\n#define _NTARLIN                 77      //   L      1     0\n#define _LIMPFRA                 78\n#define _CCODFRA                 79\n#define _CTXTFRA                 80\n#define _DESCRIP                 81\n#define _LLINOFE                 82       // L       1    0\n#define _LVOLIMP                 83\n#define _LGASSUP                 84\n#define _dCNUMPED                85\n\n/*\nDefinici¢n de Array para IGIC\n*/\n\n#define _NBRTIVA1                aTotIva[ 1, 1 ]\n#define _NBASIVA1                aTotIva[ 1, 2 ]\n#define _NPCTIVA1                aTotIva[ 1, 3 ]\n#define _NPCTREQ1                aTotIva[ 1, 4 ]\n#define _NPNTVER1                aTotIva[ 1, 5 ]\n#define _NIVMIVA1                aTotIva[ 1, 6 ]\n#define _NTRNIVA1                aTotIva[ 1, 7 ]\n#define _NIMPIVA1                aTotIva[ 1, 8 ]\n#define _NIMPREQ1                aTotIva[ 1, 9 ]\n#define _NBRTIVA2                aTotIva[ 2, 1 ]\n#define _NBASIVA2                aTotIva[ 2, 2 ]\n#define _NPCTIVA2                aTotIva[ 2, 3 ]\n#define _NPCTREQ2                aTotIva[ 2, 4 ]\n#define _NPNTVER2                aTotIva[ 2, 5 ]\n#define _NIVMIVA2                aTotIva[ 2, 6 ]\n#define _NTRNIVA2                aTotIva[ 2, 7 ]\n#define _NIMPIVA2                aTotIva[ 2, 8 ]\n#define _NIMPREQ2                aTotIva[ 2, 9 ]\n#define _NBRTIVA3                aTotIva[ 3, 1 ]\n#define _NBASIVA3                aTotIva[ 3, 2 ]\n#define _NPCTIVA3                aTotIva[ 3, 3 ]\n#define _NPCTREQ3                aTotIva[ 3, 4 ]\n#define _NPNTVER3                aTotIva[ 3, 5 ]\n#define _NIVMIVA3                aTotIva[ 3, 6 ]\n#define _NTRNIVA3                aTotIva[ 3, 7 ]\n#define _NIMPIVA3                aTotIva[ 3, 8 ]\n#define _NIMPREQ3                aTotIva[ 3, 9 ]\n\nmemvar cDbf\nmemvar cDbfCol\nmemvar cDbfCob\nmemvar cCliente\nmemvar cDbfCli\nmemvar cDivisa\nmemvar cDbfDiv\nmemvar cFPago\nmemvar cDbfPgo\nmemvar cIva\nmemvar cDbfIva\nmemvar cAgente\nmemvar cDbfAge\nmemvar cTvta\nmemvar cDbfTvt\nmemvar cObras\nmemvar cDbfUsr\nmemvar cDbfObr\nmemvar cDbfPedT\nmemvar cDbfPedL\nmemvar cDbfAlbT\nmemvar cDbfAlbL\nmemvar cDbfAntT\nmemvar cDbfAlbP\nmemvar cDbfTrn\nmemvar cDbfRut\nmemvar cDbfCajT\nmemvar aImpVto\nmemvar aDatVto\nmemvar aIvaUno\nmemvar aIvaDos\nmemvar aIvaTre\nmemvar aIvmUno\nmemvar aIvmDos\nmemvar aIvmTre\nmemvar aTotTip\nmemvar cCtaCli\nmemvar nTotBrt\nmemvar nTotDto\nmemvar nTotDpp\nmemvar nTotUno\nmemvar nTotDos\nmemvar nTotNet\nmemvar nTotSup\nmemvar nTotIva\nmemvar nTotReq\nmemvar nTotFac\nmemvar nTotPag\nmemvar nTotImp\nmemvar nTotPnt\nmemvar nTotRet\nmemvar nTotCob\nmemvar nTotCos\nmemvar nTotIvm\nmemvar aTotIvm\nmemvar nTotPes\nmemvar nTotAge\nmemvar nTotTrn\nmemvar nTotAtp\nmemvar nTotAnt\nmemvar nTotRnt\nmemvar nTotEnt\nmemvar nTotDtoEnt\nmemvar nTotPctRnt\nmemvar nVdv\nmemvar nVdvDivFac\nmemvar cPicUndFac\nmemvar cPouDivFac\nmemvar cPorDivFac\nmemvar cPpvDivFac\nmemvar nDouDivFac\nmemvar nRouDivFac\nmemvar nDpvDivFac\nmemvar cCodPgo\nmemvar nTotArt\nmemvar nTotCaj\nmemvar lFacCli\nmemvar lAntCli\nmemvar oStk\nmemvar nTotalDto\n\nmemvar lEnd\nmemvar nRow\nmemvar oInf\nmemvar nPagina\nmemvar oReport\n\nmemvar aTotIva\n\n/*\nVariables Staticas para todo el .prg logico no!--------------------------------\n*/\n\nstatic oWndBrw\nstatic oBrwIva\nstatic dbfRuta\nstatic dbfTikT\nstatic dbfTikL\nstatic dbfTikS\nstatic dbfInci\nstatic dbfCliAtp\nstatic dbfFacCliT\nstatic dbfFacCliL\nstatic dbfFacCliP\nstatic dbfFacCliI\nstatic dbfFacCliD\nstatic dbfFacCliS\nstatic dbfFacRecT\nstatic dbfFacRecL\nstatic dbfFacRecS\nstatic dbfAlbCliL\nstatic dbfAlbCliT\nstatic dbfAlbCliS\nstatic dbfAlbCliP\nstatic dbfAlbCliI\nstatic dbfAlbCliD\nstatic dbfPedCliT\nstatic dbfPedCliL\nstatic dbfPedCliI\nstatic dbfPedCliD\nstatic dbfPedCliP\nstatic dbfPreCliT\nstatic dbfPreCliL\nstatic dbfPreCliI\nstatic dbfPreCliD\n\nstatic dbfSatCliT\nstatic dbfSatCliL\nstatic dbfSatCliI\nstatic dbfSatCliD\nstatic dbfSatCliS\n\nstatic dbfAntCliT\nstatic dbfAlbPrvL\nstatic dbfAlbPrvS\nstatic dbfPedCliR\nstatic dbfProSer\nstatic dbfMatSer\n\nstatic dbfTmpLin\nstatic dbfTmpInc\nstatic dbfTmpDoc\nstatic dbfTmpAnt\nstatic dbfTmpPgo\nstatic dbfTmpSer\n\nstatic dbfIva\nstatic dbfCount\nstatic dbfClient\nstatic dbfCliInc\nstatic dbfCliBnc\nstatic dbfArtPrv\nstatic dbfFPago\nstatic dbfAgent\nstatic dbfTVta\nstatic dbfPromoT\nstatic dbfPromoL\nstatic dbfPromoC\nstatic dbfAlm\nstatic dbfPro\nstatic dbfTblPro\nstatic dbfArticulo\nstatic dbfCodebar\nstatic dbfTarPreT\nstatic dbfTarPreL\nstatic dbfTarPreS\nstatic dbfClientAtp\nstatic dbfOferta\nstatic dbfDiv\nstatic dbfObrasT\nstatic dbfFamilia\nstatic dbfKit\nstatic dbfDoc\nstatic dbfFlt\nstatic dbfArtDiv\nstatic dbfCajT\nstatic dbfUsr\nstatic dbfDelega\nstatic dbfAgeCom\nstatic dbfEmp\nstatic dbfTblCnv\nstatic dbfFacPrvT\nstatic dbfFacPrvL\nstatic dbfFacPrvS\nstatic dbfRctPrvL\nstatic dbfRctPrvS\nstatic dbfProLin\nstatic dbfProMat\nstatic dbfHisMov\nstatic dbfHisMovS\nstatic dbfPedPrvL\nstatic oStock\nstatic oCtaRem\nstatic oBandera\nstatic oTrans\nstatic oUndMedicion\nstatic cTmpLin\nstatic cTmpInc\nstatic cTmpDoc\nstatic cTmpAnt\nstatic cTmpPgo\nstatic cTmpSer\nstatic oGetTotal\nstatic oTotFacLin\nstatic oGetNet\nstatic oGetTotPnt\nstatic oGetTotIvm\nstatic oGetPctRet\nstatic oGetIva\nstatic oGetReq\nstatic oGetAge\nstatic oGetTotPg\nstatic oGetPag\nstatic oGetPdt\nstatic oGetAnt\nstatic oGetPes\nstatic oGetDif\nstatic cPouDiv\nstatic oFont\nstatic oMenu\nstatic cPinDiv\nstatic cPorDiv\nstatic cPpvDiv\nstatic cPicUnd\nstatic nVdvDiv\nstatic nDouDiv\nstatic nRouDiv\nstatic nDpvDiv\nstatic aDbfBmp\nstatic oNewImp\nstatic oTipArt\nstatic oGrpFam\nstatic oFraPub\nstatic oBanco\nstatic oPais\n\nstatic oTotalLinea\nstatic nTotalLinea         := 0\nstatic oRentabilidadLinea\nstatic cRentabilidadLinea  := \"\"\nstatic oComisionLinea\nstatic nComisionLinea      := 0\n\nstatic aFastReportVariable\n\nstatic aNumAlb             := {}\nstatic aNumSat             := {}\n\nstatic oGetRnt\nstatic oGetEnt\nstatic oGetTrn\nstatic cCodDiv\nstatic oGetDtoEnt\n\nstatic nTotal              := 0\nstatic nTotalOld           := 0\nstatic nTotalDif           := 0\n\nstatic oBtnPre\nstatic oBtnPed\nstatic oBtnAlb\nstatic oBtnGrp\nstatic oBtnSat\n\nstatic cOldCodCli          := \"\"\nstatic cOldCodArt          := \"\"\nstatic cOldPrpArt          := \"\"\nstatic cOldUndMed          := \"\"\nstatic lOpenFiles          := .f.\nstatic lExternal           := .f.\n\nstatic oTipFac\nstatic aTipFac             := { \"Venta\", \"Alquiler\" }\n\nstatic hCabeceraFactura    := 0\nstatic hLineaFactura       := 0\nstatic hVencimientoFactura := 0\nstatic hDescuentoFactura   := 0\nstatic hImpuestosFactura   := 0\n\nstatic aImportacion        := {}\nstatic lCancelImportacion  := .f.\n\nstatic cFiltroUsuario      := \"\"\n\nstatic oMeter\nstatic nMeter              := 1\n\nstatic bEdtRec             := { |aTmp, aGet, dbfFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc| EdtRec( aTmp, aGet, dbfFacCliT, oBrw, bWhen, bValid, nMode, aNumDoc ) }\nstatic bEdtDet             := { |aTmp, aGet, dbfFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac| EdtDet( aTmp, aGet, dbfFacCliL, oBrw, bWhen, bValid, nMode, aTmpFac ) }\nstatic bEdtInc             := { |aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpLin| EdtInc( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpLin ) }\nstatic bEdtDoc             := { |aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin| EdtDoc( aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin ) }\n\n\n#ifndef __PDA__\n\n//---------------------------------------------------------------------------//\n//Funciones del programa\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION GenFacCli( nDevice, cCaption, cCodDoc, cPrinter, nCopies )\n\n   local nOrd\n   local oDevice\n   local cNumFac\n\n   public aImpVto       := {}\n   public aDatVto       := {}\n\n   if ( dbfFacCliT )->( Lastrec() ) == 0\n      return nil\n   end if\n\n   cNumFac              := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\n   DEFAULT nDevice      := IS_PRINTER\n   DEFAULT cCaption     := \"Imprimiendo facturas a clientes\"\n   DEFAULT cCodDoc      := cFormatoDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount )\n   DEFAULT nCopies      := if( nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) == 0, Max( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) )\n\n   /*\n   DEFAULT cPrinter     := PrnGetName()\n   */\n\n   if Empty( cCodDoc )\n      cCodDoc           := cFirstDoc( \"FC\", dbfDoc )\n   end if\n\n   if !lExisteDocumento( cCodDoc, dbfDoc )\n      return nil\n   end if\n\n   /*\n   Informacion al Auditor------------------------------------------------------\n   */\n\n   if !Empty( oAuditor() )\n      if nDevice == IS_PRINTER\n         oAuditor():AddEvent( PRINT_FACTURA_CLIENTES,    cNumFac, FAC_CLI )\n      else\n         oAuditor():AddEvent( PREVIEW_FACTURA_CLIENTES,  cNumFac, FAC_CLI )\n      end if\n   end if\n\n   /*\n   Si el documento es de tipo visual-------------------------------------------\n   */\n\n   if lVisualDocumento( cCodDoc, dbfDoc )\n\n      PrintReportFacCli( nDevice, nCopies, cPrinter, dbfDoc )\n\n   else\n\n      /*\n      Recalculamos la factura\n      */\n\n      nTotFacCli( cNumFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, nil, .t. )\n\n      /*\n      Pasamos los parametros\n      */\n\n      private oInf\n      private cDbf         := dbfFacCliT\n      private cDbfCol      := dbfFacCliL\n      private cDbfCob      := dbfFacCliP\n      private cCliente     := dbfClient\n      private cDbfCli      := dbfClient\n      private cDivisa      := dbfDiv\n      private cDbfDiv      := dbfDiv\n      private cFPago       := dbfFPago\n      private cDbfPgo      := dbfFPago\n      private cIva         := dbfIva\n      private cDbfIva      := dbfIva\n      private cAgente      := dbfAgent\n      private cDbfAge      := dbfAgent\n      private cTvta        := dbfTVta\n      private cDbfTvt      := dbfTVta\n      private cObras       := dbfObrasT\n      private cDbfUsr      := dbfUsr\n      private cDbfObr      := dbfObrasT\n      private cDbfPedT     := dbfPedCliT\n      private cDbfPedL     := dbfPedCliL\n      private cDbfAlbT     := dbfAlbCliT\n      private cDbfAlbL     := dbfAlbCliL\n      private cDbfAlbP     := dbfAlbCliP\n      private cDbfAntT     := dbfAntCliT\n      private cDbfTrn      := oTrans:GetAlias()\n      private cDbfRut      := dbfRuta\n      private cDbfCajT     := dbfCajT\n      private nTotPag      := 0\n      private nVdv         := nVdvDiv\n      private nVdvDivFac   := nVdvDiv\n      private cPicUndFac   := cPicUnd\n      private cPouDivFac   := cPouDiv\n      private cPorDivFac   := cPorDiv\n      private cPpvDivFac   := cPpvDiv\n      private nDouDivFac   := nDouDiv\n      private nRouDivFac   := nRouDiv\n      private nDpvDivFac   := nDpvDiv\n      private cCodPgo      := ( dbfFacCliT )->cCodPago\n      private nTotCob      := nPagFacCli( cNumFac, dbfFacCliT, dbfFacCliP, dbfIva, dbfDiv, nil, .t. )\n\n      private lFacCli      := .t.\n      private lAntCli      := .f.\n\n      private oStk         := oStock\n\n      /*\n      Posicionamos en ficheros auxiliares\n      */\n\n      ( dbfClient )->( dbSeek( ( dbfFacCliT )->cCodCli ) )\n      ( dbfAgent  )->( dbSeek( ( dbfFacCliT )->cCodAge ) )\n      ( dbfFPago  )->( dbSeek( ( dbfFacCliT )->cCodPago) )\n      ( dbfDiv    )->( dbSeek( ( dbfFacCliT )->cDivFac ) )\n      ( dbfUsr    )->( dbSeek( ( dbfFacCliT )->cCodUsr ) )\n      ( dbfRuta   )->( dbSeek( ( dbfFacCliT )->cCodRut ) )\n      ( dbfCajT   )->( dbSeek( ( dbfFacCliT )->cCodCaj ) )\n      ( dbfObrasT )->( dbSeek( ( dbfFacCliT )->cCodCli + ( dbfFacCliT )->cCodObr ) )\n\n      oTrans:oDbf:Seek( ( dbfFacCliT )->cCodTrn )\n\n      if ( dbfAlbCliT )->( dbSeek( ( dbfFacCliT )->cNumAlb ) )\n         ( dbfPedCliT )->( dbSeek( ( dbfAlbCliT )->cNumPed ) )\n      end if\n\n      nOrd                    := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n      ( dbfAntCliT )->( dbSeek( cNumFac ) )\n\n      /*\n      Buscamos la primera linea de detalle----------------------------------------\n      */\n\n      if ( dbfFacCliL )->( dbSeek( cNumFac ) )\n\n         /*\n         Creacion del informe--------------------------------------------------------\n         */\n\n         if !Empty( cPrinter ) // .and. lPrinter\n            oDevice           := TPrinter():New( cCaption, .f., .t., cPrinter )\n            REPORT oInf CAPTION cCaption TO DEVICE oDevice\n         else\n            REPORT oInf CAPTION cCaption PREVIEW\n         end if\n\n         /*\n         Cabeceras del listado-------------------------------------------------------\n         */\n\n         if !Empty( oInf ) .and. oInf:lCreated\n\n            oInf:lAutoland          := .f.\n            oInf:lFinish            := .f.\n            oInf:lNoCancel          := .t.\n            oInf:bSkip              := {|| FacCliReportSkipper( cNumFac, dbfFacCliL, dbfAntCliT ) }\n\n            oInf:oDevice:lPrvModal  := .t.\n\n            do case\n               case nDevice == IS_PRINTER\n\n                  oInf:oDevice:SetCopies( nCopies )\n\n                  oInf:bPreview        := {| o | PrintPreview( o ) }\n\n               case nDevice == IS_PDF\n\n                  oInf:bPreview        := {| o | PrintPdf( o ) }\n\n            end case\n\n            SetMargin( cCodDoc, oInf )\n            PrintColum( cCodDoc, oInf )\n\n         end if\n\n         END REPORT\n\n         if !Empty( oInf )\n\n            private oReport   := oInf\n\n            if nDevice == IS_PRINTER\n            end if\n\n            ACTIVATE REPORT oInf ;\n               WHILE       ( ( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac = cNumFac .and. !( dbfFacCliL )->( eof() ) ) .or. ( ( dbfAntCliT )->cNumDoc = cNumFac .and. !( dbfAntCliT )->( eof() ) ) );\n               FOR         ( !( dbfFacCliL )->lImpLin ) ;\n               ON ENDPAGE  ( ePage( oInf, cCodDoc ) )\n\n            if nDevice == IS_PRINTER\n               oInf:oDevice:end()\n            end if\n\n         end if\n\n         oInf                 := nil\n\n      end if\n\n      ( dbfAntCliT )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   /*\n   Funcion para marcar el documento como imprimido-----------------------------\n   */\n\n   lChgImpDoc( dbfFacCliT )\n\nReturn ( nil )\n\n//--------------------------------------------------------------------------//\n\nStatic Function FacCliReportSkipper( cNumFac, dbfFacCliL, dbfAntCliT )\n\n   if ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac = cNumFac .and. !( dbfFacCliL )->( eof() )\n\n      nTotPag              += nTotLFacCli( dbfFacCliL )\n\n      ( dbfFacCliL )->( dbSkip() )\n\n      if ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac != cNumFac .or. ( dbfFacCliL )->( eof() )\n         lFacCli           := .f.\n         lAntCli           := .t.\n      end if\n\n   elseif ( dbfAntCliT )->cNumDoc = cNumFac .and. !( dbfAntCliT )->( eof() )\n\n      ( dbfAntCliT )->( dbSkip() )\n\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function EPage( oInf, cCodDoc )\n\n   private nPagina      := oInf:nPage\n   private lEnd         := oInf:lFinish\n   private nRow         := oInf:nRow\n\n   /*\n   Reposicionamos en las distintas areas\n   */\n\n   PrintItems( cCodDoc, oInf )\n\nRETURN NIL\n\n//----------------------------------------------------------------------------//\n\nSTATIC FUNCTION OpenFiles( lExt )\n\n   local oBlock\n   local oError\n\n   if lOpenFiles\n      MsgStop( 'Imposible abrir ficheros de facturas de clientes' )\n      Return ( .f. )\n   end if\n\n   DEFAULT lExt         := .f.\n\n   lExternal            := lExt\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      DisableAcceso()\n\n      if !TDataCenter():OpenFacCliT( @dbfFacCliT )\n         lOpenFiles     := .f.\n      end if\n\n      USE ( cPatEmp() + \"FACCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLIL\", @dbfFacCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLIL.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenFacCliP( @dbfFacCliP )\n         lOpenFiles     := .f.\n      end if\n\n      USE ( cPatEmp() + \"FACCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLII\", @dbfFacCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLID\", @dbfFacCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACCLIS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLIS\", @dbfFacCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLIS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECT\", @dbfFacRecT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECL\", @dbfFacRecL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECS\", @dbfFacRecS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECS.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )\n         lOpenFiles     := .f.\n      end if\n\n      USE ( cPatEmp() + \"ALBCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIL\", @dbfAlbCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIP\", @dbfAlbCliP ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIP.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLII\", @dbfAlbCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLID\", @dbfAlbCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIS\", @dbfAlbCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIS.CDX\" ) ADDITIVE\n\n      /*\n      Tabla de SAT-------------------------------------------------------------\n      */\n\n      if !TDataCenter():OpenSatCliT( @dbfSatCliT )\n         lOpenFiles        := .f.\n      end if\n\n      USE ( cPatEmp() + \"SatCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliL\", @dbfSatCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliI\", @dbfSatCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliI.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliD.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliD\", @dbfSatCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliD.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliS\", @dbfSatCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliS.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenPedCliT( @dbfPedCliT )\n         lOpenFiles        := .f.\n      end if \n\n      USE ( cPatEmp() + \"PEDCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIT\", @dbfPedCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLIP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIP\", @dbfPedCliP ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIP.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLII\", @dbfPedCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLID\", @dbfPedCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLIR.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIR\", @dbfPedCliR ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIR.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenPreCliT( @dbfPreCliT )\n         lOpenFiles     := .f.\n      end if \n\n      USE ( cPatEmp() + \"PRECLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PRECLIL\", @dbfPreCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PRECLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PRECLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PRECLII\", @dbfPreCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PRECLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PRECLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PRECLID\", @dbfPreCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PRECLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIKET.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKET\", @dbfTikT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKET.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIKEL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKEL\", @dbfTikL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKEL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIKES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKES\", @dbfTikS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKES.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CLIENT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIENT\", @dbfClient ) )\n      SET ADSINDEX TO ( cPatCli() + \"CLIENT.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliInc.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CliInc\", @dbfCliInc ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliInc.Cdx\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliBnc.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIBNC\", @dbfCliBnc ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliBnc.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROVART.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROVART\", @dbfArtPrv ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROVART.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliAtp.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIATP\", @dbfClientAtp ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliAtp.Cdx\" ) ADDITIVE\n\n      USE ( cPatCli() + \"AGENTES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AGENTES\", @dbfAgent ) )\n      SET ADSINDEX TO ( cPatCli() + \"AGENTES.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTICULO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTICULO\", @dbfArticulo ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTICULO.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ArtCodebar.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CODEBAR\", @dbfCodebar ) )\n      SET ADSINDEX TO ( cPatArt() + \"ArtCodebar.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"FAMILIAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FAMILIAS\", @dbfFamilia ) )\n      SET ADSINDEX TO ( cPatArt() + \"FAMILIAS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTKIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTTIK\", @dbfKit ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTKIT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TARPRET.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TARPRET\", @dbfTarPreT ) )\n      SET ADSINDEX TO ( cPatArt() + \"TARPRET.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TARPREL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TARPREL\", @dbfTarPreL ) )\n      SET ADSINDEX TO ( cPatArt() + \"TARPREL.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TARPRES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TARPRES\", @dbfTarPreS ) )\n      SET ADSINDEX TO ( cPatArt() + \"TARPRES.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOL\", @dbfPromoT ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOL\", @dbfPromoL ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOL.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOC.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOC\", @dbfPromoC ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOC.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TIVA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIVA\", @dbfIva ) )\n      SET ADSINDEX TO ( cPatDat() + \"TIVA.CDX\" ) ADDITIVE\n\n      USE ( cPatGrp() + \"FPAGO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FPAGO\", @dbfFPago ) )\n      SET ADSINDEX TO ( cPatGrp() + \"FPAGO.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TVTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TVTA\", @dbfTVta ) )\n      SET ADSINDEX TO ( cPatDat() + \"TVTA.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DIVISAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"DIVISAS\", @dbfDiv ) )\n      SET ADSINDEX TO ( cPatDat() + \"DIVISAS.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"CNFFLT.DBF\" ) NEW SHARED VIA ( cDriver() )ALIAS ( cCheckArea( \"CNFFLT\", @dbfFlt ) )\n      SET ADSINDEX TO ( cPatDat() + \"CNFFLT.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"ObrasT.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OBRAST\", @dbfObrasT ) )\n      SET ADSINDEX TO ( cPatCli() + \"ObrasT.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"OFERTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OFERTA\", @dbfOferta ) )\n      SET ADSINDEX TO ( cPatArt() + \"OFERTA.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"RDOCUMEN.DBF\" ) NEW SHARED VIA ( cDriver() )ALIAS ( cCheckArea( \"RDOCUMEN\", @dbfDoc ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RDOCUMEN.CDX\" ) ADDITIVE\n      SET TAG TO \"CTIPO\"\n\n      USE ( cPatArt() + \"PRO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PRO\", @dbfPro ) )\n      SET ADSINDEX TO ( cPatArt() + \"PRO.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TBLPRO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TBLPRO\", @dbfTblPro ) )\n      SET ADSINDEX TO ( cPatArt() + \"TBLPRO.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"RUTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RUTA\", @dbfRuta ) )\n      SET ADSINDEX TO ( cPatCli() + \"RUTA.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTDIV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTDIV\", @dbfArtDiv ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTDIV.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"Cajas.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CAJAS\", @dbfCajT ) )\n      SET ADSINDEX TO ( cPatDat() + \"Cajas.Cdx\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n\n      USE ( cPatAlm() + \"Almacen.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"Almacen\", @dbfAlm ) )\n      SET ADSINDEX TO ( cPatAlm() + \"Almacen.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"USERS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"USERS\", @dbfUsr ) )\n      SET ADSINDEX TO ( cPatDat() + \"USERS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"NCOUNT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"NCOUNT\", @dbfCount ) )\n      SET ADSINDEX TO ( cPatEmp() + \"NCOUNT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIPINCI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIPINCI\", @dbfInci ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIPINCI.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DELEGA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"DELEGA\", @dbfDelega ) )\n      SET ADSINDEX TO ( cPatDat() + \"DELEGA.CDX\" ) ADDITIVE\n\n      USE ( cPatGrp() + \"AGECOM.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AGECOM\", @dbfAgeCom ) )\n      SET ADSINDEX TO ( cPatGrp() + \"AGECOM.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBPROVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBPROVL\", @dbfAlbPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBPROVL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBPRVS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBPRVS\", @dbfAlbPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBPRVS.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"EMPRESA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"EMPRESA\", @dbfEmp ) )\n      SET ADSINDEX TO ( cPatDat() + \"EMPRESA.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TBLCNV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TBLCNV\", @dbfTblCnv ) )\n      SET ADSINDEX TO ( cPatDat() + \"TBLCNV.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACPRVT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACPRVT\", @dbfFacPrvT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACPRVT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACPRVS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACPRVS\", @dbfFacPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACPRVS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACPRVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACPRVL\", @dbfFacPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACPRVL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      USE ( cPatEmp() + \"RctPrvL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RctPrvL\", @dbfRctPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RctPrvL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      USE ( cPatEmp() + \"RctPrvS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RctPrvS\", @dbfRctPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RctPrvS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PROLIN.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROLIN\", @dbfProLin ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROLIN.CDX\" ) ADDITIVE\n      SET TAG TO \"cCodArt\"\n\n      USE ( cPatEmp() + \"PROMAT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMAT\", @dbfProMat ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROMAT.CDX\" ) ADDITIVE\n      SET TAG TO \"cCodArt\"\n\n      USE ( cPatEmp() + \"PROSER.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROSER\", @dbfProSer ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROSER.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"MatSer.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"MatSer\", @dbfMatSer ) )\n      SET ADSINDEX TO ( cPatEmp() + \"MatSer.Cdx\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"HISMOV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"HISMOV\", @dbfHisMov ) )\n      SET ADSINDEX TO ( cPatEmp() + \"HISMOV.CDX\" ) ADDITIVE\n      SET TAG TO \"cRefMov\"\n\n      USE ( cPatEmp() + \"MOVSER.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"MOVSER\", @dbfHisMovS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"MOVSER.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDPROVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PedPrvL\", @dbfPedPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDPROVL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      oBandera          := TBandera():New()\n\n      oStock            := TStock():Create( cPatGrp() )\n      if !oStock:lOpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oCtaRem           := TCtaRem():Create( cPatCli() )\n      if !oCtaRem:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oNewImp           := TNewImp():Create( cPatEmp() )\n      if !oNewImp:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oTrans            := TTrans():Create( cPatCli() )\n      if !oTrans:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oTipArt           := TTipArt():Create( cPatArt() )\n      if !oTipArt:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oGrpFam           := TGrpFam():Create( cPatArt() )\n      if !oGrpFam:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oUndMedicion      := UniMedicion():Create( cPatGrp() )\n      if !oUndMedicion:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oFraPub           := TFrasesPublicitarias():Create( cPatArt() )\n      if !oFraPub:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oBanco            := TBancos():Create()\n      if !oBanco:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oPais             := TPais():Create( cPatDat() )\n      if !oPais:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oFont             := TFont():New( \"Arial\", 8, 26, .F., .T. )\n\n      /*\n      Declaramos variables públicas--------------------------------------------\n      */\n\n      public nTotFac    := 0\n      public nTotBrt    := 0\n      public nTotDto    := 0\n      public nTotDPP    := 0\n      public nTotNet    := 0\n      public nTotSup    := 0\n      public nTotIva    := 0\n      public nTotIvm    := 0\n      public nTotAge    := 0\n      public nTotReq    := 0\n      public nTotPnt    := 0\n      public nTotUno    := 0\n      public nTotDos    := 0\n      public nTotRet    := 0\n      public nTotTrn    := 0\n      public nTotAnt    := 0\n      public nTotEnt    := 0\n      public nTotCos    := 0\n      public nTotCob    := 0\n      public nTotPes    := 0\n      public nTotRnt    := 0\n      public nTotAtp    := 0\n      public nTotArt    := 0\n      public nTotCaj    := 0\n      public nTotPctRnt := 0\n      public nTotDtoEnt := 0\n\n      public aTotIva    := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }\n      public aIvaUno    := aTotIva[ 1 ]\n      public aIvaDos    := aTotIva[ 2 ]\n      public aIvaTre    := aTotIva[ 3 ]\n\n      public aTotIvm    := { { 0,0,0 }, { 0,0,0 }, { 0,0,0 }, }\n      public aIvmUno    := aTotIvm[ 1 ]\n      public aIvmDos    := aTotIvm[ 2 ]\n      public aIvmTre    := aTotIvm[ 3 ]\n\n      public aImpVto    := {}\n      public aDatVto    := {}\n\n      lOpenFiles        := .t.\n\n      EnableAcceso()\n\n   RECOVER USING oError\n\n      lOpenFiles        := .f.\n\n      msgStop( \"Imposible abrir todas las bases de datos\" + CRLF + ErrorMessage( oError ) )\n\n      EnableAcceso()\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   if !lOpenFiles\n      CloseFiles()\n   end if\n\nRETURN ( lOpenFiles )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION CloseFiles()\n\n   DisableAcceso()\n\n   DestroyFastFilter( dbfFacCliT, .t., .t. )\n\n   if !Empty( oFont )\n      oFont:end()\n   end if\n\n   if !Empty( dbfFacCliT )\n      ( dbfFacCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfIva )\n      ( dbfIva     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFPago )\n      ( dbfFPago   )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAgent )\n      ( dbfAgent   )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfClient )\n      ( dbfClient     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliP )\n      ( dbfFacCliP )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliL )\n      ( dbfFacCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliI )\n      ( dbfFacCliI )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliD )\n      ( dbfFacCliD )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliS )\n      ( dbfFacCliS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacRecT )\n      ( dbfFacRecT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacRecL )\n      ( dbfFacRecL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacRecS )\n      ( dbfFacRecS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliT )\n      ( dbfAlbCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliL )\n      ( dbfAlbCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliP )\n      ( dbfAlbCliP )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliI )\n      ( dbfAlbCliI )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliD )\n      ( dbfAlbCliD )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliS )\n      ( dbfAlbCliS )->( dbCloseArea() )\n   end if\n\n   if ( !Empty( dbfSatCliT ), ( dbfSatCliT )->( dbCloseArea() ), )\n   if ( !Empty( dbfSatCliL ), ( dbfSatCliL )->( dbCloseArea() ), )\n   if ( !Empty( dbfSatCliI ), ( dbfSatCliI )->( dbCloseArea() ), )\n   if ( !Empty( dbfSatCliD ), ( dbfSatCliD )->( dbCloseArea() ), )\n   if ( !Empty( dbfSatCliS ), ( dbfSatCliS )->( dbCloseArea() ), )\n      \n   if !Empty( dbfPedCliT )\n      ( dbfPedCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliL )\n      ( dbfPedCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliP )\n      ( dbfPedCliP )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliI )\n      ( dbfPedCliI )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliD )\n      ( dbfPedCliD )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPreCliT )\n      ( dbfPreCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPreCliL )\n      ( dbfPreCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPreCliI )\n      ( dbfPreCliI )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPreCliD )\n      ( dbfPreCliD )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTikT )\n      ( dbfTikT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTikL )\n      ( dbfTikL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTikS )\n      ( dbfTikS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfArticulo )\n      ( dbfArticulo )->( dbCloseArea() )\n   end if\n\n   if dbfCodebar != nil\n      ( dbfCodebar )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFamilia )\n      ( dbfFamilia )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfKit )\n      ( dbfKit     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTarPreT )\n      ( dbfTarPreT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTarPreL )\n      ( dbfTarPreL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTarPreS )\n      ( dbfTarPreS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPromoT )\n      ( dbfPromoT  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPromoL )\n      ( dbfPromoL  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPromoC )\n      ( dbfPromoC  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfClientAtp )\n      ( dbfClientAtp  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTVta )\n      ( dbfTVta    )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlm )\n      ( dbfAlm    )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfDiv )\n      ( dbfDiv     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfObrasT )\n      ( dbfObrasT  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfOferta )\n      ( dbfOferta  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfDoc )\n      ( dbfDoc     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFlt )\n      ( dbfFlt     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPro )\n      ( dbfPro     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTblPro )\n      ( dbfTblPro  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfRuta )\n      ( dbfRuta    )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfArtDiv )\n      ( dbfArtDiv  )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfCajT )\n      ( dbfCajT    )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAntCliT )\n      ( dbfAntCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfUsr )\n      ( dbfUsr     )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfCount )\n      ( dbfCount   )->( dbCloseArea() )\n   end if\n\n   if dbfInci != nil\n      ( dbfInci )->( dbCloseArea() )\n   end if\n\n   if dbfArtPrv != nil\n      ( dbfArtPrv )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfDelega )\n      ( dbfDelega )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAgeCom )\n      ( dbfAgeCom )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbPrvL )\n      ( dbfAlbPrvL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbPrvS )\n      ( dbfAlbPrvS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliR )\n      ( dbfPedCliR )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfEmp )\n      ( dbfEmp )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTblCnv)\n      ( dbfTblCnv )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacPrvT )\n      ( dbfFacPrvT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacPrvL )\n      ( dbfFacPrvL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacPrvS )\n      ( dbfFacPrvS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfRctPrvL )\n      ( dbfRctPrvL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfRctPrvS )\n      ( dbfRctPrvS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfProLin )\n      ( dbfProLin )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfProMat )\n      ( dbfProMat )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfProSer )\n      ( dbfProSer )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfMatSer )\n      ( dbfMatSer )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfHisMov )\n      ( dbfHisMov )->( dbCloseArea() )\n   end if\n\n   if dbfHisMovS != nil\n      ( dbfHisMovS )->( dbCloseArea() )\n   end if\n\n   if dbfCliInc != nil\n      ( dbfCliInc )->( dbCloseArea() )\n   end if\n\n   if dbfCliBnc != nil\n      ( dbfCliBnc )->( dbCloseArea() )\n   end if\n\n   if dbfPedPrvL != nil\n      ( dbfPedPrvL )->( dbCloseArea() )\n   end if\n\n   if dbfProMat != nil\n      ( dbfProMat )->( dbCloseArea() )\n   end if\n\n   if !Empty( oStock )\n      oStock:end()\n   end if\n\n   if !Empty( oCtaRem )\n      oCtaRem:end()\n   end if\n\n   if !Empty( oNewImp )\n      oNewImp:end()\n   end if\n\n   if !Empty( oTipArt )\n      oTipArt:end()\n   end if\n\n   if !Empty( oGrpFam )\n      oGrpFam:end()\n   end if\n\n   if !Empty( oTrans )\n      oTrans:End()\n   end if\n\n   if !Empty( oUndMedicion )\n      oUndMedicion:End()\n   end if\n\n   if !Empty( oFraPub )\n      oFraPub:end()\n   end if\n\n   if !Empty( oBanco )\n      oBanco:End()\n   end if\n\n   if !Empty( oPais )\n      oPais:End()\n   end if\n\n   dbfIva      := nil\n   dbfFPago    := nil\n   dbfAgent    := nil\n   dbfClient   := nil\n   dbfFacCliP  := nil\n   dbfFacCliL  := nil\n   dbfFacCliT  := nil\n   dbfFacCliD  := nil\n   dbfFacCliS  := nil\n   dbfAlbCliT  := nil\n   dbfAlbCliL  := nil\n   dbfAlbCliI  := nil\n   dbfAlbCliD  := nil\n   dbfAlbCliS  := nil\n   dbfPedCliT  := nil\n   dbfPedCliL  := nil\n   dbfPedCliP  := nil\n   dbfPedCliI  := nil\n   dbfPedCliD  := nil\n   dbfPreCliT  := nil\n   dbfPreCliL  := nil\n   dbfPreCliI  := nil\n   dbfPreCliD  := nil\n   dbfSatCliT  := nil\n   dbfSatCliL  := nil\n   dbfSatCliI  := nil\n   dbfSatCliD  := nil\n   dbfSatCliS  := nil\n   \n   dbfTikT     := nil\n   dbfArticulo := nil\n   dbfCodebar  := nil\n   dbfFamilia  := nil\n   dbfKit      := nil\n   dbfTarPreT  := nil\n   dbfTarPreL  := nil\n   dbfTarPreS  := nil\n   dbfPromoT   := nil\n   dbfPromoL   := nil\n   dbfPromoC   := nil\n   dbfAlm      := nil\n   dbfClientAtp:= nil\n   dbfTVta     := nil\n   dbfDiv      := nil\n   oBandera    := nil\n   dbfObrasT   := nil\n   dbfDoc      := nil\n   dbfFlt      := nil\n   dbfOferta   := nil\n   dbfPro      := nil\n   dbfTblPro   := nil\n   dbfRuta     := nil\n   dbfArtDiv   := nil\n   dbfCajT     := nil\n   dbfAntCliT  := nil\n   dbfUsr      := nil\n   dbfInci     := nil\n   dbfArtPrv   := nil\n   dbfDelega   := nil\n   dbfAgeCom   := nil\n   dbfAlbPrvL  := nil\n   dbfAlbPrvS  := nil\n   dbfPedCliR  := nil\n   dbfEmp      := nil\n   dbfTblCnv   := nil\n   dbfFacPrvT  := nil\n   dbfFacPrvL  := nil\n   dbfFacPrvS  := nil\n   dbfRctPrvL  := nil\n   dbfRctPrvS  := nil\n   dbfProLin   := nil\n   dbfProMat   := nil\n   dbfHisMov   := nil\n   dbfCliInc   := nil\n   dbfPedPrvL  := nil\n   dbfProMat   := nil\n\n   oStock      := nil\n   oNewImp     := nil\n   oTrans      := nil\n   oTipArt     := nil\n   oGrpFam     := nil\n   oUndMedicion:= nil\n   oBanco      := nil\n   oPais       := nil\n\n   lOpenFiles  := .f.\n\n   EnableAcceso()\n\n//   SysRefresh()\n\nReturn ( !lOpenFiles )\n\n//--------------------------------------------------------------------------//\n\nFUNCTION FactCli( oMenuItem, oWnd, cCodCli, cCodArt, cCodPed, aNumDoc )\n\n   local oRpl\n   local oSnd\n   local oImp\n   local oPrv\n   local oPdf\n   local oMail\n   local oLiq\n   local oDel\n   local oDup\n   local oBtnEur\n   local lEuro          := .f.\n   local nLevel\n   local oRotor\n\n   DEFAULT  oMenuItem   := _MENUITEM_\n   DEFAULT  oWnd        := oWnd()\n   DEFAULT  aNumDoc     := Array(5)\n   DEFAULT  cCodCli     := \"\"\n   DEFAULT  cCodArt     := \"\"\n   DEFAULT  cCodPed     := \"\"\n\n   nLevel               := nLevelUsr( oMenuItem )\n   if nAnd( nLevel, 1 ) != 0\n      msgStop( \"Acceso no permitido.\" )\n      Return .f.\n   end if\n\n   /*\n   Cerramos todas las ventanas\n   */\n\n   if oWnd != nil\n      SysRefresh(); oWnd:CloseAll(); SysRefresh()\n   end if\n\n   if !OpenFiles()\n      Return .f.\n   end if\n\n   DisableAcceso()\n\n   /*\n   AddMnuNext( \"Facturas de clientes\", ProcName() )\n   */\n\n   DEFINE SHELL oWndBrw FROM 0, 0 TO 22, 80 ;\n      XBROWSE ;\n      TITLE    \"Facturas de clientes\" ;\n      PROMPT   \"Número\",;\n               \"Fecha\",;\n               \"Código\",;\n               \"Nombre\",;\n               \"Población\",;\n               \"Obra\",;\n               \"Agente\",;\n               \"Sesión\",;\n               \"NFC\",;\n               \"Pago\";\n      MRU      \"Document_user1_16\";\n      BITMAP   clrTopVentas ;\n      ALIAS    ( dbfFacCliT );\n      APPEND   ( WinAppRec( oWndBrw:oBrw, bEdtRec, dbfFacCliT, cCodCli, cCodArt, aNumDoc ) );\n      DUPLICAT ( WinDupRec( oWndBrw:oBrw, bEdtRec, dbfFacCliT, cCodCli, cCodArt, aNumDoc ) );\n      EDIT     ( WinEdtRec( oWndBrw:oBrw, bEdtRec, dbfFacCliT, cCodCli, cCodArt, aNumDoc ) );\n      ZOOM     ( WinZooRec( oWndBrw:oBrw, bEdtRec, dbfFacCliT ) );\n      DELETE   ( WinDelRec( oWndBrw:oBrw, dbfFacCliT, {|| QuiFacCli() } ) );\n      LEVEL    nLevel ;\n      OF       oWnd\n\n      oWndBrw:lFechado     := .t.\n\n      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Sesión cerrada\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| if( ( dbfFacCliT )->lCloFac, \"Cerrada\", \"Abierta\" ) }\n         :bEditValue       := {|| ( dbfFacCliT )->lCloFac }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Zoom16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Cobrado\"\n         :nHeadBmpNo       := 4\n         :bStrData         := {|| cChkPagFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliP ) }\n         :bBmpData         := {|| nChkPagFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliP ) }\n         :nWidth           := 20\n         :AddResource( \"Bullet_Square_Green_16\" )\n         :AddResource( \"Bullet_Square_Yellow_16\" )\n         :AddResource( \"Bullet_Square_Red_16\" )\n         :AddResource( \"ChgPre16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Contabilizado\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| if( ( dbfFacCliT )->lContab, \"Contabilizado\", \"Pendiente\" ) }\n         :bEditValue       := {|| ( dbfFacCliT )->lContab }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"BmpConta16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Envio\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| if( ( dbfFacCliT )->lSndDoc, \"Enviado\", \"No enviado\" ) }\n         :bEditValue       := {|| ( dbfFacCliT )->lSndDoc }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Lbl16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Entregado\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| !Empty( ( dbfFacCliT )->dFecEnt ) }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"hand_paper_16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Exportado EDI\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfFacCliT )->lExpEdi }\n         :nWidth           := 20\n         :lHide            := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Text_Code_16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Exportado a Facturae 3.1 [Factura electrónica]\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfFacCliT )->lExpFac }\n         :nWidth           := 20\n         :lHide            := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Document_plain_earth_16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Incidencia\"\n         :nHeadBmpNo       := 4\n         :bStrData         := {|| \"\" }\n         :bBmpData         := {|| nEstadoIncidencia( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) }\n         :nWidth           := 20\n         :lHide            := .t.\n         :AddResource( \"Bullet_Square_Red_16\" )\n         :AddResource( \"Bullet_Square_Yellow_16\" )\n         :AddResource( \"Bullet_Square_Green_16\" )\n         :AddResource( \"informacion_16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Rectificada\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| lRectificadaCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacRecT ) }\n         :nWidth           := 20\n         :lHide            := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Document_delete_16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Impreso\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfFacCliT )->lImprimido }\n         :nWidth           := 20\n         :lHide            := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"IMP16\" )\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Tipo\"\n         :bEditValue       := {|| aTipFac[ if( ( dbfFacCliT )->lAlquiler, 2, 1 ) ] }\n         :nWidth           := 50\n         :lHide            := .t.\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := \"nNumFac\"\n         :bEditValue       := {|| ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Delegación\"\n         :bEditValue       := {|| ( dbfFacCliT )->cSufFac }\n         :nWidth           := 40\n         :lHide            := .t.\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"NFC\"\n         :cSortOrder       := \"cNfc\"\n         :bEditValue       := {|| ( dbfFacCliT )->cNFC }\n         :nWidth           := 160\n         :lHide            := .t.\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Sesión\"\n         :cSortOrder       := \"cTurFac\"\n         :bEditValue       := {|| Trans( ( dbfFacCliT )->cTurFac, \"######\" ) }\n         :nWidth           := 40\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :lHide            := .t.\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Fecha\"\n         :cSortOrder       := \"dFecFac\"\n         :bEditValue       := {|| Dtoc( ( dbfFacCliT )->dFecFac ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Caja\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodCaj }\n         :nWidth           := 40\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Usuario\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodUsr }\n         :nWidth           := 40\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Código\"\n         :cSortOrder       := \"cCodCli\"\n         :bEditValue       := {|| AllTrim( ( dbfFacCliT )->cCodCli ) }\n         :nWidth           := 70\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Nombre\"\n         :cSortOrder       := \"cNomCli\"\n         :bEditValue       := {|| AllTrim( ( dbfFacCliT )->cNomCli ) }\n         :nWidth           := 180\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Población\"\n         :cSortOrder       := \"cPobCli\"\n         :bEditValue       := {|| AllTrim( ( dbfFacCliT )->cPobCli ) }\n         :nWidth           := 180\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :lHide            := .t.\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Agente\"\n         :cSortOrder       := \"cCodAge\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodAge }\n         :nWidth           := 50\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Pago\"\n         :cSortOrder       := \"cCodPago\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodPago }\n         :nWidth           := 40\n         :lHide            := .t.\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Ruta\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodRut }\n         :nWidth           := 40\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Almacén\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodAlm }\n         :nWidth           := 60\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Obra\"\n         :cSortOrder       := \"cCodObr\"\n         :bEditValue       := {|| ( dbfFacCliT )->cCodObr }\n         :nWidth           := 40\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Base\"\n         :bEditValue       := {|| ( dbfFacCliT )->nTotNet }\n         :cEditPicture     := cPorDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := cImp()\n         :bEditValue       := {|| ( dbfFacCliT )->nTotIva }\n         :cEditPicture     := cPorDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"R.E.\"\n         :bEditValue       := {|| ( dbfFacCliT )->nTotReq }\n         :cEditPicture     := cPorDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Total\"\n         :bEditValue       := {|| ( dbfFacCliT )->nTotFac }\n         :cEditPicture     := cPorDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Div.\"\n         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( dbfFacCliT )->cDivFac ), dbfDiv ) }\n         :nWidth           := 30\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :bLDClickData     := {|| oWndBrw:RecEdit() }\n      end with\n\n   oWndBrw:CreateXFromCode()\n\n   DEFINE BTNSHELL RESOURCE \"BUS\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:SearchSetFocus() ) ;\n      TOOLTIP  \"(B)uscar\" ;\n      HOTKEY   \"B\"\n\n   oWndBrw:AddSeaBar()\n\n   DEFINE BTNSHELL RESOURCE \"NEW\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecAdd() );\n      ON DROP  ( oWndBrw:RecDup() );\n      TOOLTIP  \"(A)ñadir\";\n      BEGIN GROUP;\n      HOTKEY   \"A\";\n      LEVEL    ACC_APPD\n\n   DEFINE BTNSHELL oDup RESOURCE \"DUP\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecDup() );\n      MENU     This:Toggle() ;\n      TOOLTIP  \"(D)uplicar\";\n      HOTKEY   \"D\";\n      LEVEL    ACC_APPD\n\n      DEFINE BTNSHELL RESOURCE \"Dup\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( DupSerie( oWndBrw ) );\n         TOOLTIP  \"Series\" ;\n         FROM     oDup ;\n         CLOSED ;\n         LEVEL    ACC_APPD\n\n   DEFINE BTNSHELL RESOURCE \"EDIT\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecEdit() );\n      TOOLTIP  \"(M)odificar\";\n      HOTKEY   \"M\" ;\n      MRU;\n      LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL RESOURCE \"ZOOM\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecZoom() );\n      TOOLTIP  \"(Z)oom\";\n      HOTKEY   \"Z\" ;\n      MRU;\n      LEVEL    ACC_ZOOM\n\n   DEFINE BTNSHELL oDel RESOURCE \"DEL\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( WinDelRec( oWndBrw:oBrw, dbfFacCliT, {|| QuiFacCli() } ) );\n      MENU     This:Toggle() ;\n      TOOLTIP  \"(E)liminar\";\n      HOTKEY   \"E\";\n      LEVEL    ACC_DELE\n\n      DEFINE BTNSHELL RESOURCE \"DEL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( DelSerie( oWndBrw ) );\n         TOOLTIP  \"Series\" ;\n         FROM     oDel ;\n         CLOSED ;\n         LEVEL    ACC_DELE\n\n   DEFINE BTNSHELL oImp RESOURCE \"IMP\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenFacCli( IS_PRINTER ), oWndBrw:Refresh() ) ;\n      TOOLTIP  \"(I)mprimir\";\n      HOTKEY   \"I\";\n      LEVEL    ACC_IMPR\n\n      lGenFacCli( oWndBrw:oBrw, oImp, IS_PRINTER ) ;\n\n   DEFINE BTNSHELL RESOURCE \"SERIE1\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( PrnSerie(), oWndBrw:Refresh() );\n      TOOLTIP  \"Imp(r)imir series\";\n      HOTKEY   \"R\";\n      LEVEL    ACC_IMPR\n\n   DEFINE BTNSHELL oPrv RESOURCE \"PREV1\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenFacCli( IS_SCREEN ), oWndBrw:Refresh() ) ;\n      TOOLTIP  \"(P)revisualizar\";\n      HOTKEY   \"P\";\n      LEVEL    ACC_IMPR\n\n      lGenFacCli( oWndBrw:oBrw, oPrv, IS_SCREEN ) ;\n\n   DEFINE BTNSHELL oPdf RESOURCE \"DOCLOCK\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenFacCli( IS_PDF ) ) ;\n      TOOLTIP  \"Pd(f)\";\n      HOTKEY   \"F\";\n      LEVEL    ACC_IMPR\n\n      lGenFacCli( oWndBrw:oBrw, oPdf, IS_PDF ) ;\n\n   DEFINE BTNSHELL oMail RESOURCE \"Mail\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenFacCli( IS_MAIL ) ) ;\n      TOOLTIP  \"Correo electrónico\";\n      LEVEL    ACC_IMPR\n\n      lGenFacCli( oWndBrw:oBrw, oMail, IS_MAIL ) ;\n\n   DEFINE BTNSHELL oLiq RESOURCE \"Money2_\" OF oWndBrw GROUP ;\n      NOBORDER ;\n      ACTION   ( lLiquida( oWndBrw:oBrw ) ) ;\n      TOOLTIP  \"Cobrar\" ;\n      LEVEL    ACC_APPD\n\n      DEFINE BTNSHELL RESOURCE \"Money2_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( aGetSelRec( oWndBrw, {|| lLiquida( oWndBrw:oBrw, ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) }, \"Liquidar series de facturas\", .t., nil, .t., nil ) ) ;\n         TOOLTIP  \"Cobrar series\" ;\n         FROM     oLiq ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL RESOURCE \"BMPCONTA\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( aGetSelRec( oWndBrw, {|lChk1, lChk2, oTree| CntFacCli( lChk1, lChk2, nil, .t., oTree, nil, nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfAlbCliT, dbfClient, dbfDiv, dbfArticulo, dbfFPago, dbfIva, oNewImp ) }, \"Contabilizar facturas\", .f., \"Simular resultados\", .f., \"Contabilizar recibos\" ) ) ;\n      TOOLTIP  \"(C)ontabilizar\" ;\n      HOTKEY   \"C\";\n      LEVEL    ACC_EDIT\n\n   if oUser():lAdministrador()\n\n      DEFINE BTNSHELL RESOURCE \"CHGSTATE\" OF oWndBrw GROUP;\n         NOBORDER ;\n         ACTION   ( aGetSelRec( oWndBrw, {| lChk | lChgContabilizado( lChk ) }, \"Cambiar estado\", .f., \"Contabilizado\", .t. ) ) ;\n         TOOLTIP  \"Cambiar es(t)ado\" ;\n         HOTKEY   \"T\";\n         LEVEL    ACC_EDIT\n\n   end if\n\n   DEFINE BTNSHELL oSnd RESOURCE \"LBL\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      TOOLTIP  \"En(v)iar\" ;\n      MESSAGE  \"Seleccionar albaranes para ser enviados\" ;\n      ACTION   lSnd( oWndBrw, dbfFacCliT ) ;\n      HOTKEY   \"V\";\n      LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfFacCliT, \"lSndDoc\", .t., .t., .t. ) );\n         TOOLTIP  \"Todos\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfFacCliT, \"lSndDoc\", .f., .t., .t. ) );\n         TOOLTIP  \"Ninguno\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfFacCliT, \"lSndDoc\", .t., .f., .t. ) );\n         TOOLTIP  \"Abajo\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\nif lBancas()\n\n   DEFINE BTNSHELL RESOURCE \"Dup\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( FacCliExcelImport( oWndBrw ) );\n      TOOLTIP  \"Importar facturación diaria\" ;\n      LEVEL    ACC_APPD\n\n   DEFINE BTNSHELL RESOURCE \"Dup\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( FacCliExcelNovotecno( oWndBrw ) );\n      TOOLTIP  \"Importar facturación de Novotecno\" ;\n      LEVEL    ACC_APPD\n\nelse\n\n   DEFINE BTNSHELL RESOURCE \"Document_plain_earth_\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( aGetSelRec( oWndBrw, {|lChk1, lChk2, oTree| CreateFileFacturae( oTree, lChk1, lChk2 ) }, \"Exportar facturas electrónicas a Facturae v 3.1\", .f., \"Firmar digitalmente\", .f., \"Enviar por correo electrónico\" ) ) ;\n      TOOLTIP  \"Exportar a Facturae\" ;\n      LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL RESOURCE \"Text_Code_\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( aGetSelRec( oWndBrw, {|lChk1, lChk2, oTree| ExportarEDI( lChk1, oTree ) }, \"Exportar facturas a EDI\", .f., \"Solo las no exportadas\", .t., \"Segunda opcion\", {|| CreateFileEDI() }, {|| CloseFileEDI() } ) ) ;\n      TOOLTIP  \"Exportar a EDI\" ;\n      LEVEL    ACC_EDIT\n\nend if\n\n   DEFINE BTNSHELL oBtnEur RESOURCE \"BAL_EURO\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( lEuro := !lEuro, oWndBrw:Refresh() ) ;\n      TOOLTIP  \"M(o)neda\";\n      HOTKEY   \"O\";\n      LEVEL    ACC_ZOOM\n\n   if oUser():lAdministrador()\n\n      DEFINE BTNSHELL oRpl RESOURCE \"BMPCHG\" GROUP OF oWndBrw ;\n         NOBORDER ;\n         MENU     This:Toggle() ;\n         ACTION   ( TDlgFlt():New( aItmFacCli(), dbfFacCliT ):ChgFields(), oWndBrw:Refresh() ) ;\n         TOOLTIP  \"Cambiar campos\" ;\n         LEVEL    ACC_EDIT\n\n         DEFINE BTNSHELL RESOURCE \"BMPCHG\" OF oWndBrw ;\n            NOBORDER ;\n            ACTION   ( TDlgFlt():New( aColFacCli(), dbfFacCliL ):ChgFields(), oWndBrw:Refresh() ) ;\n            TOOLTIP  \"Lineas\" ;\n            FROM     oRpl ;\n            CLOSED ;\n            LEVEL    ACC_EDIT\n\n   end if\n\n   DEFINE BTNSHELL RESOURCE \"INFO\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( TTrazaDocumento():Activate( FAC_CLI, ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) ) ;\n      TOOLTIP  \"I(n)forme documento\" ;\n      HOTKEY   \"N\" ;\n      LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL oRotor RESOURCE \"ROTOR\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( oRotor:Expand() ) ;\n      TOOLTIP  \"Rotor\" ;\n\n      DEFINE BTNSHELL RESOURCE \"USER1_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( EdtCli( ( dbfFacCliT )->cCodCli ) );\n         TOOLTIP  \"Modificar cliente\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"INFO\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( InfCliente( ( dbfFacCliT )->cCodCli ) );\n         TOOLTIP  \"Informe de cliente\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"WORKER\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( EdtObras( ( dbfFacCliT )->cCodCli, ( dbfFacCliT )->cCodObr, dbfObrasT ) );\n         TOOLTIP  \"Modificar obra\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"NOTEBOOK_USER1_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( if( !Empty( ( dbfFacCliT )->cNumPre ), ZooPreCli( ( dbfFacCliT )->cNumPre ), MsgStop( \"No hay presupusto asociado\" ) ) );\n         TOOLTIP  \"Visualizar presupuesto\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"CLIPBOARD_EMPTY_USER1_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( if( !Empty( ( dbfFacCliT )->cNumPed ), ZooPedCli( ( dbfFacCliT )->cNumPed ), MsgStop( \"No hay pedido asociado\" ) ) );\n         TOOLTIP  \"Visualizar pedido\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_PLAIN_USER1_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( if( !Empty( ( dbfFacCliT )->cNumAlb ), ZooAlbCli( ( dbfFacCliT )->cNumAlb ), MsgStop( \"No hay albarán asociado\" ) ) );\n         TOOLTIP  \"Visualizar albarán\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"Money2_businessman_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( RecCli( , , { ( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) } ) );\n         TOOLTIP  \"Modificar recibo\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_MONEY2_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( FacAntCli( nil, nil, ( dbfFacCliT )->cCodCli ) );\n         TOOLTIP  \"Generar anticipo\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"Note_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( FacCliNotas() );\n         TOOLTIP  \"Generar nota de agenda\" ;\n         FROM     oRotor ;\n\n   if ( \"VI\" $ cParamsMain() )\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_MONEY2_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( ExcelIsra() );\n         TOOLTIP  \"Excel israel\" ;\n         FROM     oRotor ;\n\n   end if\n\n   DEFINE BTNSHELL RESOURCE \"END\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:End() ) ;\n      TOOLTIP  \"(S)alir\" ;\n      HOTKEY   \"S\" ;\n      ALLOW EXIT ;\n\n   if !oUser():lFiltroVentas()\n      oWndBrw:oActiveFilter:aTField       := aItmFacCli()\n      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt\n      oWndBrw:oActiveFilter:cTipFilter    := FAC_CLI\n   end if\n\n   ACTIVATE WINDOW oWndBrw VALID ( CloseFiles() )\n\n   EnableAcceso()\n\n   if !Empty( cCodCli ) .or. !Empty( cCodArt ) .or. !Empty( aNumDoc[ 1 ] ) .or. !Empty( aNumDoc[ 2 ] ) .or. !Empty( aNumDoc[ 3 ] ) .or. !Empty( aNumDoc[ 4 ] ) .or. !Empty( aNumDoc[ 5 ] )\n      oWndBrw:RecAdd()\n      cCodCli        := nil\n      cCodArt        := nil\n      aNumDoc        := Array( 5 )\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nSTATIC FUNCTION EdtRec( aTmp, aGet, dbfFacCliT, oBrw, cCodCli, cCodArt, nMode, aNumDoc )\n\n   local n\n   local oDlg\n   local oFld\n   local oBrwLin\n   local oBrwInc\n   local oBrwDoc\n   local oBrwAnt\n   local oBrwPgo\n   local oSay              := Array( 12 )\n   local cSay              := Array( 12 )\n   local oSayLabels        := Array(  5 )\n   local oBmpDiv\n   local oBmpEmp\n   local nOrd\n   local oBtn\n   local oBtnKit\n   local oTlfCli\n   local cTlfCli\n   local oRieCli\n   local nRieCli\n   local oGetMasDiv\n   local cGetMasDiv        := \"\"\n   local cGetPctRet\n   local cSerie            := cNewSer( \"nFacCli\", dbfCount )\n   local lWhen             := if( oUser():lAdministrador(), nMode != ZOOM_MODE, if( nMode == EDIT_MODE, !aTmp[ _LCLOFAC ], nMode != ZOOM_MODE ) )\n   local oSayGetRnt\n   local cTipFac\n   local oSayDias\n   local oBmpGeneral\n\n   do case\n   case IsNil( aNumDoc )\n      aNumDoc              := Array( 5 )\n   case IsArray( aNumDoc )\n      ASize( aNumDoc, 5 )\n   end if\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios----------------\n   */\n\n   cOldCodCli              := aTmp[ _CCODCLI ]\n\n   /*\n   Operaciones segun el mode---------------------------------------------------\n   */\n\n   do case\n   case nMode == APPD_MODE\n\n      if !lCurSesion()\n         MsgStop( \"No hay sesiones activas, imposible añadir documentos\" )\n         Return .f.\n      end if\n\n      if !lCajaOpen( oUser():cCaja() ) .and. !oUser():lAdministrador()\n         msgStop( \"Esta caja \" + oUser():cCaja() + \" esta cerrada.\" )\n         Return .f.\n      end if\n\n      aTmp[ _CTURFAC    ]  := cCurSesion()\n      aTmp[ _DFECENT    ]  := Ctod(\"\")\n      aTmp[ _CCODALM    ]  := oUser():cAlmacen()\n      aTmp[ _CCODCAJ    ]  := oUser():cCaja()\n      aTmp[ _CCODPAGO   ]  := cDefFpg()\n      aTmp[ _CDIVFAC    ]  := cDivEmp()\n      aTmp[ _NVDVFAC    ]  := nChgDiv( aTmp[ _CDIVFAC ], dbfDiv )\n      aTmp[ _CSUFFAC    ]  := RetSufEmp()\n      aTmp[ _LLIQUIDADA ]  := .f.\n      aTmp[ _LSNDDOC    ]  := .t.\n      aTmp[ _CCODPRO    ]  := cProCnt()\n      aTmp[ _CCODUSR    ]  := cCurUsr()\n      aTmp[ _DFECIMP    ]  := Ctod(\"\")\n      aTmp[ _CCODDLG    ]  := oUser():cDelegacion()\n      aTmp[ _LIVAINC    ]  := uFieldEmpresa( \"lIvaInc\" )\n      aTmp[ _CMANOBR    ]  := Padr( \"Gastos\", 250 )\n      aTmp[ _NIVAMAN    ]  := nIva( dbfIva, cDefIva() )\n      aTmp[ _NENTINI    ]  := RetFld( aTmp[ _CCODPAGO ], dbfFPago, \"nEntIni\" )\n      aTmp[ _NPCTDTO    ]  := RetFld( aTmp[ _CCODPAGO ], dbfFPago, \"nPctDto\" )\n\n   case nMode == DUPL_MODE\n\n      if !lCurSesion()\n         MsgStop( \"No hay sesiones activas, imposible añadir documentos\" )\n         Return .f.\n      end if\n\n      if !lCajaOpen( oUser():cCaja() ) .and. !oUser():lAdministrador()\n         msgStop( \"Esta caja \" + oUser():cCaja() + \" esta cerrada\" )\n         Return .f.\n      end if\n\n      aTmp[ _DFECFAC    ]  := GetSysDate()\n      aTmp[ _CTURFAC    ]  := cCurSesion()\n      aTmp[ _CNUMALB    ]  := \"\"\n      aTmp[ _CNUMPED    ]  := \"\"\n      aTmp[ _CNUMPRE    ]  := \"\"\n      aTmp[ _LCONTAB    ]  := .f.\n      aTmp[ _LIMPALB    ]  := .f.\n      aTmp[ _LCLOFAC    ]  := .f.\n      aTmp[ _LSNDDOC    ]  := .t.\n      aTmp[ _CNFC       ]  := Space( 20 )\n      aTmp[ _NENTINI    ]  := RetFld( aTmp[ _CCODPAGO ], dbfFPago, \"nEntIni\" )\n      aTmp[ _NPCTDTO    ]  := RetFld( aTmp[ _CCODPAGO ], dbfFPago, \"nPctDto\" )\n\n   case nMode == EDIT_MODE\n\n      if aTmp[ _LCONTAB ] .and.;\n         !ApoloMsgNoYes(  \"La modificación de esta factura puede provocar descuadres contables.\" + CRLF + \"¿ Desea continuar ?\", \"Factura ya contabilizada\" )\n         return .f.\n      end if\n\n   end case\n\n   /*\n   Tipo de presupuesto---------------------------------------------------------\n   */\n\n   cTipFac                 := aTipFac[ if( aTmp[ _LALQUILER ], 2, 1  ) ]\n\n   /*\n   Comineza la transaccion-----------------------------------------------------\n   */\n\n   if BeginTrans( aTmp, nMode )\n      Return .f.\n   end if\n\n   /*\n   Necestamos el orden el la primera clave-------------------------------------\n   */\n\n   nOrd                    := ( dbfFacCliT )->( ordSetFocus( 1 ) )\n\n   /*\n   Valores por defecto---------------------------------------------------------\n   */\n\n   if Empty( Rtrim( aTmp[ _CSERIE ] ) )\n      aTmp[ _CSERIE ]      := cSerie\n   end if\n\n   if Empty( aTmp[ _NTARIFA ] )\n      aTmp[ _NTARIFA ]     := Max( uFieldEmpresa( \"nPreVta\" ), 1 )\n   end if\n\n   if Empty( aTmp[ _CDIVFAC ] )\n      aTmp[ _CDIVFAC ]     := cDivEmp()\n   end if\n\n   if Empty( aTmp[ _CDTOESP ] )\n      aTmp[ _CDTOESP ]     := Padr( \"General\", 50 )\n   end if\n\n   if Empty( aTmp[ _CDPP ] )\n      aTmp[ _CDPP ]        := Padr( \"Pronto pago\", 50 )\n   end if\n\n   /*\n   Mostramos datos de clientes-------------------------------------------------\n   */\n\n   nRieCli                 := oStock:nRiesgo( aTmp[ _CCODCLI ] )\n\n   if Empty( aTmp[ _CTLFCLI ] )\n      aTmp[ _CTLFCLI ]     := RetFld( aTmp[ _CCODCLI ], dbfClient, \"Telefono\" )\n   end if\n\n   cPicUnd                 := MasUnd()                            // Picture de las unidades\n   cPouDiv                 := cPouDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture de la divisa\n   cPorDiv                 := cPorDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture de la divisa redondeada\n   cPinDiv                 := cPinDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture de la divisa\n   nDouDiv                 := nDouDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Decimales de la divisa\n   nRouDiv                 := nRouDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Decimales de la divisa redondeada\n   cPpvDiv                 := cPpvDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture del punto verde\n   nDpvDiv                 := nDpvDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Decimales de redondeo del punto verde\n\n   /*\n   Etiquetas-------------------------------------------------------------------\n   */\n\n   cSay[ 2 ]               := RetFld( aTmp[ _CCODALM ], dbfAlm )\n   cSay[ 4 ]               := RetFld( aTmp[ _CCODPAGO], dbfFPago )\n   cSay[ 8 ]               := RetFld( aTmp[ _CCODRUT ], dbfRuta )\n   cSay[ 3 ]               := RetFld( aTmp[ _CCODAGE ], dbfAgent )\n   cSay[ 5 ]               := RetFld( aTmp[ _CCODTAR ], dbfTarPreT )\n   cSay[ 7 ]               := RetFld( aTmp[ _CCODCLI ] + aTmp[ _CCODOBR ], dbfObrasT, \"cNomObr\" )\n   cSay[ 9 ]               := oTrans:cNombre( aTmp[ _CCODTRN ] )\n   cSay[ 10]               := RetFld( aTmp[ _CCODCAJ ], dbfCajT )\n   cSay[ 11]               := RetFld( aTmp[ _CCODUSR ], dbfUsr, \"cNbrUse\" )\n   cSay[ 12]               := RetFld( cCodEmp() + aTmp[ _CCODDLG ], dbfDelega, \"cNomDlg\" )\n\n   /*\n   Inicializamos el valor de la tarifa por si cambian--------------------------\n   */\n\n   InitTarifaCabecera( aTmp[ _NTARIFA ] )\n\n   /*\n   Apertura de la caja de dilogo-----------------------------------------------\n   */\n\n   DEFINE DIALOG oDlg RESOURCE \"FACCLI\" TITLE LblTitle( nMode ) + \"facturas a clientes\"\n\n      /*\n      Define de los Folders\n      ------------------------------------------------------------------------\n      */\n\n      REDEFINE FOLDER oFld ;\n         ID       400 ;\n         OF       oDlg ;\n         PROMPT   \"&Factura\",;\n                  \"Da&tos\",;\n                  \"&Incidencias\",;\n                  \"D&ocumentos\" ;\n         DIALOGS  \"FACCLI_1\",;\n                  \"FACCLI_2\",;\n                  \"PEDCLI_3\",;\n                  \"PEDCLI_4\"\n\n      /*\n      Datos del cliente--------------------------------------------------------\n      */\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"Factura_cliente_48_alpha\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[1]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"Folder2_red_alpha_48\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[2]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"Information_48_alpha\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[3]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"Address_book2_alpha_48\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[4]\n\n      REDEFINE GET aGet[ _CCODCLI ] ;\n         VAR      aTmp[ _CCODCLI ] ;\n         ID       170 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( loaCli( aGet, aTmp, nMode, oRieCli ), RecalculaTotal( aTmp ) );\n         BITMAP   \"Lupa\" ;\n         ON HELP  ( BrwClient( aGet[ _CCODCLI ], aGet[ _CNOMCLI ] ), ::lValid() ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNOMCLI ] VAR aTmp[ _CNOMCLI ] ;\n         ID       180 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      if uFieldEmpresa( \"nCifRut\" ) == 1\n\n      REDEFINE GET aGet[ _CDNICLI ] VAR aTmp[ _CDNICLI ] ;\n         ID       181 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         VALID    ( CheckCif( aGet[ _CDNICLI ] ) );\n         OF       oFld:aDialogs[1]\n\n      else\n\n      REDEFINE GET aGet[ _CDNICLI ] VAR aTmp[ _CDNICLI ] ;\n         ID       181 ;\n         PICTURE  \"@R 999999999-9\" ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         VALID    ( CheckRut( aGet[ _CDNICLI ] ) );\n         OF       oFld:aDialogs[1]\n\n      end if\n\n      REDEFINE GET aGet[ _CDIRCLI ] VAR aTmp[ _CDIRCLI ] ;\n         ID       183 ;\n         BITMAP   \"Environnment_View_16\" ;\n         ON HELP  GoogleMaps( aTmp[ _CDIRCLI ], Rtrim( aTmp[ _CPOBCLI ] ) + Space( 1 ) + Rtrim( aTmp[ _CPRVCLI ] ) ) ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOSCLI ] VAR aTmp[ _CPOSCLI ] ;\n         ID       184 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOBCLI ] VAR aTmp[ _CPOBCLI ] ;\n         ID       185 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPRVCLI ] VAR aTmp[ _CPRVCLI ] ;\n         ID       186 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CTLFCLI ] VAR aTmp[ _CTLFCLI ] ;\n         ID       187 ;\n         COLOR    CLR_GET ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oRieCli VAR nRieCli;\n         ID       182 ;\n         WHEN     ( nMode != ZOOM_MODE );\n         PICTURE  cPorDiv ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NTARIFA ] VAR aTmp[ _NTARIFA ];\n         ID       171 ;\n         SPINNER ;\n         MIN      1 ;\n         MAX      6 ;\n         PICTURE  \"9\" ;\n         VALID    ( ChangeTarifaCabecera( aTmp[ _NTARIFA ], dbfTmpLin, oBrwLin ) ) ;\n         WHEN     ( nMode != ZOOM_MODE .and. ( lUsrMaster() .or. oUser():lCambiarPrecio() ) );\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de Divisas______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CDIVFAC ] ;\n         VAR      aTmp[ _CDIVFAC ];\n         WHEN     ( nMode == APPD_MODE .AND. ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         VALID    ( cDivOut( aGet[ _CDIVFAC ], oBmpDiv, aGet[ _NVDVFAC ], @cPouDiv, @nDouDiv, @cPorDiv, @nRouDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, dbfDiv, oBandera ) );\n         PICTURE  \"@!\";\n         ID       190 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  BrwDiv( aGet[ _CDIVFAC ], oBmpDiv, aGet[ _NVDVFAC ], dbfDiv, oBandera ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE BITMAP oBmpDiv ;\n         RESOURCE ( cBmpDiv( aTmp[ _CDIVFAC ], dbfDiv ) );\n         ID       191;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NVDVFAC ] VAR aTmp[ _NVDVFAC ];\n         WHEN     ( .f. ) ;\n         ID       192 ;\n         PICTURE  \"@E 999,999.9999\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODUSR ] VAR aTmp[ _CCODUSR ];\n         ID       125 ;\n         WHEN     ( .f. ) ;\n         VALID    ( SetUsuario( aGet[ _CCODUSR ], oSay[ 11 ], nil, dbfUsr ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 11 ] VAR cSay[ 11 ] ;\n         ID       126 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      IGIC Incluido-------------------------------------------------------------\n      */\n\n      REDEFINE CHECKBOX aGet[ _LIVAINC ] VAR aTmp[ _LIVAINC ] ;\n         ID       200 ;\n         WHEN     ( ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de Tarifa_______________________________________________________________\n      */\n\n      REDEFINE GET aGet[_CCODTAR] VAR aTmp[_CCODTAR] ;\n         ID       210 ;\n         WHEN     ( lWhen .and. oUser():lAdministrador() ) ;\n         VALID    ( cTarifa( aGet[_CCODTAR], oSay[ 5 ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwTarifa( aGet[_CCODTAR], oSay[ 5 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 5 ] VAR cSay[ 5 ] ;\n         WHEN     .F. ;\n         ID       211 ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de obra__________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODOBR ] ;\n         VAR      aTmp[ _CCODOBR ] ;\n         ID       220 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cObras( aGet[ _CCODOBR ], oSay[ 7 ], aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( brwObras( aGet[ _CCODOBR ], oSay[ 7 ], aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 7 ] VAR cSay[ 7 ] ;\n         WHEN     .F. ;\n         ID       221 ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de almacen________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODALM ] VAR aTmp[ _CCODALM ] ;\n         ID       230 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cAlmacen( aGet[ _CCODALM ], , oSay[ 2 ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAlmacen( aGet[ _CCODALM ], oSay[ 2 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 2 ] VAR cSay[ 2 ] ;\n         ID       231 ;\n         WHEN     ( lWhen ) ;\n         BITMAP   \"Bot\" ;\n         ON HELP  ( ExpAlmacen( aTmp[ _CCODALM ], dbfTmpLin, oBrwLin ) ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Formas de pago_____________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODPAGO ] VAR aTmp[ _CCODPAGO ];\n         ID       240 ;\n         PICTURE  \"@!\" ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         VALID    ( cFPago( aGet[ _CCODPAGO ], dbfFPago, oSay[ 4 ], aGet[ _NENTINI ], aGet[ _NPCTDTO ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwFPago( aGet[ _CCODPAGO ], oSay[ 4 ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 4 ] VAR cSay[ 4 ];\n         ID       241 ;\n         WHEN     .F. ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Banco del cliente--------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CBANCO ] VAR aTmp[ _CBANCO ];\n         ID       410 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwBncCli( aGet[ _CBANCO ], aGet[ _CENTBNC ], aGet[ _CSUCBNC ], aGet[ _CDIGBNC ], aGet[ _CCTABNC ], aTmp[ _CCODCLI ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CENTBNC ] VAR aTmp[ _CENTBNC ];\n         ID       420 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CSUCBNC ] VAR aTmp[ _CSUCBNC ];\n         ID       421 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDIGBNC ] VAR aTmp[ _CDIGBNC ];\n         ID       422 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCTABNC ] VAR aTmp[ _CCTABNC ];\n         ID       423 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) );\n         PICTURE  \"9999999999\" ;\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de Agente___________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODAGE ] VAR aTmp[ _CCODAGE ] ;\n         ID       250 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cAgentes( aGet[ _CCODAGE ], dbfAgent, oSay[ 3 ], aGet[ _NPCTCOMAGE ], dbfAgeCom ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAgentes( aGet[ _CCODAGE ], oSay[ 3 ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 3 ] VAR cSay[ 3 ] ;\n         ID       251 ;\n         WHEN     ( !Empty( aTmp[ _CCODAGE ] ) .AND. lWhen ) ;\n         BITMAP   \"Bot\" ;\n         ON HELP  ( ExpAgente( aTmp[ _CCODAGE ], aTmp[ _NPCTCOMAGE ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NPCTCOMAGE ] VAR aTmp[ _NPCTCOMAGE ] ;\n         ID       252 ;\n         WHEN     ( !Empty( aTmp[ _CCODAGE ] ) .AND. lWhen ) ;\n         PICTURE  \"@E 99.99\" ;\n         SPINNER;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGetAge VAR nTotAge ;\n         ID       253 ;\n         WHEN     ( .f. );\n         OF       oFld:aDialogs[1]\n\n      /*\n      Ruta____________________________________________________________________\n      */\n\n      REDEFINE GET aGet[_CCODRUT] VAR aTmp[_CCODRUT] ;\n         ID       260 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cRuta( aGet[_CCODRUT], dbfRuta, oSay[ 8 ] ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwRuta( aGet[_CCODRUT ], dbfRuta, oSay[ 8 ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 8 ] VAR cSay[ 8 ] ;\n         ID       261 ;\n         WHEN     .F. ;\n         OF       oFld:aDialogs[1]\n\n      /*\n       Botones de acceso________________________________________________________________\n       */\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         ACTION   ( AppDeta( oBrwLin, bEdtDet, aTmp, .f. ) )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         ACTION   ( EdtDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) )\n\n      REDEFINE BUTTON ;\n         ID       502 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo )  ) ;\n         ACTION   ( WinDelRec( oBrwLin, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) );\n\n      REDEFINE BUTTON ;\n         ID       503 ;\n         OF       oFld:aDialogs[1] ;\n         ACTION   ( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, .f., nMode, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       515 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo )  ) ;\n         ACTION   ( AppDeta( oBrwLin, bEdtDet, aTmp, .t. ) )\n\n      REDEFINE BUTTON ;\n         ID       524 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( DbSwapUp( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       525 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( DbSwapDown( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON oBtnKit;\n         ID       526 ;\n         OF       oFld:aDialogs[1] ;\n         ACTION   ( ShowKit( dbfFacCliT, dbfTmpLin, oBtnKit, oBrwLin, .t. ) )\n\n      /*\n      Detalle------------------------------------------------------------------\n      */\n\n      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )\n \n      oBrwLin:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwLin:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n      oBrwLin:bClrStd         := {|| { if( ( dbfTmpLin )->lKitChl, CLR_GRAY, CLR_BLACK ), GetSysColor( COLOR_WINDOW ) } }\n\n      oBrwLin:cAlias          := dbfTmpLin\n\n      oBrwLin:nMarqueeStyle   := 6\n      oBrwLin:cName           := \"Factura de cliente.Detalle\"\n\n      oBrwLin:CreateFromResource( IDOK )\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Oferta\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }\n         :nWidth              := 60\n         :SetCheck( { \"Star_Red_16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Número\"\n         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }\n         :cEditPicture        := \"9999\"\n         :nWidth              := 55\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Código\"\n         :bEditValue          := {|| ( dbfTmpLin )->cRef }\n         :nWidth              := 60\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"C. Barras\"\n         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }\n         :nWidth              := 100\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Descripción\"\n         :bEditValue          := {|| Descrip( dbfTmpLin ) }\n         :nWidth              := 240\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Código proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cCodPrv ) }\n         :nWidth              := 50\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Nombre proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cNomPrv ) }\n         :nWidth              := 150\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Referencia proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cRefPrv ) }\n         :nWidth              := 50\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Prop. 1\"\n         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }\n         :nWidth              := 40\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Prop. 2\"\n         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }\n         :nWidth              := 40\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Lote\"\n         :bEditValue          := {|| ( dbfTmpLin )->cLote }\n         :nWidth              := 60\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Caducidad\"\n         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecCad ) }\n         :nWidth              := 60\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := cNombreUnidades()\n         :bEditValue          := {|| nTotNFacCli( dbfTmpLin ) }\n         :cEditPicture        := cPicUnd\n         :nWidth              := 60\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Unidad de medición\"\n         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }\n         :nWidth              := 105\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Alm.\"\n         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }\n         :nWidth              := 34\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Precio\"\n         :bEditValue          := {|| nTotUFacCli( dbfTmpLin, nDouDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 60\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Dto.\"\n         :bEditValue          := {|| ( dbfTmpLin )->nDto }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 55\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Dto. Lin.\"\n         :bEditValue          := {|| nDtoUFacCli( dbfTmpLin, nDouDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 50\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Prm.\"\n         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 40\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Age\"\n         :bEditValue          := {|| ( dbfTmpLin )->nComAge }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 40\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% \" + cImp()\n         :bEditValue          := {|| ( dbfTmpLin )->nIva }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 45\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Portes\"\n         :bEditValue          := {|| nTrnUFacCli( dbfTmpLin, nDpvDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 70\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Punto verde\"\n         :bEditValue          := {|| nPntUFacCli( dbfTmpLin, nDpvDiv ) }\n         :cEditPicture        := cPpvDiv\n         :nWidth              := 70\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Imp. especiales\"\n         :bEditValue          := {|| nTotIFacCli( dbfTmpLin, nDouDiv, nRouDiv ) }\n         :cEditPicture        := cPorDiv\n         :nWidth              := 80\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Total\"\n         :bEditValue          := {|| nTotLFacCli( dbfTmpLin, nDouDiv, nRouDiv, nil, .t., aTmp[ _LOPERPV ], .t. ) }\n         :cEditPicture        := cPorDiv\n         :nWidth              := 94\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Garantia\"\n         :bEditValue          := {|| ( dbfTmpLin )->nMesGrt }\n         :cEditPicture        := \"99\"\n         :nWidth              := 30\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Fecha\"\n         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecha ) }\n         :nWidth              := 80\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Im. Imprimido\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {||( dbfTmpLin )->lImpLin }\n         :nWidth              := 20\n         :lHide               := .t.\n         :SetCheck( { \"Lbl16\", \"Nil16\" } )\n      end with\n\n      if nMode != ZOOM_MODE\n         oBrwLin:bLDblClick   := {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) }\n      end if\n\n     /*\n     Descuentos________________________________________________________________\n     */\n\n      REDEFINE GET aGet[ _CDTOESP ] VAR aTmp[ _CDTOESP ] ;\n         ID       299 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n     REDEFINE GET aGet[_NDTOESP ] VAR aTmp[ _NDTOESP ] ;\n         ID       300 ;\n         PICTURE  \"@ER 999.99%\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         SPINNER;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDPP ] VAR aTmp[ _CDPP ] ;\n         ID       309 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDPP ] VAR aTmp[ _NDPP ];\n         ID       310 ;\n         PICTURE  \"@ER 999.99%\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         SPINNER;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n     /*\n     Descuentos definidos por el usuario_______________________________________\n     */\n\n      REDEFINE GET aGet[ _CDTOUNO ] VAR aTmp[ _CDTOUNO ] ;\n         ID       320 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTOUNO ] VAR aTmp[ _NDTOUNO ];\n         ID       330 ;\n         PICTURE  \"@ER 999.99%\" ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         SPINNER;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDTODOS ] VAR aTmp[ _CDTODOS ] ;\n         ID       340 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTODOS ] VAR aTmp[ _NDTODOS ];\n         ID       350 ;\n         PICTURE  \"@ER 999.99%\" ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         SPINNER;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Descuento de vodafone----------------------------------------------------\n      */\n\n      REDEFINE CHECKBOX aGet[ _LPAYCLI ] VAR aTmp[ _LPAYCLI ] ;\n         ID       361 ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET aGet[ _NPAYCLI ] VAR aTmp[ _NPAYCLI ];\n         ID       360 ;\n         PICTURE  cPorDiv ;\n         WHEN     aTmp[ _LPAYCLI ] ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET aGet[ _CMANOBR ] VAR aTmp[ _CMANOBR ] ;\n         ID       411 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NMANOBR ] VAR aTmp[ _NMANOBR ] ;\n         ID       400 ;\n         PICTURE  cPorDiv ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NIVAMAN ] VAR aTmp[ _NIVAMAN ] ;\n         ID       412 ;\n         WHEN     ( lWhen .and. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( lTiva( dbfIva, aTmp[ _NIVAMAN ] ) .and. RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIva( aGet[ _NIVAMAN ], dbfIva, , .t. ) );\n         OF       oFld:aDialogs[1]\n\n      /*\n      Cajas Bases de los IGICS____________________________________________________________\n      */\n\n      oBrwIva                        := IXBrowse():New( oFld:aDialogs[ 1 ] )\n\n      oBrwIva:bClrSel                := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwIva:bClrSelFocus           := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwIva:SetArray( aTotIva, , , .f. )\n\n      oBrwIva:nMarqueeStyle          := 6\n      oBrwIva:lRecordSelector        := .f.\n      oBrwIva:lHScroll               := .f.\n\n      oBrwIva:CreateFromResource( 370 )\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"Base\"\n         if uFieldEmpresa( \"lIvaImpEsp\" )\n            :bStrData      := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil, Trans( ( aTotIva[ oBrwIva:nArrayAt, 2 ] + aTotIva[ oBrwIva:nArrayAt, 6 ] ), cPorDiv ), \"\" ) }\n         else\n            :bStrData      := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil, Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPorDiv ), \"\" ) }\n         end if\n         :nWidth           := 95\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader       := \"%\" + cImp()\n         :bStrData      := {|| if( !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ), aTotIva[ oBrwIva:nArrayAt, 3 ], \"\" ) }\n         :bEditValue    := {|| aTotIva[ oBrwIva:nArrayAt, 3 ] }\n         :nWidth        := 78\n         :cEditPicture  := \"@E 999.99\"\n         :nDataStrAlign := 1\n         :nHeadStrAlign := 1\n         :nFootStrAlign := 1\n         :nEditType     := 1\n         :bEditWhen     := {|| !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ) }\n         :bOnPostEdit   := {|o,x| EdtIva( o, x, aTotIva[ oBrwIva:nArrayAt, 3 ], dbfTmpLin, dbfIva, oBrwLin ), RecalculaTotal( aTmp ) }\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := cImp()\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil, Trans( aTotIva[ oBrwIva:nArrayAt, 8 ], cPorDiv ), \"\" ) }\n         :nWidth           := 76\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"% R.E.\"\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil .and. aTmp[ _LRECARGO ],  Trans( aTotIva[ oBrwIva:nArrayAt, 4 ], \"@E 999.99\"), \"\" ) }\n         :nWidth           := 71\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"R.E.\"\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil .and. aTmp[ _LRECARGO ],  Trans( aTotIva[ oBrwIva:nArrayAt, 9 ], cPorDiv ),    \"\" ) }\n         :nWidth           := 71\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      /*\n      Totales de facturas\n      ------------------------------------------------------------------------\n      */\n\n      REDEFINE SAY oGetNet VAR nTotNet ;\n         ID       401 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetIva VAR nTotIva ;\n         ID       405 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE CHECKBOX aGet[ _LRECARGO ] ;\n         VAR      aTmp[ _LRECARGO ] ;\n         ID       406 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetReq VAR nTotReq ;\n         ID       407 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTotal VAR nTotal ;\n         ID       485 ;\n         FONT     oFont ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE CHECKBOX aGet[ _LOPERPV ] ;\n         VAR      aTmp[ _LOPERPV ] ;\n         ID       409 ;\n         WHEN     ( lWhen .AND. !lRecibosPagadosTmp( dbfTmpPgo ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ), oBrwLin:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTotPnt VAR nTotPnt;\n         ID       404 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTrn VAR nTotTrn;\n         ID       402 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTotIvm VAR nTotIvm;\n         ID       403 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oSayGetRnt ;\n         ID       800 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGetRnt VAR nTotRnt ;\n         ID       408 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetMasDiv VAR cGetMasDiv;\n         ID       488 ;\n         FONT     oFont ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE COMBOBOX aGet[ _NTIPRET ] VAR aTmp[ _NTIPRET ] ;\n         ITEMS    { \"Ret. S/Base\", \"Ret. S/Total\" };\n         ID       440 ;\n         WHEN     ( lWhen ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         VALID    ( RecalculaTotal( aTmp ) );\n         OF       oFld:aDialogs[ 1 ]\n\n     REDEFINE GET aGet[ _NPCTRET ] VAR aTmp[ _NPCTRET ] ;\n         ID       490 ;\n         PICTURE  \"@E 999.99\" ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         SPINNER;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetPctRet VAR cGetPctRet;\n         ID       491 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CSERIE] VAR aTmp[_CSERIE] ;\n         ID       100 ;\n         PICTURE  \"@!\" ;\n         SPINNER ;\n         ON UP    ( UpSerie( aGet[_CSERIE] ) );\n         ON DOWN  ( DwSerie( aGet[_CSERIE] ) );\n         WHEN     ( nMode == APPD_MODE .OR. nMode == DUPL_MODE );\n         VALID    ( aTmp[_CSERIE] >= \"A\" .AND. aTmp[_CSERIE] <= \"Z\" ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CSERIE ]:bLostFocus := {|| aGet[ _CCODPRO ]:cText( cProCnt( aTmp[ _CSERIE ] ) ) }\n\n      REDEFINE GET aGet[_NNUMFAC] VAR aTmp[_NNUMFAC] ;\n         ID       110 ;\n         PICTURE  \"999999999\" ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CSUFFAC] VAR aTmp[_CSUFFAC] ;\n         ID       120 ;\n         PICTURE  \"@!\" ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE COMBOBOX oTipFac VAR cTipFac ;\n         ID       217 ;\n         WHEN     ( ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         ITEMS    aTipFac ;\n         ON CHANGE( SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECFAC ] VAR aTmp[ _DFECFAC ] ;\n         ID       130 ;\n         SPINNER ;\n         ON HELP  aGet[ _DFECFAC ]:cText( Calendario( aTmp[ _DFECFAC ] ) ) ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNFC ] VAR aTmp[ _CNFC ] ;\n         ID       570 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECSAL ] VAR aTmp[ _DFECSAL ];\n         ID       111 ;\n         IDSAY    112 ;\n         SPINNER;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECENTR ] VAR aTmp[ _DFECENTR ];\n         ID       113 ;\n         IDSAY    114 ;\n         SPINNER;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oSayDias ;\n         VAR      ( aTmp[ _DFECENTR ] - aTmp[ _DFECSAL ] );\n         ID       115 ;\n         PICTURE  \"9999\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE BTNBMP oBtnPre ;\n         ID       601 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Notebook_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar presupuesto\" ;\n         ACTION   ( BrwPreCli( aGet[ _CNUMPRE ], dbfPreCliT, dbfPreCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BTNBMP oBtnPed ;\n         ID       602 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Clipboard_empty_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar pedido\" ;\n         ACTION   ( BrwPedCli( aGet[ _CNUMPED ], dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BTNBMP oBtnAlb ;\n         ID       603 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Document_plain_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar albaran\" ;\n         ACTION   ( BrwAlbCli( aGet[ _CNUMALB ], aGet[ _LIVAINC ] ) )\n\n      REDEFINE BTNBMP oBtnSat ;\n         ID       604 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Power-drill_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar albaran\" ;\n         ACTION   ( BrwSatCli( aGet[ _CNUMALB ], dbfSatCliT, dbfSatCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BUTTON oBtnGrp ;\n         ID       512 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( lWhen .and. Empty( aTmp[ _CNUMALB ] ) ) ;\n         ACTION   ( GrpAlb( aGet, aTmp, oBrwLin  ), oBrwPgo:Refresh() )\n\n      REDEFINE GET aGet[ _CNUMALB ] VAR aTmp[ _CNUMALB ] ;\n         ID       150 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cAlbCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) ) ;\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNUMPED ] VAR aTmp[ _CNUMPED ] ;\n         ID       151 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) );\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNUMPRE ] VAR aTmp[ _CNUMPRE ] ;\n         ID       152 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cPreCli( aGet, aTmp, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) ) ;\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNUMSAT ] VAR aTmp[ _CNUMSAT ] ;\n         ID       153 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cSatCli( aGet, aTmp, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ), RecalculaTotal( aTmp ) ) ;\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n     REDEFINE GET aGet[ _NENTINI ] ;\n         VAR      aTmp[ _NENTINI ] ;\n         ID       550 ;\n         IDSAY    552 ;\n         PICTURE  \"@E 999.99\" ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         SPINNER;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGetEnt VAR nTotEnt ;\n         ID       551 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n     REDEFINE GET aGet[ _NPCTDTO ] ;\n         VAR      aTmp[ _NPCTDTO ] ;\n         ID       560 ;\n         IDSAY    562 ;\n         PICTURE  \"@E 999.99\" ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         SPINNER;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGetDtoEnt VAR nTotDtoEnt ;\n         ID       561 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Segunda caja de diálogo--------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CCODDLG ] VAR aTmp[ _CCODDLG ] ;\n         ID       300 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 12 ] VAR cSay[ 12 ] ;\n         ID       301 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Transportistas-----------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CCODTRN ] VAR aTmp[ _CCODTRN ] ;\n         ID       235 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( LoadTrans( aTmp, aGet[ _CCODTRN ], aGet[ _NKGSTRN ], oSay[ 9 ] ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( oTrans:Buscar( aGet[ _CCODTRN ] ), .t. );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 9 ] VAR cSay[ 9 ] ;\n         ID       236 ;\n         WHEN     .F. ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _NKGSTRN ] VAR aTmp[ _NKGSTRN ] ;\n         ID       237 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Cajas____________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODCAJ ] VAR aTmp[ _CCODCAJ ];\n         WHEN     ( lWhen ) ;\n         VALID    cCajas( aGet[ _CCODCAJ ], dbfCajT, oSay[ 10 ] ) ;\n         ID       165 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwCajas( aGet[ _CCODCAJ ], oSay[ 10 ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 10 ] VAR cSay[ 10 ] ;\n         ID       166 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CCODPRO] VAR aTmp[_CCODPRO] ;\n         ID       170 ;\n         PICTURE  \"@R ###.######\" ;\n         WHEN     ( nLenCuentaContaplus() != 0 .AND. lWhen ) ;\n         VALID    ( ChkProyecto( aTmp[_CCODPRO], oSay[ 6 ] ), .t. );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwProyecto( aGet[_CCODPRO], oSay[ 6 ] ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 6 ] VAR cSay[ 6 ] ;\n         ID       180 ;\n         WHEN     .F.;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_NBULTOS] VAR aTmp[_NBULTOS];\n         ID       128 ;\n         SPINNER;\n         PICTURE  \"999\" ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CSUFAC ] VAR aTmp[ _CSUFAC ] ;\n         ID       181 ;\n         WHEN     ( lWhen ) ;\n         PICTURE  \"@!\" ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Retirado por________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _DFECENT ] VAR aTmp[ _DFECENT ];\n         ID       162 ;\n         SPINNER;\n         WHEN     ( lWhen ) ;\n         ON HELP  aGet[_DFECENT]:cText( Calendario( aTmp[_DFECENT] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CSUALB ] VAR aTmp[ _CSUALB ];\n         ID       163 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CRETPOR] VAR aTmp[_CRETPOR] ;\n         ID       160 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CRETMAT] VAR aTmp[_CRETMAT] ;\n         ID       161 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CCONDENT] VAR aTmp[_CCONDENT] ;\n         ID       230 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      /*Impresión ( informa de si está imprimido o no y de cuando se imprimió )*/\n\n      REDEFINE CHECKBOX aGet[ _LIMPRIMIDO ] VAR aTmp[ _LIMPRIMIDO ] ;\n         ID       120 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _DFECIMP ] VAR aTmp[ _DFECIMP ] ;\n         ID       121 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CHORIMP ] VAR aTmp[ _CHORIMP ] ;\n         ID       122 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      /*Exportacion a EDI ( informa de si está exportado o no y de cuando se exportó )*/\n\n      REDEFINE CHECKBOX aGet[ _LEXPEDI ] VAR aTmp[ _LEXPEDI ] ;\n         ID       130 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         ON CHANGE( lChangeEDI( aGet, aTmp ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _DFECEDI ] VAR aTmp[ _DFECEDI ] ;\n         ID       131 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CHOREDI ] VAR aTmp[ _CHOREDI ] ;\n         ID       132 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _MOBSERV ] VAR aTmp[ _MOBSERV ];\n         MEMO ;\n         ID       240 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _MCOMENT ] VAR aTmp[ _MCOMENT ];\n         MEMO ;\n         ID       250 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Pagos\n      -------------------------------------------------------------------------\n      */\n\n      oBrwPgo                 := IXBrowse():New( oFld:aDialogs[2] )\n\n      oBrwPgo:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwPgo:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwPgo:cAlias          := dbfTmpPgo\n      oBrwPgo:cName           := \"Factura de cliente.Pagos\"\n\n      oBrwPgo:nMarqueeStyle   := 6\n\n      oBrwPgo:CreateFromResource( 260 )\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Cr. Sesión cerrada\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {|| ( dbfTmpPgo )->lCloPgo }\n         :nWidth              := 20\n         :lHide               := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Cobrado\"\n         :bStrData            := {|| \"\" }\n         :bBmpData            := {|| nEstadoRecibo( dbfTmpPgo ) }\n         :nWidth              := 46\n         :AddResource( \"Cnt16\" )\n         :AddResource( \"Sel16\" )\n         :AddResource( \"UndoRed16\" )\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Cn. Contabilizado\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {|| ( dbfTmpPgo )->lConPgo }\n         :nWidth              := 20\n         :lHide               := .t.\n         :SetCheck( { \"Cnt16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Sesión\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cTurRec }\n         :nWidth              := 50\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Expedido\"\n         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dPreCob ) }\n         :nWidth              := 82\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Vencimiento\"\n         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dFecVto ) }\n         :nWidth              := 82\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Cobro\"\n         :bEditValue          := {|| DtoC( ( dbfTmpPgo )->dEntrada ) }\n         :lHide               := .t.\n         :nWidth              := 70\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Descripción\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cDescrip }\n         :nWidth              := 182\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Div.\"\n         :bEditValue          := {|| cSimDiv( ( dbfTmpPgo )->cDivPgo, dbfDiv ) }\n         :nWidth              := 30\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Importe\"\n         :bEditValue          := {|| ( dbfTmpPgo )->nImporte }\n         :cEditPicture        := cPorDiv\n         :nWidth              := 105\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      if nMode == EDIT_MODE\n         oBrwPgo:bLDblClick   := {|| ExtEdtRecCli( dbfTmpPgo, dbfFacCliT, dbfFacCliL, dbfAntCliT, dbfFPago, dbfAgent, dbfCajT, dbfIva, dbfDiv, oCtaRem, oBanco ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) }\n      end if\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[2];\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( ExtEdtRecCli( dbfTmpPgo, dbfFacCliT, dbfFacCliL, dbfAntCliT, dbfFPago, dbfAgent, dbfCajT, dbfIva, dbfDiv, oCtaRem, oBanco ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       502 ;\n         OF       oFld:aDialogs[2];\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( ExtDelRecCli( dbfTmpPgo ), oBrwPgo:Refresh(), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       506 ;\n         OF       oFld:aDialogs[2];\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( VisRecCli( ( dbfTmpPgo )->cSerie + Str( ( dbfTmpPgo )->nNumFac ) + ( dbfTmpPgo )->cSufFac + Str( ( dbfTmpPgo )->nNumRec ) + ( dbfTmpPgo )->cTipRec, .f. ) )\n\n      REDEFINE BUTTON ;\n         ID       505 ;\n         OF       oFld:aDialogs[2];\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( PrnRecCli( ( dbfTmpPgo )->cSerie + Str( ( dbfTmpPgo )->nNumFac ) + ( dbfTmpPgo )->cSufFac + Str( ( dbfTmpPgo )->nNumRec ) + ( dbfTmpPgo )->cTipRec, .f. ) )\n\n      /*\n      Anticipos\n      -------------------------------------------------------------------------\n      */\n\n      oBrwAnt                 := IXBrowse():New( oFld:aDialogs[2] )\n\n      oBrwAnt:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwAnt:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwAnt:cAlias          := dbfTmpAnt\n      oBrwAnt:cName           := \"Factura de cliente.Anticipos\"\n\n      oBrwAnt:nMarqueeStyle   := 6\n\n      oBrwAnt:CreateFromResource( 290 )\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Número\"\n         :bEditValue          := {|| ( dbfTmpAnt )->cSerAnt + \"/\" + AllTrim( Str( ( dbfTmpAnt )->nNumAnt ) ) + \"/\" + ( dbfTmpAnt )->cSufAnt }\n         :nWidth              := 70\n      end with\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Fecha\"\n         :bEditValue          := {|| Dtoc( ( dbfTmpAnt )->dFecAnt ) }\n         :nWidth              := 88\n      end with\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Cliente\"\n         :bEditValue          := {|| Rtrim( ( dbfTmpAnt )->cCodCli ) }\n         :nWidth              := 70\n      end with\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Nombre\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpAnt )->cNomCli ) }\n         :nWidth              := 194\n      end with\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Div.\"\n         :bEditValue          := {|| cSimDiv( ( dbfTmpAnt )->cDivAnt, dbfDiv ) }\n         :nWidth              := 30\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwAnt:AddCol() )\n         :cHeader             := \"Importe\"\n         :bEditValue          := {|| nTotAntCli( dbfTmpAnt, dbfIva, dbfDiv ) }\n         :cEditPicture        := cPorDiv\n         :nWidth              := 124\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      REDEFINE BUTTON ;\n         ID       270 ;\n         OF       oFld:aDialogs[ 2 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( BrwAntCli( , dbfAntCliT, dbfIva, dbfDiv, dbfTmpAnt, oBrwAnt ), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       400 ;\n         OF       oFld:aDialogs[ 2 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( BrwAntCli( aTmp[ _CCODCLI ], dbfAntCliT, dbfIva, dbfDiv, dbfTmpAnt, oBrwAnt ) )\n\n      REDEFINE BUTTON ;\n         ID       280 ;\n         OF       oFld:aDialogs[ 2 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( delRecno( dbfTmpAnt, oBrwAnt ), RecalculaTotal( aTmp ) )\n\n      /*\n      Pagado y pendiente en facturas\n      ------------------------------------------------------------------------\n      */\n\n      REDEFINE SAY oGetTotPg VAR nTotal ;\n         ID       455 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetPag VAR 0 ;\n         ID       460 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetAnt VAR 0 ;\n         ID       470 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetPdt VAR 0 ;\n         ID       480 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oGetPes VAR nTotPes ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         ID       570 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oGetDif VAR nTotalDif ;\n         ID       580 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Detalle________________________________________________________________\n      */\n\n      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )\n\n      oBrwInc:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwInc:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwInc:cAlias          := dbfTmpInc\n\n      oBrwInc:nMarqueeStyle   := 6\n      oBrwInc:cName           := \"Factura de cliente.Incidencia\"\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Re. Resuelta\"\n            :bStrData         := {|| \"\" }\n            :bEditValue       := {|| ( dbfTmpInc )->lListo }\n            :nWidth           := 90\n            :SetCheck( { \"Sel16\", \"Cnt16\" } )\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Código\"\n            :bEditValue       := {|| ( dbfTmpInc )->cCodTip }\n            :nWidth           := 75\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Incidencia\"\n            :bEditValue       := {|| cNomInci( ( dbfTmpInc )->cCodTip, dbfInci ) }\n            :nWidth           := 270\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Fecha\"\n            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }\n            :nWidth           := 100\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Descripción\"\n            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }\n            :nWidth           := 380\n         end with\n\n         if nMode != ZOOM_MODE\n            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }\n         else\n            oBrwInc:bLDblClick   := {|| WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) }\n         end if\n\n         oBrwInc:CreateFromResource( 210 )\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       502 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinDelRec( oBrwInc, dbfTmpInc ) )\n\n      REDEFINE BUTTON ;\n         ID       503 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         ACTION   ( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )\n\n      //Caja de documentos-----------------------------------------------------\n\n      oBrwDoc                 := TXBrowse():New( oFld:aDialogs[ 4 ] )\n\n      oBrwDoc:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwDoc:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwDoc:cAlias          := dbfTmpDoc\n\n      oBrwDoc:nMarqueeStyle   := 6\n      oBrwDoc:nRowHeight      := 40\n      oBrwDoc:nDataLines      := 2\n\n      with object ( oBrwDoc:AddCol() )\n         :cHeader          := \"Documento\"\n         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + CRLF + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }\n         :nWidth           := 940\n      end with\n\n      if nMode != ZOOM_MODE\n         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, \"open\", Rtrim( ( dbfTmpDoc )->cRuta ) ) }\n      end if\n\n      oBrwDoc:CreateFromResource( 210 )\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       502 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinDelRec( oBrwDoc, dbfTmpDoc ) )\n\n      REDEFINE BUTTON ;\n         ID       503 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         ACTION   ( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )\n\n      REDEFINE BUTTON ;\n         ID       504 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         ACTION   ( ShellExecute( oDlg:hWnd, \"open\", rTrim( ( dbfTmpDoc )->cRuta ) ) )\n\n      /*\n      Fin de los Folders\n      -----------------------------------------------------------------------\n      */\n\n      oMeter      := TMeter():ReDefine( 200, { | u | if( pCount() == 0, nMeter, nMeter := u ) }, 10, oDlg, .f., , , .t., Rgb( 255,255,255 ), , Rgb( 128,255,0 ) )\n\n      REDEFINE BUTTON ;\n         ID       3 ;\n         OF       oDlg ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( RecFacCli( aTmp ), oBrwLin:Refresh(), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       4 ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( if( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ), GenFacCli( IS_PRINTER ), ) )\n\n      REDEFINE BUTTON oBtn ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( If( ExitNoSave( nMode, dbfTmpLin ), oDlg:end(), ) )\n\n      REDEFINE GROUP oSayLabels[ 1 ] ID 700 OF oFld:aDialogs[ 1 ] TRANSPARENT\n      REDEFINE SAY   oSayLabels[ 2 ] ID 708 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 3 ] ID 709 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 4 ] ID 710 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 5 ] ID 712 OF oFld:aDialogs[ 1 ]\n\n      /*\n      Bitmap________________________________________________________________\n      */\n\n      REDEFINE BITMAP oBmpEmp FILE \"Bmp\\ImgFacCli.bmp\" ID 500 OF oDlg\n\n   /*\n   Apertura de la caja de Dialogo\n   ----------------------------------------------------------------------------\n   */\n\n   if nMode != ZOOM_MODE\n\n      oFld:aDialogs[1]:AddFastKey( VK_F2, {|| AppDeta( oBrwLin, bEdtDet, aTmp, .f. ) } )\n      oFld:aDialogs[1]:AddFastKey( VK_F3, {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) } )\n      oFld:aDialogs[1]:AddFastKey( VK_F4, {|| WinDelRec( oBrwLin, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) } )\n\n      oFld:aDialogs[3]:AddFastKey( VK_F2, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )\n      oFld:aDialogs[3]:AddFastKey( VK_F3, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )\n      oFld:aDialogs[3]:AddFastKey( VK_F4, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )\n\n      oFld:aDialogs[4]:AddFastKey( VK_F2, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )\n      oFld:aDialogs[4]:AddFastKey( VK_F3, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )\n      oFld:aDialogs[4]:AddFastKey( VK_F4, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )\n\n      oDlg:AddFastKey( VK_F6,             {|| if( EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ), GenFacCli( IS_PRINTER ), ) } )\n      oDlg:AddFastKey( VK_F5,             {|| EndTrans( aTmp, aGet, oBrw, oBrwLin, oBrwPgo, aNumAlb, nMode, oDlg ) } )\n      oDlg:AddFastKey( 65,                {|| if( GetKeyState( VK_CONTROL ), CreateInfoArticulo(), ) } )\n\n   end if\n\n   do case\n      case nMode == APPD_MODE .and. lRecogerUsuario() .and. Empty( cCodArt )\n         oDlg:bStart := {|| if( lGetUsuario( aGet[ _CCODUSR ], dbfUsr ), , oDlg:End() ) }\n\n      case nMode == APPD_MODE .and. lRecogerUsuario() .and. !Empty( cCodArt )\n         oDlg:bStart := {|| if( lGetUsuario( aGet[ _CCODUSR ], dbfUsr ), AppDeta( oBrwLin, bEdtDet, aTmp, .f., cCodArt ), oDlg:End() ) }\n\n      case nMode == APPD_MODE .and. !lRecogerUsuario() .and. !Empty( cCodArt )\n         oDlg:bStart := {|| AppDeta( oBrwLin, bEdtDet, aTmp, .f., cCodArt ) }\n\n      otherwise\n         oDlg:bStart := {|| ShowKit( dbfFacCliT, dbfTmpLin, oBtnKit, oBrwLin, .f., dbfTmpInc, cCodCli, dbfClient, oRieCli, oGetRnt, aGet, oSayGetRnt ) }\n\n   end case\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT  (  SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt ),;\n                  InitDialog( aTmp, aGet, oDlg, oBtn, aNumDoc, nMode, oBrwLin, oBrwInc, oBrwPgo, oBrwAnt ) );\n      ON PAINT (  RecalculaTotal( aTmp ) );\n      CENTER\n\n   /*\n   Salimos --------------------------------------------------------------------\n   */\n\n   DisableAcceso()\n\n   if oDlg:nResult != IDOK\n\n      if len( aNumAlb ) > 0\n         for n := 1 to len( aNumAlb )\n            if ( dbfAlbCliT )->( dbSeek( aNumAlb[ n ] ) )\n               SetFacturadoAlbaranCliente( .f., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )\n            end if\n         next\n      end if\n\n      /*\n      Devolvemos los presupuestos a su estado anterior-------------------------\n      */\n\n      if !Empty( aTmp[ _CNUMPRE ] )\n         if ( dbfPreCliT )->( dbSeek( aTmp[ _CNUMPRE ] ) ) .and. dbLock( dbfPreCliT )\n            ( dbfPreCliT )->lEstado       := .f.\n            ( dbfPreCliL )->( dbUnlock() )\n         end if\n      end if\n\n      /*\n      Devolvemos los pedidos a su estado anterior------------------------------\n      */\n\n      if !Empty( aTmp[ _CNUMPED ] )\n         if ( dbfPedCliT )->( dbSeek( aTmp[ _CNUMPED ] ) ) .and. ( dbfPedCliT )->( dbRLock() )\n            ( dbfPedCliT )->nEstado       := 1\n            ( dbfPedCliL )->( dbUnlock() )\n         end if\n      end if\n\n   end if\n\n   /*\n   Repos-----------------------------------------------------------------------\n   */\n\n   ( dbfFacCliT )->( ordSetFocus( nOrd ) )\n\n   /*\n   Guardamos los datos del browse---------------------------------------------\n   */\n\n   if !Empty( oBrwLin )\n      oBrwLin:CloseData()\n      oBrwLin:end()\n   end if\n\n   if !Empty( oBrwInc )\n      oBrwInc:CloseData()\n      oBrwInc:end()\n   end if\n\n   if !Empty( oBrwPgo )\n      oBrwPgo:CloseData()\n      oBrwPgo:end()\n   end if\n\n   if !Empty( oBrwAnt )\n      oBrwAnt:CloseData()\n      oBrwAnt:end()\n   end if\n\n   if !Empty( oBrwIva )\n      oBrwIva:end()\n   end if\n\n   if !Empty( oBrwDoc )\n      oBrwDoc:end()\n   end if\n\n   if !Empty( oBtnPre )\n      oBtnPre:end()\n   end if\n\n   if !Empty( oBtnPed )\n      oBtnPed:end()\n   end if\n\n   if !Empty( oBtnAlb )\n      oBtnAlb:end()\n   end if\n\n   if !Empty( oBtnSat )\n      oBtnSat:end()\n   end if\n\n   if !Empty( oMenu )\n      oMenu:end()\n   end if\n\n   if !Empty( oBmpDiv )\n      oBmpDiv:end()\n   end if\n\n   if !Empty( oBmpEmp )\n      oBmpEmp:end()\n   end if\n\n   oBmpGeneral:End()\n\n   /*\n   Salida sin grabar-----------------------------------------------------------\n   */\n\n   KillTrans()\n\n   SysRefresh()\n\n   EnableAcceso()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//----------------------------------------------------------------------------//\n\nStatic Function InitDialog( aTmp, aGet, oDlg, oBtn, aNumDoc, nMode, oBrwLin, oBrwInc, oBrwPgo, oBrwAnt )\n\n   local nNumLin                    := 0\n\n   EdtRecMenu( aTmp, oDlg )\n\n   oBrwLin:Load()\n   oBrwInc:Load()\n   oBrwPgo:Load()\n   oBrwAnt:Load()\n\n   oMeter:Set( 0 )\n\n   if IsArray( aNumDoc ) .and. !Empty( aNumDoc[ 1 ] )\n      aGet[ _CNUMPRE ]:cText( aNumDoc[ 1 ] )\n      aGet[ _CNUMPRE ]:lValid()\n   end if\n\n   if IsArray( aNumDoc ) .and. !Empty( aNumDoc[ 2 ] )\n      aGet[ _CNUMPED ]:cText( aNumDoc[ 2 ] )\n      aGet[ _CNUMPED ]:lValid()\n   end if\n\n   if IsArray( aNumDoc ) .and. !Empty( aNumDoc[ 3 ] )\n      aGet[ _CNUMALB ]:cText( aNumDoc[ 3 ] )\n      aGet[ _CNUMALB ]:lValid()\n   end if\n\n   if IsArray( aNumDoc ) .and. !Empty( aNumDoc[ 4 ] )\n      aGet[ _CNUMSAT ]:cText( aNumDoc[ 4 ] )\n      aGet[ _CNUMSAT ]:lValid()\n   end if\n\n   if IsArray( aNumDoc ) .and. !Empty( aNumDoc[ 5 ] )\n      cFacPrv( aNumDoc[ 5 ], aGet, aTmp, oBrwLin, nMode )\n   end if\n\nReturn ( nil )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION nBrtLFacCli( uTmpLin, nDec, nRec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT nDec      := 2\n   DEFAULT nVdv      := 1\n\n   nCalculo          := nTotUFacCli( uTmpLin, nDec, nVdv, cPorDiv )\n   nCalculo          *= nTotNFacCli( uTmpLin )\n\n   nCalculo          := Round( nCalculo / nVdv, nRec )\n\nReturn ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el valor del IGIC de un artículo\n*/\n\nFUNCTION nIvaUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := nTotUFacCli( dbfTmpLin, nDec, nVdv )\n\n   if !( dbfTmpLin )->lIvaLin\n      nCalculo    := nCalculo * ( dbfTmpLin )->nIva / 100\n   else\n      nCalculo    -= nCalculo / ( 1 + ( dbfTmpLin )->nIva / 100 )\n   end if\n\n   if nVdv != 0\n      nCalculo    := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el valor del Req de un artículo\n*/\n\nFUNCTION nReqUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := nTotUFacCli( dbfTmpLin, nDec, nVdv )\n\n   if !( dbfTmpLin )->lIvaLin\n      nCalculo    := nCalculo * ( dbfTmpLin )->nReq / 100\n   else\n      nCalculo    -= nCalculo / ( 1 + ( dbfTmpLin )->nReq / 100 )\n   end if\n\n   if nVdv != 0\n      nCalculo    := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el precio unitario IGIC incluido\n*/\n\nFUNCTION nIncUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := nTotUFacCli( dbfTmpLin, nDec, nVdv )\n\n   if !( dbfTmpLin )->lIvaLin\n      nCalculo    += nCalculo * ( dbfTmpLin )->nIva / 100\n   end if\n\n   IF nVdv != 0\n      nCalculo    := nCalculo / nVdv\n   END IF\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nEdita las lineas de Detalle\n*/\n\nSTATIC FUNCTION EdtDet( aTmp, aGet, dbfFacCliL, oBrw, lTotLin, cCodArtEnt, nMode, aTmpFac )\n\n   local oDlg\n   local oFld\n   local oBtn\n   local oGet2\n   local cGet2             := \"\"\n   local oGet3\n   local cGet3             := \"\"\n   local oSayPr1\n   local oSayPr2\n   local cSayPr1           := \"\"\n   local cSayPr2           := \"\"\n   local oSayVp1\n   local oSayVp2\n   local cSayVp1           := \"\"\n   local cSayVp2           := \"\"\n   local oSayAlm\n   local cSayAlm           := \"\"\n   local bmpImage\n   local oStkAct\n   local nStkAct           := 0\n   local oBtnSer\n   local oSayGrp\n   local cSayGrp           := \"\"\n   local oSayFam\n   local cSayFam           := \"\"\n   local cCodArt           := Padr( aTmp[ _CREF ], 32 )\n   local oSayDias\n\n   do case\n   case nMode == APPD_MODE\n\n      aTmp[ _NCANENT  ]       := 1\n      aTmp[ _DFECHA   ]       := aTmpFac[ _DFECFAC ]\n      aTmp[ _LTOTLIN  ]       := lTotLin\n      aTmp[ _CALMLIN  ]       := aTmpFac[ _CCODALM ]\n      aTmp[ _LIVALIN  ]       := aTmpFac[ _LIVAINC ]\n      aTmp[ _CTIPMOV  ]       := cDefVta()\n      aTmp[ _NTARLIN  ]       := aTmpFac[ _NTARIFA ]\n      aTmp[ _dCNUMPED ]       := aTmpFac[ _CNUMPED ]\n\n      if !Empty( cCodArtEnt )\n         cCodArt              := Padr( cCodArtEnt, 32 )\n      end if\n\n      aTmp[ __DFECSAL ]       := aTmpFac[ _DFECSAL  ]\n      aTmp[ __DFECENT ]       := aTmpFac[ _DFECENTR ]\n\n      if !Empty( oTipFac ) .and. oTipFac:nAt == 2\n         aTmp[ __LALQUILER ]  := .t.\n      else\n         aTmp[ __LALQUILER ]  := .f.\n      end if\n\n   case nMode == EDIT_MODE\n\n      aTmp[ _NPREUNIT ] := Round( aTmp[ _NPREUNIT ], nDouDiv )\n      aTmp[ _NPNTVER  ] := Round( aTmp[ _NPNTVER  ], nDpvDiv )\n      aTmp[ _NDTODIV  ] := Round( aTmp[ _NDTODIV  ], nDouDiv )\n      lTotLin           := aTmp[ _LTOTLIN ]\n\n   case nMode == MULT_MODE\n\n      aTmp[ _NDTODIV  ] := Round( aTmp[ _NDTODIV  ], nDouDiv )\n      lTotLin           := aTmp[ _LTOTLIN ]\n\n   end case\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios----------------\n   */\n\n   cOldCodArt           := aTmp[ _CREF    ]\n   cOldPrpArt           := aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ] + aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ]\n   cOldUndMed           := aTmp[ _CUNIDAD ]\n\n   /*Etiquetas de familias y grupos de familias*/\n\n   cSayGrp              := RetFld( aTmp[ _CGRPFAM ], oGrpFam:GetAlias() )\n   cSayFam              := RetFld( aTmp[ _CCODFAM ], dbfFamilia )\n\n   /*\n   Caja de dialogo-------------------------------------------------------------\n   */\n\n   DEFINE DIALOG oDlg RESOURCE \"LFACCLI\" TITLE LblTitle( nMode ) + \"líneas de facturas de clientes\"\n\n      if aTmp[ __LALQUILER ]\n\n         REDEFINE FOLDER oFld ;\n            ID       400 ;\n            OF       oDlg ;\n            PROMPT   \"&General\",    \"Da&tos\",    \"&Observaciones\" ;\n            DIALOGS  \"LFACCLI_4\",   \"LFACCLI_6\", \"LFACCLI_3\"\n\n      else\n\n         REDEFINE FOLDER oFld ;\n            ID       400 ;\n            OF       oDlg ;\n            PROMPT   \"&General\",    \"Da&tos\",    \"&Observaciones\" ;\n            DIALOGS  \"LFACCLI_1\",   \"LFACCLI_6\", \"LFACCLI_3\"\n\n      end if\n\n      REDEFINE GET aGet[ _CREF ] VAR cCodArt;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwArticulo( aGet[ _CREF ], aGet[ _CDETALLE ] , , , , aGet[ _CLOTE ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aGet[ _CVALPR1 ], aGet[ _CVALPR2 ], aGet[ _DFECCAD ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDETALLE ] VAR aTmp[ _CDETALLE ] ;\n         ID       110 ;\n         WHEN     ( ( lModDes() .or. Empty( aTmp[ _CDETALLE ] ) ) .AND. nMode != ZOOM_MODE .AND. nMode != MULT_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_MLNGDES] VAR aTmp[_MLNGDES] ;\n         MEMO ;\n         ID       111 ;\n         WHEN     ( ( lModDes() .or. Empty( aTmp[ _MLNGDES ] ) ) .AND. nMode != ZOOM_MODE .AND. nMode != MULT_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Lotes\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CLOTE ] VAR aTmp[ _CLOTE ];\n         ID       112 ;\n         IDSAY    113 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      aGet[ _CLOTE ]:bValid   := {|| lValidLote( aTmp, aGet, oStkAct ) }\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ _DFECCAD ] VAR aTmp[ _DFECCAD ];\n         ID       340 ;\n         IDSAY    341 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      end if\n\n      /*\n      Propiedades\n      -------------------------------------------------------------------------\n      */\n\n   if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ _CVALPR1 ] VAR aTmp[ _CVALPR1 ];\n         ID       270 ;\n         BITMAP   \"LUPA\" ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE ) ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR1 ], oSayVp1, aTmp[ _CCODPR1 ], dbfTblPro ),;\n                        loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[ _CVALPR1 ], oSayVp1, aTmp[ _CCODPR1 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CVALPR1 ]:bChange   := {|| aGet[ _CVALPR1 ]:Assign(), if( !uFieldEmpresa( \"lNStkAct\" ), oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) }\n\n      REDEFINE SAY oSayPr1 VAR cSayPr1;\n         ID       271 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayVp1 VAR cSayVp1;\n         ID       272 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CVALPR2 ] VAR aTmp[ _CVALPR2 ];\n         ID       280 ;\n         BITMAP   \"LUPA\" ;\n         WHEN     ( nMode != ZOOM_MODE .AND. nMode != MULT_MODE ) ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR2 ], oSayVp2, aTmp[ _CCODPR2 ], dbfTblPro ),;\n                        loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[ _CVALPR2 ], oSayVp2, aTmp[ _CCODPR2 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CVALPR2 ]:bChange   := {|| aGet[ _CVALPR2 ]:Assign(), if( !uFieldEmpresa( \"lNStkAct\" ), oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) }\n\n      REDEFINE SAY oSayPr2 VAR cSayPr2;\n         ID       281 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayVp2 VAR cSayVp2;\n         ID       282 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n   end if\n\n      REDEFINE GET aGet[ _NIMPTRN ] VAR aTmp[ _NIMPTRN ] ;\n         ID       350 ;\n         IDSAY    351 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      fin de propiedades\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _NIVA ] VAR aTmp[ _NIVA ] ;\n         ID       120 ;\n         WHEN     ( lModIva() .AND. nMode != ZOOM_MODE ) ;\n         PICTURE  \"@E 999.99\" ;\n         VALID    ( lTiva( dbfIva, aTmp[ _NIVA ], @aTmp[ _NREQ ] ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIva( aGet[ _NIVA ], dbfIva, , .t. ) );\n         OF       oFld:aDialogs[1]\n\n   if aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ __DFECSAL ] VAR aTmp[ __DFECSAL ];\n         ID       420 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n         //VALID    ( lCalcDeta( aTmp, nDouDiv, oTotalLinea, oRentabilidadLinea, cCodDiv, nStkAct ) );\n\n      REDEFINE GET aGet[ __DFECENT ] VAR aTmp[ __DFECENT ];\n         ID       430 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n         //VALID    ( lCalcDeta( aTmp, nDouDiv, oTotalLinea, oRentabilidadLinea, cCodDiv, nStkAct ) );\n\n      REDEFINE SAY oSayDias ;\n         VAR      ( aTmp[ __DFECENT ] - aTmp[ __DFECSAL ] );\n         PICTURE  \"9999\";\n         ID       440;\n         OF       oFld:aDialogs[1]\n\n   else\n\n      REDEFINE GET aGet[ _NVALIMP ] VAR aTmp[ _NVALIMP ] ;\n         ID       125 ;\n         IDSAY    126 ;\n         SPINNER ;\n         WHEN     ( uFieldEmpresa( \"lModImp\" ) .AND. nMode != ZOOM_MODE ) ;\n         PICTURE  cPouDiv ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         ON HELP  ( oNewImp:nBrwImp( aGet[_NVALIMP] ) );\n         OF       oFld:aDialogs[1]\n\n   end if\n\n      REDEFINE GET aGet[_NCANENT] VAR aTmp[_NCANENT] ;\n         ID       130 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .AND. lUseCaj() .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ), loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ), loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ) );\n         PICTURE  cPicUnd ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    131\n\n      REDEFINE GET aGet[_NUNICAJA] VAR aTmp[_NUNICAJA] ;\n         ID       140 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ; // .AND. !aTmpFac[ _LIMPALB ]\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ), loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ), loaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, .f. ) );\n         PICTURE  cPicUnd ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    141\n\n      REDEFINE GET aGet[ _CUNIDAD ] VAR aTmp[ _CUNIDAD ] ;\n         ID       170 ;\n         IDTEXT   171 ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( oUndMedicion:Existe( aGet[ _CUNIDAD ], aGet[ _CUNIDAD ]:oHelpText, \"cNombre\" ), ValidaMedicion( aTmp, aGet ) );\n         ON HELP  ( oUndMedicion:Buscar( aGet[ _CUNIDAD ] ), ValidaMedicion( aTmp, aGet ) ) ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Campos de las descripciones de la unidad de medición---------------------\n      */\n\n      REDEFINE GET aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] ;\n         VAR      aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] ;\n         ID       520 ;\n         IDSAY    521 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n      REDEFINE GET aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] ;\n         VAR      aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] ;\n         ID       530 ;\n         IDSAY    531 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n      REDEFINE GET aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] ;\n         VAR      aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] ;\n         ID       540 ;\n         IDSAY    541 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n      REDEFINE GET aGet[ _NPREUNIT ] VAR aTmp[ _NPREUNIT ] ;\n         ID       150 ;\n         SPINNER ;\n         PICTURE  cPouDiv ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NTARLIN ] VAR aTmp[ _NTARLIN ];\n         ID       156 ;\n         SPINNER ;\n         MIN      1 ;\n         MAX      6 ;\n         PICTURE  \"9\" ;\n         VALID    ( aTmp[ _NTARLIN ] >= 1 .AND. aTmp[ _NTARLIN ] <= 6 );\n         WHEN     ( nMode != ZOOM_MODE .and. ( lUsrMaster() .or. oUser():lCambiarPrecio() ) );\n         ON CHANGE( ChangeTarifa( aTmp, aGet, aTmpFac ), lCalcDeta( aTmp, aTmpFac ) );\n         OF       oFld:aDialogs[1]\n\n      if aTmp[ __LALQUILER ]\n\n         REDEFINE GET aGet[ _NPREALQ ] VAR aTmp[ _NPREALQ ] ;\n            ID       250 ;\n            SPINNER ;\n            WHEN     ( nMode != ZOOM_MODE .and. !lTotLin ) ;\n            ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n            VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n            PICTURE  cPouDiv ;\n            OF       oFld:aDialogs[1]\n\n      end if\n\n      REDEFINE GET aGet[ _NPNTVER ] ;\n         VAR      aTmp[ _NPNTVER ] ;\n         ID       151 ;\n         IDSAY    152 ;\n         SPINNER ;\n         PICTURE  cPpvDiv ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         OF       oFld:aDialogs[1]\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ _NFACCNV ] VAR aTmp[ _NFACCNV ] ;\n         ID       295 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      end if\n\n      REDEFINE GET aGet[ _NPESOKG ] VAR aTmp[ _NPESOKG ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPESOKG ] VAR aTmp[ _CPESOKG ] ;\n         ID       175 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NVOLUMEN ] VAR aTmp[ _NVOLUMEN ] ;\n         ID       400 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CVOLUMEN ] VAR aTmp[ _CVOLUMEN ] ;\n         ID       410;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin .AND. nMode != MULT_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE CHECKBOX aGet[ _LGASSUP ] VAR aTmp[ _LGASSUP ] ;\n         ID       440;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      aGet[ _LGASSUP ]:bChange   := {|| if( aTmp[ _LGASSUP ], ( aGet[ _NIVA ]:cText( 0 ), aGet[ _NIVA ]:HardDisable() ), ( aGet[ _NIVA ]:HardEnable() ) ) }\n\n      end if\n\n      REDEFINE CHECKBOX aGet[ _LVOLIMP ] VAR aTmp[ _LVOLIMP ] ;\n         ID       411;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _NDTODIV ] VAR aTmp[ _NDTODIV ] ;\n         ID       260 ;\n         IDSAY    261 ;\n         SPINNER ;\n         MIN      0 ;\n         COLOR    Rgb( 255, 0, 0 ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( aTmp[_NDTODIV] >= 0 ) ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTO ] VAR aTmp[ _NDTO ] ;\n         ID       180 ;\n         SPINNER ;\n         PICTURE  \"@E 999.99\" ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTOPRM ] VAR aTmp[ _NDTOPRM ] ;\n         ID       190 ;\n         SPINNER ;\n         PICTURE  \"@E 999.99\" ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NCOMAGE ] VAR aTmp[ _NCOMAGE ] ;\n         ID       200 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  \"@E 999.99\";\n         OF       oFld:aDialogs[ 1 ]\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET oComisionLinea VAR nComisionLinea ;\n         ID       201 ;\n         WHEN     ( .f. ) ;\n         PICTURE  cPorDiv ;\n         OF       oFld:aDialogs[ 1 ]\n\n      end if\n\n      REDEFINE GET oTotalLinea VAR nTotalLinea ;\n         ID       220 ;\n         WHEN     .f. ;\n         PICTURE  cPorDiv ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODTIP ] VAR aTmp[ _CCODTIP ] ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         VALID    ( oTipArt:lValid( aGet[ _CCODTIP ], oGet3 ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( oTipArt:Buscar( aGet[ _CCODTIP ] ) ) ;\n         ID       205 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGet3 VAR cGet3 ;\n         ID       206 ;\n         WHEN     ( .F. ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CTIPMOV ] VAR aTmp[ _CTIPMOV ] ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         VALID    ( cTVta( aGet[_CTIPMOV], dbfTVta, oGet2 ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwTVta( aGet[_CTIPMOV], dbfTVta, oGet2 ) ) ;\n         ID       290 ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    292 ;\n\n      REDEFINE GET oGet2 VAR cGet2 ;\n         ID       291 ;\n         WHEN     ( .F. ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CALMLIN ] VAR aTmp[ _CALMLIN ] ;\n         ID       300 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cAlmacen( aGet[ _CALMLIN ], , oSayAlm ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAlmacen( aGet[_CALMLIN], oSayAlm ) ) ;\n         OF       oFld:aDialogs[1]\n\n      aGet[ _CALMLIN ]:bLostFocus   := {|| if( !uFieldEmpresa( \"lNStkAct\" ), oStock:lPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) }\n\n      REDEFINE GET oSayAlm VAR cSayAlm ;\n         WHEN     .F. ;\n         ID       301 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oStkAct VAR nStkAct ;\n         ID       310 ;\n         WHEN     .f. ;\n         PICTURE  cPicUnd ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_NCOSDIV] VAR aTmp[_NCOSDIV] ;\n         ID       320 ;\n         WHEN     ( oUser():lAdministrador() .and. nMode != ZOOM_MODE );\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    321 ;\n\n      REDEFINE GET aGet[_NMESGRT] VAR aTmp[_NMESGRT] ;\n         ID       330 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         SPINNER ;\n         PICTURE  \"99\" ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Segunda caja de dilogo---------------------------------------------------\n      */\n\n      REDEFINE GET aGet[_NNUMLIN] VAR aTmp[_NNUMLIN] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         PICTURE  \"9999\" ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[_LIMPLIN] VAR aTmp[_LIMPLIN]  ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_DFECHA] VAR aTmp[_DFECHA] ;\n         ID       120 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         ON HELP  aGet[_DFECHA]:cText( Calendario( aTmp[_DFECHA] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[_LCONTROL] VAR aTmp[_LCONTROL]  ;\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_NPVPREC] VAR aTmp[_NPVPREC] ;\n         ID       140 ;\n         WHEN     ( .f. ) ;\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CIMAGEN ] ;\n         VAR      aTmp[ _CIMAGEN ] ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( GetBmp( aGet[ _CIMAGEN ], bmpImage ) ) ;\n         ON CHANGE( ChgBmp( aGet[ _CIMAGEN ], bmpImage ) ) ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ID       220 ;\n         OF       oFld:aDialogs[ 2 ]\n\n      /*\n      Definición de familias y grupos de familias------------------------------\n      */\n\n      REDEFINE GET aGet[ _CGRPFAM ] VAR aTmp[ _CGRPFAM ] ;\n         ID       ( 150 );\n         WHEN     ( nMode != ZOOM_MODE );\n         BITMAP   \"LUPA\" ;\n         VALID    ( oSayGrp:cText( RetFld( aTmp[ _CGRPFAM  ], oGrpFam:GetAlias() ) ), .t. ) ;\n         ON HELP  ( oGrpFam:Buscar( aGet[ _CGRPFAM ] ) ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET oSayGrp VAR cSayGrp ;\n         ID       ( 151 );\n         WHEN     .f.;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET aGet[ _CCODFAM ] VAR aTmp[ _CCODFAM ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( oSayFam:cText( RetFld( aTmp[ _CCODFAM  ], dbfFamilia ) ), .t. );\n         ON HELP  ( BrwFamilia( aGet[ _CCODFAM ], oSayFam ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSayFam VAR cSayFam ;\n         WHEN     ( .F. );\n         ID       161 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[ _LIMPFRA ] VAR aTmp[ _LIMPFRA ]  ;\n         ID       310 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET aGet[ _CCODFRA ] VAR  aTmp[ _CCODFRA ] ;\n         ID       320 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         OF       oFld:aDialogs[ 2 ]\n\n         aGet[ _CCODFRA ]:bValid := {|| oFraPub:lValid( aGet[ _CCODFRA ], aGet[ _CTXTFRA ] ) }\n         aGet[ _CCODFRA ]:bHelp  := {|| oFraPub:Buscar( aGet[ _CCODFRA ] ) }\n\n      REDEFINE GET aGet[ _CTXTFRA ] VAR aTmp[ _CTXTFRA ] ;\n         ID       321 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET oRentabilidadLinea VAR cRentabilidadLinea ;\n         ID       300 ;\n         IDSAY    301 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[ _LKITART ] VAR aTmp[ _LKITART ]  ;\n         ID       331 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE CHECKBOX aGet[ _LKITCHL ] VAR aTmp[ _LKITCHL ]  ;\n         ID       330 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE CHECKBOX aGet[ _LKITPRC ] VAR aTmp[ _LKITPRC ]  ;\n         ID       340 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE RADIO aGet[ _NCTLSTK ] VAR aTmp[ _NCTLSTK ] ;\n         ID       350, 351, 352 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      /*\n      Tercera caja de dialogo--------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _MOBSLIN ] VAR aTmp[ _MOBSLIN ] ;\n         MEMO ;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _DESCRIP ] VAR aTmp[ _DESCRIP ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\nif ( IsMuebles() )\n\n    REDEFINE GET aGet[ _CCODPRV ] VAR aTmp[ _CCODPRV ] ;\n         ID       800 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[1]\n\n    REDEFINE GET aGet[ _CNOMPRV ] VAR aTmp[ _CNOMPRV ] ;\n         ID       801 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[1]\n\nend if\n\n      REDEFINE BITMAP bmpImage ;\n         ID       220 ;\n         FILE     ( cFileBitmap( cPatImg(), aTmp[ _CIMAGEN ] ) );\n         ON RIGHT CLICK ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() );\n         OF       oDlg\n\n         bmpImage:SetColor( , GetSysColor( 15 ) )\n\n      REDEFINE BUTTON oBtn;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   SaveDeta( aTmp, aTmpFac, aGet, oGet2, oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, oTotalLinea, oStkAct, nStkAct, cCodArt, oBtn, oBtnSer )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      REDEFINE BUTTON ;\n         ID       9 ;\n         OF       oDlg ;\n         ACTION   ( ChmHelp( \"Añadir_v\" ) )\n\n      REDEFINE BUTTON oBtnSer;\n         ID       552 ;\n         OF       oDlg ;\n         ACTION   ( EditarNumeroSerie( aTmp, oStock, nMode ) )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F6, {|| oBtnSer:Click() } )\n      oDlg:AddFastKey( VK_F5, {|| SaveDeta( aTmp, aTmpFac, aGet, oGet2, oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, oTotalLinea, oStkAct, nStkAct, cCodArt, oBtn, oBtnSer ) } )\n   end if\n\n   oDlg:bStart    := {||   SetDlgMode( aTmp, aGet, oGet2, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotalLinea, aTmpFac, oRentabilidadLinea ),;\n                           if( !Empty( cCodArtEnt ), aGet[ _CREF ]:lValid(), ),;\n                           lCalcDeta( aTmp, aTmpFac ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT     ( EdtDetMenu( aGet[ _CREF ], oDlg ) );\n      CENTER\n\n   EndDetMenu()\n\n   if !Empty( bmpImage )\n      bmpImage:End()\n   end if\n\nRETURN ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nStatic Function EdtInc( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpFac )\n\n   local oDlg\n   local oNomInci\n   local cNomInci\n\n   if !Empty( aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ] )\n      cNomInci := cNomInci( aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], dbfInci )\n   end if\n\n   if nMode == APPD_MODE\n      aTmp[ _CSERIE   ] := aTmpFac[ _CSERIE  ]\n      aTmp[ _NNUMFAC  ] := aTmpFac[ _NNUMFAC ]\n      aTmp[ _CSUFFAC  ] := aTmpFac[ _CSUFFAC ]\n   end if\n\n   if ( \"PDA\" $ cParamsMain() )\n      DEFINE DIALOG oDlg RESOURCE \"FACTCLI_INC_PDA\"\n   else\n      DEFINE DIALOG oDlg RESOURCE \"INCIDENCIA\" TITLE LblTitle( nMode ) + \"incidencias de facturas a clientes\"\n   end if\n\n\n      REDEFINE GET aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         VAR      aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE );\n         VALID    ( cTipInci( aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], dbfInci, oNomInci ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIncidencia( dbfInci, aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], oNomInci ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oNomInci VAR cNomInci;\n         WHEN     .f. ;\n         ID       130 ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"dFecInc\" ) ) ] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"mDesInc\" ) ) ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lListo\" ) ) ] ;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lAviso\" ) ) ] ;\n         ID       150 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      if nMode != ZOOM_MODE\n         oDlg:AddFastKey( VK_F5, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) } )\n      end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\nReturn ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nStatic Function EdtDoc( aTmp, aGet, dbfFacCliD, oBrw, bWhen, bValid, nMode, aTmpLin )\n\n   local oDlg\n   local oRuta\n   local oNombre\n   local oObservacion\n\n   DEFINE DIALOG oDlg RESOURCE \"DOCUMENTOS\" TITLE LblTitle( nMode ) + \"documento de pedidos a proveedor\"\n\n      REDEFINE GET oNombre VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"cNombre\" ) ) ] ;\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET oRuta VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"cRuta\" ) ) ] ;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"FOLDER\" ;\n         ON HELP  ( oRuta:cText( cGetFile( 'Doc ( *.* ) | ' + '*.*', 'Seleccione el nombre del fichero' ) ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oObservacion VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"mObsDoc\" ) ) ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( IDOK ) } )\n   end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\nReturn ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION PrnSerie()\n\n   local oDlg\n   local oFmtDoc\n   local cFmtDoc     := cFormatoDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount )\n   local oSayFmt\n   local cSayFmt\n   local oSerIni\n   local oSerFin\n   local nRecno      := ( dbfFacCliT )->( recno() )\n   local nOrdAnt     := ( dbfFacCliT )->( OrdSetFocus( \"nNumFac\" ) )\n   local cSerIni     := ( dbfFacCliT )->cSerie\n   local cSerFin     := ( dbfFacCliT )->cSerie\n   local oDocIni\n   local oDocFin\n   local nDocIni     := ( dbfFacCliT )->nNumFac\n   local nDocFin     := ( dbfFacCliT )->nNumFac\n   local cSufIni     := ( dbfFacCliT )->cSufFac\n   local cSufFin     := ( dbfFacCliT )->cSufFac\n   local oPrinter\n   local cPrinter    := PrnGetName()\n   local lCopiasPre  := .t.\n   local lInvOrden   := .f.\n   local oNumCop\n   local nNumCop     := if( nCopiasDocumento( (dbfFacCliT)->cSerie, \"nFacCli\", dbfCount ) == 0, Max( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( (dbfFacCliT)->cSerie, \"nFacCli\", dbfCount ) )\n\n   if Empty( cFmtDoc )\n      cFmtDoc        := cSelPrimerDoc( \"FC\" )\n   end if\n\n   cSayFmt           := cNombreDoc( cFmtDoc )\n\n   DEFINE DIALOG oDlg RESOURCE \"IMPSERDOC\" TITLE \"Imprimir series de facturas\"\n\n\n   REDEFINE GET oSerIni VAR cSerIni ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      VALID    ( cSerIni >= \"A\" .AND. cSerIni <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR cSerFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      VALID    ( cSerFin >= \"A\" .AND. cSerFin <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oDocIni VAR nDocIni;\n      ID       120 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE GET oDocFin VAR nDocFin;\n      ID       130 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE GET cSufIni ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      OF       oDlg\n\n   REDEFINE GET cSufFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      OF       oDlg\n\n   REDEFINE CHECKBOX lInvOrden ;\n      ID       500 ;\n      OF       oDlg\n\n   REDEFINE CHECKBOX lCopiasPre ;\n      ID       170 ;\n      OF       oDlg\n\n   REDEFINE GET oNumCop VAR nNumCop;\n      ID       180 ;\n      WHEN     !lCopiasPre ;\n      VALID    nNumCop > 0 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      MIN      1 ;\n      MAX      99999 ;\n      OF       oDlg\n\n   REDEFINE GET oFmtDoc VAR cFmtDoc ;\n      ID       90 ;\n      VALID    ( cDocumento( oFmtDoc, oSayFmt, dbfDoc ) ) ;\n      BITMAP   \"LUPA\" ;\n      ON HELP  ( BrwDocumento( oFmtDoc, oSayFmt, \"FC\" ) ) ;\n      OF       oDlg\n\n   REDEFINE GET oSayFmt VAR cSayFmt ;\n      ID       91 ;\n      WHEN     ( .f. );\n      OF       oDlg\n\n   TBtnBmp():ReDefine( 92, \"Printer_pencil_16\",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .f., , .f.,  )\n\n   REDEFINE GET oPrinter VAR cPrinter;\n      WHEN     ( .f. ) ;\n      ID       160 ;\n      OF       oDlg\n\n   TBtnBmp():ReDefine( 161, \"Printer_preferences_16\",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .f., , .f.,  )\n\n   REDEFINE BUTTON ;\n      ID       IDOK ;\n      OF       oDlg ;\n      ACTION   (  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden ),;\n                  oDlg:end( IDOK ) )\n\n   REDEFINE BUTTON ;\n      ID       IDCANCEL ;\n      OF       oDlg ;\n      CANCEL ;\n      ACTION   ( oDlg:end() )\n\n   oDlg:AddFastKey( VK_F5, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden ), oDlg:end( IDOK ) } )\n\n   oDlg:bStart := { || oSerIni:SetFocus() }\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   ( dbfFacCliT )->( dbGoTo( nRecNo ) )\n   ( dbfFacCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oWndBrw:oBrw:refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden )\n\n   local nCopyClient\n\n   oDlg:Disable()\n\n   if !lInvOrden\n\n      ( dbfFacCliT )->( dbSeek( cDocIni, .t. ) )\n\n      while ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac >= cDocIni .and. ;\n            ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac <= cDocFin\n\n            lChgImpDoc( dbfFacCliT )\n\n         if lCopiasPre\n\n            nCopyClient := if( nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) == 0, Max( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) )\n\n            GenFacCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, cFmtDoc, cPrinter,  )\n\n         else\n\n            GenFacCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, cFmtDoc, cPrinter, nNumCop )\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n      end while\n\n   else\n\n      ( dbfFacCliT )->( dbSeek( cDocFin, .t. ) )\n\n      while ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac >= cDocIni .and. ;\n            ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac <= cDocFin .and. ;\n            !( dbfFacCliT )->( Bof() )\n\n         lChgImpDoc( dbfFacCliT )\n\n         if lCopiasPre\n\n            nCopyClient := if( nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) == 0, Max( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfFacCliT )->cSerie, \"nFacCli\", dbfCount ) )\n\n            GenFacCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, cFmtDoc, cPrinter, nCopyClient )\n\n         else\n\n            GenFacCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, cFmtDoc, cPrinter, nNumCop )\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip( -1 ) )\n\n      end while\n\n   end if\n\n   oDlg:Enable()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nFUNCTION nIvaLFacCli( dbfFacT, dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo := nImpLFacCli( dbfFacT, dbfLin, nDec, nRou, nVdv )\n\n   nCalculo       := Round( nCalculo * ( dbfLin )->nIva / 100, nRou )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nIvaIFacCli( dbfLin, nDec, nRou, nVdv, cPouDiv )\n\n   local nCalculo := nTotIFacCli( dbfLin, nDec, nRou, nVdv )\n\n   nCalculo       := Round( nCalculo * ( dbfLin )->nIva / 100, nRou )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nReqLFacCli( dbfFacT, dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo := nImpLFacCli( dbfFacT, dbfLin, nDec, nRou, nVdv )\n\n   nCalculo       := Round( nCalculo * ( dbfLin )->nReq / 100, nRou )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el total de una lina con IGIC incluido\n*/\n\nFUNCTION nIncLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )\n\n   local nCalculo := nTotLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn )\n\n   if !( dbfLin )->lIvaLin\n      nCalculo    += nCalculo * ( dbfLin )->nIva / 100\n   end if\n\nRETURN ( if( cPorDiv != NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el total de una linea sin IGIC incluido\n*/\n\nFUNCTION nNoIncLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )\n\n   local nCalculo\n\n   DEFAULT dbfLin := dbfFacCliL\n\n   nCalculo       := nTotLFacCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn )\n\n   if ( dbfLin )->lIvaLin\n      nCalculo    -= nCalculo * ( dbfLin )->nIva / 100\n   end if\n\nRETURN ( if( cPorDiv != NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el precio unitario sin IGIC incluido\n*/\n\nFUNCTION nNoIncUFacCli( dbfLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT dbfLin := dbfFacCliL\n\n   nCalculo       := nTotUFacCli( dbfLin, nDec, nVdv )\n\n   if ( dbfLin )->lIvaLin\n      nCalculo    -= nCalculo * ( dbfLin )->nIva / 100\n   end if\n\nRETURN ( if( cPorDiv != NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION aTotFacCli( cFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, cDivRet )\n\n   nTotFacCli( cFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivRet )\n\nRETURN ( { nTotNet, nTotIva, nTotReq, nTotFac, nTotPnt, nTotTrn, nTotAge, aTotIva, nTotCos, nTotIvm, nTotRnt, nTotRet, nTotCob } )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION sTotFacCli( cFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, cDivRet )\n\n   local sTotal\n\n   nTotFacCli( cFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivRet )\n\n   sTotal                                 := sTotal()\n\n   sTotal:nTotalBruto                     := nTotBrt\n   sTotal:nTotalNeto                      := nTotNet\n   sTotal:nTotalIva                       := nTotIva\n   sTotal:nTotalRecargoEquivalencia       := nTotReq\n   sTotal:nTotalRetencion                 := nTotRet\n   sTotal:nTotalDocumento                 := nTotFac\n   sTotal:nTotalPuntoVerde                := nTotPnt\n   sTotal:nTotalTransporte                := nTotTrn\n   sTotal:nTotalAgente                    := nTotAge\n   sTotal:nTotalCosto                     := nTotCos\n   sTotal:nTotalImpuestoHidrocarburos     := nTotIvm\n   sTotal:nTotalRentabilidad              := nTotRnt\n\n   sTotal:nTotalDescuentoGeneral          := nTotDto\n   sTotal:nTotalDescuentoProntoPago       := nTotDpp\n   sTotal:nTotalDescuentoUno              := nTotUno\n   sTotal:nTotalDescuentoDos              := nTotDos\n\n   sTotal:nTotalCobrado                   := nTotCob\n\n   sTotal:aTotalIva                       := aTotIva\n\nReturn ( sTotal )\n\n//--------------------------------------------------------------------------//\n/*\nCrea un movimiento para liquidar la factura\n*/\n\nSTATIC FUNCTION lLiquida( oBrw, cFactura )\n\n   DEFAULT cFactura  := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\n   if ( dbfFacCliT )->lLiquidada\n      msgStop( \"Factura ya cobrada\", \"Imposible añadir cobros\" )\n      return .f.\n   end if\n\n   /*\n   Comporbamos si existen recibos de esta factura------------------------------\n   */\n\n   if ( dbfFacCliP )->( dbSeek( cFactura ) )\n\n      while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFactura .and. !( dbfFacCliP )->( eof() )\n\n         if Empty( ( dbfFacCliP )->cTipRec ) .and. !( dbfFacCliP )->lCobrado\n\n            EdtRecCli( ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac + Str( ( dbfFacCliP )->nNumRec ) + ( dbfFacCliP )->cTipRec, .f. )\n\n            exit\n\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end do\n\n   end if\n\n   /*\n   Chekea el estado de la factura---------------------------------------------\n   */\n\n   ChkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv, .f. )\n\n   /*\n   Información para el Auditor-------------------------------------------------\n   */\n\n   if !Empty( oAuditor() )\n      oAuditor():AddEvent( LIQUIDA_FACTURA_CLIENTES, ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, FAC_CLI )\n   end if\n\n   oBrw:Refresh()\n   oBrw:SetFocus()\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function lChgContabilizado( lChk )\n\n   if ( dbfFacCliT )->( dbRLock() )\n      ( dbfFacCliT )->lContab    := lChk\n      ( dbfFacCliT )->( dbUnlock() )\n   end if\n\n   /*\n   Informacion al Auditor------------------------------------------------\n   */\n\n   if lChk\n      if !Empty( oAuditor() )\n         oAuditor():AddEvent( MARK_CONT_FACTURA_CLIENTES,   ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, FAC_CLI )\n      end if\n   else\n      if !Empty( oAuditor() )\n         oAuditor():AddEvent( NOMARK_CONT_FACTURA_CLIENTES, ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, FAC_CLI )\n      end if\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\n/*\nImporta desde un albaran\n*/\n\nSTATIC FUNCTION cAlbCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode )\n\n   local cDesAlb\n   local lValid      := .f.\n   local cAlbaran    := aGet[ _CNUMALB ]:varGet()\n   local aAlbCliT\n   local aAlbCliL\n   local nTotEntAlb  := 0\n   local cSuPed      := \"\"\n\n   if ( nMode != APPD_MODE .or. Empty( cAlbaran ) )\n      return .t.\n   end if\n\n   aAlbCliT          := aGetStatus( dbfAlbCliT, .t. )\n   aAlbCliL          := aGetStatus( dbfAlbCliL, .t. )\n\n   if ( dbfAlbCliT )->( dbSeek( cAlbaran ) )\n\n      if ( dbfAlbCliT )->lFacturado\n\n         MsgStop( \"Albarán facturado\" )\n\n      else\n\n         CursorWait()\n\n         aGet[ _CSERIE  ]:cText( ( dbfAlbCliT )->cSerAlb )\n\n         aGet[ _CCODCLI ]:cText( ( dbfAlbCliT )->cCodCli )\n         aGet[ _CCODCLI ]:bWhen    := {|| .f. }\n         aGet[ _CCODCLI ]:lValid()\n\n         aGet[ _CNOMCLI ]:cText( ( dbfAlbCliT )->cNomCli )\n         aGet[ _CDIRCLI ]:cText( ( dbfAlbCliT )->cDirCli )\n         aGet[ _CPOBCLI ]:cText( ( dbfAlbCliT )->cPobCli )\n         aGet[ _CPRVCLI ]:cText( ( dbfAlbCliT )->cPrvCli )\n         aGet[ _CPOSCLI ]:cText( ( dbfAlbCliT )->cPosCli )\n         aGet[ _CDNICLI ]:cText( ( dbfAlbCliT )->cDniCli )\n         aGet[ _CTLFCLI ]:cText( ( dbfAlbCliT )->cTlfCli )\n\n         aGet[ _CCODALM ]:cText( ( dbfAlbCliT )->cCodAlm )\n         aGet[ _CCODALM ]:lValid()\n\n         aGet[ _CCODCAJ ]:cText( ( dbfAlbCliT )->cCodCaj )\n         aGet[ _CCODCAJ ]:lValid()\n\n         aGet[ _CCODPAGO ]:cText( ( dbfAlbCliT )->cCodPago )\n         aGet[ _CCODPAGO ]:lValid()\n\n         aGet[ _CCODAGE ]:cText( ( dbfAlbCliT )->cCodAge )\n         aGet[ _CCODAGE ]:lValid()\n\n         aGet[ _NPCTCOMAGE ]:cText( ( dbfAlbCliT )->nPctComAge )\n\n         aGet[ _CCODTAR ]:cText( ( dbfAlbCliT )->CCODTAR )\n         aGet[ _CCODTAR ]:lValid()\n\n         aGet[ _CCODRUT ]:cText( ( dbfClient )->CCODRUT )\n         aGet[ _CCODRUT ]:lValid()\n\n         aGet[ _CCODOBR ]:cText( ( dbfAlbCliT )->CCODOBR )\n         aGet[ _CCODOBR ]:lValid()\n\n         aGet[_CCODTRN ]:cText( ( dbfAlbCliT )->cCodTrn )\n         aGet[_CCODTRN ]:lValid()\n\n         aGet[ _LIVAINC  ]:Click( ( dbfAlbCliT )->lIvaInc )\n         aGet[ _LRECARGO ]:Click( ( dbfAlbCliT )->lRecargo )\n         aGet[ _LOPERPV  ]:Click( ( dbfAlbCliT )->lOperPv )\n\n         /*\n         Pasamos los comentarios\n         */\n\n         aGet[ _CCONDENT ]:cText( ( dbfAlbCliT )->cCondEnt )\n         aGet[ _MCOMENT  ]:cText( ( dbfAlbCliT )->mComent )\n         aGet[ _MOBSERV  ]:cText( ( dbfAlbCliT )->mObserv )\n         aGet[ _CSUFAC   ]:cText( ( dbfAlbCliT )->cSuPed  )\n\n         /*\n         Pasamos todos los Descuentos\n         */\n\n         aGet[ _CDTOESP  ]:cText( ( dbfAlbCliT )->cDtoEsp )\n         aGet[ _CDPP     ]:cText( ( dbfAlbCliT )->cDpp    )\n         aGet[ _NDTOESP  ]:cText( ( dbfAlbCliT )->nDtoEsp )\n         aGet[ _NDPP     ]:cText( ( dbfAlbCliT )->nDpp    )\n         aGet[ _CDTOUNO  ]:cText( ( dbfAlbCliT )->cDtoUno )\n         aGet[ _NDTOUNO  ]:cText( ( dbfAlbCliT )->nDtoUno )\n         aGet[ _CDTODOS  ]:cText( ( dbfAlbCliT )->cDtoDos )\n         aGet[ _NDTODOS  ]:cText( ( dbfAlbCliT )->nDtoDos )\n         aGet[ _CMANOBR  ]:cText( ( dbfAlbCliT )->cManObr )\n         aGet[ _NIVAMAN  ]:cText( ( dbfAlbCliT )->nIvaMan )\n         aGet[ _NMANOBR  ]:cText( ( dbfAlbCliT )->nManObr )\n         aGet[ _NBULTOS  ]:cText( ( dbfAlbCliT )->nBultos )\n         aGet[ _CRETPOR  ]:cText( ( dbfAlbCliT )->cRetPor )\n\n         aTmp[ _CCODGRP ]              := ( dbfAlbCliT )->cCodGrp\n         aTmp[ _LMODCLI ]              := ( dbfAlbCliT )->lModCli\n         aTmp[ _LOPERPV ]              := ( dbfAlbCliT )->lOperPv\n\n         cSuPed                        := ( dbfAlbCliT )->cSuPed\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]            := ( dbfAlbCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]            := ( dbfAlbCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]            := ( dbfAlbCliT )->dFecSal\n\n         if !Empty( oTipFac )\n            if aTmp[ _LALQUILER ]\n               oTipFac:Select( 2 )\n            else\n               oTipFac:Select( 1 )\n            end if\n         end if\n\n         /*\n         Su albarán------------------------------------------------------------\n         */\n\n         aTmp[ _CSUALB ]               := ( dbfAlbCliT )->cCodSuAlb\n\n         /*\n         Comprobamos si el albaran tiene lineas de detalle\n         */\n\n         if ( dbfAlbCliL )->( dbSeek( cAlbaran ) )\n\n            if lNumAlb() .OR. lSuAlb()\n               ( dbfTmpLin )->( dbAppend() )\n               cDesAlb                 := \"\"\n               cDesAlb                 += If( lNumObr(), Rtrim( cNumObr() ) + \" \" + rtrim( (dbfAlbCliT)->CCODOBR ), \"\" )\n               cDesAlb                 += If( lNumAlb(), Rtrim( cNumAlb() ) + \" \" + rtrim( (dbfAlbCliT)->CSERALB + \"/\" + AllTrim( Str( (dbfAlbCliT)->NNUMALB ) ) + \"/\" + (dbfAlbCliT)->CSUFALB ), \"\" )\n               cDesAlb                 += If( lSuAlb(),  Rtrim( cSuAlb()  ) + \" \" + rtrim( (dbfAlbCliT)->CCODSUALB ), \"\" )\n               cDesAlb                 += \" - Fecha \" + Dtoc( (dbfAlbCliT)->DFECALB )\n               (dbfTmpLin)->cDetalle   := cDesAlb\n               (dbfTmpLin)->lControl   := .t.\n            end if\n\n            /*\n            A¤ade lineas de Albaran a la Factura\n            */\n\n            while ( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cAlbaran .and. !( dbfAlbCliL )->( eof() ) )\n\n               (dbfTmpLin)->( dbAppend() )\n               (dbfTmpLin)->CSERIE     := \" \"\n               (dbfTmpLin)->NNUMFAC    := 0\n               (dbfTmpLin)->nNumLin    := (dbfAlbCliL)->nNumLin\n               (dbfTmpLin)->CREF       := (dbfAlbCliL)->cRef\n               (dbfTmpLin)->CDETALLE   := (dbfAlbCliL)->cDetalle\n               (dbfTmpLin)->MLNGDES    := (dbfAlbCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfAlbCliL)->mNumSer\n               (dbfTmpLin)->NPREUNIT   := (dbfAlbCliL)->nPreUnit\n               (dbfTmpLin)->NPNTVER    := (dbfAlbCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfAlbCliL)->nImpTrn\n               (dbfTmpLin)->NCANENT    := (dbfAlbCliL)->nCanEnt\n               (dbfTmpLin)->CUNIDAD    := (dbfAlbCliL)->cUnidad\n               (dbfTmpLin)->NUNICAJA   := (dbfAlbCliL)->nUniCaja\n               (dbfTmpLin)->NDTO       := (dbfAlbCliL)->nDto\n               (dbfTmpLin)->NDTOPRM    := (dbfAlbCliL)->nDtoPrm\n               (dbfTmpLin)->NIVA       := (dbfAlbCliL)->NIVA\n               (dbfTmpLin)->nReq       := (dbfAlbCliL)->nReq\n               (dbfTmpLin)->NPESOKG    := (dbfAlbCliL)->NPESOKG\n               (dbfTmpLin)->cPESOKG    := (dbfAlbCliL)->cPESOKG\n               (dbfTmpLin)->NVOLUMEN   := (dbfAlbCliL)->NVOLUMEN\n               (dbfTmpLin)->CVOLUMEN   := (dbfAlbCliL)->CVOLUMEN\n               (dbfTmpLin)->NCOMAGE    := (dbfAlbCliL)->NCOMAGE\n               (dbfTmpLin)->DFECHA     := (dbfAlbCliL)->DFECHA\n               (dbfTmpLin)->CTIPMOV    := (dbfAlbCliL)->CTIPMOV\n               (dbfTmpLin)->CCODALB    := (dbfAlbCliL)->CSERALB + Str( (dbfAlbCliL)->NNUMALB ) + (dbfAlbCliL)->CSUFALB\n               (dbfTmpLin)->LTOTLIN    := (dbfAlbCliL)->LTOTLIN\n               (dbfTmpLin)->nDtoDiv    := (dbfAlbCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfAlbCliL)->nCtlStk\n               (dbfTmpLin)->cAlmLin    := (dbfAlbCliL)->cAlmLin\n               (dbfTmpLin)->cTipMov    := (dbfAlbCliL)->cTipMov\n               (dbfTmpLin)->lIvaLin    := (dbfAlbCliL)->lIvaLin\n               (dbfTmpLin)->lImpLin    := (dbfAlbCliL)->lImpLin\n               (dbfTmpLin)->nValImp    := (dbfAlbCliL)->nValImp\n               (dbfTmpLin)->cCodImp    := (dbfAlbCliL)->cCodImp\n               (dbfTmpLin)->CCODPR1    := (dbfAlbCliL)->CCODPR1\n               (dbfTmpLin)->CCODPR2    := (dbfAlbCliL)->CCODPR2\n               (dbfTmpLin)->CVALPR1    := (dbfAlbCliL)->CVALPR1\n               (dbfTmpLin)->CVALPR2    := (dbfAlbCliL)->CVALPR2\n               (dbfTmpLin)->nCosDiv    := (dbfAlbCliL)->nCosDiv\n               (dbfTmpLin)->lKitArt    := (dbfAlbCliL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfAlbCliL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfAlbCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfAlbCliL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfAlbCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfAlbCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfAlbCliL)->cLote\n               (dbfTmpLin)->lControl   := (dbfAlbCliL)->lControl\n               (dbfTmpLin)->lMsgVta    := (dbfAlbCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfAlbCliL)->lNotVta\n               (dbfTmpLin)->cCodTip    := (dbfAlbCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfAlbCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfAlbCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfAlbCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfAlbCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfAlbCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfAlbCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfAlbCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfAlbCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfAlbCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfAlbCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfAlbCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfAlbCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfAlbCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfAlbCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfAlbCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfAlbCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfAlbCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfAlbCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfAlbCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfAlbCliL)->nIncPnt\n               (dbfTmpLin)->nFacCnv    := (dbfAlbCliL)->nFacCnv\n               (dbfTmpLin)->lLinOfe    := (dbfAlbCliL)->lLinOfe\n               (dbfTmpLin)->dFecCad    := (dbfAlbCliL)->dFecCad\n               (dbfTmpLin)->cSuPed     := cSuPed\n\n               ( dbfAlbCliL )->( dbSkip() )\n\n            end while\n\n            /*\n            No permitimos mas albaranes----------------------------------------\n            */\n\n            HideImportacion( aGet, aGet[ _CNUMALB ] )\n\n            /*\n            Guardamos el numero del Albaran pos si no guardamos la factura-----\n            */\n\n            if aScan( aNumAlb, cAlbaran ) == 0\n               aAdd( aNumAlb, cAlbaran )\n            end if\n\n         else\n\n            MsgStop( \"Albarán no contiene lineas de detalle.\" )\n\n         end if\n\n         ( dbfTmpLin )->( dbGoTop() )\n\n         /*\n         Pasamos todas las series----------------------------------------------\n         */\n\n         if ( dbfAlbCliS )->( dbSeek( cAlbaran ) )\n\n            while ( dbfAlbCliS )->cSerAlb + Str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb == cAlbaran .and. !( dbfAlbCliS )->( Eof() )\n\n               ( dbfTmpSer )->( dbAppend() )\n               ( dbfTmpSer )->nNumLin  := ( dbfAlbCliS )->nNumLin\n               ( dbfTmpSer )->cRef     := ( dbfAlbCliS )->cRef\n               ( dbfTmpSer )->cAlmLin  := ( dbfAlbCliS )->cAlmLin\n               ( dbfTmpSer )->cNumSer  := ( dbfAlbCliS )->cNumSer\n\n               ( dbfAlbCliS )->( dbSkip() )\n\n            end while\n\n         end if\n\n         if uFieldEmpresa( \"lGrpEnt\" ) // agrupamos las entregas en una sola\n\n            /*\n            Sumamos todos los pagos--------------------------------------------\n            */\n\n            if ( dbfAlbCliP )->( dbSeek( cAlbaran ) )\n\n               while ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cAlbaran .and. !( dbfAlbCliP )->( Eof() )\n\n                  nTotEntAlb     += ( dbfAlbCliP )->nImporte\n\n                  ( dbfAlbCliP )->( dbSkip() )\n\n               end while\n\n            end if\n\n            ( dbfAlbCliP )->( dbGoTop() )\n\n            /*\n            Creamos un solo recibo con las entregas a cuenta-------------------\n            */\n\n            if nTotEntAlb != 0\n\n               ( dbfTmpPgo )->( dbAppend() )\n\n               ( dbfTmpPgo )->lCobrado := .t.\n               ( dbfTmpPgo )->lConPgo  := .f.\n               ( dbfTmpPgo )->lRecImp  := .f.\n               ( dbfTmpPgo )->lRecDto  := .f.\n               ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( RecNo() )\n               ( dbfTmpPgo )->cCodCaj  := ( dbfAlbCliT )->cCodCaj\n               ( dbfTmpPgo )->cCodCli  := ( dbfAlbCliT )->cCodCli\n               ( dbfTmpPgo )->cNomCli  := ( dbfAlbCliT )->cNomCli\n               ( dbfTmpPgo )->dEntrada := ( dbfAlbCliT )->dFecAlb\n               ( dbfTmpPgo )->dPreCob  := ( dbfAlbCliT )->dFecAlb\n               ( dbfTmpPgo )->dFecVto  := ( dbfAlbCliT )->dFecAlb\n               ( dbfTmpPgo )->nImporte := nTotEntAlb\n               ( dbfTmpPgo )->nImpCob  := nTotEntAlb\n               ( dbfTmpPgo )->cDivPgo  := ( dbfAlbCliT )->cDivAlb\n               ( dbfTmpPgo )->nVdvPgo  := ( dbfAlbCliT )->nVdvAlb\n               ( dbfTmpPgo )->cCodAge  := ( dbfAlbCliT )->cCodAge\n               ( dbfTmpPgo )->cTurRec  := ( dbfAlbCliT )->cTurAlb\n               ( dbfTmpPgo )->lCloPgo  := .t.\n               ( dbfTmpPgo )->cCodPgo  := ( dbfAlbCliT )->cCodPago\n               ( dbfTmpPgo )->cDescrip := \"Suma entregas a cuenta albarán: \" + ( dbfAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb\n               ( dbfTmpPgo )->( dbUnLock() )\n\n            end if\n\n         else  // Pasamos las entregas una a una\n\n\n            if ( dbfAlbCliP )->( dbSeek( cAlbaran ) )\n\n               while ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cAlbaran .and. !( dbfAlbCliP )->( Eof() )\n\n                  ( dbfTmpPgo )->( dbAppend() )\n\n                  ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( RecNo() )\n                  ( dbfTmpPgo )->cCodCaj  := ( dbfAlbCliP )->cCodCaj\n                  ( dbfTmpPgo )->cTurRec  := ( dbfAlbCliP )->cTurRec\n                  ( dbfTmpPgo )->cCodCli  := ( dbfAlbCliP )->cCodCli\n                  ( dbfTmpPgo )->dEntrada := ( dbfAlbCliP )->dEntrega\n                  ( dbfTmpPgo )->dPreCob  := ( dbfAlbCliP )->dEntrega\n                  ( dbfTmpPgo )->dFecVto  := ( dbfAlbCliP )->dEntrega\n                  ( dbfTmpPgo )->nImporte := ( dbfAlbCliP )->nImporte\n                  ( dbfTmpPgo )->nImpCob  := ( dbfAlbCliP )->nImporte\n                  if !Empty( ( dbfAlbCliP )->cDescrip )\n                  ( dbfTmpPgo )->cDescrip := ( dbfAlbCliP )->cDescrip\n                  else\n                  ( dbfTmpPgo )->cDescrip := \"Entrega nº \" + AllTrim( Str( ( dbfTmpPgo )->( RecNo() ) ) ) + \" albarán \" + ( dbfAlbCliP )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliP )->nNumAlb ) ) + \"/\" + ( dbfAlbCliP )->cSufAlb\n                  end if\n                  ( dbfTmpPgo )->cPgdoPor := ( dbfAlbCliP )->cPgdoPor\n                  ( dbfTmpPgo )->cDocPgo  := ( dbfAlbCliP )->cDocPgo\n                  ( dbfTmpPgo )->cDivPgo  := ( dbfAlbCliP )->cDivPgo\n                  ( dbfTmpPgo )->nVdvPgo  := ( dbfAlbCliP )->nVdvPgo\n                  ( dbfTmpPgo )->cCodAge  := ( dbfAlbCliP )->cCodAge\n                  ( dbfTmpPgo )->cBncEmp  := ( dbfAlbCliP )->cBncEmp\n                  ( dbfTmpPgo )->cBncCli  := ( dbfAlbCliP )->cBncCli\n                  ( dbfTmpPgo )->cEntEmp  := ( dbfAlbCliP )->cEntEmp\n                  ( dbfTmpPgo )->cSucEmp  := ( dbfAlbCliP )->cSucEmp\n                  ( dbfTmpPgo )->cDigEmp  := ( dbfAlbCliP )->cDigEmp\n                  ( dbfTmpPgo )->cCtaEmp  := ( dbfAlbCliP )->cCtaEmp\n                  ( dbfTmpPgo )->cEntCli  := ( dbfAlbCliP )->cEntCli\n                  ( dbfTmpPgo )->cSucCli  := ( dbfAlbCliP )->cSucCli\n                  ( dbfTmpPgo )->cDigCli  := ( dbfAlbCliP )->cDigCli\n                  ( dbfTmpPgo )->cCtaCli  := ( dbfAlbCliP )->cCtaCli\n                  ( dbfTmpPgo )->lCobrado := .t.\n                  ( dbfTmpPgo )->lConPgo  := .f.\n                  ( dbfTmpPgo )->lRecImp  := .f.\n                  ( dbfTmpPgo )->lRecDto  := .f.\n\n                  ( dbfAlbCliP )->( dbSkip() )\n\n               end while\n\n            end if\n\n         end if\n\n         /*\n         Pasamos las incidencias del albarán\n         */\n\n         if ( dbfAlbCliI )->( dbSeek( cAlbaran ) )\n\n            while ( dbfAlbCliI )->cSerAlb + Str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == cAlbaran .and. !( dbfAlbCliI )->( Eof() )\n               dbPass( dbfAlbCliI, dbfTmpInc, .t. )\n               ( dbfAlbCliI )->( dbSkip() )\n            end while\n\n         end if\n\n         /*\n         Pasamos los documentos de los pedidos\n         */\n\n         if ( dbfAlbCliD )->( dbSeek( cAlbaran ) )\n\n            while ( dbfAlbCliD )->cSerAlb + Str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb == cAlbaran .and. !( dbfAlbCliD )->( Eof() )\n               dbPass( dbfAlbCliD, dbfTmpDoc, .t. )\n               ( dbfAlbCliD )->( dbSkip() )\n            end while\n\n         end if\n\n         ( dbfAlbCliD )->( dbGoTop() )\n\n         oBrwLin:Refresh()\n         oBrwPgo:Refresh()\n\n         oBrwLin:SetFocus()\n\n         HideImportacion( aGet, aGet[ _CNUMALB ] )\n\n         CursorWE()\n\n      end if\n\n   else\n\n      MsgStop( \"Albarán : \" + cAlbaran + \" no encontrado\" )\n\n   end if\n\n   SetStatus( dbfAlbCliT, aAlbCliT )\n   SetStatus( dbfAlbCliL, aAlbCliL )\n\n   if !Empty( oBrwPgo )\n      oBrwPgo:Refresh()\n   end if\n\nRETURN .T.\n\n//--------------------------------------------------------------------------//\n/*\nImporta desde una factura de proveedor\n*/\n\nSTATIC FUNCTION cFacPrv( cFacPrv, aGet, aTmp, oBrw, nMode )\n\n   local aFacPrvT\n   local aFacPrvL\n   local aFacPrvS\n\n   if nMode != APPD_MODE .OR. Empty( cFacPrv )\n      return .t.\n   end if\n\n   aFacPrvT          := aGetStatus( dbfFacPrvT, .t. )\n   aFacPrvL          := aGetStatus( dbfFacPrvL, .t. )\n   aFacPrvS          := aGetStatus( dbfFacPrvS, .t. )\n\n   if ( dbfFacPrvT )->( dbSeek( cFacPrv ) )\n\n      /*\n      Metemos los datos de la cabecera-----------------------------------------\n      */\n\n      aGet[ _CCODALM ]:cText( ( dbfFacPrvT )->cCodAlm )\n      aGet[ _CCODALM ]:lValid()\n      aGet[ _CCODCAJ ]:cText( ( dbfFacPrvT )->cCodCaj )\n      aGet[ _CCODCAJ ]:lValid()\n      aGet[ _NBULTOS ]:cText( ( dbfFacPrvT )->nBultos )\n      aGet[ _CCONDENT]:cText( ( dbfFacPrvT )->cCondEnt )\n      aGet[ _MCOMENT ]:cText( ( dbfFacPrvT )->mComent )\n      aGet[ _MOBSERV ]:cText( ( dbfFacPrvT )->cObserv )\n\n      aTmp[ _CFACPRV ]                   := ( dbfFacPrvT )->cSerFac + Str( ( dbfFacPrvT )->nNumFac ) + ( dbfFacPrvT )->cSufFac\n\n      /*\n      Pasamos las lineas de detalle-----------------------------------------\n      */\n\n      if ( dbfFacPrvL )->( dbSeek( cFacPrv ) )\n\n         while ( ( dbfFacPrvL )->cSerFac + Str( ( dbfFacPrvL )->nNumFac ) + ( dbfFacPrvL )->cSufFac == cFacPrv .and. !( dbfFacPrvL )->( eof() ) )\n\n            if !( dbfFacPrvL )->lControl\n\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin    := ( dbfFacPrvL )->nNumLin\n               ( dbfTmpLin )->cRef       := ( dbfFacPrvL )->cRef\n               ( dbfTmpLin )->cRefPrv    := ( dbfFacPrvL )->cRefPrv\n               ( dbfTmpLin )->cDetalle   := ( dbfFacPrvL )->cDetalle\n               ( dbfTmpLin )->mLngDes    := ( dbfFacPrvL )->mLngDes\n               ( dbfTmpLin )->mNumSer    := ( dbfFacPrvL )->mNumSer\n               ( dbfTmpLin )->nCanEnt    := ( dbfFacPrvL )->nCanEnt\n               ( dbfTmpLin )->cUnidad    := ( dbfFacPrvL )->cUnidad\n               ( dbfTmpLin )->nUniCaja   := ( dbfFacPrvL )->nUniCaja\n               ( dbfTmpLin )->nIva       := ( dbfFacPrvL )->nIva\n               ( dbfTmpLin )->nReq       := ( dbfFacPrvL )->nReq\n               ( dbfTmpLin )->dFecha     := ( dbfFacPrvT )->dFecFac\n               ( dbfTmpLin )->nCtlStk    := ( dbfFacPrvL )->nCtlStk\n               ( dbfTmpLin )->cAlmLin    := ( dbfFacPrvL )->cAlmLin\n               ( dbfTmpLin )->lIvaLin    := ( dbfFacPrvL )->lIvaLin\n               ( dbfTmpLin )->cCodPr1    := ( dbfFacPrvL )->cCodPr1\n               ( dbfTmpLin )->cCodPr2    := ( dbfFacPrvL )->cCodPr2\n               ( dbfTmpLin )->cValPr1    := ( dbfFacPrvL )->cValPr1\n               ( dbfTmpLin )->cValPr2    := ( dbfFacPrvL )->cValPr2\n               ( dbfTmpLin )->nCosDiv    := ( dbfFacPrvL )->nPreUnit\n               ( dbfTmpLin )->lKitArt    := ( dbfFacPrvL )->lKitArt\n               ( dbfTmpLin )->lKitChl    := ( dbfFacPrvL )->lKitChl\n               ( dbfTmpLin )->lKitPrc    := ( dbfFacPrvL )->lKitPrc\n               ( dbfTmpLin )->lLote      := ( dbfFacPrvL )->lLote\n               ( dbfTmpLin )->nLote      := ( dbfFacPrvL )->nLote\n               ( dbfTmpLin )->cLote      := ( dbfFacPrvL )->cLote\n               ( dbfTmpLin )->cCodFam    := ( dbfFacPrvL )->cCodFam\n               ( dbfTmpLin )->cGrpFam    := ( dbfFacPrvL )->cGrpFam\n               ( dbfTmpLin )->cCodPrv    := ( dbfFacPrvT )->cCodPrv\n               ( dbfTmpLin )->cNomPrv    := ( dbfFacPrvT )->cNomPrv\n               ( dbfTmpLin )->nNumMed    := ( dbfFacPrvL )->nNumMed\n               ( dbfTmpLin )->nMedUno    := ( dbfFacPrvL )->nMedUno\n               ( dbfTmpLin )->nMedDos    := ( dbfFacPrvL )->nMedDos\n               ( dbfTmpLin )->nMedTre    := ( dbfFacPrvL )->nMedTre\n               ( dbfTmpLin )->nFacCnv    := ( dbfFacPrvL )->nFacCnv\n               ( dbfTmpLin )->mObsLin    := ( dbfFacPrvL )->mObsLin\n\n            end if\n\n            ( dbfFacPrvL )->( dbSkip() )\n\n         end while\n\n      else\n\n         MsgStop( \"La factura no contiene lineas de detalle.\" )\n\n      end if\n\n      ( dbfTmpLin )->( dbGoTop() )\n\n      /*\n      Pasamos todas las series----------------------------------------------\n      */\n\n      if ( dbfFacPrvS )->( dbSeek( cFacPrv ) )\n\n         while ( dbfFacPrvS )->cSerFac + Str( ( dbfFacPrvS )->nNumFac ) + ( dbfFacPrvS )->cSufFac == cFacPrv .and. !( dbfFacPrvS )->( Eof() )\n\n            ( dbfTmpSer )->( dbAppend() )\n            ( dbfTmpSer )->nNumLin  := ( dbfFacPrvS )->nNumLin\n            ( dbfTmpSer )->cRef     := ( dbfFacPrvS )->cRef\n            ( dbfTmpSer )->cAlmLin  := ( dbfFacPrvS )->cAlmLin\n            ( dbfTmpSer )->cNumSer  := ( dbfFacPrvS )->cNumSer\n\n            ( dbfFacPrvS )->( dbSkip() )\n\n         end while\n\n      end if\n\n      /*\n      Recalculamos los precios de los artículos y refrescamos el browse--------\n      */\n\n      RecFacCli( aTmp, .f. )\n\n      oBrw:SetFocus()\n      oBrw:Refresh()\n\n      RecalculaTotal( aTmp )\n\n   else\n\n      MsgStop( \"Factura : \" + cFacPrv + \" no encontrada\" )\n\n   end if\n\n   SetStatus( dbfFacPrvT, aFacPrvT )\n   SetStatus( dbfFacPrvL, aFacPrvL )\n   SetStatus( dbfFacPrvS, aFacPrvS )\n\nRETURN .T.\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el codigo del Cliente pasando un numero de factura\n*/\n\nFUNCTION cCliFacCli( cFacCli, uFacCliT )\n\n   local cCodCli  := \"\"\n\n   do case\n      case ValType( uFacCliT ) == \"C\"\n         if (uFacCliT)->( dbSeek( cFacCli ) )\n            cCodCli     := (uFacCliT)->CCODCLI\n         end if\n      case ValType( uFacCliT ) == \"O\"\n         if uFacCliT:Seek( cFacCli )\n            cCodCli     := uFacCliT:cCodCli\n         end if\n   end case\n\nRETURN ( cCodCli )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el codigo del Cliente pasando un numero de factura\n*/\n\nFUNCTION cNbrFacCli( cFacCli, uFacCliT )\n\n   local cNomCli  := \"\"\n\n   do case\n      case ValType( uFacCliT ) == \"C\"\n         if (uFacCliT)->( dbSeek( cFacCli ) )\n            cNomCli     := (uFacCliT)->CNOMCLI\n         end if\n      case ValType( uFacCliT ) == \"O\"\n         if uFacCliT:Seek( cFacCli )\n            cNomCli     := uFacCliT:cNomCli\n         end if\n   end case\n\nRETURN ( cNomCli )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve la forma de pago pasando un numero de factura\n*/\n\nFUNCTION cPgoFacCli( cFacCli, dbfFacCliT )\n\n   local cCodPgo  := \"\"\n\n   if ValType( dbfFacCliT ) == \"O\"\n      if dbfFacCliT:Seek( cFacCli )\n         cCodPgo  := dbfFacCliT:cCodPago\n      end if\n   else\n      if ( dbfFacCliT )->( dbSeek( cFacCli ) )\n         cCodPgo  := ( dbfFacCliT )->cCodPago\n      end if\n   end if\n\nRETURN ( cCodPgo )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION cProFacCli( cFacCli, dbfFacCliT )\n\n   local cCodPro  := \"\"\n\n   if ( dbfFacCliT )->( dbSeek( cFacCli ) )\n      cCodPro     := ( dbfFacCliT )->CCODPRO\n   END IF\n\nRETURN ( cCodPro )\n\n//----------------------------------------------------------------------------//\n/*\nDevuelve si la factura esta contabilizada o no\n*/\n\nFUNCTION lConFacCli( cFacCli, dbfFacCliT )\n\n   local lConFac  := .f.\n\n   if ( dbfFacCliT )->( dbSeek( cFacCli ) )\n      lConFac     := ( dbfFacCliT )->lContab\n   end if\n\nRETURN ( lConFac )\n\n//----------------------------------------------------------------------------//\n/*\nDevuelve el codigo de cliente de una factura\n*/\n\nFUNCTION cAgeFacCli( cFacCli, dbfFacCliT )\n\n   local cCliFac  := \"\"\n\n   if ValType( dbfFacCliT ) == \"O\"\n      if dbfFacCliT:Seek( cFacCli )\n         cCliFac  := dbfFacCliT:cCodAge\n      end if\n   else\n      if ( dbfFacCliT )->( dbSeek( cFacCli ) )\n         cCliFac  := ( dbfFacCliT )->cCodAge\n      end if\n   end if\n\nRETURN ( cCliFac )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve la descripción de una line de factura\n*/\n\nFUNCTION cDesFacCli( cFacCliL, cFacCliS )\n\n   DEFAULT cFacCliL  := dbfFacCliL\n   DEFAULT cFacCliS  := dbfFacCliS\n\nRETURN ( Descrip( cFacCliL, cFacCliS ) )\n\n//---------------------------------------------------------------------------//\n\nFunction cCtaFacCli( cFacCliT, cFacCliP, cBncCli )\n\n   local cCtaFacCli     := \"\"\n\n   DEFAULT cFacCliT     := dbfFacCliT\n   DEFAULT cFacCliP     := dbfFacCliP\n   DEFAULT cBncCli      := dbfCliBnc\n\n   cCtaFacCli           := Rtrim( ( cFacCliT )->cEntBnc + ( cFacCliT )->cSucBnc + ( cFacCliT )->cDigBnc + ( cFacCliT )->cCtaBnc )\n\n   if Empty( cCtaFacCli )\n      if dbSeekInOrd( ( cFacCliT )->cSerie + Str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac, \"nNumFac\", cFacCliP )\n         cCtaFacCli     := cClientCuenta( ( cFacCliP )->cCodCli, cBncCli )\n      end if\n   end if\n\nReturn ( cCtaFacCli )\n\n//------------------------------------------------------------------------//\n\nFUNCTION nBas( aIva, nPctIva, nRet )\n\n   local nPos := aScan( aIva, {| aIva | aIva[ 3 ] == nPctIva } )\n\nRETURN ( if( nPos != 0, aIva[ nPos, nRet ], 0 ) )\n\n//---------------------------------------------------------------------------//\n\nstatic function lGenFacCli( oBrw, oBtn, nDevice )\n\n   local bAction\n\n   DEFAULT nDevice   := IS_PRINTER\n\n   if Empty( oBtn )\n      return nil\n   end if\n\n   if !( dbfDoc )->( dbSeek( \"FC\" ) )\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT\" OF oWndBrw ;\n            NOBORDER ;\n            ACTION   ( msgStop( \"No hay facturas de clientes predefinidas\" ) );\n            TOOLTIP  \"No hay documentos\" ;\n            HOTKEY   \"N\";\n            FROM     oBtn ;\n            CLOSED ;\n            LEVEL    ACC_EDIT\n\n   else\n\n      while ( dbfDoc )->cTipo == \"FC\" .AND. !( dbfDoc )->( eof() )\n\n         bAction  := bGenFacCli( nDevice, \"Imprimiendo facturas de clientes\", ( dbfDoc )->Codigo )\n\n         oWndBrw:NewAt( \"Document\", , , bAction, Rtrim( ( dbfDoc )->cDescrip ) , , , , , oBtn )\n\n         ( dbfDoc )->( dbSkip() )\n\n      end do\n\n   end if\n\n   SysRefresh()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function bGenFacCli( nDevice, cTitle, cCodDoc )\n\n   local bGen\n   local nDev  := by( nDevice )\n   local cTit  := by( cTitle  )\n   local cCod  := by( cCodDoc )\n\n   if nDev == IS_PRINTER\n      bGen     := {|| GenFacCli( nDevice, cTit, cCod ) }\n   else\n      bGen     := {|| GenFacCli( nDevice, cTit, cCod ) }\n   end if\n\nreturn ( bGen )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la compra en facturas de proveedores de un articulo\n//\n\n/*function nTotVFacCli( cCodArt, dbfFacCliL, nDouDiv, nDorDiv )\n\n   local nTotVta  := 0\n   local nOrd     := ( dbfFacCliL )->( OrdSetFocus( \"cRef\" ) )\n   local nRec     := ( dbfFacCliL )->( Recno() )\n\n   if ( dbfFacCliL )->( dbSeek( cCodArt ) )\n\n      while ( dbfFacCliL )->CREF == cCodArt .and. !( dbfFacCliL )->( eof() )\n\n         if !( dbfFacCliL )->LTOTLIN\n            nTotVta += nTotLFacCli( dbfFacCliL, nDouDiv, nDorDiv )\n         end if\n\n         ( dbfFacCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfFacCliL )->( OrdSetFocus( nOrd  ) )\n   ( dbfFacCliL )->( dbGoTo( nRec ) )\n\nreturn ( nTotVta ) */\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la compra en facturas de proveedores de un articulo\n//\n\nfunction nTotDFacCli( cCodArt, dbfFacCliL, cCodAlm )\n\n   local nOrd     := ( dbfFacCliL )->( OrdSetFocus( \"cRef\" ) )\n   local nRec     := ( dbfFacCliL )->( Recno() )\n   local nTotVta  := 0\n\n   if ( dbfFacCliL )->( dbSeek( cCodArt ) )\n\n      while ( dbfFacCliL )->CREF == cCodArt .and. !( dbfFacCliL )->( eof() )\n\n         if !( dbfFacCliL )->LTOTLIN\n            if cCodAlm != nil\n               if cCodAlm == ( dbfFacCliL )->cAlmLin\n                  nTotVta  += nTotNFacCli( dbfFacCliL ) * NotCero( ( dbfFacCliL )->nFacCnv )\n               end if\n            else\n               nTotVta     += nTotNFacCli( dbfFacCliL ) * NotCero( ( dbfFacCliL )->nFacCnv )\n            end if\n         end if\n\n         ( dbfFacCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfFacCliL )->( OrdSetFocus( nOrd  ) )\n   ( dbfFacCliL )->( dbGoTo( nRec ) )\n\nreturn ( nTotVta )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nVolLFacCli( dbfLin )\n\n   local nCalculo    := 0\n\n   if !( dbfLin )->lTotLin\n      nCalculo       := nTotNFacCli( dbfLin ) * ( dbfLin )->nVolumen\n   end if\n\nRETURN ( nCalculo )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTotPFacCli( dbfLin, nDec, nVdv, cPorDiv )\n\n   local nCalculo\n   local nDescuentoGeneral\n   local nDescuentoPromocional\n\n   DEFAULT dbfLin                := dbfFacCliL\n   DEFAULT nDec                  := nDouDiv()\n   DEFAULT nVdv                  := 1\n\n   if ( dbfLin )->lTotLin\n\n      nCalculo                   := nTotUFacCli( dbfLin, nDec )\n\n   else\n\n      /*\n      Tomamos los valores redondeados------------------------------------------\n      */\n\n      nCalculo                   := nTotUFacCli( dbfLin, nDec )\n\n      nCalculo                   -= Round( ( dbfLin )->nDtoDiv , nDec )\n\n      if ( dbfLin )->nDto != 0\n         nCalculo                -= nCalculo * ( dbfLin )->nDto / 100\n      end if\n\n      if ( dbfLin )->nDtoPrm != 0\n         nCalculo                -= nCalculo * ( dbfLin )->nDtoPrm / 100\n      end if\n\n      /*\n      nCalculo                   -= nDescuentoGeneral\n      nCalculo                   -= nDescuentoPromocional\n      */\n\n   end if\n\n   nCalculo                      := Round( nCalculo / nVdv, nDec )\n\nRETURN ( if( cPorDiv != NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el importe del descuento lineal\n//\n\nFUNCTION nDtoLFacCli( dbfLin, nDec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   /*\n   Tomamos los valores redondeados------------------------------------------\n   */\n\n   if ( dbfLin )->nDto != 0\n      nCalculo       := nTotUFacCli( dbfLin, nDec )\n      nCalculo       -= Round( Div( ( dbfLin )->nDtoDiv, nVdv ), nDec )\n      nCalculo       := nCalculo * ( dbfLin )->nDto / 100\n      nCalculo       := Round( nCalculo / nVdv, nDec )\n   end if\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nPrmLFacCli( dbfLin, nDec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   /*\n   Tomamos los valores redondeados------------------------------------------\n   */\n\n   if ( dbfLin )->nDto != 0\n      nCalculo       := nTotUFacCli( dbfLin, nDec )\n      nCalculo       -= Round( Div( ( dbfLin )->nDtoDiv, nVdv ), nDec )\n      nCalculo       := nCalculo * ( dbfLin )->nDtoPrm / 100\n      nCalculo       := Round( nCalculo / nVdv, nDec )\n   end if\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFunction nTotDtoLFacCli( dbfLin, nDec, nVdv, cPorDiv )\n\n   local nCalculo\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   nCalculo          := nDtoLFacCli( dbfLin, nDec, nVdv ) * nTotNFacCli( dbfLin )\n\n   if nVdv != 0\n      nCalculo       := nCalculo / nVdv\n   end if\n\n   nCalculo          := Round( nCalculo, nDec )\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION sTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )\n\n   local uTotLFacCli\n   local nTotLFacCli := nTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )\n\n   if nTotLFacCli == 0 .and. !( dbfLin )->lControl\n      uTotLFacCli    := \"S/C\"\n   else\n      uTotLFacCli    := if( cPorDiv != NIL, Trans( nTotLFacCli, cPorDiv ), nTotLFacCli )\n   end if\n\nRETURN ( uTotLFacCli )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION nDtoAtpFacCli( uFacCliT, dbfFacCliL, nDec, nRou, nVdv, lPntVer, lImpTrn )\n\n   local nCalculo\n   local nDtoAtp  := 0\n\n   DEFAULT nDec   := 0\n   DEFAULT nRou   := 0\n   DEFAULT nVdv   := 1\n   DEFAULT lPntVer:= .f.\n   DEFAULT lImpTrn:= .f.\n\n   nCalculo       := nTotLFacCli( dbfFacCliL, nDec, nRou, nVdv, .t., lPntVer, lImpTrn )\n\n   if ( uFacCliT )->nSbrAtp <= 1 .and. ( uFacCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nRou )\n\n   if ( uFacCliT )->nSbrAtp == 2 .and. ( uFacCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nRou )\n\n   if ( uFacCliT )->nSbrAtp == 3 .and. ( uFacCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nRou )\n\n   if ( uFacCliT )->nSbrAtp == 4 .and. ( uFacCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nRou )\n\n   if ( uFacCliT )->nSbrAtp == 5 .and. ( uFacCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uFacCliT )->nDtoAtp / 100, nRou )\n   end if\n\nRETURN ( nDtoAtp )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el neto de una linea de articulo\n//\n\nFUNCTION nNetLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo\n\n   DEFAULT cFacCliL  := dbfFacCliL\n   DEFAULT nDec      := 2\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n\n   nCalculo          := nTotLFacCli( cFacCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )\n\n   if ( cFacCliL )->nIva != 0 .and. ( cFacCliL )->lIvaLin\n      if nRou != nil\n         nCalculo -= Round( nCalculo / ( 100 / ( cFacCliL )->nIva + 1 ), nRou )\n      else\n         nCalculo -= ( nCalculo / ( 100 / ( cFacCliL )->nIva + 1 ) )\n      end if\n   end if\n\nRETURN ( if( cPouDiv != NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la venta en Facturas de un clientes determinado\n//\n\nfunction nVtaFacCli( cCodCli, dDesde, dHasta, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, nYear )\n\n   local nCon     := 0\n   local nOrd     := ( dbfFacCliT )->( OrdSetFocus( \"CCODCLI\" ) )\n   local nRec     := ( dbfFacCliT )->( Recno() )\n\n   /*\n   Facturas a Clientes -------------------------------------------------------\n   */\n\n   if ( dbfFacCliT )->( dbSeek( cCodCli ) )\n\n      while ( dbfFacCliT )->cCodCli = cCodCli .and. !( dbfFacCliT )->( Eof() )\n\n         if ( dDesde == nil .or. ( dbfFacCliT )->DFECFAC >= dDesde ) .and.;\n            ( dHasta == nil .or. ( dbfFacCliT )->DFECFAC <= dHasta ) .and.;\n            ( nYear == nil .or. Year( ( dbfFacCliT )->dFecFac ) == nYear )\n\n            nCon  += nTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, nil, dbfAntCliT, nil, cDivEmp(), .f. )\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n   end if\n\n   ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n   ( dbfFacCliT )->( dbGoTo( nRec ) )\n\nreturn nCon\n\n//----------------------------------------------------------------------------//\n//\n// Devuelve el total de pagos en Facturas de un clientes determinado\n//\n\nfunction nCobFacCli( cCodCli, dDesde, dHasta, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, lOnlyCob, nYear )\n\n   local nCon        := 0\n   local nOrd        := ( dbfFacCliP )->( OrdSetFocus( \"CCODCLI\" ) )\n   local nRec        := ( dbfFacCliP )->( Recno() )\n\n   DEFAULT lOnlyCob  := .t.\n\n   /*\n   Facturas a Clientes -------------------------------------------------------\n   */\n\n   if ( dbfFacCliP )->( dbSeek( cCodCli ) )\n\n      while ( dbfFacCliP )->cCodCli = cCodCli .and. !( dbfFacCliP )->( Eof() )\n\n         if ( ( dbfFacCliP )->lCobrado )                                   .and.;\n            ( dDesde == nil .or. ( dbfFacCliP )->dEntrada >= dDesde )      .and.;\n            ( dHasta == nil .or. ( dbfFacCliP )->dEntrada <= dHasta )      .and.;\n            ( nYear == nil .or. Year( ( dbfFacCliP )->dEntrada ) == nYear )\n\n            nCon     += nTotCobCli( dbfFacCliP, dbfDiv, nil, .f. )\n\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n   end if\n\n   ( dbfFacCliP )->( OrdSetFocus( nOrd ) )\n   ( dbfFacCliP )->( dbGoTo( nRec ) )\n\nreturn nCon\n\n//----------------------------------------------------------------------------//\n\nfunction nPdtFacCli( cCodCli, dDesde, dHasta, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, lOnlyCob, nYear )\n\n   local nCon        := 0\n   local nOrd        := ( dbfFacCliP )->( OrdSetFocus( \"CCODCLI\" ) )\n   local nRec        := ( dbfFacCliP )->( Recno() )\n\n   DEFAULT lOnlyCob  := .t.\n\n   /*\n   Facturas a Clientes -------------------------------------------------------\n   */\n\n   if ( dbfFacCliP )->( dbSeek( cCodCli ) )\n\n      while ( dbfFacCliP )->cCodCli = cCodCli .and. !( dbfFacCliP )->( Eof() )\n\n         if (!( dbfFacCliP )->lCobrado )                                   .and.;\n            ( dDesde == nil .or. ( dbfFacCliP )->dEntrada >= dDesde )      .and.;\n            ( dHasta == nil .or. ( dbfFacCliP )->dEntrada <= dHasta )      .and.;\n            ( nYear == nil .or. Year( ( dbfFacCliP )->dEntrada ) == nYear )\n\n            nCon     += nTotRecCli( dbfFacCliP, dbfDiv, nil, .f. )\n\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n   end if\n\n   ( dbfFacCliP )->( OrdSetFocus( nOrd ) )\n   ( dbfFacCliP )->( dbGoTo( nRec ) )\n\nreturn nCon\n\n//----------------------------------------------------------------------------//\n\nstatic function QuiFacCli()\n\n   local nOrdAnt\n   local cSerDoc\n   local nNumDoc\n   local cSufDoc\n   local cNumPed\n   local cNumAlb\n   local nRec\n\n   if ( dbfFacCliT )->lCloFac .and. !oUser():lAdministrador()\n      msgStop( \"Solo puede eliminar facturas cerradas los administradores.\" )\n      return .f.\n   end if\n\n   cSerDoc           := ( dbfFacCliT )->cSerie\n   nNumDoc           := ( dbfFacCliT )->nNumFac\n   cSufDoc           := ( dbfFacCliT )->cSufFac\n   cNumPed           := ( dbfFacCliT )->cNumPed\n   cNumAlb           := ( dbfFacCliT )->cNumAlb\n\n   /*\n   Eliminamos las lineas-------------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliL )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliL )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliL )->( eof() )\n      if dbLock( dbfFacCliL )\n         ( dbfFacCliL )->( dbDelete() )\n         ( dbfFacCliL )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliL )->( dbSkip() )\n   end do\n\n   ( dbfFacCliL )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos los pagos--------------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliP )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliP )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliP )->( eof() )\n      if dbLock( dbfFacCliP )\n         ( dbfFacCliP )->( dbDelete() )\n         ( dbfFacCliP )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliP )->( dbSkip() )\n   end do\n\n   ( dbfFacCliP )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos las incidencias--------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliI )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliI )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliI )->( eof() )\n      if dbLock( dbfFacCliI )\n         ( dbfFacCliI )->( dbDelete() )\n         ( dbfFacCliI )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliI )->( dbSkip() )\n   end do\n\n   ( dbfFacCliI )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos los documentos---------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliD )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliD )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliD )->( eof() )\n      if dbLock( dbfFacCliD )\n         ( dbfFacCliD )->( dbDelete() )\n         ( dbfFacCliD )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliD )->( dbSkip() )\n   end do\n\n   ( dbfFacCliD )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos las series-------------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliS )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliS )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliS )->( eof() )\n      if dbLock( dbfFacCliS )\n         ( dbfFacCliS )->( dbDelete() )\n         ( dbfFacCliS )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliS )->( dbSkip() )\n   end do\n\n   ( dbfFacCliS )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Desmarcamos las entregas acuenta de pedido----------------------------------\n   */\n\n   if !Empty( cNumPed )\n\n      if( dbfPedCliP )->( dbSeek( cNumPed ) )\n\n         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .and. !( dbfPedCliP )->( Eof() )\n\n            if dbLock( dbfPedCliP )\n               ( dbfPedCliP )->lPasado := .f.\n               ( dbfPedCliP )->( dbUnLock() )\n            end if\n\n         ( dbfPedCliP )->( dbSkip() )\n\n         end while\n\n      end if\n\n      /*\n      Actualizamos el estado del pedido----------------------------------------\n      */\n\n      oStock:SetEstadoPedCli( cNumPed, .t., cSerDoc + Str( nNumDoc ) + cSufDoc )\n\n   end if\n\n   //Desmarcamos las entregas a cuenta de albabán\n\n   if !Empty( cNumAlb )\n\n      if( dbfAlbCliP )->( dbSeek( cNumAlb ) )\n\n         while ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cNumAlb .and. !( dbfAlbCliP )->( Eof() )\n\n            if dbLock( dbfAlbCliP )\n               ( dbfAlbCliP )->lPasado := .f.\n               ( dbfAlbCliP )->( dbUnLock() )\n            end if\n\n         ( dbfAlbCliP )->( dbSkip() )\n\n         end while\n\n      end if\n\n   end if\n\n   /*\n   Restaura los Albaranes caso de estar facturados-----------------------------\n   */\n\n   nOrdAnt  := ( dbfAlbCliT )->( OrdSetFocus( \"cNumFac\" ) )\n\n   while ( dbfAlbCliT )->( dbSeek( cSerDoc + Str( nNumDoc, 9 ) + cSufDoc ) ) .and. !( dbfAlbCliT )->( eof() )\n\n      SetFacturadoAlbaranCliente( .f., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )\n\n   end while\n\n   ( dbfAlbCliT )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Devolvemos los presupuestos a su estado anterior----------------------------\n   */\n\n   if !Empty( ( dbfFacCliT )->cNumPre )\n      if ( dbfPreCliT )->( dbSeek( ( dbfFacCliT )->cNumPre ) )\n         if ( dbfPreCliT )->( dbRLock() )\n            ( dbfPreCliT )->lEstado := .f.\n            ( dbfPreCliT )->( DbUnlock() )\n         end if\n      end if\n   end if\n\n   /*\n   Devolvemos los anticipos a su estado anterior-------------------------------\n   */\n\n   nOrdAnt     := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n\n   if ( dbfAntCliT )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n\n      while ( dbfAntCliT )->cNumDoc == ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac .and. !( dbfAntCliT )->( eof() )\n\n         if dbLock( dbfAntCliT )\n            ( dbfAntCliT )->lLiquidada := .f.\n            ( dbfAntCliT )->( dbUnLock() )\n         end if\n\n         ( dbfAntCliT )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfAntCliT )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Elimina el documento asociado-----------------------------------------------\n   */\n\n   if !Empty( ( dbfFacCliT )->cNumDoc ) .and. ( dbfTikT )->( dbSeek( ( dbfFacCliT )->cNumDoc ) )\n      DelRecno( dbfTikT, nil, .f. )\n   end if\n\n   if !Empty( oAuditor() )\n      oAuditor():AddEvent( DELETE_FACTURA_CLIENTES, cSerDoc + Str( nNumDoc ) + cSufDoc, FAC_CLI )\n   end if\n\n   /*\n   Marcamos el contador--------------------------------------------------------\n   */\n\n   if uFieldEmpresa(  )\n\n   nPutDoc( cSerDoc, nNumDoc, cSufDoc, dbfFacCliT, \"nFacCli\", , dbfCount )\n\nreturn .t.\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION aGetSelRec( oBrw, bAction, cTitle, lHide1, cTitle1, lHide2, cTitle2, bPreAction, bPostAction )\n\n   local oDlg\n   local oBtnOk\n   local oBtnCancel\n   local oRad\n   local nRad        := 1\n   local aRet        := {}\n   local oTree\n   local oChk1\n   local oChk2\n   local lChk1       := .t.\n   local lChk2       := .t.\n   local nRecno      := ( dbfFacCliT )->( Recno() )\n   local nOrdAnt     := ( dbfFacCliT )->( OrdSetFocus( 1 ) )\n   local oSerIni\n   local oSerFin\n   local cSerIni     := ( dbfFacCliT )->cSerie\n   local cSerFin     := ( dbfFacCliT )->cSerie\n   local oDocIni\n   local oDocFin\n   local nDocIni     := ( dbfFacCliT )->nNumFac\n   local nDocFin     := ( dbfFacCliT )->nNumFac\n   local oSufIni\n   local oSufFin\n   local cSufIni     := ( dbfFacCliT )->cSufFac\n   local cSufFin     := ( dbfFacCliT )->cSufFac\n   local oMtrInf\n   local nMtrInf\n   local lFechas     := .t.\n   local dDesde      := CtoD( \"01/01/\" + Str( Year( Date() ) ) )\n   local dHasta      := Date()\n   local oImageList\n\n   DEFAULT cTitle    := \"\"\n   DEFAULT lHide1    := .f.\n   DEFAULT cTitle1   := \"\"\n   DEFAULT lHide2    := .f.\n   DEFAULT cTitle2   := \"\"\n\n   oImageList        := TImageList():New( 16, 16 )\n   oImageList:AddMasked( TBitmap():Define( \"Bullet_Square_Red_16\" ),    Rgb( 255, 0, 255 ) )\n   oImageList:AddMasked( TBitmap():Define( \"Bullet_Square_Green_16\" ),  Rgb( 255, 0, 255 ) )\n\n   DEFINE DIALOG oDlg RESOURCE \"SelectRango\" TITLE cTitle\n\n   REDEFINE RADIO oRad VAR nRad ;\n      ID       80, 81 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR cSerIni ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      WHEN     ( oRad:nOption == 2 ) ;\n      VALID    ( cSerIni >= \"A\" .and. cSerIni <= \"Z\" );\n      UPDATE ;\n      OF       oDlg\n\n   REDEFINE BTNBMP ;\n      ID       101 ;\n      OF       oDlg ;\n      RESOURCE \"Up16\" ;\n      NOBORDER ;\n      ACTION   ( dbFirst( dbfFacCliT, \"nNumFac\", oDocIni, cSerIni, \"nNumFac\" ) )\n\n   REDEFINE GET oSerFin VAR cSerFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      WHEN     ( oRad:nOption == 2 ) ;\n      VALID    ( cSerFin >= \"A\" .and. cSerFin <= \"Z\" );\n      UPDATE ;\n      OF       oDlg\n\n   REDEFINE BTNBMP ;\n      ID       111 ;\n      OF       oDlg ;\n      RESOURCE \"Down16\" ;\n      NOBORDER ;\n      ACTION   ( dbLast( dbfFacCliT, \"nNumFac\", oDocFin, cSerFin, \"nNumFac\" ) )\n\n   REDEFINE GET oDocIni VAR nDocIni;\n      ID       120 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( nRad == 2 ) ;\n      OF       oDlg\n\n   REDEFINE GET oDocFin VAR nDocFin;\n      ID       130 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( nRad == 2 ) ;\n      OF       oDlg\n\n   REDEFINE GET oSufIni VAR cSufIni ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( nRad == 2 ) ;\n      OF       oDlg\n\n   REDEFINE GET oSufFin VAR cSufFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( nRad == 2 ) ;\n      OF       oDlg\n\n   REDEFINE CHECKBOX oChk1 VAR lChk1 ;\n      ID       160 ;\n      OF       oDlg\n\n   REDEFINE CHECKBOX oChk2 VAR lChk2 ;\n      ID       180 ;\n      OF       oDlg\n\n   /*\n   Rango de fechas-------------------------------------------------------------\n   */\n\n   REDEFINE CHECKBOX lFechas ;\n      ID       300 ;\n      OF       oDlg\n\n   REDEFINE GET dDesde ;\n      ID       310 ;\n      WHEN     ( !lFechas ) ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE GET dHasta ;\n      ID       320 ;\n      WHEN     ( !lFechas ) ;\n      SPINNER ;\n      OF       oDlg\n\n   /*\n   Resultados del proceso------------------------------------------------------\n   */\n\n   oTree             := TTreeView():Redefine( 170, oDlg )\n   oTree:bLDblClick  := {|| TreeChanged( oTree ) }\n\n   REDEFINE METER oMtrInf ;\n      VAR      nMtrInf ;\n      NOPERCENTAGE ;\n      ID       200 ;\n      OF       oDlg\n\n   oMtrInf:SetTotal( ( dbfFacCliT )->( OrdKeyCount() ) )\n\n   REDEFINE BUTTON oBtnOk ;\n      ID       IDOK ;\n      OF       oDlg ;\n      ACTION   ( MakSelRec( bAction, bPreAction, bPostAction, cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, nRad, lChk1, lChk2, lFechas, dDesde, dHasta, oDlg, oBtnCancel, dbfFacCliT, dbfFacCliL, oTree, oBrw, oMtrInf ) )\n\n   REDEFINE BUTTON oBtnCancel ;\n      ID       IDCANCEL ;\n      OF       oDlg ;\n      CANCEL ;\n      ACTION   ( oDlg:end() )\n\n   oDlg:AddFastKey( VK_F5, {|| oBtnOk:Click() } )\n\n   oDlg:bStart := {|| StartGetSelRec( oBrw, oRad, oChk1, oChk2, oSerIni, oSerFin, oDocIni, oDocFin, oSufIni, oSufFin, lHide1, lHide2, cTitle1, cTitle2 ) }\n\n   ACTIVATE DIALOG oDlg ;\n      CENTER ;\n      ON INIT  ( oTree:SetImageList( oImageList ) )\n\n   ( dbfFacCliT )->( ordSetFocus( nOrdAnt ) )\n   ( dbfFacCliT )->( dbGoTo( nRecNo ) )\n\n   oImageList:End()\n\n   oTree:Destroy()\n\n   oBrw:SetFocus()\n   oBrw:Refresh()\n\nRETURN ( aRet )\n\n//---------------------------------------------------------------------------//\n\nStatic Function StartGetSelRec( oBrw, oRad, oChk1, oChk2, oSerIni, oSerFin, oDocIni, oDocFin, oSufIni, oSufFin, lHide1, lHide2, cTitle1, cTitle2 )\n\n   if !Empty( oBrw ) .and. ( len( oBrw:oBrw:aSelected ) > 1 )\n\n      oRad:SetOption( 1 )\n\n   else\n\n      oRad:SetOption( 2 )\n\n      oSerIni:Enable()\n      oSerFin:Enable()\n      oDocIni:Enable()\n      oDocFin:Enable()\n      oSufIni:Enable()\n      oSufFin:Enable()\n\n   end if\n\n   if lHide1\n      oChk1:Hide()\n   else\n      SetWindowText( oChk1:hWnd, cTitle1 )\n      oChk1:Refresh()\n   end if\n\n   if lHide2\n      oChk2:Hide()\n   else\n      SetWindowText( oChk2:hWnd, cTitle2 )\n      oChk2:Refresh()\n   end if\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n\nStatic Function TreeChanged( oTree )\n\n   local oItemTree   := oTree:GetItem()\n\n   if !Empty( oItemTree ) .and. !Empty( oItemTree:bAction )\n      Eval( oItemTree:bAction )\n   end if\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\nStatic Function MakSelRec( bAction, bPreAction, bPostAction, cDocIni, cDocFin, nRad, lChk1, lChk2, lFechas, dDesde, dHasta, oDlg, oBtnCancel, dbfFacCliT, dbfFacCliL, oTree, oBrw, oMtrInf )\n\n   local n        := 0\n   local nPos     := 0\n   local nRec     := ( dbfFacCliT )->( Recno() )\n   local aPos\n   local lRet\n   local lPre\n   local lWhile   := .t.\n\n   /*\n   Preparamos la pantalla para mostrar la simulación---------------------------\n   */\n\n   if lChk1\n      aPos        := { 0, 0 }\n      ClientToScreen( oDlg:hWnd, aPos )\n      oDlg:Move( aPos[ 1 ] - 22, aPos[ 2 ] - 510 )\n   end if\n\n   /*\n   Desabilitamos el dialogo para iniciar el proceso----------------------------\n   */\n\n   oBtnCancel:bAction   := {|| lWhile := .f. }\n\n   oDlg:Disable()\n\n   oTree:Enable()\n   oTree:DeleteAll()\n\n   oBtnCancel:Enable()\n\n   if !Empty( bPreAction )\n      lPre              := Eval( bPreAction )\n   end if\n\n   if !IsLogic( lPre ) .or. lPre\n\n      if ( nRad == 1 )\n\n         oMtrInf:SetTotal( len( oBrw:oBrw:aSelected ) )\n\n         for each nPos in ( oBrw:oBrw:aSelected )\n\n            ( dbfFacCliT )->( dbGoTo( nPos ) )\n\n            if lFechas .or.( ( dbfFacCliT )->dFecFac >= dDesde .and. ( dbfFacCliT )->dFecFac <= dHasta )\n\n               lRet  := Eval( bAction, lChk1, lChk2, oTree, dbfFacCliT, dbfFacCliL )\n\n               if IsFalse( lRet )\n                  exit\n               end if\n\n            end if\n\n            oMtrInf:Set( ++n )\n\n            SysRefresh()\n\n            if !lWhile\n               exit\n            end if\n\n         next\n\n      else\n\n         oMtrInf:SetTotal( ( dbfFacCliT )->( OrdKeyCount() ) )\n\n         ( dbfFacCliT )->( dbSeek( cDocIni, .t. ) )\n\n         while ( lWhile )                                                                                      .and. ;\n               ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac, 9 ) + ( dbfFacCliT )->cSufFac >= cDocIni .and. ;\n               ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac, 9 ) + ( dbfFacCliT )->cSufFac <= cDocFin .and. ;\n               !( dbfFacCliT )->( eof() )\n\n            if lFechas .or.( ( dbfFacCliT )->dFecFac >= dDesde .and. ( dbfFacCliT )->dFecFac <= dHasta )\n\n               lRet  := Eval( bAction, lChk1, lChk2, oTree, dbfFacCliT, dbfFacCliL )\n\n               if IsFalse( lRet )\n                  exit\n               end if\n\n            end if\n\n            oMtrInf:Set( ( dbfFacCliT )->( OrdKeyNo() ) )\n\n            ( dbfFacCliT )->( dbSkip() )\n\n            SysRefresh()\n\n         end do\n\n         oMtrInf:Set( ( dbfFacCliT )->( OrdKeyCount() ) )\n\n      end if\n\n\n      if !Empty( bPostAction )\n         Eval( bPostAction )\n      end if\n\n   end if\n\n   ( dbfFacCliT )->( dbGoTo( nRec ) )\n\n   if lChk1\n      WndCenter( oDlg:hWnd ) // Move( aPos[ 1 ], aPos[ 2 ] + 200 )\n   end if\n\n   oBtnCancel:bAction   := {|| oDlg:End() }\n\n   oDlg:Enable()\n\n   if oBrw != nil\n      oBrw:Refresh()\n   end if\n\nRETURN ( nil )\n\n//---------------------------------------------------------------------------//\n//\n// Importa pedidos de clientes\n//\n\nSTATIC FUNCTION cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode )\n\n   local nDiv\n   local cDesAlb\n   local nTotRet\n   local cPedido     := aGet[ _CNUMPED ]:VarGet()\n   local lValid      := .F.\n   local nTotEntPed  := 0\n\n   if nMode != APPD_MODE .OR. empty( cPedido )\n      return .t.\n   end if\n\n   if dbSeekInOrd( cPedido, \"nNumPed\", dbfPedCliT )\n\n      if ( dbfPedCliT )->nEstado == 3\n\n         MsgStop( \"Pedido recibido\" )\n         lValid      := .f.\n\n      else\n\n         CursorWait()\n\n         aGet[_CNUMPED ]:bWhen := {|| .f. }\n\n         aGet[_CCODCLI ]:cText( ( dbfPedCliT )->CCODCLI )\n         aGet[_CCODCLI ]:lValid()\n         aGet[_CCODCLI ]:Disable()\n\n         aGet[_CNOMCLI ]:cText( (dbfPedCliT)->CNOMCLI )\n         aGet[_CDIRCLI ]:cText( (dbfPedCliT)->CDIRCLI )\n         aGet[_CPOBCLI ]:cText( (dbfPedCliT)->CPOBCLI )\n         aGet[_CPRVCLI ]:cText( (dbfPedCliT)->CPRVCLI )\n         aGet[_CPOSCLI ]:cText( (dbfPedCliT)->CPOSCLI )\n         aGet[_CDNICLI ]:cText( (dbfPedCliT)->CDNICLI )\n         aGet[_CCODALM ]:cText( (dbfPedCliT)->CCODALM )\n         aGet[_CTLFCLI ]:cText( (dbfPedCliT)->CTLFCLI )\n         aGet[_CCODALM ]:lValid()\n\n         aGet[_CCODCAJ ]:cText( ( dbfPedCliT )->cCodCaj )\n         aGet[_CCODCAJ ]:lValid()\n\n         aGet[_CCODPAGO]:cText( ( dbfPedCliT )->cCodPgo )\n         aGet[_CCODPAGO]:lValid()\n\n         aGet[_CCODAGE ]:cText( ( dbfPedCliT )->cCodAge )\n         aGet[_CCODAGE ]:lValid()\n\n         aGet[_NPCTCOMAGE]:cText( ( dbfPedCliT )->nPctComAge )\n\n         aGet[_CCODTAR ]:cText( ( dbfPedCliT )->cCodTar )\n         aGet[_CCODTAR ]:lValid()\n\n         aGet[_CCODOBR ]:cText( ( dbfPedCliT )->cCodObr )\n         aGet[_CCODOBR ]:lValid()\n\n         aGet[_NTARIFA ]:cText( ( dbfPedCliT )->nTarifa )\n\n         aGet[_CCODTRN ]:cText( ( dbfPedCliT )->cCodTrn )\n         aGet[_CCODTRN ]:lValid()\n\n         aGet[_LIVAINC ]:Click( ( dbfPedCliT )->lIvaInc )\n         aGet[_LRECARGO]:Click( ( dbfPedCliT )->lRecargo )\n         aGet[_LOPERPV ]:Click( ( dbfPedCliT )->lOperPv )\n\n         aTmp[_CCODGRP]          := ( dbfPedCliT )->cCodGrp\n         aTmp[_LMODCLI]          := ( dbfPedCliT )->lModCli\n\n         /*\n         Pasamos los comentarios\n         */\n\n         aGet[ _CCONDENT]:cText( ( dbfPedCliT )->cCondEnt )\n         aGet[ _MCOMENT ]:cText( ( dbfPedCliT )->mComent  )\n         aGet[ _MOBSERV ]:cText( ( dbfPedCliT )->mObserv  )\n\n         /*\n         Pasamos todos los Descuentos\n         */\n\n         aGet[_CDTOESP]:cText( ( dbfPedCliT )->cDtoEsp )\n         aGet[_CDPP   ]:cText( ( dbfPedCliT )->cDpp    )\n         aGet[_NDTOESP]:cText( ( dbfPedCliT )->nDtoEsp )\n         aGet[_NDPP   ]:cText( ( dbfPedCliT )->nDpp    )\n         aGet[_CDTOUNO]:cText( ( dbfPedCliT )->cDtoUno )\n         aGet[_NDTOUNO]:cText( ( dbfPedCliT )->nDtoUno )\n         aGet[_CDTODOS]:cText( ( dbfPedCliT )->cDtoDos )\n         aGet[_NDTODOS]:cText( ( dbfPedCliT )->nDtoDos )\n         aGet[_CMANOBR]:cText( ( dbfPedCliT )->cManObr )\n         aGet[_NIVAMAN]:cText( ( dbfPedCliT )->nIvaMan )\n         aGet[_NMANOBR]:cText( ( dbfPedCliT )->nManObr )\n         aGet[_NBULTOS]:cText( ( dbfPedCliT )->nBultos )\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]      := ( dbfPedCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]      := ( dbfPedCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]      := ( dbfPedCliT )->dFecSal\n\n         if !Empty( oTipFac )\n            if ( dbfPedCliT )->lAlquiler\n               oTipFac:Select( 2 )\n            else\n               oTipFac:Select( 1 )\n            end if\n         end if\n\n         /*\n         Si lo encuentra-------------------------------------------------------\n         */\n\n         if ( dbfPedCliL )->( dbSeek( cPedido ) )\n\n            (dbfTmpLin)->( dbAppend() )\n            cDesAlb                    := \"\"\n            cDesAlb                    += \"Pedido Nº \" + ( dbfPedCliT )->cSerPed + \"/\" + AllTrim( Str( ( dbfPedCliT )->NNUMPED ) ) + \"/\" + ( dbfPedCliT )->CSUFPED\n            cDesAlb                    += \" - Fecha \" + Dtoc( (dbfPedCliT)->DFECPED )\n            (dbfTmpLin)->MLNGDES       := cDesAlb\n            (dbfTmpLin)->LCONTROL      := .t.\n\n            while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cPedido )\n\n               nTotRet                 := ( dbfPedCliL )->nUniCaja\n               nTotRet                 -= nUnidadesRecibidasAlbCli( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cRefPrv, ( dbfPedCliL )->cDetalle, dbfAlbCliL )\n               nTotRet                 -= nUnidadesRecibidasFacCli( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, dbfFacCliL )\n\n               (dbfTmpLin)->( dbAppend() )\n\n               (dbfTmpLin)->nNumLin    := (dbfPedCliL)->nNumLin\n               (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef\n               (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle\n               (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfPedCliL)->mNumSer\n               (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv\n               (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn\n               (dbfTmpLin)->nPESOKG    := (dbfPedCliL)->nPesOkg\n               (dbfTmpLin)->cPESOKG    := (dbfPedCliL)->cPesOkg\n               (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad\n               (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen\n               (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen\n               (dbfTmpLin)->nIVA       := (dbfPedCliL)->nIva\n               (dbfTmpLin)->nReq       := (dbfPedCliL)->nReq\n               (dbfTmpLin)->cUNIDAD    := (dbfPedCliL)->cUnidad\n               (dbfTmpLin)->nDTO       := (dbfPedCliL)->nDto\n               (dbfTmpLin)->nDTOPRM    := (dbfPedCliL)->nDtoPrm\n               (dbfTmpLin)->nCOMAGE    := (dbfPedCliL)->nComAge\n               (dbfTmpLin)->lTOTLIN    := (dbfPedCliL)->lTotLin\n               (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfPedCliL)->nCtlStk\n               (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv\n               (dbfTmpLin)->nPvpRec    := (dbfPedCliL)->nPvpRec\n               (dbfTmpLin)->cTipMov    := (dbfPedCliL)->cTipMov\n               (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin\n               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n               (dbfTmpLin)->nValImp    := (dbfPedCliL)->nValImp\n               (dbfTmpLin)->CCODPR1    := (dbfPedCliL)->cCodPr1\n               (dbfTmpLin)->CCODPR2    := (dbfPedCliL)->cCodPr2\n               (dbfTmpLin)->CVALPR1    := (dbfPedCliL)->cValPr1\n               (dbfTmpLin)->CVALPR2    := (dbfPedCliL)->cValPr2\n               (dbfTmpLin)->lKitArt    := (dbfAlbCliL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfPedCliL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote\n               (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta\n               (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin\n               (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfPedCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfPedCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfPedCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfPedCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfPedCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfPedCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt\n               (dbfTmpLin)->lControl   := (dbfPedCliL)->lControl\n               (dbfTmpLin)->cNumPed    := cPedido\n               (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe\n\n               /*\n               Vamos a ver si se estan llavando cajas\n               */\n\n               if nTotRet != 0\n\n                  /*\n                  Comprobamos si hay calculos por cajas\n                  */\n\n                  if lCalCaj()\n\n                     nDiv  := Mod( nTotRet, ( dbfPedCliL )->nUniCaja )\n                     if nDiv == 0 .and. ( dbfPedCliL )->nCanPed != 0\n                        ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed\n                        ( dbfTmpLin )->nUniCaja := ( dbfPedCliL )->nUniCaja\n                     else\n                        ( dbfTmpLin )->nCanEnt  := 0\n                        ( dbfTmpLin )->nUniCaja := nTotRet\n                     end if\n\n                  else\n\n                     ( dbfTmpLin )->nUniCaja    := nTotRet\n\n                  end if\n\n               end if\n\n               (dbfPedCliL)->( dbSkip( 1 ) )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n\n            if uFieldEmpresa( \"lGrpEnt\" ) // agrupamos las entregas en una sola\n\n               /*\n               Sumamos todos los pagos--------------------------------------------\n               */\n\n                if ( dbfPedCliP )->( dbSeek( cPedido ) )\n\n                  while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cPedido .and. !( dbfPedCliP )->( Eof() )\n\n                     nTotEntPed     += ( dbfPedCliP )->nImporte\n\n                     ( dbfPedCliP )->( dbSkip() )\n\n                  end while\n\n               end if\n\n               ( dbfPedCliP )->( dbGoTop() )\n\n               /*\n               Creamos un solo recibo con las entregas a cuenta-------------------\n               */\n\n               if nTotEntPed != 0\n\n                  ( dbfTmpPgo )->( dbAppend() )\n\n                  ( dbfTmpPgo )->lCobrado := .t.\n                  ( dbfTmpPgo )->lConPgo  := .f.\n                  ( dbfTmpPgo )->lRecImp  := .f.\n                  ( dbfTmpPgo )->lRecDto  := .f.\n                  ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( RecNo() )\n                  ( dbfTmpPgo )->cCodCaj  := ( dbfPedCliT )->cCodCaj\n                  ( dbfTmpPgo )->cCodCli  := ( dbfPedCliT )->cCodCli\n                  ( dbfTmpPgo )->cNomCli  := ( dbfPedCliT )->cNomCli\n                  ( dbfTmpPgo )->dEntrada := ( dbfPedCliT )->dFecPed\n                  ( dbfTmpPgo )->dPreCob  := ( dbfPedCliT )->dFecPed\n                  ( dbfTmpPgo )->dFecVto  := ( dbfPedCliT )->dFecPed\n                  ( dbfTmpPgo )->nImporte := nTotEntPed\n                  ( dbfTmpPgo )->nImpCob  := nTotEntPed\n                  ( dbfTmpPgo )->cDivPgo  := ( dbfPedCliT )->cDivPed\n                  ( dbfTmpPgo )->nVdvPgo  := ( dbfPedCliT )->nVdvPed\n                  ( dbfTmpPgo )->cCodAge  := ( dbfPedCliT )->cCodAge\n                  ( dbfTmpPgo )->cTurRec  := ( dbfPedCliT )->cTurPed\n                  ( dbfTmpPgo )->lCloPgo  := .t.\n                  ( dbfTmpPgo )->cCodPgo  := ( dbfPedCliT )->cCodPgo\n                  ( dbfTmpPgo )->cDescrip := \"Suma entregas a cuenta pedido: \" + ( dbfPedCliT )->cSerPed + \"/\" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + \"/\" + ( dbfPedCliT )->cSufPed\n                  ( dbfTmpPgo )->( dbUnLock() )\n\n               end if\n\n            else  // Pasamos las entregas una a una\n\n               /*\n               Pasamos los pagos-----------------------------------------------------\n               */\n\n               if ( dbfPedCliP )->( dbSeek( cPedido ) )\n\n                  while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cPedido .and. !( dbfPedCliP )->( Eof() )\n\n                     ( dbfTmpPgo )->( dbAppend() )\n\n                     ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( RecNo() )\n                     ( dbfTmpPgo )->cCodCaj  := ( dbfPedCliP )->cCodCaj\n                     ( dbfTmpPgo )->cTurRec  := ( dbfPedCliP )->cTurRec\n                     ( dbfTmpPgo )->cCodCli  := ( dbfPedCliP )->cCodCli\n                     ( dbfTmpPgo )->dEntrada := ( dbfPedCliP )->dEntrega\n                     ( dbfTmpPgo )->dPreCob  := ( dbfPedCliP )->dEntrega\n                     ( dbfTmpPgo )->dFecVto  := ( dbfPedCliP )->dEntrega\n                     ( dbfTmpPgo )->nImporte := ( dbfPedCliP )->nImporte\n                     ( dbfTmpPgo )->nImpCob  := ( dbfPedCliP )->nImporte\n                     if !Empty( ( dbfPedCliP )->cDescrip )\n                     ( dbfTmpPgo )->cDescrip := ( dbfPedCliP )->cDescrip\n                     else\n                     ( dbfTmpPgo )->cDescrip := \"Entrega nº \" + AllTrim( Str( ( dbfTmpPgo )->( RecNo() ) ) ) + \" pedido \" + ( dbfPedCliP )->cSerPed + \"/\" + AllTrim( Str( ( dbfPedCliP )->nNumPed ) ) + \"/\" + ( dbfPedCliP )->cSufPed\n                     end if\n                     ( dbfTmpPgo )->cPgdoPor := ( dbfPedCliP )->cPgdoPor\n                     ( dbfTmpPgo )->cDocPgo  := ( dbfPedCliP )->cDocPgo\n                     ( dbfTmpPgo )->cDivPgo  := ( dbfPedCliP )->cDivPgo\n                     ( dbfTmpPgo )->nVdvPgo  := ( dbfPedCliP )->nVdvPgo\n                     ( dbfTmpPgo )->cCodAge  := ( dbfPedCliP )->cCodAge\n                     ( dbfTmpPgo )->cBncEmp  := ( dbfPedCliP )->cBncEmp\n                     ( dbfTmpPgo )->cBncCli  := ( dbfPedCliP )->cBncCli\n                     ( dbfTmpPgo )->cEntEmp  := ( dbfPedCliP )->cEntEmp\n                     ( dbfTmpPgo )->cSucEmp  := ( dbfPedCliP )->cSucEmp\n                     ( dbfTmpPgo )->cDigEmp  := ( dbfPedCliP )->cDigEmp\n                     ( dbfTmpPgo )->cCtaEmp  := ( dbfPedCliP )->cCtaEmp\n                     ( dbfTmpPgo )->cEntCli  := ( dbfPedCliP )->cEntCli\n                     ( dbfTmpPgo )->cSucCli  := ( dbfPedCliP )->cSucCli\n                     ( dbfTmpPgo )->cDigCli  := ( dbfPedCliP )->cDigCli\n                     ( dbfTmpPgo )->cCtaCli  := ( dbfPedCliP )->cCtaCli\n                     ( dbfTmpPgo )->lCobrado := .t.\n                     ( dbfTmpPgo )->lConPgo  := .f.\n                     ( dbfTmpPgo )->lRecImp  := .f.\n                     ( dbfTmpPgo )->lRecDto  := .f.\n\n                     ( dbfPedCliP )->( dbSkip() )\n\n                  end while\n\n               end if\n\n            end if\n\n            /*\n            Pasamos las incidencias de los pedidos-----------------------------\n            */\n\n            if ( dbfPedCliI )->( dbSeek( cPedido ) )\n\n               while ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido .and. !( dbfPedCliI )->( Eof() )\n                  dbPass( dbfPedCliI, dbfTmpInc, .t. )\n                  ( dbfPedCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPedCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos de los pedidos------------------------------\n            */\n\n            if ( dbfPedCliD )->( dbSeek( cPedido ) )\n\n               while ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido .and. !( dbfPedCliD )->( Eof() )\n                  dbPass( dbfPedCliD, dbfTmpDoc, .t. )\n                  ( dbfPedCliD )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPedCliD )->( dbGoTop() )\n\n            oBrwLin:Refresh()\n            oBrwPgo:Refresh()\n\n            oBrwLin:SetFocus()\n\n         end if\n\n         lValid   := .t.\n\n         CursorWE()\n\n      end if\n\n      HideImportacion( aGet, aGet[ _CNUMPED ] )\n\n   else\n\n      MsgStop( \"Pedido no existe\" )\n\n   end if\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n//\n// Importa presupuestos de clientes\n//\n\nSTATIC FUNCTION cPreCli( aGet, aTmp, oBrw, nMode )\n\n   local cDesAlb\n   local cPedido  := aGet[ _CNUMPRE ]:VarGet()\n   local lValid   := .F.\n\n   if nMode != APPD_MODE .OR. Empty( cPedido )\n      return .t.\n   end if\n\n   if dbSeekInOrd( cPedido, \"nNumPre\", dbfPreCliT )\n\n      if ( dbfPreCliT )->lEstado\n\n         MsgStop( \"Presupuesto ya aprobado\" )\n         lValid   := .f.\n\n      else\n\n         aGet[_CCODCLI ]:cText( ( dbfPreCliT )->CCODCLI )\n         aGet[_CCODCLI ]:lValid()\n         aGet[_CCODCLI ]:Disable()\n\n         aGet[_CNOMCLI ]:cText( ( dbfPreCliT )->CNOMCLI )\n         aGet[_CDIRCLI ]:cText( ( dbfPreCliT )->CDIRCLI )\n         aGet[_CPOBCLI ]:cText( ( dbfPreCliT )->CPOBCLI )\n         aGet[_CPRVCLI ]:cText( ( dbfPreCliT )->CPRVCLI )\n         aGet[_CPOSCLI ]:cText( ( dbfPreCliT )->CPOSCLI )\n         aGet[_CDNICLI ]:cText( ( dbfPreCliT )->CDNICLI )\n         aGet[_CTLFCLI ]:cText( ( dbfPreCliT )->CTLFCLI )\n\n         aGet[_CCODALM ]:cText( ( dbfPreCliT )->CCODALM )\n         aGet[_CCODALM ]:lValid()\n\n         aGet[_CCODCAJ ]:cText( ( dbfPreCliT )->cCodCaj )\n         aGet[_CCODCAJ ]:lValid()\n\n         aGet[_CCODPAGO]:cText( ( dbfPreCliT )->CCODPGO )\n         aGet[_CCODPAGO]:lValid()\n\n         aGet[_CCODAGE ]:cText( ( dbfPreCliT )->CCODAGE )\n         aGet[_CCODAGE ]:lValid()\n\n         aGet[_NPCTCOMAGE]:cText( ( dbfPreCliT )->nPctComAge )\n\n         aGet[_CCODTAR ]:cText( ( dbfPreCliT )->CCODTAR )\n         aGet[_CCODTAR ]:lValid()\n\n         aGet[_CCODOBR ]:cText( ( dbfPreCliT )->CCODOBR )\n         aGet[_CCODOBR ]:lValid()\n\n         aGet[_NTARIFA ]:cText( ( dbfPreCliT )->nTarifa )\n\n         aGet[_CCODTRN ]:cText( ( dbfPreCliT )->cCodTrn )\n         aGet[_CCODTRN ]:lValid()\n\n         aGet[_LIVAINC ]:Click( ( dbfPreCliT )->lIvaInc )\n         aGet[_LRECARGO]:Click( ( dbfPreCliT )->lRecargo )\n         aGet[_LOPERPV ]:Click( ( dbfPreCliT )->lOperPv )\n\n         aGet[_CCONDENT]:cText( ( dbfPreCliT )->cCondEnt )\n         aGet[_MCOMENT ]:cText( ( dbfPreCliT )->mComent )\n         aGet[_MOBSERV ]:cText( ( dbfPreCliT )->mObserv )\n\n         aGet[_CDTOESP ]:cText( ( dbfPreCliT )->cDtoEsp )\n         aGet[_CDPP    ]:cText( ( dbfPreCliT )->cDpp    )\n         aGet[_NDTOESP ]:cText( ( dbfPreCliT )->nDtoEsp )\n         aGet[_NDPP    ]:cText( ( dbfPreCliT )->nDpp    )\n         aGet[_CDTOUNO ]:cText( ( dbfPreCliT )->cDtoUno )\n         aGet[_NDTOUNO ]:cText( ( dbfPreCliT )->nDtoUno )\n         aGet[_CDTODOS ]:cText( ( dbfPreCliT )->cDtoDos )\n         aGet[_NDTODOS ]:cText( ( dbfPreCliT )->nDtoDos )\n         aGet[_CMANOBR ]:cText( ( dbfPreCliT )->cManObr )\n         aGet[_NIVAMAN ]:cText( ( dbfPreCliT )->nIvaMan )\n         aGet[_NMANOBR ]:cText( ( dbfPreCliT )->nManObr )\n         aGet[_NBULTOS ]:cText( ( dbfPreCliT )->nBultos )\n\n         aTmp[_CCODGRP]          := ( dbfPreCliT )->cCodGrp\n         aTmp[_LMODCLI]          := ( dbfPreCliT )->lModCli\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]      := ( dbfPreCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]      := ( dbfPreCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]      := ( dbfPreCliT )->dFecSal\n\n         if !Empty( oTipFac )\n            if aTmp[ _LALQUILER ]\n               oTipFac:Select( 2 )\n            else\n               oTipFac:Select( 1 )\n            end if\n         end if\n\n         if (dbfPreCliL)->( dbSeek( cPedido ) )\n\n            (dbfTmpLin)->( dbAppend() )\n            cDesAlb              := \"\"\n            cDesAlb              += \"Presupuesto Nº \" + ( dbfPreCliT )->cSerPre + \"/\" + AllTrim( Str( ( dbfPreCliT )->nNumPre ) ) + \"/\" + ( dbfPreCliT )->cSufPre\n            cDesAlb              += \" - Fecha \" + Dtoc( ( dbfPreCliT )->dFecPre )\n            (dbfTmpLin)->MLNGDES    := cDesAlb\n            (dbfTmpLin)->LCONTROL   := .t.\n\n            while ( (dbfPreCliL)->cSerPre + Str( (dbfPreCliL)->nNumPre ) + (dbfPreCliL)->cSufPre == cPedido )\n\n               (dbfTmpLin)->( dbAppend() )\n\n               (dbfTmpLin)->nNumLin    := (dbfPreCliL)->nNumLin\n               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef\n               (dbfTmpLin)->cDetalle   := (dbfPreCliL)->cDetAlle\n               (dbfTmpLin)->mLngDes    := (dbfPreCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfPreCliL)->mNumSer\n               (dbfTmpLin)->nPreUnit   := (dbfPreCliL)->nPreDiv\n               (dbfTmpLin)->nPntVer    := (dbfPreCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfPreCliL)->nImpTrn\n               (dbfTmpLin)->nPESOKG    := (dbfPreCliL)->nPesOkg\n               (dbfTmpLin)->cPESOKG    := (dbfPreCliL)->cPesOkg\n               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad\n               (dbfTmpLin)->nVolumen   := (dbfPreCliL)->nVolumen\n               (dbfTmpLin)->cVolumen   := (dbfPreCliL)->cVolumen\n               (dbfTmpLin)->nIVA       := (dbfPreCliL)->nIva\n               (dbfTmpLin)->nReq       := (dbfPreCliL)->nReq\n               (dbfTmpLin)->cUNIDAD    := (dbfPreCliL)->cUnidad\n               (dbfTmpLin)->nDTO       := (dbfPreCliL)->nDto\n               (dbfTmpLin)->nDTOPRM    := (dbfPreCliL)->nDtoPrm\n               (dbfTmpLin)->nCOMAGE    := (dbfPreCliL)->nComAge\n               (dbfTmpLin)->lTOTLIN    := (dbfPreCliL)->lTotLin\n               (dbfTmpLin)->nDtoDiv    := (dbfPreCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfPreCliL)->nCtlStk\n               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv\n               (dbfTmpLin)->nPvpRec    := (dbfPreCliL)->nPvpRec\n               (dbfTmpLin)->cTipMov    := (dbfPreCliL)->cTipMov\n               (dbfTmpLin)->cAlmLin    := (dbfPreCliL)->cAlmLin\n               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n               (dbfTmpLin)->nValImp    := (dbfPreCliL)->nValImp\n               (dbfTmpLin)->CCODPR1    := (dbfPreCliL)->cCodPr1\n               (dbfTmpLin)->CCODPR2    := (dbfPreCliL)->cCodPr2\n               (dbfTmpLin)->CVALPR1    := (dbfPreCliL)->cValPr1\n               (dbfTmpLin)->CVALPR2    := (dbfPreCliL)->cValPr2\n               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanPre\n               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja\n               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit\n               (dbfTmpLin)->lKitArt    := (dbfPreCLiL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfPreCLiL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfPreCLiL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfPreCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfPreCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfPreCliL)->cLote\n               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta\n               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin\n               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfPreCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt\n               (dbfTmpLin)->lControl   := (dbfPreCliL)->lControl\n               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe\n\n               (dbfPreCliL)->( dbSkip() )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del presupuesto\n            */\n\n            if ( dbfPreCliI )->( dbSeek( cPedido ) )\n\n               while ( dbfPreCliI )->cSerPre + Str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cPedido .and. !( dbfPreCliI )->( Eof() )\n                  dbPass( dbfPreCliI, dbfTmpInc, .t. )\n                  ( dbfPreCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPreCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del presupuesto\n            */\n\n            if ( dbfPreCliD )->( dbSeek( cPedido ) )\n\n               while ( dbfPreCliD )->cSerPre + Str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cPedido .and. !( dbfPreCliD )->( Eof() )\n                  dbPass( dbfPreCliD, dbfTmpDoc, .t. )\n                  ( dbfPreCliD )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPreCliD )->( dbGoTop() )\n\n            oBrw:refresh()\n            oBrw:setFocus()\n\n         end if\n\n         lValid   := .T.\n\n         if ( dbfPreCliT )->( dbRLock() )\n            ( dbfPreCliT )->lEstado := .t.\n            ( dbfPreCliT )->( DbUnlock() )\n         end if\n\n      end if\n\n      HideImportacion( aGet, aGet[ _CNUMPRE ] )\n\n   ELSE\n\n      MsgStop( \"Presupuesto no existe\" )\n\n   END IF\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DelSerie( oWndBrw )\n\n   local oDlg\n   local oSerIni\n   local oSerFin\n   local oTxtDel\n   local nTxtDel     := 0\n   local nRecno      := ( dbfFacCliT )->( Recno() )\n   local nOrdAnt     := ( dbfFacCliT )->( OrdSetFocus( 1 ) )\n   local oDesde      := TDesdeHasta():Init( ( dbfFacCliT )->cSerie, ( dbfFacCliT )->nNumFac, ( dbfFacCliT )->cSufFac, GetSysDate() )\n   local lCancel     := .f.\n   local oBtnAceptar\n   local oBtnCancel\n\n   DEFINE DIALOG oDlg ;\n      RESOURCE \"DELSERDOC\" ;\n      TITLE    \"Eliminar series de facturas\" ;\n      OF       oWndBrw\n\n   REDEFINE RADIO oDesde:nRadio ;\n      ID       90, 91 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR oDesde:cSerieInicio ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieInicio >= \"A\" .and. oDesde:cSerieInicio <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR oDesde:cSerieFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieFin >= \"A\" .and. oDesde:cSerieFin <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroInicio ;\n      ID       120 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroFin ;\n      ID       130 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoInicio ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaInicio ;\n      ID       170 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaFin ;\n      ID       180 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE BUTTON oBtnAceptar ;\n      ID       IDOK ;\n      OF       oDlg ;\n      ACTION   ( DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, @lCancel ) )\n\n   REDEFINE BUTTON oBtnCancel ;\n      ID       IDCANCEL ;\n      OF       oDlg ;\n      CANCEL ;\n      ACTION   ( lCancel := .t., oDlg:end() )\n\n   REDEFINE METER oTxtDel VAR nTxtDel ;\n      ID       160 ;\n      NOPERCENTAGE ;\n      TOTAL    ( dbfFacCliT )->( OrdKeyCount() ) ;\n      OF       oDlg\n\n   ACTIVATE DIALOG oDlg CENTER VALID ( lCancel )\n\n   ( dbfFacCliT )->( dbGoTo( nRecNo ) )\n   ( dbfFacCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oWndBrw:SetFocus()\n   oWndBrw:Refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, lCancel )\n\n   local nOrd\n   local nDeleted       := 0\n   local nProcesed      := 0\n\n   oBtnAceptar:Hide()\n   oBtnCancel:bAction   := {|| lCancel := .t. }\n\n   if oDesde:nRadio == 1\n\n      nOrd              := ( dbfFacCliT )->( OrdSetFocus( \"nNumFac\" ) )\n\n      ( dbfFacCliT )->( dbSeek( oDesde:cNumeroInicio(), .t. ) )\n      while !lCancel .and. ( dbfFacCliT )->( !eof() )\n\n         if ( dbfFacCliT )->cSerie  >= oDesde:cSerieInicio  .and.;\n            ( dbfFacCliT )->cSerie  <= oDesde:cSerieFin     .and.;\n            ( dbfFacCliT )->nNumFac >= oDesde:nNumeroInicio .and.;\n            ( dbfFacCliT )->nNumFac <= oDesde:nNumeroFin    .and.;\n            ( dbfFacCliT )->cSufFac >= oDesde:cSufijoInicio .and.;\n            ( dbfFacCliT )->cSufFac <= oDesde:cSufijoFin\n\n            ++nDeleted\n\n            oTxtDel:cText  := \"Eliminando : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac\n\n            WinDelRec( nil, dbfFacCliT, {|| QuiFacCli() } )\n\n         else\n\n            ( dbfFacCliT )->( dbSkip() )\n\n         end if\n\n         ++nProcesed\n\n         oTxtDel:Set( nProcesed )\n\n      end do\n\n      ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n\n   else\n\n      nOrd              := ( dbfFacCliT )->( OrdSetFocus( \"dFecFac\" ) )\n\n      ( dbfFacCliT )->( dbSeek( oDesde:dFechaInicio, .t. ) )\n      while !lCancel .and. ( dbfFacCliT )->( !eof() )\n\n         if ( dbfFacCliT )->dFecFac >= oDesde:dFechaInicio  .and.;\n            ( dbfFacCliT )->dFecFac <= oDesde:dFechaFin\n\n            ++nDeleted\n\n            oTxtDel:cText  := \"Eliminando : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac\n\n            WinDelRec( nil, dbfFacCliT, {|| QuiFacCli() } )\n\n         else\n\n            ( dbfFacCliT )->( dbSkip() )\n\n         end if\n\n         ++nProcesed\n\n         oTxtDel:Set( nProcesed )\n\n      end do\n\n      ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   lCancel              := .t.\n\n   oBtnAceptar:Show()\n\n   if lCancel\n      msgStop( \"Total de registros borrados : \" + Str( nDeleted ), \"Proceso cancelado\" )\n   else\n      msgInfo( \"Total de registros borrados : \" + Str( nDeleted ), \"Proceso finalizado\" )\n   end if\n\nRETURN ( oDlg:End() )\n\n//---------------------------------------------------------------------------//\n\nstatic function RecFacCli( aTmpFac, lMessage )\n\n   local nDtoAge     := 0\n   local nImpAtp     := 0\n   local nImpOfe     := 0\n   local cCodFam\n   local nRecno\n\n   DEFAULT lMessage  := .t.\n\n   if lMessage\n\n      if !ApoloMsgNoYes(  \"¡Atención!,\"                                      + CRLF + ;\n                     \"todos los precios se recalcularán en función de\"  + CRLF + ;\n                     \"los valores en las bases de datos.\",;\n                     \"¿ Desea proceder ?\" )\n         return nil\n\n      end if\n\n   end if\n\n   nRecno         := ( dbfTmpLin )->( RecNo() )\n\n   ( dbfTmpLin )->( dbGotop() )\n   ( dbfArticulo )->( ordSetFocus( \"Codigo\" ) )\n\n   while !( dbfTmpLin )->( eof() )\n\n      /*\n      Ahora buscamos por el codigo interno\n      */\n\n      if ( dbfArticulo )->( dbSeek( ( dbfTmpLin )->cRef ) )\n\n         if aTmpFac[ _NREGIVA ] <= 1\n            ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )\n            ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n         end if\n\n         /*\n         Ahora recogemos el impuesto especial si lo hay\n         */\n\n         if !Empty( ( dbfArticulo )->cCodImp )\n            ( dbfTmpLin )->cCodImp  := ( dbfArticulo )->cCodImp\n            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpFac[ _LIVAINC ], ( dbfTmpLin )->nIva )\n         end if\n\n         /*\n         Tomamos los precios de la base de datos de articulos\n         */\n\n         ( dbfTmpLin )->nPreUnit := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpFac[ _CDIVFAC ], aTmpFac[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n\n         /*\n         Cargamos simpre los puntos verdes\n         */\n\n         ( dbfTmpLin )->nPntVer  := ( dbfArticulo )->nPntVer1\n\n         /*\n         Linea por contadores--------------------------------------------------\n         */\n\n         ( dbfTmpLin )->nCtlStk  := (dbfArticulo)->nCtlStock\n         ( dbfTmpLin )->nCosDiv  := nCosto( nil, dbfArticulo, dbfKit )\n         ( dbfTmpLin )->nPvpRec  := (dbfArticulo)->PvpRec\n\n         /*\n         Si la comisi¢n del articulo hacia el agente es distinto de cero----------\n         */\n\n         ( dbfTmpLin )->nComAge  := aTmpFac[ _NPCTCOMAGE ]\n\n         /*\n         Chequeamos situaciones especiales\n         */\n\n         cCodFam                 := ( dbfTmpLin )->cCodFam\n\n         do case\n         case lSeekAtpArt( aTmpFac[ _CCODCLI ] + ( dbfTmpLin )->cRef, ( dbfTmpLin )->cCodPr1 + ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1 + ( dbfTmpLin )->cValPr2, aTmpFac[ _DFECFAC ], dbfClientAtp ) .and. ;\n            ( dbfClientAtp )->lAplFac\n\n            nImpAtp  := nImpAtp( ( dbfTmpLin )->nTarLin, dbfClientAtp )\n            if nImpAtp != 0\n               ( dbfTmpLin )->nPreUnit := nImpAtp\n            end if\n\n            nImpAtp  := nDtoAtp( ( dbfTmpLin )->nTarLin, dbfClientAtp )\n            if nImpAtp != 0\n               ( dbfTmpLin )->nDto     := nImpAtp\n            end if\n\n            if ( dbfClientAtp )->nDprArt != 0\n               ( dbfTmpLin )->nDtoPrm  := ( dbfClientAtp )->nDprArt\n            end if\n\n            if ( dbfClientAtp )->nComAge != 0\n               ( dbfTmpLin )->nComAge  := ( dbfClientAtp )->nComAge\n            end if\n\n            if ( dbfClientAtp )->nDtoDiv != 0\n               ( dbfTmpLin )->nDtoDiv  := ( dbfClientAtp )->nDtoDiv\n            end if\n\n         case lSeekAtpFam( aTmpFac[_CCODCLI] + cCodFam, aTmpFac[ _DFECFAC ], dbfClientAtp ) .and. ;\n               ( dbfClientAtp )->lAplFac\n\n            if ( dbfClientAtp )->nDtoArt != 0\n               ( dbfTmpLin )->nDto     := ( dbfClientAtp )->nDtoArt\n            end if\n\n            if ( dbfClientAtp )->nDprArt != 0\n               ( dbfTmpLin )->nDtoPrm  := ( dbfClientAtp )->nDprArt\n            end if\n\n            if ( dbfClientAtp )->nComAge != 0\n               ( dbfTmpLin )->nComAge  := ( dbfClientAtp )->nComAge\n            end if\n\n            if ( dbfClientAtp )->nDtoDiv != 0\n               ( dbfTmpLin )->nDtoDiv  := ( dbfClientAtp )->nDtoDiv\n            end if\n\n         /*\n         Precios en tarifas\n         */\n\n         case !Empty( aTmpFac[_CCODTAR] )\n\n            nImpOfe     := RetPrcTar( ( dbfTmpLin )->cRef, aTmpFac[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )\n            if nImpOfe != 0\n               ( dbfTmpLin )->nPreUnit := nImpOfe\n            end if\n\n            nImpOfe     := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )\n            if nImpOfe != 0\n               ( dbfTmpLin )->nDto     := nImpOfe\n            end if\n\n            nImpOfe     := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ _CCODAGE ], dbfTarPreL, dbfTarPreS )\n            if nImpOfe  != 0\n               ( dbfTmpLin )->nComAge  := nImpOfe\n            end if\n\n            /*\n            Descuento de promoci¢n, esta funci¢n comprueba si existe y si es\n            asi devuelve el descunto de la promoci¢n.\n            */\n\n            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ _DFECFAC ], dbfTarPreL )\n            if nImpOfe  != 0\n               ( dbfTmpLin )->nDtoPrm  := nImpOfe\n            end if\n\n            /*\n            Obtenemos el descuento de Agente\n            */\n\n            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpFac[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpFac[ _DFECFAC ], aTmpFac[ _CCODAGE ], dbfTarPreL, dbfTarPreS )\n            if nDtoAge  != 0\n               ( dbfTmpLin )->nComAge  := nDtoAge\n            end if\n\n         end case\n\n         /*\n         Buscamos si existen ofertas para este articulo y le cambiamos el precio\n         */\n\n         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], ( dbfTmpLin )->nUniCaja, aTmpFac[ _DFECFAC ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )\n         if nImpOfe  != 0\n            ( dbfTmpLin )->nPreUnit := nCnv2Div( nImpOfe, cDivEmp(), aTmpFac[ _CDIVFAC ], dbfDiv )\n         end if\n\n         /*\n         Buscamos si existen descuentos en las ofertas\n         */\n\n         nImpOfe     := nDtoOferta( ( dbfTmpLin )->cRef, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], ( dbfTmpLin )->nUniCaja, aTmpFac[ _DFECFAC ], dbfOferta, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )\n         if nImpOfe  != 0\n            ( dbfTmpLin )->nDtoPrm  := nImpOfe\n         end if\n\n      end if\n\n      ( dbfTmpLin )->( dbSkip() )\n\n   end while\n\n   ( dbfTmpLin )->( dbGoTo( nRecno ) )\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\n#ifndef __PDA__\n\n/*\nNOMBRE FICHERO      : TALBAxxx.PSI   (xxx = Agente)\nDESCRIPCION         : CABECERAS  ALBARAN\nTIPO DE FICHERO     : SECUENCIAL SIN SEPARADOR DE CAMPOS\nNUM. DE CAMPOS      : 20\nLONG. DEL REGISTRO  : 143\n\nN§ PO  LC  Descripci¢n       Observaciones\n1  1   7   CODIGO CLIENTE\n2  8   10  NUM. NOTA         aaa/nnnnnn    (agente/numeronota)\n3  18  1   TIPO NOTA         (1)\n4  19  2   COD. PROVEEDOR    diferente de espacios si es venta indirecta\n5  21  8   BASE IMPONIBLE 1\n6  29  8   BASE IMPONIBLE 2\n7  37  8   BASE IMPONIBLE 3\n8  45  8   IGIC TIPO 1\n9  53  8   IGIC TIPO 2\n10 61  8   IGIC TIPO 3\n11 69  8   R.E. TIPO 1\n12 77  8   R.E. TIPO 2\n13 85  8   R.E. TIPO 3\n14 93  5   DESC. CONCERTADO  Descuento que figura en la ficha del cliente\n15 98  5   DESC. PRONTO PAGO Descuento opcional al final de factura\n16 103 8   IMPORTE PVERDE    Cargo por impuesto punto verde\n17 111 8   IMPORTE NOTA      Importe total del documento (incluye pverde)\n18 119 8   IMPORTE COBRADO   (2)\n19 127 10  FECHA             DD/MM/AAAA\n20 137 5   HORA              HH:MM\n21 142 1   EUROS S/N\n22 143 2   FINAL REGISTRO    CR LF\n\n\n  (1) Tipos de nota: 1- Factura Contado     2- Factura Credito\n                     3- Albaran Contado     4- Albaran Credito\n                     5- Adicional Contado   6- Adicional Credito\n                     7- Indirecto Contado   8- Indirecto Credito\n\n  (2) S¢lo ser  igual a ImporteNota si se trata de contado-met lico.\n      Si es credito o contado-tal¢n ira con 0.\n\n Ej: \"000032100   20000       0       0    3200       0       0       0\n             0       0 0.00 0.00       0   23300   2330012/03/199618:15\"\n     (Factura de contado n§ 10900 emitida al cliente 321 por el vendedor 4\n      el d¡a 12 de Marzo de 1996, por un importe de 23200, sin descuentos,\n      ni punto verde, a las 6 y cuarto de la tarde. El tipo de IGIC fue el 1)\n*/\n\nFUNCTION EdmFacCli( cCodRut, cPathTo, oStru, aSucces )\n\n   local n           := 0\n   local cSerie\n   local cFilEdm\n   local oFilEdm\n   local dFecFac\n   local nDtoEsp     := 0\n   local nDtoPp      := 0\n   local nImpCob     := 0\n   local cCodCli\n   local cCodAge\n   local cNumDoc\n   local nNumDoc\n   local nCanEnt     := 0\n   local cTipDoc\n   local aHeadLine   := {}\n   local aLotes      := {}\n\n   DEFAULT cCodRut   := \"001\"\n   DEFAULT cPathTo   := \"C:\\INTERS~1\\\"\n\n   /*\n   Obtenemos la fecha del albaran----------------------------------------------\n   */\n\n   cCodRut           := SubStr( cCodRut, -3 )\n\n   cFilEdm           := cPathTo + \"TALBA\" + cCodRut + \".PSI\"\n\n   if !file( cFilEdm )\n      msgWait( \"No existe el fichero \" + cFilEdm, \"Atención\", 1 )\n      return nil\n   end if\n\n   oFilEdm           := TTxtFile():New( cFilEdm )\n\n   /*\n   Abrimos las bases de datos--------------------------------------------------\n   */\n\n   while ! oFilEdm:lEoF()\n\n      cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )\n\n      if ( cTipDoc == \"1\" .or. cTipDoc == \"2\" )\n         aAdd( aHeadLine, {   SubStr( oFilEdm:cLine, 8, 10 ),;                // Num. nota\n                              Ctod( SubStr( oFilEdm:cLine, 127, 10 ) ),;      // Fecha nota\n                              Val( SubStr( oFilEdm:cLine, 93, 5 ) ),;         // Dto. concertado\n                              Val( SubStr( oFilEdm:cLine, 98, 5 ) ),;         // Dto. p.p.\n                              Val( SubStr( oFilEdm:cLine,119, 8 ) ) } )       // Importe pagado\n      end if\n\n      oFilEdm:Skip()\n\n   end while\n\n   oFilEdm:Close()\n\n   /*\n   Nuevo fichero con los lotes-------------------------------------------------\n   */\n\n   cFilEdm           := cPathTo + \"LALBA\" + cCodRut + \".PSI\"\n\n   if !file( cFilEdm )\n      msgWait( \"No existe el fichero \" + cFilEdm, \"Atención\", 1 )\n   else\n\n      oFilEdm           := TTxtFile():New( cFilEdm )\n\n      /*\n      Abrimos las bases de datos--------------------------------------------------\n      */\n\n      while ! oFilEdm:lEoF()\n\n         cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )\n\n         if ( cTipDoc == \"1\" .or. cTipDoc == \"2\" )\n            aAdd( aLotes, { SubStr( oFilEdm:cLine, 8, 10 ),;                // Num. nota\n                            LTrim( SubStr( oFilEdm:cLine, 19, 13 ) ),;      // Código del artículo\n                            RTrim( SubStr( oFilEdm:cLine, 43, 21 ) ) } )    // Num. lote\n         end if\n\n         oFilEdm:Skip()\n\n      end while\n\n      oFilEdm:Close()\n\n   end if\n\n/*\n-------------------------------------------------------------------------------\nNOMBRE FICHERO      : EALBAxxx.PSI   (xxx = Agente)\nDESCRIPCION         : LINEAS DE  ALBARAN\nTIPO DE FICHERO     : SECUENCIAL SIN SEPARADOR DE CAMPOS\nNUM. DE CAMPOS      : 13\nLONG. DEL REGISTRO  : 70\n\nN§ PO  LC  Descripci¢n       Observaciones\n1  1   7   CODIGO CLIENTE\n2  8   10  NUM. NOTA         aaa/nnnnnn   (agente/numeronota)\n3  18  1   TIPO NOTA         (1)\n4  19  13  COD. ARTICULO\n5  32  7   PRECIO            Precio de venta sin descuentos\n6  39  5   DESC.             Descuento por unidad en euros o ptas\n7  44  5   DESC. PORCENTUAL  Descuento por unidad en %\n8  49  4   UNID. VALORA. 1   cajas\n9  53  7   UNID. VALORA  2   kilos/unidades\n10 60  1   TIPO LINEA        (2)\n11 61  1   tipo IGIC          1, 2 ¢ 3\n12 62  1   EUROS S/N         Indica si se hizo en euros o en pts (3)\n13 63  7   PVERDE            Cargo unitario por Punto Verde\n14 70  2   FINAL REGISTRO    CR LF  ( chr$(13) y chr$(10) )\n\n  (1) Tipos de nota:  1- Factura Contado     2- Factura Credito\n                      3- Albaran Contado     4- Albaran Credito\n                      5- Adicional Contado   6- Adicional Credito\n                      7- Indirecto Contado   8- Indirecto Credito\n\n  (2) Tipos de linea: 0- Venta      1- Devoluci¢n      2- Defectuoso\n                      3- Caducado   4- Abono  7- Regalo mercancia Automat.\n\n  (3) Si el cliente est  en euros, los campos precio y desc. vendran en\n      euros, y si estaba en ptas, vendr n en ptas.\n-------------------------------------------------------------------------------\n*/\n\n   cFilEdm           := cPathTo + \"EALBA\" + cCodRut + \".PSI\"\n\n   /*\n   Creamos el fichero destino\n   */\n\n   if !file( cFilEdm )\n      msgStop( cFilEdm, \"No existe\" )\n      return nil\n   end if\n\n   oFilEdm           := TTxtFile():New( cFilEdm )\n\n   /*\n   Abrimos las bases de datos\n   */\n\n   OpenFiles()\n\n   oStru:oMetDos:cText   := \"Fac. clientes\"\n   oStru:oMetDos:SetTotal( oFilEdm:nTLines )\n\n   /*\n   Mientras no estemos en el final del archivo\n   */\n\n   while !oFilEdm:lEoF()\n\n      /*\n      Tomamos el codigo del cliente\n      */\n\n      cCodCli        := SubStr( oFilEdm:cLine,  1,  7 )\n      cCodAge        := SubStr( oFilEdm:cLine,  8,  3 )\n      cNumDoc        := SubStr( oFilEdm:cLine,  8, 10 )\n      nNumDoc        := Val( StrTran( cNumDoc, \"/\", \"\" ) )\n      cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )\n\n      if ( cTipDoc == \"1\" .or. cTipDoc == \"2\" )\n\n         if dbSeekInOrd( cCodCli, \"Cod\", dbfClient )\n\n            if Empty( ( dbfClient )->Serie )\n               cSerie                        := \"A\"\n            else\n               cSerie                        := ( dbfClient )->Serie\n            end if\n\n            if !( dbfFacCliT )->( dbSeek( cSerie + Str( nNumDoc, 9 ) + RetSufEmp() ) )\n\n               n     := aScan( aHeadLine, {|a| a[1] == cNumDoc } )\n               if n  != 0\n\n                  dFecFac                    := aHeadLine[n,2]\n                  nDtoEsp                    := aHeadLine[n,3]\n                  nDtoPp                     := aHeadLine[n,4]\n                  nImpCob                    := aHeadLine[n,5]\n\n                  ( dbfFacCliT )->( dbAppend() )\n                  ( dbfFacCliT )->cSerie     := cSerie\n                  ( dbfFacCliT )->nNumFac    := nNumDoc\n                  ( dbfFacCliT )->cSufFac    := RetSufEmp()\n                  ( dbfFacCliT )->cDocOrg    := cNumDoc\n                  ( dbfFacCliT )->dFecFac    := dFecFac\n                  ( dbfFacCliT )->cCodAlm    := oUser():cAlmacen()\n                  ( dbfFacCliT )->cCodCaj    := oUser():cCaja()\n                  ( dbfFacCliT )->cDivFac    := cDivEmp()\n                  ( dbfFacCliT )->nVdvFac    := nChgDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n                  ( dbfFacCliT )->cCodCli    := ( dbfClient )->Cod\n                  ( dbfFacCliT )->cNomCli    := ( dbfClient )->Titulo\n                  ( dbfFacCliT )->cDirCli    := ( dbfClient )->Domicilio\n                  ( dbfFacCliT )->cPobCli    := ( dbfClient )->Poblacion\n                  ( dbfFacCliT )->cPrvCli    := ( dbfClient )->Provincia\n                  ( dbfFacCliT )->cPosCli    := ( dbfClient )->CodPostal\n                  ( dbfFacCliT )->cDniCli    := ( dbfClient )->Nif\n                  ( dbfFacCliT )->cCodTar    := ( dbfClient )->cCodTar\n                  ( dbfFacCliT )->cCodPago   := if( Empty( ( dbfClient )->CodPago ), oStru:cCodPgo, ( dbfClient )->CodPago )\n                  ( dbfFacCliT )->cCodAge    := cCodAge\n                  ( dbfFacCliT )->cCodRut    := ( dbfClient )->cCodRut\n                  ( dbfFacCliT )->nTarifa    := ( dbfClient )->nTarifa\n                  ( dbfFacCliT )->lRecargo   := ( dbfClient )->lReq\n                  ( dbfFacCliT )->lOperPv    := ( dbfClient )->lPntVer\n                  ( dbfFacCliT )->nDtoEsp    := nDtoEsp\n                  ( dbfFacCliT )->nDpp       := nDtoPp\n                  ( dbfFacCliT )->( dbUnLock() )\n\n                  aAdd( aSucces, { .t., \"Nueva factura de clientes \" + ( dbfFacCliT )->cSerie + \"/\" + Str( ( dbfFacCliT )->nNumFac ) + \"/\" + ( dbfFacCliT )->cSufFac } )\n\n                  /*\n                  Añadimos los pagos-------------------------------------------------------\n                  */\n\n                  if nImpCob != 0\n\n                     ( dbfFacCliP )->( dbAppend() )\n                     ( dbfFacCliP )->cSerie     := cSerie\n                     ( dbfFacCliP )->nNumFac    := nNumDoc\n                     ( dbfFacCliP )->cSufFac    := RetSufEmp()\n                     ( dbfFacCliP )->nNumRec    := 1\n                     ( dbfFacCliP )->cCodCli    := cCodCli\n                     ( dbfFacCliP )->cCodCaj    := oUser():cCaja()\n                     ( dbfFacCliP )->nImporte   := nImpCob\n                     ( dbfFacCliP )->cDescrip   := \"Recibo nº1 de factura \" + ( dbfFacCliP )->cSerie  + '/' + allTrim( Str( ( dbfFacCliP )->nNumFac ) ) + '/' + ( dbfFacCliP )->cSufFac\n                     ( dbfFacCliP )->cDivPgo    := cDivEmp()\n                     ( dbfFacCliP )->nVdvPgo    := nChgDiv( ( dbfFacCliT )->cDivFac, dbfDiv )\n                     ( dbfFacCliP )->lCobrado   := .t.\n                     ( dbfFacCliP )->cTurRec    := cCurSesion()\n                     ( dbfFacCliP )->dPreCob    := dFecFac\n                     ( dbfFacCliP )->dEntrada   := dFecFac\n                     ( dbfFacCliP )->( dbUnLock() )\n\n                  end if\n\n                  /*\n                  Mientras estemos en la misma factura----------------------------\n                  */\n\n                  while cNumDoc == SubStr( oFilEdm:cLine,  8, 10 ) .and. ! oFilEdm:lEoF()\n\n                     if cTipDoc == \"1\" .or. cTipDoc == \"2\"\n\n                        if ( dbfFacCliT )->( dbSeek( cSerie + Str( nNumDoc, 9 ) + RetSufEmp() ) )\n\n                           /*\n                           Capturamos las lineas de detalle-----------------------\n                           */\n\n                           ( dbfFacCliL )->( dbAppend() )\n                           ( dbfFacCliL )->cSerie     := ( dbfFacCliT )->cSerie\n                           ( dbfFacCliL )->nNumFac    := ( dbfFacCliT )->nNumFac\n                           ( dbfFacCliL )->cSufFac    := ( dbfFacCliT )->cSufFac\n                           ( dbfFacCliL )->cRef       := Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) )\n                           ( dbfFacCliL )->cDetalle   := RetFld( ( dbfFacCliL )->cRef, dbfArticulo )\n                           ( dbfFacCliL )->nPreUnit   := Val( SubStr( oFilEdm:cLine, 32,  7 ) )\n                           ( dbfFacCliL )->nDtoDiv    := Val( SubStr( oFilEdm:cLine, 39,  5 ) )\n                           ( dbfFacCliL )->nDto       := Val( SubStr( oFilEdm:cLine, 44,  5 ) )\n                           ( dbfFacCliL )->nIva       := nIvaCodTer( SubStr( oFilEdm:cLine, 61, 1 ), dbfIva )\n                           ( dbfFacCliL )->nReq       := nReqCodTer( SubStr( oFilEdm:cLine, 61, 1 ), dbfIva )\n                           ( dbfFacCliL )->nPntVer    := Val( SubStr( oFilEdm:cLine, 63, 7 ) )\n                           ( dbfFacCliL )->nCanEnt    := 1\n                           ( dbfFacCliL )->nUniCaja   := Val( SubStr( oFilEdm:cLine, 53,  7 ) )\n\n                           /*\n                           Buscamos en el array l numero de lote---------------\n                           */\n\n                           if ( n  := aScan( aLotes, {|a| a[1] == cNumDoc .and. a[2] == Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) ) } ) ) != 0\n                              ( dbfFacCliL )->lLote   := .t.\n                              ( dbfFacCliL )->cLote   := aLotes[ n, 3 ]\n                           end if\n\n                           ( dbfFacCliL )->( dbUnLock() )\n\n                        end if\n\n                     end if\n\n                     oFilEdm:Skip()\n                     oStru:oMetDos:SetTotal( oFilEdm:nLine )\n\n                  end do\n\n                  /*\n                  Comprobamos el estado de la factura-----------------------------------------\n                  */\n\n                  ChkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )\n\n               else\n\n                  aAdd( aSucces, { .f., \"Lineas de facturas huerfanas, cliente \" + cCodCli + \", documento \" + cNumDoc } )\n                  oFilEdm:Skip()\n\n               end if\n\n            else\n\n               aAdd( aSucces, { .f., \"Factura de clientes ya existe \" + ( dbfFacCliT )->cSerie + \"/\" + Str( ( dbfFacCliT )->nNumFac ) + \"/\" + ( dbfFacCliT )->cSufFac } )\n               oFilEdm:Skip()\n\n            end if\n\n         else\n\n            aAdd( aSucces, { .f., \"No existe cliente \" + cCodCli + \" de factura \" + cNumDoc } )\n            oFilEdm:Skip()\n\n         end if\n\n      else // no es una factura\n\n         oFilEdm:Skip()\n\n      end if\n\n   end do\n\n   oFilEdm:Close()\n\n   CloseFiles()\n\nRETURN ( aSucces )\n\n#endif\n\n//-------------------------------------------------------------------------//\n\nFUNCTION aDocFacCli()\n\n   local aDoc  := {}\n\n   /*\n   Itmes-----------------------------------------------------------------------\n   */\n\n   aAdd( aDoc, { \"Empresa\",         \"EM\" } )\n   aAdd( aDoc, { \"Factura\",         \"FC\" } )\n   aAdd( aDoc, { \"Cliente\",         \"CL\" } )\n   aAdd( aDoc, { \"Almacen\",         \"AL\" } )\n   aAdd( aDoc, { \"Obras\",           \"OB\" } )\n   aAdd( aDoc, { \"Rutas\",           \"RT\" } )\n   aAdd( aDoc, { \"Agentes\",         \"AG\" } )\n   aAdd( aDoc, { \"Divisas\",         \"DV\" } )\n   aAdd( aDoc, { \"Formas de pago\",  \"PG\" } )\n   aAdd( aDoc, { \"Transportistas\",  \"TR\" } )\n   aAdd( aDoc, { \"Cajas\",           \"CA\" } )\n\nRETURN ( aDoc )\n\n//---------------------------------------------------------------------------//\n\nfunction ShowKit( dbfMaster, dbfTmpLin, oBtnKit, oBrw, lSet, dbfTmpInc, cCodCli, dbfClient, oRieCli, oGetRnt, aGet, oSayGetRnt )\n\n   local lShwKit     := lShwKit()\n\n   DEFAULT  lSet     := .t.\n\n   if !Empty( aGet ) .and. !Empty( dbfMaster )\n\n      if !Empty( cCodCli )\n         aGet[ ( dbfMaster )->( FieldPos( \"cCodCli\" ) ) ]:cText( cCodCli )\n         aGet[ ( dbfMaster )->( FieldPos( \"cCodCli\" ) ) ]:lValid()\n      end if\n\n      /*\n      if ( lUsrMaster() .or. oUser():lCambiarPrecio() )\n         aGet[ ( dbfMaster )->( FieldPos( \"nTarifa\" ) ) ]:HardEnable()\n         aGet[ ( dbfMaster )->( FieldPos( \"lRecargo\" ) ) ]:HardEnable()\n      else\n         aGet[ ( dbfMaster )->( FieldPos( \"nTarifa\" ) ) ]:HardDisable()\n         aGet[ ( dbfMaster )->( FieldPos( \"lRecargo\" ) ) ]:HardEnable()\n      end if\n      */\n\n   end if\n\n   if lSet\n      lShwKit        := !lShwKit\n   end if\n\n   if lShwKit\n      SetWindowText( oBtnKit:hWnd, \"Ocultar Esc&ll.\" )\n      if ( dbfTmpLin )->( Used() )\n         ( dbfTmpLin )->( dbClearFilter() )\n      end if\n   else\n      SetWindowText( oBtnKit:hWnd, \"Mostrar Esc&ll.\" )\n      if ( dbfTmpLin )->( Used() )\n         ( dbfTmpLin )->( dbSetFilter( {|| ! Field->lKitChl }, \"!lKitChl\" ) )\n      end if\n   end if\n\n   if lSet\n      lShwKit( lShwKit )\n   end if\n\n   if oGetRnt != nil .and. oUser():lNotRentabilidad()\n      oGetRnt:Hide()\n   end if\n\n   if oSayGetRnt != nil .and. oUser():lNotRentabilidad()\n      oSayGetRnt:Hide()\n   end if\n\n   /*\n   Hace que salte la incidencia al entrar en el documento----------------------\n   */\n\n   if !Empty( dbfTmpInc ) .and. ( dbfTmpInc )->( Used() )\n\n      while !( dbfTmpInc )->( Eof() )\n         if ( dbfTmpInc )->lAviso .and. !( dbfTmpInc )->lListo\n            MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), \"¡Incidencia!\" )\n         end if\n         ( dbfTmpInc )->( dbSkip() )\n      end while\n\n      ( dbfTmpInc )->( dbGoTop() )\n\n   end if\n\n   oBrw:Refresh()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n/*\nFunction nImpTip( cCodTip )\n\n   local nPos  := aScan( aTip, {| aTot | aTot[ 1 ] == cCodTip } )\n\n   if nPos     != 0\n      return ( aTip[ nPos, 2 ] )\n   end if\n\nreturn 0\n*/\n//---------------------------------------------------------------------------//\n\nFUNCTION lSndInt( oBrw, dbf )\n\n   if ( dbf )->( dbRLock() )\n      ( dbf )->lSndDoc  := !( dbf )->lSndDoc\n      ( dbf )->( dbUnlock() )\n   end if\n\n   oBrw:Refresh()\n   oBrw:SetFocus()\n\nRETURN NIL\n\n//-------------------------------------------------------------------------//\n\n/*\nFuncion que nos permite a¤adir a las facturas articulos de albaranes ya\nexistentes\n- Parametros:\n   oGet     -> Objeto que contiene el valor del nuevo albaran\n   nAlbaran -> Numero del Albaran que se esta creando,\n   oBrw     -> Objeto Browse se pasa para hacer los referscos\n*/\n\nSTATIC FUNCTION GrpAlb( aGet, aTmp, oBrw )\n\n   local oDlg\n   local oBmp\n   local oTitle1\n   local oTitle2\n   local oTitle3\n   local oBrwDet\n   local nOrd\n   local nNumLin\n   local nItem       := 1\n   local nTotDoc     := 0\n   local nDtoEsp     := 0\n   local nDtoDpp     := 0\n   local nDtoUno     := 0\n   local nDtoDos     := 0\n   local nOffSet     := 0\n   local cDesAlb     := \"\"\n   local cCodCli     := Rtrim( aGet[ _CCODCLI ]:VarGet() )\n   local lIvaInc     := aTmp[ _LIVAINC ]\n   local lAlquiler   := .f.\n   local aAlbaranes  := {}\n   local nTotEntAlb  := 0\n   local cSuPed      := \"\"\n\n   if empty( cCodCli )\n      msgStop( \"Es necesario codificar un cliente.\", \"Agrupar albaranes\" )\n      return .t.\n   end if\n\n   nOrd              := ( dbfAlbCliT )->( ordSetFocus( \"CCODCLI\" ) )   // Orden a Codigo de Cliente\n\n   if !Empty( oTipFac ) .and. oTipFac:nAt == 2\n      lAlquiler      := .t.\n   end if\n\n   /*\n   Seleccion de Registros\n   --------------------------------------------------------------------------\n   */\n\n   if ( dbfAlbCliT )->( dbSeek( cCodCli ) )\n      do while Rtrim( ( dbfAlbCliT )->cCodCli ) == cCodCli .and. !( dbfAlbCliT )->( eof() )\n\n         if ( dbfAlbCliT )->lAlquiler  == lAlquiler                                          .and.;\n            !( dbfAlbCliT )->lFacturado                                                      .and.;\n            ( lIvaInc == ( dbfAlbCliT )->lIvaInc  )                                          .and.;\n            ( Empty( aTmp[ _CCODOBR ] ) .or. ( dbfAlbCliT )->cCodObr == aTmp[ _CCODOBR ] )\n\n            aAdd( aAlbaranes, {  ( dbfAlbCliT )->lFacturado ,;\n                                 ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb,;\n                                 ( dbfAlbCliT )->cCodSuAlb ,;\n                                 ( dbfAlbCliT )->dFecAlb ,;\n                                 ( dbfAlbCliT )->cCodCli ,;\n                                 ( dbfAlbCliT )->cNomCli ,;\n                                 ( dbfAlbCliT )->cRetMat ,;\n                                 ( dbfAlbCliT )->cCodObr ,;\n                                 sTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, nil, .t. ),;\n                                 ( dbfAlbCliT )->cSerAlb ,;\n                                 ( dbfAlbCliT )->nNumAlb ,;\n                                 ( dbfAlbCliT )->cSufAlb } )\n         endif\n\n         ( dbfAlbCliT )->( dbSkip() )\n\n      end do\n\n   else\n\n      msgStop( \"No existen albaranes de este cliente.\" )\n      ( dbfAlbCliT )->( ordSetFocus( nOrd ) )\n      return .t.\n\n   end if\n\n\n   /*\n   Reposicionamos el focus en el indice\n   */\n\n   ( dbfAlbCliT )->( ordSetFocus( nOrd ) )\n\n   /*\n   Puede que no hay albaranes que facturar\n   */\n\n   if Len( aAlbaranes ) == 0\n      MsgStop( \"No existen albaranes sin facturar\" )\n      return .t.\n   end if\n\n   /*\n   Caja de Dialogo\n   --------------------------------------------------------------------------\n   */\n\n   DEFINE DIALOG  oDlg ;\n      RESOURCE    \"SET_ALBARAN\" ;\n      TITLE       \"Agrupando albaranes de clientes\"\n\n      REDEFINE BITMAP oBmp ;\n         ID       500 ;\n         RESOURCE \"plantillas_automaticas_48_alpha\" ;\n         TRANSPARENT ;\n         OF       oDlg\n\n      REDEFINE SAY oTitle1 PROMPT RTrim( aTmp[_CNOMCLI] );\n         ID       501 ;\n         OF       oDlg\n\n      REDEFINE SAY oTitle2 PROMPT If( Empty( aTmp[_CCODOBR] ), \"TODAS\", aTmp[_CCODOBR] );\n         ID       502 ;\n         OF       oDlg\n\n      REDEFINE SAY oTitle3 PROMPT if( aTmp[ _LIVAINC ], \"Incluido\", \"Desglosado\" );\n         ID       503 ;\n         OF       oDlg\n\n      REDEFINE SAY oTitle3 PROMPT \"Tipo de \" + cImp() + \": \";\n         ID       504 ;\n         OF       oDlg\n\n      oBrwDet                        := IXBrowse():New( oDlg )\n\n      oBrwDet:bClrSel                := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwDet:bClrSelFocus           := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwDet:nMarqueeStyle          := 5\n      oBrwDet:lRecordSelector        := .f.\n      oBrwDet:lHscroll               := .f.\n      oBrwDet:lFooter                := .t.\n      oBrwDet:cName                  := \"Agrupar albaranes clientes\"\n\n      oBrwDet:bLDblClick   := {|| aAlbaranes[ oBrwDet:nArrayAt, 1 ] := !aAlbaranes[ oBrwDet:nArrayAt, 1 ], oBrwDet:Refresh() }\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Seleccionado\"\n         :cSortOrder       := 1\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| aAlbaranes[ oBrwDet:nArrayAt, 1 ] }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := 2\n         :bEditValue       := {|| aAlbaranes[ oBrwDet:nArrayAt, 10 ] + \"/\" + AllTrim( Str( aAlbaranes[ oBrwDet:nArrayAt, 11 ] ) ) + \"/\" + aAlbaranes[ oBrwDet:nArrayAt, 12 ] }\n         :nWidth           := 75\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Su albarán\"\n         :cSortOrder       := 3\n         :bEditValue       := {|| aAlbaranes[ oBrwDet:nArrayAt, 3 ] }\n         :nWidth           := 75\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Fecha\"\n         :cSortOrder       := 4\n         :bEditValue       := {|| Dtoc( aAlbaranes[ oBrwDet:nArrayAt, 4 ] ) }\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Cliente\"\n         :cSortOrder       := 5\n         :bEditValue       := {|| Rtrim( aAlbaranes[ oBrwDet:nArrayAt, 5 ] ) + Space(1) + aAlbaranes[ oBrwDet:nArrayAt, 6 ] }\n         :nWidth           := 225\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Matrícula\"\n         :cSortOrder       := 7\n         :bEditValue       := {|| Rtrim( aAlbaranes[ oBrwDet:nArrayAt, 7 ] ) }\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Dirección\"\n         :cSortOrder       := 8\n         :bEditValue       := {|| Rtrim( aAlbaranes[ oBrwDet:nArrayAt, 8 ] ) + Space(1) + RetFld( aAlbaranes[ oBrwDet:nArrayAt, 5 ] + aAlbaranes[ oBrwDet:nArrayAt, 8 ], dbfObrasT, \"cNomObr\" ) }\n         :nWidth           := 225\n      end with\n\n      with object ( oBrwDet:AddCol() )\n         :cHeader          := \"Total\"\n         :bEditValue       := {|| aAlbaranes[ oBrwDet:nArrayAt, 9 ]:nTotalDocumento }\n         :bFooter          := {|| nTotalAlbaranesAgrupar( aAlbaranes ) }\n         :nWidth           := 70\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :nFootStrAlign    := 1\n      end with\n\n      oBrwDet:SetArray( aAlbaranes, .t., , .f. )\n\n      oBrwDet:CreateFromResource( 130 )\n\n      REDEFINE BUTTON ;\n         ID       514 ;\n         OF       oDlg ;\n         ACTION   (  aAlbaranes[ oBrwDet:nArrayAt, 1 ] := !aAlbaranes[ oBrwDet:nArrayAt, 1 ],;\n                     oBrwDet:refresh(),;\n                     oBrwDet:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       516 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aAlbaranes, { |aItem| aItem[1] := .t. } ),;\n                     oBrwDet:refresh(),;\n                     oBrwDet:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       517 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aAlbaranes, { |aItem| aItem[1] := .f. } ),;\n                     oBrwDet:refresh(),;\n                     oBrwDet:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       518 ;\n         OF       oDlg ;\n         ACTION   ( ZooAlbCli( aAlbaranes[ oBrwDet:nArrayAt, 2 ] ) )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      oDlg:AddFastKey( VK_F5, {|| oDlg:end( IDOK ) } )\n\n      oDlg:bStart := {|| oBrwDet:Load() }\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   /*\n   Llamda a la funcion que busca el Albaran\n   */\n\n   if oDlg:nResult == IDOK .and. Len( aAlbaranes ) >= 1\n\n      CursorWait()\n\n      /*\n      A¤adimos los albaranes seleccionado para despues\n      */\n\n      for nItem := 1 TO Len( aAlbaranes )\n         if ( aAlbaranes[ nItem, 1 ] )\n            if ( dbfAlbCliT )->( dbSeek( aAlbaranes[ nItem, 2] ) )\n               SetFacturadoAlbaranCliente( .t., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS )\n            end if\n            aAdd( aNumAlb, aAlbaranes[ nItem, 2 ] )\n         end if\n      next\n\n      for nItem := 1 to Len( aAlbaranes )\n\n         /*\n         Cabeceras de albaranes a facturas\n         */\n\n         if ( dbfAlbCliT )->( dbSeek( aAlbaranes[ nItem, 2] ) ) .and. aAlbaranes[ nItem, 1 ]\n\n            if !Empty( ( dbfAlbCliT )->cCodAge ) .and. Empty( aTmp[ _CCODAGE ] )\n               aGet[ _CCODAGE  ]:cText( ( dbfAlbCliT )->cCodAge )\n            end if\n\n            if !Empty( ( dbfAlbCliT )->cCodPago ) .and. Empty( aTmp[ _CCODPAGO ] )\n               aGet[ _CCODPAGO ]:cText( ( dbfAlbCliT )->cCodPago )\n            end if\n\n            if ( dbfAlbCliT )->lRecargo\n               aTmp[ _LRECARGO ] := .t.\n               aGet[ _LRECARGO ]:Refresh()\n            end if\n\n            if ( dbfAlbCliT )->lOperPv\n               aTmp[ _LOPERPV ]  := .t.\n               aGet[ _LOPERPV ]:Refresh()\n            end if\n\n            cSuPed               := ( dbfAlbCliT )->cSuPed\n\n         end if\n\n         /*\n         Detalle de albaranes a facturas\n         */\n\n         if ( dbfAlbCliL )->( dbSeek( aAlbaranes[ nItem, 2 ] ) ) .and. aAlbaranes[ nItem, 1 ]\n\n            nNumLin                    := nil\n\n            if lNumAlb() .or. lNumObr() .or. lSuAlb()\n\n               ( dbfTmpLin )->( dbAppend() )\n\n               cDesAlb                 := \"\"\n               if lNumObr()\n                  cDesAlb              += Alltrim( cNumObr() ) + \" \" + StrTran( aAlbaranes[ nItem, 8 ], \" \", \"\" ) + Space( 1 )\n               end if\n               if lNumAlb()\n                  cDesAlb              += Alltrim( cNumAlb() ) + \" \" + Left( aAlbaranes[ nItem, 2 ], 1 ) + \"/\" + AllTrim( SubStr( aAlbaranes[ nItem, 2 ], 2, 9 ) ) + \"/\" + Right( aAlbaranes[ nItem, 2 ], 2 ) + Space( 1 )\n               end if\n               if lSuAlb()\n                  cDesAlb              += Alltrim( cSuAlb()  ) + \" \" + StrTran( aAlbaranes[ nItem, 3 ], \" \", \"\" ) + Space( 1 )\n               end if\n               cDesAlb                 += \" - Fecha \" + Dtoc( aAlbaranes[ nItem, 4] )\n\n               ( dbfTmpLin )->cDetalle := cDesAlb\n               ( dbfTmpLin )->lControl := .t.\n               ( dbfTmpLin )->nNumLin  := ++nOffSet\n\n            end if\n\n            while ( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == aAlbaranes[ nItem, 2] .and. !( dbfAlbCliL )->( Eof() ) )\n\n               if nNumLin != ( dbfAlbCliL )->nNumLin .and. !( dbfAlbCliL )->lControl\n                  ++nOffSet\n                  nNumLin              := ( dbfAlbCliL )->nNumLin\n               end if\n\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := nOffSet\n               ( dbfTmpLin )->cRef     := ( dbfAlbCliL )->cRef\n               ( dbfTmpLin )->cDetalle := ( dbfAlbCliL )->cDetalle\n               ( dbfTmpLin )->mLngDes  := ( dbfAlbCliL )->mLngDes\n               ( dbfTmpLin )->mNumSer  := ( dbfAlbCliL )->mNumSer\n               ( dbfTmpLin )->nPreUnit := ( dbfAlbCliL )->nPreUnit\n               ( dbfTmpLin )->NCANENT  := ( dbfAlbCliL )->nCanEnt\n               ( dbfTmpLin )->CUNIDAD  := ( dbfAlbCliL )->cUnidad\n               ( dbfTmpLin )->NUNICAJA := ( dbfAlbCliL )->nUniCaja\n               ( dbfTmpLin )->nUndKit  := ( dbfAlbCliL )->nUndKit\n               ( dbfTmpLin )->NPESOKG  := ( dbfAlbCliL )->nPesOkg\n               ( dbfTmpLin )->NVOLUMEN := ( dbfAlbCliL )->nVolumen\n               ( dbfTmpLin )->CVOLUMEN := ( dbfAlbCliL )->cVolumen\n               ( dbfTmpLin )->NIVA     := ( dbfAlbCliL )->nIva\n               ( dbfTmpLin )->nReq     := ( dbfAlbCliL )->nReq\n               ( dbfTmpLin )->NDTO     := ( dbfAlbCliL )->nDto\n               ( dbfTmpLin )->NDTODIV  := ( dbfAlbCliL )->nDtoDiv\n               ( dbfTmpLin )->NPNTVER  := ( dbfAlbCliL )->nPntVer\n               ( dbfTmpLin )->NDTOPRM  := ( dbfAlbCliL )->nDtoPrm\n               ( dbfTmpLin )->NCOMAGE  := ( dbfAlbCliL )->nComAge\n               ( dbfTmpLin )->DFECHA   := ( dbfAlbCliL )->dFecha\n               ( dbfTmpLin )->CTIPMOV  := ( dbfAlbCliL )->cTipMov\n               ( dbfTmpLin )->LTOTLIN  := ( dbfAlbCliL )->lTotLin\n               ( dbfTmpLin )->cCodAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n               ( dbfTmpLin )->dFecAlb  := ( dbfAlbCliT )->dFecAlb\n               ( dbfTmpLin )->cAlmLin  := ( dbfAlbCliL )->cAlmLin\n               ( dbfTmpLin )->lIvaLin  := ( dbfAlbCliL )->lIvaLin\n               ( dbfTmpLin )->nValImp  := ( dbfAlbCliL )->nValImp\n               ( dbfTmpLin )->cCodPr1  := ( dbfAlbCliL )->cCodPr1\n               ( dbfTmpLin )->cCodPr2  := ( dbfAlbCliL )->cCodPr2\n               ( dbfTmpLin )->cValPr1  := ( dbfAlbCliL )->cValPr1\n               ( dbfTmpLin )->cValPr2  := ( dbfAlbCliL )->cValPr2\n               ( dbfTmpLin )->nCosDiv  := ( dbfAlbCliL )->nCosDiv\n               ( dbfTmpLin )->lKitArt  := ( dbfAlbCliL )->lKitArt\n               ( dbfTmpLin )->lKitChl  := ( dbfAlbCliL )->lKitChl\n               ( dbfTmpLin )->lKitPrc  := ( dbfAlbCliL )->lKitPrc\n               ( dbfTmpLin )->nUndKit  := ( dbfAlbCliL )->nUndKit\n               ( dbfTmpLin )->nMesGrt  := ( dbfAlbCliL )->nMesGrt\n               ( dbfTmpLin )->lLote    := ( dbfAlbCliL )->lLote\n               ( dbfTmpLin )->nLote    := ( dbfAlbCliL )->nLote\n               ( dbfTmpLin )->cLote    := ( dbfAlbCliL )->cLote\n               ( dbfTmpLin )->lControl := ( dbfAlbCliL )->lControl\n               ( dbfTmpLin )->lNotVta  := ( dbfAlbCliL )->lNotVta\n               ( dbfTmpLin )->lImpLin  := ( dbfAlbCliL )->lImpLin\n               ( dbfTmpLin )->mObsLin  := ( dbfAlbCliL )->mObsLin\n               ( dbfTmpLin )->Descrip  := ( dbfAlbCliL )->Descrip\n               ( dbfTmpLin )->cCodPrv  := ( dbfAlbCliL )->cCodPrv\n               ( dbfTmpLin )->cNomPrv  := ( dbfAlbCliL )->cNomPrv\n               ( dbfTmpLin )->cImagen  := ( dbfAlbCliL )->cImagen\n               ( dbfTmpLin )->cCodFam  := ( dbfAlbCliL )->cCodFam\n               ( dbfTmpLin )->cGrpFam  := ( dbfAlbCliL )->cGrpFam\n               ( dbfTmpLin )->cRefPrv  := ( dbfAlbCliL )->cRefPrv\n               ( dbfTmpLin )->dFecEnt  := ( dbfAlbCliL )->dFecEnt\n               ( dbfTmpLin )->dFecSal  := ( dbfAlbCliL )->dFecSal\n               ( dbfTmpLin )->lAlquiler:= ( dbfAlbCliL )->lAlquiler\n               ( dbfTmpLin )->nPreAlq  := ( dbfAlbCliL )->nPreAlq\n               ( dbfTmpLin )->cUnidad  := ( dbfAlbCliL )->cUnidad\n               ( dbfTmpLin )->nNumMed  := ( dbfAlbCliL )->nNumMed\n               ( dbfTmpLin )->nMedUno  := ( dbfAlbCliL )->nMedUno\n               ( dbfTmpLin )->nMedDos  := ( dbfAlbCliL )->nMedDos\n               ( dbfTmpLin )->nMedTre  := ( dbfAlbCliL )->nMedTre\n               ( dbfTmpLin )->nPuntos  := ( dbfAlbCliL )->nPuntos\n               ( dbfTmpLin )->nValPnt  := ( dbfAlbCliL )->nValPnt\n               ( dbfTmpLin )->nDtoPnt  := ( dbfAlbCliL )->nDtoPnt\n               ( dbfTmpLin )->nIncPnt  := ( dbfAlbCliL )->nIncPnt\n               ( dbfTmpLin )->nFacCnv  := ( dbfAlbCliL )->nFacCnv\n               ( dbfTmpLin )->lLinOfe  := ( dbfAlbCliL )->lLinOfe\n               ( dbfTmpLin )->dFecCad  := ( dbfAlbCliL )->dFecCad\n               ( dbfTmpLin )->cSuPed   := cSuPed\n\n\n               /*\n               Pasamos series de albaranes-------------------------------------\n               */\n\n               if ( dbfAlbCliS )->( dbSeek( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb + Str( ( dbfAlbCliL )->nNumLin ) ) )\n\n                  while ( ( dbfAlbCliS )->cSerAlb + Str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb + Str( ( dbfAlbCliS )->nNumLin ) == ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb + Str( ( dbfAlbCliL )->nNumLin ) .and. !( dbfAlbCliS )->( eof() ) )\n\n                     ( dbfTmpSer )->( dbAppend() )\n\n                     ( dbfTmpSer )->nNumLin     := nOffSet\n                     ( dbfTmpSer )->cRef        := ( dbfAlbCliS )->cRef\n                     ( dbfTmpSer )->cAlmLin     := ( dbfAlbCliS )->cAlmLin\n                     ( dbfTmpSer )->lUndNeg     := ( dbfAlbCliS )->lUndNeg\n                     ( dbfTmpSer )->cNumSer     := ( dbfAlbCliS )->cNumSer\n\n                     ( dbfAlbCliS )->( dbSkip() )\n\n                  end while\n\n               end if\n\n               ( dbfAlbCliL )->( dbSkip() )\n\n            end while\n\n            /*\n            Pasamos todas las series----------------------------------------------\n\n            if ( dbfAlbCliS )->( dbSeek( aAlbaranes[ nItem, 2 ] ) )\n\n               while ( dbfAlbCliS )->cSerAlb + Str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb == aAlbaranes[ nItem, 2 ] .and. !( dbfAlbCliS )->( Eof() )\n\n                  ( dbfTmpSer )->( dbAppend() )\n                  ( dbfTmpSer )->nNumLin  := ( dbfAlbCliS )->nNumLin\n                  ( dbfTmpSer )->cRef     := ( dbfAlbCliS )->cRef\n                  ( dbfTmpSer )->cAlmLin  := ( dbfAlbCliS )->cAlmLin\n                  ( dbfTmpSer )->cNumSer  := ( dbfAlbCliS )->cNumSer\n\n                  ( dbfAlbCliS )->( dbSkip() )\n\n               end while\n\n            end if\n            */\n\n            /*\n            Lineas de descuento------------------------------------------------\n            */\n\n            nTotDoc                    += aAlbaranes[ nItem, 9 ]:nTotalBruto\n            nDtoEsp                    += aAlbaranes[ nItem, 9 ]:nTotalDescuentoGeneral\n            nDtoDpp                    += aAlbaranes[ nItem, 9 ]:nTotalDescuentoProntoPago\n            nDtoUno                    += aAlbaranes[ nItem, 9 ]:nTotalDescuentoUno\n            nDtoDos                    += aAlbaranes[ nItem, 9 ]:nTotalDescuentoDos\n\n            /*\n            if !Empty( ( dbfAlbCliT )->nDtoEsp )\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := nOffSet\n               ( dbfTmpLin )->cDetalle := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoEsp ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoEsp, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->mLngDes  := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoEsp ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoEsp, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->cCodAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n               ( dbfTmpLin )->dFecAlb  := ( dbfAlbCliT )->dFecAlb\n               ( dbfTmpLin )->nUniCaja := 1\n               ( dbfTmpLin )->nPreUnit := - aAlbaranes[ nItem, 9, 12 ]\n            end if\n\n            if !Empty( ( dbfAlbCliT )->nDpp )\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := nOffSet\n               ( dbfTmpLin )->cDetalle := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDpp ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDpp, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->mLngDes  := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDpp ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDpp, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->cCodAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n            end if\n\n            if !Empty( ( dbfAlbCliT )->nDtoUno )\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := nOffSet\n               ( dbfTmpLin )->cDetalle := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoUno ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoUno, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->mLngDes  := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoUno ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoUno, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->cCodAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n            end if\n\n            if !Empty( ( dbfAlbCliT )->nDtoDos )\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := nOffSet\n               ( dbfTmpLin )->cDetalle := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoDos ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoDos, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->mLngDes  := \"Descuento\" + Space( 1 ) + Rtrim( ( dbfAlbCliT )->cDtoDos ) + Space( 1 ) + Alltrim( Trans( ( dbfAlbCliT )->nDtoDos, \"@E 99.99\" ) ) + \"%\"\n               ( dbfTmpLin )->cCodAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n            end if\n            */\n\n            /*\n            Total albaran------------------------------------------------------\n            */\n\n            if RetFld( cCodCli, dbfClient, \"lTotAlb\" )\n               ( dbfTmpLin )->( dbAppend() )\n               ( dbfTmpLin )->nNumLin  := ++nOffSet\n               ( dbfTmpLin )->mLngDes  := \"Total albarán...\"\n               ( dbfTmpLin )->lTotLin  := .t.\n            end if\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del albarán--------------------------------\n            */\n\n            if ( dbfAlbCliI )->( dbSeek( aAlbaranes[ nItem, 2 ] ) )\n\n               while ( dbfAlbCliI )->cSerAlb + Str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == aAlbaranes[ nItem, 2 ] .and. !( dbfAlbCliI )->( Eof() )\n                  dbPass( dbfAlbCliI, dbfTmpInc, .t. )\n                  ( dbfAlbCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfAlbCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos de los pedidos------------------------------\n            */\n\n            if ( dbfAlbCliD )->( dbSeek( aAlbaranes[ nItem, 2 ] ) )\n\n               while ( dbfAlbCliD )->cSerAlb + Str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb == aAlbaranes[ nItem, 2 ] .and. !( dbfAlbCliD )->( Eof() )\n                  dbPass( dbfAlbCliD, dbfTmpDoc, .t. )\n                  ( dbfAlbCliD )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfAlbCliD )->( dbGoTop() )\n\n            oBrw:Refresh()\n\n         end if\n\n         ( dbfTmpLin )->( dbGoTop() )\n         ( dbfTmpPgo )->( dbGoTop() )\n         ( dbfTmpInc )->( dbGoTop() )\n         ( dbfTmpDoc )->( dbGoTop() )\n\n      next\n\n      /*\n      Agrupamos todas las entregas a cuenta en un recibo------------------------\n      */\n\n      for nItem := 1 to Len( aAlbaranes )\n\n         if aAlbaranes[ nItem, 1] .and. ( dbfAlbCliP )->( dbSeek( aAlbaranes[ nItem, 2 ] ) )\n\n            while ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == aAlbaranes[ nItem, 2] .and. !( dbfAlbCliP )->( Eof() )\n\n               nTotEntAlb     += ( dbfAlbCliP )->nImporte\n\n               ( dbfAlbCliP )->( dbSkip() )\n\n            end while\n\n         end if\n\n         ( dbfAlbCliP )->( dbGoTop() )\n\n      next\n\n      /*\n      Hacemos el append del recibo---------------------------------------------\n      */\n\n      if nTotEntAlb != 0\n\n         ( dbfTmpPgo )->( dbAppend() )\n\n         ( dbfTmpPgo )->lCobrado := .t.\n         ( dbfTmpPgo )->lConPgo  := .f.\n         ( dbfTmpPgo )->lRecImp  := .f.\n         ( dbfTmpPgo )->lRecDto  := .f.\n         ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( RecNo() )\n         ( dbfTmpPgo )->cCodCaj  := aTmp[ _CCODCAJ ]\n         ( dbfTmpPgo )->cCodCli  := aTmp[ _CCODCLI ]\n         ( dbfTmpPgo )->cNomCli  := aTmp[ _CNOMCLI ]\n         ( dbfTmpPgo )->dEntrada := aTmp[ _DFECFAC ]\n         ( dbfTmpPgo )->dPreCob  := aTmp[ _DFECFAC ]\n         ( dbfTmpPgo )->dFecVto  := aTmp[ _DFECFAC ]\n         ( dbfTmpPgo )->nImporte := nTotEntAlb\n         ( dbfTmpPgo )->nImpCob  := nTotEntAlb\n         ( dbfTmpPgo )->cDivPgo  := aTmp[ _CDIVFAC ]\n         ( dbfTmpPgo )->nVdvPgo  := aTmp[ _NVDVFAC ]\n         ( dbfTmpPgo )->cCodAge  := aTmp[ _CCODAGE ]\n         ( dbfTmpPgo )->cTurRec  := \"\"\n         ( dbfTmpPgo )->lCloPgo  := .t.\n         ( dbfTmpPgo )->cCodPgo  := aTmp[ _CCODPAGO ]\n         ( dbfTmpPgo )->cDescrip := \"Suma entregas a cuenta de albaranes\"\n         ( dbfTmpPgo )->( dbUnLock() )\n\n      end if\n\n      /*\n      No permitimos mas albaranes----------------------------------------------\n      */\n\n      aGet[ _CNUMALB ]:Hide()\n      aGet[ _CNUMPED ]:Hide()\n      aGet[ _CNUMPRE ]:Hide()\n\n      oBtnPre:Disable()\n      oBtnPed:Disable()\n      oBtnAlb:Disable()\n\n      oBtnGrp:bWhen  := {|| .f. }\n\n      /*\n      Tratamiento de los descuentos--------------------------------------------\n      */\n\n      if !Empty( nDtoEsp )\n         aGet[ _NDTOESP ]:cText( nDtoEsp / nTotDoc * 100 )\n         nTotDoc  -= nDtoEsp\n      end if\n\n      if !Empty( nDtoDpp )\n         aGet[ _NDPP ]:cText( nDtoDpp / nTotDoc * 100 )\n         nTotDoc  -= nDtoDpp\n      end if\n\n      if !Empty( nDtoUno )\n         aGet[ _NDTOUNO ]:cText( nDtoUno / nTotDoc * 100 )\n         nTotDoc  -= nDtoUno\n      end if\n\n      if !Empty( nDtoDos )\n         aGet[ _NDTODOS ]:cText( nDtoDos / nTotDoc * 100 )\n      end if\n\n      HideImportacion( aGet )\n\n      /*\n      Recalculo del total del factura------------------------------------------\n      */\n\n      RecalculaTotal( aTmp )\n\n      CursorWE()\n\n   end if\n\n   /*\n   Guardamos los datos del browse----------------------------------------------\n   */\n\n   oBrwDet:CloseData()\n\n   oBmp:End()\n\nRETURN .T.\n\n//---------------------------------------------------------------------------//\n\nstatic function nTotalAlbaranesAgrupar( aAlbaranes )\n\n   local aAlbaran\n   local nTotal   := 0\n\n   for each aAlbaran in aAlbaranes\n\n      if aAlbaran[1]\n         nTotal      +=  aAlbaran[9]:nTotalDocumento\n      end if\n\n   next\n\nreturn Trans( nTotal, cPorDiv )\n\n//---------------------------------------------------------------------------//\n\nCLASS TFacturasClientesSenderReciver FROM TSenderReciverItem\n\n   Data lSuccesfullSendFacturas\n   Data lSuccesfullSendAnticipos\n\n   Data nFacturaNumberSend\n   Data nAnticipoNumberSend\n\n   Method CreateData()\n\n   Method RestoreData()\n\n   Method SendData()\n   Method ReciveData()\n\n   Method Process()\n\n   Method nGetFacturaNumberToSend()    INLINE ( ::nFacturaNumberSend    := GetPvProfInt( \"Numero\", \"Facturas clientes\", ::nFacturaNumberSend, ::cIniFile ) )\n   Method nGetAnticipoNumberToSend()   INLINE ( ::nAnticipoNumberSend   := GetPvProfInt( \"Numero\", \"Anticipos clientes\", ::nAnticipoNumberSend, ::cIniFile ) )\n\n   Method IncFacturaNumberToSend()     INLINE ( WritePProString( \"Numero\", \"Facturas clientes\",    cValToChar( ++::nFacturaNumberSend ),  ::cIniFile ) )\n   Method IncAnticipoNumberToSend()    INLINE ( WritePProString( \"Numero\", \"Anticipos clientes\",   cValToChar( ++::nAnticipoNumberSend ), ::cIniFile ) )\n\nEND CLASS\n\n//----------------------------------------------------------------------------//\n\nMethod CreateData()\n\n   local nOrd\n   local oBlock\n   local oError\n   local dbfFacCliT\n   local dbfFacCliL\n   local dbfFacCliI\n   local dbfFacCliP\n   local dbfAntCliT\n   local tmpFacCliT\n   local tmpFacCliL\n   local tmpFacCliP\n   local tmpFacCliI\n   local tmpAntCliT\n   local lSndFacCli           := .f.\n   local lSndAntCli           := .f.\n   local cFileNameFacturas\n   local cFileNameAnticipos\n\n   if ::oSender:lServer\n      cFileNameFacturas       := \"FacCli\" + StrZero( ::nGetFacturaNumberToSend(), 6 ) + \".All\"\n      cFileNameAnticipos      := \"AntCli\" + StrZero( ::nGetAnticipoNumberToSend(), 6 ) + \".All\"\n   else\n      cFileNameFacturas       := \"FacCli\" + StrZero( ::nGetFacturaNumberToSend(), 6 ) + \".\" + RetSufEmp()\n      cFileNameAnticipos      := \"AntCli\" + StrZero( ::nGetAnticipoNumberToSend(), 6 ) + \".\" + RetSufEmp()\n   end if\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   USE ( cPatEmp() + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliT\", @dbfFacCliT ) )\n   SET ADSINDEX TO ( cPatEmp() + \"FacCliT.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliL\", @dbfFacCliL ) )\n   SET ADSINDEX TO ( cPatEmp() + \"FacCliL.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"FacCliP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliP\", @dbfFacCliP ) )\n   SET ADSINDEX TO ( cPatEmp() + \"FacCliP.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"FacCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliI\", @dbfFacCliI ) )\n   SET ADSINDEX TO ( cPatEmp() + \"FacCliI.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n   SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n   ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n\n   /*\n   Creamos todas las bases de datos relacionadas con Articulos\n   */\n\n   mkFacCli( cPatSnd() )\n   mkRecCli( cPatSnd() )\n\n   USE ( cPatSnd() + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliT\", @tmpFacCliT ) )\n   SET ADSINDEX TO ( cPatSnd() + \"FacCliT.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliL\", @tmpFacCliL ) )\n   SET ADSINDEX TO ( cPatSnd() + \"FacCliL.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"FacCliP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliP\", @tmpFacCliP ) )\n   SET ADSINDEX TO ( cPatSnd() + \"FacCliP.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"FacCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliI\", @tmpFacCliI ) )\n   SET ADSINDEX TO ( cPatSnd() + \"FacCliI.CDX\" ) ADDITIVE\n\n   if !Empty( ::oSender:oMtr )\n      ::oSender:oMtr:nTotal := ( dbfFacCliT )->( LastRec() )\n   end if\n\n   ::oSender:SetText( \"Enviando facturas de clientes\" )\n\n   nOrd  := ( dbfFacCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n   if ( dbfFacCliT )->( dbSeek( .t. ) )\n      while !( dbfFacCliT )->( eof() )\n\n         if ( dbfFacCliT )->lSndDoc\n\n            lSndFacCli  := .t.\n\n            dbPass( dbfFacCliT, tmpFacCliT, .t. )\n            ::oSender:SetText( ( dbfFacCliT )->cSerie + \"/\" + AllTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + AllTrim( ( dbfFacCliT )->cSufFac ) + \"; \" + Dtoc( ( dbfFacCliT )->dFecFac ) + \";\" + AllTrim( ( dbfFacCliT )->cCodCli ) + \"; \" + ( dbfFacCliT )->cNomCli )\n\n            if ( dbfFacCliL )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n               while ( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac ) == ( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliL )->( eof() )\n                  dbPass( dbfFacCliL, tmpFacCliL, .t. )\n                  ( dbfFacCliL )->( dbSkip() )\n               end do\n            end if\n\n            if ( dbfFacCliI )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n               while ( ( dbfFacCliI )->cSerie + Str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac ) == ( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliI )->( eof() )\n                  dbPass( dbfFacCliI, tmpFacCliI, .t. )\n                  ( dbfFacCliI )->( dbSkip() )\n               end do\n            end if\n\n            if ( dbfFacCliP )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n               while ( ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac ) == ( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) .AND. !( dbfFacCliP )->( eof() )\n                  dbPass( dbfFacCliP, tmpFacCliP, .t. )\n                  ( dbfFacCliP )->( dbSkip() )\n               end do\n            end if\n\n            if ( dbfAntCliT )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n               while ( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac == ( dbfAntCliT )->cNumDoc .and. !( dbfAntCliT )->( eof() ) )\n                  if !( dbfAntCliT )->lSndDoc .and. ( dbfAntCliT )->( dbRLock() )\n                     ( dbfAntCliT )->lSndDoc := .t.\n                     ( dbfAntCliT )->( dbUnlock() )\n                  end if\n                  ( dbfAntCliT )->( dbSkip() )\n               end while\n            end if\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n         if !Empty( ::oSender:oMtr )\n            ::oSender:oMtr:Set( ( dbfFacCliT )->( OrdKeyNo() ) )\n         end if\n\n      end do\n   end if\n\n   ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n\n   CLOSE ( dbfFacCliT )\n   CLOSE ( dbfFacCliL )\n   CLOSE ( dbfFacCliP )\n   CLOSE ( dbfFacCliI )\n   CLOSE ( dbfAntCliT )\n   CLOSE ( tmpFacCliT )\n   CLOSE ( tmpFacCliL )\n   CLOSE ( tmpFacCliP )\n   CLOSE ( tmpFacCliI )\n\n   if lSndFacCli\n\n     /*\n     Comprimir los archivos---------------------------------------------------\n     */\n\n      ::oSender:SetText( \"Comprimiendo facturas de clientes\" )\n\n      if ::oSender:lZipData( cFileNameFacturas )\n         ::oSender:SetText( \"Ficheros comprimidos\" )\n      else\n         ::oSender:SetText( \"ERROR al crear fichero comprimido\" )\n      end if\n\n\n   else\n\n      ::oSender:SetText( \"No hay facturas de clientes para enviar\" )\n\n   end if\n\n   /*\n   Anticipos de clientes-------------------------------------------------------\n   */\n\n   ::oSender:SetText( \"Enviando anticipos de clientes\" )\n\n   /*\n   Creamos todas las bases de datos relacionadas con Articulos\n   */\n\n   mkAntCli( cPatSnd() )\n\n   /*\n   Abrimos las tablas----------------------------------------------------------\n   */\n\n   USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n   SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @tmpAntCliT ) )\n   SET ADSINDEX TO ( cPatSnd() + \"AntCliT.CDX\" ) ADDITIVE\n\n   if !Empty( ::oSender:oMtr )\n      ::oSender:oMtr:nTotal  := ( dbfAntCliT )->( LastRec() )\n   end if\n\n   while !( dbfAntCliT )->( eof() )\n\n      if ( dbfAntCliT )->lSndDoc\n         lSndAntCli        := .t.\n         dbPass( dbfAntCliT, tmpAntCliT, .t. )\n         ::oSender:SetText( ( dbfAntCliT )->cSerAnt + \"/\" + AllTRim( Str( ( dbfAntCliT )->nNumAnt ) ) + \"/\" + AllTrim( ( dbfAntCliT )->cSufAnt ) + \"; \" + Dtoc( ( dbfAntCliT )->dFecAnt ) + \"; \" + AllTrim( ( dbfAntCliT )->cCodCli ) + \"; \" + ( dbfAntCliT )->cNomCli )\n      end if\n\n      ( dbfAntCliT )->( dbSkip() )\n\n      if !Empty( ::oSender:oMtr )\n         ::oSender:oMtr:Set( ( dbfAntCliT )->( OrdKeyNo() ) )\n      end if\n\n   end do\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible abrir todas las bases de datos \" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   CLOSE ( dbfAntCliT )\n   CLOSE ( tmpAntCliT )\n\n   if lSndAntCli\n\n      /*\n      Comprimir los archivos---------------------------------------------------\n      */\n\n      ::oSender:SetText( \"Comprimiendo anticipos de clientes\" )\n\n      if ::oSender:lZipData( cFileNameAnticipos )\n         ::oSender:SetText( \"Ficheros comprimidos\" )\n      else\n         ::oSender:SetText( \"ERROR al crear fichero comprimido\" )\n      end if\n\n   else\n\n      ::oSender:SetText( \"No hay anticipos para enviar\" )\n\n   end if\n\nReturn ( Self )\n\n//----------------------------------------------------------------------------//\n\nMethod RestoreData()\n\n   local oBlock\n   local oError\n   local dbfFacCliT\n   local dbfAntCliT\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   if ::lSuccesfullSendFacturas\n\n      USE ( cPatEmp() + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliT\", @dbfFacCliT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FacCliT.CDX\" ) ADDITIVE\n\n      ( dbfFacCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n      while ( dbfFacCliT )->( dbSeek( .t. ) ) .and. !( dbfFacCliT )->( eof() )\n         if ( dbfFacCliT )->( dbRLock() )\n            ( dbfFacCliT )->lSndDoc := .f.\n            ( dbfFacCliT )->( dbRUnlock() )\n         end if\n      end do\n\n      CLOSE ( dbfFacCliT )\n\n   end if\n\n   if ::lSuccesfullSendAnticipos\n\n      USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n      ( dbfAntCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n      while ( dbfAntCliT )->( dbSeek( .t. ) ) .and. !( dbfAntCliT )->( eof() )\n         if ( dbfAntCliT )->( dbRLock() )\n            ( dbfAntCliT )->lSndDoc := .f.\n            ( dbfAntCliT )->( dbRUnlock() )\n         end if\n      end do\n\n      CLOSE ( dbfAntCliT )\n\n   end if\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible abrir todas las bases de datos \" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\nReturn ( Self )\n\n//----------------------------------------------------------------------------//\n\nMethod SendData()\n\n   local cFileNameFacturas\n   local cFileNameAnticipos\n\n   if ::oSender:lServer\n      cFileNameFacturas       := \"FacCli\" + StrZero( ::nGetFacturaNumberToSend(), 6 ) + \".All\"\n      cFileNameAnticipos      := \"AntCli\" + StrZero( ::nGetAnticipoNumberToSend(), 6 ) + \".All\"\n   else\n      cFileNameFacturas       := \"FacCli\" + StrZero( ::nGetFacturaNumberToSend(), 6 ) + \".\" + RetSufEmp()\n      cFileNameAnticipos      := \"AntCli\" + StrZero( ::nGetAnticipoNumberToSend(), 6 ) + \".\" + RetSufEmp()\n   end if\n\n   ::lSuccesfullSendFacturas  := .f.\n   ::lSuccesfullSendAnticipos := .f.\n\n   /*\n   Enviarlos a internet--------------------------------------------------------\n   */\n\n   if File( cPatOut() + cFileNameFacturas )\n\n      if ftpSndFile( cPatOut() + cFileNameFacturas, cFileNameFacturas, 2000, ::oSender )\n         ::lSuccesfullSendFacturas  := .t.\n         ::oSender:SetText( \"Fichero facturas de clientes enviados \" + cFileNameFacturas )\n      else\n         ::oSender:SetText( \"ERROR al enviar fichero de facturas de clientes\" )\n      end if\n\n   end if\n\n   /*\n   Enviarlos a internet--------------------------------------------------------\n   */\n\n   if File( cPatOut() + cFileNameAnticipos )\n\n      if ftpSndFile( cPatOut() + cFileNameAnticipos, cFileNameAnticipos, 2000, ::oSender )\n         ::lSuccesfullSendAnticipos := .t.\n         ::oSender:SetText( \"Fichero anticipos de clientes enviados \" + cFileNameAnticipos )\n      else\n         ::oSender:SetText( \"ERROR al enviar fichero de anticipos de clientes\" )\n      end if\n\n   end if\n\n   if ::lSuccesfullSendFacturas\n      ::IncFacturaNumberToSend()\n   end if\n\n   if ::lSuccesfullSendAnticipos\n      ::IncAnticipoNumberToSend()\n   end if\n\nReturn ( Self )\n\n//----------------------------------------------------------------------------//\n\nMethod ReciveData()\n\n   local n\n   local aExt\n\n   if ::oSender:lServer\n      aExt  := aRetDlgEmp()\n   else\n      aExt  := { \"All\" }\n   end if\n\n   /*\n   Recibirlo de internet\n   */\n\n   ::oSender:SetText( \"Recibiendo facturas y anticipos de clientes\" )\n\n   for n := 1 to len( aExt )\n      ftpGetFiles( \"FacCli*.\" + aExt[ n ], cPatIn(), 2000, ::oSender )\n      ftpGetFiles( \"AntCli*.\" + aExt[ n ], cPatIn(), 2000, ::oSender )\n   next\n\n   ::oSender:SetText( \"Facturas y anticipos de clientes recibidos\" )\n\nReturn Self\n\n//----------------------------------------------------------------------------//\n\nMethod Process()\n\n   local m\n   local oStock\n   local dbfFacCliT\n   local dbfFacCliL\n   local dbfFacCliP\n   local dbfAntCliT\n   local tmpFacCliT\n   local tmpFacCliL\n   local tmpFacCliP\n   local tmpAntCliT\n   local oBlock\n   local oError\n   local lClient     := ::oSender:lServer\n   local aFiles      := Directory( cPatIn() + \"FacCli*.*\" )\n\n   for m := 1 to len( aFiles )\n\n      ::oSender:SetText( \"Procesando fichero : \" + aFiles[ m, 1 ] )\n\n      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n      BEGIN SEQUENCE\n\n      /*\n      descomprimimos el fichero\n      */\n\n      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )\n\n         /*\n         Ficheros temporales\n         */\n\n         if file( cPatSnd() + \"FacCliT.Dbf\" ) .and.;\n            file( cPatSnd() + \"FacCliL.Dbf\" ) .and.;\n            file( cPatSnd() + \"FacCliP.Dbf\" )\n\n            USE ( cPatSnd() + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) READONLY ALIAS ( cCheckArea( \"FacCliT\", @tmpFacCliT ) )\n            SET ADSINDEX TO ( cPatSnd() + \"FacCliT.CDX\" ) ADDITIVE\n\n            USE ( cPatSnd() + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) READONLY ALIAS ( cCheckArea( \"FacCliL\", @tmpFacCliL ) )\n            SET ADSINDEX TO ( cPatSnd() + \"FacCliL.CDX\" ) ADDITIVE\n\n            USE ( cPatSnd() + \"FacCliP.DBF\" ) NEW VIA ( cDriver() ) READONLY ALIAS ( cCheckArea( \"FacCliP\", @tmpFacCliP ) )\n            SET ADSINDEX TO ( cPatSnd() + \"FacCliP.CDX\" ) ADDITIVE\n\n            USE ( cPatEmp() + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliT\", @dbfFacCliT ) )\n            SET ADSINDEX TO ( cPatEmp() + \"FacCliT.CDX\" ) ADDITIVE\n\n            USE ( cPatEmp() + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliL\", @dbfFacCliL ) )\n            SET ADSINDEX TO ( cPatEmp() + \"FacCliL.CDX\" ) ADDITIVE\n\n            USE ( cPatEmp() + \"FacCliP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliP\", @dbfFacCliP ) )\n            SET ADSINDEX TO ( cPatEmp() + \"FacCliP.CDX\" ) ADDITIVE\n\n            USE ( cPatCli() + \"CLIENT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIENT\", @dbfClient ) )\n            SET ADSINDEX TO ( cPatCli() + \"CLIENT.CDX\" ) ADDITIVE\n\n            USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n            SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n\n            while ( tmpFacCliT )->( !eof() )\n\n               /*\n               Comprobamos que no exista la factura en la base de datos\n               */\n\n               if lValidaOperacion( ( tmpFacCliT )->dFecFac, .f. ) .and. ;\n                  !( dbfFacCliT )->( dbSeek( ( tmpFacCliT )->cSerie + Str( ( tmpFacCliT )->nNumFac ) + ( tmpFacCliT )->cSufFac ) )\n\n                  dbPass( tmpFacCliT, dbfFacCliT, .t. )\n\n                  if lClient .and. dbLock( dbfFacCliT )\n                     ( dbfFacCliT )->lSndDoc := .f.\n                     ( dbfFacCliT )->( dbUnLock() )\n                  end if\n\n                  ::oSender:SetText( \"Añadida factura     : \" + ( tmpFacCliL )->cSerie + \"/\" + AllTrim( Str( ( tmpFacCliL )->nNumFac ) ) + \"/\" +  AllTrim( ( tmpFacCliL )->cSufFac ) + \"; \" + Dtoc( ( tmpFacCliT )->dFecFac ) + \"; \" + AllTrim( ( tmpFacCliT )->cCodCli ) + \"; \" + ( tmpFacCliT )->cNomCli )\n\n                  if ( tmpFacCliL )->( dbSeek( ( tmpFacCliT )->cSerie + Str( ( tmpFacCliT )->nNumFac ) + ( tmpFacCliT )->cSufFac ) )\n                     while ( tmpFacCliL )->cSerie + Str( ( tmpFacCliL )->nNumFac ) + ( tmpFacCliL )->cSufFac == ( tmpFacCliT )->cSerie + Str( ( tmpFacCliT )->nNumFac ) + ( tmpFacCliT )->cSufFac .and. !( tmpFacCliL )->( eof() )\n                        dbPass( tmpFacCliL, dbfFacCliL, .t. )\n                        ( tmpFacCliL )->( dbSkip() )\n                     end do\n                  end if\n\n               else\n\n                  ::oSender:SetText( \"Desestimada factura : \" + ( tmpFacCliL )->cSerie + \"/\" + AllTrim( Str( ( tmpFacCliL )->nNumFac ) ) + \"/\" +  AllTrim( ( tmpFacCliL )->cSufFac ) + \"; \" + Dtoc( ( tmpFacCliT )->dFecFac ) + \"; \" + AllTrim( ( tmpFacCliT )->cCodCli ) + \"; \" + ( tmpFacCliT )->cNomCli )\n\n               end if\n\n               ( tmpFacCliT )->( dbSkip() )\n\n            end do\n\n            /*\n            Ahora trabajamos sobre los recibos\n            */\n\n            while ( tmpFacCliP )->( !eof() )\n\n               if !( dbfFacCliP )->( dbSeek( ( tmpFacCliP )->cSerie + Str( ( tmpFacCliP )->nNumFac ) + ( tmpFacCliP )->cSufFac + Str( ( tmpFacCliP )->nNumRec ) ) )\n\n                  dbPass( tmpFacCliP, dbfFacCliP, .t. )\n                  ::oSender:SetText( \"Añadido recibo     : \" + ( tmpFacCliP )->cSerie + \"/\" + AllTrim( Str( ( tmpFacCliP )->nNumFac ) ) + \"/\" +  AllTrim( ( tmpFacCliP )->cSufFac ) + \"-\" + Str( ( tmpFacCliP )->nNumRec ) + \"; \" + Dtoc( ( tmpFacCliP )->dEntrada ) + \"; \" + AllTrim( ( tmpFacCliP )->cCodCli ) + \"; \" + RetClient( ( tmpFacCliP )->cCodCli, dbfClient ) )\n\n               else\n\n                  ::oSender:SetText( \"Desestimado recibo : \" + ( tmpFacCliP )->cSerie + \"/\" + AllTrim( Str( ( tmpFacCliP )->nNumFac ) ) + \"/\" +  AllTrim( ( tmpFacCliP )->cSufFac ) + \"-\" + Str( ( tmpFacCliP )->nNumRec ) + \"; \" + Dtoc( ( tmpFacCliP )->dEntrada ) + \"; \" + AllTrim( ( tmpFacCliP )->cCodCli ) + \"; \" + RetClient( ( tmpFacCliP )->cCodCli, dbfClient ) )\n\n               end if\n\n               SysRefresh()\n\n               ( tmpFacCliP )->( dbSkip() )\n\n            end do\n\n            CLOSE ( dbfFacCliT )\n            CLOSE ( dbfFacCliL )\n            CLOSE ( dbfFacCliP )\n            CLOSE ( tmpFacCliT )\n            CLOSE ( tmpFacCliL )\n            CLOSE ( tmpFacCliP )\n\n            ::oSender:AppendFileRecive( aFiles[ m, 1 ] )\n\n         else\n\n            ::oSender:SetText( \"Faltan ficheros\" )\n\n            if !file( cPatSnd() + \"FacCliT.Dbf\" )\n               ::oSender:SetText( \"Falta\" + cPatSnd() + \"FacCliT.Dbf\" )\n            end if\n\n            if !file( cPatSnd() + \"FacCliL.Dbf\" )\n               ::oSender:SetText( \"Falta\" + cPatSnd() + \"FacCliL.Dbf\" )\n            end if\n\n            if !file( cPatSnd() + \"FacCliP.Dbf\" )\n               ::oSender:SetText( \"Falta\" + cPatSnd() + \"FacCliP.Dbf\" )\n            end if\n\n         end if\n\n      else\n\n         ::oSender:SetText( \"Error al descomprimir fichero \" + cPatIn() + aFiles[ m, 1 ] )\n\n      end if\n\n      RECOVER USING oError\n\n         CLOSE ( dbfFacCliT )\n         CLOSE ( dbfFacCliL )\n         CLOSE ( dbfFacCliP )\n         CLOSE ( tmpFacCliT )\n         CLOSE ( tmpFacCliL )\n         CLOSE ( tmpFacCliP )\n\n         ::oSender:SetText( \"Error procesando fichero \" + aFiles[ m, 1 ] )\n         ::oSender:SetText( ErrorMessage( oError ) )\n\n      END SEQUENCE\n\n      ErrorBlock( oBlock )\n\n   next\n\n   /*\n   Anticipos de clientes-------------------------------------------------------\n   */\n\n   ::oSender:SetText( \"Recibiendo anticipos de clientes\" )\n\n   aFiles            := Directory( cPatIn() + \"AntCli*.*\" )\n\n   for m := 1 to len( aFiles )\n\n      ::oSender:SetText( \"Procesando fichero : \" + aFiles[ m, 1 ] )\n\n      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n\n      BEGIN SEQUENCE\n\n         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )\n\n            /*\n            Ficheros temporales\n            */\n\n            if file( cPatSnd() + \"AntCliT.DBF\" )\n\n               USE ( cPatSnd() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() )READONLY ALIAS ( cCheckArea( \"AntCliT\", @tmpAntCliT ) )\n               SET ADSINDEX TO ( cPatSnd() + \"AntCliT.CDX\" ) ADDITIVE\n\n               USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n               SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n\n               while ( tmpAntCliT )->( !eof() )\n\n                  /*\n                  Comprobamos que no exista el Facido en la base de datos\n                  */\n\n                  if !( dbfAntCliT )->( dbSeek( ( tmpAntCliT )->CSERANT + Str( ( tmpAntCliT )->NNUMANT ) + ( tmpAntCliT )->CSUFANT ) )\n                     dbPass( tmpAntCliT, dbfAntCliT, .t. )\n\n                     if lClient .and. dbLock( dbfAntCliT )\n                        ( dbfAntCliT )->lSndDoc := .f.\n                        ( dbfAntCliT )->( dbUnLock() )\n                     end if\n\n                     ::oSender:SetText( \"Añadido     : \" + ( tmpAntCliT )->cSerAnt + \"/\" + AllTrim( Str( ( tmpAntCliT )->NNUMANT ) ) + \"/\" + AllTrim( ( tmpAntCliT )->CSUFANT ) + \"; \" + Dtoc( ( tmpAntCliT )->DFECANT ) + \"; \" + Alltrim( ( tmpAntCliT )->cCodCli ) + \"; \" + ( tmpAntCliT )->cNomCli )\n                  else\n                     if dbLock( dbfAntCliT )\n                        ( dbfAntCliT )->lLiquidada := ( tmpAntCliT )->lLiquidada\n                        ( dbfAntCliT )->dLiquidada := ( tmpAntCliT )->dLiquidada\n                        ( dbfAntCliT )->cNumDoc    := ( tmpAntCliT )->cNumDoc\n                        ( dbfAntCliT )->( dbUnLock() )\n                     end if\n\n                     ::oSender:SetText( \"Actualizado : \" + ( tmpAntCliT )->cSerAnt + \"/\" + AllTrim( Str( ( tmpAntCliT )->NNUMANT ) ) + \"/\" + AllTrim( ( tmpAntCliT )->CSUFANT ) + \"; \" + Dtoc( ( tmpAntCliT )->DFECANT ) + \"; \" + Alltrim( ( tmpAntCliT )->cCodCli ) + \"; \" + ( tmpAntCliT )->cNomCli )\n                  end if\n\n                  SysRefresh()\n\n                  ( tmpAntCliT )->( dbSkip() )\n\n               end do\n\n               CLOSE ( dbfAntCliT )\n               CLOSE ( tmpAntCliT )\n\n               ::oSender:AppendFileRecive( aFiles[ m, 1 ] )\n\n            else\n\n               ::oSender:SetText( \"Falta \" + cPatSnd() + \"AntCliT.Dbf\" )\n\n            end if\n\n         else\n\n               ::oSender:SetText( \"Error al descomprimir fichero \" + cPatIn() + aFiles[ m, 1 ] )\n\n         end if\n\n      RECOVER USING oError\n\n         ::oSender:SetText( \"Error procesando fichero \" + aFiles[ m, 1 ] )\n         ::oSender:SetText( ErrorMessage( oError ) )\n\n      END SEQUENCE\n\n      ErrorBlock( oBlock )\n\n   next\n\nReturn Self\n\n//----------------------------------------------------------------------------//\n//\n// Devuelve el numero de unidades reservadas en facturas a clientes\n//\n\nfunction nTotRFacCli( cNumFac, dFecRes, cCodArt, cValPr1, cValPr2, cLote, dbfFacCliT, dbfFacCliL )\n\n   local nTot        := 0\n   local aStaFac     := aGetStatus( dbfFacCliT, .t. )\n   local aStaLin     := aGetStatus( dbfFacCliL, .f. )\n\n   DEFAULT cValPr1   := Space( 10 )\n   DEFAULT cValPr2   := Space( 10 )\n\n   ( dbfFacCliL )->( dbGoTop() )\n\n   if ( dbfFacCliL )->( dbSeek( cNumFac ) )\n      while ( dbfFacCliL )->cSerie + str( ( dbfFacCliL )->nNumFac, 9 ) + ( dbfFacCliL )->cSufFac == cNumFac .and. !( dbfFacCliL )->( eof() )\n         if ( dbfFacCliL )->cRef + ( dbfFacCliL )->cValPr1 + ( dbfFacCliL )->cValPr2 == cCodArt + cValPr1 + cValPr2\n            if Empty( dFecRes ) .or. dFecRes <= dFecFacCli( ( dbfFacCliL )->cSerFac + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT ) // Empty( dFecRes )\n               if ( dbfFacCliL )->cLote == cLote\n                  nTot  += nTotNFacCli( dbfFacCliL )\n               end if\n            end if\n         end if\n         ( dbfFacCliL )->( dbSkip() )\n      end while\n   end if\n\n   SetStatus( dbfFacCliT, aStaFac )\n   SetStatus( dbfFacCliL, aStaLin )\n\nreturn ( nTot )\n\n//---------------------------------------------------------------------------//\n\nfunction nUnidadesRecibidasFacCli( cNumPed, cCodArt, cCodPr1, cCodPr2, dbfFacCliL )\n\n   local nTot        := 0\n   local aStaLin     := aGetStatus( dbfFacCliL, .f. )\n\n   DEFAULT cCodPr1   := Space( 10 )\n   DEFAULT cCodPr2   := Space( 10 )\n\n   ( dbfFacCliL )->( OrdSetFocus( \"cNumPedRef\" ) )\n\n   if ( dbfFacCliL )->( dbSeek( cNumPed + cCodArt ) )\n      while ( dbfFacCliL )->cNumPed + ( dbfFacCliL )->cRef + ( dbfFacCliL )->cCodPr1 + ( dbfFacCliL )->cCodPr2 == cNumPed + cCodArt + cCodPr1 + cCodPr2 .and. !( dbfFacCliL )->( eof() )\n         nTot     += nTotNFacCli( dbfFacCliL )\n         ( dbfFacCliL )->( dbSkip() )\n      end while\n   end if\n\n   SetStatus( dbfFacCliL, aStaLin )\n\nreturn ( nTot )\n\n//---------------------------------------------------------------------------//\n\nStatic Function EdtRecMenu( aTmp, oDlg )\n\n   MENU oMenu\n\n      MENUITEM    \"&1. Rotor\"\n\n         MENU\n\n            if !lExternal\n\n            MENUITEM    \"&1. Visualizar presupuesto\";\n               MESSAGE  \"Visualiza el presupueso del que proviene\" ;\n               RESOURCE \"Notebook_User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CNUMPRE ] ), ZooPreCli( aTmp[ _CNUMPRE ] ), MsgStop( \"No hay presupusto asociado\" ) ) )\n\n            SEPARATOR\n\n            MENUITEM    \"&2. Visualizar pedido\";\n               MESSAGE  \"Visualiza el pedido del que proviene\" ;\n               RESOURCE \"Clipboard_Empty_User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CNUMPED ] ), ZooPedCli( aTmp[ _CNUMPED ] ), MsgStop( \"No hay pedido asociado\" ) ) );\n\n            SEPARATOR\n\n            MENUITEM    \"&3. Visualizar albarán\";\n               MESSAGE  \"Visualiza el albarán del que proviene\" ;\n               RESOURCE \"Document_Plain_User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CNUMALB ] ), ZooAlbCli( aTmp[ _CNUMALB ] ), MsgStop( \"No hay albarán asociado\" ) ) );\n\n            SEPARATOR\n\n            MENUITEM    \"&4. Generar anticipo\";\n               MESSAGE  \"Genera factura de anticipo\" ;\n               RESOURCE \"Document_Money2_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ), CreateAntCli( aTmp[ _CCODCLI ] ), msgStop(\"Debe seleccionar un cliente para hacer una factura de anticipo\" ) ) )\n\n            MENUITEM    \"&5. Modificar cliente\";\n               MESSAGE  \"Modifica la ficha del cliente\" ;\n               RESOURCE \"User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ), EdtCli( aTmp[ _CCODCLI ] ), MsgStop( \"Código de cliente vacío\" ) ) )\n\n            MENUITEM    \"&6. Informe de cliente\";\n               MESSAGE  \"Informe de cliente\" ;\n               RESOURCE \"Info16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ), InfCliente( aTmp[ _CCODCLI ] ), MsgStop( \"Código de cliente vacío\" ) ) );\n\n            MENUITEM    \"&7. Modificar obra\";\n               MESSAGE  \"Modifica ficha de la obra\" ;\n               RESOURCE \"Worker16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODOBR ] ), EdtObras( aTmp[ _CCODCLI ], aTmp[ _CCODOBR ], dbfObrasT ), MsgStop( \"Código de obra vacío\" ) ) );\n\n            SEPARATOR\n\n            end if\n\n            MENUITEM    \"&8. Informe del documento\";\n               MESSAGE  \"Informe del documento\" ;\n               RESOURCE \"Info16\" ;\n               ACTION   ( TTrazaDocumento():Activate( FAC_CLI, aTmp[ _CSERIE ] + Str( aTmp[ _NNUMFAC ] ) + aTmp[ _CSUFFAC ] ) );\n\n         ENDMENU\n\n   ENDMENU\n\n   oDlg:SetMenu( oMenu )\n\nRETURN ( oMenu )\n\n//--------------------------------------------------------------------------//\n\nStatic Function nEstadoIncidencia( cNumFac )\n\n   local nEstado  := 0\n   local aBmp     := \"\"\n\n   if ( dbfFacCliI )->( dbSeek( cNumFac ) )\n\n      while ( dbfFacCliI )->cSerie + Str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac == cNumFac .and. !( dbfFacCliI )->( Eof() )\n\n         if ( dbfFacCliI )->lListo\n            do case\n               case nEstado == 0 .or. nEstado == 3\n                    nEstado := 3\n               case nEstado == 1\n                    nEstado := 2\n            end case\n         else\n            do case\n               case nEstado == 0\n                    nEstado := 1\n               case nEstado == 3\n                    nEstado := 2\n            end case\n         end if\n\n         ( dbfFacCliI )->( dbSkip() )\n\n      end while\n\n   end if\n\nReturn ( nEstado )\n\n//--------------------------------------------------------------------------//\n\n#ifndef __PDA__\n\nFUNCTION BrwFacCli( oGet, oIva )\n\n   local oDlg\n   local oBrw\n   local oGet1\n   local cGet1\n   local oCbxOrd\n   local cCbxOrd\n   local nOrd\n   local aCbxOrd\n\n   if !OpenFiles()\n      Return .f.\n   end if\n\n   aCbxOrd           := { \"Número\", \"Fecha\", \"Cliente\", \"Nombre\" }\n   nOrd              := GetBrwOpt( \"BrwFacCli\" )\n   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )\n   cCbxOrd           := aCbxOrd[ nOrd ]\n\n   DEFINE DIALOG oDlg RESOURCE \"HELPENTRY\" TITLE \"Facturas de clientes\"\n\n      REDEFINE GET oGet1 VAR cGet1;\n         ID       104 ;\n         ON CHANGE( AutoSeek( nKey, nFlags, Self, oBrw, dbfFacCliT, nil, nil, .f. ) );\n         VALID    ( OrdClearScope( oBrw, dbfFacCliT ) );\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n      REDEFINE COMBOBOX oCbxOrd ;\n         VAR      cCbxOrd ;\n         ID       102 ;\n         ITEMS    aCbxOrd ;\n         ON CHANGE( ( dbfFacCliT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() ) ;\n         OF       oDlg\n\n      oBrw                 := IXBrowse():New( oDlg )\n\n      oBrw:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrw:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrw:cAlias          := dbfFacCliT\n      oBrw:nMarqueeStyle   := 5\n      oBrw:cName           := \"Factura de cliente.Browse\"\n\n      oBrw:bLDblClick      := {|| oDlg:end( IDOK ) }\n\n      oBrw:CreateFromResource( 105 )\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := \"nNumFac\"\n         :bEditValue       := {|| ( dbfFacCliT )->cSerie + \"/\" + RTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Fecha\"\n         :cSortOrder       := \"dFecFac\"\n         :bEditValue       := {|| Dtoc( ( dbfFacCliT )->dFecFac ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Cliente\"\n         :cSortOrder       := \"cCodCli\"\n         :bEditValue       := {|| Rtrim( ( dbfFacCliT )->cCodCli ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Nombre\"\n         :cSortOrder       := \"cNomCli\"\n         :bEditValue       := {|| Rtrim( ( dbfFacCliT )->cNomCli ) }\n         :nWidth           := 180\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Importe\"\n         :bEditValue       := {|| nTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivEmp(), .t. ) }\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oDlg ;\n         WHEN     ( .f. ) ;\n         ACTION   ( nil )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oDlg ;\n         WHEN     ( .f. ) ;\n         ACTION   ( nil )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end() )\n\n   oDlg:AddFastKey( VK_F5, {|| oDlg:end( IDOK ) } )\n\n   ACTIVATE DIALOG oDlg ON INIT ( oBrw:Load() ) CENTER\n\n   if oDlg:nResult == IDOK\n\n      oGet:cText( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac )\n\n      oGet:bWhen   := {|| .f. }\n\n      if !Empty( oIva )\n         oIva:Click( ( dbfFacCliT )->lIvaInc ):Refresh()\n      end if\n\n   end if\n\n   SetBrwOpt( \"BrwFacCli\", ( dbfFacCliT )->( OrdNumber() ) )\n\n   ( dbfFacCliT )->( dbClearFilter() )\n\n   CloseFiles()\n\n   /*\n    Guardamos los datos del browse-------------------------------------------\n   */\n\n   oBrw:CloseData()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\n#endif\n\n//---------------------------------------------------------------------------//\n\nFunction AppFacCli( cCodCli, cCodArt, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_APPD ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli( nil, nil, cCodCli, cCodArt )\n         oWndBrw:RecAdd()\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n         nTotFacCli()\n         WinAppRec( nil, bEdtRec, dbfFacCliT, cCodCli, cCodArt )\n         CloseFiles()\n      end if\n\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\nFunction EdtFacCli( cNumFac, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_EDIT ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli()\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            oWndBrw:RecEdit()\n         else\n            MsgStop( \"No se encuentra factura\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            nTotFacCli()\n            WinEdtRec( nil, bEdtRec, dbfFacCliT )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION ZooFacCli( cNumFac, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_ZOOM ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli()\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            oWndBrw:RecZoom()\n         else\n            MsgStop( \"No se encuentra factura\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            nTotFacCli()\n            WinZooRec( nil, bEdtRec, dbfFacCliT )\n         end if\n         CloseFiles()\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION DelFacCli( cNumFac, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_DELE ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli()\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            WinDelRec( nil, dbfFacCliT, {|| QuiFacCli() } )\n         else\n            MsgStop( \"No se encuentra factura\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            nTotFacCli()\n            WinDelRec( nil, dbfFacCliT, {|| QuiFacCli() } )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION PrnFacCli( cNumFac, lOpenBrowse, cCaption, cFormato, cPrinter )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli()\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            GenFacCli( IS_PRINTER, cCaption, cFormato, cPrinter )\n         else\n            MsgStop( \"No se encuentra factura\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            GenFacCli( IS_PRINTER, cCaption, cFormato, cPrinter )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFUNCTION VisFacCli( cNumFac, lOpenBrowse, cCaption, cFormato, cPrinter )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if FactCli()\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            GenFacCli( IS_SCREEN, cCaption, cFormato, cPrinter )\n         else\n            MsgStop( \"No se encuentra factura\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( .t. )\n\n         if dbSeekInOrd( cNumFac, \"nNumFac\", dbfFacCliT )\n            GenFacCli( IS_SCREEN, cCaption, cFormato, cPrinter )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFunction ExcelIsra()\n\n   local n\n   local dFecFac     := \"\"\n   local nNumFac     := \"\"\n   local nImpFac     := 0\n   local oOleExcel\n   local cFileExcel  := cGetFile( \"Excel ( *.Xls ) | \" + \"*.Xls\", \"Seleccione la hoja de calculo\" )\n\n   if File( cFileExcel )\n\n      CreateWaitMeter( \"Importando de Excel\", \"Hoja para Servital\", 365 )\n\n      oOleExcel      := CreateObject( \"Excel.Application\" )\n\n      oOleExcel:Visible       := .f.\n      oOleExcel:DisplayAlerts := .f.\n      oOleExcel:WorkBooks:Open( cFileExcel )\n\n      oOleExcel:WorkSheets( 1 ):Activate()\n\n      for n := 1 to 365\n\n         dFecFac  := oOleExcel:ActiveSheet:Range( \"A\" + lTrim( Str( n ) ) ):Text\n         dFecFac  := Ctod( dFecFac )\n         nNumFac  := oOleExcel:ActiveSheet:Range( \"B\" + lTrim( Str( n ) ) ):Text\n         nNumFac  := Val( nNumFac )\n         nImpFac  := oOleExcel:ActiveSheet:Range( \"C\" + lTrim( Str( n ) ) ):Value\n\n         if !Empty( nNumFac )\n\n            if dbAppe( dbfFacCliT )\n               ( dbfFacCliT )->cSerie     := \"A\"\n               ( dbfFacCliT )->nNumFac    := nNumFac\n               ( dbfFacCliT )->cSufFac    := RetSufEmp()\n               ( dbfFacCliT )->lLiquidada := .t.\n               ( dbfFacCliT )->dFecFac    := dFecFac\n               ( dbfFacCliT )->cCodAlm    := oUser():cAlmacen()\n               ( dbfFacCliT )->cCodCaj    := oUser():cCaja()\n               ( dbfFacCliT )->cCodPago   := cDefFpg()\n               ( dbfFacCliT )->cDivFac    := cDivEmp()\n               ( dbfFacCliT )->nVdvFac    := nChgDiv( cDivEmp(), dbfDiv )\n               ( dbfFacCliT )->cCodUsr    := cCurUsr()\n               ( dbfFacCliT )->cTurFac    := cCurSesion()\n               ( dbfFacCliT )->( dbUnLock() )\n            end if\n\n            if dbAppe( dbfFacCliL )\n               ( dbfFacCliL )->cSerie     := \"A\"\n               ( dbfFacCliL )->nNumFac    := nNumFac\n               ( dbfFacCliL )->cSufFac    := RetSufEmp()\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := nImpFac\n               ( dbfFacCliL )->( dbUnLock() )\n            end if\n\n            if dbAppe( dbfFacCliP )\n               ( dbfFacCliP )->cSerie     := \"A\"\n               ( dbfFacCliP )->nNumFac    := nNumFac\n               ( dbfFacCliP )->cSufFac    := RetSufEmp()\n               ( dbfFacCliP )->nNumRec    := 1\n               ( dbfFacCliP )->lCobrado   := .t.\n               ( dbfFacCliP )->nImporte   := nImpFac\n               ( dbfFacCliP )->nImpCob    := nImpFac\n               ( dbfFacCliP )->cDescrip   := \"Recibo nº 1 de factura A/\" + AllTrim( Str( nNumFac ) ) + \"/\" + RetSufEmp()\n               ( dbfFacCliP )->cDivPgo    := cDivEmp()\n               ( dbfFacCliP )->nVdvPgo    := nChgDiv( cDivEmp(), dbfDiv )\n               ( dbfFacCliP )->dEntrada   := dFecFac\n               ( dbfFacCliP )->dPreCob    := dFecFac\n               ( dbfFacCliP )->( dbUnLock() )\n            end if\n\n         end if\n\n         RefreshWaitMeter( n )\n\n      next\n\n      oOleExcel:DisplayAlerts := .t.\n      oOleExcel:Quit()\n\n      EndWaitMeter()\n\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )\n\n   local oDlg\n   local oPuntos\n   local oValorPunto\n   local oDtoPnt\n   local oIncPnt\n   local oImporte\n   local nPuntos     := 0\n   local nValorPunto := 0\n   local nDtoPnt     := 0\n   local nIncPnt     := 0\n\n   /*comprobamos que no esté vacío el artículo*/\n\n   if Empty( cCodArt )\n      MsgInfo( \"Debe seleccinar un artículo\", \"Código vacío\" )\n      return .f.\n   end if\n\n   /*Cargamos valores por defecto*/\n\n   nPuntos           := aTmp[ _NPUNTOS ]\n   nValorPunto       := aTmp[ _NVALPNT ]\n   nDtoPnt           := aTmp[ _NDTOPNT ]\n   nIncPnt           := aTmp[ _NINCPNT ]\n\n   DEFINE DIALOG oDlg RESOURCE \"DESGPUNTOS\" TITLE \"Desglose de puntos\"\n\n   REDEFINE GET oPuntos VAR nPuntos ;\n      ID       200 ;\n      SPINNER ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  cPouDiv ;\n      OF       oDlg\n\n   REDEFINE GET oValorPunto VAR nValorPunto ;\n      ID       210 ;\n      SPINNER ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  cPouDiv ;\n      OF       oDlg\n\n   REDEFINE GET oDtoPnt VAR nDtoPnt ;\n      ID       220 ;\n      SPINNER ;\n      MIN      0 ;\n      MAX      100 ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  \"999.99\" ;\n      OF       oDlg\n\n   REDEFINE GET oIncPnt VAR nIncPnt ;\n      ID       230 ;\n      SPINNER ;\n      MIN      0 ;\n      MAX      100 ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  \"999.99\" ;\n      OF       oDlg\n\n   REDEFINE SAY oImporte PROMPT nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt ) ;\n      ID       240 ;\n      PICTURE  cPouDiv ;\n      OF       oDlg\n\n   REDEFINE BUTTON ;\n      ID       500 ;\n      OF       oDlg ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      ACTION   ( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( IDOK ) )\n\n   REDEFINE BUTTON ;\n      ID       550 ;\n      OF       oDlg ;\n      ACTION   ( oDlg:end() )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( IDOK ) } )\n   end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult == IDOK\n      aTmp[ _NPUNTOS ]     := nPuntos\n      aTmp[ _NVALPNT ]     := nValorPunto\n      aTmp[ _NDTOPNT ]     := nDtoPnt\n      aTmp[ _NINCPNT ]     := nIncPnt\n      oCosDiv:cText( oImporte:VarGet() )\n      oCosDiv:Refresh()\n   end if\n\nReturn ( .t. )\n\n//---------------------------------------------------------------------------//\n\nStatic Function FacCliNotas()\n\n   local cObserv  := \"\"\n   local aData    := {}\n\n   aAdd( aData, \"Factura \" + ( dbfFacCliT )->cSerie + \"/\" + AllTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + Alltrim( ( dbfFacCliT )->cSufFac ) + \" de \" + Rtrim( ( dbfFacCliT )->cNomCli ) )\n   aAdd( aData, FAC_CLI )\n   aAdd( aData, ( dbfFacCliT )->cCodCli )\n   aAdd( aData, ( dbfFacCliT )->cNomCli )\n   aAdd( aData, ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac )\n\n   if ( dbfClient )->( dbSeek( ( dbfFacCliT )->cCodCli ) )\n\n      if !Empty( ( dbfClient )->cPerCto )\n         cObserv  += Rtrim( ( dbfClient )->cPerCto ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Telefono )\n         cObserv  += \"Télefono : \" + Rtrim( ( dbfClient )->Telefono ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Movil )\n         cObserv  += \"Móvil : \" + Rtrim( ( dbfClient )->Movil ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Fax )\n         cObserv  += \"Fax : \" + Rtrim( ( dbfClient )->Fax ) + Space( 1 )\n      end if\n\n   end if\n\n   aAdd( aData, cObserv )\n\n   GenerarNotas( aData )\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n\n#ifdef __HARBOUR__\n\n/*Function FactCliDialog()\n\n   local oDlg\n   local oBrw\n   local nLevel\n   local oGetBuscar\n   local cGetBuscar     := Space( 100 )\n   local oCbxOrden\n   local cCbxOrden      := \"Número\"\n\n\n   nLevel               := nLevelUsr( _MENUITEM_ )\n   if nAnd( nLevel, 1 ) != 0\n      msgStop( \"Acceso no permitido.\" )\n      return .f.\n   end if\n\n   /*\n   Abrimos los ficheros--------------------------------------------------------\n   */\n\n   /*if !OpenFiles()\n      return .f.\n   end if\n\n   /*\n   Creamos el Shell------------------------------------------------------------\n   */\n\n   /*DEFINE DIALOG oDlg RESOURCE \"Dialog_Pda\"\n\n      REDEFINE GET oGetBuscar ;\n         VAR      cGetBuscar;\n         ID       100 ;\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n      oGetBuscar:bChange   := {| nKey, nFlags | AutoSeek( nKey, nFlags, oGetBuscar, oBrw, dbfFacCliT ) }\n\n      REDEFINE COMBOBOX oCbxOrden ;\n         VAR      cCbxOrden ;\n         ID       110 ;\n         ITEMS    { \"Número\", \"Fecha\", \"Código\", \"Nombre\" } ;\n         OF       oDlg\n\n      oCbxOrden:bChange    := {|| ( dbfFacCliT )->( OrdSetFocus( oCbxOrden:nAt ) ), ( dbfFacCliT )->( dbGoTop() ), oBrw:Refresh(), oGetBuscar:SetFocus() }\n\n      REDEFINE IBROWSE oBrw;\n         FIELDS   aDbfBmp[ nChkPagFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliP ) ],;\n                  nEstadoIncidencia( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliI, aDbfBmp ),;\n                  (dbfFacCliT)->cSerie + \"/\" + AllTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac,;\n                  Dtoc( (dbfFacCliT)->dFecFac ),;\n                  (dbfFacCliT)->cCodCli,;\n                  (dbfFacCliT)->cNomCli,;\n                  (dbfFacCliT)->cCodAge,;\n                  (dbfFacCliT)->cCodRut,;\n                  (dbfFacCliT)->cCodAlm,;\n                  (dbfFacCliT)->cCodObr,;\n                  hBmpDiv( (dbfFacCliT)->cDivFac, dbfDiv, oBandera ),;\n                  nTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivEmp(), .t. );\n         HEAD     \"E\",;\n                  \"I\",;\n                  \"Número\",;\n                  \"Fecha\",;\n                  \"Código\",;\n                  \"Nombre\",;\n                  \"Agente\" ,;\n                  \"Ruta\" ,;\n                  \"Almacén\",;\n                  \"Obra\" ,;\n                  \"Div.\",;\n                  \"Importe \" + cDivEmp() ;\n         FIELDSIZES ;\n                  17,;\n                  17,;\n                  60,;\n                  60,;\n                  70,;\n                  150,;\n                  40,;\n                  40,;\n                  40,;\n                  40,;\n                  25,;\n                  100;\n         JUSTIFY  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .t. ;\n         ALIAS    ( dbfFacCliT ) ;\n         ID       200 ;\n         OF       oDlg\n\n   oBrw:cWndName        := \"Factura de cliente.PDA\"\n   oBrw:bLDblClick      := {|| WinEdtRec( oBrw, bEdtPda, dbfFacCliT ) }\n   oBrw:LoadData()\n\n   oDlg:Activate( , , , .t., , , {|| EditMenu( nLevel, oBrw, oDlg ) } )\n\n   CloseFiles()\n\n   oBrw:CloseData()\n\nRETURN ( nil )\n\n\n//---------------------------------------------------------------------------//\n\nStatic Function EditMenu( nLevel, oBrw, oDlg )\n\n   MENU oMenu\n\n      MENUITEM    \"Facturas\"\n\n      MENUITEM    \"&1. Edición\"\n\n         MENU\n\n            MENUITEM    \"&1. Añadir\";\n               ACTION   ( if( nAnd( nLevel, ACC_APPD ) != 0, WinAppRec( oBrw, bEdtPda, dbfFacCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&2. Modificar\";\n               ACTION   ( if( nAnd( nLevel, ACC_EDIT ) != 0, WinEdtRec( oBrw, bEdtPda, dbfFacCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&3. Eliminar\";\n               ACTION   ( if( nAnd( nLevel, ACC_DELE ) != 0, ( FacRecDel(), oBrw:Refresh() ),         MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&4. Zoom\";\n               ACTION   ( if( nAnd( nLevel, ACC_ZOOM ) != 0, WinZooRec( oBrw, bEdtPda, dbfFacCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&5. Generar nota\";\n               ACTION   ( if( nAnd( nLevel, ACC_ZOOM ) != 0, FacCliNotas(),                           MsgStop( \"Acceso no permitido\" ) ) );\n\n         ENDMENU\n\n      MENUITEM    \"&S. Salir\";\n         MESSAGE  \"Salir de la ventana actual\" ;\n         RESOURCE \"End\" ;\n         ACTION   ( oDlg:End() );\n\n   ENDMENU\n\n   oDlg:SetMenu( oMenu )\n\nReturn ( oMenu )*/\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupSerie( oWndBrw )\n\n   local oDlg\n   local oSerIni\n   local oSerFin\n   local oTxtDup\n   local nTxtDup     := 0\n   local nRecno      := ( dbfFacCliT )->( Recno() )\n   local nOrdAnt     := ( dbfFacCliT )->( OrdSetFocus( 1 ) )\n   local oDesde      := TDesdeHasta():Init( ( dbfFacCliT )->cSerie, ( dbfFacCliT )->nNumFac, ( dbfFacCliT )->cSufFac, GetSysDate() )\n   local lCancel     := .f.\n   local oBtnAceptar\n   local oBtnCancel\n   local oFecDoc\n   local cFecDoc     := GetSysDate()\n   local oActual\n   local lActual     := .f.\n\n   DEFINE DIALOG oDlg ;\n      RESOURCE \"DUPSERDOC\" ;\n      TITLE    \"Duplicar series de facturas\" ;\n      OF       oWndBrw\n\n   REDEFINE RADIO oDesde:nRadio ;\n      ID       90, 91 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR oDesde:cSerieInicio ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieInicio >= \"A\" .and. oDesde:cSerieInicio <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR oDesde:cSerieFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieFin >= \"A\" .and. oDesde:cSerieFin <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroInicio ;\n      ID       120 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroFin ;\n      ID       130 ;\n      PICTURE  \"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoInicio ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaInicio ;\n      ID       170 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaFin ;\n      ID       180 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE CHECKBOX oActual VAR lActual ;\n      ID       210 ;\n      OF       oDlg\n\n   REDEFINE GET oFecDoc VAR cFecDoc ;\n      ID       200 ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE BUTTON oBtnAceptar ;\n      ID       IDOK ;\n      OF       oDlg ;\n      ACTION   ( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, lActual, cFecDoc ) )\n\n   REDEFINE BUTTON oBtnCancel ;\n      ID       IDCANCEL ;\n      OF       oDlg ;\n      CANCEL ;\n      ACTION   ( lCancel := .t., oDlg:end() )\n\n   REDEFINE METER oTxtDup VAR nTxtDup ;\n      ID       160 ;\n      NOPERCENTAGE ;\n      TOTAL    ( dbfFacCliT )->( OrdKeyCount() ) ;\n      OF       oDlg\n\n      oDlg:AddFastKey( VK_F5, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, lActual, cFecDoc ) } )\n\n   ACTIVATE DIALOG oDlg CENTER VALID ( lCancel )\n\n   ( dbfFacCliT )->( dbGoTo( nRecNo ) )\n   ( dbfFacCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oWndBrw:SetFocus()\n   oWndBrw:Refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, lActual, cFecDoc )\n\n   local nOrd\n   local nDuplicados    := 0\n   local nProcesed      := 0\n\n   oBtnAceptar:Hide()\n   oBtnCancel:bAction   := {|| lCancel := .t. }\n\n   if oDesde:nRadio == 1\n\n      nOrd              := ( dbfFacCliT )->( OrdSetFocus( \"nNumFac\" ) )\n\n      ( dbfFacCliT )->( dbSeek( oDesde:cNumeroInicio(), .t. ) )\n\n      while !lCancel .and. ( dbfFacCliT )->( !eof() )\n\n         if ( dbfFacCliT )->cSerie  >= oDesde:cSerieInicio  .and.;\n            ( dbfFacCliT )->cSerie  <= oDesde:cSerieFin     .and.;\n            ( dbfFacCliT )->nNumFac >= oDesde:nNumeroInicio .and.;\n            ( dbfFacCliT )->nNumFac <= oDesde:nNumeroFin    .and.;\n            ( dbfFacCliT )->cSufFac >= oDesde:cSufijoInicio .and.;\n            ( dbfFacCliT )->cSufFac <= oDesde:cSufijoFin\n\n            ++nDuplicados\n\n            oTxtDup:cText  := \"Duplicando : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac\n\n            DupFactura( lActual, cFecDoc )\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n         ++nProcesed\n\n         oTxtDup:Set( nProcesed )\n\n      end do\n\n      ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n\n   else\n\n      nOrd              := ( dbfFacCliT )->( OrdSetFocus( \"dFecFac\" ) )\n\n      ( dbfFacCliT )->( dbSeek( oDesde:dFechaInicio, .t. ) )\n\n      while !lCancel .and. ( dbfFacCliT )->( !eof() )\n\n         if ( dbfFacCliT )->dFecFac >= oDesde:dFechaInicio  .and.;\n            ( dbfFacCliT )->dFecFac <= oDesde:dFechaFin\n\n            ++nDuplicados\n\n            oTxtDup:cText  := \"Duplicando : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac\n\n            DupFactura( lActual, cFecDoc )\n\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n         ++nProcesed\n\n         oTxtDup:Set( nProcesed )\n\n      end do\n\n      ( dbfFacCliT )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   lCancel              := .t.\n\n   oBtnAceptar:Show()\n\n   if lCancel\n      msgStop( \"Total de registros duplicados : \" + Str( nDuplicados ), \"Proceso cancelado\" )\n   else\n      msgInfo( \"Total de registros duplicados : \" + Str( nDuplicados ), \"Proceso finalizado\" )\n   end if\n\nRETURN ( oDlg:End() )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION FacRecDup( cDbf, xField1, xField2, xField3, lCab, lPag, lActual, cFecDoc )\n\n   local nRec           := ( cDbf )->( Recno() )\n   local aTabla         := {}\n   local nOrdAnt\n\n   DEFAULT lCab         := .f.\n   DEFAULT lPag         := .f.\n   DEFAULT lActual      := .f.\n\n   aTabla               := DBScatter( cDbf )\n   aTabla[ _CSERIE  ]   := xField1\n   aTabla[ _NNUMFAC ]   := xField2\n   aTabla[ _CSUFFAC ]   := xField3\n\n   if lCab\n\n      if !lActual\n         aTabla[ _DFECFAC  ]  := cFecDoc\n      end if\n\n      aTabla[ _CTURFAC     ]  := cCurSesion()\n      aTabla[ _CCODCAJ     ]  := oUser():cCaja()\n      aTabla[ _LCONTAB     ]  := .f.\n      aTabla[ _DFECENT     ]  := Ctod(\"\")\n      aTabla[ _LIMPALB     ]  := .f.\n      aTabla[ _CNUMALB     ]  := Space( 12 )\n      aTabla[ _CNUMPED     ]  := Space( 12 )\n      aTabla[ _CNUMPRE     ]  := Space( 12 )\n      aTabla[ _CABNFAC     ]  := Space( 12 )\n      aTabla[ _CANTFAC     ]  := Space( 12 )\n      aTabla[ _LSNDDOC     ]  := .t.\n      aTabla[ _CDOCORG     ]  := Space( 10 )\n      aTabla[ _LCLOFAC     ]  := .f.\n      aTabla[ _CCODUSR     ]  := cCurUsr()\n      aTabla[ _DFECCRE     ]  := GetSysDate()\n      aTabla[ _CTIMCRE     ]  := Time()\n      aTabla[ _LIMPRIMIDO  ]  := .f.\n      aTabla[ _DFECIMP     ]  := Ctod(\"\")\n      aTabla[ _CHORIMP     ]  := Space( 5 )\n      aTabla[ _CCODDLG     ]  := oUser():cDelegacion()\n\n      nOrdAnt                 := ( cDbf )->( OrdSetFocus( \"NNUMFAC\" ) )\n\n   end if\n\n   if lPag\n\n      if !lActual\n         aTabla[ ( dbfFacCliP )->( FieldPos( \"dPreCob\") )  ]      := cFecDoc\n         if aTabla[ ( dbfFacCliP )->( FieldPos( \"lCobrado\" ) ) ]\n            aTabla[ ( dbfFacCliP )->( FieldPos( \"dEntrada\" ) ) ]  := cFecDoc\n         else\n            aTabla[ ( dbfFacCliP )->( FieldPos( \"dEntrada\" ) ) ]  := Ctod(\"\")\n         end if\n      end if\n\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"cCodCaj\" ) )  ]  := oUser():cCaja()\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"cTurRec\" ) )  ]  := cCurSesion()\n\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"lConPgo\" ) )  ]  := .f.\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"lRecImp\" ) )  ]  := .f.\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"lRecDto\" ) )  ]  := .f.\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"dFecDto\" ) )  ]  := Ctod(\"\")\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"lCloPgo\" ) )  ]  := .f.\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"dFecImp\" ) )  ]  := Ctod(\"\")\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"cHorImp\" ) )  ]  := Space( 5 )\n      aTabla[ ( dbfFacCliP )->( FieldPos( \"dFecVto\" ) )  ]  := cFecDoc\n\n   end if\n\n   if dbLock( cDbf, .t. )\n      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )\n      ( cDbf )->( dbUnLock() )\n   end if\n\n   if lCab\n      ( cDbf )->( OrdSetFocus( nOrdAnt ) )\n   end if\n\n   ( cDbf )->( dbGoTo( nRec ) )\n\nRETURN ( .t. )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupFactura( lActual, cFecDoc )\n\n   local nNewNumFac  := 0\n\n   //Recogemos el nuevo numero de factura--------------------------------------\n\n   nNewNumFac  := nNewDoc( ( dbfFacCliT )->cSerie, dbfFacCliT, \"NFACCLI\", , dbfCount )\n\n   //Duplicamos las cabeceras--------------------------------------------------\n\n   FacRecDup( dbfFacCliT, ( dbfFacCliT )->cSerie, nNewNumFac, ( dbfFacCliT )->cSufFac, .t., .f., lActual, cFecDoc )\n\n   //Duplicamos las lineas del documento---------------------------------------\n\n   if ( dbfFacCliL )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n\n      while ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac == ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac .and. ;\n            !( dbfFacCliL )->( Eof() )\n\n            FacRecDup( dbfFacCliL, ( dbfFacCliT )->cSerie, nNewNumFac, ( dbfFacCliT )->cSufFac, .f., .f. )\n\n         ( dbfFacCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   //Duplicamos los pagos------------------------------------------------------\n\n   if ( dbfFacCliP )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n\n      while ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac == ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac .and. ;\n            !( dbfFacCliP )->( Eof() )\n\n            FacRecDup( dbfFacCliP, ( dbfFacCliT )->cSerie, nNewNumFac, ( dbfFacCliT )->cSufFac, .f., .t., lActual, cFecDoc )\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end while\n\n   end if\n\n   //Duplicamos los documentos-------------------------------------------------\n\n   if ( dbfFacCliD )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) )\n\n      while ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac == ( dbfFacCliD )->cSerie + Str( ( dbfFacCliD )->nNumFac ) + ( dbfFacCliD )->cSufFac .and. ;\n            !( dbfFacCliD )->( Eof() )\n\n            FacRecDup( dbfFacCliD, ( dbfFacCliT )->cSerie, nNewNumFac, ( dbfFacCliT )->cSufFac, .f., .t. )\n\n         ( dbfFacCliD )->( dbSkip() )\n\n      end while\n\n   end if\n\nRETURN ( .t. )\n\n//---------------------------------------------------------------------------//\n\n#endif\n\nSTATIC FUNCTION SetDialog( aGet, oSayDias, oSayGetRnt, oGetRnt )\n\n   if !Empty( oTipFac )\n\n      if oTipFac:nAt == 2\n         aGet[ _DFECENTR ]:Show()\n         aGet[ _DFECSAL  ]:Show()\n         oSayDias:Show()\n      else\n         aGet[ _DFECENTR ]:Hide()\n         aGet[ _DFECSAL  ]:Hide()\n         oSayDias:Hide()\n      end if\n\n      aGet[ _DFECENTR ]:Refresh()\n      aGet[ _DFECSAL  ]:Refresh()\n\n      oSayDias:Refresh()\n\n   end if\n\n   if !lAccArticulo() .or. oUser():lNotRentabilidad()\n\n      if !Empty( oSayGetRnt )\n         oSayGetRnt:Hide()\n      end if\n\n      if !Empty( oGetRnt )\n         oGetRnt:Hide()\n      end if\n\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION ValidaMedicion( aTmp, aGet )\n\n   local cNewUndMed  := aGet[ _CUNIDAD ]:VarGet\n\n   /*\n   Cargamos el codigo de las unidades---------------------------------\n   */\n\n   if ( Empty( cOldUndMed ) .or. cOldUndMed != cNewUndMed )\n\n      if oUndMedicion:oDbf:Seek( aTmp[ _CUNIDAD ] )\n\n         if oUndMedicion:oDbf:nDimension >= 1 .and. !Empty( oUndMedicion:oDbf:cTextoDim1 )\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( ( dbfArticulo )->nLngArt )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]  := ( dbfArticulo )->nLngArt\n            end if\n         else\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( 0 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n            else\n               aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]  := 0\n            end if\n         end if\n\n         if oUndMedicion:oDbf:nDimension >= 2 .and. !Empty( oUndMedicion:oDbf:cTextoDim2 )\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( ( dbfArticulo )->nAltArt )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]  := ( dbfArticulo )->nAltArt\n            end if\n         else\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( 0 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n            else\n                 aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]  := 0\n            end if\n         end if\n\n         if oUndMedicion:oDbf:nDimension >= 3 .and. !Empty( oUndMedicion:oDbf:cTextoDim3 )\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( ( dbfArticulo )->nAncArt )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]  := ( dbfArticulo )->nAncArt\n            end if\n         else\n            if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( 0 )\n               aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n            else\n               aTmp[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]  := 0\n            end if\n         end if\n\n      else\n\n         if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( 0 )\n         end if\n\n         if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( 0 )\n         end if\n\n         if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n            aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( 0 )\n         end if\n\n      end if\n\n      cOldUndMed := cNewUndMed\n\n   end if\n\nRETURN .t.\n\n//-----------------------------------------------------------------------------\n\nStatic Function ChangeTarifa( aTmp, aGet, aTmpFac )\n\n    local nPrePro  := 0\n\n   if !aTmp[ __LALQUILER ]\n\n      nPrePro     := nPrePro( aTmp[ _CREF ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ], aTmp[ _NTARLIN ], aTmpFac[ _LIVAINC ], dbfArtDiv, aTmpFac[ _CCODTAR ] )\n\n      if nPrePro == 0\n         nPrePro  := nRetPreArt( aTmp[ _NTARLIN ], aTmpFac[ _CDIVFAC ], aTmpFac[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n      end if\n\n      if nPrePro != 0\n         aGet[ _NPREUNIT ]:cText( nPrePro )\n      end if\n\n   else\n\n      aGet[ _NPREUNIT ]:cText( 0 )\n      aGet[ _NPREALQ  ]:cText( nPreAlq( aTmp[ _CREF ], aTmp[ _NTARLIN ], aTmpFac[ _LIVAINC ], dbfArticulo ) )\n\n   end if\n\nreturn .t.\n\n//-----------------------------------------------------------------------------\n\nFunction NewLineReport( oReport )\n\n   oReport:NewLine()\n\nReturn ( \"\" )\n\n//----------------------------------------------------------------------------//\n\nStatic Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )\n\n   local uValor   := oGetCod:VarGet()\n\n   if Empty( uValor )\n\n      oSayTrn:cText( \"\" )\n      oGetKgs:cText( 0 )\n\n   else\n\n      if oTrans:oDbf:SeekInOrd( uValor, \"cCodTrn\" )\n         oGetCod:cText( uValor )\n         oSayTrn:cText( oTrans:oDbf:cNomTrn )\n         oGetKgs:cText( oTrans:oDbf:nKgsTrn )\n      else\n         msgStop( \"Código de transportista no encontrado.\" )\n         Return .f.\n      end if\n\n   end if\n\n   RecalculaTotal( aTmp )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nfunction SynFacCli( cPath )\n\n   local oBlock\n   local oError\n   local nOrdAnt\n   local cCodFam\n   local aTotFac\n   local cCodTip\n   local cCodImp\n   local cNumSer\n   local aNumSer\n   local cNumPed \n   local aNumPed     := {}\n\n   DEFAULT cPath     := cPatEmp()\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      USE ( cPath + \"PedCliT.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"PedCliT\", @dbfPedCliT ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"PedCliT.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"PedCliL.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"PedCliL\", @dbfPedCliL ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"PedCliL.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"AlbCliL.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"AlbCliL\", @dbfAlbCliL ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"AlbCliL.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FacCliT\", @dbfFacCliT ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"FacCliT.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FacCliL\", @dbfFacCliL ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"FacCliL.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"FacCliS.Dbf\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FacCliS\", @dbfFacCliS ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"FacCliS.Cdx\" ) ADDITIVE\n\n      USE ( cPath + \"FacCliI.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FacCliI\", @dbfFacCliI ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"FacCliI.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"FacCliP.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FacCliP\", @dbfFacCliP ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"FacCliP.CDX\" ) ADDITIVE\n\n      USE ( cPath + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPath + \"AntCliT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"FAMILIAS.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"FAMILIAS\", @dbfFamilia ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPatArt() + \"FAMILIAS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTICULO.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"ARTICULO\", @dbfArticulo ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPatArt() + \"ARTICULO.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TIVA.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"TIVA\", @dbfIva ) ) SHARED\n      SET ADSINDEX TO ( cPatDat() + \"TIVA.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DIVISAS.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"DIVISAS\", @dbfDiv ) ) SHARED\n      SET ADSINDEX TO ( cPatDat() + \"DIVISAS.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"Client.DBF\" ) NEW VIA ( cDriver() ) ALIAS ( cCheckArea( \"Client\", @dbfClient ) ) EXCLUSIVE\n      SET ADSINDEX TO ( cPatCli() + \"Client.CDX\" ) ADDITIVE\n\n      oNewImp              := TNewImp():Create( cPath )\n      if !oNewImp:OpenFiles()\n         lOpenFiles        := .f.\n      end if\n\n      // Cabeceras ------------------------------------------------------------\n\n      ( dbfFacCliT )->( OrdSetFocus( 0 ) )\n      ( dbfFacCliT )->( dbGoTop() )\n\n      while !( dbfFacCliT )->( eof() )\n\n         if Empty( ( dbfFacCliT )->cSufFac )\n            ( dbfFacCliT )->cSufFac := \"00\"\n         end if\n\n         if Empty( ( dbfFacCliT )->cCodCaj )\n            ( dbfFacCliT )->cCodCaj := \"000\"\n         end if\n\n         if Empty( ( dbfFacCliT )->cNomCli ) .and. !Empty ( ( dbfFacCliT )->cCodCli )\n            ( dbfFacCliT )->cNomCli := RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"Titulo\" )\n         end if\n\n         if !Empty( ( dbfFacCliT )->cNumPed )\n            aAdd( aNumPed, ( dbfFacCliT )->cNumPed )\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n      end while\n\n      ( dbfFacCliT )->( OrdSetFocus( 1 ) )\n\n      // Pagos ----------------------------------------------------------------\n\n      ( dbfFacCliP )->( OrdSetFocus( 0 ) )\n      ( dbfFacCliP )->( dbGoTop() )\n\n      while !( dbfFacCliP )->( eof() )\n\n         if Empty( ( dbfFacCliP )->cSufFac )\n            ( dbfFacCliP )->cSufFac := \"00\"\n         end if\n\n         if Empty( ( dbfFacCliP )->cCodCaj )\n            ( dbfFacCliP )->cCodCaj := \"000\"\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end while\n\n      ( dbfFacCliP )->( OrdSetFocus( 1 ) )\n\n      // Lineas ---------------------------------------------------------------\n\n      ( dbfFacCliL )->( OrdSetFocus( 0 ) )\n      ( dbfFacCliL )->( dbGoTop() )\n\n      while !( dbfFacCliL )->( eof() )\n\n         if Empty( ( dbfFacCliL )->cSufFac )\n            ( dbfFacCliL )->cSufFac    := \"00\"\n         end if\n\n         if !Empty( ( dbfFacCliL )->cRef ) .and. Empty( ( dbfFacCliL )->nValImp )\n            cCodImp                    := RetFld( ( dbfFacCliL )->cRef, dbfArticulo, \"cCodImp\" )\n            if !Empty( cCodImp )\n               ( dbfFacCliL )->nValImp := oNewImp:nValImp( cCodImp )\n            end if\n         end if\n\n         if !Empty( ( dbfFacCliL )->cRef ) .and. Empty( ( dbfFacCliL )->nVolumen )\n            ( dbfFacCliL )->nVolumen   := RetFld( ( dbfFacCliL )->cRef, dbfArticulo, \"nVolumen\" )\n         end if\n\n         if Empty( ( dbfFacCliL )->cLote ) .and. !Empty( ( dbfFacCliL )->nLote )\n            ( dbfFacCliL )->cLote      := AllTrim( Str( ( dbfFacCliL )->nLote ) )\n         end if\n\n         if ( dbfFacCliL )->lIvaLin != ( dbfFacCliT )->lIvaInc\n            ( dbfFacCliL )->lIvaLin    := RetFld( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT, \"lIvaInc\" )\n         end if\n\n         if !Empty( ( dbfFacCliL )->cRef ) .and. Empty( ( dbfFacCliL )->cCodFam )\n            cCodFam                    := RetFamArt( ( dbfFacCliL )->cRef, dbfArticulo )\n            if !Empty( cCodFam )\n               ( dbfFacCliL )->cCodFam := cCodFam\n            end if\n         end if\n\n         if !Empty( ( dbfFacCliL )->cRef ) .and. Empty( ( dbfFacCliL )->cCodTip )\n            cCodTip                    := RetFld( ( dbfFacCliL )->cRef, dbfArticulo, \"cCodTip\" )\n            if !Empty( cCodTip )\n               ( dbfFacCliL )->cCodTip := cCodTip\n            end if\n         end if\n\n         if !Empty( ( dbfFacCliL )->cRef ) .and. !Empty( ( dbfFacCliL )->cCodFam )\n            cCodFam                    := cGruFam( ( dbfFacCliL )->cCodFam, dbfFamilia )\n            if !Empty( cCodFam )\n               ( dbfFacCliL )->cGrpFam := cCodFam\n            end if\n         end if\n\n         if Empty( ( dbfFacCliL )->nReq )\n            ( dbfFacCliL )->nReq       := nPReq( dbfIva, ( dbfFacCliL )->nIva )\n         end if\n\n         if Empty( ( dbfFacCliL )->cCodAge )\n            ( dbfFacCliL )->cCodAge    := RetFld( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT, \"cCodAge\" )\n         end if\n\n         if Empty( ( dbfFacCliL )->dFecFac )\n            ( dbfFacCliL )->dFecFac    := RetFld( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT, \"dFecFac\" )\n         end if\n\n         if !Empty( ( dbfFacCliL )->mNumSer )\n            aNumSer                    := hb_aTokens( ( dbfFacCliL )->mNumSer, \",\" )\n            for each cNumSer in aNumSer\n               ( dbfFacCliS )->( dbAppend() )\n               ( dbfFacCliS )->cSerFac := ( dbfFacCliL )->cSerie\n               ( dbfFacCliS )->nNumFac := ( dbfFacCliL )->nNumFac\n               ( dbfFacCliS )->cSufFac := ( dbfFacCliL )->cSufFac\n               ( dbfFacCliS )->cRef    := ( dbfFacCliL )->cRef\n               ( dbfFacCliS )->cAlmLin := ( dbfFacCliL )->cAlmLin\n               ( dbfFacCliS )->nNumLin := ( dbfFacCliL )->nNumLin\n               ( dbfFacCliS )->cNumSer := cNumSer\n            next\n            ( dbfFacCliL )->mNumSer    := \"\"\n         end if\n\n         ( dbfFacCliL )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n      ( dbfFacCliL )->( OrdSetFocus( 1 ) )\n\n      // Incidencias ----------------------------------------------------------\n\n      ( dbfFacCliI )->( OrdSetFocus( 0 ) )\n      ( dbfFacCliI )->( dbGoTop() )\n\n      while !( dbfFacCliI )->( eof() )\n\n         if Empty( ( dbfFacCliI )->cSufFac )\n            ( dbfFacCliI )->cSufFac := \"00\"\n         end if\n\n         ( dbfFacCliI )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n      ( dbfFacCliI )->( OrdSetFocus( 1 ) )\n\n      // Series ---------------------------------------------------------------\n\n      ( dbfFacCliS )->( OrdSetFocus( 0 ) )\n      ( dbfFacCliS )->( dbGoTop() )\n\n      while !( dbfFacCliS )->( eof() )\n\n         if Empty( ( dbfFacCliS )->cSufFac )\n            ( dbfFacCliS )->cSufFac := \"00\"\n         end if\n\n         if Empty( ( dbfFacCliS )->dFecFac )\n            ( dbfFacCliS )->dFecFac := RetFld( ( dbfFacCliS )->cSerFac + Str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac, dbfFacCliT, \"dFecFac\" )\n         end if\n\n         ( dbfFacCliS )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n      ( dbfFacCliS )->( OrdSetFocus( 1 ) )\n\n      /*\n      Rellenamos los campos de totales-----------------------------------------\n\n      ( dbfFacCliT )->( dbGoTop() )\n      while !( dbfFacCliT )->( eof() )\n\n\n         aTotFac           := aTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, ( dbfFacCliT )->cDivFac )\n\n         if ( dbfFacCliT )->nTotFac == 0\n            ( dbfFacCliT )->nTotNet := aTotFac[1]\n            ( dbfFacCliT )->nTotIva := aTotFac[2]\n            ( dbfFacCliT )->nTotReq := aTotFac[3]\n            ( dbfFacCliT )->nTotFac := aTotFac[4]\n         end if\n\n         if ( dbfFacCliT )->nTotLiq == 0\n            ( dbfFacCliT )->nTotLiq := aTotFac[13]\n            ( dbfFacCliT )->nTotPdt := aTotFac[4] - aTotFac[13]\n         end if\n\n         ( dbfFacCliT )->( dbSkip() )\n\n      end while\n      */\n\n      // Purgamos los datos----------------------------------------------------\n      \n      ( dbfFacCliL )->( dbGoTop() )\n      while !( dbfFacCliL )->( eof() )\n\n         if !( dbfFacCliT )->( dbSeek( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac ) )\n            ( dbfFacCliL )->( dbDelete() )\n         end if\n\n         ( dbfFacCliL )->( dbSkip() )\n\n      end while \n\n      ( dbfFacCliS )->( dbGoTop() )\n      while !( dbfFacCliS )->( eof() )\n\n         if !( dbfFacCliT )->( dbSeek( ( dbfFacCliS )->cSerFac + Str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac ) )\n            ( dbfFacCliS )->( dbDelete() )\n         end if\n\n         ( dbfFacCliS )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n      ( dbfFacCliI )->( dbGoTop() )\n      while !( dbfFacCliI )->( eof() )\n\n         if !( dbfFacCliT )->( dbSeek( ( dbfFacCliI )->cSerie + Str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac ) )\n            ( dbfFacCliI )->( dbDelete() )\n         end if\n\n         ( dbfFacCliI )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n      \n   RECOVER USING oError\n\n      msgStop( \"Imposible abrir todas las bases de datos de facturas de clientes.\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   CLOSE ( dbfFacCliT  )\n   CLOSE ( dbfFacCliL  )\n   CLOSE ( dbfFacCliS  )\n   CLOSE ( dbfFacCliI  )\n   CLOSE ( dbfFacCliP  )\n   CLOSE ( dbfFamilia  )\n   CLOSE ( dbfIva      )\n   CLOSE ( dbfArticulo )\n   CLOSE ( dbfDiv      )\n   CLOSE ( dbfAntCliT  )\n   CLOSE ( dbfClient   )\n   CLOSE ( dbfPedCliT  )\n   CLOSE ( dbfPedCliL  )\n   CLOSE ( dbfAlbCliL  )\n\n   if !Empty( oNewImp )\n      oNewImp:end()\n   end if\n\n   oNewImp     := nil\n\n   /*\n   Estado de los pedidos en stocks---------------------------------------------\n   */\n\n   if !Empty( aNumPed )\n\n      oStock   := TStock():Create( cPath )\n      if oStock:lOpenFiles()\n      \n         for each cNumPed in aNumPed\n            oStock:SetEstadoPedCli( cNumPed )\n         next \n\n      end if \n\n      if !Empty( oStock )\n         oStock:end()\n      end if\n\n      oStock   := nil\n\n   end if \n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nFunction mailing( cTo,cSubject )\n\n   local lSend\n\n   WITH OBJECT ( frReportManager():New() )\n      lSend := :SendMail( \"smtp.telefonica.net\", 25, \"watchdog$telefonica.net\" , \"watch01\", \"watchdog@telefonica.net\", \"manuel_calero_solis@hotmail.com\", \"Test mailing\", \"Company\" )\n      if lSend != \"\"\n         MsgStop( lSend )\n      end if\n   END OBJECT\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n\n#include \"FastRepH.ch\"\n\nStatic Function DataReport( oFr )\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   oFr:ClearDataSets()\n\n   oFr:SetWorkArea(     \"Facturas\", ( dbfFacCliT )->( Select() ), .f., { FR_RB_CURRENT, FR_RB_CURRENT, 0 } )\n   oFr:SetFieldAliases( \"Facturas\", cItemsToReport( aItmFacCli() ) )\n\n   oFr:SetWorkArea(     \"Lineas de facturas\", ( dbfFacCliL )->( Select() ) )\n   oFr:SetFieldAliases( \"Lineas de facturas\", cItemsToReport( aColFacCli() ) )\n\n   oFr:SetWorkArea(     \"Series de lineas de facturas\", ( dbfFacCliS )->( Select() ) )\n   oFr:SetFieldAliases( \"Series de lineas de facturas\", cItemsToReport( aSerFacCli() ) )\n\n   oFr:SetWorkArea(     \"Incidencias de facturas\", ( dbfFacCliI )->( Select() ) )\n   oFr:SetFieldAliases( \"Incidencias de facturas\", cItemsToReport( aIncFacCli() ) )\n\n   oFr:SetWorkArea(     \"Documentos de facturas\", ( dbfFacCliD )->( Select() ) )\n   oFr:SetFieldAliases( \"Documentos de facturas\", cItemsToReport( aFacCliDoc() ) )\n\n   oFr:SetWorkArea(     \"Empresa\", ( dbfEmp )->( Select() ) )\n   oFr:SetFieldAliases( \"Empresa\", cItemsToReport( aItmEmp() ) )\n\n   oFr:SetWorkArea(     \"Clientes\", ( dbfClient )->( Select() ) )\n   oFr:SetFieldAliases( \"Clientes\", cItemsToReport( aItmCli() ) )\n\n   oFr:SetWorkArea(     \"Obras\", ( dbfObrasT )->( Select() ) )\n   oFr:SetFieldAliases( \"Obras\",  cItemsToReport( aItmObr() ) )\n\n   oFr:SetWorkArea(     \"Almacenes\", ( dbfAlm )->( Select() ) )\n   oFr:SetFieldAliases( \"Almacenes\", cItemsToReport( aItmAlm() ) )\n\n   oFr:SetWorkArea(     \"Rutas\", ( dbfRuta )->( Select() ) )\n   oFr:SetFieldAliases( \"Rutas\", cItemsToReport( aItmRut() ) )\n\n   oFr:SetWorkArea(     \"Agentes\", ( dbfAgent )->( Select() ) )\n   oFr:SetFieldAliases( \"Agentes\", cItemsToReport( aItmAge() ) )\n\n   oFr:SetWorkArea(     \"Formas de pago\", ( dbfFpago )->( Select() ) )\n   oFr:SetFieldAliases( \"Formas de pago\", cItemsToReport( aItmFPago() ) )\n\n   oFr:SetWorkArea(     \"Transportistas\", oTrans:Select() )\n   oFr:SetFieldAliases( \"Transportistas\", cObjectsToReport( oTrans:oDbf ) )\n\n   oFr:SetWorkArea(     \"Artículos\", ( dbfArticulo )->( Select() ) )\n   oFr:SetFieldAliases( \"Artículos\", cItemsToReport( aItmArt() ) )\n\n   oFr:SetWorkArea(     \"Familias\", ( dbfFamilia )->( Select() ) )\n   oFr:SetFieldAliases( \"Familias\", cItemsToReport( aItmFam() ) )\n\n   oFr:SetWorkArea(     \"Tipo artículo\",  oTipArt:Select() )\n   oFr:SetFieldAliases( \"Tipo artículo\",  cObjectsToReport( oTipArt:oDbf ) )\n\n   oFr:SetWorkArea(     \"Tipo de venta\", ( dbfTVta )->( Select() ) )\n   oFr:SetFieldAliases( \"Tipo de venta\", cItemsToReport( aItmTVta() ) )\n\n   oFr:SetWorkArea(     \"Recibos\", ( dbfFacCliP )->( Select() ) )\n   oFr:SetFieldAliases( \"Recibos\", cItemsToReport( aItmRecCli() ) )\n\n   oFr:SetWorkArea(     \"Anticipos\", ( dbfAntCliT )->( Select() ) )\n   oFr:SetFieldAliases( \"Anticipos\", cItemsToReport( aItmAntCli() ) )\n\n   oFr:SetWorkArea(     \"Usuarios\", ( dbfUsr )->( Select() ) )\n   oFr:SetFieldAliases( \"Usuarios\", cItemsToReport( aItmUsr() ) )\n\n   oFr:SetWorkArea(     \"Ofertas\", ( dbfOferta )->( Select() ) )\n   oFr:SetFieldAliases( \"Ofertas\", cItemsToReport( aItmOfe() ) )\n\n   oFr:SetWorkArea(     \"Bancos\", ( dbfCliBnc )->( Select() ) )\n   oFr:SetFieldAliases( \"Bancos\", cItemsToReport( aCliBnc() ) )\n\n   oFr:SetWorkArea(     \"Unidades de medición\",  oUndMedicion:Select() )\n   oFr:SetFieldAliases( \"Unidades de medición\",  cObjectsToReport( oUndMedicion:oDbf ) )\n\n   oFr:SetWorkArea(     \"Clientes.Pais\", oPais:Select() )\n   oFr:SetFieldAliases( \"Clientes.Pais\", cObjectsToReport( oPais:oDbf ) )\n\n   oFr:SetMasterDetail( \"Facturas\", \"Lineas de facturas\",               {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Series de lineas de facturas\",     {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Incidencias de facturas\",          {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Documentos de facturas\",           {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Clientes\",                         {|| ( dbfFacCliT )->cCodCli } )\n   oFr:SetMasterDetail( \"Facturas\", \"Obras\",                            {|| ( dbfFacCliT )->cCodCli + ( dbfFacCliT )->cCodObr } )\n   oFr:SetMasterDetail( \"Facturas\", \"Almacenes\",                        {|| ( dbfFacCliT )->cCodAlm } )\n   oFr:SetMasterDetail( \"Facturas\", \"Rutas\",                            {|| ( dbfFacCliT )->cCodRut } )\n   oFr:SetMasterDetail( \"Facturas\", \"Agentes\",                          {|| ( dbfFacCliT )->cCodAge } )\n   oFr:SetMasterDetail( \"Facturas\", \"Formas de pago\",                   {|| ( dbfFacCliT )->cCodPago } )\n   oFr:SetMasterDetail( \"Facturas\", \"Transportistas\",                   {|| ( dbfFacCliT )->cCodTrn } )\n   oFr:SetMasterDetail( \"Facturas\", \"Empresa\",                          {|| cCodigoEmpresaEnUso() } )\n   oFr:SetMasterDetail( \"Facturas\", \"Recibos\",                          {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Anticipos\",                        {|| ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac } )\n   oFr:SetMasterDetail( \"Facturas\", \"Usuarios\",                         {|| ( dbfFacCliT )->cCodUsr } )\n   oFr:SetMasterDetail( \"Facturas\", \"Bancos\",                           {|| ( dbfFacCliT )->cCodCli } )\n\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Artículos\",              {|| ( dbfFacCliL )->cRef } )\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Familia\",                {|| ( dbfFacCliL )->cCodFam } )\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Tipo artículo\",          {|| ( dbfFacCliL )->cCodTip } )\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Tipo de venta\",          {|| ( dbfFacCliL )->cTipMov } )\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Ofertas\",                {|| ( dbfFacCliL )->cRef } )\n   oFr:SetMasterDetail( \"Lineas de facturas\", \"Unidades de medición\",   {|| ( dbfFacCliL )->cUnidad } )\n\n   oFr:SetMasterDetail( \"Clientes\", \"Clientes.Pais\",                     {|| ( dbfClient )->cCodPai } )\n\n   oFr:SetResyncPair(   \"Facturas\", \"Lineas de facturas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Series de lineas de facturas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Incidencias de facturas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Documentos de facturas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Empresa\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Clientes\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Obras\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Almacenes\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Rutas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Agentes\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Formas de pago\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Transportistas\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Recibos\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Anticipos\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Usuarios\" )\n   oFr:SetResyncPair(   \"Facturas\", \"Bancos\" )\n\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Artículos\" )\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Familia\" )\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Tipo artículo\" )\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Tipo de venta\" )\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Ofertas\" )\n   oFr:SetResyncPair(   \"Lineas de facturas\", \"Unidades de medición\" )\n\n   oFr:SetResyncPair(   \"Clientes\", \"Clientes.Pais\" )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function VariableReport( oFr )\n\n   oFr:DeleteCategory(  \"Facturas\" )\n   oFr:DeleteCategory(  \"Lineas de facturas\" )\n\n   /*\n   Creación de variables----------------------------------------------------\n   */\n\n   oFr:AddVariable(     \"Facturas\",             \"Total bruto\",                         \"GetHbVar('nTotBrt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total factura\",                       \"GetHbVar('nTotFac')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total factura texto\",                 \"CallHbFunc('cTotFacCli')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total descuento\",                     \"GetHbVar('nTotDto')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total descuento pronto pago\",         \"GetHbVar('nTotDpp')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total descuentos\",                    \"GetHbVar('nTotalDto')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total neto\",                          \"GetHbVar('nTotNet')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total primer descuento definible\",    \"GetHbVar('nTotUno')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total segundo descuento definible\",   \"GetHbVar('nTotDos')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total \" + cImp(),                    \"GetHbVar('nTotIva')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total RE\",                            \"GetHbVar('nTotReq')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total página\",                        \"GetHbVar('nTotPag')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total retención\",                     \"GetHbVar('nTotRet')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total peso\",                          \"GetHbVar('nTotPes')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total costo\",                         \"GetHbVar('nTotCos')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total anticipado\",                    \"GetHbVar('nTotAnt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total cobrado\",                       \"GetHbVar('nTotCob')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total artículos\",                     \"GetHbVar('nTotArt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total cajas\",                         \"GetHbVar('nTotCaj')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total punto verde\",                   \"GetHbVar('nTotPnt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total entrega inicial\",               \"GetHbVar('nTotEnt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total descuento por entrega inicial\", \"GetHbVar('nTotDtoEnt')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Cuenta por defecto del cliente\",      \"GetHbVar('cCtaCli')\" )\n\n   oFr:AddVariable(     \"Facturas\",             \"Bruto primer tipo de \" + cImp(),     \"GetHbArrayVar('aIvaUno',1)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Bruto segundo tipo de \" + cImp(),    \"GetHbArrayVar('aIvaDos',1)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Bruto tercer tipo de \" + cImp(),     \"GetHbArrayVar('aIvaTre',1)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Base primer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaUno',2)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Base segundo tipo de \" + cImp(),     \"GetHbArrayVar('aIvaDos',2)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Base tercer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaTre',2)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje primer tipo \" + cImp(),   \"GetHbArrayVar('aIvaUno',3)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje segundo tipo \" + cImp(),  \"GetHbArrayVar('aIvaDos',3)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje tercer tipo \" + cImp(),   \"GetHbArrayVar('aIvaTre',3)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje primer tipo RE\",           \"GetHbArrayVar('aIvaUno',4)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje segundo tipo RE\",          \"GetHbArrayVar('aIvaDos',4)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Porcentaje tercer tipo RE\",           \"GetHbArrayVar('aIvaTre',4)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe primer tipo \" + cImp(),      \"GetHbArrayVar('aIvaUno',8)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe segundo tipo \" + cImp(),     \"GetHbArrayVar('aIvaDos',8)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe tercer tipo \" + cImp(),      \"GetHbArrayVar('aIvaTre',8)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe primer RE\",                   \"GetHbArrayVar('aIvaUno',9)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe segundo RE\",                  \"GetHbArrayVar('aIvaDos',9)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe tercer RE\",                   \"GetHbArrayVar('aIvaTre',9)\" )\n\n   oFr:AddVariable(     \"Facturas\",             \"Total unidades primer tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmUno',1 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total unidades segundo tipo de impuestos especiales\",           \"GetHbArrayVar('aIvmDos',1 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total unidades tercer tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmTre',1 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del primer tipo de impuestos especiales\",               \"GetHbArrayVar('aIvmUno',2 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del segundo tipo de impuestos especiales\",              \"GetHbArrayVar('aIvmDos',2 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del tercer tipo de impuestos especiales\",               \"GetHbArrayVar('aIvmTre',2 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total importe primer tipo de impuestos especiales\",             \"GetHbArrayVar('aIvmUno',3 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total importe segundo tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmDos',3 )\" )\n   oFr:AddVariable(     \"Facturas\",             \"Total importe tercer tipo de impuestos especiales\",             \"GetHbArrayVar('aIvmTre',3 )\" )\n\n   oFr:AddVariable(     \"Facturas\",             \"Fecha del primer vencimiento\",        \"GetHbArrayVar('aDatVto',1)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Fecha del segundo vencimiento\",       \"GetHbArrayVar('aDatVto',2)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Fecha del tercer vencimiento\",        \"GetHbArrayVar('aDatVto',3)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Fecha del cuarto vencimiento\",        \"GetHbArrayVar('aDatVto',4)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Fecha del quinto vencimiento\",        \"GetHbArrayVar('aDatVto',5)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del primer vencimiento\",      \"GetHbArrayVar('aImpVto',1)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del segundo vencimiento\",     \"GetHbArrayVar('aImpVto',2)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del tercero vencimiento\",     \"GetHbArrayVar('aImpVto',3)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del cuarto vencimiento\",      \"GetHbArrayVar('aImpVto',4)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Importe del quinto vencimiento\",      \"GetHbArrayVar('aImpVto',5)\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo envase 16%\",                    \"CallHbFunc('nTotalSaldo16')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo envase 8%\",                     \"CallHbFunc('nTotalSaldo8')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo envase 4%\",                     \"CallHbFunc('nTotalSaldo4')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo actual envase 16%\",             \"CallHbFunc('nSaldoDoc16')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo actual envase 8%\",              \"CallHbFunc('nSaldoDoc8')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo actual envase 4%\",              \"CallHbFunc('nSaldoDoc4')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo anterior envase 16%\",           \"CallHbFunc('nSaldoAnt16')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo anterior envase 8%\",            \"CallHbFunc('nSaldoAnt8')\" )\n   oFr:AddVariable(     \"Facturas\",             \"Saldo anterior envase 4%\",            \"CallHbFunc('nSaldoAnt4')\" )\n\n   oFr:AddVariable(     \"Facturas\",             \"Cuenta bancaria cliente\",                         \"CallHbFunc('cCtaFacCli')\" )\n\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Detalle del artículo\",                            \"CallHbFunc('cDesFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total unidades artículo\",                         \"CallHbFunc('nTotNFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Precio unitario del artículo\",                    \"CallHbFunc('nTotUFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Precio unitario con descuentos\",                  \"CallHbFunc('nTotPFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Punto verde del artículo\",                        \"CallHbFunc('nPntUFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total línea de factura\",                          \"CallHbFunc('nTotLFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total peso por línea\",                            \"CallHbFunc('nPesLFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total final línea del factura\",                   \"CallHbFunc('nTotFFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Importe descuento línea del factura\",             \"CallHbFunc('nDtoLFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Importe impuestos especiales línea del factura\",  \"CallHbFunc('nTotIFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total descuento línea del factura\",               \"CallHbFunc('nTotDtoLFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Fecha en juliano\",                                \"CallHbFunc('dJulianoFacCli')\" )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Precio unitario sin \" + cImp(),                   \"CallHbFunc('nNoIncUFacCli')\"  )\n   oFr:AddVariable(     \"Lineas de facturas\",   \"Total linea sin \" + cImp(),                       \"CallHbFunc('nNoIncLFacCli')\"  )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\n#ifndef __PDA__\n\nFunction DesignReportFacCli( oFr, dbfDoc )\n\n   local lOpen    := .f.\n   local lFlag    := .f.\n   local nOrdAnt\n\n   /*\n   Tratamiento para no hacer dos veces el openfiles al editar el documento en imprimir series\n   */\n\n   if lOpenFiles\n      lFlag       := .t.\n   else\n      if Openfiles()\n         lFlag    := .t.\n         lOpen    := .t.\n      else\n         lFlag    := .f.\n      end if\n   end if\n\n   nOrdAnt        := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n\n   if lFlag\n\n      /*\n      Zona de datos------------------------------------------------------------\n      */\n\n      DataReport( oFr )\n\n      /*\n      Paginas y bandas---------------------------------------------------------\n      */\n\n      if !Empty( ( dbfDoc )->mReport )\n\n         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      else\n\n         oFr:SetProperty(     \"Report\",            \"ScriptLanguage\", \"PascalScript\" )\n         oFr:SetProperty(     \"Report.ScriptText\", \"Text\",;\n                                                   + ;\n                                                   \"procedure DetalleOnMasterDetail(Sender: TfrxComponent);\"   + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"CallHbFunc('nTotFacCli');\"                                 + Chr(13) + Chr(10) + ;\n                                                   \"end;\"                                                      + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"end.\" )\n\n         oFr:AddPage(         \"MainPage\" )\n\n         oFr:AddBand(         \"CabeceraDocumento\", \"MainPage\", frxPageHeader )\n         oFr:SetProperty(     \"CabeceraDocumento\", \"Top\", 0 )\n         oFr:SetProperty(     \"CabeceraDocumento\", \"Height\", 200 )\n\n         oFr:AddBand(         \"CabeceraColumnas\",  \"MainPage\", frxMasterData )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Top\", 200 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Height\", 0 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"StartNewPage\", .t. )\n         oFr:SetObjProperty(  \"CabeceraColumnas\",  \"DataSet\", \"Facturas\" )\n\n         oFr:AddBand(         \"DetalleColumnas\",   \"MainPage\", frxDetailData  )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"Top\", 230 )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"Height\", 28 )\n         oFr:SetObjProperty(  \"DetalleColumnas\",   \"DataSet\", \"Lineas de facturas\" )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"OnMasterDetail\", \"DetalleOnMasterDetail\" )\n\n         oFr:AddBand(         \"PieDocumento\",      \"MainPage\", frxPageFooter )\n         oFr:SetProperty(     \"PieDocumento\",      \"Top\", 930 )\n         oFr:SetProperty(     \"PieDocumento\",      \"Height\", 110 )\n\n      end if\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReport( oFr )\n\n      oFr:SetTabTreeExpanded( FR_tvAll, .f. )\n\n      /*\n      Diseño de report---------------------------------------------------------\n      */\n\n      oFr:DesignReport()\n\n      /*\n      Destruye el diseñador----------------------------------------------------\n      */\n\n      oFr:DestroyFr()\n\n      ( dbfAntCliT )->( OrdSetFocus( nOrdAnt ) )\n\n      /*\n      Cierra ficheros----------------------------------------------------------\n      */\n\n      if lOpen\n         CloseFiles()\n      end if\n\n   else\n\n      Return .f.\n\n   end if\n\nReturn .t.\n\n#endif\n\n//---------------------------------------------------------------------------//\n\nFunction PrintReportFacCli( nDevice, nCopies, cPrinter, dbfDoc )\n\n   local oFr\n   local nOrdAnt        := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n   local cFilePdf       := cPatTmp() + \"FacturasCliente\" + StrTran( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, \" \", \"\" ) + \".Pdf\"\n\n   DEFAULT nDevice      := IS_SCREEN\n   DEFAULT nCopies      := 1\n   DEFAULT cPrinter     := PrnGetName()\n\n   SysRefresh()\n\n   oFr                  := frReportManager():New()\n\n   oFr:LoadLangRes(     \"Spanish.Xml\" )\n\n   oFr:SetIcon( 1 )\n\n   oFr:SetTitle(        \"Diseñador de documentos\" )\n\n   /*\n   Manejador de eventos--------------------------------------------------------\n   */\n\n   oFr:SetEventHandler( \"Designer\", \"OnSaveReport\", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), \"mReport\" ) } )\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   DataReport( oFr )\n\n   /*\n   Cargar el informe-----------------------------------------------------------\n   */\n\n   if !Empty( ( dbfDoc )->mReport )\n\n      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReport( oFr )\n\n      /*\n      Preparar el report-------------------------------------------------------\n      */\n\n      oFr:PrepareReport()\n\n      /*\n      Imprimir el informe------------------------------------------------------\n      */\n\n      do case\n         case nDevice == IS_SCREEN\n\n            oFr:ShowPreparedReport()\n\n         case nDevice == IS_PRINTER\n\n            oFr:PrintOptions:SetPrinter( cPrinter )\n            oFr:PrintOptions:SetCopies( nCopies )\n            oFr:PrintOptions:SetShowDialog( .f. )\n            oFr:Print()\n\n         case nDevice == IS_PDF\n\n            oFr:SetProperty(  \"PDFExport\", \"ShowDialog\",       .f. )\n            oFr:SetProperty(  \"PDFExport\", \"DefaultPath\",      cPatTmp() )\n            oFr:SetProperty(  \"PDFExport\", \"FileName\",         cFilePdf )\n            oFr:SetProperty(  \"PDFExport\", \"EmbeddedFonts\",    .t. )\n            oFr:SetProperty(  \"PDFExport\", \"PrintOptimized\",   .t. )\n            oFr:SetProperty(  \"PDFExport\", \"Outline\",          .t. )\n            oFr:SetProperty(  \"PDFExport\", \"OpenAfterExport\",  .t. )\n            oFr:DoExport(     \"PDFExport\" )\n\n         case nDevice == IS_MAIL\n\n            oFr:SetProperty(  \"PDFExport\", \"ShowDialog\",       .f. )\n            oFr:SetProperty(  \"PDFExport\", \"DefaultPath\",      cPatTmp() )\n            oFr:SetProperty(  \"PDFExport\", \"FileName\",         cFilePdf )\n            oFr:SetProperty(  \"PDFExport\", \"EmbeddedFonts\",    .t. )\n            oFr:SetProperty(  \"PDFExport\", \"PrintOptimized\",   .t. )\n            oFr:SetProperty(  \"PDFExport\", \"Outline\",          .t. )\n            oFr:SetProperty(  \"PDFExport\", \"OpenAfterExport\",  .f. )\n            oFr:DoExport(     \"PDFExport\" )\n\n            if file( cFilePdf )\n\n               with object ( TGenMailing():New() )\n\n                  :SetTypeDocument( \"nFacCli\" )\n                  :SetDe(           uFieldEmpresa( \"cNombre\" ) )\n                  :SetCopia(        uFieldEmpresa( \"cCcpMai\" ) )\n                  :SetAdjunto(      cFilePdf )\n                  :SetPara(         RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"cMeiInt\" ) )\n                  :SetAsunto(       \"Envio de factura de cliente número \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) )\n                  :SetMensaje(      \"Adjunto le remito nuestra factura de cliente \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + Space( 1 ) )\n                  :SetMensaje(      \"de fecha \" + Dtoc( ( dbfFacCliT )->dFecFac ) + Space( 1 ) )\n                  :SetMensaje(      CRLF )\n                  :SetMensaje(      CRLF )\n                  :SetMensaje(      \"Reciba un cordial saludo.\" )\n\n                  :GeneralResource( dbfFacCliT, aItmFacCli() )\n\n               end with\n\n            end if\n\n      end case\n\n   end if\n\n   /*\n   Destruye el diseñador-------------------------------------------------------\n   */\n\n   oFr:DestroyFr()\n\n   ( dbfAntCliT )->( OrdSetFocus( nOrdAnt ) )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function YearComboBoxChange()\n\n   if oWndBrw:oWndBar:lAllYearComboBox()\n      DestroyFastFilter( dbfFacCliT )\n      CreateUserFilter( \"\", dbfFacCliT, .f., , , \"all\" )\n   else\n      DestroyFastFilter( dbfFacCliT )\n      CreateUserFilter( \"Year( Field->dFecFac ) == \" + oWndBrw:oWndBar:cYearComboBox(), dbfFacCliT, .f., , , \"Year( Field->dFecFac ) == \" + oWndBrw:oWndBar:cYearComboBox() )\n   end if\n\n   ( dbfFacCliT )->( dbGoTop() )\n\n   oWndBrw:Refresh()\n\nReturn nil\n\n#else\n\n//---------------------------------------------------------------------------//\n//Funciones del programa y del pda\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION pdaOpenFiles( lExt )\n\nRETURN ( lOpenFiles )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION pdaCloseFiles()\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\nFunction pdaFacCli()\n\n   local oDlg\n   local oBrw\n   local nLevel\n   local oGetBuscar\n   local cGetBuscar     := Space( 100 )\n   local oCbxOrden\n   local cCbxOrden      := \"Número\"\n   local oSayTit\n   local oBtn\n   local aTextEstado    := { \"Cob\", \"Par\", \"Pdt\" }\n\n   nLevel               := nLevelUsr( _MENUITEM_ )\n\n   if nAnd( nLevel, 1 ) != 0\n      msgStop( \"Acceso no permitido.\" )\n      return .f.\n   end if\n\n   /*\n   Abrimos los ficheros--------------------------------------------------------\n   */\n\n   if !pdaOpenFiles()\n      return .f.\n   end if\n\n   /*\n   Creamos el Shell------------------------------------------------------------\n   */\n\n      DEFINE FONT oFont NAME \"Verdana\" SIZE 0, -14\n\n      DEFINE DIALOG oDlg RESOURCE \"Dlg_info\"\n\n      REDEFINE SAY oSayTit ;\n         VAR      \"Facturas\" ;\n         ID       140 ;\n         COLOR    \"N/W*\" ;\n         FONT     oFont ;\n         OF       oDlg\n\n      REDEFINE BTNBMP oBtn ;\n         ID       130 ;\n         OF       oDlg ;\n         FILE     ( cPatBmp() + \"document_user1_16.bmp\" ) ;\n         NOBORDER ;\n         ACTION      ( nil )\n\n      oBtn:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE GET oGetBuscar ;\n         VAR      cGetBuscar;\n         ID       110 ;\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n      oGetBuscar:bChange   := {| nKey, nFlags | AutoSeek( nKey, nFlags, oGetBuscar, oBrw, dbfFacCliT ) }\n\n      REDEFINE COMBOBOX oCbxOrden ;\n         VAR      cCbxOrden ;\n         ID       120 ;\n         ITEMS    { \"Número\", \"Fecha\", \"Código\", \"Nombre\" } ;\n         OF       oDlg\n\n      oCbxOrden:bChange    := {|| ( dbfFacCliT )->( OrdSetFocus( oCbxOrden:nAt ) ), ( dbfFacCliT )->( dbGoTop() ), oBrw:Refresh(), oGetBuscar:SetFocus(), oCbxOrden:Refresh() }\n\n      REDEFINE IBROWSE oBrw;\n         FIELDS   (dbfFacCliT)->cSerie + \"/\" + AllTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac + CRLF + Dtoc( (dbfFacCliT)->dFecFac ) + \"[\" + aTextEstado[ nChkPagFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliP ) ] + \"]\" ,;\n                  (dbfFacCliT)->cNomCli,;\n                  nTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivEmp(), .t. );\n         HEAD     \"Número\" + CRLF + \"Fecha\",;\n                  \"Cliente\",;\n                  \"Importe \";\n         FIELDSIZES ;\n                  102,;\n                  150,;\n                  100;\n         JUSTIFY  .f.,;\n                  .f.,;\n                  .t. ;\n         ALIAS    ( dbfFacCliT ) ;\n         ID       100 ;\n         OF       oDlg\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT ( oDlg:SetMenu( pdaBuildMenu( oDlg, oBrw ) ) )\n\n   pdaCloseFiles()\n\n   // Restauramos la ventana---------------------------------------------------\n\n   oWnd():Show()\n\nRETURN ( nil )\n\n//---------------------------------------------------------------------------//\n\nstatic function pdaBuildMenu( oDlg, oBrw )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 500 ;\n      BITMAPS  60 ; // bitmaps resoruces ID\n      IMAGES   6     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 510 OF oMenu ACTION ( WinAppRec( oBrw, bEdtPda, dbfFacCliT ) )\n\n      REDEFINE MENUITEM ID 520 OF oMenu ACTION ( WinEdtRec( oBrw, bEdtPda, dbfFacCliT, oDlg ) )\n\n      REDEFINE MENUITEM ID 530 OF oMenu ACTION ( WinDelRec( oBrw, dbfFacCliT, {|| QuiFacPda() } ) )\n\n      REDEFINE MENUITEM ID 540 OF oMenu ACTION ( WinZooRec( oBrw, bEdtPda, dbfFacCliT, oDlg ) )\n\n      REDEFINE MENUITEM ID 550 OF oMenu ACTION ( pdaGenFacCli( oBrw, dbfFacCliT, dbfFacCliL ) )\n\n      REDEFINE MENUITEM ID 560 OF oMenu ACTION ( oDlg:End() )\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nStatic Function pdaGenFacCli( oBrw, dbfFacCliT, dbfFacCliL )\n\n   local cTextToPrint   := \"\"\n   local cCodFacCli     := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n   local oError\n   local oBlock\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   /*\n   Cargamos los valores iniciales con nTotFacCli-------------------------------\n   */\n\n   nTotFacCli( cCodFacCli, dbfFacCliT, dbfFacCliL )\n\n   /*\n   Cabecera del documento------------------------------------------------------\n   */\n\n   cTextToPrint         += CRLF + CRLF\n\n   cTextToPrint         += \"Factura    : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"-\" + ( dbfFacCliT )->cSufFac + CRLF\n\n   cTextToPrint         += \"Fecha      : \" + Dtoc( ( dbfFacCliT )->dFecFac ) + CRLF\n\n   cTextToPrint         += \"Cliente    : \" + AllTrim( ( dbfFacCliT )->cCodCli ) + \" - \" + RTrim( ( dbfFacCliT )->cNomCli ) + CRLF\n\n   cTextToPrint         += \"Establec.  : \" + Padr( RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"NbrEst\" ), 46 ) + CRLF\n\n   cTextToPrint         += \"N.I.F.     : \" + ( dbfFacCliT )->cDniCli + CRLF\n\n   cTextToPrint         += \"Direccion  : \" + RTrim( ( dbfFacCliT )->cDirCli ) + CRLF\n\n   cTextToPrint         += \"CP y Pobl. : \" + RTrim( ( dbfFacCliT )->cPosCli ) + Space( 1 ) + RTrim( ( dbfFacCliT )->cPobCli ) + CRLF\n\n   cTextToPrint         += \"Provincia  : \" + RTrim( ( dbfFacCliT )->cPrvCli ) + CRLF\n\n   cTextToPrint         += \"Estado     : \" + if( ( dbfFacCliT )->lLiquidada, Padr( \"Liquidada\", 46 ), Padr( \"Pendiente\", 46 ) ) + CRLF\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n   /*\n   Lineas del documento--------------------------------------------------------\n   */\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"Codigo Descripcion                     Und.  Precio    Total\" + CRLF\n   cTextToPrint         += \"------ ------------------------------ ----- ------- --------\" + CRLF\n\n\n\n   if ( dbfFacCliL )->( dbSeek( cCodFacCli ) )\n\n      while ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac == cCodFacCli .and. !( dbfFacCliL )->( eof() )\n\n          cTextToPrint  += SubStr( ( dbfFacCliL )->cRef, 1, 6 )                                          + Space( 1 )\n          cTextToPrint  += SubStr( ( dbfFacCliL )->cDetalle, 1, 30 )                                     + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotNFacCli( dbfFacCliL ), MasUnd() ), 5 )                      + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotUFacCli( dbfFacCliL, nDouDiv ), cPouDiv ), 7 )              + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotLFacCli( dbfFacCliL, nDouDiv, nRouDiv ), cPorDiv ), 8 )     + CRLF\n\n          if ( dbfFacCliL )->lLote\n             cTextToPrint  += \"       Lote: \" + Padr( ( dbfFacCliL )->cLote, 47 )                        + CRLF\n          end if\n\n          ( dbfFacCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   /*\n   Pie del documento-----------------------------------------------------------\n   */\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"   Base IGIC%   Importe RE%    Importe   Base   \" + Right( Str( nTotNet ), 12 ) + CRLF\n   cTextToPrint         += \"------- ---- --------- ---- ---------   IGIC \" + Right( Str( nTotIva ), 12 ) + CRLF\n\n   cTextToPrint         += Right( Trans( aIvaUno[ 2 ], cPorDiv )  , 7 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 8 ], cPorDiv )  , 9 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n   cTextToPrint         += \"R.E.   \" + Right( Str( nTotReq ), 12 )\n\n   if aIvaDos[ 3 ] != nil\n\n      cTextToPrint      += Right( Trans( aIvaDos[ 2 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaDos[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaDos[ 8 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n      cTextToPrint      += \"-------------------\"\n\n   else\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n      cTextToPrint      += \"                                         -------------------\"\n\n   end if\n\n   if aIvaTre[ 3 ] != nil\n\n      cTextToPrint      += Right( Trans( aIvaTre[ 2 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaTre[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaTre[ 8 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n      cTextToPrint      += \"TOTAL  \" + Right( Str( nTotFac ) , 12 ) + CRLF\n\n   else\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n      cTextToPrint      += \"                                         TOTAL  \" + Right( Str( nTotFac ) , 12 ) + CRLF\n\n   end if\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n   msginfo( \"Compruebe si la impresora está en línea y si tiene papel suficiente\" )\n\n   SendText( cTextToPrint )\n\n   RECOVER\n\n      msgStop( \"Ocurrió un error a la hora de imprimir Facturas\" )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION EdtPda( aTmp, aGet, dbfFacCliT, oBrw, cCodCli, cCodArt, nMode )\n\n   local aBtn        := Array( 11 )\n   local oDlg\n   local oFld\n   local nOrd\n   local oBrwLin\n   local oBrwInc\n   local oBrwPgo\n   local cNbrObr\n   local oNbrObr\n   local oSayPgo\n   local cSayPgo\n   local oSayAge\n   local cSayAge\n   local cRuta\n   local oRuta\n   local nRieCli\n   local oRieCli\n   local nTotFactCli\n   local nTotFacLin     := 0\n   local oSayTit\n   local oTitulo\n   local cTitulo        := LblTitle( nMode ) + \"factura de cliente\"\n   local oTlfCli\n   local cTlfCli\n   local cLiquidada     := \"\"\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios\n   */\n\n   cOldCodCli           := aTmp[ _CCODCLI ]\n\n   do case\n   case nMode == APPD_MODE\n\n      aTmp[ _CSERIE  ]     := cNewSer( \"nFacCli\" )\n      aTmp[ _CCODALM ]     := cDefAlm()\n      aTmp[ _CDIVFAC ]     := cDivEmp()\n      aTmp[ _CCODCAJ ]     := oUser():cCaja()\n      aTmp[ _CCODPAGO]     := cDefFpg()\n      aTmp[ _CCODUSR ]     := cCurUsr()\n      aTmp[ _NVDVFAC ]     := nChgDiv( aTmp[ _CDIVFAC ], dbfDiv )\n      aTmp[ _LLIQUIDADA ]  := .f.\n      aTmp[ _CSUFFAC ]     := cSufPda()\n      aTmp[ _LSNDDOC ]     := .t.\n      aTmp[ _CCODDLG ]     := oUser():cDelegacion()\n      aTmp[ _CMANOBR ]     := Padr( \"Gastos\", 250 )\n      aTmp[ _CCODAGE ]     := cCodAge()\n      aTmp[ _CCODTRN ]     := Padr( cCodTra(), 9 )\n\n      if !Empty( cCodCli )\n         aTmp[ _CCODCLI ]  := cCodCli\n      end if\n\n   case nMode == EDIT_MODE\n\n      if aTmp[ _LCLOFAC ] .and. !oUser():lAdministrador()\n         msgStop( \"Solo puede modificar las facturas cerrados los administradores.\" )\n         Return .f.\n      end if\n\n   end case\n\n   if Empty( aTmp[ _CSERIE ] )\n      aTmp[ _CSERIE ]  := \"A\"\n   end if\n\n   if Empty( aTmp[ _NTARIFA ] )\n      aTmp[ _NTARIFA ]  := 1\n   end if\n\n   aTmp[ _CCODAGE ]     := cCodAge()\n\n   if Empty( aTmp[ _CDTOESP ] )\n      aTmp[ _CDTOESP ]  := Padr( \"General\", 50 )\n   end if\n\n   if Empty( aTmp[ _CDPP ] )\n      aTmp[ _CDPP ]     := Padr( \"Pronto pago\", 50 )\n   end if\n\n   /*\n   Comineza la transaccion-----------------------------------------------------\n   */\n\n   if BeginTrans( aTmp, nMode )\n      Return .f.\n   end if\n\n   /*\n   Necestamos el orden el la primera clave\n   */\n\n   nOrd                 := ( dbfFacCliT )->( ordSetFocus( 1 ) )\n\n   cPicUnd              := MasUnd()\n   cPouDiv              := cPouDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture de la divisa\n   cPorDiv              := cPorDiv( aTmp[ _CDIVFAC ], dbfDiv ) // Picture de la divisa\n   nDouDiv              := nDouDiv( aTmp[ _CDIVFAC ], dbfDiv )\n   nRouDiv              := nRouDiv( aTmp[ _CDIVFAC ], dbfDiv )\n\n   /*\n   Etiquetas-------------------------------------------------------------------\n   */\n\n   cNbrObr              := RetFld( aTmp[ _CCODCLI ] + aTmp[ _CCODOBR ], dbfObrasT, \"cNomObr\" )\n   cSayPgo              := RetFld( aTmp[ _CCODPAGO ], dbfFPago, \"CDESPAGO\")\n   cRuta                := RetFld( aTmp[ _CCODRUT ], dbfRuta,  \"CDESRUT\")\n   cSayAge              := cNbrAgent( aTmp[ _CCODAGE ], dbfAgent )\n\n   oFont                := TFont():New( \"Arial\", 8, 26, .f., .t. )\n\n   DEFINE DIALOG oDlg RESOURCE \"PEDCLI_PDA_4\"\n\n   REDEFINE FOLDER oFld ;\n      ID          200 ;\n      OF          oDlg ;\n      PROMPT      \"Facturas\",       \"Líneas\",         \"Totales\",       \"Cobros\",        \"Incidencias\";\n      DIALOGS     \"FACTCLI_PDA_1\",  \"FACTCLI_PDA_2\",  \"PEDCLI_PDA_3\",  \"FACTCLI_PDA_4\", \"FACTCLI_PDA_5\"\n\n      REDEFINE GET aGet[ _CSERIE ] ;\n         VAR      aTmp[ _CSERIE ] ;\n         ID       100 ;\n         PICTURE  \"@!\" ;\n         SPINNER ;\n         ON UP    ( UpSerie( aGet[ _CSERIE ] ) );\n         ON DOWN  ( DwSerie( aGet[ _CSERIE ] ) );\n         WHEN     ( nMode == APPD_MODE .OR. nMode == DUPL_MODE );\n         VALID    ( aTmp[_CSERIE] >= \"A\" .AND. aTmp[_CSERIE] <= \"Z\"  );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NNUMFAC ] VAR aTmp[ _NNUMFAC ];\n         ID       101 ;\n         PICTURE  \"999999999\" ;\n         WHEN     .F. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CSUFFAC ] VAR aTmp[ _CSUFFAC ];\n         ID       102 ;\n         WHEN     .F. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET cLiquidada;\n         ID       103 ;\n         WHEN     ( .F. ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECFAC ] VAR aTmp[ _DFECFAC ];\n         ID       110 ;\n         SPINNER;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NTARIFA ] VAR aTmp[ _NTARIFA ] ;\n         ID       132 ;\n         PICTURE  \"9\" ;\n         VALID    ( aTmp[ _NTARIFA ] >= 1 .AND. aTmp[ _NTARIFA ] <= 6 );\n         WHEN     ( nMode != ZOOM_MODE );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODCLI ] VAR aTmp[ _CCODCLI ] ;\n         ID       120 ;\n         PICTURE  RetPicCodCliEmp() ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( LoaCli( aGet, aTmp, nMode, oRieCli, oTlfCli ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwClient( aGet[ _CCODCLI ] , aGet[ _CNOMCLI ]  ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNOMCLI ] VAR aTmp[ _CNOMCLI ] ;\n         ID       121 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDNICLI ] VAR aTmp[ _CDNICLI ] ;\n         ID       200 ;\n         WHEN     ( nMode != ZOOM_MODE )  ;\n         VALID    ( CheckCif( aGet[ _CDNICLI ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDIRCLI ] VAR aTmp[ _CDIRCLI ] ;\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOSCLI ] VAR aTmp[ _CPOSCLI ] ;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOBCLI ] VAR aTmp[ _CPOBCLI ] ;\n         ID       141 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oTlfCli VAR cTlfCli ;\n         ID       150 ;\n         WHEN     ( .f. );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oRieCli VAR nRieCli ;\n         ID       151 ;\n         PICTURE  \"@E 999999.99\" ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODOBR ] VAR aTmp[ _CCODOBR ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cObras( aGet[ _CCODOBR ], oNbrObr, aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwObras( aGet[ _CCODOBR ], oNbrObr, aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n         OF       oFld:aDialogs[1]\n\n\n      REDEFINE GET oNbrObr VAR cNbrObr ;\n         WHEN     .f. ;\n         ID       161 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODRUT ] VAR aTmp[ _CCODRUT ] ;\n          ID       170 ;\n          WHEN     (nMode != ZOOM_MODE) ;\n          VALID    (cRuta( aGet[ _CCODRUT ], dbfRuta, oRuta ) ) ;\n          BITMAP   \"LUPA\" ;\n          ON HELP  ( pdaBrwRuta( aGet[ _CCODRUT ], dbfRuta, oRuta ) ) ;\n          OF       oFld:aDialogs[1]\n\n      REDEFINE GET oRuta VAR cRuta ;\n          ID       171 ;\n          WHEN     .f. ;\n          OF       oFld:aDialogs[1]\n\n     /* REDEFINE GET aGet[ _CRETPOR ] VAR aTmp[ _CRETPOR ] ;\n         ID       180 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CRETMAT ] VAR aTmp[ _CRETMAT ] ;\n         ID       181 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]    */\n\n      REDEFINE GET aGet[_CCODAGE] ;\n         VAR      aTmp[_CCODAGE] ;\n         ID       185 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cAgentes( aGet[_CCODAGE], dbfAgent, oSayAge, aGet[_NPCTCOMAGE] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwAgentes( aGet[_CCODAGE], dbfAgent, oSayAge ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayAge VAR cSayAge ;\n         WHEN     .F. ;\n         ID       186 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODPAGO ] VAR aTmp[ _CCODPAGO ] ;\n         ID       190 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cFpago( aGet[ _CCODPAGO ], dbfFPago, oSayPgo ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwFPago( aGet[ _CCODPAGO ], dbfFPago, oSayPgo ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayPgo VAR cSayPgo  ;\n          ID       191 ;\n          WHEN     .f. ;\n          OF       oFld:aDialogs[1]\n\n      /*\n      Detalle________________________________________________________________\n      */\n\n      REDEFINE IBROWSE oBrwLin ;\n         FIELDS ;\n                  (dbfTmpLin)->CREF + CRLF + If( Empty( (dbfTmpLin)->CREF ), (dbfTmpLin)->MLNGDES, (dbfTmpLin)->CDETALLE ),;\n                  If( !( dbfTmpLin )->lTotLin .and. !( dbfTmpLin )->lControl, Trans( nTotNFacCli( dbfTmpLin ), cPicUnd ), \"\" ) + CRLF + If( !( dbfTmpLin )->lTotLin .and. !( dbfTmpLin )->lControl, Trans( (dbfTmpLin)->NIVA,      \"@E 99.9\" ), \"\" ),;\n                  If( !( dbfTmpLin )->lTotLin, Trans( nTotUFacCli( dbfTmpLin, nDouDiv ), cPouDiv ), \"\" );\n         FIELDSIZES ;\n                  130,;\n                  35,;\n                  60;\n         HEAD ;\n                  \"Código\" + CRLF + \"Detalle\",;\n                  \"Und.\" + CRLF + \"%IVA\",;\n                  \"Precio\" ;\n         JUSTIFY  .f.,;\n                  .t.,;\n                  .t. ;\n         ALIAS    ( dbfTmpLin );\n         ID       200 ;\n         OF       oFld:aDialogs[2]\n\n         oBrwLin:cWndName       := \"Factura de cliente.Detalle.PDA\"\n         oBrwLin:LoadData()\n\n      REDEFINE BTNBMP aBtn[1];\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ] ;\n         RESOURCE \"New16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Añadir línea\" ;\n         ACTION   ( AppDeta( oBrwLin, bDetPda, aTmp ) )\n\n         aBtn[1]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[2];\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ] ;\n         RESOURCE \"Edit16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Editar línea\" ;\n         ACTION   ( EdtDeta( oBrwLin, bDetPda, aTmp ) )\n\n         aBtn[2]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[3];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ] ;\n         RESOURCE \"Del16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Eliminar línea\" ;\n         ACTION   ( WinDelRec( oBrwDet, dbfTmpLin, {|| DelDeta() }, {|| RecalculaTotal( aTmp ) } ) )\n\n         aBtn[3]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[4];\n         ID       130 ;\n         OF       oFld:aDialogs[ 2 ] ;\n         RESOURCE \"Zoom16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Zoom línea\" ;\n         ACTION   ( WinZooRec( oBrwLin, bDetPda, dbfTmpLin ) )\n\n         aBtn[4]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE SAY oTotFacLin VAR nTotFacLin;\n         ID       450 ;\n         FONT     oFont ;\n         OF       oFld:aDialogs[2]\n\n         oTotFacLin:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE SAY oSayTit VAR \"Total\";\n         ID       451 ;\n         FONT     oFont ;\n         OF       oFld:aDialogs[2]\n\n         oSayTit:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      /*\n      Detalle________________________________________________________________\n      */\n\n      /*\n      Caja de diálogo de incidencias-------------------------------------------\n      */\n\n      REDEFINE IBROWSE oBrwInc ;\n         FIELDS ;\n                  ( dbfTmpInc )->cCodTip ,;\n                  cNomInci( ( dbfTmpInc )->cCodTip, dbfInci ) ,;\n                  Dtoc( ( dbfTmpInc )->dFecInc ),;\n                  ( dbfTmpInc )->mDesInc ;\n         FIELDSIZES ;\n                  40,;\n                  60,;\n                  60,;\n                  400;\n         HEAD ;\n                  \"Código\" ,;\n                  \"Tipo de incidencia\" ,;\n                  \"Fecha\" ,;\n                  \"Incidencia\";\n         JUSTIFY  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f. ;\n         ALIAS    ( dbfTmpInc );\n         ID       200 ;\n         OF       oFld:aDialogs[5]\n\n         oBrwInc:cWndName        := \"Factura de cliente.Incidencia.PDA\"\n         oBrwInc:LoadData()\n\n      REDEFINE BTNBMP aBtn[5];\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[5] ;\n         RESOURCE \"New16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Añadir incidencia\" ;\n         ACTION   ( WinAppRec( oBrwInc, bIncPda, dbfTmpInc, nil, nil, aTmp ) )\n\n       aBtn[5]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[6];\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[5] ;\n         RESOURCE \"Edit16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Editar incidencia\" ;\n         ACTION   ( WinEdtRec( oBrwInc, bIncPda, dbfTmpInc, nil, nil, aTmp ) )\n\n       aBtn[6]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[7];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[5] ;\n         RESOURCE \"Del16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Eliminar incidencia\" ;\n         ACTION   ( DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .t. ) )\n\n       aBtn[7]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[8];\n         ID       130 ;\n         OF       oFld:aDialogs[5] ;\n         RESOURCE \"Zoom16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Zoom incidencia\" ;\n         ACTION   ( WinZooRec( oBrwInc, bIncPda, dbfTmpInc ) )\n\n       aBtn[8]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      /*\n      Descuentos______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CDTOESP ] VAR aTmp[ _CDTOESP ] ;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _NDTOESP ] VAR aTmp[ _NDTOESP ] ;\n         ID       101 ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _CDPP ] VAR aTmp[ _CDPP ] ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _NDPP ] VAR aTmp[ _NDPP ];\n         ID       111 ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _CDTOUNO ] VAR aTmp[ _CDTOUNO ] ;\n         ID       120 ;\n         PICTURE  \"@!\" ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _NDTOUNO ] VAR aTmp[ _NDTOUNO ];\n         ID       121 ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _CDTODOS ] VAR aTmp[ _CDTODOS ] ;\n         ID       130 ;\n         PICTURE  \"@!\" ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _NDTODOS ] VAR aTmp[ _NDTODOS ];\n         ID       131 ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      /*\n        Margen\n      */\n\n      REDEFINE GET oGetRnt VAR nTotRnt;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n      /*\n      Cajas de Totales\n      ------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CMANOBR ] VAR aTmp[ _CMANOBR ] ;\n         ID       151 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE GET aGet[ _NMANOBR ] VAR aTmp[ _NMANOBR ] ;\n         ID       150 ;\n         PICTURE  cPorDiv ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         OF       oFld:aDialogs[3]\n\n      REDEFINE CHECKBOX aGet[ _LRECARGO ] ;\n         VAR      aTmp[ _LRECARGO ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         OF       oFld:aDialogs[3]\n\n      REDEFINE CHECKBOX aGet[ _LSNDDOC ] VAR aTmp[ _LSNDDOC ] ;\n         ID       170 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[3]\n\n      REDEFINE SAY oGetNet VAR nTotNet ;\n         ID       400 ;\n         OF       oFld:aDialogs[3]\n\n         oGetNet:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE SAY oGetIva VAR nTotIva ;\n         ID       420 ;\n         OF       oFld:aDialogs[3]\n\n         oGetIva:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE SAY oGetReq VAR nTotReq ;\n         ID       440 ;\n         OF       oFld:aDialogs[3]\n\n          oGetReq:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE SAY oGetTotal VAR nTotFactCli;\n         ID       450 ;\n         FONT     oFont ;\n         OF       oFld:aDialogs[3]\n\n         oGetTotal:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n#ifndef __PDA__\n      REDEFINE SAY oTitulo VAR cTitulo;\n         ID       100 ;\n         OF       oDlg\n#endif\n\n      /*\n      Ventana cobros\n      */\n\n      REDEFINE IBROWSE oBrwPgo ;\n         FIELDS ;\n                  If( ( dbfTmpPgo )->lCobrado,  aDbfBmp[ 1 ], aDbfBmp[ 2 ] ) ,;\n                  DtoC( ( dbfTmpPgo )->dPreCob ),;\n                  DtoC( ( dbfTmpPgo )->dFecVto ),;\n                  ( dbfTmpPgo )->cDescrip,;\n                  Trans( ( dbfTmpPgo )->nImporte, cPorDiv );\n         FIELDSIZES ;\n                  17,;\n                  70,;\n                  70,;\n                  130,;\n                  70;\n         HEAD ;\n                  \"Co. Cobrado\",;\n                  \"Expedido\",;\n                  \"Vencimiento\",;\n                  \"Descripción\",;\n                  \"Importe\";\n         JUSTIFY  ;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .f.,;\n                  .t. ;\n         ALIAS    ( dbfTmpPgo );\n         ID       200 ;\n         OF       oFld:aDialogs[4]\n\n         oBrwPgo:cWndName       := \"Factura de cliente.Cobros.PDA\"\n         oBrwPgo:LoadData()\n\n      REDEFINE BTNBMP aBtn[9];\n         ID       100 ;\n         WHEN     ( nMode == EDIT_MODE ) ;\n         OF       oFld:aDialogs[ 4 ] ;\n         RESOURCE \"Edit16\" ;\n         NOBORDER ;\n         ACTION   ( WinEdtRec( oBrwPgo, bPgoPda, dbfTmpPgo, dbfDiv ), RecalculaTotal( aTmp ) )\n\n         aBtn[9]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[10];\n         ID       110 ;\n         WHEN     ( nMode == EDIT_MODE ) ;\n         OF       oFld:aDialogs[ 4 ] ;\n         RESOURCE \"Del16\" ;\n         NOBORDER ;\n         ACTION   ( DelCobCli( oBrwPgo, dbfTmpPgo ) )\n\n         aBtn[10]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE BTNBMP aBtn[11];\n         ID       120 ;\n         WHEN     ( nMode == EDIT_MODE ) ;\n         OF       oFld:aDialogs[ 4 ] ;\n         FILE     ( cPatBmp() + \"printer2.bmp\" ) ;\n         NOBORDER ;\n         ACTION   ( pdaGenPago( oBrwPgo , dbfTmpPgo ) )\n\n         aBtn[11]:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      /*\n      Botones comunes a la caja de dialogo____________________________________\n      */\n\n   oDlg:bStart := {|| aGet[ _CCODCLI ]:SetFocus(), if( !Empty( cCodCli ) .and. nMode == APPD_MODE, ( aGet[ _CCODCLI ]:lValid(), oFld:SetOption(2), AppDeta( oBrwLin, bDetPda, aTmp ) ), ) }\n\n   oDlg:Cargo  := {|| EndTrans( aTmp, aGet, oBrw, oBrwLin , , aNumAlb, nMode, oDlg ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT ( RecalculaTotal( aTmp ), pdaMenuEdtRec( oBrwLin, oBrwInc, oDlg ) )\n\n   //( dbfFacCliT )->( ordSetFocus( nOrd ) )\n\n   oBrwLin:CloseData()\n\n   KillTrans( oBrwLin )\n\n   // Restauramos la ventana---------------------------------------------------\n\n   oWnd():Show()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nstatic function pdaMenuEdtRec( oBrwLin, oBrwInc, oDlg )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 100 ;\n      BITMAPS  10 ; // bitmaps resoruces ID\n      IMAGES   3     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 110 OF oMenu ACTION ( Eval( oDlg:Cargo ) )\n\n      REDEFINE MENUITEM ID 120 OF oMenu ACTION ( oDlg:End( IDCANCEL ) )\n\n   oDlg:SetMenu( oMenu )\n\n   /*oBrwLin:GoTop()\n\n   oBrwInc:GoTop()*/\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nStatic Function pdaGenPago( oBrwPgo , dbfTmpPgo )\n\n   local cTextToPrint   := \"\"\n   local cCodRecCli     := ( dbfTmpPgo )->cSerie + ( dbfTmpPgo )->cSufFac + Str( ( dbfTmpPgo )->nNumRec )\n   local oError\n   local oBlock\n   local dbfClient\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   USE ( cPatCli() + \"CLIENT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIENT\", @dbfClient ) )\n   SET ADSINDEX TO ( cPatCli() + \"CLIENT.CDX\" ) ADDITIVE\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n\n   cTextToPrint         += CRLF + CRLF\n\n   cTextToPrint         += \"Numero recibo       Fecha expedicion    Fecha vencimiento\"                + CRLF\n   cTextToPrint         += \"------------------- ------------------- --------------------\"             + CRLF\n\n   cTextToPrint         += PadR( ( dbfTmpPgo )->cSerie + \"/\" + AllTrim( Str( ( dbfTmpPgo )->nNumFac ) ) + \"/\" + ( dbfTmpPgo )->cSufFac + \"-\" + AllTrim( Str( ( dbfTmpPgo )->nNumRec ) ) , 19, Space( 1 ) )+ Space( 1 )\n   cTextToPrint         += Left( Dtoc( ( dbfTmpPgo )->dEntrada ), 19 )                                + Space( 9 )\n   cTextToPrint         += Left( Dtoc( ( dbfTmpPgo )->dFecVto ), 20 )                                 + CRLF\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"La cantidad de\"                                                           + CRLF\n   cTextToPrint         += \"------------------------------------------------------------\"             + CRLF\n\n   cTextToPrint         += Left( Num2Text( ( dbfTmpPgo )->nImporte ), 60 )                            + CRLF\n\n\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"Banco                    Cuenta                      Importe\"             + CRLF\n   cTextToPrint         += \"------------------------ ------------------------ ----------\"             + CRLF\n\n   if ( dbfClient )->( dbSeek( ( dbfTmpPgo )->cCodCli ) )\n\n      while ( dbfClient )->Cod == ( dbfTmpPgo )->cCodCli .and. !( dbfClient )->( eof() )\n\n          cTextToPrint  += Left( ( dbfClient )->Banco, 24 )                                           + Space( 1 )\n          cTextToPrint  += Left( Trans( ( dbfClient )->Cuenta, \"@R ####-####-##-##########\" ), 24 )   + Space( 2 )\n          cTextToPrint  += Right( Trans( ( dbfTmpPgo )->nImporte, \"@E 9999999.99\" ), 10 )             + CRLF\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n          cTextToPrint  += \"Recibi de                     Firma y sello\"                              + CRLF\n          cTextToPrint  += \"----------------------------- ------------------------------\"             + CRLF\n\n          cTextToPrint  += Left( ( dbfClient )->Titulo, 29 )                                                            + CRLF\n          cTextToPrint  += Left( ( dbfClient )->Nif, 29 )                                                               + CRLF\n          cTextToPrint  += Left( ( dbfClient )->Domicilio, 29 )                                                         + CRLF\n          cTextToPrint  += Left( ( dbfClient )->Poblacion, 29 )                                                         + CRLF\n          cTextToPrint  += Left( ( dbfClient )->CodPostal, 5 ) + Space( 1 ) + Left( ( dbfClient )->Provincia, 23 )      + CRLF\n\n          ( dbfClient )->( dbSkip() )\n\n      end while\n\n   end if\n\n   msginfo( \"Compruebe si la impresora está en línea y si tiene papel suficiente\" )\n\n   SendText( cTextToPrint )\n\n   RECOVER\n\n      msgStop( \"Ocurrió un error a la hora de imprimir pagos\" )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   CLOSE( dbfClient )\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function DetPda( aTmp, aGet, dbfFacCliL, oBrw, lTotLin, cCodArtEnt, nMode, aTmpFac )\n\n   local oDlg\n   local oBtn\n   local cCodArt     := Padr( aTmp[ _CREF ], 32 )\n   local oLinea\n   local cLinea      := LblTitle( nMode ) + \"línea de factura\"\n   local oSayPr1\n   local oSayPr2\n   local cSayPr1     := \"\"\n   local cSayPr2     := \"\"\n   local oSayVp1\n   local oSayVp2\n   local cSayVp1     := \"\"\n   local cSayVp2     := \"\"\n\n   DEFAULT lTotLin   := .f.\n\n   SysRefresh()\n\n   do case\n   case nMode == APPD_MODE\n      aTmp[ _CSERIE  ]  := aTmpFac[ _CSERIE ]\n      aTmp[ _NNUMFAC  ] := aTmpFac[ _NNUMFAC ]\n      aTmp[ _CSUFFAC  ] := aTmpFac[ _CSUFFAC ]\n      aTmp[ _NUNICAJA ] := 1\n      aTmp[ _CTIPMOV  ] := cDefVta()\n      aTmp[ _LTOTLIN  ] := lTotLin\n      aTmp[ _NCANENT  ] := 1\n      aTmp[ _LIVALIN  ] := aTmpFac[ _LIVAINC ]\n      aTmp[ _CALMLIN  ] := cDefAlm()\n      if !Empty( cCodArtEnt )\n         cCodArt        := Padr( cCodArtEnt, 32 )\n      end if\n\n   case nMode == EDIT_MODE\n      lTotLin           := aTmp[ _LTOTLIN ]\n\n   end case\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios----------------\n   */\n\n   cOldCodArt           := aTmp[ _CREF ]\n   cOldPrpArt           := aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ] + aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ]\n\n   DEFINE DIALOG oDlg RESOURCE \"FACTCLI_LIN_PDA_1\"\n\n      REDEFINE GET aGet[ _CREF ] VAR cCodArt;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( LoaArt( aGet, , aTmp, aTmpFac, , oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwArticulo( aGet[ _CREF ], aGet[ _CDETALLE ] ) ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ _CDETALLE ] VAR aTmp[ _CDETALLE ] ;\n         ID       110 ;\n         WHEN     ( lModDes() .AND. nMode != ZOOM_MODE );\n         OF       oDlg\n\n      REDEFINE GET aGet[ _MLNGDES ] VAR aTmp[ _MLNGDES ] ;\n         MEMO ;\n         ID       111 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      /*\n      Lotes\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CLOTE ] VAR aTmp[ _CLOTE ];\n         ID       112 ;\n         IDSAY    113 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      /*\n       propiedades\n       ------------------------------------------------------------------------\n       */\n\n      REDEFINE GET aGet[_CVALPR1] VAR aTmp[_CVALPR1];\n         ID       241 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR1 ], oSayVp1, aTmp[ _CCODPR1 ], dbfTblPro ),;\n                        LoaArt( aGet, , aTmp, aTmpFac, , oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[_CVALPR1], oSayVp1, aTmp[_CCODPR1 ] ) ) ;\n         OF       oDlg\n\n      REDEFINE SAY oSayPr1 VAR cSayPr1;\n         ID       240 ;\n         OF       oDlg\n\n      REDEFINE GET oSayVp1 VAR cSayVp1;\n         ID       242 ;\n         WHEN     .f. ;\n         OF       oDlg\n\n      REDEFINE GET aGet[_CVALPR2] VAR aTmp[_CVALPR2];\n         ID       251 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR2 ], oSayVp2, aTmp[ _CCODPR2 ], dbfTblPro ),;\n                        LoaArt( aGet, , aTmp, aTmpFac, , oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[_CVALPR2], oSayVp2, aTmp[_CCODPR2 ] ) ) ;\n         OF       oDlg\n\n      REDEFINE SAY oSayPr2 VAR cSayPr2;\n         ID       250 ;\n         OF       oDlg\n\n      REDEFINE GET oSayVp2 VAR cSayVp2;\n         ID       252 ;\n         WHEN     .f. ;\n         OF       oDlg\n\n      /*\n      fin de propiedades\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _NIVA ] VAR aTmp[ _NIVA ] ;\n         ID       120 ;\n         WHEN     ( lModIva() .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( lTiva( dbfIva, aTmp[ _NIVA ], @aTmp[ _NREQ ] ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwTipoIva( aGet[ _NIVA ], dbfIva ) ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ _NCANENT ] VAR aTmp[ _NCANENT ];\n         ID       130 ;\n         WHEN     ( lUseCaj() .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  cPicUnd ;\n         OF       oDlg ;\n         IDSAY    131\n\n         aGet[ _NCANENT ]:oSay:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE GET aGet[ _NUNICAJA ] VAR aTmp[ _NUNICAJA ];\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  cPicUnd ;\n         OF       oDlg ;\n         IDSAY    141\n\n         aGet[ _NUNICAJA ]:oSay:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE GET aGet[ _NPREUNIT ] VAR aTmp[_NPREUNIT] ;\n         ID       150 ;\n         WHEN     ( nMode != ZOOM_MODE .and. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  cPouDiv ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ _NIMPTRN ] VAR aTmp[ _NIMPTRN ] ;\n         ID      160 ;\n         IDSAY   270 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin )  ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) ) ;\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) ) ;\n         PICTURE  cPouDiv ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ _NDTO ] VAR aTmp[ _NDTO ] ;\n         ID       170 ;\n         WHEN     ( nMode != ZOOM_MODE .and. !lTotLin ) ;\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  \"@E 99.99\" ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ _NDTOPRM ] VAR aTmp[ _NDTOPRM ] ;\n         ID       180 ;\n         WHEN     ( nMode != ZOOM_MODE .and. !lTotLin ) ;\n         VALID    ( lCalcDeta( aTmp, aTmpFac ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpFac ) );\n         PICTURE  \"@E 99.99\";\n         OF       oDlg\n\n      REDEFINE GET aGet[ _NCOMAGE ] VAR aTmp[ _NCOMAGE ] ;\n         ID       190 ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         PICTURE  \"@E 99.99\" ;\n         OF       oDlg\n\n      /*\n      Codigo de almacen--------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CALMLIN ] VAR aTmp[ _CALMLIN ] ;\n         ID       200 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cAlmacen( aGet[ _CALMLIN ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAlmacen( aGet[ _CALMLIN ] ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oTotalLinea VAR nTotalLinea ;\n         ID       210 ;\n         WHEN     .F. ;\n         PICTURE  cPorDiv ;\n         OF       oDlg\n\n      REDEFINE SAY oLinea VAR cLinea;\n         ID       230 ;\n         OF       oDlg\n\n         oLinea:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      /*\n      Botones generales--------------------------------------------------------\n      */\n#ifndef __PDA__\n      REDEFINE BUTTON oBtn;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( SaveDeta( aTmp, aTmpFac, aGet, nil  , oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, oTotal, , , , cCodArt, oBtn ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n#endif\n\n      oDlg:bStart := {|| SetDlgMode( aTmp, aGet, , oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, oTotal, aTmpFac ) }\n\n#ifndef __PDA__\n\n      if nMode != ZOOM_MODE\n         oDlg:AddFastKey( VK_F5, {|| SaveDeta( aTmp, aTmpFac, aGet, nil , oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, oTotal, , , , cCodArt, oBtn ) } )\n      end if\n\n   ACTIVATE DIALOG oDlg CENTER ON PAINT ( lCalcDeta( aTmp, aTmpFac ) )\n\n#else\n\n   oDlg:Cargo  := {|| SaveDeta( aTmp, aTmpFac, aGet, nil , oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, , nMode, oTotal, , , cCodArt, oBtn ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT ( pdaMenuEditarLinea( oDlg, oBrw ) )\n\n   // Restauramos la ventana---------------------------------------------------\n\n   oWnd():Show()\n\n#endif\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nstatic function pdaMenuEditarLinea( oDlg )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 100 ;\n      BITMAPS  10 ; // bitmaps resoruces ID\n      IMAGES   3     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 110 OF oMenu ACTION ( Eval( oDlg:Cargo ) )\n\n      REDEFINE MENUITEM ID 120 OF oMenu ACTION ( oDlg:End( IDCANCEL ) )\n\n   oDlg:SetMenu( oMenu )\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nStatic Function IncPda( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode, aTmpFac )\n\n   local oDlg\n   local oNomInci\n   local cNomInci\n   local oTitulo\n   local cTitulo        := LblTitle( nMode ) + \" incidencia\"\n\n\n   if nMode == APPD_MODE\n      aTmp[ _CSERIE   ] := aTmpFac[ _CSERIE  ]\n      aTmp[ _NNUMFAC  ] := aTmpFac[ _NNUMFAC ]\n      aTmp[ _CSUFFAC  ] := aTmpFac[ _CSUFFAC ]\n      if IsMuebles()\n         aTmp[ ( dbfTmpInc )->( FieldPos( \"lAviso\" ) ) ]  := .t.\n      end if\n   end if\n\n   #ifndef __PDA__\n      DEFINE DIALOG oDlg RESOURCE \"INCIDENCIA\" TITLE LblTitle( nMode ) + \"incidencias de facturas a clientes\"\n   #else\n      DEFINE DIALOG oDlg RESOURCE \"FACTCLI_INC_PDA_1\"\n   #endif\n\n      REDEFINE GET aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         VAR      aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE );\n         VALID    ( cTipInci( aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], dbfInci, oNomInci ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIncidencia( dbfInci, aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], oNomInci ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oNomInci VAR cNomInci;\n         WHEN     .f. ;\n         ID       130 ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"dFecInc\" ) ) ] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"mDesInc\" ) ) ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lListo\" ) ) ] ;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lAviso\" ) ) ] ;\n         ID       150 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE SAY oTitulo VAR cTitulo;\n         ID       1000 ;\n         OF       oDlg\n\n         oTitulo:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n#ifndef __PDA__\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      if nMode != ZOOM_MODE\n         oDlg:AddFastKey( VK_F5, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) } )\n      end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\n#else\n\n   oDlg:Cargo  := {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT ( pdaMenuEditarIncidencia( oDlg ) )\n\n#endif\n\nReturn ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nstatic function pdaMenuEditarIncidencia( oDlg , oBrw )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 100 ;\n      BITMAPS  10 ; // bitmaps resoruces ID\n      IMAGES   3     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 110 OF oMenu ACTION ( Eval( oDlg:Cargo ) )\n\n      REDEFINE MENUITEM ID 120 OF oMenu ACTION ( oDlg:End( IDCANCEL ) )\n\n   oDlg:SetMenu( oMenu )\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nStatic Function PgoPda( aTmp, aGet, dbfTmpPgo, oBrw, dbfDiv, bValid, nMode )\n\n   local oDlg\n   local oBmpDiv\n   local oGetCli\n   local oGetAge\n   local oGetCaj\n   local oGetSubCta\n   local cGetSubCta\n   local oGetCtaRem\n   local cGetCtaRem\n   local oGetSubGas\n   local cGetSubGas\n   local lPgdOld\n   local nImpOld\n   local cGetCli     := RetClient( ( dbfTmpPgo )->cCodCli, dbfClient )\n   local cGetAge     := cNbrAgent( ( dbfTmpPgo )->cCodAge, dbfAgent )\n   local cPorDiv     := cPorDiv( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ], dbfDiv )\n   local oGetPgo\n   local cGetPgo     := RetFld( ( dbfTmpPgo )->cCodPgo, dbfFPago, \"cDesPago\" )\n   local oPago\n   local cPago       := \"Modificando recibo de factura\"\n\n   if nMode == EDIT_MODE\n      if aTmp[ ( dbfTmpPgo )->( FieldPos( \"lCloPgo\" ) ) ] .and. !oUser():lAdministrador()\n         msgStop( \"Solo pueden modificar los recibos cerrados los administradores.\" )\n         return .f.\n      end if\n   end if\n\n   lPgdOld              := ( dbfTmpPgo )->lCobrado .or. ( dbfTmpPgo )->lRecDto\n   nImpOld              := ( dbfTmpPgo )->nImporte\n\n\n   DEFINE DIALOG oDlg RESOURCE \"PAGOS_PDA\"\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"DPRECOB\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"DPRECOB\" ) ) ];\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"DFECVTO\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"DFECVTO\" ) ) ];\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cClient( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ], dbfClient, oGetCli ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwClient( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ], oGetCli ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oGetCli VAR cGetCli ;\n         ID       121 ;\n         WHEN     .f.;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODAGE\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODAGE\" ) ) ];\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODAGE\" ) ) ], dbfAgent, oGetAge ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODAGE\" ) ) ], oGetAge ) );\n         OF       oDlg\n\n      REDEFINE GET oGetAge VAR cGetAge ;\n         ID       131 ;\n         WHEN     .f.;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODPGO\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODPGO\" ) ) ] ;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         PICTURE  \"@!\" ;\n         VALID    ( cFPago( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODPGO\" ) ) ], dbfFPago, oGetPgo ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( pdaBrwFPago( aGet[ ( dbfTmpPgo )->( FieldPos( \"CCODPGO\" ) ) ], oGetPgo ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oGetPgo VAR cGetPgo ;\n         ID       141 ;\n         WHEN     .f.;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aGet[ ( dbfTmpPgo )->( FieldPos( \"lCobrado\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"lCobrado\" ) ) ];\n         ID       150 ;\n         ON CHANGE( ValCheck( aGet, aTmp ) ) ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"dEntrada\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"dEntrada\" ) ) ];\n         ID       151 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"NIMPORTE\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"NIMPORTE\" ) ) ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( aGet[ ( dbfTmpPgo )->( FieldPos( \"NIMPCOB\" ) ) ]:cText( aTmp[ ( dbfTmpPgo )->( FieldPos( \"NIMPORTE\" ) ) ] ), .t. ) ;\n         PICTURE  ( cPorDiv ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"NIMPCOB\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"NIMPCOB\" ) ) ];\n         ID       170 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( ValCobro( aGet, aTmp ) ) ;\n         PICTURE  ( cPorDiv ) ;\n         OF       oDlg\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"NIMPGAS\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"NIMPGAS\" ) ) ];\n         ID       180 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( cPorDiv ) ;\n         OF       oDlg\n\n      REDEFINE SAY oPago VAR cPago;\n         ID       190 ;\n         OF       oDlg\n\n         oPago:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n   oDlg:Cargo  := {|| EndPgo( aTmp, aGet, lPgdOld, nImpOld, dbfTmpPgo, oBrw, oDlg, nMode ), oDlg:end( IDOK ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT  ( pdaMenuEdtPgo( oDlg ) )\n\n   // Restauramos la ventana---------------------------------------------------\n\n   oWnd():Show()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nstatic function pdaMenuEdtPgo( oDlg )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 100 ;\n      BITMAPS  10 ; // bitmaps resoruces ID\n      IMAGES   3     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 110 OF oMenu ACTION ( Eval( oDlg:Cargo ) )\n\n      REDEFINE MENUITEM ID 120 OF oMenu ACTION ( oDlg:End( IDCANCEL ) )\n\n   oDlg:SetMenu( oMenu )\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nFunction pdaAppFacCli( cCodCli, cCodArt, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if Empty( cCodCli )\n      msgStop( \"No se ha seleccionado ningún cliente.\" )\n      return .f.\n   end if\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_APPD ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if pdaFacCli( nil, nil, cCodCli, cCodArt )\n         oWndBrw:RecAdd()\n      end if\n\n   else\n\n      if pdaOpenFiles( .t. )\n         nTotFacCli()\n         WinAppRec( nil, bEdtPda, dbfFacCliT, cCodCli, cCodArt )\n         pdaCloseFiles()\n      end if\n\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\n#endif\n\n//---------------------------------------------------------------------------//\n\nCLASS pdaFacCliSenderReciver\n\n   Method CreateData()\n\nEND CLASS\n\n//----------------------------------------------------------------------------//\n\nMethod CreateData( oPgrActual, oSayStatus, cPatPreVenta ) CLASS pdaFacCliSenderReciver\n\n   local pdaFacCliT\n   local pdaFacCliL\n   local pdaFacCliI\n   local pdaFacCliD\n   local dbfFacCliT\n   local dbfFacCliL\n   local dbfFacCliI\n   local dbfFacCliD\n   local lExist         := .f.\n   local cFileName\n   local cNumFacCliT\n   local cPatPc         := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )\n\n   //Cabeceras de las tablas\n\n   USE ( cPatPc + \"FacCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliT\", @dbfFacCliT ) )\n   SET ADSINDEX TO ( cPatPc + \"FacCliT.CDX\" ) ADDITIVE\n   ( dbfFacCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n   USE ( cPatPc + \"FacCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliL\", @dbfFacCliL ) )\n   SET ADSINDEX TO ( cPatPc + \"FacCliL.CDX\" ) ADDITIVE\n\n   USE ( cPatPc + \"FacCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliI\", @dbfFacCliI ) )\n   SET ADSINDEX TO ( cPatPc + \"FacCliI.CDX\" ) ADDITIVE\n\n   USE ( cPatPc + \"FacCliD.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FacCliD\", @dbfFacCliD ) )\n   SET ADSINDEX TO ( cPatPc + \"FacCliD.Cdx\" ) ADDITIVE\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"FacCliT.Dbf\", cCheckArea( \"FacCliT\", @pdaFacCliT ), .t. )\n   ( pdaFacCliT )->( ordListAdd( cPatEmp() + \"FacCliT.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"FacCliL.Dbf\", cCheckArea( \"FacCliL\", @pdaFacCliL ), .t. )\n   ( pdaFacCliL )->( ordListAdd( cPatEmp() + \"FacCliL.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"FacCliI.Dbf\", cCheckArea( \"FacCliI\", @pdaFacCliI ), .t. )\n   ( pdaFacCliI )->( ordListAdd( cPatEmp() + \"FacCliI.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"FacCliD.Dbf\", cCheckArea( \"FacCliD\", @pdaFacCliD ), .t. )\n   ( pdaFacCliD )->( ordListAdd( cPatEmp() + \"FacCliD.Cdx\" ) )\n\n   if !Empty( oPgrActual )\n      oPgrActual:SetRange( 0, ( pdaFacCliT )->( OrdKeyCount() ) )\n   end if\n\n   ( pdaFacCliT )->( dbGoTop() )\n   while !( pdaFacCliT )->( eof() )\n\n      if ( pdaFacCliT )->lSndDoc\n\n         cNumFacCliT    := ( pdaFacCliT )->cSerie + Str( ( pdaFacCliT )->nNumFac ) + ( pdaFacCliT )->cSufFac\n\n         if !( dbfFacCliT )->( dbSeek( cNumFacCliT ) )\n\n            dbPass( pdaFacCliT, dbfFacCliT, .t. )\n\n            /*\n            Lineas de Facturas--------------------------------------------------\n            */\n\n            if ( pdaFacCliL )->( dbSeek( cNumFacCliT ) )\n               while ( pdaFacCliL )->cSerie + Str( ( pdaFacCliL )->nNumFac ) + ( pdaFacCliL )->cSufFac == cNumFacCliT .and. !( pdaFacCliL )->( eof() )\n                  dbPass( pdaFacCliL, dbfFacCliL, .t. )\n                  ( pdaFacCliL )->( dbSkip() )\n               end while\n            end if\n\n            /*\n            Incidencias de Facturas---------------------------------------------\n            */\n\n            if ( pdaFacCliI )->( dbSeek( cNumFacCliT ) )\n               while ( pdaFacCliI )->cSerie + Str( ( pdaFacCliI )->nNumFac ) + ( pdaFacCliI )->cSufFac == cNumFacCliT .AND. !( pdaFacCliI )->( eof() )\n                  dbPass( pdaFacCliI, dbfFacCliI, .t. )\n                  ( pdaFacCliI )->( dbSkip() )\n               end while\n            end if\n\n            /*\n            Documentos de Facturas----------------------------------------------\n            */\n\n            if ( pdaFacCliD )->( dbSeek( cNumFacCliT ) )\n               while ( pdaFacCliD )->cSerie + Str( ( pdaFacCliD )->nNumFac ) + ( pdaFacCliD )->cSufFac == cNumFacCliT .AND. !( pdaFacCliD )->( eof() )\n                  dbPass( pdaFacCliD, dbfFacCliD, .t. )\n                  ( pdaFacCliD )->( dbSkip() )\n               end while\n            end if\n\n             if dbLock( pdaFacCliT )\n               ( pdaFacCliT )->lSndDoc  := .f.\n               ( pdaFacCliT )->( dbUnLock() )\n            end if\n\n         end if\n\n      end if\n\n      ( pdaFacCliT )->( dbSkip() )\n\n      if !Empty( oSayStatus )\n         oSayStatus:SetText( \"Sincronizando Facturas \" + Alltrim( Str( ( pdaFacCliT )->( OrdKeyNo() ) ) ) + \" de \" + Alltrim( Str( ( pdaFacCliT )->( OrdKeyCount() ) ) ) )\n      end if\n\n      SysRefresh()\n\n      if !Empty( oPgrActual )\n         oPgrActual:SetPos( ( pdaFacCliT )->( OrdKeyNo() ) )\n      end if\n\n      SysRefresh()\n\n   end while\n\n   CLOSE ( pdaFacCliT )\n   CLOSE ( pdaFacCliL )\n   CLOSE ( pdaFacCliI )\n   CLOSE ( pdaFacCliD )\n   CLOSE ( dbfFacCliT )\n   CLOSE ( dbfFacCliL )\n   CLOSE ( dbfFacCliI )\n   CLOSE ( dbfFacCliD )\n\nReturn ( Self )\n\n//---------------------------------------------------------------------------//\n\n//---------------------------------------------------------------------------//\n//Funciones del programa y del pda\n//---------------------------------------------------------------------------//\n\n/*\nLineas de total\n*/\n\nFUNCTION nTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )\n\n   local nCalculo\n   local nDtoGral    := 0\n   local nDtoProm    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nRou      := nRouDiv()\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n   DEFAULT lImpTrn   := .t.\n\n   if ( dbfLin )->lTotLin\n\n      nCalculo       := nTotUFacCli( dbfLin, nDec, nVdv )\n\n   else\n\n      // Tomamos los valores redondeados------------------------------------------\n\n      nCalculo       := nTotUFacCli( dbfLin, nDec )\n\n      // Descuentos---------------------------------------------------------------\n\n      if lDto\n\n         nCalculo    -= Round( Div( ( dbfLin )->nDtoDiv, nVdv ), nDec )\n\n         if ( dbfLin )->nDto != 0\n            nCalculo -= nCalculo * ( dbfLin )->nDto / 100\n         end if\n\n         if ( dbfLin )->nDtoPrm != 0\n            nCalculo -= nCalculo * ( dbfLin )->nDtoPrm / 100\n         end if\n\n         /*\n         nCalculo    -= nDtoGral\n         nCalculo    -= nDtoProm\n         */\n\n      end if\n\n      // Punto verde--------------------------------------------------------------\n\n      if lPntVer\n         nCalculo    += Round( ( dbfLin )->nPntVer , nDec )\n      end if\n\n      /*\n      Transporte---------------------------------------------------------------\n      */\n\n      if lImpTrn .and. ( dbfLin )->nImpTrn != 0\n         nCalculo    += ( dbfLin )->nImpTrn * nTotNFacCli( dbfLin )\n      end if\n\n      // Unidades-----------------------------------------------------------------\n\n      nCalculo       *= nTotNFacCli( dbfLin )\n\n   end if\n\n   if nRou != nil\n      nCalculo       := Round( Div( nCalculo, nVdv ), nRou )\n   end if\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//----------------------------------------------------------------------------//\n\n/*\nDevuelve el total de una linea de factura\n*/\n\nFUNCTION nTotUFacCli( dbfLin, nDec, nVdv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   if ValType( dbfLin ) == \"C\"\n\n      if ( dbfLin )->lAlquiler\n         nCalculo    := ( dbfLin )->nPreAlq\n      else\n         nCalculo    := ( dbfLin )->nPreUnit\n      end if\n\n      // Importe del IVMH\n      /*\n      if !( dbfLin )->lIvaLin\n         if ( dbfLin )->lVolImp\n            nCalculo    += ( dbfLin )->nValImp * NotCero( ( dbfLin )->nVolumen )\n         else\n            nCalculo    += ( dbfLin )->nValImp\n         end if\n      end if\n      */\n   else\n\n      if dbfLin:lAlquiler\n         nCalculo    := dbfLin:nPreAlq\n      else\n         nCalculo    := dbfLin:nPreUnit\n      end if\n\n      // Importe del IVMH\n      /*\n      if !dbfLin:lIvaLin\n         if dbfLin:lVolImp\n            nCalculo    += dbfLin:nValImp * NotCero( dbfLin:nVolumen )\n         else\n            nCalculo    += dbfLin:nValImp\n         end if\n      end if\n      */\n   end if\n\n   if nVdv != 0\n      nCalculo       := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve las unidades de una linea\n//\n\nFUNCTION nTotNFacCli( uDbf )\n\n   local nTotUnd\n\n   DEFAULT uDbf   := dbfFacCliL\n\n   do case\n      case ValType( uDbf ) == \"A\"\n\n      if uDbf[ __LALQUILER ]\n         nTotUnd  := NotCaja( uDbf[ _NCANENT ] )\n         nTotUnd  *= uDbf[ _NUNICAJA ]\n         nTotUnd  *= NotCero( uDbf[ _NUNDKIT ] )\n         nTotUnd  *= NotCero( uDbf[ __DFECENT ] - uDbf[ __DFECSAL ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDUNO ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDDOS ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDTRE ] )\n      else\n         nTotUnd  := NotCaja( uDbf[ _NCANENT ] )\n         nTotUnd  *= uDbf[ _NUNICAJA ]\n         nTotUnd  *= NotCero( uDbf[ _NUNDKIT ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDUNO ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDDOS ] )\n         nTotUnd  *= NotCero( uDbf[ _NMEDTRE ] )\n      end if\n\n   case ValType( uDbf ) == \"C\"\n\n      if ( uDbf )->lAlquiler\n         nTotUnd  := NotCaja( ( uDbf )->nCanEnt )\n         nTotUnd  *= ( uDbf )->nUniCaja\n         nTotUnd  *= NotCero( ( uDbf )->nUndKit )\n         nTotUnd  *= NotCero( ( uDbf )->dFecEnt - ( uDbf )->dFecSal )\n         nTotUnd  *= NotCero( ( uDbf )->nMedUno )\n         nTotUnd  *= NotCero( ( uDbf )->nMedDos )\n         nTotUnd  *= NotCero( ( uDbf )->nMedTre )\n      else\n         nTotUnd  := NotCaja( ( uDbf )->nCanEnt )\n         nTotUnd  *=( uDbf )->nUniCaja\n         nTotUnd  *= NotCero( ( uDbf )->nUndKit )\n         nTotUnd  *= NotCero( ( uDbf )->nMedUno )\n         nTotUnd  *= NotCero( ( uDbf )->nMedDos )\n         nTotUnd  *= NotCero( ( uDbf )->nMedTre )\n      end if\n\n   otherwise\n\n      if uDbf:lAlquiler\n         nTotUnd  := NotCaja( uDbf:nCanEnt )\n         nTotUnd  *= uDbf:nUniCaja\n         nTotUnd  *= NotCero( uDbf:nUndKit )\n         nTotUnd  *= NotCero( uDbf:dFecEnt - uDbf:dFecSal )\n         nTotUnd  *= NotCero( uDbf:nMedUno )\n         nTotUnd  *= NotCero( uDbf:nMedDos )\n         nTotUnd  *= NotCero( uDbf:nMedTre )\n      else\n         nTotUnd  := NotCaja( uDbf:nCanEnt )\n         nTotUnd  *= uDbf:nUniCaja\n         nTotUnd  *= NotCero( uDbf:nUndKit )\n         nTotUnd  *= NotCero( uDbf:nMedUno )\n         nTotUnd  *= NotCero( uDbf:nMedDos )\n         nTotUnd  *= NotCero( uDbf:nMedTre )\n      end if\n\n   end case\n\nReturn ( nTotUnd )\n\n//--------------------------------------------------------------------------//\n\nfunction nTotVFacCli( uDbf )\n\n   local nTotUnd\n\n   DEFAULT uDbf   := dbfFacCliL\n\n   do case\n      case ValType( uDbf ) == \"A\"\n\n         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( uDbf[ _NFACCNV ] )\n\n      case ValType( uDbf ) == \"C\"\n\n         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( ( uDbf )->nFacCnv )\n\n      otherwise\n\n         nTotUnd  := nTotNFacCli( uDbf ) * NotCero( uDbf:nFacCnv )\n\n   end case\n\nreturn ( nTotUnd )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION IsFacCli( cPath )\n\n   DEFAULT cPath  := cPatEmp()\n\n   if !lExistTable( cPath + \"FacCliT.Dbf\" )\n      dbCreate( cPath + \"FacCliT.Dbf\", aSqlStruct( aItmFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FacCliL.Dbf\" )\n      dbCreate( cPath + \"FacCliL.Dbf\", aSqlStruct( aColFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FacCliI.Dbf\" )\n      dbCreate( cPath + \"FacCliI.Dbf\", aSqlStruct( aIncFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FacCliD.Dbf\" )\n      dbCreate( cPath + \"FacCliD.Dbf\", aSqlStruct( aFacCliDoc() ), cDriver() )\n   end if\n\n   if !lExistIndex( cPath + \"FacCliT.Cdx\" ) .or. ;\n      !lExistIndex( cPath + \"FacCliL.Cdx\" ) .or. ;\n      !lExistIndex( cPath + \"FacCliI.Cdx\" ) .or. ;\n      !lExistTable( cPath + \"FacCliD.Cdx\" )\n\n      rxFacCli( cPath )\n\n   end if\n\nReturn ( .t. )\n\n//---------------------------------------------------------------------------//\n\n/*\nCrea las bases de datos necesarias para la facturación desde fuera\n*/\n\nFUNCTION mkFacCli( cPath, oMeter, lReindex )\n\n   DEFAULT lReindex  := .t.\n\n   if oMeter != nil\n      oMeter:cText   := \"Generando Bases\"\n      sysrefresh()\n   end if\n\n   if !lExistTable( cPath + \"FACCLIT.DBF\" )\n      dbCreate( cPath + \"FACCLIT.DBF\", aSqlStruct( aItmFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FACCLIL.DBF\" )\n      dbCreate( cPath + \"FACCLIL.DBF\", aSqlStruct( aColFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FACCLII.DBF\" )\n      dbCreate( cPath + \"FACCLII.DBF\", aSqlStruct( aIncFacCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FACCLID.DBF\" )\n      dbCreate( cPath + \"FACCLID.DBF\", aSqlStruct( aFacCliDoc() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"FACCLIS.DBF\" )\n      dbCreate( cPath + \"FACCLIS.DBF\", aSqlStruct( aSerFacCli() ), cDriver() )\n   end if\n\n   if lReindex\n      rxFacCli( cPath )\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n/*\nRegenera indices\n*/\n\nFUNCTION rxFacCli( cPath, oMeter )\n\n   local dbfFacCliT\n   local dbfFacCliL\n   local dbfFacCliI\n   local dbfFacCliD\n\n   DEFAULT cPath  := cPatEmp()\n\n   /*\n   Crea los ficheros si no existen\n   */\n\n   if !lExistTable( cPath + \"FacCliT.Dbf\" )   .or.;\n      !lExistTable( cPath + \"FacCliL.Dbf\" )   .or.;\n      !lExistTable( cPath + \"FacCliI.Dbf\" )   .or.;\n      !lExistTable( cPath + \"FacCliD.Dbf\" )   .or.;\n      !lExistTable( cPath + \"FacCliS.Dbf\" )\n      mkFacCli( cPath, nil, .f. )\n   end if\n\n   fEraseIndex( cPath + \"FacCliT.Cdx\" )\n   fEraseIndex( cPath + \"FacCliL.Cdx\" )\n   fEraseIndex( cPath + \"FacCliI.Cdx\" )\n   fEraseIndex( cPath + \"FacCliD.Cdx\" )\n   fEraseIndex( cPath + \"FacCliS.Cdx\" )\n\n   dbUseArea( .t., cDriver(), cPath + \"FACCLIL.DBF\", cCheckArea( \"FACCLIL\", @dbfFacCliL ), .f. )\n   if !( dbfFacCliL )->( neterr() )\n      ( dbfFacCliL )->( __dbPack() )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"nNumFac\", \"cSerie + STR( nNumFac ) + cSufFac\", {|| Field->cSerie + Str( Field->nNumFac ) + Field->cSufFac } ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"cRef\", \"cRef\", {|| Field->cRef }, ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"Lote\", \"cLote\", {|| Field->cLote }, ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"cCodAlb\", \"cCodAlb\", {|| Field->cCodAlb }, ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"cNumRef\", \"cSerie + STR( nNumFac ) + cSufFac + cRef\", {|| Field->cSerie + Str( Field->nNumFac ) + Field->cSufFac + Field->cRef } ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"cNumPedRef\", \"cNumPed + cRef\", {|| Field->cNumPed + Field->cRef } ) )\n\n      ( dbfFacCliL )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FACCLIL.CDX\", \"cNumPed\", \"cNumPed\", {|| Field->cNumPed } ) )\n\n      ( dbfFacCliL)->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfFacCliL )->( ordCreate( cPath + \"FacCliL.Cdx\", \"iNumFac\", \"'11' + cSerie + Str( nNumFac ) + Space( 1 ) + cSufFac\", {|| '11' + Field->cSerie + Str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )\n\n      ( dbfFacCliL )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de facturas de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"FacCliI.DBF\", cCheckArea( \"FacCliI\", @dbfFacCliI ), .f. )\n   if !( dbfFacCliI )->( neterr() )\n      ( dbfFacCliI )->( __dbPack() )\n\n      ( dbfFacCliI )->( ordCondSet(\"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfFacCliI )->( ordCreate( cPath + \"FacCliI.Cdx\", \"nNumFac\", \"cSerie + STR( nNumFac ) + cSufFac\", {|| Field->cSerie + Str( Field->nNumFac ) + Field->cSufFac } ) )\n\n      ( dbfFacCliI)->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfFacCliI )->( ordCreate( cPath + \"FacCliI.Cdx\", \"iNumFac\", \"'11' + cSerie + Str( nNumFac ) + Space( 1 ) + cSufFac\", {|| '11' + Field->cSerie + Str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )\n\n      ( dbfFacCliI )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de facturas de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"FacCliD.DBF\", cCheckArea( \"FacCliD\", @dbfFacCliD ), .f. )\n   if !( dbfFacCliD )->( neterr() )\n      ( dbfFacCliD )->( __dbPack() )\n\n      ( dbfFacCliD )->( ordCondSet(\"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfFacCliD )->( ordCreate( cPath + \"FacCliD.Cdx\", \"nNumFac\", \"cSerFac + STR( nNumFac ) + cSufFac\", {|| Field->cSerFac + Str( Field->nNumFac ) + Field->cSufFac } ) )\n\n      ( dbfFacCliD)->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfFacCliD )->( ordCreate( cPath + \"FacCliD.Cdx\", \"iNumFac\", \"'11' + cSerFac + Str( nNumFac ) + Space( 1 ) + cSufFac\", {|| '11' + Field->cSerFac + Str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )\n\n      ( dbfFacCliD )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de facturas de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"FACCLIT.DBF\", cCheckArea( \"FACCLIT\", @dbfFacCliT ), .f. )\n\n   if !( dbfFacCliT )->( neterr() )\n      ( dbfFacCliT )->( __dbPack() )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"NNUMFAC\", \"CSERIE + Str(NNUMFAC) + CSUFFAC\", {|| Field->cSerie + Str( Field->nNumFac ) + Field->cSufFac }, ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"DFECFAC\", \"DFECFAC\", {|| Field->DFECFAC } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CCODCLI\", \"CCODCLI\", {|| Field->CCODCLI } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CNOMCLI\", \"Upper( CNOMCLI )\", {|| Upper( Field->CNOMCLI ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CPOBCLI\", \"CPOBCLI + CNOMCLI\", {|| Field->CPOBCLI + Field->CNOMCLI } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CCODOBR\", \"cCodObr + Dtos( dFecFac )\", {|| Field->cCodObr + Dtos( Field->dFecFac ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CCODAGE\", \"cCodAge + Dtos( dFecFac )\", {|| Field->cCodAge + Dtos( Field->dFecFac ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CTURFAC\", \"CTURFAC + CSUFFAC + CCODCAJ\", {|| Field->CTURFAC + Field->CSUFFAC + Field->CCODCAJ } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"cNfc\", \"Upper( cNfc )\", {|| Upper( Field->cNfc ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliT.Cdx\", \"cCodPago\", \"cCodPago\", {|| Field->cCodPago } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CCODRUT\", \"CCODRUT\", {|| Field->CCODRUT } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CDOCORG\", \"CDOCORG\", {|| Field->CDOCORG } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CAGEFEC\", \"CCODAGE + DtoS( DFECFAC )\", {|| Field->CCODAGE + DtoS( Field->DFECFAC ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"NNUMLIQ\", \"Str( NNUMLIQ ) + CSUFLIQ\", {|| Str( Field->NNUMLIQ ) + Field->CSUFLIQ } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"CABNFAC\", \"CABNFAC\", {|| Field->CABNFAC } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"lSndDoc\", \"lSndDoc\", {|| Field->lSndDoc } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"cNumDoc\", \"cNumDoc\", {|| Field->cNumDoc } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliT.Cdx\", \"cNumPre\", \"cNumPre\", {|| Field->cNumPre } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"cNumPed\", \"cNumPed\", {|| Field->cNumPed } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ))\n      ( dbfFacCliT )->( ordCreate( cPath + \"FACCLIT.CDX\", \"cNumAlb\", \"cNumAlb\", {|| Field->cNumAlb } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliT.Cdx\", \"cCodUsr\", \"Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre\", {|| Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre } ) )\n\n      ( dbfFacCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliT.Cdx\", \"cNfc\", \"cNfc\", {|| Field->cNfc } ) )\n\n      ( dbfFacCliT)->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliT.Cdx\", \"iNumFac\", \"'11' + cSerie + Str( nNumFac ) + Space( 1 ) + cSufFac\", {|| '11' + Field->cSerie + Str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )\n\n      ( dbfFacCliT )->( dbCloseArea() )\n\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de facturas de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"FacCliS.Dbf\", cCheckArea( \"FacCliS\", @dbfFacCliT ), .f. )\n\n   if !( dbfFacCliT )->( neterr() )\n      ( dbfFacCliT )->( __dbPack() )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliS.Cdx\", \"nNumFac\", \"cSerFac + Str( nNumFac ) + cSufFac + Str( nNumLin )\", {|| Field->cSerFac + Str( Field->nNumFac ) + Field->cSufFac + Str( Field->nNumLin ) } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliS.Cdx\", \"cRefSer\", \"cRef + cAlmLin + cNumSer\", {|| Field->cRef + Field->cAlmLin +Field->cNumSer } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliS.CDX\", \"cNumSer\", \"cNumSer\", {|| Field->cNumSer } ) )\n\n      ( dbfFacCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfFacCliT )->( ordCreate( cPath + \"FacCliS.Cdx\", \"iNumFac\", \"'11' + cSerFac + Str( nNumFac ) + Space( 1 ) + cSufFac\", {|| '11' + Field->cSerFac + Str( Field->nNumFac ) + Space( 1 ) + Field->cSufFac } ) )\n\n      ( dbfFacCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de números de series de facturas de clientes\" )\n   end if\n\nReturn nil\n\n//--------------------------------------------------------------------------//\n\nfunction aIncFacCli()\n\n   local aIncFacCli  := {}\n\n   aAdd( aIncFacCli, { \"cSerie\",  \"C\",    1,  0, \"Serie de factura\" ,              \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"nNumFac\", \"N\",    9,  0, \"Número de factura\" ,             \"'999999999'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"cSufFac\", \"C\",    2,  0, \"Sufijo de factura\" ,             \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"cCodTip\", \"C\",    3,  0, \"Tipo de incidencia\" ,            \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"dFecInc\", \"D\",    8,  0, \"Fecha de la incidencia\" ,        \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"mDesInc\", \"M\",   10,  0, \"Descripción de la incidencia\" ,  \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"lListo\",  \"L\",    1,  0, \"Lógico de listo\" ,               \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncFacCli, { \"lAviso\",  \"L\",    1,  0, \"Lógico de Aviso\" ,               \"\",                   \"\", \"( cDbfCol )\" } )\n\nreturn ( aIncFacCli )\n\n//---------------------------------------------------------------------------//\n\nfunction aFacCliDoc()\n\n   local aFacCliDoc  := {}\n\n   aAdd( aFacCliDoc, { \"cSerFac\", \"C\",    1,  0, \"Serie de factura\" ,                \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aFacCliDoc, { \"nNumFac\", \"N\",    9,  0, \"Número de factura\" ,               \"'999999999'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aFacCliDoc, { \"cSufFac\", \"C\",    2,  0, \"Sufijo de factura\" ,               \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aFacCliDoc, { \"cNombre\", \"C\",  250,  0, \"Nombre del documento\" ,            \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aFacCliDoc, { \"cRuta\",   \"C\",  250,  0, \"Ruta del documento\" ,              \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aFacCliDoc, { \"mObsDoc\", \"M\",   10,  0, \"Observaciones del documento\" ,     \"\",                   \"\", \"( cDbfCol )\" } )\n\nreturn ( aFacCliDoc )\n\n//---------------------------------------------------------------------------//\n\nfunction aColFacCli()\n\n   local aColFacCli  := {}\n\n   aAdd( aColFacCli, {\"cSerie\"      ,\"C\",  1, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NNUMFAC\"     ,\"N\",  9, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CSUFFAC\"     ,\"C\",  2, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CREF\"        ,\"C\", 18, 0, \"Referencia del artículo\"               , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CDETALLE\"    ,\"C\",250, 0, \"Detalle del artículo\"                  , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NPREUNIT\"    ,\"N\", 16, 6, \"Precio unitario\"                       , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NPNTVER\"     ,\"N\", 16, 6, \"Importe punto verde\"                   , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"nImpTrn\"     ,\"N\", 16, 6, \"Importe de portes\"                     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NDTO\"        ,\"N\",  6, 2, \"Descuento\"                             , \"'@E 99,99'\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NDTOPRM\"     ,\"N\",  6, 2, \"Descuento promocional\"                 , \"'@E 99,99'\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NIVA\"        ,\"N\",  6, 2, \"Porcentaje de \" + cImp()               , \"'@E 99,99'\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NCANENT\"     ,\"N\", 16, 6, cNombreCajas()                          , \"cPicUndFac\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LCONTROL\"    ,\"L\",  1, 0, \"Lógico linea de control\"               , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NPESOKG\"     ,\"N\", 16, 6, \"Peso del producto\"                     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"cPesoKg\"     ,\"C\",  2, 0, \"Unidad de peso del producto\"           , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CUNIDAD\"     ,\"C\",  2, 0, \"Unidades de venta\"                     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODAGE\"     ,\"C\",  3, 0, \"Código del agente\"                     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NCOMAGE\"     ,\"N\",  6, 2, \"Comisión del agente\"                   , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NUNICAJA\"    ,\"N\", 16, 6, cNombreUnidades()                       , \"cPicUndFac\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NUNDKIT\"     ,\"N\", 16, 6, \"Unidades del producto kit\"             , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"DFECHA\"      ,\"D\",  8, 0, \"Fecha de detalle\"                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CTIPMOV\"     ,\"C\",  2, 0, \"Tipo de movimiento\"                    , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"MLNGDES\"     ,\"M\", 10, 0, \"Descripción de artículo sin codificar\" , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODALB\"     ,\"C\", 12, 0, \"Número del albarán de procedencia\"     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"DFECALB\"     ,\"D\",  8, 0, \"Fecha del albarán de procedencia\"      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LTOTLIN\"     ,\"L\",  1, 0, \"Valor lógico para enviar el documento\" , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LIMPLIN\"     ,\"L\",  1, 0, \"Línea no imprimible\"                   , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODPR1\"     ,\"C\", 10, 0, \"Código de primera propiedad\"           , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODPR2\"     ,\"C\", 10, 0, \"Código de segunda propiedad\"           , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CVALPR1\"     ,\"C\", 10, 0, \"Valor de primera propiedad\"            , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CVALPR2\"     ,\"C\", 10, 0, \"Valor de segunda propiedad\"            , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NFACCNV\"     ,\"N\", 16, 6, \"Factor de conversión de la compra\"     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NDTODIV\"     ,\"N\", 16, 6, \"Descuento lineal de la compra\"         , \"'@EZ 99,99'\" ,  \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LSEL\"        ,\"L\",  1, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NNUMLIN\"     ,\"N\",  4, 0, \"Número de la línea\"                    , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NCTLSTK\"     ,\"N\",  1, 0, \"Tipo de stock de la linea\"             , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NCOSDIV\"     ,\"N\", 16, 6, \"Costo del producto\"                    , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NPVPREC\"     ,\"N\", 16, 6, \"Precio de venta recomendado\"           , \"cPorDivFac\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CALMLIN\"     ,\"C\",  3, 0, \"Código de almacén\"                     , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LIVALIN\"     ,\"L\",  1, 0, cImp() + \" incluido\"                    , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODIMP\"     ,\"C\",  3, 0, \"Código del impuesto especial\"          , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NVALIMP\"     ,\"N\", 16, 6, \"Importe del impuesto especial\"         , \"cPorDivFac\" ,   \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LLOTE\"       ,\"L\",  1, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NLOTE\"       ,\"N\",  9, 0, \"\"                                      , \"'999999999'\" ,  \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CLOTE\"       ,\"C\", 12, 0, \"Número de lote\"                        , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"dFecCad\"     ,\"D\",  8, 0, \"Fecha de caducidad\"                    , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LKITART\"     ,\"L\",  1, 0, \"Línea con escandallo\"                  , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LKITCHL\"     ,\"L\",  1, 0, \"Línea pertenciente a escandallo\"       , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LKITPRC\"     ,\"L\",  1, 0, \"\"                                      , \"\" ,             \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NMESGRT\"     ,\"N\",  2, 0, \"Meses de garantía\"                     , \"'99'\",          \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LMSGVTA\"     ,\"L\",  1, 0, \"Avisar venta sin stocks\"               , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"LNOTVTA\"     ,\"L\",  1, 0, \"No permitir venta sin stocks\"          , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODTIP\"     ,\"C\",  3, 0, \"Código del tipo de artículo\"           , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"MNUMSER\"     ,\"M\", 10, 0, \"\"                                      , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODFAM\"     ,\"C\", 16, 0, \"Código de familia\"                     , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CGRPFAM\"     ,\"C\",  3, 0, \"Código del grupo de familia\"           , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"NREQ\"        ,\"N\", 16, 6, \"Recargo de equivalencia\"               , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"MOBSLIN\"     ,\"M\", 10, 0, \"Observaciones de linea\"                , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CCODPRV\"     ,\"C\", 12, 0, \"Código del proveedor\"                  , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"CNOMPRV\"     ,\"C\", 30, 0, \"Nombre del proveedor\"                  , \"\",              \"\", \"( cDbfCol )\"} )\n   aAdd( aColFacCli, {\"cImagen\"     ,\"C\",128, 0, \"Fichero de imagen\"                     , \"\",              \"\", \"( cDbfCol )\", .t. } )\n   aAdd( aColFacCli, {\"NPUNTOS\"     ,\"N\", 15, 6, \"Puntos del artículo\"                   , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"NVALPNT\"     ,\"N\", 16, 6, \"Valor del punto\"                       , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"NDTOPNT\"     ,\"N\",  5, 2, \"Descuento puntos\"                      , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"NINCPNT\"     ,\"N\",  5, 2, \"Incremento porcentual\"                 , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"CREFPRV\"     ,\"C\", 18, 0, \"Referencia proveedor\"                  , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"NVOLUMEN\"    ,\"N\", 16, 6, \"Volumen del producto\"                  , \"'@E 9,999.99'\", \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"CVOLUMEN\"    ,\"C\",  2, 0, \"Unidad del volumen\"                    , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"LALQUILER\"   ,\"L\",  1, 0, \"Lógico de línea de alquiler\"           , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"DFECENT\"     ,\"D\",  8, 0, \"Fecha de entrada del alquiler\"         , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"DFECSAL\"     ,\"D\",  8, 0, \"Fecha de salida del alquiler\"          , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, {\"NPREALQ\"     ,\"N\", 16, 6, \"Precio de alquiler\"                    , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"nNumMed\"    ,\"N\",  1, 0, \"Número de mediciones\"                  , \"MasUnd()\",      \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"nMedUno\"    ,\"N\", 16, 6, \"Primera unidad de medición\"            , \"MasUnd()\",      \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"nMedDos\"    ,\"N\", 16, 6, \"Segunda unidad de medición\"            , \"MasUnd()\",      \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"nMedTre\"    ,\"N\", 16, 6, \"Tercera unidad de medición\"            , \"MasUnd()\",      \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"nTarLin\"    ,\"N\",  1, 0, \"Tarifa de precio aplicada\"             , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"lImpFra\",   \"L\",   1, 0, \"Lógico de imprimir frase publicitaria\" , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"cCodFra\",   \"C\",   3, 0, \"Código de la frase publicitaria\"       , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"cTxtFra\",   \"C\", 250, 0, \"Texto de la frase publicitaria\"        , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"Descrip\",   \"M\",  10, 0, \"Descripción larga\"                     , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"lLinOfe\",   \"L\",   1, 0, \"Linea con oferta\"                      , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"lVolImp\",   \"L\",   1, 0, \"Aplicar volumen impuestos especiales\"  , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"lGasSup\",   \"L\",   1, 0, \"Linea de gastos suplidos\"              , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"cNumPed\"   ,\"C\",  12, 0, \"Número del pedido\"                     , \"\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"dFecFac\"   ,\"D\",   8, 0, \"Fecha de factura\"                      , \"\" ,             \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli, { \"cSuPed\"    ,\"C\",  50, 0, \"Su pedido (desde albarán)\"             , \"\" ,             \"\", \"( cDbfCol )\" } )\n\nreturn ( aColFacCli )\n\n//---------------------------------------------------------------------------//\n\nfunction aItmFacCli()\n\n   local aItmFacCli  := {}\n\n   aAdd( aItmFacCli, {\"CSERIE\"      ,\"C\",  1, 0, \"Serie de la factura\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NNUMFAC\"     ,\"N\",  9, 0, \"Número de la factura\" ,                                \"'999999999'\",        \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CSUFFAC\"     ,\"C\",  2, 0, \"Sufijo de la factura\" ,                                \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CTURFAC\"     ,\"C\",  6, 0, \"Sesión de la factura\" ,                                \"######\",             \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"DFECFAC\"     ,\"D\",  8, 0, \"Fecha de la factura\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODCLI\"     ,\"C\", 12, 0, \"Código del cliente\" ,                                  \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODALM\"     ,\"C\",  3, 0, \"Código de almacén\" ,                                   \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODCAJ\"     ,\"C\",  3, 0, \"Código de caja\" ,                                      \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNOMCLI\"     ,\"C\", 80, 0, \"Nombre del cliente\" ,                                  \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDIRCLI\"     ,\"C\",100, 0, \"Domicilio del cliente\" ,                               \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CPOBCLI\"     ,\"C\", 25, 0, \"Población del cliente\" ,                               \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CPRVCLI\"     ,\"C\", 20, 0, \"Provincia del cliente\" ,                               \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NCODPROV\"    ,\"N\",  2, 0, \"Número de provincia cliente\" ,                         \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CPOSCLI\"     ,\"C\", 15, 0, \"Código postal del cliente\" ,                           \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDNICLI\"     ,\"C\", 30, 0, \"NIF del cliente\" ,                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LMODCLI\"     ,\"L\",  1, 0, \"Lógico de modificar datos del cliente\" ,               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LMAYOR\"      ,\"L\",  1, 0, \"Lógico de mayorista\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NTARIFA\"     ,\"N\",  1, 0, \"Tarifa de precio aplicada\" ,                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODAGE\"     ,\"C\",  3, 0, \"Código del agente\" ,                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODRUT\"     ,\"C\",  4, 0, \"Código de la ruta\" ,                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODTAR\"     ,\"C\",  5, 0, \"Código de la tarifa\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODOBR\"     ,\"C\", 10, 0, \"Código de la obra\" ,                                   \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NPCTCOMAGE\"  ,\"N\",  6, 2, \"Porcentaje de comisión del agente\" ,                   \"'@E 999,99'\",        \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LLIQUIDADA\"  ,\"L\",  1, 0, \"Lógico de la factura pagada\" ,                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LCONTAB\"     ,\"L\",  1, 0, \"Lógico de la factura contabilizada\" ,                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"DFECENT\"     ,\"D\",  8, 0, \"Fecha de entrega\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CSUFAC\"      ,\"C\", 50, 0, \"Su factura\" ,                                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LIMPALB\"     ,\"L\",  1, 0, \"Lógico si la factura se importó de albaranes\" ,        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCONDENT\"    ,\"C\",100, 0, \"Condición de entrada\" ,                                \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"MCOMENT\"     ,\"M\", 10, 0, \"Comentarios\" ,                                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"MOBSERV\"     ,\"M\", 10, 0, \"Observaciones\" ,                                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODPAGO\"    ,\"C\",  2, 0, \"Código del tipo de pago\" ,                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NBULTOS\"     ,\"N\",  3, 0, \"Número de bultos\" ,                                    \"999,999\",            \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NPORTES\"     ,\"N\",  6, 0, \"Valor del porte\" ,                                     \"cPorDivFac\",         \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NIVAMAN\"     ,\"N\",  6, 2, \"Porcentaje de \" + cImp() + \" del gasto\" ,              \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NMANOBR\"     ,\"N\", 16, 6, \"Gasto\" ,                                               \"cPorDivFac\",         \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNUMALB\"     ,\"C\", 12, 0, \"Número de albarán\" ,                                   \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNUMPED\"     ,\"C\", 12, 0, \"Número de pedido\" ,                                    \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNUMPRE\"     ,\"C\", 12, 0, \"Número de presupuesto\" ,                               \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNUMSAT\"     ,\"C\", 12, 0, \"Número de S.A.T.\" ,                                    \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NTIPOFAC\"    ,\"N\",  1, 0, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cDtoEsp\"     ,\"C\", 50, 0, \"Descripción de porcentaje de descuento especial\" ,     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nDtoEsp\"     ,\"N\",  6, 2, \"Porcentaje de descuento especial\" ,                    \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cDpp\"        ,\"C\", 50, 0, \"Descripción de porcentaje de descuento por pronto pago\",\"\",                  \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nDpp\"        ,\"N\",  6, 2, \"Porcentaje de descuento por pronto pago\" ,             \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDTOUNO\"     ,\"C\", 25, 0, \"Descripción de porcentaje de descuento personalizado\", \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTOUNO\"     ,\"N\",  6, 2, \"Porcentaje de descuento por descuento personalizado\" , \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDTODOS\"     ,\"C\", 25, 0, \"Descripción de porcentaje de descuento personalizado\" ,\"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTODOS\"     ,\"N\",  4, 1, \"Porcentaje de descuento por descuento personalizado\" , \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTOCNT\"     ,\"N\",  6, 2, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTORAP\"     ,\"N\",  6, 2, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTOPUB\"     ,\"N\",  6, 2, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTOPGO\"     ,\"N\",  6, 2, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NDTOPTF\"     ,\"N\",  7, 2, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NTIPOIVA\"    ,\"N\",  1, 0, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NPORCIVA\"    ,\"N\",  4, 1, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LRECARGO\"    ,\"L\",  1, 0, \"Lógico para recargo\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CREMITIDO\"   ,\"C\", 50, 0, \"Campo de remitido\" ,                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LIVAINC\"     ,\"L\",  1, 0, \"Lógico \" + cImp() + \" incluido\" ,                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"LSNDDOC\"     ,\"L\",  1, 0, \"Lógico para documento enviado\" ,                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDIVFAC\"     ,\"C\",  3, 0, \"Código de la divisa\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NVDVFAC\"     ,\"N\", 10, 4, \"Cambio de la divisa\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CRETPOR\"     ,\"C\",100, 0, \"Retirado por\" ,                                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CRETMAT\"     ,\"C\", 20, 0, \"Matrícula\" ,                                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CNUMDOC\"     ,\"C\", 13, 0, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NREGIVA\"     ,\"N\",  1, 0, \"Régimen de \" + cImp() ,                                \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CCODPRO\"     ,\"C\",  9, 0, \"Código de proyecto en contabilidad\" ,                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CDOCORG\"     ,\"C\", 10, 0, \"Número del documento origen\" ,                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NNUMLIQ\"     ,\"N\",  9, 0, \"Número liquidación\",                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"CSUFLIQ\"     ,\"C\",  2, 0, \"Sufijo de la liquidación\",                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"NIMPLIQ\"     ,\"N\", 16, 6, \"Importe liquidación\",                                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"DFECLIQ\"     ,\"D\",  8, 0, \"Fecha liquidación\",                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cCodTrn\"     ,\"C\",  9, 0, \"Código del transportista\" ,                            \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nKgsTrn\"     ,\"N\", 16, 6, \"TARA del transportista\" ,                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lCloFac\"     ,\"L\",  1, 0, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cAbnFac\"     ,\"C\", 12, 0, \"\" ,                                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cAntFac\"     ,\"C\", 12, 0, \"Factura de anticipo\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTipRet\"     ,\"N\",  1, 0, \"Tipo de retención ( 1. Base / 2. Base+IVA )\",          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nPctRet\"     ,\"N\",  6, 2, \"Porcentaje de retención\",                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cCodUsr\"     ,\"C\",  3, 0, \"Código de usuario\",                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"dFecCre\"     ,\"D\",  8, 0, \"Fecha de creación/modificación del documento\",         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cTimCre\"     ,\"C\",  5, 0, \"Hora de creación/modificación del documento\",          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cCodGrp\"     ,\"C\",  4, 0, \"Código de grupo de cliente\" ,                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lImprimido\"  ,\"L\",  1, 0, \"Lógico de imprimido\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"dFecImp\"     ,\"D\",  8, 0, \"Última fecha de impresión\" ,                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cHorImp\"     ,\"C\",  5, 0, \"Hora de la última impresión\" ,                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cCodDlg\"     ,\"C\",  2, 0, \"Código delegación\" ,                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nDtoAtp\"     ,\"N\",  6, 2, \"Porcentaje de descuento atípico\",                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nSbrAtp\"     ,\"N\",  1, 0, \"Lugar donde aplicar dto atípico\",                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"dFecEntr\"    ,\"D\",  8,  0, \"Fecha de entrada de alquiler\",                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"dFecSal\"     ,\"D\",  8,  0, \"Fecha de salida de alquiler\",                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lAlquiler\"   ,\"L\",  1,  0, \"Lógico de alquiler\",                                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lPayCli\"     ,\"L\",  1,  0, \"Lógico a pagar por el cliente\",                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nPayCli\"     ,\"N\", 16,  6, \"A pagar por el cliente\",                              \"cPorDivFac\",         \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cManObr\"     ,\"C\",250,  0, \"Literal de gastos\",                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lExpEdi\"     ,\"L\",  1,  0, \"Lógico de factura exportada a EDI\",                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"dFecEdi\"     ,\"D\",  8,  0, \"Fecha exportación a EDI\",                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cHorEdi\"     ,\"C\",  5,  0, \"Hora exportación a EDI\",                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cSuAlb\"      ,\"C\", 25,  0, \"Referencia a su albarán\",                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lExpFac\"     ,\"L\",  1,  0, \"Lógico de factura exportada a Facturae 3.1 [Factura electrónica]\", \"\",      \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cTlfCli\"     ,\"C\", 20,  0, \"Teléfono del cliente\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotNet\"     ,\"N\", 16,  6, \"Total neto\" ,                                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotSup\"     ,\"N\", 16,  6, \"Total gastos suplidos\" ,                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotIva\"     ,\"N\", 16,  6, \"Total \" + cImp() ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotReq\"     ,\"N\", 16,  6, \"Total recargo\" ,                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotFac\"     ,\"N\", 16,  6, \"Total factura\" ,                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nEntIni\"     ,\"N\",  6,  2, \"Porcentaje de entrega inicial\" ,                      \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nPctDto\"     ,\"N\",  6,  2, \"Porcentaje de descuento por entrega inicial\" ,        \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cNFC\"        ,\"C\", 20,  0, \"Código NFC\" ,                                         \"'@!\",                \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cFacPrv\"     ,\"C\", 12,  0, \"Factura de proveedor\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cBanco\"      ,\"C\", 50,  0, \"Nombre del banco del cliente\" ,                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cEntBnc\"     ,\"C\",  4,  0, \"Entidad de la cuenta bancaria del cliente\" ,          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cSucBnc\"     ,\"C\",  4,  0, \"Sucursal de la cuenta bancaria del cliente\" ,         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cDigBnc\"     ,\"C\",  2,  0, \"Dígito de control de la cuenta bancaria del cliente\" ,\"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"cCtaBnc\"     ,\"C\", 10,  0, \"Cuenta bancaria del cliente\" ,                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotLiq\"     ,\"N\", 16,  6, \"Total liquidado\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"nTotPdt\"     ,\"N\", 16,  6, \"Total pendiente\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmFacCli, {\"lOperPV\"     ,\"L\", 1,   0, \"Lógico para operar con punto verde\" ,                 \"\",                   \"\", \"( cDbf )\"} )\n\nRETURN ( aItmFacCli )\n\n//---------------------------------------------------------------------------//\n\nFunction aSerFacCli()\n\n   local aColFacCli  := {}\n\n   aAdd( aColFacCli,  { \"cSerFac\",     \"C\",  1,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"nNumFac\",     \"N\",  9,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"cSufFac\",     \"C\",  2,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"dFecFac\",     \"D\",  8,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"nNumLin\",     \"N\",  4,   0, \"Número de la línea\",               \"'9999'\",            \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"cRef\",        \"C\", 18,   0, \"Referencia del artículo\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"cAlmLin\",     \"C\",  3,   0, \"Almacen del artículo\",             \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColfacCli,  { \"lUndNeg\",     \"L\",  1,   0, \"Lógico de unidades en negativo\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColFacCli,  { \"cNumSer\",     \"C\", 30,   0, \"Número de serie\",                  \"\",                  \"\", \"( cDbfCol )\" } )\n\nReturn ( aColFacCli )\n\n//---------------------------------------------------------------------------//\n\n/*\nEsta funcion hace los calculos de los totales en la factura\n*/\n\nFUNCTION nTotFacCli( cFactura, cFacCliT, cFacCliL, cIva, cDiv, cFacCliP, cAntCliT, aTmp, cDivRet, lPic, lExcCnt, lNeto )\n\n   local nRec\n   local nOrd\n   local nTotalArt\n   local bCondition\n   local lRecargo\n   local nDtoUno\n   local nDtoDos\n   local nDtoEsp\n   local nTipRet\n   local nPctRet\n   local nEntIni\n   local nDtoIni\n   local nDtoPP\n   local nPorte\n   local nManObr\n   local nIvaMan\n   local lIvaInc\n   local nSbrAtp\n   local nDtoAtp\n   local nKgsTrn\n   local nTotalLin         := 0\n   local nTotalUnd         := 0\n   local aTotalDto         := { 0, 0, 0 }\n   local aTotalDPP         := { 0, 0, 0 }\n   local aTotalUno         := { 0, 0, 0 }\n   local aTotalDos         := { 0, 0, 0 }\n   local aTotalAtp         := { 0, 0, 0 }\n   local aTotalEnt         := { 0, 0, 0 }\n   local nDescuentosLineas := 0\n   local lPntVer           := .f.\n\n   DEFAULT cFacCliT        := dbfFacCliT\n   DEFAULT cFacCliL        := dbfFacCliL\n   DEFAULT cFacCliP        := dbfFacCliP\n   DEFAULT cAntCliT        := dbfAntCliT\n   DEFAULT cIva            := dbfIva\n   DEFAULT cDiv            := dbfDiv\n   DEFAULT cFactura        := ( cFacCliT )->cSerie + Str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac\n   DEFAULT lPic            := .f.\n   DEFAULT lNeto           := .f.\n\n   if Empty( Select( cFacCliT ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cFacCliL ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cIva ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cDiv ) )\n      Return ( 0 )\n   end if\n\n   /*\n   Inicializamos las varialbes-------------------------------------------------\n   */\n\n   public nTotFac    := 0\n   public nTotBrt    := 0\n   public nTotDto    := 0\n   public nTotDPP    := 0\n   public nTotNet    := 0\n   public nTotSup    := 0\n   public nTotIva    := 0\n   public nTotIvm    := 0\n   public nTotAge    := 0\n   public nTotReq    := 0\n   public nTotPnt    := 0\n   public nTotUno    := 0\n   public nTotDos    := 0\n   public nTotRet    := 0\n   public nTotTrn    := 0\n   public nTotAnt    := 0\n   public nTotCos    := 0\n   public nTotCob    := 0\n   public nTotPes    := 0\n   public nTotRnt    := 0\n   public nTotAtp    := 0\n   public nTotArt    := 0\n   public nTotCaj    := 0\n   public nTotImp    := 0\n   public nTotPctRnt := 0\n   public nTotalDto  := 0\n   public cCtaCli    := cClientCuenta( ( cFacCliT )->cCodCli )\n\n   public aTotIva    := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }\n   public aIvaUno    := aTotIva[ 1 ]\n   public aIvaDos    := aTotIva[ 2 ]\n   public aIvaTre    := aTotIva[ 3 ]\n\n   public aTotIvm    := { { 0,0,0 }, { 0,0,0 }, { 0,0,0 }, }\n   public aIvmUno    := aTotIvm[ 1 ]\n   public aIvmDos    := aTotIvm[ 2 ]\n   public aIvmTre    := aTotIvm[ 3 ]\n\n   public aImpVto    := {}\n   public aDatVto    := {}\n\n   nRec              := ( cFacCliL )->( Recno() )\n\n   if aTmp != nil\n      nDtoUno        := aTmp[ _NDTOUNO ]\n      nDtoDos        := aTmp[ _NDTODOS ]\n      lRecargo       := aTmp[ _LRECARGO]\n      nDtoEsp        := aTmp[ _NDTOESP ]\n      nDtoPP         := aTmp[ _NDPP    ]\n      nPorte         := aTmp[ _NPORTES ]\n      nManObr        := aTmp[ _NMANOBR ]\n      nIvaMan        := aTmp[ _NIVAMAN ]\n      lIvaInc        := aTmp[ _LIVAINC ]\n      cCodDiv        := aTmp[ _CDIVFAC ]\n      nTipRet        := aTmp[ _NTIPRET ]\n      nPctRet        := aTmp[ _NPCTRET ]\n      nSbrAtp        := aTmp[ _NSBRATP ]\n      nDtoAtp        := aTmp[ _NDTOATP ]\n      nKgsTrn        := aTmp[ _NKGSTRN ]\n      nEntIni        := aTmp[ _NENTINI ]\n      nDtoIni        := aTmp[ _NPCTDTO ]\n      lPntVer        := aTmp[ _LOPERPV ]\n      bCondition     := {|| ( cFacCliL )->( !eof() ) }\n      ( cFacCliL )->( dbGoTop() )\n   else\n      nDtoUno        := ( cFacCliT )->nDtoUno\n      nDtoDos        := ( cFacCliT )->nDtoDos\n      nDtoEsp        := ( cFacCliT )->nDtoEsp\n      nDtoPP         := ( cFacCliT )->nDpp\n      lRecargo       := ( cFacCliT )->lRecargo\n      nPorte         := ( cFacCliT )->nPortes\n      nManObr        := ( cFacCliT )->nManObr\n      nIvaMan        := ( cFacCliT )->nIvaMan\n      lIvaInc        := ( cFacCliT )->lIvaInc\n      cCodDiv        := ( cFacCliT )->cDivFac\n      nTipRet        := ( cFacCliT )->nTipRet\n      nPctRet        := ( cFacCliT )->nPctRet\n      nSbrAtp        := ( cFacCliT )->nSbrAtp\n      nDtoAtp        := ( cFacCliT )->nDtoAtp\n      nKgsTrn        := ( cFacCliT )->nKgsTrn\n      nEntIni        := ( cFacCliT )->nEntIni\n      nDtoIni        := ( cFacCliT )->nPctDto\n      lPntVer        := ( cFacCliT )->lOperPV\n      bCondition     := {|| ( cFacCliL )->cSerie + Str( ( cFacCliL )->nNumFac ) + ( cFacCliL )->cSufFac == cFactura .and. ( cFacCliL)->(!eof() ) }\n      ( cFacCliL )->( dbSeek( cFactura ) )\n   end if\n\n   /*\n   Cargamos los pictures dependiendo de la moneda\n   */\n\n   cPouDiv           := cPouDiv( cCodDiv, cDiv ) // Picture de la divisa redondeada\n   cPorDiv           := cPorDiv( cCodDiv, cDiv ) // Picture de la divisa redondeada\n   cPpvDiv           := cPpvDiv( cCodDiv, cDiv ) // Picture del punto verde\n   nDouDiv           := nDouDiv( cCodDiv, cDiv ) // Decimales\n   nRouDiv           := nRouDiv( cCodDiv, cDiv ) // Decimales de redondeo\n   nDpvDiv           := nDpvDiv( cCodDiv, cDiv ) // Decimales de redondeo del punto verde\n\n   while Eval( bCondition )\n\n      if lValLine( cFacCliL )\n\n         if ( lExcCnt == nil                                .or.;    // Entran todos\n            ( lExcCnt .and. ( cFacCliL )->nCtlStk != 2 )    .or.;    // Articulos sin contadores\n            ( !lExcCnt .and. ( cFacCliL )->nCtlStk == 2 ) )          // Articulos con contadores\n\n            if ( cFacCliL )->lTotLin\n\n               /*\n               Esto es para evitar escirbir en el fichero muchas veces\n               */\n\n               if ( cFacCliL )->nPreUnit != nTotalLin .OR. ( cFacCliL )->nUniCaja != nTotalUnd\n\n                  if ( cFacCliL )->( dbRLock() )\n                     ( cFacCliL )->nPreUnit := nTotalLin\n                     ( cFacCliL )->nUniCaja := nTotalUnd\n                     ( cFacCliL )->( dbUnLock() )\n                  end if\n\n               end if\n\n               /*\n               Limpien\n               */\n\n               nTotalLin         := 0\n               nTotalUnd         := 0\n\n            else\n\n               nTotalArt         := nTotLFacCli( cFacCliL, nDouDiv, nRouDiv, , , .f., .f. )\n               nTotTrn           := nTrnLFacCli( cFacCliL, nDouDiv )\n               nTotIvm           := nTotIFacCli( cFacCliL, nDouDiv, nRouDiv )\n               nTotPnt           := if( lPntVer, nPntLFacCli( cFacCliL, nDpvDiv ), 0 )\n               nTotCos           += nCosLFacCli( cFacCliL, nDouDiv, nRouDiv )\n               nTotPes           += nPesLFacCli( cFacCliL )\n\n               #ifndef __PDA__\n               nDescuentosLineas += nTotDtoLFacCli( cFacCliL, nDouDiv )\n               #endif\n\n               if aTmp != nil\n                  nTotAge        += nComLFacCli( aTmp, cFacCliL, nDouDiv, nRouDiv )\n               else\n                  nTotAge        += nComLFacCli( cFacCliT, cFacCliL, nDouDiv, nRouDiv )\n               end if\n\n               /*\n               Acumuladores para las lineas de totales\n               */\n\n               nTotalLin         += nTotalArt\n\n               if ( cFacCliL )->lGasSup\n                  nTotSup        += nTotalArt\n               end if\n\n               nTotalUnd         += nTotNFacCli( cFacCliL )\n\n               nTotArt           += nTotNFacCli( cFacCliL )\n               nTotCaj           += ( cFacCliL )->nCanEnt\n\n               /*\n               Estudio de IGIC--------------------------------------------------\n               */\n\n               do case\n               case _NPCTIVA1 == nil .OR. _NPCTIVA1 == ( cFacCliL )->nIva\n\n                  _NPCTIVA1   := ( cFacCliL )->nIva\n                  _NPCTREQ1   := ( cFacCliL )->nReq\n                  _NBRTIVA1   += nTotalArt\n                  _NIVMIVA1   += nTotIvm\n                  _NTRNIVA1   += nTotTrn\n                  _NPNTVER1   += nTotPnt\n\n               case _NPCTIVA2 == nil .OR. _NPCTIVA2 == ( cFacCliL )->nIva\n\n                  _NPCTIVA2   := ( cFacCliL )->nIva\n                  _NPCTREQ2   := ( cFacCliL )->nReq\n                  _NBRTIVA2   += nTotalArt\n                  _NIVMIVA2   += nTotIvm\n                  _NTRNIVA2   += nTotTrn\n                  _NPNTVER2   += nTotPnt\n\n               case _NPCTIVA3 == nil .OR. _NPCTIVA3 == ( cFacCliL )->nIva\n\n                  _NPCTIVA3   := ( cFacCliL )->nIva\n                  _NPCTREQ3   := ( cFacCliL )->nReq\n                  _NBRTIVA3   += nTotalArt\n                  _NIVMIVA3   += nTotIvm\n                  _NTRNIVA3   += nTotTrn\n                  _NPNTVER3   += nTotPnt\n\n               end case\n\n               // Estudio de los impuestos especiales--------------------------\n\n               if ( cFacCliL )->nValImp != 0\n\n                  do case\n                  case aTotIvm[ 1, 2 ] == 0 .or. ( aTotIvm[ 1, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )\n\n                     aTotIvm[ 1, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )\n                     aTotIvm[ 1, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )\n                     aTotIvm[ 1, 3 ]   := Round( aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ], nRouDiv )\n\n                  case aTotIvm[ 2, 2 ] == 0 .or. ( aTotIvm[ 2, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )\n\n                     aTotIvm[ 2, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )\n                     aTotIvm[ 2, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )\n                     aTotIvm[ 2, 3 ]   := Round( aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ], nRouDiv )\n\n                  case aTotIvm[ 3, 2 ] == 0 .or. ( aTotIvm[ 3, 2 ] == Round( ( cFacCliL )->nValImp, nDouDiv ) )\n\n                     aTotIvm[ 3, 1 ]   += nTotNFacCli( cFacCliL ) * if( ( cFacCliL )->lVolImp, NotCero( ( cFacCliL )->nVolumen ), 1 )\n                     aTotIvm[ 3, 2 ]   := Round( ( cFacCliL )->nValImp, nDouDiv )\n                     aTotIvm[ 3, 3 ]   := Round( aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ], nRouDiv )\n\n                  end case\n\n               end if\n\n            end if\n\n         else\n\n            /*\n            Limpien tambien si tenemos una linea de control\n            */\n\n            nTotalLin   := 0\n            nTotalUnd   := 0\n\n         end if\n\n      end if\n\n      ( cFacCliL )->( dbSkip() )\n\n   end while\n\n   ( cFacCliL )->( dbGoTo( nRec ) )\n\n   /*\n   Ordenamos los IGICS de menor a mayor\n   */\n\n   aTotIva           := aSort( aTotIva,,, {|x,y| if( x[3] != nil, x[3], -1 ) > if( y[3] != nil, y[3], -1 )  } )\n\n   _NBASIVA1         := Round( _NBRTIVA1, nRouDiv )\n   _NBASIVA2         := Round( _NBRTIVA2, nRouDiv )\n   _NBASIVA3         := Round( _NBRTIVA3, nRouDiv )\n\n   nTotBrt           := _NBRTIVA1 + _NBRTIVA2 + _NBRTIVA3\n\n   /*\n   Descuentos atipicos sobre base\n   */\n\n   if nSbrAtp <= 1 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   IF nDtoEsp  != 0\n\n      aTotalDto[1]   := Round( _NBASIVA1 * nDtoEsp / 100, nRouDiv )\n      aTotalDto[2]   := Round( _NBASIVA2 * nDtoEsp / 100, nRouDiv )\n      aTotalDto[3]   := Round( _NBASIVA3 * nDtoEsp / 100, nRouDiv )\n\n      nTotDto        := aTotalDto[1] + aTotalDto[2] + aTotalDto[3]\n\n      _NBASIVA1      -= aTotalDto[1]\n      _NBASIVA2      -= aTotalDto[2]\n      _NBASIVA3      -= aTotalDto[3]\n\n   END IF\n\n   /*\n   Descuentos atipicos sobre Dto General\n   */\n\n   if nSbrAtp == 2 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   /*\n   Descuentos por Pronto Pago estos son los buenos\n   */\n\n   if nDtoPP != 0\n\n      aTotalDPP[1]   := Round( _NBASIVA1 * nDtoPP / 100, nRouDiv )\n      aTotalDPP[2]   := Round( _NBASIVA2 * nDtoPP / 100, nRouDiv )\n      aTotalDPP[3]   := Round( _NBASIVA3 * nDtoPP / 100, nRouDiv )\n\n      nTotDPP        := aTotalDPP[ 1 ] + aTotalDPP[ 2 ] + aTotalDPP[ 3 ]\n\n      _NBASIVA1      -= aTotalDPP[1]\n      _NBASIVA2      -= aTotalDPP[2]\n      _NBASIVA3      -= aTotalDPP[3]\n\n   end if\n\n   /*\n   Descuentos atipicos sobre Dto Pronto Pago\n   */\n\n   if nSbrAtp == 3 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   if nDtoUno != 0\n\n      aTotalUno[1]   := Round( _NBASIVA1 * nDtoUno / 100, nRouDiv )\n      aTotalUno[2]   := Round( _NBASIVA2 * nDtoUno / 100, nRouDiv )\n      aTotalUno[3]   := Round( _NBASIVA3 * nDtoUno / 100, nRouDiv )\n\n      nTotUno        := aTotalUno[ 1 ] + aTotalUno[ 2 ] + aTotalUno[ 3 ]\n\n      _NBASIVA1      -= aTotalUno[ 1 ]\n      _NBASIVA2      -= aTotalUno[ 2 ]\n      _NBASIVA3      -= aTotalUno[ 3 ]\n\n   end if\n\n   /*\n   Descuentos atipicos sobre Dto Definido 1\n   */\n\n   if nSbrAtp == 4 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   if nDtoDos != 0\n\n      aTotalDos[1]   := Round( _NBASIVA1 * nDtoDos / 100, nRouDiv )\n      aTotalDos[2]   := Round( _NBASIVA2 * nDtoDos / 100, nRouDiv )\n      aTotalDos[3]   := Round( _NBASIVA3 * nDtoDos / 100, nRouDiv )\n\n      nTotDos        := aTotalDos[ 1 ] + aTotalDos[ 2 ] + aTotalDos[ 3 ]\n\n      _NBASIVA1      -= aTotalDos[ 1 ]\n      _NBASIVA2      -= aTotalDos[ 2 ]\n      _NBASIVA3      -= aTotalDos[ 3 ]\n\n   end if\n\n   /*\n   Descuentos atipicos sobre Dto Definido 2\n   */\n\n   if nSbrAtp == 5 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   /*\n   Total entregas--------------------------------------------------------------\n   */\n\n   if nDtoIni != 0\n\n      aTotalEnt[1]   := Round( _NBASIVA1 * nDtoIni / 100, nRouDiv )\n      aTotalEnt[2]   := Round( _NBASIVA2 * nDtoIni / 100, nRouDiv )\n      aTotalEnt[3]   := Round( _NBASIVA3 * nDtoIni / 100, nRouDiv )\n\n      nTotDtoEnt     := aTotalEnt[ 1 ] + aTotalEnt[ 2 ] + aTotalEnt[ 3 ]\n\n      _NBASIVA1      -= aTotalEnt[ 1 ]\n      _NBASIVA2      -= aTotalEnt[ 2 ]\n      _NBASIVA3      -= aTotalEnt[ 3 ]\n\n   end if\n\n      /*\n      nTotDtoEnt        := Round( nTotEnt * nDtoIni / 100, nRouDiv )\n      nTotNet           -= nTotDtoEnt\n      */\n\n   /*\n   Estudio de \" + cImp() + \" para el Gasto despues de los descuentos----------------------\n   */\n\n   if nManObr != 0\n\n      do case\n      case _NPCTIVA1 == nil .or. _NPCTIVA1 == nIvaMan\n\n         _NPCTIVA1   := nIvaMan\n         _NBASIVA1   += nManObr\n\n      case _NPCTIVA2 == nil .or. _NPCTIVA2 == nIvaMan\n\n         _NPCTIVA2   := nIvaMan\n         _NBASIVA2   += nManObr\n\n      case _NPCTIVA3 == nil .or. _NPCTIVA3 == nIvaMan\n\n         _NPCTIVA3   := nIvaMan\n         _NBASIVA3   += nManObr\n\n      end case\n\n   end if\n\n   /*\n   Una vez echos los descuentos le sumamos los transportes---------------------\n   */\n\n   _NBASIVA1         += _NTRNIVA1\n   _NBASIVA2         += _NTRNIVA2\n   _NBASIVA3         += _NTRNIVA3\n\n   /*\n   Una vez echos los descuentos le sumamos el punto verde----------------------\n   */\n\n   _NBASIVA1         += _NPNTVER1\n   _NBASIVA2         += _NPNTVER2\n   _NBASIVA3         += _NPNTVER3\n\n   /*\n   Una vez echos los descuentos le sumamos el IVMH-----------------------------\n   */\n\n   if uFieldEmpresa( \"lIvaImpEsp\" )\n      _NBASIVA1      += _NIVMIVA1\n      _NBASIVA2      += _NIVMIVA2\n      _NBASIVA3      += _NIVMIVA3\n   end if\n\n   /*\n   Total anticipo--------------------------------------------------------------\n   */\n\n   if !Empty( cAntCliT )\n\n      if aTmp != nil\n\n         nRec                 := ( cAntCliT )->( Recno() )\n\n         ( cAntCliT )->( dbGoTop() )\n         while !( cAntCliT )->( eof() )\n\n            if lIvaInc\n               nTotAnt        := nTotAntCli( cAntCliT, cIva, cDiv )\n            else\n               nTotAnt        := nNetAntCli( cAntCliT, cIva, cDiv )\n            end if\n\n            if !IsNil( _NPCTIVA1 )\n               _NBASIVA1      -= nTotAnt\n            end if\n\n            ( cAntCliT )->( dbSkip() )\n\n         end while\n\n         ( cAntCliT )->( dbGoTo( nRec ) )\n\n      else\n\n         nRec                    := ( cAntCliT )->( Recno() )\n         nOrd                    := ( cAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n\n         if ( cAntCliT )->( dbSeek( cFactura ) )\n\n            while ( ( cAntCliT )->cNumDoc == cFactura .and. !( cAntCliT )->( eof() ) )\n\n               if lIvaInc\n                  nTotAnt        := nTotAntCli( cAntCliT, cIva, cDiv )\n               else\n                  nTotAnt        := nNetAntCli( cAntCliT, cIva, cDiv )\n               end if\n\n               if _NBASIVA1 != 0\n                  _NBASIVA1      -= nTotAnt\n               end if\n\n               ( cAntCliT )->( dbSkip() )\n\n            end while\n\n         end if\n\n         ( cAntCliT )->( OrdSetFocus( nOrd ) )\n         ( cAntCliT )->( dbGoTo( nRec ) )\n\n      end if\n\n   end if\n\n   nTotCob           := nPagFacCli( cFactura, cFacCliT, cFacCliP, cIva, cDiv, nil, .t. )\n\n   /*\n   Calculamos los IGICS---------------------------------------------------------\n   */\n\n   if lIvaInc\n\n      if _NPCTIVA1 != 0\n         _NIMPIVA1   := if( _NPCTIVA1 != nil, Round( _NBASIVA1 / ( Div( 100, _NPCTIVA1 ) + 1 ), nRouDiv ), 0 )\n      end if\n      if _NPCTIVA2 != 0\n         _NIMPIVA2   := if( _NPCTIVA2 != nil, Round( _NBASIVA2 / ( Div( 100, _NPCTIVA2 ) + 1 ), nRouDiv ), 0 )\n      end if\n      if _NPCTIVA3 != 0\n         _NIMPIVA3   := if( _NPCTIVA3 != nil, Round( _NBASIVA3 / ( Div( 100, _NPCTIVA3 ) + 1 ), nRouDiv ), 0 )\n      end if\n\n      if lRecargo\n\n         if _NPCTREQ1 != 0\n            _NIMPREQ1   := if( _NPCTIVA1 != NIL, Round( _NBASIVA1 / ( Div( 100, _NPCTREQ1 ) + 1 ), nRouDiv ), 0 )\n         end if\n         if _NPCTREQ2 != 0\n            _NIMPREQ2   := if( _NPCTIVA2 != NIL, Round( _NBASIVA2 / ( Div( 100, _NPCTREQ2 ) + 1 ), nRouDiv ), 0 )\n         end if\n         if _NPCTREQ3 != 0\n            _NIMPREQ3   := if( _NPCTIVA3 != NIL, Round( _NBASIVA3 / ( Div( 100, _NPCTREQ3 ) + 1 ), nRouDiv ), 0 )\n         end if\n\n      end if\n\n      _NBASIVA1      -= _NIMPIVA1\n      _NBASIVA2      -= _NIMPIVA2\n      _NBASIVA3      -= _NIMPIVA3\n\n      _NBASIVA1      -= _NIMPREQ1\n      _NBASIVA2      -= _NIMPREQ2\n      _NBASIVA3      -= _NIMPREQ3\n\n   else\n\n      _NIMPIVA1      := if( _NPCTIVA1 != NIL, Round( _NBASIVA1 * _NPCTIVA1 / 100, nRouDiv ), 0 )\n      _NIMPIVA2      := if( _NPCTIVA2 != NIL, Round( _NBASIVA2 * _NPCTIVA2 / 100, nRouDiv ), 0 )\n      _NIMPIVA3      := if( _NPCTIVA3 != NIL, Round( _NBASIVA3 * _NPCTIVA3 / 100, nRouDiv ), 0 )\n\n      /*\n      Calculo de recargo\n      */\n\n      if lRecargo\n         _NIMPREQ1   := if( _NPCTIVA1 != NIL, Round( _NBASIVA1 * _NPCTREQ1 / 100, nRouDiv ), 0 )\n         _NIMPREQ2   := if( _NPCTIVA2 != NIL, Round( _NBASIVA2 * _NPCTREQ2 / 100, nRouDiv ), 0 )\n         _NIMPREQ3   := if( _NPCTIVA3 != NIL, Round( _NBASIVA3 * _NPCTREQ3 / 100, nRouDiv ), 0 )\n      end if\n\n   end if\n\n   /*\n   Redondeo del neto de la factura---------------------------------------------\n   */\n\n   nTotNet           := Round( _NBASIVA1 + _NBASIVA2 + _NBASIVA3, nRouDiv )\n\n   /*\n   Total entregas--------------------------------------------------------------\n   */\n\n   nTotEnt           := Round( nTotNet * nEntIni / 100, nRouDiv )\n\n   /*\n   Sumamos los portes al final-------------------------------------------------\n   */\n\n   nTotNet           += nPorte\n\n   /*\n   Total IVMH\n   */\n\n   nTotIvm           := Round( _NIVMIVA1 + _NIVMIVA2 + _NIVMIVA3, nRouDiv )\n\n   /*\n   Total Transpote\n   */\n\n   nTotTrn           := Round( _NTRNIVA1 + _NTRNIVA2 + _NTRNIVA3, nRouDiv )\n\n   /*\n   Total punto verde\n   */\n\n   nTotPnt           := Round( _NPNTVER1 + _NPNTVER2 + _NPNTVER3, nRouDiv )\n\n   /*\n   Total de IGIC\n   */\n\n   nTotIva           := Round( _NIMPIVA1 + _NIMPIVA2 + _NIMPIVA3, nRouDiv )\n\n   /*\n   Total de R.E.---------------------------------------------------------------\n   */\n\n   nTotReq           := Round( _NIMPREQ1 + _NIMPREQ2 + _NIMPREQ3, nRouDiv )\n\n   /*\n   Total de impuestos\n   */\n\n   nTotImp           := Round( nTotIva + nTotReq , nRouDiv ) // + nTotIvm\n\n   /*\n   Total retenciones\n   */\n\n   if nTipRet <= 1\n      nTotRet        := Round( ( nTotNet - nTotSup ) * nPctRet / 100, nRouDiv )\n   else\n      nTotRet        := Round( ( nTotNet - nTotSup + nTotIva ) * nPctRet / 100, nRouDiv )\n   end if\n\n   /*\n   Total rentabilidad----------------------------------------------------------\n   */\n\n   nTotRnt           := Round(         nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )\n\n   nTotPctRnt        := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt, nTotAtp, nTotCos )\n\n   /*\n   Total facturas\n   */\n\n   nTotFac           := Round( nTotNet + nTotImp - nTotRet, nRouDiv )\n\n   /*\n   Total de Agentes\n   */\n\n   nTotAge           := Round( nTotAge, nRouDiv )\n\n   /*\n   Diferencias de pesos\n   */\n\n   if nKgsTrn != 0\n      nTotalDif      := nKgsTrn - nTotPes\n   else\n      nTotalDif      := 0\n   end if\n\n   /*\n   Total de descuentos de la factura-------------------------------------------\n   */\n\n   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp\n\n   /*\n   Estudio de la Forma de Pago-------------------------------------------------\n   */\n\n   if !Empty( dbfFacCliP ) .and. ( dbfFacCliP )->( Used() )\n\n      nOrd           := ( dbfFacCliP )->( OrdSetFocus( \"nNumFac\" ) )\n\n      if ( dbfFacCliP )->( dbSeek( cFactura ) )\n\n         while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFactura .and. !( dbfFacCliP )->( eof() )\n\n            aAdd( aImpVto, ( dbfFacCliP )->nImporte )\n            aAdd( aDatVto, if( Empty( ( dbfFacCliP )->dFecVto ), ( dbfFacCliP )->dPreCob,  ( dbfFacCliP )->dFecVto ) )\n\n            ( dbfFacCliP )->( dbSkip() )\n\n         end while\n\n      end if\n\n      ( dbfFacCliP )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   /*\n   Solicitan una divisa distinta a la q se hizo originalmente la factura-------\n   */\n\n   if cDivRet != nil .and. cDivRet != cCodDiv\n      nTotNet        := nCnv2Div( nTotNet, cCodDiv, cDivRet, cDiv )\n      nTotIva        := nCnv2Div( nTotIva, cCodDiv, cDivRet, cDiv )\n      nTotReq        := nCnv2Div( nTotReq, cCodDiv, cDivRet, cDiv )\n      nTotFac        := nCnv2Div( nTotFac, cCodDiv, cDivRet, cDiv )\n      nTotRet        := nCnv2Div( nTotRet, cCodDiv, cDivRet, cDiv )\n      nTotPnt        := nCnv2Div( nTotPnt, cCodDiv, cDivRet, cDiv )\n      nTotTrn        := nCnv2Div( nTotTrn, cCodDiv, cDivRet, cDiv )\n      nTotAnt        := nCnv2Div( nTotAnt, cCodDiv, cDivRet, cDiv )\n      cPorDiv        := cPorDiv( cDivRet, cDiv )\n   end if\n\nRETURN ( if( lPic, Trans( if( lNeto, nTotNet, nTotFac ), cPorDiv ), if( lNeto, nTotNet, nTotFac ) ) )\n\n//--------------------------------------------------------------------------//\n\nFUNCTION nComLFacCli( dbfFacCliT, dbfFacCliL, nDecOut, nDerOut )\n\n   local nImpLFacCli  := nImpLFacCli( dbfFacCliT, dbfFacCliL, nDecOut, nDerOut, , .f., .t., .f., .f. )\n\nRETURN ( Round( ( nImpLFacCli * ( dbfFacCliL )->nComAge / 100 ), nDerOut ) )\n\n//--------------------------------------------------------------------------//\n\nFUNCTION nPesLFacCli( dbfLin )\n\n   local nCalculo\n\n   DEFAULT dbfLin    := dbfFacCliL\n\n   if !( dbfLin )->lTotLin\n      nCalculo       := Abs( nTotNFacCli( dbfLin ) ) * ( dbfLin )->nPesoKg\n   end if\n\nRETURN ( nCalculo )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nCosLFacCli( dbfLine, nDec, nRec, nVdv, cPouDiv )\n\n   local nCalculo       := 0\n\n   DEFAULT nDec         := 0\n   DEFAULT nRec         := 0\n   DEFAULT nVdv         := 1\n\n   if !( dbfLine )->lKitChl\n      nCalculo          := nTotNFacCli( dbfLine )\n      nCalculo          *= ( dbfLine )->nCosDiv\n   end if\n\n   if nVdv != 0\n      nCalculo          := nCalculo / nVdv\n   end if\n\n   nCalculo             := Round( nCalculo, nRec )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//--------------------------------------------------------------------------//\n\n//\n// Devuelve el punto verde de una linea\n//\n\nFUNCTION nPntLFacCli( dbfLin, nDec, nVdv )\n\n   local nPntVer\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := 0\n   DEFAULT nVdv      := 1\n\n   /*\n   Punto Verde-----------------------------------------------------------------\n   */\n\n   nPntVer           := nPntUFacCli( dbfLin, nDec, nVdv ) * nTotNFacCli( dbfLin )\n\nRETURN ( Round( nPntVer, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTotIFacCli( dbfLin, nDec, nRouDec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := 0\n   DEFAULT nRouDec   := 0\n   DEFAULT nVdv      := 1\n\n   if !( dbfLin )->lTotLin\n\n      /*\n      Tomamos los valores redondeados------------------------------------------\n      */\n\n      nCalculo       := Round( ( dbfLin )->nValImp, nDec )\n\n      /*\n      Unidades-----------------------------------------------------------------\n      */\n\n      nCalculo       *= nTotNFacCli( dbfLin )\n\n      if ( dbfLin )->lVolImp\n         nCalculo    *= NotCero( ( dbfLin )->nVolumen )\n      end if\n\n      nCalculo       := Round( nCalculo / nVdv, nRouDec )\n\n   end if\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION nTrnLFacCli( dbfLin, nDec, nRou, nVdv )\n\n   local nImpTrn\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := 2\n   DEFAULT nRou      := 2\n   DEFAULT nVdv      := 1\n\n   /*\n   Punto Verde\n   */\n\n   nImpTrn           := nTrnUFacCli( dbfLin, nDec ) * nTotNFacCli( dbfLin )\n\n   IF nVdv != 0\n      nImpTrn        := nImpTrn / nVdv\n   END IF\n\nRETURN ( Round( nImpTrn, nRou ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el importe neto de una linea de factura\n*/\n\nFUNCTION nImpUFacCli( uFacCliT, uFacCliL, nDec, nVdv, lIva )\n\n   local lIvaInc\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n   DEFAULT lIva   := .f.\n\n   nCalculo       := nTotUFacCli( uFacCliL, nDec, nVdv )\n\n   if IsArray( uFacCliT )\n\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTOESP ]  / 100, nDec )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDPP    ]  / 100, nDec )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTOUNO ]  / 100, nDec )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTODOS ]  / 100, nDec )\n      lIvaInc     := uFacCliT[ _LIVAINC ]\n\n   else\n\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nDec )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nDec )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nDec )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nDec )\n      lIvaInc     := ( uFacCliT )->lIvaInc\n\n   end if\n\n   if IsArray( uFacCliL )\n\n      if lIva .and. uFacCliL[ _NIVA ] != 0\n         if !lIvaInc\n            nCalculo    += nCalculo * uFacCliL[ _NIVA ] / 100\n         end if\n      else\n         if lIvaInc .and. uFacCliL[ _NIVA ] != 0\n            nCalculo    -= Round( nCalculo / ( 100 / uFacCliL[ _NIVA ] + 1 ), nDec )\n         end if\n      end if\n\n   else\n\n      if lIva .and. ( uFacCliL )->nIva != 0\n         if !lIvaInc\n            nCalculo    += nCalculo * ( uFacCliL )->nIva / 100\n         end if\n      else\n         if lIvaInc .and. ( uFacCliL )->nIva != 0\n            nCalculo    -= Round( nCalculo / ( 100 / ( uFacCliL )->nIva + 1 ), nDec )\n         end if\n      end if\n\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\n//\n// Devuelve el importe real de una linea de articulo\n//\n\nFUNCTION nImpLFacCli( uFacCliT, uFacCliL, nDec, nRou, nVdv, lIva, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local lIvaInc\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nRou   := 0\n   DEFAULT nVdv   := 1\n   DEFAULT lIva   := .f.\n   DEFAULT lDto   := .t.\n   DEFAULT lPntVer:= .f.\n   DEFAULT lImpTrn:= .f.\n\n   nCalculo       := nTotLFacCli( uFacCliL, nDec, nRou, nVdv, .t., lPntVer, lImpTrn )\n\n   if IsArray( uFacCliT )\n\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTOESP ]  / 100, nRou )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDPP    ]  / 100, nRou )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTOUNO ]  / 100, nRou )\n      nCalculo    -= Round( nCalculo * uFacCliT[ _NDTODOS ]  / 100, nRou )\n      lIvaInc     := uFacCliT[ _LIVAINC ]\n\n   else\n\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoEsp / 100, nRou )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDpp    / 100, nRou )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoUno / 100, nRou )\n      nCalculo    -= Round( nCalculo * ( uFacCliT )->nDtoDos / 100, nRou )\n      lIvaInc     := ( uFacCliT )->lIvaInc\n\n   end if\n\n   if IsArray( uFacCliL )\n\n      if lIva .and. uFacCliL[ _NIVA ] != 0\n         if !lIvaInc\n            nCalculo    += nCalculo * uFacCliL[ _NIVA ] / 100\n         end if\n      else\n         if lIvaInc .and. uFacCliL[ _NIVA ] != 0\n            nCalculo    -= Round( nCalculo / ( 100 / uFacCliL[ _NIVA ] + 1 ), nRou )\n         end if\n      end if\n\n   else\n\n      if lIva .and. ( uFacCliL )->nIva != 0\n         if !lIvaInc\n            nCalculo    += nCalculo * ( uFacCliL )->nIva / 100\n         end if\n      else\n         if lIvaInc .and. ( uFacCliL )->nIva != 0\n            nCalculo    -= Round( nCalculo / ( 100 / ( uFacCliL )->nIva + 1 ), nRou )\n         end if\n      end if\n\n   end if\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nImporte unitario del punto verde\n*/\n\nFUNCTION nPntUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT dbfTmpLin := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   nCalculo          := ( dbfTmpLin )->nPntVer\n\n   if nVdv != 0\n      nCalculo       := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTrnUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := ( dbfTmpLin )->nImpTrn\n\n   IF nVdv != 0\n      nCalculo    := nCalculo / nVdv\n   END IF\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nStatic Function KillTrans()\n\n   /*\n   Borramos los ficheros-------------------------------------------------------\n   */\n\n   if !Empty( dbfTmpLin ) .and. ( dbfTmpLin )->( Used() )\n      ( dbfTmpLin )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpInc ) .and. ( dbfTmpInc )->( Used() )\n      ( dbfTmpInc )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpDoc ) .and. ( dbfTmpDoc )->( Used() )\n      ( dbfTmpDoc )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpAnt ) .and. ( dbfTmpAnt )->( Used() )\n      ( dbfTmpAnt )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpPgo ) .and. ( dbfTmpPgo )->( Used() )\n      ( dbfTmpPgo )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpSer ) .and. ( dbfTmpSer )->( Used() )\n      ( dbfTmpSer )->( dbCloseArea() )\n   end if\n\n   dbfTmpLin      := nil\n   dbfTmpInc      := nil\n   dbfTmpDoc      := nil\n   dbfTmpAnt      := nil\n   dbfTmpPgo      := nil\n   dbfTmpSer      := nil\n\n   dbfErase( cTmpLin )\n   dbfErase( cTmpInc )\n   dbfErase( cTmpDoc )\n   dbfErase( cTmpAnt )\n   dbfErase( cTmpPgo )\n   dbfErase( cTmpSer )\n\n   oStock:SetTmpFacCliL()\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\n/*\nComienza la edición de la factura\n*/\n\nSTATIC FUNCTION BeginTrans( aTmp, nMode )\n\n   local nOrd\n   local cFac\n   local oError\n   local oBlock\n   local lErrors  := .f.\n   local cDbfLin  := \"FCliL\"\n   local cDbfInc  := \"FCliI\"\n   local cDbfDoc  := \"FCliD\"\n   local cDbfAnt  := \"FCliA\"\n   local cDbfPgo  := \"FCliP\"\n   local cDbfSer  := \"FCliS\"\n\n   CursorWait()\n\n   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   /*\n   Inicialización de variables-------------------------------------------------\n   */\n\n   cFac           := aTmp[ _CSERIE ] + Str( aTmp[ _NNUMFAC ] ) + aTmp[ _CSUFFAC ]\n   aNumAlb        := {}\n\n   do case\n      case nMode == APPD_MODE\n         nTotalOld   := 0\n\n      case nMode == DUPL_MODE\n         nTotalOld   := 0\n\n      case nMode == EDIT_MODE\n         nTotalOld   := nTotFac\n\n   end case\n\n   /*\n   Actualizacion de riesgo-----------------------------------------------------\n   */\n\n   cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )\n   cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )\n   cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )\n   cTmpAnt        := cGetNewFileName( cPatTmp() + cDbfAnt )\n   cTmpPgo        := cGetNewFileName( cPatTmp() + cDbfPgo )\n   cTmpSer        := cGetNewFileName( cPatTmp() + cDbfSer )\n\n   /*\n   Primero crear la base de datos local----------------------------------------\n   */\n\n   dbCreate( cTmpLin, aSqlStruct( aColFacCli() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .f. )\n\n   if !NetErr()\n\n      ( dbfTmpLin )->( OrdCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpLin )->( OrdCreate( cTmpLin, \"nNumLin\", \"Str( nNumLin, 4 )\", {|| Str( Field->nNumLin ) } ) )\n\n      ( dbfTmpLin )->( OrdCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpLin )->( OrdCreate( cTmpLin, \"Recno\", \"Str( Recno() )\", {|| Str( Recno() ) } ) )\n\n      if ( dbfFacCliL )->( dbSeek( cFac ) )\n         while ( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac ) == cFac .and. !( dbfFacCliL )->( eof() )\n            dbPass( dbfFacCliL, dbfTmpLin, .t. )\n            ( dbfFacCliL )->( dbSkip() )\n         end while\n      endif\n\n      ( dbfTmpLin )->( dbGoTop() )\n\n      oStock:SetTmpFacCliL( dbfTmpLin )\n\n   else\n\n      lErrors     := .t.\n\n   end if\n\n   /*\n   Creamos la tabla temporal\n   */\n\n   dbCreate( cTmpInc, aSqlStruct( aIncFacCli() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .f. )\n   if !NetErr()\n      ( dbfTmpInc )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpInc )->( ordCreate( cTmpInc, \"Recno\", \"Recno()\", {|| Recno() } ) )\n\n      if ( dbfFacCliI )->( dbSeek( cFac ) )\n         while ( ( dbfFacCliI )->cSerie + Str( ( dbfFacCliI )->nNumFac ) + ( dbfFacCliI )->cSufFac == cFac ) .AND. ( dbfFacCliI )->( !eof() )\n            dbPass( dbfFacCliI, dbfTmpInc, .t. )\n            ( dbfFacCliI )->( dbSkip() )\n         end while\n      end if\n\n      ( dbfTmpInc )->( dbGoTop() )\n   else\n      lErrors     := .t.\n   end if\n\n   /*\n   Creamos la tabla temporal\n   */\n\n   dbCreate( cTmpDoc, aSqlStruct( aFacCliDoc() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .f. )\n   if !NetErr()\n      ( dbfTmpDoc )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpDoc )->( ordCreate( cTmpDoc, \"Recno\", \"Recno()\", {|| Recno() } ) )\n\n      if ( dbfFacCliD )->( dbSeek( cFac ) )\n         while ( ( dbfFacCliD )->cSerFac + Str( ( dbfFacCliD )->nNumFac ) + ( dbfFacCliD )->cSufFac == cFac ) .AND. ( dbfFacCliD )->( !eof() )\n            dbPass( dbfFacCliD, dbfTmpDoc, .t. )\n            ( dbfFacCliD )->( dbSkip() )\n         end while\n      end if\n\n      ( dbfTmpDoc )->( dbGoTop() )\n   else\n      lErrors     := .t.\n   end if\n\n   /*\n   Creamos la tabla temporal de anticipos\n   */\n\n   dbCreate( cTmpAnt, aSqlStruct( aItmAntCli() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpAnt, cCheckArea( cDbfInc, @dbfTmpAnt ), .f. )\n   if !NetErr()\n      ( dbfTmpAnt )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpAnt )->( ordCreate( cTmpAnt, \"Recno\", \"Recno()\", {|| Recno() } ) )\n\n      nOrd        := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n\n      if ( dbfAntCliT )->( dbSeek( cFac ) )\n         while ( dbfAntCliT )->cNumDoc == cFac .and. ( dbfAntCliT )->( !eof() )\n            dbPass( dbfAntCliT, dbfTmpAnt, .t. )\n            ( dbfAntCliT )->( dbSkip() )\n         end while\n      end if\n\n      ( dbfTmpAnt )->( dbGoTop() )\n      ( dbfAntCliT )->( OrdSetFocus( nOrd ) )\n   else\n      lErrors     := .t.\n   end if\n\n   /*\n   Creamos la tabla temporal de pagos------------------------------------------\n   */\n\n   dbCreate( cTmpPgo, aSqlStruct( aItmRecCli() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpPgo, cCheckArea( cDbfPgo, @dbfTmpPgo ), .f. )\n\n   if !NetErr()\n\n      ( dbfTmpPgo )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfTmpPgo )->( ordCreate( cTmpPgo , \"cRecDev\", \"CRECDEV\", {|| Field->CRECDEV } ) )\n\n      ( dbfTmpPgo )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpPgo )->( ordCreate( cTmpPgo, \"nNumFac\", \"cSerie + Str( nNumFac ) + cSufFac + Str( nNumRec ) + cTipRec\", {|| Field->cSerie + Str( Field->nNumFac ) + Field->cSufFac + Str( Field->nNumRec ) + Field->cTipRec } ) )\n\n      nOrd        := ( dbfFacCliP )->( OrdSetFocus( \"nNumFac\" ) )\n\n      if ( dbfFacCliP )->( dbSeek( cFac ) ) .and. nMode != DUPL_MODE\n         while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFac .and. ( dbfFacCliP )->( !eof() )\n            if Empty( ( dbfFacCliP )->cTipRec )\n               dbPass( dbfFacCliP, dbfTmpPgo, .t. )\n            end if\n            ( dbfFacCliP )->( dbSkip() )\n         end while\n      end if\n\n      ( dbfTmpPgo  )->( dbGoTop() )\n      ( dbfFacCliP )->( OrdSetFocus( nOrd ) )\n\n   else\n\n      lErrors     := .t.\n\n   end if\n\n   /*\n   Creamos el fichero de series------------------------------------------------\n   */\n\n   dbCreate( cTmpSer, aSqlStruct( aSerFacCli() ), cLocalDriver() )\n   dbUseArea( .t., cLocalDriver(), cTmpSer, cCheckArea( cDbfSer, @dbfTmpSer ), .f. )\n\n   if !( dbfTmpSer )->( NetErr() )\n\n      ( dbfTmpSer )->( OrdCondSet( \"!Deleted()\", {||!Deleted() } ) )\n      ( dbfTmpSer )->( OrdCreate( cTmpSer, \"nNumLin\", \"Str( nNumLin, 4 ) + cRef\", {|| Str( Field->nNumLin, 4 ) + Field->cRef } ) )\n\n      if ( dbfFacCliS )->( dbSeek( cFac ) )\n         while ( ( dbfFacCliS )->cSerFac + Str( ( dbfFacCliS )->nNumFac ) + ( dbfFacCliS )->cSufFac == cFac ) .and. !( dbfFacCliS )->( eof() )\n            dbPass( dbfFacCliS, dbfTmpSer, .t. )\n            ( dbfFacCliS )->( dbSkip() )\n         end while\n      end if\n\n      ( dbfTmpSer )->( dbGoTop() )\n\n      oStock:SetTmpFacCliS( dbfTmpSer )\n\n   else\n\n      lErrors     := .t.\n\n   end if\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible crear tablas temporales.\" + CRLF + ErrorMessage( oError ) )\n\n      KillTrans()\n\n      lErrors     := .t.\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   CursorWE()\n\nReturn ( lErrors )\n\n//-----------------------------------------------------------------------//\n\n/*\nCargaos los datos del cliente\n*/\n\nSTATIC FUNCTION loaCli( aGet, aTmp, nMode, oRieCli, oTlfCli )\n\n   local lValid      := .t.\n   local cNewCodCli  := aGet[ _CCODCLI ]:varGet()\n   local lChgCodCli  := ( Empty( cOldCodCli ) .or. cOldCodCli != cNewCodCli )\n\n   if Empty( cNewCodCli )\n      Return .t.\n   elseif At( \".\", cNewCodCli ) != 0\n      cNewCodCli     := PntReplace( aGet[ _CCODCLI ], \"0\", RetNumCodCliEmp() )\n   else\n      cNewCodCli     := Rjust( cNewCodCli, \"0\", RetNumCodCliEmp() )\n   end if\n\n   if ( dbfClient )->( dbSeek( cNewCodCli ) )\n\n      /*\n      Asignamos el codigo siempre\n      */\n\n      aGet[ _CCODCLI ]:cText( ( dbfClient )->Cod )\n\n      if oTlfCli != nil\n         oTlfCli:SetText( ( dbfClient )->Telefono )\n      end if\n\n      if ( dbfClient )->nColor != 0\n         aGet[ _CNOMCLI ]:SetColor( , ( dbfClient )->nColor )\n      end if\n\n      if Empty( aGet[ _CNOMCLI ]:varGet() ) .or. lChgCodCli\n         aGet[ _CNOMCLI ]:cText( ( dbfClient )->Titulo )\n      end if\n\n      if Empty( aGet[ _CDIRCLI ]:varGet() ) .or. lChgCodCli\n         aGet[ _CDIRCLI ]:cText( ( dbfClient )->Domicilio )\n      end if\n\n      if Empty( aGet[ _CTLFCLI ]:varGet() ) .or. lChgCodCli\n         aGet[ _CTLFCLI ]:cText( ( dbfClient )->Telefono )\n      end if\n\n      if Empty( aGet[_CPOBCLI]:varGet() ) .or. lChgCodCli\n         aGet[_CPOBCLI]:cText( ( dbfClient )->Poblacion )\n      end if\n\n      if !Empty( aGet[_CPRVCLI] )\n         if Empty( aGet[ _CPRVCLI ]:varGet() ) .or. lChgCodCli\n            aGet[ _CPRVCLI ]:cText( ( dbfClient )->Provincia )\n         end if\n      end if\n\n      if !Empty( aGet[_CPOSCLI] )\n         if Empty( aGet[ _CPOSCLI ]:varGet() ) .or. lChgCodCli\n            aGet[ _CPOSCLI ]:cText( ( dbfClient )->CodPostal )\n         end if\n      end if\n\n      if !Empty( aGet[_CDNICLI] )\n         if Empty( aGet[ _CDNICLI ]:varGet() ) .or. lChgCodCli\n            aGet[ _CDNICLI ]:cText( ( dbfClient )->Nif )\n         end if\n      end if\n\n      if Empty( aTmp[ _CCODGRP ] ) .or. lChgCodCli\n         aTmp[ _CCODGRP ]  := ( dbfClient )->cCodGrp\n      end if\n\n      if ( lChgCodCli )\n         aTmp[ _LMODCLI ]  := ( dbfClient )->lModDat\n      end if\n\n      if ( lChgCodCli )\n         aTmp[ _LOPERPV ]  := ( dbfClient )->lPntVer\n      end if\n\n      if nMode == APPD_MODE\n\n         aTmp[ _NREGIVA ]  := ( dbfClient )->nRegIva\n\n         /*\n         Si estamos a¤adiendo cargamos todos los datos del cliente\n         */\n\n         if Empty( aTmp[ _CSERIE ] )\n\n            if !Empty( ( dbfClient )->Serie )\n               aGet[ _CSERIE ]:cText( ( dbfClient )->Serie )\n            end if\n\n         else\n\n            if !Empty( ( dbfClient )->Serie )               .and.;\n               aTmp[ _CSERIE ] != ( dbfClient )->Serie      .and.;\n               ApoloMsgNoYes( \"La serie del cliente seleccionado es distinta a la anterior.\", \"¿Desea cambiar la serie?\" )\n               aGet[ _CSERIE ]:cText( ( dbfClient )->Serie )\n            end if\n\n         end if\n\n         if aGet[ _CCODALM ] != nil\n\n            if ( Empty( aGet[ _CCODALM ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodAlm )\n               aGet[ _CCODALM ]:cText( ( dbfClient )->cCodAlm )\n               aGet[ _CCODALM ]:lValid()\n            end if\n\n         end if\n\n         if aGet[ _CCODTAR ] != nil\n\n            if ( Empty( aGet[ _CCODTAR ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodTar )\n               aGet[ _CCODTAR ]:cText( ( dbfClient )->cCodTar )\n               aGet[ _CCODTAR ]:lValid()\n            end if\n\n         end if\n\n         if ( Empty( aGet[ _CCODPAGO ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->CodPago )\n\n            aGet[ _CCODPAGO ]:cText( ( dbfClient )->CodPago )\n            aGet[ _CCODPAGO ]:lValid()\n\n            /*\n            Si la forma de pago es un movimiento bancario le asignamos el banco y cuenta por defecto\n            */\n\n            if lBancoDefecto( ( dbfClient )->Cod, dbfCliBnc )\n\n               if !Empty( aGet[ _CBANCO ] )\n                  aGet[ _CBANCO ]:cText( ( dbfCliBnc )->cCodBnc )\n                  aGet[ _CBANCO ]:lValid()\n               end if\n\n               if !Empty( aGet[ _CENTBNC ] )\n                  aGet[ _CENTBNC ]:cText( ( dbfCliBnc )->cEntBnc )\n                  aGet[ _CENTBNC ]:lValid()\n               end if\n\n               if !Empty( aGet[ _CSUCBNC ] )\n                  aGet[ _CSUCBNC ]:cText( ( dbfCliBnc )->cSucBnc )\n                  aGet[ _CSUCBNC ]:lValid()\n               end if\n\n               if !Empty( aGet[ _CDIGBNC ] )\n                  aGet[ _CDIGBNC ]:cText( ( dbfCliBnc )->cDigBnc )\n                  aGet[ _CDIGBNC ]:lValid()\n               end if\n\n               if !Empty( aGet[ _CCTABNC ] )\n                  aGet[ _CCTABNC ]:cText( ( dbfCliBnc )->cCtaBnc )\n                  aGet[ _CCTABNC ]:lValid()\n               end if\n\n            end if\n\n         end if\n\n         if aGet[_CCODAGE] != nil\n            if ( Empty( aGet[ _CCODAGE ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cAgente )\n               aGet[ _CCODAGE ]:cText( ( dbfClient )->cAgente )\n               aGet[ _CCODAGE ]:lValid()\n            end if\n         end if\n\n         if ( Empty( aGet[ _CCODRUT ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodRut )\n            aGet[ _CCODRUT ]:cText( ( dbfClient)->cCodRut )\n            aGet[ _CCODRUT ]:lValid()\n         end if\n\n         if ( Empty( aGet[ _NTARIFA ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->nTarifa )\n            aGet[ _NTARIFA ]:cText( ( dbfClient )->nTarifa )\n         end if\n\n         if !Empty( aGet[ _CCODTRN ] ) .and. ( Empty( aGet[ _CCODTRN ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodTrn )\n            aGet[ _CCODTRN ]:cText( ( dbfClient )->cCodTrn )\n            aGet[ _CCODTRN ]:lValid()\n         end if\n\n         if lChgCodCli\n\n            aGet[ _LRECARGO ]:Click( ( dbfClient )->lReq ):Refresh()\n\n            if !Empty( aGet[ _MOBSERV ] )\n               aGet[ _MOBSERV ]:cText( ( dbfClient )->mComent )\n            end if\n\n            /*\n            Retenciones desde la ficha de cliente----------------------------------\n            */\n\n            if !Empty( aGet[ _NTIPRET ] )\n               aGet[ _NTIPRET  ]:Select( ( dbfClient )->nTipRet )\n            else\n               aTmp[ _NTIPRET  ] := ( dbfClient )->nTipRet\n            end if\n\n            if !Empty( aGet[ _NPCTRET ] )\n               aGet[ _NPCTRET  ]:cText( ( dbfClient )->nPctRet )\n            else\n               aTmp[ _NPCTRET  ] := ( dbfClient )->nPctRet\n            end if\n\n            /*\n            Descuentos desde la ficha de cliente----------------------------------\n            */\n\n            if !Empty( aGet[ _CDTOESP ] )\n               aGet[ _CDTOESP ]:cText( ( dbfClient )->cDtoEsp )\n            else\n               aTmp[ _CDTOESP ]  := ( dbfClient )->cDtoEsp\n            end if\n\n            if !Empty( aGet[ _NDTOESP ] )\n               aGet[ _NDTOESP ]:cText( ( dbfClient )->nDtoEsp )\n            else\n               aTmp[ _NDTOESP ]  := ( dbfClient )->nDtoEsp\n            end if\n\n            if !Empty( aGet[ _CDPP    ] )\n               aGet[ _CDPP    ]:cText( ( dbfClient )->cDpp )\n            else\n               aTmp[ _CDPP    ]  := ( dbfClient )->cDpp\n            end if\n\n            if !Empty( aGet[ _NDPP    ] )\n               aGet[ _NDPP    ]:cText( ( dbfClient )->nDpp )\n            else\n               aTmp[ _NDPP    ]  := ( dbfClient )->nDpp\n            end if\n\n            if !Empty( aGet[ _CDTOUNO ] )\n               aGet[ _CDTOUNO ]:cText( ( dbfClient )->cDtoUno )\n            else\n               aTmp[ _CDTOUNO ]  := ( dbfClient )->cDtoUno\n            end if\n\n            if !Empty( aGet[ _CDTODOS ] )\n               aGet[ _CDTODOS ]:cText( ( dbfClient )->cDtoDos )\n            else\n               aTmp[ _CDTODOS ]  := ( dbfClient )->cDtoDos\n            end if\n\n            if !Empty( aGet[ _NDTOUNO ] )\n               aGet[ _NDTOUNO ]:cText( ( dbfClient )->nDtoCnt )\n            else\n               aTmp[ _NDTOUNO ]  := ( dbfClient )->nDtoCnt\n            end if\n\n            if !Empty( aGet[ _NDTODOS ] )\n               aGet[ _NDTODOS ]:cText( ( dbfClient )->nDtoRap )\n            else\n               aTmp[ _NDTODOS ]  := ( dbfClient )->nDtoRap\n            end if\n\n            aTmp[ _NDTOATP ] := ( dbfClient )->nDtoAtp\n\n            aTmp[ _NSBRATP ] := ( dbfClient )->nSbrAtp\n\n         end if\n\n      end if\n\n      if ( dbfClient )->lMosCom .and. !Empty( ( dbfClient )->mComent ) .and. lChgCodCli\n         MsgStop( Trim( ( dbfClient )->mComent ) )\n      end if\n\n      if !Empty( oRieCli ) .and. lChgCodCli\n         oStock:SetRiesgo( cNewCodCli, oRieCli, ( dbfClient )->Riesgo )\n      end if\n\n      ShowInciCliente( ( dbfClient )->Cod, dbfCliInc )\n\n      cOldCodCli  := ( dbfClient )->Cod\n\n      lValid      := .t.\n\n   ELSE\n\n      msgStop( \"Cliente no encontrado\" )\n\n      lValid      := .f.\n\n   END IF\n\nRETURN lValid\n\n//----------------------------------------------------------------------------//\n\nSTATIC FUNCTION RecalculaTotal( aTmp )\n\n   local nTotAntCli  := nTotAntFacCli( nil, dbfTmpAnt, dbfIva, dbfDiv )\n   local nPagFacCli  := nPagFacCli( nil, dbfFacCliT, dbfTmpPgo, dbfIva, dbfDiv, nil, .t. )\n   local nTotFacCli  := nTotFacCli( nil, dbfFacCliT, dbfTmpLin, dbfIva, dbfDiv, dbfFacCliP, dbfTmpAnt, aTmp, nil, .f. )\n\n   /*\n   Refrescos en Pantalla_______________________________________________________\n   */\n\n   if oBrwIva != nil\n      oBrwIva:Refresh()\n   end if\n\n   if oGetAge != nil\n      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )\n   end if\n\n   if oGetNet != nil\n      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )\n   end if\n\n   if oGetIva != nil\n      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )\n   end if\n\n   if oGetRnt != nil\n      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) + AllTrim( cSimDiv( cCodDiv, dbfDiv ) ) + \" : \" + AllTrim( Trans( nTotPctRnt, \"999.99\" ) ) + \"%\" ) )\n   end if\n\n   if oGetEnt != nil\n      oGetEnt:SetText( Trans( nTotEnt, cPorDiv ) )\n   end if\n\n   if oGetDtoEnt != nil\n      oGetDtoEnt:SetText( Trans( nTotDtoEnt, cPorDiv ) )\n   end if\n\n   if oGetReq != nil\n      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )\n   end if\n\n   if oGetTotal != nil\n      oGetTotal:SetText( Trans( nTotFac, cPorDiv ) )\n   end if\n\n   if oTotFacLin != nil\n      oTotFacLin:SetText( Trans( nTotFac, cPorDiv ) )\n   end if\n\n   if oGetTotPg != nil\n      oGetTotPg:SetText( Trans( nTotFac, cPorDiv ) )\n   end if\n\n   if oGetTotIvm != nil\n      oGetTotIvm:SetText( Trans( nTotIvm, cPorDiv ) )\n   end if\n\n   if oGetTotPnt != nil\n      oGetTotPnt:SetText( Trans( nTotPnt, cPorDiv ) )\n   end if\n\n   if oGetTrn != nil\n      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )\n   end if\n\n   if oGetPctRet != nil\n      oGetPctRet:SetText( Trans( nTotRet, cPorDiv ) )\n   end if\n\n   if oGetAnt != nil\n      oGetAnt:SetText( Trans( nTotAntCli, cPorDiv ) )\n   end if\n\n   /*\n   Pagos de la factura_________________________________________________________\n   */\n\n   if oGetPag != nil\n      oGetPag:SetText( Trans( nPagFacCli, cPorDiv ) )\n   end if\n\n   if oGetPdt != nil\n      oGetPdt:SetText( Trans( nTotFacCli - nPagFacCli, cPorDiv ) )\n   end if\n\n   if oGetPes != nil\n      oGetPes:cText( nTotPes )\n   end if\n\n   if oGetDif != nil\n      oGetDif:cText( nTotalDif )\n   end if\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\n/*\nDevuelve el total de pagos de una factura\n*/\n\nFUNCTION nPagFacCli( cFactura, dbfFacCliT, dbfFacCliP, dbfIva, dbfDiv, cDivRet, lOnlyCob, lPic )\n\n   local nOrd\n   local nRec\n   local cPorDiv\n   local nRouDiv        := 2\n   local nTotalPagado   := 0\n   local cCodDiv        := cDivEmp()\n\n   DEFAULT lOnlyCob     := .t.\n   DEFAULT lPic         := .f.\n\n   /*\n   Estan todas en uso----------------------------------------------------------\n   */\n\n   if Empty( Select( dbfFacCliT ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( dbfFacCliP ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( dbfIva ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( dbfDiv ) )\n      Return ( 0 )\n   end if\n\n   /*\n   Si nos pasan la divisa tomamos el valor de la misma-------------------------\n   */\n\n   cCodDiv              := ( dbfFacCliP )->cDivPgo\n   cPorDiv              := cPorDiv( cCodDiv, dbfDiv ) // Picture de la divisa redondeada\n   nRouDiv              := nRouDiv( cCodDiv, dbfDiv )\n\n   if Empty( cFactura )\n\n      nRec              := ( dbfFacCliP )->( Recno() )\n\n      ( dbfFacCliP )->( dbGoTop() )\n      while !( dbfFacCliP )->( Eof() )\n\n         if ( lOnlyCob .and. ( dbfFacCliP )->lCobrado .and. !( dbfFacCliP )->lDevuelto ) .or. !lOnlyCob .and. !( dbfFacCliP )->lDevuelto\n            nTotalPagado+= ( dbfFacCliP )->nImporte\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end while\n\n      ( dbfFacCliP )->( dbGoTo( nRec ) )\n\n   else\n\n      nRec              := ( dbfFacCliP )->( Recno() )\n      nOrd              := ( dbfFacCliP )->( OrdSetFocus( \"NNUMFAC\" ) )\n\n      if ( dbfFacCliP )->( dbSeek( cFactura ) )\n         while ( ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFactura )\n\n            if ( lOnlyCob .and. ( dbfFacCliP )->lCobrado .and. !( dbfFacCliP )->lDevuelto ) .or. ( !lOnlyCob .and. !( dbfFacCliP )->lDevuelto )\n               nTotalPagado+= ( dbfFacCliP )->nImporte\n            end if\n\n            ( dbfFacCliP )->( dbSkip() )\n\n         end while\n      end if\n\n      ( dbfFacCliP )->( OrdSetFocus( nOrd ) )\n      ( dbfFacCliP )->( dbGoTo( nRec ) )\n\n   end if\n\n   if cDivRet != nil .and. cCodDiv != cDivRet\n      nTotalPagado      := nCnv2Div( nTotalPagado, cCodDiv, cDivRet, dbfDiv )\n      cPorDiv           := cPorDiv( cDivRet, dbfDiv ) // Picture de la divisa redondeada\n      nRouDiv           := nRouDiv( cDivRet, dbfDiv )\n   end if\n\n   nTotalPagado         := Round( nTotalPagado, nRouDiv )\n\n   if lPic\n      nTotalPagado      := Trans( nTotalPagado, cPorDiv )\n   end if\n\nRETURN ( nTotalPagado )\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para A¤adir lineas de detalle a una Factura\n*/\n\nSTATIC FUNCTION AppDeta( oBrwDet, bEdtDet, aTmp, lTot, cCodArt, aNumDoc )\n\n   DEFAULT lTot   := .f.\n\n   if lRecibosPagadosTmp( dbfTmpPgo )\n      MsgStop( \"No se pueden añadir registros a una factura con recibos cobrados\" )\n      return .f.\n   end if\n\n   if ( Empty( aNumDoc ) ) .or. lTot // .and. !aTmp[ _LIMPALB ] )\n\n      WinAppRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmp )\n\n   else\n\n      MsgStop( \"No se pueden añadir registros a una factura que\" + CRLF + ;\n               \"proviene de albaranes.\" )\n\n   end if\n\nRETURN RecalculaTotal( aTmp )\n\n//--------------------------------------------------------------------------//\n\n/*\nCalcula totales en las lineas de Detalle\n*/\n\nSTATIC FUNCTION lCalcDeta( aTmp, aTmpFac, lTotal )\n\n   local nCalculo\n   local nUnidades\n   local nCosto\n   local nMargen\n   local nRentabilidad\n   local nBase\n\n   DEFAULT lTotal := .f.\n\n   if aTmp[ __LALQUILER ]\n      nCalculo    := aTmp[ _NPREALQ ]\n   else\n      nCalculo    := aTmp[ _NPREUNIT ]\n   end if\n\n   nCalculo       -= aTmp[ _NDTODIV  ]\n\n   nUnidades      := nTotNFacCli( aTmp )\n\n   /*\n   IVMH\n   */\n\n   if !aTmp[ _LIVALIN ]\n      if aTmp[ _LVOLIMP ]\n         nCalculo += aTmp[ _NVALIMP ] * NotCero( aTmp[ _NVOLUMEN ] )\n      else\n         nCalculo += aTmp[ _NVALIMP ]\n      end if\n   end if\n\n   nCalculo       *= nUnidades\n\n   /*\n   Transporte\n   */\n\n   if aTmp[ _NIMPTRN ] != 0\n      nCalculo    += nUnidades * aTmp[ _NIMPTRN ]\n   end if\n\n   /*\n   Descuentos\n   */\n\n   if aTmp[ _NDTO    ] != 0\n      nCalculo    -= nCalculo * aTmp[ _NDTO    ] / 100\n   end if\n\n   if aTmp[ _NDTOPRM ] != 0\n      nCalculo    -= nCalculo * aTmp[ _NDTOPRM ] / 100\n   end if\n\n   /*\n   Calculo del margen y rentabilidad-------------------------------------------\n   */\n\n   nCosto            := nUnidades * aTmp[ _NCOSDIV ]\n\n   if aTmp[ _LIVALIN ] .and. aTmp[ _NIVA ] != 0\n      nBase          := nCalculo - Round( nCalculo / ( 100 / aTmp[ _NIVA ] + 1 ), nRouDiv )\n   else\n      nBase          := nCalculo\n   end if\n\n   nMargen           := nBase - nCosto\n\n   if nCalculo == 0\n      nRentabilidad  := 0\n   else\n      nRentabilidad  := nRentabilidad( nCalculo, 0, nCosto )\n   end if\n\n   /*\n   Punto Verde-----------------------------------------------------------------\n   */\n\n   if aTmpFac[ _LOPERPV ]\n      nCalculo       += nUnidades * aTmp[ _NPNTVER ]\n   end if\n\n   /*\n   Ponemos el total el la linea------------------------------------------------\n   */\n\n   if !Empty( oTotalLinea )\n      oTotalLinea:cText( nCalculo )\n   end if\n\n   if !Empty( oRentabilidadLinea )\n      oRentabilidadLinea:cText( AllTrim( Trans( nMargen, cPorDiv ) + AllTrim( cSimDiv( cCodDiv, dbfDiv ) ) + \" : \" + AllTrim( Trans( nRentabilidad, \"999.99\" ) ) + \"%\" ) )\n   end if\n\n   if !Empty( oComisionLinea )\n      oComisionLinea:cText( Round( ( nBase * aTmp[ _NCOMAGE ] / 100 ), nRouDiv ) )\n   end if\n\nReturn ( if( !lTotal, .t., nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nComprueba q no existan recibos pagados\n*/\n\nstatic function lRecibosPagadosTmp( dbfTmpPgo )\n\n   local nRecAct\n   local lRecPgd  := .f.\n\n   if Empty( Select( dbfTmpPgo ) )\n      Return ( lRecPgd )\n   end if\n\n   nRecAct        := ( dbfTmpPgo )->( Recno() )\n\n   while !( dbfTmpPgo )->( eof() )\n      if ( dbfTmpPgo )->lCobrado\n         lRecPgd  := .t.\n         exit\n      end if\n      ( dbfTmpPgo )->( dbSkip() )\n   end while\n\n   ( dbfTmpPgo )->( dbGoTo( nRecAct) )\n\nreturn ( lRecPgd )\n\n//----------------------------------------------------------------------------//\n\n/*\nComprtamiento de la caja de dialogo\n*/\n\nSTATIC FUNCTION SetDlgMode( aTmp, aGet, oGet2, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotal, aTmpFac, oRentLin )\n\n   if !lUseCaj()\n      aGet[ _NCANENT ]:Hide()\n   else\n      aGet[ _NCANENT ]:SetText( cNombreCajas() )\n   end if\n\n   aGet[ _NUNICAJA ]:SetText( cNombreUnidades() )\n\n   if !Empty( aGet[ _LGASSUP ] )\n      aGet[ _LGASSUP ]:Show()\n   end if\n\n   if aGet[ _NVALIMP ] != nil\n\n      if !uFieldEmpresa( \"lUseImp\" )\n         aGet[ _NVALIMP ]:Hide()\n         aGet[ _LVOLIMP ]:Hide()\n      else\n\n         if !uFieldEmpresa( \"lModImp\" )\n            aGet[ _NVALIMP ]:Disable()\n         end if\n\n         if !uFieldEmpresa( \"lIvaImpEsp\" )\n            aGet[ _LVOLIMP ]:Disable()\n         end if\n\n      end if\n\n   end if\n\n   if !lTipMov()\n\n      if !Empty( [ _CTIPMOV ] ) .and. !Empty( oGet2 )\n         aGet[ _CTIPMOV ]:hide()\n         oGet2:hide()\n      end if\n\n   end if\n\n   if aGet[ _NIMPTRN ] != nil\n      if !uFieldEmpresa( \"lUsePor\", .f. )\n         aGet[ _NIMPTRN ]:Hide()\n      end if\n   end if\n\n   if aGet[ _NPNTVER ] != nil\n      if !uFieldEmpresa( \"lUsePnt\", .f. ) .or. !aTmpFac[ _LOPERPV ]\n         aGet[ _NPNTVER ]:Hide()\n      end if\n   end if\n\n   if aGet[ _NDTODIV ] != nil\n      if !uFieldEmpresa( \"lDtoLin\", .f. )\n         aGet[ _NDTODIV ]:Hide()\n      end if\n   end if\n\n   if oRentLin != nil .and. oUser():lNotRentabilidad()\n      oRentLin:Hide()\n   end if\n\n   if aTmp[ __LALQUILER ]\n      aGet[ _NPREUNIT ]:Hide()\n      aGet[ _NPREALQ  ]:Show()\n   end if\n\n   if aTmp[ _LLOTE ]\n\n      if !Empty( aGet[ _CLOTE ] )\n         aGet[ _CLOTE ]:Show()\n      end if\n\n      if !Empty( aGet[ _DFECCAD ] )\n         aGet[ _DFECCAD ]:Show()\n      end if\n\n   else\n\n      if !Empty( aGet[ _CLOTE ] )\n         aGet[ _CLOTE ]:Hide()\n      end if\n\n      if !Empty( aGet[ _DFECCAD ] )\n         aGet[ _DFECCAD ]:Hide()\n      end if\n\n   end if\n\n   do case\n   case nMode == APPD_MODE\n\n      aTmp[ _CREF    ]  := Space( 32 )\n      aTmp[ _LIVALIN ]  := aTmpFac[ _LIVAINC ]\n\n      aGet[ _NCANENT ]:cText( 1 )\n      aGet[ _NUNICAJA]:cText( 1 )\n\n      if !Empty( aGet[ _NNUMLIN  ] )\n         aGet[ _NNUMLIN  ]:cText( nLastNum( dbfTmpLin ) )\n      else\n         aTmp[ _NNUMLIN  ] := nLastNum( dbfTmpLin )\n      end if\n\n      aGet[ _CALMLIN ]:cText( aTmpFac[ _CCODALM ] )\n\n      if lTipMov() .and. aGet[ _CTIPMOV ] != nil\n         aGet[ _CTIPMOV  ]:cText( cDefVta() )\n      end if\n\n      aGet[ _CDETALLE]:Show()\n      aGet[ _MLNGDES ]:Hide()\n\n      if aTmpFac[ _NREGIVA ] <= 1\n         aGet[ _NIVA ]:cText( nIva( dbfIva, cDefIva() ) )\n         aTmp[ _NREQ ]:= nReq( dbfIva, cDefIva() )\n      end if\n\n      if !Empty( oStkAct )\n\n         if !uFieldEmpresa( \"lNStkAct\" )\n            oStkAct:Show()\n            oStkAct:cText( 0 )\n         else\n            oStkAct:Hide()\n         end if\n\n      end if\n\n   case ( nMode == EDIT_MODE .OR. nMode == ZOOM_MODE )\n\n      if !Empty( aTmp[ _CREF ] )\n         aGet[_CDETALLE]:show()\n         aGet[_MLNGDES ]:hide()\n      else\n         if !aTmp[ _LCONTROL ]\n            aGet[_CDETALLE]:hide()\n            aGet[_MLNGDES ]:show()\n         else\n            aGet[_CDETALLE]:show()\n            aGet[_MLNGDES ]:hide()\n         end if\n      end if\n\n      if !Empty ( oStock )\n\n         oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n\n         if uFieldEmpresa( \"lNStkAct\" )\n            oStkAct:Hide()\n         end if\n\n      end if\n\n   end case\n\n   if !Empty( aTmp[_CCODPR1 ] )\n\n      if !Empty( aGet[ _CVALPR1 ] )\n         aGet[ _CVALPR1 ]:Show()\n         aGet[ _CVALPR1 ]:lValid()\n      end if\n      if !Empty( oSayPr1 )\n         oSayPr1:Show()\n         oSayPr1:SetText( retProp( aTmp[_CCODPR1], dbfPro ) )\n      end if\n      if !Empty( oSayVp1 )\n         oSayVp1:Show()\n      end if\n\n   else\n\n      if !Empty( aGet[ _CVALPR1 ] )\n         aGet[_CVALPR1 ]:hide()\n      end if\n      if !Empty( oSayPr1 )\n         oSayPr1:hide()\n      end if\n      if !Empty( oSayVp1 )\n         oSayVp1:hide()\n      end if\n\n   end if\n\n   if !Empty( aTmp[_CCODPR2 ] )\n\n      if !Empty( aGet[ _CVALPR2 ] )\n         aGet[ _CVALPR2 ]:Show()\n         aGet[ _CVALPR2 ]:lValid()\n      end if\n      if !Empty( oSayPr2 )\n         oSayPr2:Show()\n         oSayPr2:SetText( retProp( aTmp[ _CCODPR2 ], dbfPro ) )\n      end if\n      if !Empty( oSayVp2 )\n         oSayVp2:Show()\n      end if\n\n   else\n\n      if !Empty( aGet[ _CVALPR2 ] )\n         aGet[_CVALPR2 ]:hide()\n      end if\n      if !Empty( oSayPr2 )\n         oSayPr2:hide()\n      end if\n      if !Empty( oSayVp2 )\n         oSayVp2:hide()\n      end if\n\n   end if\n\n   oTotal:cText( 0 )\n\n   /*\n   Ocultamos las tres unidades de medicion-------------------------------------\n   */\n\n   if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n      aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n   end if\n\n   if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n      aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n   end if\n\n   if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n      aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n   end if\n\n   if oUndMedicion:oDbf:Seek( aTmp[ _CUNIDAD ] )\n\n      if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 1 .and. !Empty( oUndMedicion:oDbf:cTextoDim1 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedUno\" ) ) ]:Show()\n      end if\n\n      if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 2 .and. !Empty( oUndMedicion:oDbf:cTextoDim2 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedDos\" ) ) ]:Show()\n      end if\n\n      if !Empty( aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 3 .and. !Empty( oUndMedicion:oDbf:cTextoDim3 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )\n         aGet[ ( dbfFacCliL )->( fieldpos( \"nMedTre\" ) ) ]:Show()\n      end if\n\n   end if\n\n   /*\n   Mostramos u ocultamos las tarifas por líneas--------------------------------\n   */\n\n   if Empty( aTmp[ _NTARLIN ] )\n      if !Empty( aGet[ _NTARLIN ] )\n         aGet[ _NTARLIN ]:cText( aTmpFac[ _NTARIFA ] )\n      else\n         aTmp[ _NTARLIN ]     := aTmpFac[ _NTARIFA ]\n      end if\n   end if\n\n   if !Empty( aGet[ _NTARLIN ] )\n      if !uFieldEmpresa( \"lPreLin\" )\n         aGet[ _NTARLIN ]:Hide()\n      else\n         aGet[ _NTARLIN ]:Show()\n      end if\n   end if\n\n   /*\n   Focus y validaci¢n----------------------------------------------------------\n   */\n\n   if !Empty( aGet[ _CTIPMOV ] )\n      aGet[ _CTIPMOV ]:lValid()\n   end\n\n   if !Empty( aGet[ _CCODTIP ] )\n      aGet[ _CCODTIP ]:lValid()\n   end if\n\n   aGet[ _CALMLIN ]:lValid()\n\n   if !lAccArticulo() .or. oUser():lNotCostos()\n\n      if !Empty( aGet[ _NCOSDIV ] )\n         aGet[ _NCOSDIV ]:Hide()\n      end if\n\n   end if\n\n   /*\n   Solo pueden modificar los precios los administradores-----------------------\n   */\n\n   if ( Empty( aTmp[ _NPREUNIT ] ) .or. lUsrMaster() .or. oUser():lCambiarPrecio() ) .and. nMode != ZOOM_MODE\n\n      aGet[ _NPREUNIT ]:HardEnable()\n      aGet[ _NIMPTRN  ]:HardEnable()\n\n      if !Empty( aGet[ _NPNTVER ] )\n          aGet[ _NPNTVER ]:HardEnable()\n      end if\n\n      aGet[ _NDTO     ]:HardEnable()\n      aGet[ _NDTOPRM  ]:HardEnable()\n\n      if !Empty( aGet[ _NDTODIV ] )\n         aGet[ _NDTODIV  ]:HardEnable()\n      end if\n\n   else\n\n      aGet[ _NPREUNIT ]:HardDisable()\n      aGet[ _NIMPTRN  ]:HardDisable()\n\n      if !Empty( aGet[ _NPNTVER ] )\n            aGet[ _NPNTVER  ]:HardDisable()\n      end if\n\n      aGet[ _NDTO     ]:HardDisable()\n      aGet[ _NDTOPRM  ]:HardDisable()\n\n      if !Empty(  aGet[ _NDTODIV  ] )\n          aGet[ _NDTODIV  ]:HardDisable()\n      end if\n   end if\n\nReturn nil\n\n//--------------------------------------------------------------------------//\n\nFUNCTION nDtoUFacCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo := ( dbfTmpLin )->nDtoDiv\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   IF nVdv != 0\n      nCalculo    := ( dbfTmpLin )->nDtoDiv / nVdv\n   END IF\n\nRETURN ( round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el total de una linea con impuestos incluidos\n*/\n\nSTATIC FUNCTION nTotFFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfFacCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nRou      := nRouDiv()\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n   DEFAULT lImpTrn   := .t.\n\n   nCalculo          += nTotLFacCli( dbfLin, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )\n   nCalculo          += nTotIFacCli( dbfLin, nDec, nRou, nVdv )\n\nreturn ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nCarga los articulos en la factura\n*/\n\nSTATIC FUNCTION LoaArt( aGet, bmpImage, aTmp, aTmpFac, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, nMode, lFocused )\n\n   local nDtoAge\n   local nImpAtp\n   local nImpOfe\n   local nCosPro\n   local cCodArt              := aGet[ _CREF ]:varGet()\n   local cCodFam\n   local lChgCodArt           := ( Rtrim( cOldCodArt ) != Rtrim( cCodArt ) )\n   local nPrePro              := 0\n   local cPrpArt\n   local nPosComa\n   local cProveedor\n   local nTarOld              := aTmp[ _NTARLIN ]\n   local nNumDto              := 0\n\n   DEFAULT lFocused           := .t.\n\n   if Empty( cCodArt )\n\n      if lRetCodArt()\n         MsgStop( \"No se pueden añadir líneas sin codificar\" )\n         return .f.\n      end if\n\n      if Empty( aTmp[ _NIVA ] ) .and. !aTmp[ _LGASSUP ]\n         aGet[ _NIVA ]:bWhen  := {|| .t. }\n      end if\n\n      aGet[ _CDETALLE ]:cText( Space( 50 ) )\n      aGet[ _CDETALLE ]:bWhen   := {|| .t. }\n      aGet[ _CDETALLE ]:Hide()\n\n      if !Empty( aGet[ _MLNGDES ] )\n         aGet[ _MLNGDES ]:Show()\n         if lFocused\n            aGet[ _MLNGDES ]:SetFocus()\n         end if\n      end if\n\n      if !Empty( aGet[ _CVALPR1 ] )\n         aGet[ _CVALPR1 ]:Hide()\n      end if\n\n      if !Empty( oSayPr1 )\n         oSayPr1:Hide()\n      end if\n\n      if !Empty( oSayVp1 )\n         oSayVp1:Hide()\n      end if\n\n      if !Empty( aGet[_CVALPR2 ] )\n         aGet[_CVALPR1 ]:Hide()\n      end if\n\n      if !Empty( oSayPr2 )\n         oSayPr1:Hide()\n      end if\n\n      if !Empty( oSayVp2 )\n         oSayVp1:Hide()\n      end if\n\n      Return .t.\n\n   end if\n\n   if !aTmp[ _LGASSUP ]\n      if lModIva()\n         aGet[ _NIVA ]:bWhen     := {|| .t. }\n      else\n         aGet[ _NIVA ]:bWhen     := {|| .f. }\n      end if\n   end if\n\n   /*\n   Primero buscamos por codigos de barra y por referencia de proveedor\n   */\n\n   if \",\" $ cCodArt\n      nPosComa                := At( \",\", cCodArt )\n      cProveedor              := RJust( Left( cCodArt, nPosComa - 1 ), \"0\", RetNumCodPrvEmp() )\n      cCodArt                 := cSeekProveedor( cCodArt, dbfArtPrv )\n   else\n      cCodArt                 := cSeekCodebar( cCodArt, dbfCodebar, dbfArticulo )\n   end if\n\n   /*\n   Ahora buscamos por el codigo interno\n   */\n\n   ( dbfArticulo )->( OrdSetFocus( \"Codigo\" ) )\n\n   if ( dbfArticulo )->( dbSeek( cCodArt ) ) .or. ( dbfArticulo )->( dbSeek( Upper( cCodArt ) ) )\n\n      /*\n      Estos valores lo recogemos siempre------------------------------------\n      */\n\n      aTmp[ _LMSGVTA ]        := ( dbfArticulo )->lMsgVta\n      aTmp[ _LNOTVTA ]        := ( dbfArticulo )->lNotVta\n\n      /*\n      Imagen del producto---------------------------------------------------\n      */\n\n      if !Empty( aGet[ _CIMAGEN ] )\n         aGet[ _CIMAGEN ]:cText( ( dbfArticulo )->cImagen )\n      else\n         aTmp[ _CIMAGEN ]     := ( dbfArticulo )->cImagen\n      end if\n\n      if !Empty( bmpImage )\n         if !Empty( aTmp[ _CIMAGEN ] )\n            bmpImage:Show()\n            bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ _CIMAGEN ] ) )\n         else\n            bmpImage:Hide()\n         end if\n      end if\n\n      /*\n      Ahora solo si cambia el codigo-------------------------------------------\n      */\n\n      if ( lChgCodArt )\n\n         if ( dbfArticulo )->lObs\n            MsgStop( \"Artículo catalogado como obsoleto\" )\n            return .f.\n         end if\n\n         cCodArt              := ( dbfArticulo )->Codigo\n\n         aTmp[ _CREF ]        := cCodArt\n         aGet[ _CREF ]:cText( cCodArt )\n\n         if ( dbfArticulo )->lMosCom .and. !Empty( ( dbfArticulo )->mComent )\n            MsgStop( Trim( ( dbfArticulo )->mComent ) )\n         end if\n\n         if !Empty( cProveedor )\n\n            aTmp[ _CCODPRV ]  := cProveedor\n            aTmp[ _CNOMPRV ]  := AllTrim( RetProvee( cProveedor ) )\n            aTmp[ _CREFPRV ]  := Padr( cRefPrvArt( cCodArt, Padr( cProveedor, 12 ) , dbfArtPrv ), 18 )\n\n         else\n\n            aTmp[ _CCODPRV ]  := ( dbfArticulo )->cPrvHab\n            aTmp[ _CNOMPRV ]  := AllTrim( RetProvee( ( dbfArticulo )->cPrvHab ) )\n            aTmp[ _CREFPRV ]  := Padr( cRefPrvArt( cCodArt, ( dbfArticulo )->cPrvHab , dbfArtPrv ), 18 )\n            if ( IsMuebles() )\n               aGet[ _CCODPRV ]:cText( (dbfArticulo)->cPrvHab )\n               aGet[ _CNOMPRV ]:cText( AllTrim( RetProvee( (dbfArticulo)->cPrvHab ) ) )\n               aGet[ _CREFPRV ]:cText( Padr( cRefPrvArt( cCodArt, ( dbfArticulo )->cPrvHab , dbfArtPrv ), 18 ) )\n            end if\n\n         end if\n\n         aGet[ _CDETALLE ]:show()\n         aGet[ _MLNGDES  ]:hide()\n\n         aGet[ _CDETALLE ]:cText( ( dbfArticulo )->Nombre  )\n\n         if aGet[ _MLNGDES ] != nil\n            aGet[ _MLNGDES ]:cText( ( dbfArticulo )->Descrip )\n         else\n            aTmp[ _MLNGDES ]  := ( dbfArticulo )->Descrip\n         end if\n\n         /*\n         Peso y volumen\n         -------------------------------------------------------------------\n         */\n\n         if !Empty( aGet[ _NPESOKG ] )\n            aGet[ _NPESOKG  ]:cText( ( dbfArticulo )->nPesoKg )\n         else\n            aGet[ _NPESOKG  ] := ( dbfArticulo )->nPesoKg\n         end if\n\n         if !Empty( aGet[ _CPESOKG ] )\n             aGet[ _CPESOKG ]:cText( ( dbfArticulo )->cUndDim )\n         else\n             aTmp[ _CPESOKG ] := ( dbfArticulo )->cUndDim\n         end if\n\n         if !Empty( aGet[ _NVOLUMEN ] )\n            aGet[ _NVOLUMEN ]:cText( ( dbfArticulo )->nVolumen )\n         else\n            aGet[ _NVOLUMEN ] := ( dbfArticulo )->nVolumen\n         end if\n\n         if !Empty( aGet[ _CUNIDAD ] )\n             aGet[ _CUNIDAD ]:cText( ( dbfArticulo )->cUnidad )\n             aGet[ _CUNIDAD ]:lValid()\n         else\n             aTmp[ _CUNIDAD ] := ( dbfArticulo )->cUnidad\n         end if\n\n         if !Empty( aGet[ _CVOLUMEN ] )\n             aGet[ _CVOLUMEN ]:cText( ( dbfArticulo )->cVolumen )\n         else\n             aTmp[ _CVOLUMEN ]:= ( dbfArticulo )->cVolumen\n         end if\n\n         if !Empty( aGet[_CCODTIP ] )\n            aGet[ _CCODTIP ]:cText( ( dbfArticulo )->cCodTip )\n         else\n            aTmp[ _CCODTIP ]  := ( dbfArticulo )->cCodTip\n         end if\n\n         /*\n         Factor de comversion\n         ----------------------------------------------------------------------\n         */\n\n         aTmp[ _NFACCNV ]     := 1\n\n         /*\n         Lotes\n         ----------------------------------------------------------------------\n         */\n\n         if ( dbfArticulo )->lLote\n\n            if !Empty( aGet[ _CLOTE ] )\n\n               aGet[ _CLOTE ]:Show()\n\n               if Empty( aGet[ _CLOTE ]:VarGet() )\n                  aGet[ _CLOTE ]:cText( ( dbfArticulo )->cLote )\n                  aGet[ _CLOTE ]:lValid()\n               end if\n\n            else\n\n               if Empty( aTmp[ _CLOTE ] )\n                  aTmp[ _CLOTE ] := ( dbfArticulo )->cLote\n               end if\n\n            end if\n\n            aTmp[ _LLOTE ]    := ( dbfArticulo )->lLote\n\n            if !Empty( aGet[ _DFECCAD ] )\n\n               aGet[ _DFECCAD ]:Show()\n\n               if Empty( aGet[ _DFECCAD ]:VarGet() )\n                  aGet[ _DFECCAD ]:cText( dFechaCaducidadLote( aTmp[ _CREF ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], dbfAlbPrvL, dbfFacPrvL ) )\n               end if\n\n            end if\n\n         else\n\n            if !Empty( aGet[ _CLOTE ] )\n               aGet[ _CLOTE ]:Hide()\n            end if\n\n            if !Empty( aGet[ _DFECCAD ] )\n               aGet[ _DFECCAD ]:Hide()\n            end if\n\n         end if\n\n         /*\n         Cogemos las familias y los grupos de familias\n         */\n\n         cCodFam                 := ( dbfArticulo )->Familia\n\n         if !Empty( cCodFam )\n\n            if aGet[ _CCODFAM ] != nil\n               aGet[ _CCODFAM ]:cText( cCodFam )\n               aGet[ _CCODFAM ]:lValid()\n            else\n               aTmp[ _CCODFAM ]  := cCodFam\n            end if\n\n            if aGet[ _CGRPFAM ] != nil\n               aGet[ _CGRPFAM ]:cText( cGruFam( cCodFam, dbfFamilia ) )\n               aGet[ _CGRPFAM ]:lValid()\n            else\n               aTmp[ _CGRPFAM ]  := cGruFam( cCodFam, dbfFamilia )\n            end if\n\n            if aGet[ _CCODFRA ] != nil\n               aGet[ _CCODFRA ]:cText( cCodFra( cCodFam, dbfFamilia ) )\n               aGet[ _CCODFRA ]:lValid()\n            else\n               aTmp[ _CCODFRA ]  := cCodFra( cCodFam, dbfFamilia )\n            end if\n\n         else\n\n            if aGet[ _CCODFAM ] != nil\n               aGet[ _CCODFAM ]:cText( Space( 8 ) )\n               aGet[ _CCODFAM ]:lValid()\n            end if\n\n            if aGet[ _CGRPFAM ] != nil\n               aGet[ _CGRPFAM ]:cText( Space( 3 ) )\n               aGet[ _CGRPFAM ]:lValid()\n            end if\n\n            if aGet[ _CCODFRA ] != nil\n               aGet[ _CCODFRA ]:cText( Space( 3 ) )\n               aGet[ _CCODFRA ]:lValid()\n            end if\n\n         end if\n\n         /*\n         Tratamientos kits-----------------------------------------------------\n         */\n\n         if ( dbfArticulo )->lKitArt\n\n            aTmp[ _LKITART ]     := ( dbfArticulo )->lKitArt                        // Marcamos como padre del kit\n            aTmp[ _LIMPLIN ]     := lImprimirCompuesto( ( dbfArticulo )->Codigo, dbfArticulo ) // 1 Todos, 2 Compuesto\n            aTmp[ _LKITPRC ]     := lPreciosCompuestos( ( dbfArticulo )->Codigo, dbfArticulo ) // 1 Todos, 2 Compuesto\n\n            if lStockCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )\n\n               if aGet[ _NCTLSTK ] != nil\n                  aGet[ _NCTLSTK ]:SetOption( ( dbfArticulo )->nCtlStock )\n               else\n                  aTmp[ _NCTLSTK ]  := ( dbfArticulo )->nCtlStock\n               end if\n\n            else\n\n               if aGet[ _NCTLSTK ] != nil\n                  aGet[ _NCTLSTK ]:SetOption( STOCK_NO_CONTROLAR )\n               else\n                  aTmp[ _NCTLSTK ]  := STOCK_NO_CONTROLAR\n               end if\n\n            end if\n\n         else\n\n            aTmp[ _LIMPLIN ]     := .f.\n\n            if aGet[ _NCTLSTK ] != nil\n               aGet[ _NCTLSTK ]:SetOption( ( dbfArticulo )->nCtlStock )\n            else\n               aTmp[ _NCTLSTK ]  := ( dbfArticulo )->nCtlStock\n            end if\n\n         end if\n\n         /*\n         Ponemos el stock del artículo-----------------------------------------\n         */\n\n         if oStkAct != nil .and. aTmp[ _NCTLSTK ] <= 1\n            oStock:nPutStockActual( cCodArt, aTmp[ _CALMLIN ], , , , aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n            oStkAct:Refresh()\n         end if\n\n         /*\n         Preguntamos si el regimen de \" + cImp() + \" es distinto de Exento\n         */\n\n         if aTmpFac[ _NREGIVA ] <= 1\n            aGet[ _NIVA ]:cText( nIva( dbfIva, ( dbfArticulo )->TipoIva ) )\n            aTmp[ _NREQ ]        := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n         end if\n\n         /*\n         Ahora recogemos el impuesto especial si lo hay---------------------------\n         */\n\n         if !Empty( ( dbfArticulo )->cCodImp )\n\n            aTmp[ _CCODIMP ]     := ( dbfArticulo )->cCodImp\n            aGet[ _NVALIMP ]:cText( oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpFac[ _LIVAINC ], aTmp[ _NIVA ] ) )\n\n            aTmp[ _LVOLIMP ]     := RetFld( ( dbfArticulo )->cCodImp, oNewImp:oDbf:cAlias, \"lIvaVol\" )\n\n            if !Empty( aGet[ _LVOLIMP ] )\n               aGet[ _LVOLIMP ]:Refresh()\n            end if\n\n         end if\n\n         if ( dbfArticulo )->nCajEnt != 0\n            aGet[_NCANENT ]:cText( (dbfArticulo)->nCajEnt )\n         end if\n\n         if ( dbfArticulo )->nUniCaja != 0\n            aGet[_NUNICAJA]:cText( ( dbfArticulo )->nUniCaja )\n         end if\n\n         /*\n         Meses de grantia------------------------------------------------------\n         */\n\n        if !Empty( aGet[ _NMESGRT ] )\n            aGet[ _NMESGRT ]:cText( ( dbfArticulo )->nMesGrt )\n        else\n            aGet[ _NMESGRT ]  := ( dbfArticulo )->nMesGrt\n        end if\n\n         /*\n         Si la comisi¢n del articulo hacia el agente es distinto de cero-------\n         */\n\n         aGet[_NCOMAGE ]:cText( aTmpFac[ _NPCTCOMAGE ] )\n\n         /*\n         Código de la frase publicitaria---------------------------------------\n         */\n\n         if !Empty( ( dbfArticulo )->cCodFra )\n\n            if aGet[ _CCODFRA ] != nil\n               aGet[ _CCODFRA ]:cText( ( dbfArticulo )->cCodFra )\n               aGet[ _CCODFRA ]:lValid()\n            else\n               aTmp[ _CCODFRA ]  := ( dbfArticulo )->cCodFra\n            end if\n\n         end if\n\n         /*\n         Descripciones largas--------------------------------------------------\n         */\n\n         if !Empty( aGet[ _DESCRIP ] )\n            aGet[ _DESCRIP ]:cText( ( dbfArticulo )->Descrip )\n         else\n            aTmp[ _DESCRIP ]     := ( dbfArticulo )->Descrip\n         end if\n\n         /*\n         Buscamos la familia del articulo y anotamos las propiedades-----------\n         */\n\n            aTmp[ _CCODPR1 ]     := ( dbfArticulo )->cCodPrp1\n            aTmp[ _CCODPR2 ]     := ( dbfArticulo )->cCodPrp2\n\n            if !Empty( aTmp[ _CCODPR1 ] )\n\n               if aGet[ _CVALPR1 ] != nil\n                  aGet[ _CVALPR1 ]:show()\n                  if lFocused\n                     aGet[ _CVALPR1 ]:SetFocus()\n                  end if\n               end if\n\n               if oSayPr1 != nil\n                  oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )\n                  oSayPr1:show()\n               end if\n\n               if oSayVp1 != nil\n                  oSayVp1:SetText( \"\" )\n                  oSayVp1:Show()\n               end if\n\n            else\n\n               if !Empty( aGet[ _CVALPR1 ] )\n                  aGet[ _CVALPR1 ]:hide()\n               end if\n\n               if !Empty( oSayPr1 )\n                  oSayPr1:hide()\n               end if\n\n               if !Empty( oSayVp1 )\n                  oSayVp1:hide()\n               end if\n\n            end if\n\n            if !empty( aTmp[ _CCODPR2 ] )\n\n               if aGet[ _CVALPR2 ] != nil\n                  aGet[ _CVALPR2 ]:show()\n               end if\n\n               if oSayPr2 != nil\n                  oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )\n                  oSayPr2:show()\n               end if\n\n               if !Empty( oSayVp2 )\n                  oSayVp2:SetText( \"\" )\n                  oSayVp2:Show()\n               end if\n\n            else\n\n               if !Empty( aGet[ _CVALPR2 ] )\n                  aGet[ _CVALPR2 ]:hide()\n               end if\n\n               if!Empty( oSayPr2 )\n                  oSayPr2:hide()\n               end if\n\n               if !Empty( oSayVp2 )\n                  oSayVp2:hide()\n               end if\n\n            end if\n\n         end if\n\n      /*\n      He terminado de meter todo lo que no son precios ahora es cuando meteré los precios con todas las opciones posibles\n      */\n\n      cPrpArt              := aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ] + aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ]\n\n      if ( lChgCodArt ) .or. ( cPrpArt != cOldPrpArt )\n\n         /*\n         Guardamos el código de la familia\n         */\n\n         if nMode == APPD_MODE\n            cCodFam        := RetFamArt( cCodArt, dbfArticulo )\n         else\n            cCodFam        := aTmp[_CCODFAM]\n         end if\n\n         if aTmp[ __LALQUILER ]\n            aGet[ _NPREUNIT ]:cText( 0 )\n            aGet[ _NPREALQ ]:cText( nPreAlq( aTmp[ _CREF ], aTmp[ _NTARLIN ], aTmpFac[_LIVAINC], dbfArticulo ) )\n         end if\n\n         /*\n         Cargamos el precio recomendado ,el precio de costo y el punto verde\n         */\n\n         if !Empty( aGet[_NPNTVER ] )\n             aGet[ _NPNTVER ]:cText( ( dbfArticulo )->NPNTVER1 )\n         else\n             aTmp [ _NPNTVER ]   :=  ( dbfArticulo )->NPNTVER1\n         end if\n\n         aTmp[_NPVPREC ]         := ( dbfArticulo )->PvpRec\n\n         /*\n         Cargamos los costos------------------------------------------------\n         */\n\n         if !uFieldEmpresa( \"lCosAct\" )\n\n            nCosPro              := oStock:nCostoMedio( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ] )\n\n            if nCosPro == 0\n               nCosPro           := nCosto( aTmp[ _CREF ], dbfArticulo, dbfKit, .f., , dbfDiv )\n            end if\n\n         else\n\n            nCosPro              := nCosto( aTmp[ _CREF ], dbfArticulo, dbfKit, .f., , dbfDiv )\n\n         end if\n\n         if aGet[ _NCOSDIV ] != nil\n            aGet[ _NCOSDIV ]:cText( nCosPro )\n         else\n            aTmp[ _NCOSDIV ]  := nCosPro\n         end if\n\n         /*\n         Descuento de artículo----------------------------------------------\n         */\n\n         nNumDto              := RetFld( aTmpFac[ _CCODCLI ], dbfClient, \"nDtoArt\" )\n\n         if nNumDto != 0\n\n            do case\n               case nNumDto == 1\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt1 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt1\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt1\n                  end if\n\n               case nNumDto == 2\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt2 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt2\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt2\n                  end if\n\n               case nNumDto == 3\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO]:cText( ( dbfArticulo )->nDtoArt3 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt3\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt3\n                  end if\n\n               case nNumDto == 4\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt4 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt4\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt4\n                  end if\n\n               case nNumDto == 5\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt5 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt5\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt5\n                  end if\n\n               case nNumDto == 6\n\n                  if !Empty( aGet[ _NDTO ] )\n                     aGet[ _NDTO]:cText( ( dbfArticulo )->nDtoArt6 )\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt6\n                  else\n                     aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt6\n                  end if\n\n            end case\n\n         end if\n\n         /*\n         Vemos si hay descuentos en las familias----------------------------\n         */\n\n         if aTmp[ _NDTO ] == 0\n\n            if !Empty( aGet[ _NDTO ] )\n               aGet[ _NDTO ]:cText( nDescuentoFamilia( cCodFam, dbfFamilia ) )\n            else\n               aTmp[ _NDTO ]     := nDescuentoFamilia( cCodFam, dbfFamilia )\n            end if\n\n         end if\n\n         //--guardamos el precio del artículo dependiendo de las propiedades--//\n\n         nPrePro           := nPrePro( aTmp[ _CREF ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ], aTmp[ _NTARLIN ], aTmpFac[ _LIVAINC ], dbfArtDiv, dbfTarPreL, aTmpFac[_CCODTAR] )\n\n         if nPrePro == 0\n            aGet[_NPREUNIT]:cText( nRetPreArt( aTmp[ _NTARLIN ], aTmpFac[ _CDIVFAC ], aTmpFac[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva, , aGet[ _NTARLIN ] ) )\n         else\n            aGet[_NPREUNIT]:cText( nPrePro )\n         end if\n\n         //--Precios en tarifas--//\n\n         if !Empty( aTmpFac[_CCODTAR] )\n\n            //--Precio--//\n            nImpOfe  := RetPrcTar( cCodArt, aTmpFac[ _CCODTAR ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], dbfTarPreL, aTmp[ _NTARLIN ] )\n            if nImpOfe != 0\n               aGet[_NPREUNIT]:cText( nImpOfe )\n            end if\n\n            //--Descuento porcentual--//\n            nImpOfe  := RetPctTar( cCodArt, cCodFam, aTmpFac[ _CCODTAR ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], dbfTarPreL )\n            if nImpOfe != 0\n               aGet[_NDTO   ]:cText( nImpOfe )\n            end if\n\n            //--Descuento lineal--//\n            nImpOfe  := RetLinTar( cCodArt, cCodFam, aTmpFac[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], dbfTarPreL )\n            if nImpOfe != 0\n               aGet[_NDTODIV]:cText( nImpOfe )\n            end if\n\n            //--Comision de agente--//\n            nImpOfe  := RetComTar( cCodArt, cCodFam, aTmpFac[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpFac[_CCODAGE], dbfTarPreL, dbfTarPreS )\n            if nImpOfe != 0\n               aGet[_NCOMAGE]:cText( nImpOfe )\n            end if\n\n            //--Descuento de promoci¢n--//\n\n            nImpOfe  := RetDtoPrm( cCodArt, cCodFam, aTmpFac[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpFac[_DFECFAC], dbfTarPreL )\n            if nImpOfe  != 0\n               aGet[_NDTOPRM]:cText( nImpOfe )\n            end if\n\n            //--Descuento de promoci¢n para el agente--//\n\n            nDtoAge  := RetDtoAge( cCodArt, cCodFam, aTmpFac[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpFac[_DFECFAC], aTmpFac[_CCODAGE], dbfTarPreL, dbfTarPreS )\n            if nDtoAge  != 0\n               aGet[_NCOMAGE]:cText( nDtoAge )\n            end if\n\n         end if\n\n         //--Chequeamos situaciones especiales--//\n         //--Atipicas de clientes por artículos--//\n\n         do case\n            case lSeekAtpArt( aTmpFac[ _CCODCLI ] + cCodArt, aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ], aTmpFac[ _DFECFAC ], dbfClientAtp ) .and. ;\n            ( dbfClientAtp )->lAplFac\n\n            nImpAtp     := nImpAtp( nTarOld, dbfClientAtp, , , aGet[ _NTARLIN ] )\n            if nImpAtp  != 0\n               aGet[ _NPREUNIT ]:cText( nImpAtp )\n            end if\n\n            /*\n            Descuentos por tarifas de precios----------------------------\n            */\n\n            nImpAtp     := nDtoAtp( nTarOld, dbfClientAtp )\n            if nImpAtp  != 0\n               aGet[ _NDTO ]:cText( nImpAtp )\n            end if\n\n            /*\n            Descuento por promocion--------------------------------------\n            */\n\n            if ( dbfClientAtp )->nDprArt != 0\n               aGet[ _NDTOPRM ]:cText( ( dbfClientAtp )->NDPRART )\n            end if\n\n            if ( dbfClientAtp )->nComAge != 0\n               aGet[ _NCOMAGE ]:cText( ( dbfClientAtp )->NCOMAGE )\n            end if\n\n            if ( dbfClientAtp )->nDtoDiv != 0\n               aGet[ _NDTODIV ]:cText( ( dbfClientAtp )->nDtoDiv )\n            end if\n\n         //--Atipicas de clientes por artículos--//\n\n         case lSeekAtpFam( aTmpFac[_CCODCLI] + aTmp[ _CCODFAM ], aTmpFac[_DFECFAC], dbfClientAtp ) .and. ;\n               ( dbfClientAtp )->lAplFac\n\n            if ( dbfClientAtp )->nDtoArt != 0\n               aGet[ _NDTO    ]:cText( ( dbfClientAtp )->NDTOART )\n            end if\n\n            if ( dbfClientAtp )->NDPRART != 0\n               aGet[ _NDTOPRM ]:cText( ( dbfClientAtp )->NDPRART )\n            end if\n\n            if ( dbfClientAtp )->NCOMAGE != 0\n               aGet[ _NCOMAGE ]:cText( ( dbfClientAtp )->NCOMAGE )\n            end if\n\n            if ( dbfClientAtp )->nDtoDiv != 0\n               aGet[ _NDTODIV ]:cText( ( dbfClientAtp )->nDtoDiv )\n            end if\n\n         end case\n\n         /*\n         Cargamos el codigo de las unidades---------------------------------\n         */\n\n         if !Empty( aGet[ _CUNIDAD ] )\n            aGet[ _CUNIDAD ]:cText( ( dbfArticulo )->cUnidad )\n         else\n            aTmp[ _CUNIDAD ]  := ( dbfArticulo )->cUnidad\n         end if\n\n         ValidaMedicion( aTmp, aGet )\n\n      end if\n\n      /*\n      Buscamos si hay ofertas-----------------------------------------------\n      */\n\n      lBuscaOferta( cCodArt, aGet, aTmp, aTmpFac, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )\n\n      /*\n      Cargamos los valores para los cambios---------------------------------\n      */\n\n      cOldPrpArt  := cPrpArt\n      cOldCodArt  := cCodArt\n\n      /*\n      Solo pueden modificar los precios los administradores--------------\n      */\n\n      if Empty( aTmp[ _NPREUNIT ] ) .or. lUsrMaster() .or. oUser():lCambiarPrecio()\n\n         aGet[ _NPREUNIT ]:HardEnable()\n         aGet[ _NIMPTRN ]:HardEnable()\n\n         if !Empty( aGet[ _NPNTVER ] )\n             aGet[ _NPNTVER ]:HardEnable()\n         end if\n\n         aGet[ _NDTO    ]:HardEnable()\n         aGet[ _NDTOPRM ]:HardEnable()\n\n         if !Empty( aGet[ _NDTODIV ] )\n             aGet[ _NDTODIV ]:HardEnable()\n         end if\n\n      else\n\n         aGet[ _NPREUNIT ]:HardDisable()\n         aGet[ _NIMPTRN ]:HardDisable()\n\n         if !Empty( aGet[ _NPNTVER ] )\n             aGet[ _NPNTVER ]:HardEnable()\n         end if\n         aGet[ _NDTO    ]:HardDisable()\n         aGet[ _NDTOPRM ]:HardDisable()\n\n         if !Empty( aGet[ _NDTODIV ] )\n             aGet[ _NDTODIV ]:HardEnable()\n         end if\n\n      end if\n\n   else\n\n      MsgStop( \"Artículo no encontrado\" )\n      Return .f.\n\n   end if\n\nRETURN .t.\n\n//--------------------------------------------------------------------------//\n\n/*\nGuarda la linea de detalle\n*/\n\nSTATIC FUNCTION SaveDeta( aTmp, aTmpFac, aGet, oGet2, oBrw, oDlg, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, oTotal, oStkAct, nStkAct, cCodArt, oBtn, oBtnSer )\n\n   local aXbyStr\n   local nTotUnd  := 0\n   local nRec     := ( dbfTmpLin )->( RecNo() )\n   local aClo     := aClone( aTmp )\n\n#ifndef __PDA__\n\n   oBtn:SetFocus()\n\n   if !aGet[ _CREF ]:lValid()\n      return nil\n   end if\n\n#endif\n\n   /*\n   Fin de modo de edición multiple\n   */\n\n   if !lMoreIva( aTmp[_NIVA] )\n      return nil\n   end if\n\n   if Empty( aTmp[ _CALMLIN ] )\n      MsgStop( \"Código de almacen no puede estar vacio\" )\n      aGet[ _CALMLIN ]:SetFocus()\n      Return nil\n   end if\n\n   if !cAlmacen( aGet[ _CALMLIN ], dbfAlm )\n      Return nil\n   end if\n\n   /*\n   Comprobamos si tiene que introducir números de serie------------------------\n   */\n\n   if ( nMode == APPD_MODE ) .and. RetFld( aTmp[ _CREF ], dbfArticulo, \"lNumSer\" ) .and. !( dbfTmpSer )->( dbSeek( Str( aTmp[ _NNUMLIN ], 4 ) + aTmp[ _CREF ] ) )\n      MsgStop( \"Tiene que introducir números de serie para este artículo.\" )\n      oBtnSer:Click()\n      Return nil\n   end if\n\n   /*\n   Modo de edición multiple los cambios afectan a todos los registros seleccionados\n   */\n\n   if nMode == MULT_MODE\n\n      ( dbfTmpLin )->( dbGoTop() )\n      while !( dbfTmpLin )->( eof() )\n\n         if ( dbfTmpLin )->lSel\n            aEval( aTmp, {| cFld, n | if( !Empty( aTmp[ n ] ), ( dbfTmpLin )->( FieldPut( n, aTmp[ n ] ) ), ) } )\n         end if\n\n         ( dbfTmpLin )->( dbSkip() )\n\n      end while\n\n      ( dbfTmpLin )->( dbGoTo( nRec ) )\n\n      oBrw:Refresh()\n\n      oDlg:end( IDOK )\n\n      return nil\n\n   end if\n\n#ifndef __PDA__\n\n   if !Empty( aTmp[ _CREF ] ) .and. ( aTmp[ _LNOTVTA ] .or. aTmp[ _LMSGVTA ] )\n\n      nTotUnd     := nTotNFacCli( aTmp )\n\n      if nMode == EDIT_MODE\n         nTotUnd  -= nTotNFacCli( dbfTmpLin )\n      end if\n\n      if nTotUnd != 0\n\n         do case\n            case oStkAct:VarGet() - nTotUnd < 0\n\n               if aTmp[ _LNOTVTA ]\n                  MsgStop( \"No hay stock suficiente, tenemos \" + Alltrim( Trans( oStkAct:VarGet(), MasUnd() ) ) + \" unidad(es) disponible(s),\" + CRLF + \"en almacén \" + aTmp[ _CALMLIN ] + \".\" )\n                  return nil\n               end if\n\n               if aTmp[ _LMSGVTA ]\n                  if !ApoloMsgNoYes( \"No hay stock suficiente, tenemos \" + Alltrim( Trans( oStkAct:VarGet(), MasUnd() ) ) + \" unidad(es) disponible(s),\" + CRLF + \" en almacén \" + aTmp[ _CALMLIN ] + \".\", \"¿Desea continuar?\" )\n                     return nil\n                  end if\n               end if\n\n            case oStkAct:VarGet() - nTotUnd < RetFld( aTmp[ _CREF ], dbfArticulo, \"nMinimo\"  )\n\n               if aTmp[ _LMSGVTA ]\n                  if !ApoloMsgNoYes( \"El stock está por debajo del minimo.\", \"¿Desea continuar?\" )\n                     return nil\n                  end if\n               end if\n\n         end case\n\n      end if\n\n   end if\n\n   aTmp[ _NREQ ]     := nPReq( dbfIva, aTmp[ _NIVA ] )\n\n#endif\n\n   if nMode == APPD_MODE\n\n      aTmp[ _CREF ]  := cCodArt\n\n      if aTmp[ _LLOTE ]\n         GraLotArt( aTmp[ _CREF ], dbfArticulo, aTmp[ _CLOTE ] )\n      end if\n\n      /*\n      Chequeamos las ofertas X * Y\n      */\n\n      aXbYStr        := nXbYAtipica( aTmp[ _CREF ], aTmpFac[ _CCODCLI ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfClientAtp )\n\n      if aXbYStr[ 1 ] == 0\n\n         /*\n         Chequeamos las ofertas por artículos X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( aTmp[ _CREF ], aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 1 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por familia X  *  Y----------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"FAMILIA\", \"CODIGO\" ), aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 2 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por tipo de artículos X  *  Y------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODTIP\", \"CODIGO\" ), aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 3 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por categoria X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODCATE\", \"CODIGO\" ), aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 4 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por temporada X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODTEMP\", \"CODIGO\" ), aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 5 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por fabricante X  *  Y-------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODFAB\", \"CODIGO\" ), aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, 6 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n      end if\n\n      /*\n      si tenemos q reagalar unidades\n      */\n\n      if aXbYStr[ 1 ] != 0 .and. aXbYStr[ 2 ] != 0\n\n         /*\n         Tenemos oferta vamos a ver de q tipo\n         */\n\n         if aXbYStr[ 1 ] == 1\n\n            /*\n            Ofertas de cajas\n            */\n\n            aTmp[ _NCANENT  ] -= aXbYStr[ 2 ]\n            aClo              := aClone( aTmp )\n\n            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .f. )\n\n            /*\n            Guardamos los productos kits---------------------------------------\n            */\n\n            AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n            /*\n            Cajas a regalar----------------------------------------------------\n            */\n\n            aTmp[ _NCANENT  ] := aXbYStr[ 2 ]\n            aTmp[ _NPREUNIT ] := 0\n            aClo              := aClone( aTmp )\n\n            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n            /*\n            Guardamos los productos kits---------------------------------------\n            */\n\n            AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n         else\n\n            /*\n            Restamos las unidades q vamos a regalar al total de unidades y guardamos primer registro\n            */\n\n            if aTmp[ _NUNICAJA ] < 0\n               aTmp[ _NUNICAJA ] += aXbYStr[ 2 ]\n            else\n               aTmp[ _NUNICAJA ] -= aXbYStr[ 2 ]\n            end if\n            aClo              := aClone( aTmp )\n\n            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .f. )\n\n            /*\n            Guardamos los productos kits---------------------------------------\n            */\n\n            AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n            /*\n            Productos q vamos a regalar----------------------------------------\n            */\n\n            if aTmp[ _NUNICAJA ] < 0\n               aTmp[ _NUNICAJA ] := -( aXbYStr[ 2 ] )\n            else\n               aTmp[ _NUNICAJA ] := aXbYStr[ 2 ]\n            end if\n\n            aTmp[ _NPREUNIT ] := 0\n            aClo              := aClone( aTmp )\n\n            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n            /*\n            Guardamos los productos kits---------------------------------------\n            */\n\n            AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n         end if\n\n      else\n\n         /*\n         Guardamos el registro de manera normal\n         */\n\n         WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n         /*\n         Guardamos los productos kits\n         */\n\n         AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n      end if\n\n   else\n\n      /*\n      No podemos mover las lineas tipo kit\n\n      ( dbfTmpLin )->( dbGoTop() )\n      while !( dbfTmpLin )->( Eof() )\n         if ( dbfTmpLin )->nNumLin == nNumLin .and. ( dbfTmpLin )->lKit\n            if ( dbfTmpLin )->( dbRLock() )\n               ( dbfTmpLin )->nCanEnt  := aTmp[ _NCANENT ]\n               ( dbfTmpLin )->nUniCaja := aTmp[ _NUNICAJA]\n               ( dbfTmpLin )->( dbUnLock() )\n            end if\n         end if\n         ( dbfTmpLin )->( dbSkip() )\n      end while\n\n      ( dbfTmpLin )->( dbGoTo( nRec ) )\n      */\n\n      /*\n      Guardamos el registro de manera normal\n      */\n\n      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n   end if\n\n   /*\n   Liberacion del bitmap-------------------------------------------------------\n   */\n\n  if !Empty( bmpImage )\n      bmpImage:Hide()\n      PalBmpFree( bmpImage:hBitmap, bmpImage:hPalette )\n   end if\n\n   cOldCodArt     := \"\"\n   cOldUndMed     := \"\"\n\n   if !Empty( aGet[ _CUNIDAD ] )\n      aGet[ _CUNIDAD ]:lValid()\n   end if\n\n   if nMode == APPD_MODE .AND. lEntCon()\n\n      RecalculaTotal( aTmpFac )\n\n      SetDlgMode( aTmp, aGet, oGet2, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, nMode, oTotal, aTmpFac )\n\n      SysRefresh()\n\n      if !Empty( aGet[ _CREF ] )\n         aGet[ _CREF ]:SetFocus()\n      end if\n\n      if !Empty( aGet[ _LVOLIMP ] )\n         aGet[ _LVOLIMP ]:Refresh()\n      end if\n\n   else\n\n      oDlg:end( IDOK )\n\n   end if\n\nReturn nil\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION AppKit( aClo, aTmpFac, dbfTmpLin, dbfArticulo, dbfKit )\n\n   local nRec        := ( dbfTmpLin )->( RecNo() )\n   local nNumLin     := ( dbfTmpLin )->nNumLin\n   local nUnidades   := 0\n   local nStkActual  := 0\n\n   if aClo[ _LKITART ] .and. ( dbfKit )->( dbSeek( aClo[ _CREF ] ) )\n\n      while ( dbfKit )->cCodKit == aClo[ _CREF ] .and. !( dbfKit )->( eof() )\n\n         if ( dbfArticulo )->( dbSeek( ( dbfKit )->cRefKit ) )\n\n            ( dbfTmpLin )->( dbAppend() )\n\n            if lKitAsociado( aClo[ _CREF ], dbfArticulo )\n               ( dbfTmpLin )->nNumLin  := nLastNum( dbfTmpLin )\n               ( dbfTmpLin )->lKitChl  := .f.\n            else\n               ( dbfTmpLin )->nNumLin  := nNumLin\n               ( dbfTmpLin )->lKitChl  := .t.\n            end if\n\n            ( dbfTmpLin )->cRef        := ( dbfKit      )->cRefKit\n            ( dbfTmpLin )->nPreUnit    := ( dbfKit      )->nPreKit\n\n            ( dbfTmpLin )->cDetalle    := ( dbfArticulo )->Nombre\n            ( dbfTmpLin )->nPntVer     := ( dbfArticulo )->nPntVer1\n            ( dbfTmpLin )->nPesokg     := ( dbfArticulo )->nPesoKg\n            ( dbfTmpLin )->cPesokg     := ( dbfArticulo )->cUndDim\n            ( dbfTmpLin )->cUnidad     := ( dbfArticulo )->cUnidad\n            ( dbfTmpLin )->nVolumen    := ( dbfArticulo )->nVolumen\n            ( dbfTmpLin )->cVolumen    := ( dbfArticulo )->cVolumen\n            ( dbfTmpLin )->nCtlStk     := ( dbfArticulo )->nCtlStock\n            ( dbfTmpLin )->cCodImp     := ( dbfArticulo )->cCodImp\n            ( dbfTmpLin )->lLote       := ( dbfarticulo )->lLote\n            ( dbfTmpLin )->nLote       := ( dbfarticulo )->nLote\n            ( dbfTmpLin )->cLote       := ( dbfarticulo )->cLote\n            ( dbfTmpLin )->nPvpRec     := ( dbfArticulo )->PvpRec\n\n            if ( dbfArticulo )->lFacCnv\n               ( dbfTmpLin )->nFacCnv  := ( dbfArticulo )->nFacCnv\n            end if\n\n            ( dbfTmpLin )->nCosDiv     := nCosto( nil, dbfArticulo, dbfKit )\n            ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( dbfArticulo )->cCodImp )\n\n            ( dbfTmpLin )->cSerie      := aClo[ _CSERIE  ]\n            ( dbfTmpLin )->nNumFac     := aClo[ _NNUMFAC ]\n            ( dbfTmpLin )->cSufFac     := aClo[ _CSUFFAC ]\n            ( dbfTmpLin )->nCanEnt     := aClo[ _NCANENT ]\n            ( dbfTmpLin )->dFecha      := aClo[ _DFECHA  ]\n            ( dbfTmpLin )->cTipMov     := aClo[ _CTIPMOV ]\n            ( dbfTmpLin )->nNumLin     := aClo[ _NNUMLIN ]\n            ( dbfTmpLin )->cAlmLin     := aClo[ _CALMLIN ]\n            ( dbfTmpLin )->lIvaLin     := aClo[ _LIVALIN ]\n            ( dbfTmpLin )->nComAge     := aClo[ _NCOMAGE ]\n\n            /*\n            Unidades-----------------------------------------------------------\n            */\n\n            ( dbfTmpLin )->nUniCaja    := aClo[ _NUNICAJA] * ( dbfKit )->nUndKit\n\n            /*\n            Estudio de los tipos de \" + cImp() + \" si el padre el cero todos cero---------\n            */\n\n            if !Empty( aClo[ _NIVA ] )\n               ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )\n               ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n            else\n               ( dbfTmpLin )->nIva     := 0\n               ( dbfTmpLin )->nReq     := 0\n            end if\n\n            /*\n            Propiedades de los kits--------------------------------------------\n            */\n\n            ( dbfTmpLin )->lImpLin     := lImprimirComponente( aClo[ _CREF ], dbfArticulo )   // 1 Todos, 2 Compuesto, 3 Componentes\n            ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( aClo[ _CREF ], dbfArticulo )   // 1 Todos, 2 Compuesto, 3 Componentes\n\n            if ( dbfTmpLin )->lKitPrc\n               ( dbfTmpLin )->nPreUnit := nRetPreArt( aClo[ _NTARLIN ], aTmpFac[ _CDIVFAC ], aTmpFac[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n            end if\n\n            if lStockComponentes( aClo[ _CREF ], dbfArticulo )\n               ( dbfTmpLin )->nCtlStk  := ( dbfArticulo )->nCtlStock\n            else\n               ( dbfTmpLin )->nCtlstk  := STOCK_NO_CONTROLAR // No controlar Stock\n            end if\n\n            /*\n            Descuentos---------------------------------------------------------\n            */\n\n            if ( dbfKit )->lAplDto\n               ( dbfTmpLin )->nDto     := aClo[ _NDTO    ]\n               ( dbfTmpLin )->nDtoPrm  := aClo[ _NDTOPRM ]\n               ( dbfTmpLin )->nDtoDiv  := aClo[ _NDTODIV ]\n            end if\n\n            /*\n            Avisaremos del stock bajo minimo--------------------------------------\n            */\n\n            if ( dbfArticulo)->lMsgVta .and. !uFieldEmpresa( \"lNStkAct\" )\n\n               nStkActual              := oStock:nStockAlmacen( ( dbfKit )->cRefKit, ( dbfTmpLin )->cAlmLin )\n               nUnidades               := aClo[ _NUNICAJA ] * ( dbfKit )->nUndKit\n\n               do case\n                  case nStkActual - nUnidades < 0\n\n                     MsgStop( \"No hay stock suficiente para realizar la venta\" + CRLF + ;\n                              \"del componente \" + AllTrim( ( dbfKit )->cRefKit ) + \" - \" + AllTrim( ( dbfArticulo )->Nombre ),;\n                              \"¡Atención!\" )\n\n                  case nStkActual - nUnidades < ( dbfArticulo)->nMinimo\n\n                     MsgStop( \"El stock del componente \" + AllTrim( ( dbfKit )->cRefKit ) + \" - \" + AllTrim( ( dbfArticulo )->Nombre ) + CRLF + ;\n                              \"está bajo minimo.\" + CRLF + ;\n                              \"Unidades a vender : \" + AllTrim( Trans( nUnidades, MasUnd() ) ) + CRLF + ;\n                              \"Stock mínimo : \" + AllTrim( Trans( ( dbfArticulo)->nMinimo, MasUnd() ) ) + CRLF + ;\n                              \"Stock actual : \" + AllTrim( Trans( nStkActual, MasUnd() ) ),;\n                              \"¡Atención!\" )\n               end case\n\n            end if\n\n         end if\n\n         ( dbfKit )->( dbSkip() )\n\n      end while\n\n      ( dbfTmpLin )->( dbGoTo( nRec ) )\n\n   end if\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION lMoreIva( nCodIva )\n\n   /*\n   Si no esta dentro de los porcentajes anteriores\n   */\n\n   IF _NPCTIVA1 == nil .OR. _NPCTIVA2 == nil .OR. _NPCTIVA3 == nil\n      RETURN .T.\n   END IF\n\n   IF _NPCTIVA1 == nCodIva .OR. _NPCTIVA2 == nCodIva .OR. _NPCTIVA3 == nCodIva\n      RETURN .T.\n   END IF\n\n   MsgStop( \"Factura con más de 3 tipos de \" + cImp() )\n\nRETURN .F.\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para la Edici¢n de Lineas de Detalle en una Factura\n*/\n\nSTATIC FUNCTION EdtDeta( oBrwDet, bEdtDet, aTmp, lTot, nFacMod )\n\n   if lRecibosPagadosTmp( dbfTmpPgo )\n      MsgStop( \"No se pueden modificar registros a una factura con recibos cobrados\" )\n      return .f.\n   end if\n\n   /*\n   Comprobar q no traiga mas de un registros seleccionado si es asi estamos en\n   modo MULT_MODE o edicion de multiple registros\n   */\n\n   if ( dbfTmpLin )->lSel\n      WinMulRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, nFacMod, aTmp )\n   else\n      WinEdtRec( oBrwDet, bEdtDet, dbfTmpLin, lTot, nFacMod, aTmp )\n   end if\n\n   /*\n   if !Empty( aNumAlb ) .or. aTmp[ _LIMPALB ]\n\n      MsgStop( \"No se pueden modificar registros a una factura que\" + CRLF + ;\n               \"proviene de albaranes.\" )\n\n   end if\n   */\n\nRETURN ( RecalculaTotal( aTmp ) )\n\n//--------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para borrar las Lineas de Detalle en una Factura\n*/\n\nSTATIC FUNCTION DelDeta()\n\n   if lRecibosPagadosTmp( dbfTmpPgo )\n      MsgStop( \"No se pueden eliminar registros a una factura con recibos cobrados\" )\n      return .f.\n   end if\n\n   CursorWait()\n\n   while ( dbfTmpSer )->( dbSeek( Str( ( dbfTmpLin )->nNumLin, 4 ) ) )\n      ( dbfTmpSer )->( dbDelete() )\n   end while\n\n   if ( dbfTmpLin )->lKitArt\n      dbDelKit( , dbfTmpLin, ( dbfTmpLin )->nNumLin )\n   end if\n\n   CursorWE()\n\nRETURN .t. //\n\n//--------------------------------------------------------------------------//\n\n/*\nFinaliza la transacción de datos\n*/\n\nSTATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oBrwDet, oBrwPgo, aNumAlb, nMode, oDlg )\n\n   local n\n   local nOrd\n   local oError\n   local oBlock\n   local cSerFac\n   local nNumFac\n   local nNumNFC\n   local cSufFac\n   local cNumPed\n   local cNumAlb\n   local dFecFac\n\n   if Empty( aTmp[ _CSERIE ] )\n      aTmp[ _CSERIE ]   := \"A\"\n   end if\n\n   cSerFac              := aTmp[ _CSERIE  ]\n   nNumFac              := aTmp[ _NNUMFAC ]\n   cSufFac              := aTmp[ _CSUFFAC ]\n   cNumPed              := aTmp[ _CNUMPED ]\n   cNumAlb              := aTmp[ _CNUMALB ]\n   dFecFac              := aTmp[ _DFECFAC ]\n\n   /*\n   Comprobamos la fecha del documento------------------------------------------\n   */\n\n   if !lValidaOperacion( aTmp[ _DFECFAC ] )\n      Return .f.\n   end if\n\n   /*\n   Estos campos no pueden estar vacios-----------------------------------------\n   */\n\n   if lCliBlq( aTmp[ _CCODCLI ], dbfClient )\n      msgStop( \"Cliente bloqueado, no se pueden realizar operaciones de venta\" )\n      aGet[ _CCODCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CNOMCLI ] )\n      msgStop( \"Nombre de cliente no puede estar vacío.\" )\n      aGet[ _CNOMCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CDIRCLI ] )\n      msgStop( \"Domicilio de cliente no puede estar vacío.\" )\n      aGet[ _CDIRCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CDNICLI ] )\n      msgStop( \"D.N.I. / C.I.F. de cliente no puede estar vacío.\" )\n      aGet[ _CDNICLI ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODALM ] )\n      msgStop( \"Almacén no puede estar vacío.\" )\n      aGet[ _CCODALM ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODPAGO ] )\n      msgStop( \"Forma de pago no puede estar vacía.\" )\n      aGet[ _CCODPAGO ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CDIVFAC ] )\n      MsgStop( \"No puede almacenar documento sin código de divisa.\" )\n      aGet[ _CDIVFAC ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODAGE ] ) .and. lRecogerAgentes()\n      msgStop( \"Agente no puede estar vacío.\" )\n      aGet[ _CCODAGE ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODOBR ] ) .and. lObras()\n      MsgStop( \"Debe de introducir una obra.\" )\n      aGet[ _CCODOBR ]:SetFocus()\n      return .f.\n   end if\n\n   if ( dbfTmpLin )->( eof() )\n      MsgStop( \"No puede almacenar un documento sin lineas.\" )\n      return .f.\n   end if\n\n   if lPasNil() .and. ( nMode == APPD_MODE .or. nMode == DUPL_MODE )\n\n      ( dbfTmpLin )->( dbGoTop() )\n      while !( dbfTmpLin )->( eof() )\n\n         if !( dbfTmpLin )->lControl .and. ( dbfTmpLin )->nPreUnit == 0 .and. !( dbfTmpLin )->lKitPrc\n            if !ApoloMsgNoYes( \"El artículo \" + Rtrim( ( dbfTmpLin )->cRef ) + \" - \" + Rtrim( Descrip( dbfTmpLin ) ) + \" no esta valorado.\", \"¿ Desea continuar archivando la factura ?\" )\n               return .f.\n            end if\n         end if\n\n         ( dbfTmpLin )->( dbSkip() )\n\n      end while\n\n   end if\n\n   /*\n   Para q nadie toque mientras grabamos----------------------------------------\n   */\n\n   DisableAcceso()\n\n   oDlg:Disable()\n\n   oBlock      := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      oMsgText( \"Archivando\" )\n      oMeter:Set( 1 )\n\n      BeginTransaction()\n\n      /*\n      Quitamos los filtros--------------------------------------------------------\n      */\n\n      ( dbfTmpLin )->( dbClearFilter() )\n\n      /*\n      Primero hacer el RollBack---------------------------------------------------\n      */\n\n      aTmp[ _DFECCRE ]        := GetSysDate()\n      aTmp[ _CTIMCRE ]        := Time()\n\n      /*\n      Guardamos el tipo para alquileres-------------------------------------------\n      */\n\n      if !Empty( oTipFac ) .and. oTipFac:nAt == 2\n         aTmp[ _LALQUILER ]   := .t.\n      else\n         aTmp[ _LALQUILER ]   := .f.\n      end if\n\n      do case\n      case nMode == APPD_MODE .or. nMode == DUPL_MODE\n\n         oMsgText( \"Obteniendo nuevos numeros\" )\n         oMeter:Set( 2 )\n\n         /*\n         Obtenemos el nuevo numero de la factura----------------------------------\n         */\n\n         nNumFac              := nNewDoc( cSerFac, dbfFacCliT, \"NFACCLI\", , dbfCount )\n         nNumNFC              := nNewNFC( cSerFac, dbfFacCliT, \"NFACCLI\", dbfCount )\n\n         aTmp[ _NNUMFAC ]     := nNumFac\n         aTmp[ _CNFC    ]     := nNumNFC\n\n         aTmp[ _LIMPALB ]     := !Empty( aNumAlb )\n\n      case nMode == EDIT_MODE\n\n         oMsgText( \"Eliminando detalles anteriores\" )\n         oMeter:Set( 2 )\n\n         /*\n         Rollback de todos los articulos si la factura no se importo de albaranes-\n         */\n\n         /*\n         ADSExecuteSQLScript( \"DELETE FROM \" + cPatEmp() + \"FACCLIL\" + \" WHERE cSerie = \" + Quoted( cSerFac ) + \" AND nNumFac = \" + Alltrim( Str( nNumFac ) ) + \" AND cSufFac = \" + Quoted( cSufFac ) )\n         */\n\n         while ( dbfFacCliL )->( dbSeek( cSerFac + str( nNumFac ) + cSufFac ) ) .and. !( dbfFacCliL )->( eof() ) \n            if dbLock( dbfFacCliL )\n               ( dbfFacCliL )->( dbDelete() )\n               ( dbfFacCliL )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n         \n         /*\n         Eliminamos las incidencias anteriores------------------------------------\n         */\n\n         oMsgText( \"Eliminando incidencias anteriores\" )\n\n         while ( ( dbfFacCliI )->( dbSeek( cSerFac + Str( nNumFac ) + cSufFac ) ) .and. !( dbfFacCliI )->( eof() ) )\n            if dbLock( dbfFacCliI )\n               ( dbfFacCliI )->( dbDelete() )\n               ( dbfFacCliI )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n\n         /*\n         Eliminamos las incidencias anteriores------------------------------------\n         */\n\n         oMsgText( \"Eliminando documentos anteriores\" )\n\n         while ( ( dbfFacCliD )->( dbSeek( cSerFac + Str( nNumFac ) + cSufFac ) ) .and. !( dbfFacCliD )->( eof() ) )\n            if dbLock( dbfFacCliD )\n               ( dbfFacCliD )->( dbDelete() )\n               ( dbfFacCliD )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n\n         /*\n         Eliminamos los pagos anteriores------------------------------------------\n         */\n\n         oMsgText( \"Eliminando pagos anteriores\" )\n\n         while ( ( dbfFacCliP )->( dbSeek( cSerFac + Str( nNumFac ) + cSufFac ) ) .and. !( dbfFacCliP )->( eof() ) )\n            if dbLock( dbfFacCliP )\n               ( dbfFacCliP )->( dbDelete() )\n               ( dbfFacCliP )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n\n         /*\n         Eliminamos las series anteriores------------------------------------------\n         */\n\n         oMsgText( \"Eliminando series anteriores\" )\n\n         while ( ( dbfFacCliS )->( dbSeek( cSerFac + Str( nNumFac ) + cSufFac ) ) .and. !( dbfFacCliS )->( eof() ) )\n            if dbLock( dbfFacCliS )\n               ( dbfFacCliS )->( dbDelete() )\n               ( dbfFacCliS )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n\n         /*\n         Eliminamos los anticipos anteriores--------------------------------------\n         */\n\n         oMsgText( \"Eliminando anticipos anteriores\" )\n\n         nOrd                             := ( dbfAntCliT )->( OrdSetFocus( \"cNumDoc\" ) )\n         while ( ( dbfAntCliT )->( dbSeek( cSerFac + Str( nNumFac ) + cSufFac ) ) .and. !( dbfAntCliT )->( eof() ) )\n            if dbLock( dbfAntCliT )\n               ( dbfAntCliT )->lLiquidada := .f.\n               ( dbfAntCliT )->cNumDoc    := \"\"\n               ( dbfAntCliT )->( dbUnLock() )\n            end if\n            SysRefresh()\n         end while\n         ( dbfAntCliT )->( OrdSetFocus( nOrd ) )\n\n      end case\n\n      oMsgText( \"Almancenando datos\" )\n      oMeter:Set( 3 )\n\n      /*\n      Ahora escribimos en el fichero definitivo-----------------------------------\n      */\n\n      ( dbfTmpLin )->( dbGoTop() )\n      while ( dbfTmpLin )->( !eof() )\n         ( dbfTmpLin )->dFecFac  := dFecFac\n         dbPass( dbfTmpLin, dbfFacCliL, .t., cSerFac, nNumFac, cSufFac )\n         ( dbfTmpLin )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Ahora escribimos en el fichero definitivo de inicdencias--------------------\n      */\n\n      oMsgText( \"Almacenando incidencias\" )\n\n      ( dbfTmpInc )->( dbGoTop() )\n      while ( dbfTmpInc )->( !eof() )\n         dbPass( dbfTmpInc, dbfFacCliI, .t., cSerFac, nNumFac, cSufFac )\n         ( dbfTmpInc )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Ahora escribimos en el fichero definitivo de documentos--------------------\n      */\n\n      oMsgText( \"Almacenando documentos\" )\n\n      ( dbfTmpDoc )->( dbGoTop() )\n      while ( dbfTmpDoc )->( !eof() )\n         dbPass( dbfTmpDoc, dbfFacCliD, .t., cSerFac, nNumFac, cSufFac )\n         ( dbfTmpDoc )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Ahora escribimos en el fichero definitivo de series----------------------\n      */\n\n      oMsgText( \"Almacenando series\" )\n\n      ( dbfTmpSer )->( dbGoTop() )\n      while ( dbfTmpSer )->( !eof() )\n         dbPass( dbfTmpSer, dbfFacCliS, .t., cSerFac, nNumFac, cSufFac, dFecFac )\n         ( dbfTmpSer )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Ahora escribimos en el fichero definitivo de anticipos----------------------\n      */\n\n      oMsgText( \"Almacenando anticipos\" )\n\n      ( dbfTmpAnt )->( dbGoTop() )\n      while ( dbfTmpAnt )->( !eof() )\n         if ( dbfAntCliT )->( dbSeek( ( dbfTmpAnt )->cSerAnt + Str( ( dbfTmpAnt )->nNumAnt ) + ( dbfTmpAnt )->cSufAnt ) )\n            if dbLock( dbfAntCliT )\n               ( dbfAntCliT )->lLiquidada := .t.\n               ( dbfAntCliT )->lSndDoc    := .t.\n               ( dbfAntCliT )->cNumDoc    := cSerFac + Str( nNumFac ) + cSufFac\n               ( dbfAntCliT )->dLiquidada := GetSysDate()\n               ( dbfAntCliT )->cTurLiq    := cCurSesion()\n               ( dbfAntCliT )->cCajLiq    := oUser():cCaja()\n               ( dbfAntCliT )->( dbUnLock() )\n            end if\n         end if\n         ( dbfTmpAnt )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Si cambia el cliente en la factura, lo cambiamos en los recibos-------------\n      */\n\n      oMsgText( \"Clientes en recibos\" )\n\n      ( dbfTmpPgo )->( dbGoTop() )\n\n      while ( dbfTmpPgo )->( !eof() )\n\n         if ( dbfTmpPgo )-> cCodCli != aTmp[ _CCODCLI ]\n            ( dbfTmpPgo )-> cCodCli := aTmp[ _CCODCLI ]\n         end if\n\n         if ( dbfTmpPgo )-> cNomCli != aTmp[ _CNOMCLI ]\n            ( dbfTmpPgo )-> cNomCli := aTmp[ _CNOMCLI ]\n         end if\n\n         ( dbfTmpPgo )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n      /*\n      Ahora escribimos en el fichero definitivo de pagos--------------------------\n      */\n\n      oMsgText( \"Almacenando pagos\" )\n\n      ( dbfTmpPgo )->( dbGoTop() )\n      while ( dbfTmpPgo )->( !eof() )\n         dbPass( dbfTmpPgo, dbfFacCliP, .t., cSerFac, nNumFac, cSufFac )\n         ( dbfTmpPgo )->( dbSkip() )\n         SysRefresh()\n      end while\n\n      /*\n      Rellenamos los campos de totales--------------------------------------------\n      */\n\n      oMsgText( \"Guardamos los totales\" )\n      oMeter:Set( 4 )\n\n      aTmp[ _NTOTNET ]  := nTotNet\n      aTmp[ _NTOTIVA ]  := nTotIva\n      aTmp[ _NTOTREQ ]  := nTotReq\n      aTmp[ _NTOTFAC ]  := nTotFac\n      aTmp[ _NTOTSUP ]  := nTotSup\n      aTmp[ _NTOTLIQ ]  := nTotCob\n      aTmp[ _NTOTPDT ]  := nTotFac - nTotCob\n\n      /*\n      Grabamos el registro--------------------------------------------------------\n      */\n\n      oMsgText( \"Guardamos el documento\" )\n      oMeter:Set( 4 )\n\n      WinGather( aTmp, , dbfFacCliT, , nMode )\n\n      /*\n      Actualizamos el estado de los albaranes de clientes-------------------------\n      */\n\n      oMsgText( \"Actualizamos el estado de los albaranes\" )\n      oMeter:Set( 5 )\n\n      if len( aNumAlb ) > 0\n         for n := 1 to len( aNumAlb )\n            if ( dbfAlbCliT )->( dbSeek( aNumAlb[ n ] ) )\n               SetFacturadoAlbaranCliente( .t., , dbfAlbCliT, dbfAlbCliL, dbfAlbCliS, cSerFac + Str( nNumFac ) + cSufFac )\n            end if\n         next\n      end if\n\n      /*\n      Marcamos como pasadas las entregas de pedidos----------------------------\n      */\n\n      oMsgText( \"Actualizamos el estado de los pedidos\" )\n      oMeter:Set( 6 )\n\n      if !Empty( cNumPed )\n\n         /*\n         Si la factura proviene de un pedido, le ponemos el estado----------------\n         */\n\n         oStock:SetEstadoPedCli( cNumPed, .t., cSerFac + Str( nNumFac ) + cSufFac )\n\n         if( dbfPedCliP )->( dbSeek( cNumPed ) )\n\n            while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .and. !( dbfPedCliP )->( Eof() )\n\n               if dbLock( dbfPedCliP )\n                  ( dbfPedCliP )->lPasado := .t.\n                  ( dbfPedCliP )->( dbUnLock() )\n               end if\n\n               ( dbfPedCliP )->( dbSkip() )\n\n               SysRefresh()\n\n            end while\n\n         end if\n\n      end if\n\n      /*\n      Marcamos como pasadas las entregas de albaranes--------------------------\n      */\n\n      oMsgText( \"Marcamos las entregas de los albaranes\" )\n      oMeter:Set( 7 )\n\n      if !Empty( cNumAlb )\n\n         if( dbfAlbCliP )->( dbSeek( cNumAlb ) )\n\n            while ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb == cNumAlb .and. !( dbfAlbCliP )->( Eof() )\n\n               if dbLock( dbfAlbCliP )\n                  ( dbfAlbCliP )->lPasado := .t.\n                  ( dbfAlbCliP )->( dbUnLock() )\n               end if\n\n               ( dbfAlbCliP )->( dbSkip() )\n\n               SysRefresh()\n\n            end while\n\n         end if\n\n      end if\n\n      /*\n      Generar los pagos de las facturas-------------------------------------------\n      */\n\n      oMsgText( \"Generamos los pagos\" )\n      oMeter:Set( 8 )\n\n      GenPgoFacCli( cSerFac + Str( nNumFac ) + cSufFac, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfClient, dbfFPago, dbfDiv, dbfIva, nMode )\n\n      /*\n      Comprobamos el estado de la factura-----------------------------------------\n      */\n\n      oMsgText( \"Comprobamos el estado de la factura\" )\n      oMeter:Set( 8 )\n\n      ChkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )\n\n      /*\n      Escribe los datos pendientes------------------------------------------------\n      */\n\n      oMsgText( \"Escritura definitiva\" )\n\n      dbCommitAll()\n\n      oMsgText( \"Finalizamos la transacción\" )\n      oMeter:Set( 9 )\n\n      CommitTransaction()\n\n   RECOVER USING oError\n\n      RollBackTransaction()\n\n      msgStop( \"Imposible almacenar documento\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n   ErrorBlock( oBlock )\n\n   /*\n   Cerramos el dialogo---------------------------------------------------------\n   */\n\n   oMsgText( \"Cerramos el dialogo\" )\n   oMeter:Set( 10 )\n\n   oDlg:Enable()\n   oDlg:End( IDOK )\n\n   EnableAcceso()\n\nReturn .t.\n\n//------------------------------------------------------------------------//\n\n/*\nComprueba si una factura esta liquidada\n*/\n\nFUNCTION ChkLqdFacCli( aTmp, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )\n\n   local lChkLqd\n   local cFactura\n   local nPagFacCli\n   local nTotal\n   local cDivFac\n   local nRec     := ( dbfFacCliP )->( RecNo() )\n\n   if aTmp != nil\n      cFactura    := aTmp[ _CSERIE  ] + Str( aTmp[ _NNUMFAC ] ) + aTmp[ _CSUFFAC ]\n      cDivFac     := aTmp[ _CDIVFAC ]\n   else\n      cFactura    := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n      cDivFac     := ( dbfFacCliT )->cDivFac\n   end if\n\n   nTotal         := abs( nTotFacCli( cFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, nil, nil, nil, .f. ) )\n   nPagFacCli     := abs( nPagFacCli( cFactura, dbfFacCliT, dbfFacCliP, dbfIva, dbfDiv, nil, .t. ) )\n   nPagFacCli     += abs( nTotAntFacCli( cFactura, dbfAntCliT, dbfIva, dbfDiv, nil, .f. ) )\n\n   lChkLqd        := !lMayorIgual( nTotal, nPagFacCli, 0.1 )\n\n   if aTmp != nil\n      aTmp[ _LLIQUIDADA ]        := lChkLqd\n   end if\n\n   if dbLock( dbfFacCliT )\n      ( dbfFacCliT )->lLiquidada := lChkLqd\n      ( dbfFacCliT )->( dbUnLock() )\n   end if\n\n   ( dbfFacCliP )->( dbGoTo( nRec ) )\n\nRETURN ( lChkLqd )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve la fecha de una factura de cliente\n*/\n\nFUNCTION dFecFacCli( cFacCli, dbfFacCliT )\n\n   local aStatus\n   local dFecFac  := CtoD(\"\")\n\n   if ValType( dbfFacCliT ) == \"O\"\n      dbfFacCliT:GetStatus( .t. )\n      if dbfFacCliT:Seek( cFacCli )\n         dFecFac  := dbfFacCliT:dFecFac\n      end if\n      dbfFacCliT:SetStatus()\n   else\n      aStatus  := aGetStatus( dbfFacCliT, .t. )\n      if ( dbfFacCliT )->( dbSeek( cFacCli ) )\n         dFecFac  := ( dbfFacCliT )->dFecFac\n      end if\n      SetStatus( dbfFacCliT, aStatus )\n   end if\n\nRETURN ( dFecFac )\n\n//----------------------------------------------------------------------------//\n\n#ifndef __PDA__\n\n//---------------------------------------------------------------------------//\n\nFUNCTION BrowseInformesFacCli( oGet, oGet2 )\n\n   local oDlg\n   local oBrw\n   local oGet1\n   local cGet1\n   local oCbxOrd\n   local cCbxOrd\n   local nOrd\n   local aCbxOrd\n\n   if !OpenFiles()\n      Return .f.\n   end if\n\n   aCbxOrd           := { \"Número\", \"Fecha\", \"Cliente\", \"Nombre\" }\n   nOrd              := GetBrwOpt( \"BrwFacCli\" )\n   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )\n   cCbxOrd           := aCbxOrd[ nOrd ]\n\n   DEFINE DIALOG oDlg RESOURCE \"HELPENTRY\" TITLE \"Facturas de clientes\"\n\n      REDEFINE GET oGet1 VAR cGet1;\n         ID       104 ;\n         ON CHANGE( AutoSeek( nKey, nFlags, Self, oBrw, dbfFacCliT, nil, nil, .f. ) );\n         VALID    ( OrdClearScope( oBrw, dbfFacCliT ) );\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n      REDEFINE COMBOBOX oCbxOrd ;\n         VAR      cCbxOrd ;\n         ID       102 ;\n         ITEMS    aCbxOrd ;\n         ON CHANGE( ( dbfFacCliT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() ) ;\n         OF       oDlg\n\n      oBrw                 := IXBrowse():New( oDlg )\n\n      oBrw:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrw:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrw:cAlias          := dbfFacCliT\n      oBrw:nMarqueeStyle   := 5\n      oBrw:cName           := \"Factura de cliente.Browse informes\"\n\n      oBrw:bLDblClick      := {|| oDlg:end( IDOK ) }\n\n      oBrw:CreateFromResource( 105 )\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := \"nNumFac\"\n         :bEditValue       := {|| ( dbfFacCliT )->cSerie + \"/\" + RTrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + ( dbfFacCliT )->cSufFac }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Fecha\"\n         :cSortOrder       := \"dFecFac\"\n         :bEditValue       := {|| Dtoc( ( dbfFacCliT )->dFecFac ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Cliente\"\n         :cSortOrder       := \"cCodCli\"\n         :bEditValue       := {|| Rtrim( ( dbfFacCliT )->cCodCli ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Nombre\"\n         :cSortOrder       := \"cNomCli\"\n         :bEditValue       := {|| Rtrim( ( dbfFacCliT )->cNomCli ) }\n         :nWidth           := 180\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Importe\"\n         :bEditValue       := {|| nTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, nil, cDivEmp(), .t. ) }\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oDlg ;\n         WHEN     ( .f. ) ;\n         ACTION   ( nil )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oDlg ;\n         WHEN     ( .f. ) ;\n         ACTION   ( nil )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end() )\n\n   oDlg:AddFastKey( VK_F5, {|| oDlg:end( IDOK ) } )\n\n   ACTIVATE DIALOG oDlg ;\n   ON INIT ( oBrw:Load() ) ;\n   CENTER\n\n   if oDlg:nResult == IDOK\n      oGet:cText( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac )\n      oGet2:cText( ( dbfFacCliT )->cNomCli )\n   end if\n\n   SetBrwOpt( \"BrwFacCli\", ( dbfFacCliT )->( OrdNumber() ) )\n\n   ( dbfFacCliT )->( dbClearFilter() )\n\n   CloseFiles()\n\n   /*\n    Guardamos los datos del browse-------------------------------------------\n   */\n\n   oBrw:CloseData()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION lValidInformeFacCli( oGet, oGet2 )\n\n   local lClose   := .f.\n   local lValid   := .f.\n   local xValor   := oGet:varGet()\n\n   if Empty( xValor )\n      return .t.\n   end if\n\n   if !OpenFiles()\n      Return .f.\n   end if\n\n   if ( dbfFacCliT )->( dbSeek( xValor ) )\n\n      oGet:cText( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac )\n      oGet2:cText( ( dbfFacCliT )->cNomCli )\n\n      lValid   := .t.\n\n   else\n\n      msgStop( \"Factura no encontrada\" )\n\n   end if\n\n   CloseFiles()\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\nFunction dJulianoFacCli( cFacCliL )\n\n   DEFAULT cFacCliL  := dbfFacCliL\n\nRETURN ( AddMonth( JulianoToDate( , Val( ( cFacCliL )->cLote ) ), 6 ) )\n\n//---------------------------------------------------------------------------//\n//---------------------------------------------------------------------------//\n//---------------------------------------------------------------------------//\n//---------------------------------------------------------------------------//\n//---------------------------------------------------------------------------//\n//---------------------------------------------------------------------------//\n\nStatic Function CreateFileEDI()\n\n   local cCabeceraFactura     := uFieldEmpresa( \"cRutEdi\" ) + \"\\\" + \"SINCC.TXT\"\n   local cLineaFactura        := uFieldEmpresa( \"cRutEdi\" ) + \"\\\" + \"SINCL.TXT\"\n   local cVencimientoFactura  := uFieldEmpresa( \"cRutEdi\" ) + \"\\\" + \"SINCV.TXT\"\n   local cDescuentoFactura    := uFieldEmpresa( \"cRutEdi\" ) + \"\\\" + \"SINCD.TXT\"\n   local cImpuestosFactura    := uFieldEmpresa( \"cRutEdi\" ) + \"\\\" + \"SINCI.TXT\"\n\n   if file( cCabeceraFactura )\n      ferase( cCabeceraFactura )\n   end if\n   if file( cLineaFactura )\n      ferase( cLineaFactura )\n   end if\n   if file( cVencimientoFactura )\n      ferase( cVencimientoFactura )\n   end if\n   if file( cDescuentoFactura )\n      ferase( cDescuentoFactura )\n   end if\n   if file( cImpuestosFactura )\n      ferase( cImpuestosFactura )\n   end if\n\n   hCabeceraFactura           := fCreate( cCabeceraFactura     )\n   hLineaFactura              := fCreate( cLineaFactura        )\n   hVencimientoFactura        := fCreate( cVencimientoFactura  )\n   hDescuentoFactura          := fCreate( cDescuentoFactura    )\n   hImpuestosFactura          := fCreate( cImpuestosFactura    )\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function CloseFileEDI()\n\n   fClose( hCabeceraFactura      )\n   fClose( hLineaFactura         )\n   fClose( hVencimientoFactura   )\n   fClose( hDescuentoFactura     )\n   fClose( hImpuestosFactura     )\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function ExportarEDI( lNoExportados, oTree )\n\n   local oNode\n   local nDescuento           := 0\n   local nNumeroLinea         := 0\n   local cNumeroFactura\n\n   if ( dbfFacCliT )->lExpEdi .and. lNoExportados\n      oNode                   := oTree:Add( \"Factura : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + Alltrim( ( dbfFacCliT )->cSufFac ) + \" anteriormente generada.\", 1 )\n      oTree:Select( oNode )\n      Return .f.\n   end if\n\n   cNumeroFactura             := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\n   if hCabeceraFactura        != -1 .and.;\n      hLineaFactura           != -1 .and.;\n      hVencimientoFactura     != -1 .and.;\n      hDescuentoFactura       != -1 .and.;\n      hImpuestosFactura       != -1\n\n      nTotFacCli( cNumeroFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT )\n\n      /*\n      Cabecera de facturas-----------------------------------------------------\n      */\n\n      ExportaEDICabecera( hCabeceraFactura )\n\n      /*\n      Ahora vamos a ver si hay descuentos en la cabecera-----------------------\n      */\n\n      if !Empty( ( dbfFacCliT )->nDtoEsp )\n         ExportaEDIDescuentoCabecera( ( dbfFacCliT )->nDtoEsp, nTotDto, ++nDescuento, hDescuentoFactura )\n      end if\n\n      if !Empty( ( dbfFacCliT )->nDpp )\n         ExportaEDIDescuentoCabecera( ( dbfFacCliT )->nDpp, nTotDpp, ++nDescuento, hDescuentoFactura )\n      end if\n\n      if !Empty( ( dbfFacCliT )->nDtoAtp )\n         ExportaEDIDescuentoCabecera( ( dbfFacCliT )->nDtoAtp, nTotAtp, ++nDescuento, hDescuentoFactura )\n      end if\n\n      if !Empty( ( dbfFacCliT )->nDtoUno )\n         ExportaEDIDescuentoCabecera( ( dbfFacCliT )->nDtoUno, nTotUno, ++nDescuento, hDescuentoFactura )\n      end if\n\n      if !Empty( ( dbfFacCliT )->nDtoDos )\n         ExportaEDIDescuentoCabecera( ( dbfFacCliT )->nDtoDos, nTotDos, ++nDescuento, hDescuentoFactura )\n      end if\n\n      /*\n      Impuestos de facturas----------------------------------------------------\n      */\n\n      ExportaEDIImpuestos( hImpuestosFactura )\n\n      /*\n      Lineas de facturas-------------------------------------------------------\n      */\n\n      if ( dbfFacCliL )->( dbSeek( cNumeroFactura ) )\n\n         while ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac == cNumeroFactura .and. !( dbfFacCliL )->( eof() )\n\n            if lValLine( dbfFacCliL )\n\n               ExportaEDILinea( ++nNumeroLinea, hLineaFactura  )\n\n               if ( dbfFacCliL )->nDto != 0\n                  ExportaEDIDescuentoLinea( ( dbfFacCliL )->nDto, nDtoLFacCli( dbfFacCliL, nRouDiv, nVdvDiv ), nNumeroLinea, ++nDescuento, hDescuentoFactura  )\n               end if\n\n               if ( dbfFacCliL )->nDtoPrm != 0\n                  ExportaEDIDescuentoLinea( ( dbfFacCliL )->nDtoPrm, nPrmLFacCli( dbfFacCliL, nRouDiv, nVdvDiv ), nNumeroLinea, ++nDescuento, hDescuentoFactura  )\n               end if\n\n            end if\n\n            ( dbfFacCliL )->( dbSkip() )\n\n         end while\n\n      end if\n\n      /*\n      Pagos de facturas--------------------------------------------------------\n      */\n\n      nNumeroLinea         := 0\n\n      if ( dbfFacCliP )->( dbSeek( cNumeroFactura ) )\n\n         while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cNumeroFactura .and. !( dbfFacCliP )->( eof() )\n\n            ExportaEDIRecibo( ++nNumeroLinea, hVencimientoFactura )\n\n            ( dbfFacCliP )->( dbSkip() )\n\n         end while\n\n      end if\n\n      /*\n      Marcamos la factura como exportada---------------------------------------\n      */\n\n      if dbLock( dbfFacCliT )\n         ( dbfFacCliT )->lExpEdi    := .t.\n         ( dbfFacCliT )->dFecEdi    := GetSysDate()\n         ( dbfFacCliT )->cHorEdi    := Time()\n         ( dbfFacCliL )->( dbUnlock() )\n      end if\n\n      oNode                := oTree:Add( \"Factura : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + Alltrim( ( dbfFacCliT )->cSufFac ) + \" ficheros generados.\", 1 )\n\n   else\n\n      oNode                := oTree:Add( \"Factura : \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + Alltrim( ( dbfFacCliT )->cSufFac ) + \" ficheros no generados.\", 0 )\n\n   end if\n\n   oTree:Select( oNode )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function ExportaEDICabecera( hFicheroFactura )\n\n   local cCabecera         := \"\"\n   local nDescuento        := 0\n\n   // cCabecera         += Padr( \"SINCC\", 6 )                                                                                       // 6.  Cabecera\n   cCabecera         += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n   cCabecera         += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac) , 17 ) // 29. Numero factura\n   cCabecera         += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n   cCabecera         += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n   cCabecera         += Padr( \"\", 6 )                                                                                            // 61. Funcion del mensaje\n   cCabecera         += Padr( Dtos( ( dbfFacCliT )->dFecFac ), 8 )                                                               // 69. Fecha de la factura\n   cCabecera         += Padr( Dtos( ( dbfFacCliT )->dFecFac ) + Dtos( ( dbfFacCliT )->dFecFac ), 16 )                            // 85. Periodo de facturación pongo la misma fecha 2 veces\n   cCabecera         += Padr( \"42\", 6 )                                                                                          // 91. Forma de pago 42 por defecto\n   cCabecera         += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 104. Codigo de Emisor de la factura coincide ( quien factura )\n   cCabecera         += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 117. Codigo de Receptor de la factura ( quien recibe )\n   if !Empty( ( dbfFacCliT )->cCodObr )\n      cCabecera      += Padr( Retfld( ( dbfFacCliT )->cCodCli + ( dbfFacCliT )->cCodObr, dbfObrasT, \"cCodEdi\" ), 13 )            // 130. Codigo del receptor de la mercancia con codigo EDI en la obra\n   else\n      cCabecera      += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 130. Codigo del receptor de la mercancia con cóodigo EDI en el cliente\n   end if\n   cCabecera         += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 143. Codigo receptor del pago\n   cCabecera         += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 156. Codigo del emisor del pago\n   cCabecera         += Padr( \"\", 6 )                                                                                            // 162. Razon o cargo del abono.\n   cCabecera         += Padr( ( dbfFacCliT )->cSuFac, 17 )                                                                       // 179. Numero del pedido\n   cCabecera         += Padr( ( dbfFacCliT )->cSuAlb, 17 )                                                                       // 196. Numero del albaran\n   cCabecera         += Padr( \"\", 3 )                                                                                            // 199. Calificador documento rectificado sustituido\n   cCabecera         += Padr( \"\", 17 )                                                                                           // 216. Numero documento rectificado sustituido\n   cCabecera         += Padr( \"\", 17 )                                                                                           // 233. Numero de contrato o acuerdo\n   cCabecera         += Padr( \"\", 17 )                                                                                           // 250. Numero de relacion de entregas\n   cCabecera         += Padr( ( dbfFacCliT )->cNomCli, 70 )                                                                      // 320. Razon social del receptor de la factura\n   cCabecera         += Padr( ( dbfFacCliT )->cDirCli, 70 )                                                                      // 390. Direccion del receptor de la factura\n   cCabecera         += Padr( ( dbfFacCliT )->cPobCli, 35 )                                                                      // 425. Población del receptor de la factura\n   cCabecera         += Padr( ( dbfFacCliT )->cPosCli, 9 )                                                                       // 434. Codigo postal del receptor de la factura\n   cCabecera         += Padr( ( dbfFacCliT )->cDniCli, 17 )                                                                      // 451. Nif del receptor de la factura\n   cCabecera         += Padr( uFieldEmpresa( \"cDomicilio\" ), 70 )                                                                // 521. Domicilio del emisor de la factura\n   cCabecera         += Padr( uFieldEmpresa( \"cPoblacion\" ), 35 )                                                                // 556. Población del emisor de la factura\n   cCabecera         += Padr( uFieldEmpresa( \"cCodPos\" ), 9 )                                                                    // 565. Codigo postal del emisor de la factura\n   cCabecera         += Padr( ( dbfFacCliT )->cDivFac, 6 )                                                                       // 571. Codigo de la divisa\n   cCabecera         += Padr( \"\", 8 )                                                                                            // 579. Fecha de vencimiento unico\n   cCabecera         += Padl( Trans( nTotNet, \"99999999999999.999\" ), 18 )                                                       // 599. Importe neto factura\n   cCabecera         += Padl( Trans( nTotNet, \"99999999999999.999\" ), 18 )                                                       // 617. Base imponible factura\n   cCabecera         += Padl( Trans( nTotBrt, \"99999999999999.999\" ), 18 )                                                       // 635. Importe bruto total factura\n   cCabecera         += Padl( Trans( nTotImp, \"99999999999999.999\" ), 18 )                                                       // 653. Impuestos de factura\n   cCabecera         += Padl( Trans( nTotFac, \"99999999999999.999\" ), 18 )                                                       // 671. Total factura\n   cCabecera         += Padl( Trans( 0, \"99999999999999.999\" ), 18 )                                                             // 689. Subvenciones vinculadas a precio\n   cCabecera         += Padl( Trans( 0, \"99999999999999.999\" ), 18 )                                                             // 707. Incrementos del importe bruto\n   cCabecera         += Padl( Trans( nTotDto, \"99999999999999.999\" ), 18 )                                                       // 725. Minoraciones del importe bruto\n   cCabecera         += Padr( \"\", 17 )                                                                                           // 742. Identificacion adicional de la parte\n   cCabecera         += Padr( \"\", 13 )                                                                                           // 755. Receptor del documento\n   cCabecera         += Padr( \"\", 17 )                                                                                           // 773. Identificacion adicional proveedor\n   cCabecera         += CRLF\n\n   fWrite( hFicheroFactura, cCabecera )\n\nReturn nil\n\nStatic Function ExportaEDILinea( nNumeroLinea, hFicheroFactura )\n\n   local cLinea      := \"\"\n\n   //cLinea            += Padr( \"SINCL\", 6 )                                                                                     // 6.  Cabecera\n   cLinea            += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n   cLinea            += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac) , 17 ) // 29. Numero factura\n   cLinea            += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n   cLinea            += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n   cLinea            += Padl( Trans( nNumeroLinea, \"999999\" ), 6 )                                                               // 61. Numero de linea\n   cLinea            += Padr( RetFld( ( dbfFacCliL )->cRef, dbfArticulo, \"Codebar\" ), 15 ) //Padr( ( dbfFacCliL )->cRef, 15 )    // 76. Código articulo / Codigo de barras\n   cLinea            += Padr( if( !Empty( ( dbfFacCliL )->cDetalle ), ( dbfFacCliL )->cDetalle, ( dbfFacCliL )->mLngDes ), 35 )  // 111. Descripción articulo\n   cLinea            += Padr( \"M\", 1 )                                                                                           // 112. Tipo de articulo\n   cLinea            += Padr( \"\", 15 )                                                                                           // 127. Codigo interno articulo proveedor\n   cLinea            += Padr( \"\", 15 )                                                                                           // 142. Codigo interno articulo cliente\n   cLinea            += Padr( \"\", 15 )                                                                                           // 157. Codigo variable promocional\n   cLinea            += Padr( \"\", 15 )                                                                                           // 172. Codigo unidad expedición\n   cLinea            += Padr( ( dbfFacCliL )->cLote, 15 )                                                                        // 187. Numero de lote\n   cLinea            += Padl( Trans( nTotNFacCli( dbfFacCliL ), \"999999999999.999\" ), 16 )                                       // 203. Unidades facturado\n   cLinea            += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // 219. Unidades bonificadas\n   cLinea            += Padr( \"\", 6 )                                                                                            // 225. Unidad de medida\n   cLinea            += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // 241. Unidad entregada\n   cLinea            += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // 257. Unidades de consumo en expedicion\n   cLinea            += Padl( Trans( nTotLFacCli( dbfFacCliL, nDouDiv, nRouDiv ), \"99999999999999.999\" ), 18 )                   // 275. Importe total neto\n   cLinea            += Padl( Trans( nTotUFacCli( dbfFacCliL, nDouDiv ), \"99999999999.999\" ), 16 )                               // 291. Precio bruto unitario\n   cLinea            += Padl( Trans( nTotPFacCli( dbfFacCliL, nDouDiv ), \"9999999999.9999\" ), 16 )                               // 291. Precio neto unitario\n   cLinea            += Padr( \"\", 6 )                                                                                            // 225. Unidad de medida del precio\n   cLinea            += Padr( \"VAT\", 6 )                                                                                         // 225. Calificador de impuesto VAT es IGIC\n   cLinea            += Padl( Trans( ( dbfFacCliL )->nIva, \"999.99\" ), 6 )                                                       // 291. % Impuesto\n   cLinea            += Padl( Trans( 0, \"9999999999999.999\" ), 18 )                                                              // 291. Importe impuesto se aconseja no cumplimentar\n   cLinea            += Padl( Trans( if( ( dbfFacCliT )->lRecargo, ( dbfFacCliL )->nReq, 0 ), \"999.99\" ), 6 )                    // 291. % Recargo de eqivalencia\n   cLinea            += Padl( Trans( 0, \"9999999999999.999\" ), 18 )                                                              // 291. Importe recargo equivalencia se aconseja no cumplimentar\n   cLinea            += Padr( \"\", 6 )                                                                                            // 225. Calificador de otro impuesto VAT es IGIC\n   cLinea            += Padl( Trans( 0, \"999.99\" ), 6 )                                                                          // 291. % otro Impuesto\n   cLinea            += Padl( Trans( 0, \"9999999999999.999\" ), 18 )                                                              // 291. Importe otro impuesto se aconseja no cumplimentar\n   cLinea            += Padr( ( dbfFacCliT )->cNumPed, 17 )                                                                      // 179. Numero del pedido\n   cLinea            += Padr( ( dbfFacCliL )->cCodAlb, 17 )                                                                      // 196. Numero del albaran\n   cLinea            += Padl( Trans( 0, \"99999999\" ), 8 )                                                                        // 291. Numero de embalajes\n   cLinea            += Padr( \"\", 7 )                                                                                            // 225. Tipo de embalaje\n   cLinea            += Padl( Trans( nTotLFacCli( dbfFacCliL, nDouDiv, nRouDiv, nVdvDiv, .f. ), \"99999999999999.999\" ), 18 )     // 275. Importe total bruto\n   cLinea            += CRLF\n\n   fWrite( hFicheroFactura, cLinea )\n\nReturn nil\n\nStatic Function ExportaEDIRecibo( nNumeroRecibo, hFicheroFactura )\n\n   local cRecibo     := \"\"\n\n   //cRecibo           += Padr( \"SINCV\", 6 )                                                                                       // 6.  Cabecera\n   cRecibo           += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n   cRecibo           += Padr( Alltrim( ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac ) , 17 )// 29. Numero factura\n   cRecibo           += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n   cRecibo           += Padr( Retfld( ( dbfFacCliP )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n   cRecibo           += Padl( Trans( nNumeroRecibo, \"999999\" ), 6 )                                                              // 61. Numero de Recibo\n   cRecibo           += Padr( Dtos( ( dbfFacCliP )->dFecVto ), 8 )                                                               // 76. Código articulo\n   cRecibo           += Padl( Trans( nTotRecCli( dbfFacCliP, dbfDiv ), \"999999999999.999\" ), 16 )                                // 203. Unidades facturado\n   cRecibo           += CRLF\n\n   fWrite( hFicheroFactura, cRecibo )\n\nReturn nil\n\nStatic Function ExportaEDIDescuentoCabecera( nPorcentajeDescuento, nTotalDescuento, nDescuento, hFicheroFactura )\n\n   local cCabecera   := \"\"\n\n   //cCabecera         += Padr( \"SINCD\", 6 )                                                                                       // 6.  Cabecera\n   cCabecera         += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n   cCabecera         += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) , 17 )// 29. Numero factura\n   cCabecera         += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n   cCabecera         += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n   cCabecera         += Padl( Trans( 0, \"999999\" ), 6 )                                                                          // Numero de linea 0 para cabeceras\n   cCabecera         += Padl( Trans( nDescuento, \"99\" ), 2 )                                                                     // Numero de descuento\n   cCabecera         += \"A\"                                                                                                      // Indicador de descuento\n   cCabecera         += Padl( Trans( nDescuento, \"999\" ), 3 )                                                                    // Numero de descuento\n   cCabecera         += Padl( Trans( nPorcentajeDescuento, \"9999.9999\" ), 9 )                                                    // Porcentaje de descuento atipico\n   cCabecera         += Padl( Trans( nTotalDescuento, \"99999999999999.999\" ), 18 )                                               // Importe descuento atipico\n   cCabecera         += Padl( Trans( 0, \"99999999999999.999\" ), 18 )                                                             // Importe total sujeto a aplicacion\n   cCabecera         += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // Unidades q se descuentan por lineas\n   cCabecera         += Padr( \"TD\", 6 )                                                                                          // Tipo de descuento TD descuento comercial\n   cCabecera         += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // Descuentos monetarios por unidad\n   cCabecera         += Padr( \"\", 6 )                                                                                            // Unidade de medida\n   cCabecera         += CRLF\n\n  fWrite( hFicheroFactura, cCabecera )\n\nReturn nil\n\nStatic Function ExportaEDIDescuentoLinea( nPorcentajeDescuento, nTotalDescuento, nLinea, nDescuento, hFicheroFactura )\n\n   local cLinea      := \"\"\n\n   //cLinea            += Padr( \"SINCD\", 6 )                                                                                       // 6.  Cabecera\n   cLinea            += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n   cLinea            += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) , 17 )// 29. Numero factura\n   cLinea            += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n   cLinea            += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n   cLinea            += Padl( Trans( nLinea, \"999999\" ), 6 )                                                                          // Numero de linea 0 para cabeceras\n   cLinea            += Padl( Trans( nDescuento, \"99\" ), 2 )                                                                     // Numero de descuento\n   cLinea            += \"A\"                                                                                                      // Indicador de descuento\n   cLinea            += Padl( Trans( nDescuento, \"999\" ), 3 )                                                                    // Numero de descuento\n   cLinea            += Padl( Trans( nPorcentajeDescuento, \"9999.9999\" ), 9 )                                                    // Porcentaje de descuento atipico\n   cLinea            += Padl( Trans( nTotalDescuento, \"99999999999999.999\" ), 18 )                                               // Importe descuento atipico\n   cLinea            += Padl( Trans( 0, \"99999999999999.999\" ), 18 )                                                             // Importe total sujeto a aplicacion\n   cLinea            += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // Unidades q se descuentan por lineas\n   cLinea            += Padr( \"TD\", 6 )                                                                                          // Tipo de descuento TD descuento comercial\n   cLinea            += Padl( Trans( 0, \"999999999999.999\" ), 16 )                                                               // Descuentos monetarios por unidad\n   cLinea            += Padr( \"\", 6 )                                                                                            // Unidade de medida\n   cLinea            += CRLF\n\n  fWrite( hFicheroFactura, cLinea )\n\nReturn nil\n\nStatic Function ExportaEDIImpuestos( hFicheroFactura )\n\n   local nImpuesto   := 0\n   local cImpuesto   := \"\"\n\n   if !Empty( aIvaUno[ 3 ] )\n      //cImpuesto      += Padr( \"SINCI\", 6 )                                                                                       // 6.  Cabecera\n      cImpuesto      += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n      cImpuesto      += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) , 17 )// 29. Numero factura\n      cImpuesto      += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n      cImpuesto      += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n      cImpuesto      += Padl( Trans( ++nImpuesto, \"99\" ), 2 )                                                                    // 61. Numero de impuesto\n      cImpuesto      += Padr( \"VAT\", 6 )                                                                                         // 76. Tipo de IGIC\n      cImpuesto      += Padl( Trans( aIvaUno[ 3 ], \"999.99\" ), 6 )                                                               // 203. % IGIC\n      cImpuesto      += Padl( Trans( aIvaUno[ 8 ], \"99999999999999.999\" ), 18 )                                                  // 203. Importe de tipo de impuesto\n      cImpuesto      += Padl( Trans( aIvaUno[ 2 ], \"99999999999999.999\" ), 18 )                                                  // 203. Base imponible\n      cImpuesto      += CRLF\n   end if\n\n   if !Empty( aIvaDos[ 3 ] )\n      //cImpuesto      += Padr( \"SINCI\", 6 )                                                                                       // 6.  Cabecera\n      cImpuesto      += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n      cImpuesto      += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) , 17 )// 29. Numero factura\n      cImpuesto      += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n      cImpuesto      += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n      cImpuesto      += Padl( Trans( ++nImpuesto, \"99\" ), 2 )                                                                    // 61. Numero de impuesto\n      cImpuesto      += Padr( \"VAT\", 6 )                                                                                         // 76. Tipo de IGIC\n      cImpuesto      += Padl( Trans( aIvaDos[ 3 ], \"999.99\" ), 6 )                                                               // 203. % IGIC\n      cImpuesto      += Padl( Trans( aIvaDos[ 8 ], \"99999999999999.999\" ), 18 )                                                  // 203. Base imponible\n      cImpuesto      += Padl( Trans( aIvaDos[ 2 ], \"99999999999999.999\" ), 18 )                                                  // 203. Importe de tipo de impuesto\n      cImpuesto      += CRLF\n   end if\n\n   if !Empty( aIvaTre[ 3 ] )\n      //cImpuesto      += Padr( \"SINCI\", 6 )                                                                                       // 6.  Cabecera\n      cImpuesto      += Padr( \"380\", 6 )                                                                                         // 12. Factura comercial\n      cImpuesto      += Padr( Alltrim( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) , 17 )// 29. Numero factura\n      cImpuesto      += Padr( uFieldEmpresa( \"cCodEdi\" ), 13 )                                                                   // 42. Codigo de Vendedor a quien se pide\n      cImpuesto      += Padr( Retfld( ( dbfFacCliT )->cCodCli, dbfClient, \"cCodEdi\" ), 13 )                                      // 55. Codigo de Comprador (quien pide)\n      cImpuesto      += Padl( Trans( ++nImpuesto, \"99\" ), 2 )                                                                    // 61. Numero de impuesto\n      cImpuesto      += Padr( \"VAT\", 6 )                                                                                         // 76. Tipo de IGIC\n      cImpuesto      += Padl( Trans( aIvaTre[ 3 ], \"999.99\" ), 6 )                                                               // 203. % IGIC\n      cImpuesto      += Padl( Trans( aIvaTre[ 8 ], \"99999999999999.999\" ), 18 )                                                  // 203. Base imponible\n      cImpuesto      += Padl( Trans( aIvaTre[ 2 ], \"99999999999999.999\" ), 18 )                                                  // 203. Importe de tipo de impuesto\n      cImpuesto      += CRLF\n   end if\n\n   fWrite( hFicheroFactura, cImpuesto )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function lChangeEDI( aGet, aTmp )\n\n   if aTmp[ _LEXPEDI ]\n      aGet[ _DFECEDI ]:cText( GetSysDate() )\n      aGet[ _CHOREDI ]:cText( Time() )\n   else\n      aGet[ _DFECEDI ]:cText( Ctod( \"\" ) )\n      aGet[ _CHOREDI ]:cText( Space( 5 ) )\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function CreateFileFacturae( oTree, lFirmar, lEnviar )\n\n   local a\n   local oTax\n   local nPago\n   local nTotal\n   local cNumero\n   local nNumero\n   local oFactura\n   local oDiscount\n   local nAnticipo\n   local oItemLine\n   local oInstallment\n\n   nNumero              := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n   cNumero              := ( dbfFacCliT )->cSerie + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + Rtrim( ( dbfFacCliT )->cSufFac )\n\n   nTotal               := nTotFacCli( nNumero, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT )\n   nPago                := nPagFacCli( nNumero, dbfFacCliT, dbfFacCliP, dbfIva, dbfDiv )\n   nAnticipo            := nTotAntFacCli( nNumero, dbfAntCliT, dbfIva, dbfDiv )\n\n   oFactura             := TFacturaElectronica():New( oTree )\n\n   with object ( oFactura )\n\n      :cFicheroOrigen            := cPatXml() + cNumero + \".xml\"\n      :cFicheroDestino           := cPatXml() + cNumero + \".f64\"\n\n      /*\n      Datos para el envio de la factura por mail-------------------------------\n      */\n\n      :cMailServer               := Rtrim( uFieldEmpresa( \"cSrvMai\" ) )\n      :cMailServerPort           := uFieldEmpresa( \"nPrtMai\" )\n      :cMailServerUserName       := Rtrim( uFieldEmpresa( \"cCtaMai\" ) )\n      :cMailServerPassword       := Rtrim( uFieldEmpresa( \"cPssMai\" ) )\n\n      /*\n      Datos genreales de la factura--------------------------------------------\n      */\n\n      :cNif                      := uFieldEmpresa( \"cNif\" )\n\n      :cInvoiceSeriesCode        := ( dbfFacCliT )->cSerie\n      :cInvoiceNumber            := Str( Year( ( dbfFacCliT )->dFecFac ) ) + \"/\" + ( dbfFacCliT )->cSerie + Rtrim( ( dbfFacCliT )->cSufFac ) + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) )\n      :cInvoiceCurrencyCode      := ( dbfFacCliT )->cDivFac\n      :cTaxCurrencyCode          := ( dbfFacCliT )->cDivFac\n      :nInvoiceTotalAmount       := nTotal\n      :nTotalOutstandingAmount   := nTotal - nPago\n      :nTotalExecutableAmount    := nTotal\n\n      /*\n      Parte vendedora----------------------------------------------------------\n      */\n\n      :oSellerParty:cTaxIdentificationNumber          := 'ES' + uFieldEmpresa( \"cNif\" )\n\n      if Val( Left( uFieldEmpresa( \"cNif\" ), 1 ) ) != 0\n         :oSellerParty:cPersonTypeCode                := 'F'\n         :oSellerParty:cName                          := uFieldEmpresa( \"cNombre\" )\n         :oSellerParty:cFirstSurname                  := uFieldEmpresa( \"cNombre\" )\n      else\n         :oSellerParty:cPersonTypeCode                := 'J'\n         :oSellerParty:cCorporateName                 := uFieldEmpresa( \"cNombre\" )\n         :oSellerParty:cTradeName                     := uFieldEmpresa( \"cNombre\" )\n         :oSellerParty:cRegisterOfCompaniesLocation   := uFieldEmpresa( \"cNumRegMer\" )\n      end if\n\n      :oSellerParty:cAddress                          := uFieldEmpresa( \"cDomicilio\" )\n      :oSellerParty:cPostCode                         := uFieldEmpresa( \"cCodPos\" )\n      :oSellerParty:cTown                             := uFieldEmpresa( \"cPoblacion\" )\n      :oSellerParty:cProvince                         := uFieldEmpresa( \"cProvincia\" )\n      :oSellerParty:cTelephone                        := uFieldEmpresa( \"cTlf\" )\n      :oSellerParty:cTelFax                           := uFieldEmpresa( \"cFax\" )\n      :oSellerParty:cWebAddress                       := uFieldEmpresa( \"Web\" )\n      :oSellerParty:cElectronicMail                   := uFieldEmpresa( \"EMail\" )\n\n      /*\n      Parte compradora---------------------------------------------------------\n      */\n\n      :oBuyerParty:cTaxIdentificationNumber           := 'ES' + ( dbfFacCliT )->cDniCli\n\n      if Val( Left( ( dbfFacCliT )->cDniCli, 1 ) ) != 0\n         :oBuyerParty:cPersonTypeCode                 := 'F'\n         :oBuyerParty:cName                           := ( dbfFacCliT )->cNomCli\n         :oBuyerParty:cFirstSurname                   := ( dbfFacCliT )->cNomCli\n      else\n         :oBuyerParty:cPersonTypeCode                 := 'J'\n         :oBuyerParty:cCorporateName                  := ( dbfFacCliT )->cNomCli\n         :oBuyerParty:cTradeName                      := ( dbfFacCliT )->cNomCli\n      end if\n\n      :oBuyerParty:cAddress                           := ( dbfFacCliT )->cDirCli\n      :oBuyerParty:cPostCode                          := ( dbfFacCliT )->cPosCli\n      :oBuyerParty:cTown                              := ( dbfFacCliT )->cPobCli\n      :oBuyerParty:cProvince                          := ( dbfFacCliT )->cPrvCli\n      :oBuyerParty:cTelephone                         := RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"Telefono\" )\n      :oBuyerParty:cTelFax                            := RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"Fax\" )\n      :oBuyerParty:cWebAddress                        := RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"cWebInt\" )\n      :oBuyerParty:cElectronicMail                    := RetFld( ( dbfFacCliT )->cCodCli, dbfClient, \"cMeiInt\" )\n\n      /*\n      Fechas de emision de factura---------------------------------------------\n      */\n\n      :dOperationDate                              := ( dbfFacCliT )->dFecFac\n      :dIssueDate                                  := ( dbfFacCliT )->dFecFac\n\n\n      :cPlaceOfIssuePostCode                       := uFieldEmpresa( \"cCodPos\" )\n      :cPlaceOfIssueDescription                    := uFieldEmpresa( \"cPoblacion\" )\n\n      /*\n      Totales------------------------------------------------------------------\n      */\n\n      :nInvoiceTotal                               := nTotal\n      :nTotalGrossAmount                           := nTotBrt\n\n      /*\n      Impuestos----------------------------------------------------------------\n      */\n\n      for each a in aTotIva\n\n         if !IsNil( a[ 3 ] )\n\n            oTax                                   := Tax()\n            oTax:nTaxBase                          := a[ 2 ]\n            oTax:nTaxRate                          := a[ 3 ]\n            oTax:nTaxAmount                        := a[ 8 ]\n            oTax:nEquivalenceSurcharge             := a[ 4 ]\n            oTax:nEquivalenceSurchargeAmount       := a[ 9 ]\n\n            :addTax( oTax )\n\n         end if\n\n      next\n\n      /*\n      Descuentos---------------------------------------------------------------\n      */\n\n      if nTotDto != 0\n\n         oDiscount                                 := Discount()\n         oDiscount:cDiscountReason                 := ( dbfFacCliT )->cDtoEsp\n         oDiscount:nDiscountRate                   := ( dbfFacCliT )->nDtoEsp\n         oDiscount:nDiscountAmount                 := nTotDto\n\n         :addDiscount( oDiscount )\n\n      end if\n\n      if nTotDpp != 0\n\n         oDiscount                                 := Discount()\n         oDiscount:cDiscountReason                 := ( dbfFacCliT )->cDpp\n         oDiscount:nDiscountRate                   := ( dbfFacCliT )->nDpp\n         oDiscount:nDiscountAmount                 := nTotDpp\n\n         :addDiscount( oDiscount )\n\n      end if\n\n      if nTotUno != 0\n\n         oDiscount                                 := Discount()\n         oDiscount:cDiscountReason                 := ( dbfFacCliT )->cDtoUno\n         oDiscount:nDiscountRate                   := ( dbfFacCliT )->nDtoUno\n         oDiscount:nDiscountAmount                 := nTotUno\n\n         :addDiscount( oDiscount )\n\n      end if\n\n      if nTotDos != 0\n\n         oDiscount                                 := Discount()\n         oDiscount:cDiscountReason                 := ( dbfFacCliT )->cDtoDos\n         oDiscount:nDiscountRate                   := ( dbfFacCliT )->nDtoDos\n         oDiscount:nDiscountAmount                 := nTotDos\n\n         :addDiscount( oDiscount )\n\n      end if\n\n      if nTotAtp != 0\n\n         oDiscount                                 := Discount()\n         oDiscount:cDiscountReason                 := ''\n         oDiscount:nDiscountRate                   := ( dbfFacCliT )->nDtoAtp\n         oDiscount:nDiscountAmount                 := nTotAtp\n\n         :addDiscount( oDiscount )\n\n      end if\n\n      // :nTotalGrossAmountBeforeTaxes                := nTotBrt - nTotalDto\n\n      /*\n      Lineas de detalle----------------------------------------------------\n      ----\n      */\n\n      if ( dbfFacCliL )->( dbSeek( nNumero ) )\n\n         while ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac == nNumero .and. !( dbfFacCliL )->( Eof() )\n\n            if lValLine( dbfFacCliL ) .and. !( dbfFacCliL )->lTotLin\n\n               oItemLine                           := ItemLine():New( oFactura )\n\n               oItemLine:cItemDescription          := Descrip( dbfFacCliL )\n               oItemLine:nQuantity                 := nTotNFacCli( dbfFacCliL )\n               oItemLine:nUnitPriceWithoutTax      := nTotUFacCli( dbfFacCliL, nRouDiv )\n\n               // Primer descuento en linea---------------------------------------\n\n               if ( dbfFacCliL )->nDto != 0\n\n                  oDiscount                        := Discount()\n                  oDiscount:nDiscountRate          := ( dbfFacCliL )->nDto\n\n                  oItemLine:addDiscount( oDiscount )\n\n               end if\n\n               // Descuento de promocion------------------------------------------\n\n               if ( dbfFacCliL )->nDtoPrm != 0\n\n                  oDiscount                        := Discount()\n                  oDiscount:nDiscountRate          := ( dbfFacCliL )->nDtoPrm\n\n                  oItemLine:addDiscount( oDiscount )\n\n               end if\n\n               // Impuestos----------------------------------------------------\n\n               oTax                                := Tax()\n               oTax:nTaxRate                       := ( dbfFacCliL )->nIva\n               oTax:nTaxBase                       := nTotLFacCli( dbfFacCliL, nDouDiv, nRouDiv, , , .f., .f. )\n               oTax:nTaxAmount                     := nIvaLFacCli( dbfFacCliT, dbfFacCliL, nDouDiv, nRouDiv, , .f., .f., .f. )\n\n               if ( dbfFacCliT )->lRecargo\n                  oTax:nEquivalenceSurcharge       := ( dbfFacCliL )->nReq\n                  oTax:nEquivalenceSurchargeAmount := nReqLFacCli( dbfFacCliT, dbfFacCliL, nDouDiv, nRouDiv, , .f., .f., .f. )\n               end if\n\n               oItemLine:addTax( oTax )\n\n               // Añadimos la linea--------------------------------------------\n\n               :addItemLine( oItemLine )\n\n            end if\n\n            ( dbfFacCliL )->( dbSkip() )\n\n         end while\n\n      end if\n\n      /*\n      Pagos de factura---------------------------------------------------------\n      */\n\n      if ( dbfFacCliP )->( dbSeek( nNumero ) )\n\n         while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == nNumero .and. !( dbfFacCliP )->( Eof() )\n\n            if Empty( ( dbfFacCliP )->cTipRec )\n\n               if !Empty( cCodigoXmlPago( ( dbfFacCliP )->cCodPgo, dbfFPago ) )\n\n                  oInstallment                           := Installment()\n                  oInstallment:dInstallmentDueDate       := ( dbfFacCliP )->dFecVto\n                  oInstallment:nInstallmentAmount        := nTotRecCli( dbfFacCliP, dbfDiv )\n                  oInstallment:cPaymentMeans             := cCodigoXmlPago( ( dbfFacCliP )->cCodPgo, dbfFPago )\n\n                  /*\n                  Recibo domiciliado rellenamos con los datos bancarios del cliente\n                  */\n\n                  if oInstallment:cPaymentMeans == \"02\"\n\n                     if lBancoDefecto( ( dbfFacCliT )->cCodCli, dbfCliBnc )\n\n                        oInstallment:oAccountToBeCredited               := Account()\n                        oInstallment:oAccountToBeCredited:cIBAN         := ( dbfCliBnc )->cCtaBnc\n                        oInstallment:oAccountToBeCredited:cBankCode     := Left( ( dbfCliBnc )->cCtaBnc, 4 )\n                        oInstallment:oAccountToBeCredited:cBranchCode   := SubStr( ( dbfCliBnc )->cCtaBnc, 4, 4 )\n                        oInstallment:oAccountToBeCredited:cAddress      := ( dbfCliBnc )->cDirBnc\n                        oInstallment:oAccountToBeCredited:cPostCode     := ( dbfCliBnc )->cCpBnc\n                        oInstallment:oAccountToBeCredited:cTown         := ( dbfCliBnc )->cPobBnc\n                        oInstallment:oAccountToBeCredited:cProvince     := ( dbfCliBnc )->cProBnc\n                        oInstallment:oAccountToBeCredited:cCountryCode  := \"ESP\"\n\n                     end if\n\n                  end if\n\n                  :addInstallment( oInstallment )\n\n               else\n\n                  oTree:Add( \"Recibo : \" + ( dbfFacCliP )->cSerie + \"/\" + AllTrim( Str( ( dbfFacCliP )->nNumFac ) ) + \"/\" + ( dbfFacCliP )->cSufFac + \"-\" + Str( ( dbfFacCliP )->nNumRec ) + \" no tiene código de facturae.\" )\n\n               end if\n\n            end if\n\n            ( dbfFacCliP )->( dbSkip() )\n\n         end do\n\n      end if\n\n   end with\n\n   /*\n   Genera la factura-----------------------------------------------------------\n   */\n\n   oFactura:GeneraXml()\n\n   if !oFactura:lError\n      if dbLock( dbfFacCliT )\n         ( dbfFacCliT )->lExpFac := .t.\n         ( dbfFacCliT )->( dbUnLock() )\n      end if\n   end if\n\n   /*\n   Firma la factura------------------------------------------------------------\n   */\n\n   if lFirmar\n      oFactura:Firma()\n   end if\n\n   if lEnviar\n      oFactura:Enviar()\n   end if\n\n   oFactura:ShowInWeb()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\n#endif\n\n//--------------------------------------------------------------------------//\n\nFUNCTION cChkPagFacCli( cFacCli, dbfFacCliT, dbfFacCliP )\n\n   local cChkPag        := \"\"\n   local nChkPag        := nChkPagFacCli( cFacCli, dbfFacCliT, dbfFacCliP )\n\n   do case\n      case nChkPag == 1\n         cChkPag        := \"Cobrado\"\n\n      case nChkPag == 2\n         cChkPag        := \"Parcialmente\"\n\n      case nChkPag == 3\n         cChkPag        := \"Pendiente\"\n\n   end case\n\nRETURN ( cChkPag )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nChkPagFacCli( cFacCli, dbfFacCliT, dbfFacCliP )\n\n   local nBitmap        := 3\n\n   if ( dbfFacCliT )->lLiquidada\n\n      nBitmap           := 1\n\n   elseif ( dbfFacCliP )->( dbSeek( cFacCli ) )\n\n      while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFacCli .and. !( dbfFacCliP )->( eof() )\n\n         if ( dbfFaccliP )->lCobrado .and. !( dbfFacCliP )->lDevuelto\n\n            nBitmap     := 2\n            exit\n\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end while\n\n   end if\n\nRETURN nBitmap\n\n//---------------------------------------------------------------------------//\n\nStatic Function loadRecCli( aTmp, oBrwPgo )\n\n   local nRec\n   local cFac\n\n   DisableAcceso()\n\n   nRec           := ( dbfTmpPgo  )->( Recno() )\n   cFac           := aTmp[ _CSERIE ] + Str( aTmp[ _NNUMFAC ] ) + aTmp[ _CSUFFAC ]\n\n   ( dbfTmpPgo )->( __dbZap() )\n\n   if ( dbfFacCliP )->( dbSeek( cFac ) )\n\n      while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cFac .and. ( dbfFacCliP )->( !eof() )\n\n         if Empty( ( dbfFacCliP )->cTipRec )\n            dbPass( dbfFacCliP, dbfTmpPgo, .t. )\n         end if\n\n         ( dbfFacCliP )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfTmpPgo )->( dbGoto( nRec ) )\n\n   if !Empty( oBrwPgo )\n      oBrwPgo:Refresh()\n   end if\n\n   EnableAcceso()\n\nRETURN nil\n\n//---------------------------------------------------------------------------//\n/*\nFuncion exclusiva para envases Bodegas Raposo\n*/\n\nFunction nTotalSaldo16( cCodArt, cCodCli, dFecha )\n\n   DEFAULT cCodArt   := Padr( \"16\", 18 )\n   DEFAULT cCodCli   := ( dbfFacCliT )->cCodCli\n   DEFAULT dFecha    := ( dbfFacCliT )->dFecFac\n\nReturn oStock:nTotalSaldo( cCodArt, cCodCli, dFecha )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nTotalSaldo8( cCodArt, cCodCli, dFecha )\n\n   DEFAULT cCodArt   := Padr( \"8\", 18 )\n   DEFAULT cCodCli   := ( dbfFacCliT )->cCodCli\n   DEFAULT dFecha    := ( dbfFacCliT )->dFecFac\n\nReturn oStock:nTotalSaldo( cCodArt, cCodCli, dFecha )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nTotalSaldo4( cCodArt, cCodCli, dFecha )\n\n   DEFAULT cCodArt   := Padr( \"4\", 18 )\n   DEFAULT cCodCli   := ( dbfFacCliT )->cCodCli\n   DEFAULT dFecha    := ( dbfFacCliT )->dFecFac\n\nReturn oStock:nTotalSaldo( cCodArt, cCodCli, dFecha )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoDoc16( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"16\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoDocumento( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoDoc8( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"8\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoDocumento( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoDoc4( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"4\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoDocumento( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoAnt16( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"16\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoAnterior( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoAnt8( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"8\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoAnterior( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n/*Funcion exclusiva para envases Bodegas Raposo*/\n\nFunction nSaldoAnt4( cCodArt, cNumDoc )\n\n   DEFAULT cCodArt   := Padr( \"4\", 18 )\n   DEFAULT cNumDoc   := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac\n\nReturn oStock:nSaldoAnterior( cCodArt, cNumDoc )\n\n//---------------------------------------------------------------------------//\n\nFunction cTotFacCli()\n\nReturn ( Num2Text( nTotFac ) )\n\n//---------------------------------------------------------------------------//\n\nStatic Function EndPgo( aTmp, aGet, lPgdOld, nImpOld, dbfTmpPgo, oBrw, oDlg, nMode )\n\n   local nImp\n   local nCon\n   local nRec        := ( dbfTmpPgo )->( Recno() )\n   local lImpNeg     := ( dbfTmpPgo )->nImporte < 0\n   local nImpTmp     := abs( aTmp[ ( dbfTmpPgo )->( FieldPos( \"nImporte\" ) ) ] )\n   local nImpFld     := abs( ( dbfTmpPgo )->nImporte )\n\n   if !aGet[ ( dbfTmpPgo )->( FieldPos( \"nImpCob\" ) ) ]:lValid()\n      return .f.\n   end if\n\n   /*\n   El importe no puede ser mayor q el importe anterior-------------------------\n   */\n\n   if nImpTmp > nImpFld\n      msgStop( \"El importe no puede ser superior al actual.\" )\n      return nil\n   end if\n\n   oDlg:Disable()\n\n   /*\n   Comprobamos q los importes sean distintos-----------------------------------\n   */\n\n   if nImpFld != nImpTmp\n\n      /*\n      El importe ha cambiado por tanto debemos de hacer un nuevo recibo por la diferencia\n      */\n\n      nImp                       := ( nImpFld - nImpTmp ) * if( lImpNeg, - 1 , 1 )\n\n      /*\n      Añadimos el nuevo recibo-------------------------------------------------\n      */\n\n      ( dbfTmpPgo )->( dbAppend() )\n      nCon                       := ( dbfTmpPgo )->( LastRec() )\n      ( dbfTmpPgo )->cSerie      := aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSERIE\"  ) ) ]\n      ( dbfTmpPgo )->nNumFac     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"NNUMFAC\" ) ) ]\n      ( dbfTmpPgo )->cSufFac     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUFFAC\" ) ) ]\n      ( dbfTmpPgo )->nNumRec     := nCon\n      ( dbfTmpPgo )->cCodCaj     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODCAJ\" ) ) ]\n      ( dbfTmpPgo )->cCodCli     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ]\n      ( dbfTmpPgo )->dEntrada    := Ctod( \"\" )\n      ( dbfTmpPgo )->nImporte    := nImp\n      ( dbfTmpPgo )->nImpGas     := 0\n      ( dbfTmpPgo )->cDescrip    := \"Recibo nº\" + AllTrim( Str( nCon ) ) + \" de factura \" + aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSERIE\" ) ) ] + '/' + AllTrim( Str( aTmp[ ( dbfTmpPgo )->( FieldPos( \"NNUMFAC\" ) ) ] ) ) + '/' + aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUFFAC\" ) ) ]\n      ( dbfTmpPgo )->dPreCob     := dFecFacCli( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSERIE\" ) ) ] + Str( aTmp[ ( dbfTmpPgo )->( FieldPos( \"NNUMFAC\" ) ) ] ) + aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUFFAC\" ) ) ], dbfFacCliT )\n      ( dbfTmpPgo )->dFecVto     := dFecFacCli( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSERIE\" ) ) ] + Str( aTmp[ ( dbfTmpPgo )->( FieldPos( \"NNUMFAC\" ) ) ] ) + aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUFFAC\" ) ) ], dbfFacCliT )\n      ( dbfTmpPgo )->cPgdoPor    := \"\"\n      ( dbfTmpPgo )->lCobrado    := .f.\n      ( dbfTmpPgo )->cDivPgo     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIVPGO\" ) ) ]\n      ( dbfTmpPgo )->nVdvPgo     := aTmp[ ( dbfTmpPgo )->( FieldPos( \"NVDVPGO\" ) ) ]\n      ( dbfTmpPgo )->lConPgo     := .f.\n#ifndef __PDA__\n      ( dbfTmpPgo )->cTurRec     := cCurSesion()\n#endif\n      ( dbfTmpPgo )->( dbUnLock() )\n\n      /*\n      Informacion al Auditor------------------------------------------------\n      */\n\n#ifndef __PDA__\n      if !Empty( oAuditor() )\n         oAuditor():AddEvent( GENERATE_RECIBO_FACTURA_CLIENTES, ( dbfTmpPgo )->cSerie + Str( ( dbfTmpPgo )->nNumFac ) + ( dbfTmpPgo )->cSufFac + Str( ( dbfTmpPgo )->nNumRec ), REC_CLI )\n      end if\n#endif\n\n   end if\n\n   ( dbfTmpPgo )->( dbGoTo( nRec ) )\n\n   /*\n   Grabamos el recibo\n   */\n\n   WinGather( aTmp, aGet, dbfTmpPgo, oBrw, nMode )\n\n   /*\n   Escribe los datos pendientes------------------------------------------------\n   */\n\n   dbCommitAll()\n\n   oDlg:Enable()\n\n   oDlg:End( IDOK )\n\nreturn .t.\n\n//--------------------------------------------------------------------------//\n\n#ifdef __PDA__\n\nstatic function QuiFacPda()\n\n   local nOrdAnt\n   local cSerDoc     := ( dbfFacCliT )->cSerie\n   local nNumDoc     := ( dbfFacCliT )->nNumFac\n   local cSufDoc     := ( dbfFacCliT )->cSufFac\n   local cNumPed     := ( dbfFacCliT )->cNumPed\n   local cNumAlb     := ( dbfFacCliT )->cNumAlb\n   local nRec\n\n   /*\n   Eliminamos las lineas-------------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliL )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliL )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliL )->( eof() )\n      if dbLock( dbfFacCliL )\n         ( dbfFacCliL )->( dbDelete() )\n         ( dbfFacCliL )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliL )->( dbSkip() )\n   end do\n\n   ( dbfFacCliL )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos los pagos--------------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliP )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliP )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliP )->( eof() )\n      if dbLock( dbfFacCliP )\n         ( dbfFacCliP )->( dbDelete() )\n         ( dbfFacCliP )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliP )->( dbSkip() )\n   end do\n\n   ( dbfFacCliP )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos las incidencias--------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliI )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliI )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliI )->( eof() )\n      if dbLock( dbfFacCliI )\n         ( dbfFacCliI )->( dbDelete() )\n         ( dbfFacCliI )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliI )->( dbSkip() )\n   end do\n\n   ( dbfFacCliI )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Eliminamos los documentos---------------------------------------------------\n   */\n\n   nOrdAnt     := ( dbfFacCliD )->( OrdSetFocus( \"nNumFac\" ) )\n\n   while ( dbfFacCliD )->( dbSeek( cSerDoc + Str( nNumDoc ) + cSufDoc ) ) .and. !( dbfFacCliD )->( eof() )\n      if dbLock( dbfFacCliD )\n         ( dbfFacCliD )->( dbDelete() )\n         ( dbfFacCliD )->( dbUnLock() )\n      end if\n\n      ( dbfFacCliD )->( dbSkip() )\n   end do\n\n   ( dbfFacCliD )->( OrdSetFocus( nOrdAnt ) )\n\n   /*\n   Marcamos el contador--------------------------------------------------------\n   */\n\n   nPutDoc( cSerDoc, nNumDoc, cSufDoc, dbfFacCliT, \"nFacCli\", , dbfCount )\n\nreturn .t.\n\n//--------------------------------------------------------------------------//\n\n#endif\n\n//--------------------------------------------------------------------------//\n//--------------------------------------------------------------------------//\n//--------------------------------------------------------------------------//\n\nCLASS sTotal\n\n   DATA nTotalNeto                     INIT 0\n\n   DATA aTotalBase                     INIT { 0, 0, 0 }\n\n   DATA nTotalBruto                    INIT 0\n   DATA aTotalBruto                    INIT { 0, 0, 0 }\n\n   DATA nTotalDocumento                INIT 0\n\n   DATA nTotalPuntoVerde               INIT 0\n   DATA nTotalTransporte               INIT 0\n   DATA nTotalAgente                   INIT 0\n\n   DATA nTotalIva                      INIT 0\n   DATA aTotalIva                      INIT { 0, 0, 0 }\n\n   DATA aPorcentajeIva                 INIT { nil, nil, nil }\n\n   DATA nTotalRecargoEquivalencia      INIT 0\n\n   DATA nTotalImpuestoHidrocarburos    INIT 0\n   DATA aTotalImpuestoHidrocarburos    INIT { 0, 0, 0 }\n\n   DATA nTotalRetencion                INIT 0\n\n   DATA nTotalCosto                    INIT 0\n   DATA nTotalRentabilidad             INIT 0\n\n   DATA nTotalDescuentoGeneral         INIT 0\n   DATA nTotalDescuentoProntoPago      INIT 0\n   DATA nTotalDescuentoUno             INIT 0\n   DATA nTotalDescuentoDos             INIT 0\n\n   DATA nTotalCobrado                  INIT 0\n\n   DATA nPromocion                     INIT 0\n\n   DATA nTotalPersona                  INIT 0\n\n   DATA nDecimalesRedondeo             INIT 2\n\n   DATA nCobrado                       INIT 0\n   DATA nCambio                        INIT 0\n\n   METHOD nTotalPrimerBruto()          INLINE ( ::aTotalBruto[ 1 ] )\n   METHOD nTotalSegundoBruto()         INLINE ( ::aTotalBruto[ 2 ] )\n   METHOD nTotalTercerBruto()          INLINE ( ::aTotalBruto[ 3 ] )\n\n   METHOD TotalBruto()                 INLINE ( ::aTotalBruto[ 1 ] + ::aTotalBruto[ 2 ] + ::aTotalBruto[ 3 ] )\n\n   METHOD nTotalPrimeraBase()          INLINE ( ::aTotalBase[ 1 ] )\n   METHOD nTotalSegundaBase()          INLINE ( ::aTotalBase[ 2 ] )\n   METHOD nTotalTerceraBase()          INLINE ( ::aTotalBase[ 3 ] )\n\n   METHOD TotalBase()                  INLINE ( ::aTotalBase[ 1 ] + ::aTotalBase[ 2 ] + ::aTotalBase[ 3 ] )\n\n   METHOD nTotalPrimerIva()            INLINE ( ::aTotalIva[ 1 ] )\n   METHOD nTotalSegundoIva()           INLINE ( ::aTotalIva[ 2 ] )\n   METHOD nTotalTercerIva()            INLINE ( ::aTotalIva[ 3 ] )\n\n   METHOD TotalIva()                   INLINE ( ::aTotalIva[ 1 ] + ::aTotalIva[ 2 ] + ::aTotalIva[ 3 ] )\n\n   METHOD nPorcentajePrimerIva()       INLINE ( ::aPorcentajeIva[ 1 ] )\n   METHOD nPorcentajeSegundoIva()      INLINE ( ::aPorcentajeIva[ 2 ] )\n   METHOD nPorcentajeTercerIva()       INLINE ( ::aPorcentajeIva[ 3 ] )\n\n   METHOD nTotalPrimerImpuestoHidrocarburos()   INLINE ( ::aTotalImpuestoHidrocarburos[ 1 ] )\n   METHOD nTotalSegundoImpuestoHidrocarburos()  INLINE ( ::aTotalImpuestoHidrocarburos[ 2 ] )\n   METHOD nTotalTercerImpuestoHidrocarburos()   INLINE ( ::aTotalImpuestoHidrocarburos[ 3 ] )\n\n   METHOD TotalImpuestoHidrocarburos()          INLINE ( ::aTotalImpuestoHidrocarburos[ 1 ] + ::aTotalImpuestoHidrocarburos[ 2 ] + ::aTotalImpuestoHidrocarburos[ 3 ] )\n\n   METHOD TotalDescuento()             INLINE ( ::nTotalDescuentoGeneral + ::nTotalDescuentoProntoPago + ::nTotalDescuentoUno + ::nTotalDescuentoDos )\n\n   METHOD TotalDocumento()             INLINE ( Round( ::nTotalDocumento, ::nDecimalesRedondeo ) )\n\n   METHOD TotalRentabilidad()          INLINE ( Round( ::aTotalBase - ::nTotalCosto, ::nDecimalesRedondeo ) )\n   METHOD PorcentajeRentabilidad()     INLINE ( nRentabilidad( ::aTotalBase, 0, ::nTotalCosto ) )\n\n   METHOD nTotalCobro()                INLINE ( Round( ::nCobrado - ::nCambio, ::nDecimalesRedondeo ) )\n\nENDCLASS\n\n//--------------------------------------------------------------------------//\n//--------------------------------------------------------------------------//\n//--------------------------------------------------------------------------//\n//--------------------------------------------------------------------------//\n\nStatic Function FacCliExcelImport()\n\n   local n\n   local sBancasImportacion\n   local cCodigoCliente\n   local nVentaBruta\n   local nComision\n   local nVentaNeta\n   local nBeneficio\n   local oOleExcel\n   local cFileExcel                    := cGetFile( \"Excel ( *.Xls ) | *.xls |Excel ( *.Xlsx ) | *.xlsx\", \"Seleccione la hoja de calculo\" )\n\n   if File( cFileExcel )\n\n      oOleExcel                        := TOleExcel():New( \"Importando hoja de excel\", \"Conectando...\", .f. )\n\n      oOleExcel:oExcel:Visible         := .t.\n      oOleExcel:oExcel:DisplayAlerts   := .f.\n      oOleExcel:oExcel:WorkBooks:Open( cFileExcel )\n      oOleExcel:oExcel:WorkSheets( 1 ):Activate()\n\n      for n := 1 to 65536\n\n         sBancasImportacion                     := sBancasImportacion()\n\n         sBancasImportacion:cCodigoCliente      := oOleExcel:oExcel:ActiveSheet:Range( \"A\" + lTrim( Str( n ) ) ):Value\n         if !Empty( sBancasImportacion:cCodigoCliente )\n\n            sBancasImportacion:cCodigoCliente   := Left( sBancasImportacion:cCodigoCliente, 3 )\n            sBancasImportacion:cCodigoCliente   := Rjust( sBancasImportacion:cCodigoCliente, \"0\", RetNumCodCliEmp() )\n\n            sBancasImportacion:nVentaBruta      := oOleExcel:oExcel:ActiveSheet:Range( \"D\" + lTrim( Str( n ) ) ):Value\n            sBancasImportacion:nComision        := oOleExcel:oExcel:ActiveSheet:Range( \"E\" + lTrim( Str( n ) ) ):Value\n            sBancasImportacion:nVentaNeta       := oOleExcel:oExcel:ActiveSheet:Range( \"F\" + lTrim( Str( n ) ) ):Value\n            sBancasImportacion:nBeneficio       := oOleExcel:oExcel:ActiveSheet:Range( \"L\" + lTrim( Str( n ) ) ):Value\n            sBancasImportacion:nPremios         := oOleExcel:oExcel:ActiveSheet:Range( \"K\" + lTrim( Str( n ) ) ):Value\n            sBancasImportacion:nPorcentaje      := Round( sBancasImportacion:nComision / sBancasImportacion:nVentaBruta * 100, 0 )\n\n            WinAppRec( oWndBrw:oBrw, bEdtRec, dbfFacCliT, , , sBancasImportacion )\n\n         else\n\n            exit\n\n         end if\n\n      next\n\n      msgStop( \"Proceso de importación finalizazo.\" )\n\n      oOleExcel:oExcel:Quit()\n\n      oOleExcel:oExcel:DisplayAlerts := .t.\n\n      oOleExcel:End()\n\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function FacCliExcelNovotecno()\n\n   local oDlg\n   local oBmp\n   local aFichero\n   local oBtnCancel\n   local oBrwFichero\n   local oTreeImportacion\n   local oMeterImportacion\n   local nMeterInformacion                := 0\n\n   aFichero                               := {}\n\n   DEFINE DIALOG oDlg RESOURCE \"ImpNovotecno\"\n\n      REDEFINE BITMAP oBmp ;\n         ID          500 ;\n         RESOURCE    \"Novotecno_48\" ;\n         TRANSPARENT ;\n         OF          oDlg\n\n      /*\n      Browse de ficheros a importar--------------------------------------------\n      */\n\n      oBrwFichero                         := TXBrowse():New( oDlg )\n\n      oBrwFichero:bClrSel                 := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwFichero:bClrSelFocus            := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwFichero:SetArray( aFichero, , , .f. )\n\n      oBrwFichero:nMarqueeStyle           := 5\n\n      oBrwFichero:lHScroll                := .f.\n\n      oBrwFichero:CreateFromResource( 220 )\n\n      oBrwFichero:bLDblClick              := {|| ShellExecute( oDlg:hWnd, \"open\", Rtrim( aFichero[ oBrwFichero:nArrayAt ] ) ) }\n\n      with object ( oBrwFichero:AddCol() )\n         :cHeader          := \"Fichero\"\n         :bEditValue       := {|| aFichero[ oBrwFichero:nArrayAt ] }\n         :nWidth           := 460\n      end with\n\n      REDEFINE BUTTON ;\n         ID       200 ;\n         OF       oDlg ;\n         ACTION   ( AddFichero( aFichero, oBrwFichero ) )\n\n      REDEFINE BUTTON ;\n         ID       210 ;\n         OF       oDlg ;\n         ACTION   ( DelFichero( aFichero, oBrwFichero ) )\n\n      /*\n      Tree de importación------------------------------------------------------\n      */\n\n      oTreeImportacion                    := TTreeView():Redefine( 300, oDlg )\n\n      REDEFINE METER oMeterImportacion ;\n         VAR      nMeterInformacion ;\n         NOPERCENTAGE ;\n         ID       310 ;\n         OF       oDlg\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( ExecuteImportacion( aFichero, oTreeImportacion, oMeterImportacion, oBtnCancel, oDlg ) )\n\n      REDEFINE BUTTON oBtnCancel ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( lCancelImportacion := .t., oDlg:end() )\n\n      oDlg:AddFastKey( VK_F5, {|| ExecuteImportacion( aFichero, oTreeImportacion, oMeterImportacion, oBtnCancel, oDlg ) } )\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   oTreeImportacion:Destroy()\n\n   oBmp:End()\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function AddFichero( aFichero, oBrwFichero )\n\n   local i\n   local cFile\n   local aFile\n   local nFlag    := nOr( OFN_PATHMUSTEXIST, OFN_NOCHANGEDIR, OFN_ALLOWMULTISELECT, OFN_EXPLORER, OFN_LONGNAMES )\n\n   cFile          := cGetFile( \"Excel ( *.Xlsx ) | *.xlsx|Excel ( *.Xls ) | *.xls\", \"Seleccione la hoja de calculo\", \"*.*\" , , .f., .t., nFlag )\n   cFile          := Left( cFile, At( Chr( 0 ) + Chr( 0 ), cFile ) - 1 )\n\n   if !Empty( cFile ) //.or. Valtype( cFile ) == \"N\"\n\n      cFile       := StrTran( cFile, Chr( 0 ), \",\" )\n      aFile       := hb_aTokens( cFile, \",\" )\n\n      if Len( aFile ) > 1\n\n         for i := 2 to Len( aFile )\n            aFile[ i ] := aFile[ 1 ] + \"\\\" + aFile[ i ]\n         next\n\n         aDel( aFile, 1, .t. )\n\n      endif\n\n      if IsArray( aFile )\n\n         for i := 1 to Len( aFile )\n            aAdd( aFichero, aFile[ i ] ) // if( SubStr( aFile[ i ], 4, 1 ) == \"\\\", aFileDisc( aFile[i] ) + \"\\\" + aFileName( aFile[ i ] ), aFile[ i ] ) )\n         next\n\n      else\n\n         aAdd( aFichero, aFile )\n\n      endif\n\n   end if\n\n   oBrwFichero:Refresh()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function DelFichero( aFichero, oBrwFichero )\n\n   aDel( aFichero, oBrwFichero:nArrayAt, .t. )\n\n   oBrwFichero:Refresh()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nCLASS sBancasImportacion\n\n   DATA nVentaBruta                    INIT 0\n   DATA nComision                      INIT 0\n   DATA nVentaNeta                     INIT 0\n   DATA nBeneficio                     INIT 0\n   DATA nPorcentaje                    INIT 0\n   DATA nPremios                       INIT 0\n\nENDCLASS\n\n//---------------------------------------------------------------------------//\n\nCLASS sNovotecnoImportacion\n\n   DATA cCodigoCliente\n   DATA dFecha\n   DATA cHora\n   DATA cCodigoArticulo\n   DATA cNombreArticulo\n   DATA nNumeroOperacion\n\n   DATA nImporteClaro                  INIT 0\n   DATA nImporteOrange                 INIT 0\n   DATA nImporteViva                   INIT 0\n   DATA nImporteMount                  INIT 0\n   DATA nImporteTricom                 INIT 0\n   DATA nImporteLoterias               INIT 0\n\n   DATA cTipo\n   DATA lValid                         INIT .t.\n   DATA nPrecio                        INIT 0\n\nENDCLASS\n\n//---------------------------------------------------------------------------//\n\nStatic Function ExecuteImportacion( aFichero, oTreeImportacion, oMeterImportacion, oBtnCancel, oDlg )\n\n   local n\n   local oNode\n   local oError\n   local oBlock\n   local oError2\n   local oBlock2\n   local cFichero\n   local oOleExcel\n   local oActiveSheet\n   local nActiveSheetRows\n   local nActiveSheetColumns\n   local sNovotecnoImportacion\n\n   oDlg:Disable()\n   oBtnCancel:Enable()\n\n   aImportacion                           := {}\n   lCancelImportacion                     := .f.\n\n   for each cFichero in aFichero\n\n      oBlock                              := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n      BEGIN SEQUENCE\n\n         oTreeImportacion:Select( oTreeImportacion:Add( \"Importando hoja de excel \" + cFichero ) )\n\n         oOleExcel                        := TOleExcel():New( \"Importando hoja de excel\", \"Conectando...\", .f. )\n\n         oOleExcel:oExcel:Visible         := .f.\n         oOleExcel:oExcel:DisplayAlerts   := .f.\n\n         oOleExcel:oExcel:Workbooks:Add()\n         oOleExcel:oExcel:Workbooks:Open( cFichero )\n\n         oActiveSheet                     := oOleExcel:oExcel:ActiveSheet\n\n         nActiveSheetRows                 := oActiveSheet:UsedRange:Rows:Count()\n         nActiveSheetColumns              := oActiveSheet:UsedRange:Columns:Count()\n\n         oMeterImportacion:SetTotal( nActiveSheetRows )\n\n         for n := 2 to ( nActiveSheetRows - 1 )\n\n            oBlock2                                         := ErrorBlock( { | oError2 | Break( oError2 ) } )\n            BEGIN SEQUENCE\n\n            if !lCancelImportacion\n\n               sNovotecnoImportacion                        := sNovotecnoImportacion()\n\n               // sNovotecnoImportacion:nNumeroOperacion       := Round( oOleExcel:oExcel:ActiveSheet:Range( \"A\" + lTrim( Str( n ) ) ):Value, 0 )\n\n               oNode                                        := oTreeImportacion:Add( \"Procesando operación \" + lTrim( Str( n ) ) )\n               oTreeImportacion:Select( oNode )\n\n               sNovotecnoImportacion:cCodigoCliente         := oOleExcel:oExcel:ActiveSheet:Range( \"A\" + lTrim( Str( n ) ) ):Value\n\n               if !Empty( sNovotecnoImportacion:cCodigoCliente )\n\n                  if IsNum( sNovotecnoImportacion:cCodigoCliente )\n                     sNovotecnoImportacion:cCodigoCliente   := Round( sNovotecnoImportacion:cCodigoCliente, 0 )\n                     sNovotecnoImportacion:cCodigoCliente   := Str( sNovotecnoImportacion:cCodigoCliente )\n                     sNovotecnoImportacion:cCodigoCliente   := Alltrim( sNovotecnoImportacion:cCodigoCliente )\n                  end if\n\n                  if dbSeekInOrd( sNovotecnoImportacion:cCodigoCliente, \"cCodPos\", dbfObrasT )\n                     sNovotecnoImportacion:cCodigoCliente   := ( dbfObrasT )->cCodCli\n                  else\n                     sNovotecnoImportacion:cCodigoCliente   := Rjust( sNovotecnoImportacion:cCodigoCliente, \"0\", RetNumCodCliEmp() )\n                  end if\n\n                  sNovotecnoImportacion:dFecha              := Date()\n                  sNovotecnoImportacion:cHora               := Time()\n\n                  sNovotecnoImportacion:nImporteClaro       := oOleExcel:oExcel:ActiveSheet:Range( \"B\" + lTrim( Str( n ) ) ):Value\n                  sNovotecnoImportacion:nImporteOrange      := oOleExcel:oExcel:ActiveSheet:Range( \"C\" + lTrim( Str( n ) ) ):Value\n                  sNovotecnoImportacion:nImporteViva        := oOleExcel:oExcel:ActiveSheet:Range( \"D\" + lTrim( Str( n ) ) ):Value\n                  sNovotecnoImportacion:nImporteMount       := oOleExcel:oExcel:ActiveSheet:Range( \"E\" + lTrim( Str( n ) ) ):Value\n                  sNovotecnoImportacion:nImporteTricom      := oOleExcel:oExcel:ActiveSheet:Range( \"F\" + lTrim( Str( n ) ) ):Value\n                  sNovotecnoImportacion:nImporteLoterias    := oOleExcel:oExcel:ActiveSheet:Range( \"G\" + lTrim( Str( n ) ) ):Value\n\n                  sNovotecnoImportacion:lValid              := .t.\n\n                  oTreeImportacion:Select( oNode:Add( \"Cliente \" + sNovotecnoImportacion:cCodigoCliente ) )\n                  oTreeImportacion:Select( oNode:Add( \"Fecha \" + Dtoc( sNovotecnoImportacion:dFecha ) ) )\n                  oTreeImportacion:Select( oNode:Add( \"Hora \" + sNovotecnoImportacion:cHora ) )\n                  oTreeImportacion:Select( oNode:Add( \"Precio Claro \" + Alltrim( cValToChar( sNovotecnoImportacion:nImporteClaro ) ) ) )\n\n                  if sNovotecnoImportacion:lValid\n                     aAdd( aImportacion, sNovotecnoImportacion )\n                  end if\n\n               end if\n\n            end if\n\n            RECOVER USING oError2\n\n               msgStop( ErrorMessage( oError2 ), \"Error al importar facturas\" )\n\n            END SEQUENCE\n\n            ErrorBlock( oBlock2 )\n\n            oMeterImportacion:Set( n )\n\n         next\n\n         oOleExcel:oExcel:Quit()\n         oOleExcel:oExcel:DisplayAlerts   := .t.\n\n      RECOVER USING oError\n\n         msgStop( ErrorMessage( oError ), \"Error al importar facturas\" )\n\n      END SEQUENCE\n\n      ErrorBlock( oBlock )\n\n      if !Empty( oOleExcel )\n         oOleExcel:End()\n      end if\n\n      if lCancelImportacion\n         oTreeImportacion:Select( oTreeImportacion:Add( \"Proceso cancelado por el usuario\" ) )\n      end if\n\n   next\n\n   if !lCancelImportacion .and. !Empty( aImportacion )\n      FacturaImportacion( oTreeImportacion )\n   end if\n\n   oDlg:Enable()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function FacturaImportacion( oTreeImportacion )\n\n   local s\n   local aTotalFactura\n   local cCodigoCambio\n   local cSerieFactura\n   local nNumeroFactura\n   local cSufijoFactura\n   local nNumeroLinea                  := 1\n   local lAppendFactura                := .f.\n\n   aSort( aImportacion, , , {|x,y| x:cCodigoCliente > y:cCodigoCliente } )\n\n   for each s in aImportacion\n\n      /*\n      Inicializamos las variables----------------------------------------------\n      */\n\n      nNumeroLinea                     := 1\n      lAppendFactura                   := .f.\n\n      /*\n      Vamos a comprobar q el cliente exista------------------------------------\n      */\n\n      if dbSeekInOrd( s:cCodigoCliente, \"Cod\", dbfClient )\n\n         cSerieFactura                 := if( !Empty( ( dbfClient )->Serie ), ( dbfClient )->Serie, \"A\" )\n         nNumeroFactura                := nNewDoc( cSerieFactura, dbfFacCliT, \"nFacCli\", , dbfCount )\n         cSufijoFactura                := RetSufEmp()\n\n         ( dbfFacCliT )->( dbAppend() )\n         if !( dbfFacCliT )->( NetErr() )\n\n            ( dbfFacCliT )->cSerie     := cSerieFactura\n            ( dbfFacCliT )->nNumFac    := nNumeroFactura\n            ( dbfFacCliT )->cSufFac    := cSufijoFactura\n\n            ( dbfFacCliT )->cCodCli    := ( dbfClient )->Cod\n            ( dbfFacCliT )->cNomCli    := ( dbfClient )->Titulo\n            ( dbfFacCliT )->cDirCli    := ( dbfClient )->Domicilio\n            ( dbfFacCliT )->cPobCli    := ( dbfClient )->Poblacion\n            ( dbfFacCliT )->cPrvCli    := ( dbfClient )->Provincia\n            ( dbfFacCliT )->cPosCli    := ( dbfClient )->CodPostal\n            ( dbfFacCliT )->cDniCli    := ( dbfClient )->Nif\n\n            ( dbfFacCliT )->cCodPago   := if( !Empty( ( dbfClient )->CodPago ), ( dbfClient )->CodPago, cDefFpg() )\n            ( dbfFacCliT )->nTarifa    := Max( ( dbfClient )->nTarifa, 1 )\n            ( dbfFacCliT )->dFecFac    := s:dFecha\n            ( dbfFacCliT )->cTurFac    := cCurSesion()\n            ( dbfFacCliT )->cCodAlm    := oUser():cAlmacen()\n            ( dbfFacCliT )->cCodUsr    := cCurUsr()\n            ( dbfFacCliT )->dFecCre    := Date()\n            ( dbfFacCliT )->cTimCre    := Time()\n            ( dbfFacCliT )->cCodDlg    := RetFld( cCurUsr(), dbfUsr, \"cCodDlg\" )\n            ( dbfFacCliT )->cCodCaj    := oUser():cCaja()\n\n            lAppendFactura             := .t.\n\n            oTreeImportacion:Select( oTreeImportacion:Add( \"Nueva factura creada \" + ( dbfFacCliT )->cSerie + \"/\" + Alltrim( Str( ( dbfFacCliT )->nNumFac ) ) + \"/\" + Alltrim( ( dbfFacCliT )->cSufFac ) ) )\n\n         end if\n\n      else\n\n         oTreeImportacion:Add( \"Cliente no encontrado \" + s:cCodigoCliente )\n\n      end if\n\n      if lAppendFactura\n\n         if s:nImporteClaro != 0\n\n            ( dbfFacCliL )->( dbAppend() )\n            if !( dbfFacCliL )->( NetErr() )\n\n               ( dbfFacCliL )->nNumLin    := nNumeroLinea++\n               ( dbfFacCliL )->cSerie     := cSerieFactura\n               ( dbfFacCliL )->nNumFac    := nNumeroFactura\n               ( dbfFacCliL )->cSufFac    := cSufijoFactura\n               ( dbfFacCliL )->cRef       := \"CLARO\"\n               ( dbfFacCliL )->cDetalle   := \"CLARO\"\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := s:nImporteClaro\n               ( dbfFacCliL )->cAlmLin    := oUser():cAlmacen()\n\n            end if\n\n         end if\n\n         if s:nImporteOrange != 0\n\n            ( dbfFacCliL )->( dbAppend() )\n            if !( dbfFacCliL )->( NetErr() )\n\n               ( dbfFacCliL )->nNumLin    := nNumeroLinea++\n               ( dbfFacCliL )->cSerie     := cSerieFactura\n               ( dbfFacCliL )->nNumFac    := nNumeroFactura\n               ( dbfFacCliL )->cSufFac    := cSufijoFactura\n               ( dbfFacCliL )->cRef       := \"ORANGE\"\n               ( dbfFacCliL )->cDetalle   := \"ORANGE\"\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := s:nImporteOrange\n               ( dbfFacCliL )->cAlmLin    := oUser():cAlmacen()\n\n            end if\n\n         end if\n\n         if s:nImporteViva != 0\n\n            ( dbfFacCliL )->( dbAppend() )\n            if !( dbfFacCliL )->( NetErr() )\n\n               ( dbfFacCliL )->nNumLin    := nNumeroLinea++\n               ( dbfFacCliL )->cSerie     := cSerieFactura\n               ( dbfFacCliL )->nNumFac    := nNumeroFactura\n               ( dbfFacCliL )->cSufFac    := cSufijoFactura\n               ( dbfFacCliL )->cRef       := \"VIVA\"\n               ( dbfFacCliL )->cDetalle   := \"VIVA\"\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := s:nImporteViva\n               ( dbfFacCliL )->cAlmLin    := oUser():cAlmacen()\n\n            end if\n\n         end if\n\n         if s:nImporteTricom != 0\n\n            ( dbfFacCliL )->( dbAppend() )\n            if !( dbfFacCliL )->( NetErr() )\n\n               ( dbfFacCliL )->nNumLin    := nNumeroLinea++\n               ( dbfFacCliL )->cSerie     := cSerieFactura\n               ( dbfFacCliL )->nNumFac    := nNumeroFactura\n               ( dbfFacCliL )->cSufFac    := cSufijoFactura\n               ( dbfFacCliL )->cRef       := \"TRICOM\"\n               ( dbfFacCliL )->cDetalle   := \"TRICOM\"\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := s:nImporteTricom\n               ( dbfFacCliL )->cAlmLin    := oUser():cAlmacen()\n\n            end if\n\n         end if\n\n         if s:nImporteLoterias != 0\n\n            ( dbfFacCliL )->( dbAppend() )\n            if !( dbfFacCliL )->( NetErr() )\n\n               ( dbfFacCliL )->nNumLin    := nNumeroLinea++\n               ( dbfFacCliL )->cSerie     := cSerieFactura\n               ( dbfFacCliL )->nNumFac    := nNumeroFactura\n               ( dbfFacCliL )->cSufFac    := cSufijoFactura\n               ( dbfFacCliL )->cRef       := \"LOTERIAS\"\n               ( dbfFacCliL )->cDetalle   := \"LOTERIAS\"\n               ( dbfFacCliL )->nUniCaja   := 1\n               ( dbfFacCliL )->nPreUnit   := s:nImporteLoterias\n               ( dbfFacCliL )->cAlmLin    := oUser():cAlmacen()\n\n            end if\n\n         end if\n\n      end if\n\n      if lAppendFactura .and. !Empty( cSerieFactura ) .and. !Empty( nNumeroFactura )\n         GeneraCobrosImportacion( cSerieFactura, nNumeroFactura, cSufijoFactura )\n      end if\n\n   next\n\n   oTreeImportacion:Select( oTreeImportacion:Add( \"Proceso de importación finalizado\" ) )\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function GeneraCobrosImportacion( cSerieFactura, nNumeroFactura, cSufijoFactura )\n\n   local aTotalFactura\n\n   /*\n   Generamos los pagos------------------------------------------------\n   */\n\n   GenPgoFacCli( cSerieFactura + Str( nNumeroFactura ) + cSufijoFactura, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfClient, dbfFPago, dbfDiv, dbfIva )\n\n   ChkLqdFacCli( , dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv, .f. )\n\n   /*\n   Guardamos los totales----------------------------------------------\n   */\n\n   aTotalFactura                 := aTotFacCli( cSerieFactura + Str( nNumeroFactura ) + cSufijoFactura, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, ( dbfFacCliT )->cDivFac )\n\n   if dbLock( dbfFacCliT )\n\n      ( dbfFacCliT )->nTotNet    := aTotalFactura[ 1 ]\n      ( dbfFacCliT )->nTotIva    := aTotalFactura[ 2 ]\n      ( dbfFacCliT )->nTotReq    := aTotalFactura[ 3 ]\n      ( dbfFacCliT )->nTotFac    := aTotalFactura[ 4 ]\n\n      ( dbfFacCliT )->( dbUnLock() )\n\n   end if\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n\nstatic function lBuscaOferta( cCodArt, aGet, aTmp, aTmpFac, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )\n\n   local sOfeArt\n   local nTotalLinea    := 0\n\n\n   if ( dbfArticulo )->Codigo == cCodArt .or. ( dbfArticulo )->( dbSeek( cCodArt ) )\n\n      /*\n      Buscamos si existen ofertas por artículo----------------------------\n      */\n\n      nTotalLinea       := lCalcDeta( aTmp, aTmpFac, .t. )\n\n      sOfeArt           := sOfertaArticulo( cCodArt, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _NUNICAJA ], aTmpFac[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], , aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmp[ _CDIVFAC ], dbfArticulo, dbfDiv, dbfKit, dbfIva, aTmp[ _NCANENT ], nTotalLinea )\n\n      if !Empty( sOfeArt ) \n         if ( sOfeArt:nPrecio != 0 )\n            aGet[ _NPREUNIT ]:cText( sOfeArt:nPrecio )\n         end if \n         if ( sOfeArt:nDtoPorcentual != 0 )\n            aGet[ _NDTO     ]:cText( sOfeArt:nDtoPorcentual )\n         end if \n         if ( sOfeArt:nDtoLineal != 0)\n            aGet[ _NDTODIV  ]:cText( sOfeArt:nDtoLineal )\n         end if \n         aTmp[ _LLINOFE  ] := .t.\n      end if\n\n      if !aTmp[ _LLINOFE ]\n\n         /*\n         Buscamos si existen ofertas por familia----------------------------\n         */\n\n         sOfeArt        := sOfertaFamilia( ( dbfArticulo )->Familia, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmpFac[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      if !aTmp[ _LLINOFE ]\n\n         /*\n         Buscamos si existen ofertas por tipos de articulos--------------\n         */\n\n         sOfeArt     := sOfertaTipoArticulo( ( dbfArticulo )->cCodTip, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmpFac[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      if !aTmp[ _LLINOFE ]\n\n         /*\n         Buscamos si existen ofertas por tipos de articulos--------------\n         */\n\n         sOfeArt     := sOfertaCategoria( ( dbfArticulo )->cCodCate, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmpFac[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      if !aTmp[ _LLINOFE ]\n\n         /*\n         Buscamos si existen ofertas por temporadas----------------------\n         */\n\n         sOfeArt     := sOfertaTemporada( ( dbfArticulo )->cCodTemp, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmp[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      if !aTmp[ _LLINOFE ]\n\n         /*\n         Buscamos si existen ofertas por fabricantes---------------------------\n         */\n\n         sOfeArt     := sOfertaFabricante( ( dbfArticulo )->cCodFab, aTmpFac[ _CCODCLI ], aTmpFac[ _CCODGRP ], aTmpFac[ _DFECFAC ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n   end if\n\nreturn .t.\n\n//--------------------------------------------------------------------------//\n\nStatic Function lValidLote( aTmp, aGet, oStkAct )\n\n   if !uFieldEmpresa( \"lNStkAct\" )\n      oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n   end if\n\nReturn ( .t. )\n\n//--------------------------------------------------------------------------//\n\nStatic Function EditarNumeroSerie( aTmp, oStock, nMode )\n\n   local oNumerosSeries\n\n   with object ( TNumerosSerie() )\n\n      :nMode            := nMode\n\n      :cCodArt          := aTmp[ _CREF    ]\n      :cCodAlm          := aTmp[ _CALMLIN ]\n      :nNumLin          := aTmp[ _NNUMLIN ]\n\n      :nTotalUnidades   := nTotNFacCli( aTmp )\n\n      :oStock           := oStock\n\n      :uTmpSer          := dbfTmpSer\n\n      :Resource()\n\n   end with\n\nReturn ( nil )\n\n//--------------------------------------------------------------------------//\n/*\nFuncion que nos indica si una factura está rectificada o no--------------------\n*/\n\nFunction lRectificadaCli( cNumFac, cFacCliT, cFacRecT )\n\n   local lRectificada   := .f.\n\n   DEFAULT cFacCliT     := dbfFacCliT\n   DEFAULT cFacRecT     := dbfFacRecT\n   DEFAULT cNumFac      := ( cFacCliT )->cSerie + Str( ( cFacCliT )->nNumFac ) + ( cFacCliT )->cSufFac\n\n   if dbSeekInOrd( cNumFac, \"CNUMFAC\", cFacRecT )\n      lRectificada      := .t.\n   end if\n\nreturn ( lRectificada )\n\n//---------------------------------------------------------------------------//\n\n//---------------------------------------------------------------------------//\n//\n// Importa satsupuestos de clientes\n//\n\nSTATIC FUNCTION cSatCli( aGet, aTmp, oBrw, nMode )\n\n   local cDesAlb\n   local cNumsat  := aGet[ _CNUMSAT ]:VarGet()\n   local lValid   := .f.\n\n   if nMode != APPD_MODE .OR. Empty( cNumsat )\n      return .t.\n   end if\n\n   if dbSeekInOrd( cNumsat, \"nNumSat\", dbfSatCliT )\n\n      if ( dbfSatCliT )->lEstado\n\n         MsgStop( \"S.A.T. ya procesado\" )\n         lValid   := .f.\n\n      else\n\n         CursorWait()\n\n         aGet[ _CCODCLI ]:cText( ( dbfSatCliT )->CCODCLI )\n         aGet[ _CCODCLI ]:lValid()\n         aGet[ _CCODCLI ]:Disable()\n\n         aGet[ _CNOMCLI ]:cText( ( dbfSatCliT )->CNOMCLI )\n         aGet[ _CDIRCLI ]:cText( ( dbfSatCliT )->CDIRCLI )\n         aGet[ _CPOBCLI ]:cText( ( dbfSatCliT )->CPOBCLI )\n         aGet[ _CPRVCLI ]:cText( ( dbfSatCliT )->CPRVCLI )\n         aGet[ _CPOSCLI ]:cText( ( dbfSatCliT )->CPOSCLI )\n         aGet[ _CDNICLI ]:cText( ( dbfSatCliT )->CDNICLI )\n         aGet[ _CTLFCLI ]:cText( ( dbfSatCliT )->CTLFCLI )\n\n         aGet[ _CCODALM ]:cText( ( dbfSatCliT )->CCODALM )\n         aGet[ _CCODALM ]:lValid()\n\n         aGet[ _CCODCAJ ]:cText( ( dbfSatCliT )->cCodCaj )\n         aGet[ _CCODCAJ ]:lValid()\n\n         aGet[ _CCODPAGO]:cText( ( dbfSatCliT )->CCODPGO )\n         aGet[ _CCODPAGO]:lValid()\n\n         aGet[ _CCODAGE ]:cText( ( dbfSatCliT )->CCODAGE )\n         aGet[ _CCODAGE ]:lValid()\n\n         aGet[ _NPCTCOMAGE]:cText( ( dbfSatCliT )->nPctComAge )\n\n         aGet[ _CCODTAR ]:cText( ( dbfSatCliT )->CCODTAR )\n         aGet[ _CCODTAR ]:lValid()\n\n         aGet[ _CCODOBR ]:cText( ( dbfSatCliT )->CCODOBR )\n         aGet[ _CCODOBR ]:lValid()\n\n         aGet[ _NTARIFA ]:cText( ( dbfSatCliT )->nTarifa )\n\n         aGet[ _CCODTRN ]:cText( ( dbfSatCliT )->cCodTrn )\n         aGet[ _CCODTRN ]:lValid() \n\n         aGet[ _LIVAINC ]:Click( ( dbfSatCliT )->lIvaInc )\n         aGet[ _LRECARGO]:Click( ( dbfSatCliT )->lRecargo )\n         aGet[ _LOPERPV ]:Click( ( dbfSatCliT )->lOperPv )\n\n         aGet[ _CCONDENT]:cText( ( dbfSatCliT )->cCondEnt )\n         aGet[ _MCOMENT ]:cText( ( dbfSatCliT )->mComent )\n         aGet[ _MOBSERV ]:cText( ( dbfSatCliT )->mObserv )\n\n         aGet[ _CDTOESP ]:cText( ( dbfSatCliT )->cDtoEsp )\n         aGet[ _CDPP    ]:cText( ( dbfSatCliT )->cDpp    )\n         aGet[ _NDTOESP ]:cText( ( dbfSatCliT )->nDtoEsp )\n         aGet[ _NDPP    ]:cText( ( dbfSatCliT )->nDpp    )\n         aGet[ _CDTOUNO ]:cText( ( dbfSatCliT )->cDtoUno )\n         aGet[ _NDTOUNO ]:cText( ( dbfSatCliT )->nDtoUno )\n         aGet[ _CDTODOS ]:cText( ( dbfSatCliT )->cDtoDos )\n         aGet[ _NDTODOS ]:cText( ( dbfSatCliT )->nDtoDos )\n         aGet[ _CMANOBR ]:cText( ( dbfSatCliT )->cManObr )\n         aGet[ _NIVAMAN ]:cText( ( dbfSatCliT )->nIvaMan )\n         aGet[ _NMANOBR ]:cText( ( dbfSatCliT )->nManObr )\n         aGet[ _NBULTOS ]:cText( ( dbfSatCliT )->nBultos )\n\n         aTmp[ _CCODGRP]         := ( dbfSatCliT )->cCodGrp\n         aTmp[ _LMODCLI]         := ( dbfSatCliT )->lModCli\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]      := ( dbfSatCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]      := ( dbfSatCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]      := ( dbfSatCliT )->dFecSal\n\n         if ( dbfSatCliL )->( dbSeek( cNumsat ) )\n\n            ( dbfTmpLin )->( dbAppend() )\n            cDesAlb                    := \"\"\n            cDesAlb                    += \"S.A.T. Nº \" + ( dbfSatCliT )->cSerSat + \"/\" + AllTrim( Str( ( dbfSatCliT )->nNumSat ) ) + \"/\" + ( dbfSatCliT )->cSufSat\n            cDesAlb                    += \" - Fecha \" + Dtoc( ( dbfSatCliT )->dFecSat )\n            ( dbfTmpLin )->MLNGDES     := cDesAlb\n            ( dbfTmpLin )->LCONTROL    := .t.\n\n            while ( ( dbfSatCliL )->cSerSat + Str( ( dbfSatCliL )->nNumSat ) + ( dbfSatCliL )->cSufSat == cNumsat )\n\n               (dbfTmpLin)->( dbAppend() )\n\n               (dbfTmpLin)->nNumLin    := (dbfSatCliL)->nNumLin\n               (dbfTmpLin)->cRef       := (dbfSatCliL)->cRef\n               (dbfTmpLin)->cDetalle   := (dbfSatCliL)->cDetAlle\n               (dbfTmpLin)->mLngDes    := (dbfSatCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfSatCliL)->mNumSer\n               (dbfTmpLin)->nPreUnit   := (dbfSatCliL)->nPreDiv\n               (dbfTmpLin)->nPntVer    := (dbfSatCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfSatCliL)->nImpTrn\n               (dbfTmpLin)->nPesoKG    := (dbfSatCliL)->nPesokg\n               (dbfTmpLin)->cPesoKG    := (dbfSatCliL)->cPesokg\n               (dbfTmpLin)->cUnidad    := (dbfSatCliL)->cUnidad\n               (dbfTmpLin)->nVolumen   := (dbfSatCliL)->nVolumen\n               (dbfTmpLin)->cVolumen   := (dbfSatCliL)->cVolumen\n               (dbfTmpLin)->nIVA       := (dbfSatCliL)->nIva\n               (dbfTmpLin)->nReq       := (dbfSatCliL)->nReq\n               (dbfTmpLin)->cUNIDAD    := (dbfSatCliL)->cUnidad\n               (dbfTmpLin)->nDTO       := (dbfSatCliL)->nDto\n               (dbfTmpLin)->nDTOPRM    := (dbfSatCliL)->nDtoPrm\n               (dbfTmpLin)->nCOMAGE    := (dbfSatCliL)->nComAge\n               (dbfTmpLin)->lTOTLIN    := (dbfSatCliL)->lTotLin\n               (dbfTmpLin)->nDtoDiv    := (dbfSatCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfSatCliL)->nCtlStk\n               (dbfTmpLin)->nCosDiv    := (dbfSatCliL)->nCosDiv\n               (dbfTmpLin)->cTipMov    := (dbfSatCliL)->cTipMov\n               (dbfTmpLin)->cAlmLin    := (dbfSatCliL)->cAlmLin\n               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n               (dbfTmpLin)->nValImp    := (dbfSatCliL)->nValImp\n               (dbfTmpLin)->CCODPR1    := (dbfSatCliL)->cCodPr1\n               (dbfTmpLin)->CCODPR2    := (dbfSatCliL)->cCodPr2\n               (dbfTmpLin)->CVALPR1    := (dbfSatCliL)->cValPr1\n               (dbfTmpLin)->CVALPR2    := (dbfSatCliL)->cValPr2\n               (dbfTmpLin)->nCanEnt    := (dbfSatCLiL)->nCanSat\n               (dbfTmpLin)->nUniCaja   := (dbfSatCLiL)->nUniCaja\n               (dbfTmpLin)->nUndKit    := (dbfSatCLiL)->nUndKit\n               (dbfTmpLin)->lKitArt    := (dbfSatCLiL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfSatCLiL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfSatCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfSatCLiL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfSatCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfSatCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfSatCliL)->cLote\n               (dbfTmpLin)->lMsgVta    := (dbfSatCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfSatCliL)->lNotVta\n               (dbfTmpLin)->lImpLin    := (dbfSatCliL)->lImpLin\n               (dbfTmpLin)->cCodTip    := (dbfSatCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfSatCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfSatCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfSatCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfSatCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfSatCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfSatCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfSatCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfSatCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfSatCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfSatCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfSatCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfSatCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfSatCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfSatCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfSatCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfSatCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfSatCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfSatCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfSatCliL)->nIncPnt\n               (dbfTmpLin)->lControl   := (dbfSatCliL)->lControl\n               (dbfTmpLin)->lLinOfe    := (dbfSatCliL)->lLinOfe\n\n               (dbfSatCliL)->( dbSkip() )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del SAT----------------------------\n            */\n\n            if ( dbfSatCliI )->( dbSeek( cNumsat ) )\n               while ( dbfSatCliI )->cSerSat + Str( ( dbfSatCliI )->nNumSat ) + ( dbfSatCliI )->cSufSat == cNumsat .and. !( dbfSatCliI )->( Eof() )\n                  dbPass( dbfSatCliI, dbfTmpInc, .t. )\n                  ( dbfSatCliI )->( dbSkip() )\n               end while\n            end if\n\n            ( dbfSatCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del SAT-----------------------------\n            */\n\n            if ( dbfSatCliD )->( dbSeek( cNumsat ) )\n               while ( dbfSatCliD )->cSerSat + Str( ( dbfSatCliD )->nNumSat ) + ( dbfSatCliD )->cSufSat == cNumsat .and. !( dbfSatCliD )->( Eof() )\n                  dbPass( dbfSatCliD, dbfTmpDoc, .t. )\n                  ( dbfSatCliD )->( dbSkip() )\n               end while\n            end if \n\n            ( dbfSatCliD )->( dbGoTop() )\n   \n            /*\n            Pasamos todas las series----------------------------------------------\n            */\n\n            if ( dbfSatCliS )->( dbSeek( cNumsat ) )\n               while ( dbfSatCliS )->cSerSat + Str( ( dbfSatCliS )->nNumSat ) + ( dbfSatCliS )->cSufSat == cNumsat .and. !( dbfSatCliS )->( Eof() )\n                  dbPass( dbfSatCliS, dbfTmpSer, .t. )\n                  ( dbfSatCliS )->( dbSkip() )\n               end while\n            end if \n\n            ( dbfSatCliS )->( dbGoTop() )\n\n            oBrw:Refresh()\n            oBrw:Setfocus()\n\n         end if\n\n         lValid   := .t.\n\n         if ( dbfSatCliT )->( dbRLock() )\n            ( dbfSatCliT )->lEstado := .t.\n            ( dbfSatCliT )->( dbUnlock() )\n         end if\n\n         CursorWE()\n\n      end if\n\n      HideImportacion( aGet, aGet[ _CNUMSAT ] )\n\n   else\n\n      MsgStop( \"S.A.T. no existe\" )\n\n   end if\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion que nos permite a¤adir a los albaranes pedidos ye existentes\n*/\n\nSTATIC FUNCTION GrpSat( aGet, aTmp, oBrw )\n\n   local oDlg\n   local nDiv\n   local nItem       := 1\n   local cCodAge\n   local oBrwLin\n   local nOrdAnt\n   local nNumLin\n   local lCodAge     := .f.\n   local nOffSet     := 0\n   local cDesAlb     := \"\"\n   local cCodCli     := aGet[ _CCODCLI ]:varGet()\n   local nTotPed\n   local nTotRec\n   local nTotPdt\n   local lAlquiler   := .f.\n   local cCliente    := RTrim( aTmp[ _CNOMCLI ] )\n   local cObra       := if( Empty( aTmp[ _CCODOBR ] ), \"Todas\", Rtrim( aTmp[ _CCODOBR ] ) )  \n   local cIva        := cImp() + Space( 1 ) + if( aTmp[ _LIVAINC ], \"Incluido\", \"Desglosado\" )\n\n   aNumalb           := {}\n\n   if !Empty( oTipFac ) .and. ( oTipFac:nAt == 2 )\n      lAlquiler      := .t.\n   end if\n\n   if Empty( cCodCli )\n      msgStop( \"Es necesario codificar un cliente\", \"Agrupar SAT\" )\n      return .t.\n   end if\n\n   if !Empty( aGet[ _CNUMSAT ]:VarGet() )\n      msgStop( \"Ya ha importado un SAT\", \"Agrupar SAT\" )\n      return .t.\n   end if\n\n\n   /*\n   Seleccion de Registros\n   --------------------------------------------------------------------------\n   */\n\n   CursorWait()\n   \n   nOrdAnt           := ( dbfSatCliT )->( ordSetFocus( \"cCodCli\" ) )\n\n   if ( dbfSatCliT )->( dbSeek( cCodCli ) )\n\n      while ( dbfSatCliT )->cCodCli == cCodCli .and. ( dbfSatCliT )->( !eof() )\n\n         if ( dbfSatCliT )->lAlquiler == lAlquiler                                              .and.;\n            !( dbfSatCliT )->lEstado                                                            .and.;\n            ( dbfSatCliT )->lIvaInc == aTmp[ _LIVAINC ]                                         .and.;\n            if( Empty( aTmp[ _CCODOBR ] ), .t., ( dbfSatCliT )->cCodObr == aTmp[ _CCODOBR ] )   .and.;\n            aScan( aNumSat, ( dbfSatCliT )->cSerSat + Str( ( dbfSatCliT )->nNumSat ) + ( dbfSatCliT )->cSufSat ) == 0\n\n            aAdd( aNumalb,    {  .f. ,;\n                                 ( dbfSatCliT )->lEstado,;\n                                 ( dbfSatCliT )->cSerSat + Str( ( dbfSatCliT )->nNumSat ) + ( dbfSatCliT )->cSufSat,;\n                                 ( dbfSatCliT )->dFecSat ,;\n                                 ( dbfSatCliT )->cCodCli ,;\n                                 ( dbfSatCliT )->cNomCli ,;\n                                 ( dbfSatCliT )->cCodObr ,;\n                                 RetObras( ( dbfSatCliT )->cCodCli, ( dbfSatCliT )->cCodObr, dbfObrasT ),;\n                                 ( dbfSatCliT )->cCodAge,;\n                                 ( dbfSatCliT )->nTotSat } )\n\n         endif\n\n         ( dbfSatCliT )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfSatCliT )->( ordSetFocus( nOrdAnt ) )\n\n   CursorWE()\n\n   /*\n   Puede que no hay albaranes que facturar-------------------------------------\n   */\n\n   if Len( aNumalb ) == 0\n      msgStop( \"No existen S.A.T. pendientes de este cliente\" )\n      return .t.\n   end if\n\n   /*\n   Caja de Dialogo\n   ----------------------------------------------------------------------------\n   */\n\n   DEFINE DIALOG  oDlg ;\n      RESOURCE    \"SET_ALBARAN\" ;\n      TITLE       \"Agrupando S.A.T.\"\n\n      REDEFINE SAY PROMPT cCliente ;\n         ID       501 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cObra ;\n         ID       502 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cIva ;\n         ID       503 ;\n         OF       oDlg\n\n      oBrwLin                       := TXBrowse():New( oDlg )\n\n      oBrwLin:bClrSel               := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwLin:bClrSelFocus          := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwLin:SetArray( aNumalb, , , .f. )\n      oBrwLin:lHscroll              := .f.\n\n      oBrwLin:nMarqueeStyle         := 5\n      oBrwLin:lRecordSelector       := .f.\n\n      oBrwLin:CreateFromResource( 130 )\n\n      oBrwLin:bLDblClick            := {|| aNumalb[ oBrwLin:nArrayAt, 1 ] := !aNumalb[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh() }\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Seleccionado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| aNumalb[ oBrwLin:nArrayAt, 1 ] }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Estado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( aNumalb[ oBrwLin:nArrayAt, 2 ] ) }\n         :nWidth           := 20\n         :SetCheck( { \"Bullet_Square_Yellow_16\", \"Bullet_Square_Red_16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Número\"\n         :bEditValue       := {|| aNumalb[ oBrwLin:nArrayAt, 3 ] }\n         :cEditPicture     := \"@R #/999999999/##\"\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Fecha\"\n         :bEditValue       := {|| Dtoc( aNumalb[ oBrwLin:nArrayAt, 4 ] ) }\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Cliente\"\n         :bEditValue       := {|| Rtrim( aNumalb[ oBrwLin:nArrayAt, 5 ] ) + Space(1) + aNumalb[ oBrwLin:nArrayAt, 6 ] }\n         :nWidth           := 250\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Obra\"\n         :bEditValue       := {|| Rtrim( aNumalb[ oBrwLin:nArrayAt, 7 ] ) + Space(1) + aNumalb[ oBrwLin:nArrayAt, 8 ] }\n         :nWidth           := 220\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Agente\"\n         :bEditValue       := {|| aNumalb[ oBrwLin:nArrayAt, 9 ] }\n         :lHide            := .t.\n         :nWidth           := 60\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Total\"\n         :bEditValue       := {|| aNumalb[ oBrwLin:nArrayAt, 10 ] }\n         :cEditPicture     := cPorDiv( ( dbfSatCliT )->cDivSat, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      REDEFINE BUTTON ;\n         ID       514 ;\n         OF       oDlg ;\n         ACTION   (  aNumalb[ oBrwLin:nArrayAt, 1 ] := !aNumalb[ oBrwLin:nArrayAt, 1 ],;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       516 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aNumalb, { |aItem| aItem[1] := .t. } ),;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       517 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aNumalb, { |aItem| aItem[1] := .f. } ),;\n                     oBrwLin:Refresh(),;\n                     oBrwLin:SetFocus() )\n\n      REDEFINE BUTTON ;\n         ID       518 ;\n         OF       oDlg ;\n         ACTION   ( ZooSatCli( aNumalb[ oBrwLin:nArrayAt, 3 ] ) )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end() )\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult != IDOK\n      aNumalb       := {}\n   end if\n\n   /*\n   Llamada a la funcion que busca el Albaran-----------------------------------\n   */\n\n   if oDlg:nResult == IDOK .and. Len( aNumalb ) >= 1\n\n      CursorWait()\n\n      HideImportacion()      \n\n      /*\n      A¤adimos los albaranes seleccionado para despues-------------------------\n      */\n\n      for nItem := 1 to Len( aNumalb )\n\n         if ( aNumalb[ nItem, 1 ] )\n\n            aAdd( aNumSat, aNumalb[ nItem, 3 ] )\n\n            if Empty( cCodAge )\n               cCodAge  := aNumalb[ nItem, 9 ]\n            end if\n\n            if cCodAge != aNumalb[ nItem, 9 ]\n               lCodAge  := .t.\n            end if\n\n         end if\n\n      next\n\n      if lCodAge\n         MsgInfo( \"Existen conflictos de agentes\" )\n      end if\n\n      for nItem := 1 to Len( aNumalb )\n\n         /*\n         Cabeceras de albaranes a facturas-------------------------------------\n         */\n\n         if !lCodAge .and. cCodAge != nil\n            aGet[ _CCODAGE ]:cText( cCodAge )\n            aGet[ _CCODAGE ]:lValid()\n         end if\n\n         if ( dbfSatCliT )->( dbSeek( aNumalb[ nItem, 3 ] ) ) .and. aNumalb[ nItem, 1 ]\n\n            if ( dbfSatCliT )->lRecargo\n               aTmp[ _LRECARGO ] := .t.\n               aGet[ _LRECARGO ]:Refresh()\n            end if\n\n            if ( dbfSatCliT )->lOperPv\n               aTmp[ _LOPERPV ] := .t.\n               aGet[ _LOPERPV ]:Refresh()\n            end if\n\n         end if\n\n         /*\n         Detalle de albaranes a facturas---------------------------------------\n         */\n\n         if ( dbfSatCliL )->( dbSeek( aNumalb[ nItem, 3] ) ) .and. aNumalb[ nItem, 1]\n\n            /*\n            Cabeceras de Albaranes-----------------------------------------------\n            */\n\n            nNumLin                       := nil\n\n            ( dbfTmpLin )->( dbAppend() )\n            cDesAlb                       := \"SAT Nº \" + StrTran( Alltrim( Trans( aNumalb[ nItem, 3 ], \"@R #/999999999/##\" ) ), \" \", \"\" )\n            cDesAlb                       += \" - Fecha \" + Dtoc( aNumalb[ nItem, 4] )\n            ( dbfTmpLin )->mLngDes        := cDesAlb\n            ( dbfTmpLin )->lControl       := .t.\n            ( dbfTmpLin )->nNumLin        := ++nOffSet\n\n            /*\n            Mientras estemos en el mismo Satido--------------------------------\n            */\n\n            while ( dbfSatCliL )->cSerSat + Str( ( dbfSatCliL )->nNumSat ) + ( dbfSatCliL )->cSufSat == aNumalb[ nItem, 3]\n\n               if nNumLin != (dbfSatCliL)->nNumLin\n                  ++nOffSet\n                  nNumLin                 := ( dbfSatCliL )->nNumLin\n               end if\n\n               ( dbfTmpLin )->( dbAppend() )\n\n               ( dbfTmpLin )->cNumSat     := aNumalb[ nItem, 3 ]\n               ( dbfTmpLin )->nNumLin     := nOffSet\n               ( dbfTmpLin )->cRef        := ( dbfSatCliL )->cRef\n               ( dbfTmpLin )->cDetalle    := ( dbfSatCliL )->cDetalle\n               ( dbfTmpLin )->mLngDes     := ( dbfSatCliL )->mLngDes\n               ( dbfTmpLin )->nPreUnit    := ( dbfSatCliL )->nPreDiv\n               ( dbfTmpLin )->cUnidad     := ( dbfSatCliL )->cUnidad\n               ( dbfTmpLin )->nPesoKg     := ( dbfSatCliL )->nPesoKg\n               ( dbfTmpLin )->cPesoKg     := ( dbfSatCliL )->cPesoKg\n               ( dbfTmpLin )->nVolumen    := ( dbfSatCliL )->nVolumen\n               ( dbfTmpLin )->cVolumen    := ( dbfSatCliL )->cVolumen\n               ( dbfTmpLin )->nIva        := ( dbfSatClil )->nIva\n               ( dbfTmpLin )->nReq        := ( dbfSatClil )->nReq\n               ( dbfTmpLin )->nDto        := ( dbfSatClil )->nDto\n               ( dbfTmpLin )->nPntVer     := ( dbfSatCliL )->nPntVer\n               ( dbfTmpLin )->nImpTrn     := ( dbfSatCliL )->nImpTrn\n               ( dbfTmpLin )->nDtoPrm     := ( dbfSatCliL )->nDtoPrm\n               ( dbfTmpLin )->nComAge     := ( dbfSatCliL )->nComAge\n               ( dbfTmpLin )->dFecHa      := ( dbfSatCliL )->dFecha\n               ( dbfTmpLin )->cTipMov     := ( dbfSatCliL )->cTipMov\n               ( dbfTmpLin )->nDtoDiv     := ( dbfSatCliL )->nDtoDiv\n               ( dbfTmpLin )->nUniCaja    := ( dbfSatCliL )->nUniCaja\n               ( dbfTmpLin )->nCanEnt     := ( dbfSatCliL )->nCanSat \n               ( dbfTmpLin )->nUndKit     := ( dbfSatCliL )->nUndKit\n               ( dbfTmpLin )->lKitArt     := ( dbfSatCliL )->lKitArt\n               ( dbfTmpLin )->lKitChl     := ( dbfSatCliL )->lKitChl\n               ( dbfTmpLin )->lKitPrc     := ( dbfSatCliL )->lKitPrc\n               ( dbfTmpLin )->cCodPr1     := ( dbfSatCliL )->cCodPr1\n               ( dbfTmpLin )->cCodPr2     := ( dbfSatCliL )->cCodPr2\n               ( dbfTmpLin )->cValPr1     := ( dbfSatCliL )->cValPr1\n               ( dbfTmpLin )->cValPr2     := ( dbfSatCliL )->cValPr2\n               ( dbfTmpLin )->nCosDiv     := ( dbfSatCliL )->nCosDiv\n               ( dbfTmpLin )->nMesGrt     := ( dbfSatCliL )->nMesGrt\n               ( dbfTmpLin )->lMsgVta     := ( dbfSatCliL )->lMsgVta\n               ( dbfTmpLin )->lNotVta     := ( dbfSatCliL )->lNotVta\n               ( dbfTmpLin )->lLote       := ( dbfSatCliL )->lLote\n               ( dbfTmpLin )->nLote       := ( dbfSatCliL )->nLote\n               ( dbfTmpLin )->cLote       := ( dbfSatCliL )->cLote\n               ( dbfTmpLin )->mObsLin     := ( dbfSatCliL )->mObsLin\n               ( dbfTmpLin )->Descrip     := ( dbfSatCliL )->Descrip\n               ( dbfTmpLin )->cCodPrv     := ( dbfSatCliL )->cCodPrv\n               ( dbfTmpLin )->cNomPrv     := ( dbfSatCliL )->cNomPrv\n               ( dbfTmpLin )->cCodFam     := ( dbfSatCliL )->cCodFam\n               ( dbfTmpLin )->cGrpFam     := ( dbfSatCliL )->cGrpFam\n               ( dbfTmpLin )->cAlmLin     := ( dbfSatCliL )->cAlmLin\n               ( dbfTmpLin )->cRefPrv     := ( dbfSatCliL )->cRefPrv\n               ( dbfTmpLin )->dFecEnt     := ( dbfSatCliL )->dFecEnt\n               ( dbfTmpLin )->dFecSal     := ( dbfSatCliL )->dFecSal\n               ( dbfTmpLin )->lAlquiler   := ( dbfSatCliL )->lAlquiler\n               ( dbfTmpLin )->nPreAlq     := ( dbfSatCliL )->nPreAlq\n               ( dbfTmpLin )->cUnidad     := ( dbfSatCliL )->cUnidad\n               ( dbfTmpLin )->nNumMed     := ( dbfSatCliL )->nNumMed\n               ( dbfTmpLin )->nMedUno     := ( dbfSatCliL )->nMedUno\n               ( dbfTmpLin )->nMedDos     := ( dbfSatCliL )->nMedDos\n               ( dbfTmpLin )->nMedTre     := ( dbfSatCliL )->nMedTre\n               ( dbfTmpLin )->nPuntos     := ( dbfSatCliL )->nPuntos\n               ( dbfTmpLin )->nValPnt     := ( dbfSatCliL )->nValPnt\n               ( dbfTmpLin )->nDtoPnt     := ( dbfSatCliL )->nDtoPnt\n               ( dbfTmpLin )->nIncPnt     := ( dbfSatCliL )->nIncPnt\n               ( dbfTmpLin )->lLinOfe     := ( dbfSatCliL )->lLinOfe\n               \n               ( dbfTmpLin )->( dbUnLock() )\n             \n               /*\n               Pasamos todas las series----------------------------------------\n               */\n\n               if ( dbfSatCliS )->( dbSeek( aNumalb[ nItem, 3] + Str( nNumLin, 4 ) ) ) .and. ( aNumalb[ nItem, 1 ] )\n\n                  while ( dbfSatCliS )->cSerSat + Str( ( dbfSatCliS )->nNumSat ) + ( dbfSatCliS )->cSufSat + Str( ( dbfSatCliS )->nNumLin ) == aNumalb[ nItem, 3] + Str( nNumLin, 4 ) .and. !( dbfSatCliS )->( Eof() )\n                  \n                     ( dbfTmpSer )->( dbAppend() )\n                     ( dbfTmpSer )->nNumLin  := nOffSet\n                     ( dbfTmpSer )->cRef     := ( dbfSatCliS )->cRef\n                     ( dbfTmpSer )->cAlmLin  := ( dbfSatCliS )->cAlmLin\n                     ( dbfTmpSer )->cNumSer  := ( dbfSatCliS )->cNumSer\n                     ( dbfTmpSer )->( dbUnLock() )\n                  \n                     ( dbfSatCliS )->( dbSkip() )\n\n                  end while\n\n               end if \n\n               ( dbfSatCliL )->( dbSkip() ) \n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del SAT------------------------------------\n            */\n\n            if ( dbfSatCliI )->( dbSeek( aNumalb[ nItem, 3] ) ) .and. aNumalb[ nItem, 1 ]\n\n               while ( dbfSatCliI )->cSerSat + Str( ( dbfSatCliI )->nNumSat ) + ( dbfSatCliI )->cSufSat == aNumalb[ nItem, 3] .and. !( dbfSatCliI )->( Eof() )\n                  dbPass( dbfSatCliI, dbfTmpInc, .t. )\n                  ( dbfSatCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfSatCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del SAT-------------------------------------\n            */\n\n            if ( dbfSatCliD )->( dbSeek( aNumalb[ nItem, 3] ) ) .and. aNumalb[ nItem, 1 ]\n\n               while ( dbfSatCliD )->cSerSat + Str( ( dbfSatCliD )->nNumSat ) + ( dbfSatCliD )->cSufSat == aNumalb[ nItem, 3] .and. !( dbfSatCliD )->( Eof() )\n                  dbPass( dbfSatCliD, dbfTmpDoc, .t. )\n                  ( dbfSatCliD )->( dbSkip() )\n               end while\n\n            end if \n   \n         end if\n\n      next\n\n      /*\n      No dejamos importar Albaranes directos-----------------------------------\n      */\n\n      aGet[ _CNUMSAT ]:bWhen           := {|| .f. }\n      aGet[ _CNUMSAT ]:Disable()\n\n      /*\n      Refresco de lineas------------------------------------------------------- \n      */\n      \n      oBrw:Refresh()\n\n      /*\n      Recalculo de totales-----------------------------------------------------\n      */ \n\n      RecalculaTotal( aTmp )\n\n      CursorWE()\n\n   end if\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function HideImportacion( aGet, oShow )\n\n   aGet[ _CNUMALB ]:Hide()\n   aGet[ _CNUMPED ]:Hide()\n   aGet[ _CNUMPRE ]:Hide()\n   aGet[ _CNUMSAT ]:Hide()\n\n   oBtnPre:Hide()\n   oBtnPed:Hide()\n   oBtnAlb:Hide()\n   oBtnGrp:Hide()\n   oBtnSat:Hide()\n\n   if !empty( oShow )\n      oShow:Show()\n   end if\n\nReturn ( nil ) \n\n//---------------------------------------------------------------------------//\n",
			"file": "prg/Factcli.prg",
			"file_size": 821708,
			"file_write_time": 130114438423032924,
			"settings":
			{
				"buffer_size": 798834,
				"line_ending": "Windows"
			}
		},
		{
			"file": "prg/Empresa.prg",
			"settings":
			{
				"buffer_size": 265641,
				"line_ending": "Windows"
			}
		},
		{
			"file": "include/Empresa.ch",
			"settings":
			{
				"buffer_size": 9925,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/gestool.sublime-build",
	"command_palette":
	{
		"height": 311.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/fw195/Gestool/prg/Remmov.prg",
		"/C/fw195/Gestool/prg/Utildbf.prg",
		"/C/fw195/Gestool/prg/Tpvtactil.prg",
		"/C/fw195/Gestool/prg/Tpvrestaurante.prg",
		"/C/fw195/Gestool/prg/tpvtactil",
		"/C/fw195/Gestool/prg/Tpvcobros.prg",
		"/C/fw195/Gestool/prg/Tpvlistaticket.prg",
		"/C/fw195/Gestool/prg/Tpvmesa.prg",
		"/C/fw195/Gestool/prg/Tpvpda.prg",
		"/C/fw195/Gestool/prg/Tpvpunto.prg",
		"/C/fw195/Gestool/prg/Tpvsalon.prg",
		"/C/fw195/Gestool/prg/Articulo.prg",
		"//192.168.1.19/c/bootstrap/index.html",
		"/C/fw195/Gestool/prg/Familia.prg",
		"/C/fw195/Gestool/prg/Tviewimg.prg",
		"/C/fw195/Gestool/prg/Bitmap.prg",
		"/C/fw195/Gestool/ppo/Familia.ppo",
		"/C/fw195/Gestool/prg/Tgethlp.prg",
		"/C/fw195/Gestool/prg/Tpv.prg",
		"/C/fw195/Gestool/prg/Tgetc3.prg",
		"/C/fw195/Gestool/prg/Tpvsalaventa.prg",
		"/C/fw195/Gestool/prg/Tcomercio.prg",
		"/C/fw195/Gestool/prg/Impfactu.prg",
		"/C/fw195/Gestool/prg/Factcli.prg",
		"/C/fw195/Gestool/prg/utildbf",
		"/C/Windows/ads.ini",
		"/C/fw195/Gestool/prg/Client.prg",
		"/C/fw195/Gestool/prg/Pedprov.prg",
		"/C/fw195/Gestool/prg/Albprov.prg",
		"/C/fw195/Gestool/prg/Factprv.prg",
		"/C/fw195/Gestool/prg/Stock.prg",
		"/C/fw195/Gestool/prg/Comun.prg",
		"/C/fw195/Gestool/prg/Brwvta.prg",
		"/C/fw195/Gestool/prg/Medicon.prg",
		"/C/fw195/Gestool/prg/Cambio.prg",
		"/C/fw195/Gestool/prg/Tcaptura.prg",
		"/C/fw195/Gestool/prg/Tdetcaptura.prg",
		"/C/fw195/Gestool/prg/Tipoimpresora.prg",
		"/C/fw195/Gestool/prg/Tiva.prg",
		"/C/fw195/Gestool/prg/Ixbrowse.prg",
		"/C/fw195/Gestool/prg/Xbrowse.prg",
		"/C/fw195/Gestool/prg/Digit.prg",
		"/C/fw195/Gestool/prg/Divisas.prg",
		"/C/fw195/Gestool/prg/Tscripts.prg",
		"/C/fw195/Gestool/bin/script/001.prg",
		"//server/Scripts creados/Inma Pepsi/001.prg",
		"/C/fw195/Gestool/prg/Brwcli.prg",
		"/C/fw195/Gestool/bin/script/000.prg",
		"/C/fw195/Gestool/prg/Albcli.prg",
		"/C/Users/Villa/Desktop/Exportatarifas.prg",
		"/C/fw195/Gestool/prg/Tconfaccli.prg",
		"/C/fw195/Gestool/prg/Dlgs32.prg",
		"/C/fw195/Gestool/prg/Avifile.prg",
		"/C/fw195/Gestool/prg/Tinfgen.prg",
		"/C/Users/Villa/Desktop/test.prg",
		"/C/fw195/Gestool/include/Util.ch",
		"/C/Users/Villa/Desktop/oscar.prg",
		"/C/fw195/Gestool/prg/Rptgal.prg",
		"/C/fw195/Gestool/prg/Exportatarifas.prg",
		"/C/fw195/Gestool/prg/Oferta.prg",
		"/C/fw195/Gestool/prg/TConFacCli",
		"/C/fw195/Gestool/prg/Factu.prg",
		"/C/fw195/Gestool/prg/Fastreph.prg",
		"/C/fw195/Gestool/prg/Pedcli.prg",
		"/C/fw195/Gestool/prg/Oacuaalb.prg",
		"/C/fw195/Gestool/prg/Tftpc3.prg",
		"/C/fw195/Gestool/prg/Empresa.prg",
		"/C/fw195/Gestool/prg/Say.prg",
		"/C/fw195/Gestool/ppo/Articulo.ppo",
		"/C/fw195/Gestool/prg/Tuser.prg",
		"/C/fw195/Gestool/prg/Backup.prg",
		"/C/fw195/Gestool/prg/Tftpfile.prg",
		"/C/fw195/Gestool/prg/Tftpserv.prg",
		"/C/fw195/Gestool/prg/Tftp.prg",
		"/C/FWH803/samples/tutor06.prg",
		"/C/FWH803/samples/ftpserv.prg",
		"/C/FWH803/samples/ftpdir.prg",
		"/C/FWH803/source/classes/tftp.prg",
		"/C/fwh1204/source/classes/tftpserv.prg",
		"/C/fw195/Gestool/prg/Trnkrvta.prg",
		"/C/fw195/Gestool/prg/Tacuatvta.prg",
		"/C/fw195/Gestool/prg/Tdlgflt.prg",
		"/C/fw195/Gestool/prg/Tshell.prg",
		"/C/fw195/Gestool/prg/Tfilter.prg",
		"/C/fw195/Gestool/prg/Tinfavta.prg",
		"/C/Users/Villa/Desktop/123/123.prg",
		"/C/BCC55/Include/wininet.h",
		"/C/fw195/Gestool/prg/Producc.prg",
		"/C/fw195/Gestool/prg/Tdbf.prg",
		"/C/fw195/Gestool/prg/Ritems.prg",
		"/C/fw195/Gestool/prg/ritems",
		"/C/fwh1204/source/classes/tftp.prg",
		"/C/fwh1204/source/classes/tftpsess.prg",
		"/C/fwh1204/source/classes/tftpcli.prg",
		"/C/fwh1204/source/classes/tftpfile.prg",
		"/C/fw195/Gestool/prg/Tgrpfam.prg",
		"/C/fw195/Gestool/prg/Pro.prg",
		"/C/fw195/Gestool/prg/Impestudioes.prg",
		"/C/Users/Villa/Desktop/prg/Factcli.prg",
		"/C/fw195/Gestool/prg/Pacudiamaquinaria.prg",
		"/C/fw195/Gestool/include/Factu.ch",
		"/C/fw195/Gestool/resource/Gstimage12.rc",
		"/C/fw195/Gestool/resource/Gstdialog.rc",
		"/C/Users/Villa/Desktop/resource/Gstdialog.rc",
		"/C/fw195/Gestool/prg/Tmant.prg",
		"/C/fw195/Gestool/include/Empresa.ch",
		"/C/fw195/Gestool/prg/Precli.prg",
		"/C/fw195/Gestool/prg/Tgrufam.prg",
		"/C/fw195/Gestool/prg/Internet.prg",
		"/C/fw195/Gestool/Hx.mak",
		"/C/AppServ/www/prestashop/classes/Product.php",
		"/C/fw195/Gestool/prg/Usuario.prg",
		"/C/fw195/Gestool/prg/Empcnf.prg",
		"/C/AppServ/www/prestashop/themes/default/product.tpl",
		"/C/Users/Villa/Desktop/Tcomercio.prg",
		"/C/fw195/Gestool/prg/Depage.prg",
		"/C/fw195/Gestool/prg/tpv",
		"/C/fw195/Gestool/prg/articulo",
		"/C/fw195/Gestool/prg/Tgenmail.prg",
		"/C/fw195/Gestool/Hs.bat",
		"//SERVER/Programacion/fw195/camero/HX2007.bat",
		"//SERVER/Programacion/fw195/camero/HX803.bat",
		"/C/fw195/camero/HA.Bat",
		"/C/fw195/camero/H908.Bat",
		"/C/fw195/camero/H9.Bat",
		"/C/fw195/camero/H8.bat",
		"/C/fw195/camero/HX2007.bat",
		"/C/fw195/camero/HV.Bat"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\include",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"",
			"C:\\",
			"C:\\FWH102\\samples",
			"",
			"<open files>",
			"<open files>,C:\\fw195\\Gestool",
			"",
			"C:\\fw195\\Gestool\\resource",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"QuiFacCli",
			"on edtcn",
			"on aitm",
			"windelrec",
			"nput",
			"aSalas",
			"lPuntosVenta",
			"od sala",
			"od salas",
			"od sala",
			"sala",
			"OnClickSalaVenta",
			"od Resource",
			"Resource",
			"AppendDet",
			"nColBtn",
			"CargaArticulosFamilia",
			"art",
			"nColBtn",
			"nColBtnnColBtn",
			"nColBtn",
			"edtrec",
			"colors_16",
			"ColorFam",
			"NCOLBTN",
			"on edtrec",
			"ncolbtn",
			"on aitm",
			"on edtrec",
			"bdown",
			"bLClicked",
			"EvalHelp",
			"bHelp",
			"ColorFam",
			"down",
			"baction",
			"C5ImageView",
			"on ColorFam",
			"on edtre",
			"officebar",
			"OnClickPendientes",
			"ubiSala",
			"osender",
			"LButtonUp",
			"SelectPunto",
			"SelectPunto.",
			"SelectPunto",
			"438",
			"ubisala",
			"cCodigoSala",
			":cCodigoSala",
			"aNumerosTickets",
			"selected",
			"lBrowseMultiplesTickets",
			"on rx",
			"QuiFacCli",
			"del",
			"redefine",
			"SetDlgMode",
			"od resource",
			"ouser()",
			"ufieldempresa",
			"od resource",
			"ss TDetMovimientos",
			"oDetMovimientos",
			"AppendDet",
			"on aitm",
			"<<<<",
			"on aitm",
			"nregi",
			"on aitm",
			"ctlf",
			"on aitm",
			"lliquidada",
			"nestado",
			"ChkFacPrv",
			"method",
			"ostock",
			"on syn",
			"on brw",
			"on RJust",
			"\"0\"",
			"AddLineOrgToNew",
			"ofnt",
			"fnt",
			"ofont",
			"font",
			"HELPENTRYTACTILIMP",
			"on br",
			"ivalibr",
			"// l",
			"//l",
			"//",
			"on Calculadora",
			"on brw",
			"AgregarLineasLibres",
			"oTipoIVA",
			"AgregarLineasLibres",
			"niva",
			"AgregarLineasLibres",
			"AgregarLibre",
			"libre",
			"msgstop",
			"on endtrans",
			"dbfTmpVta",
			"on endtrans",
			"on edtrec",
			"aItmVta",
			"on aitm",
			"dbfTmpVta",
			"on aitm",
			"append",
			"dbfTmpImg",
			"on dbseekinord",
			"on begintrans",
			"on rx",
			"on begintrans",
			"on begintranas",
			"on rx",
			"on endtras",
			"on endtrans",
			"on aitm",
			"endtrans",
			"setped",
			"lDefault",
			"lDefImgPrp",
			"nDefImagen",
			"on ApoloMsgNoYes"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"cTextoWait",
			"ctextowait",
			"TProduccionLabelGenerator",
			"lCheckConsolidacion",
			"InsertCategoriesPrestashop",
			"InsertGrupoCategoriesPrestashop",
			"cPreFixtable",
			"cImp()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "prg/Factcli.prg",
					"settings":
					{
						"buffer_size": 798834,
						"regions":
						{
						},
						"selection":
						[
							[
								240630,
								240630
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 129856.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "prg/Empresa.prg",
					"settings":
					{
						"buffer_size": 265641,
						"regions":
						{
						},
						"selection":
						[
							[
								50956,
								50956
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 29362.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "include/Empresa.ch",
					"settings":
					{
						"buffer_size": 9925,
						"regions":
						{
						},
						"selection":
						[
							[
								8331,
								8331
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4284.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}

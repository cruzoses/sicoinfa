{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"nNumAlb",
				"nNumAlb"
			],
			[
				"Fiel",
				"FieldGetbyName"
			],
			[
				"ccodweb",
				"cCodWebValPr2"
			],
			[
				"cCodWe",
				"cCodWebValPr1"
			],
			[
				"T",
				"TComercio"
			],
			[
				"CLAS",
				"CLASS"
			],
			[
				"cCodWeb",
				"cCodWebValPr2"
			],
			[
				"cValor",
				"cValorPropiedad2"
			],
			[
				"Actua",
				"ActualizaStockWeb"
			],
			[
				"product",
				"product_attribute_image"
			],
			[
				"product_attri",
				"product_attribute_combination"
			],
			[
				"fit",
				"firstname"
			],
			[
				"pho",
				"phone"
			],
			[
				"addres",
				"address2"
			],
			[
				"addre",
				"address2"
			],
			[
				"phon",
				"phone_mobile"
			],
			[
				"adr",
				"address2"
			],
			[
				"last",
				"lastname"
			],
			[
				"category",
				"category_group"
			],
			[
				"id_pro",
				"id_product"
			],
			[
				"oquer",
				"oQuery1"
			],
			[
				"id_ta",
				"id_tax_rules_group"
			],
			[
				"oque",
				"oQuery2"
			],
			[
				"product_price",
				"products_price"
			],
			[
				"total",
				"total_shipping_tax_excl"
			],
			[
				"else",
				"else"
			],
			[
				"per",
				"percentage"
			],
			[
				"id_s",
				"id_shop_group"
			],
			[
				"spe",
				"specific_price"
			],
			[
				"nTot",
				"nTotStock"
			],
			[
				"stock",
				"stock_available"
			],
			[
				"pad",
				"padding-left"
			],
			[
				"pa",
				"padding-left"
			],
			[
				"list",
				"list-style"
			],
			[
				"gr",
				"grid_5"
			],
			[
				"font",
				"font-style"
			],
			[
				"fon",
				"font-weight"
			],
			[
				"ba",
				"background-color"
			],
			[
				"if",
				"if	if..endif"
			],
			[
				"oArt",
				"oArticulosOfertas"
			],
			[
				"cAlias",
				"cAlias"
			],
			[
				"oTi",
				"oTiketCabecera"
			],
			[
				"nCopias",
				"nCopiasRegalo"
			],
			[
				"nTarifa",
				"nTarifaSolo"
			],
			[
				"Me",
				"Method"
			],
			[
				"Clear",
				"ClearRelationReport"
			],
			[
				"Buid",
				"BuildRelationReport"
			],
			[
				"nT",
				"nTipoDocumento"
			],
			[
				"imprimir",
				"imprimir"
			],
			[
				"lopen",
				"lOpenCaj"
			],
			[
				"cre",
				"cResourceAlbaran"
			],
			[
				"cRe",
				"cResourceAlbaran"
			],
			[
				"lResource",
				"lResourceAlbaran"
			],
			[
				"cSer",
				"cSerAlb"
			],
			[
				"OaLB",
				"oAlbaranClienteCabecera"
			],
			[
				"oAlbara",
				"oAlbaranClienteLinea"
			],
			[
				"cDtoEsp",
				"cDtoEsp"
			],
			[
				"guarda",
				"GuardaTik2Alb"
			],
			[
				"documen",
				"documentoFactura"
			],
			[
				"nt",
				"nTipoDocumento"
			],
			[
				"documento",
				"documentoAlbaran"
			],
			[
				"Ti",
				"Ticket"
			],
			[
				"carga",
				"carga"
			],
			[
				"clien",
				"clientes"
			],
			[
				"Fideli",
				"Fidelización"
			],
			[
				"comentarios",
				"Comentarios"
			],
			[
				"Empresa",
				"Empresa"
			],
			[
				"dbGo",
				"dbgobottom"
			],
			[
				"nRecno",
				"nRecno"
			],
			[
				"dbBo",
				"dbgobottom"
			],
			[
				"t",
				"t"
			],
			[
				"cSufDoc",
				"_CSUFDOC"
			],
			[
				"cCod",
				"cCodDlg"
			],
			[
				"ret",
				"RetFld"
			],
			[
				"cFacPrv",
				"cFacPrv"
			],
			[
				"cNumAlb",
				"cNumAlb"
			],
			[
				"cNumPed",
				"cNumPed"
			],
			[
				"cNumDoc",
				"cNumDoc"
			],
			[
				"cNumFac",
				"cNumFac"
			],
			[
				"cPedCli",
				"cPedCli"
			],
			[
				"dbfDlg",
				"dbfDlg"
			],
			[
				"Rectificativas",
				"Rectificativas"
			],
			[
				"Facturas",
				"Facturas"
			],
			[
				"proveedor",
				"proveedor"
			],
			[
				"padi",
				"padding-bottom"
			],
			[
				"al",
				"vertical-align"
			],
			[
				"te",
				"text-decoration"
			],
			[
				"mar",
				"margin-right"
			],
			[
				"mat",
				"margin-bottom"
			],
			[
				"text",
				"text-transform"
			],
			[
				"he",
				"max-height"
			],
			[
				"b",
				"bottom"
			],
			[
				"marg",
				"margin-bottom"
			],
			[
				"center",
				"center_column"
			],
			[
				"lCobro",
				"lCobroExacto"
			],
			[
				"CCODFAB",
				"CCODFAB"
			],
			[
				"Tipo",
				"Tipo"
			],
			[
				"nReg",
				"nRegIva"
			],
			[
				"oDbf",
				"oDbfArCFac"
			],
			[
				"oDbfArC",
				"oDbfArCFac"
			],
			[
				"ARTCOM",
				"ARTCOM"
			],
			[
				"aTotAlb",
				"aTotAlb"
			],
			[
				"oDbfFap",
				"oDbfFapTGst"
			],
			[
				"cPro",
				"cProp2"
			],
			[
				"cImgWeb",
				"cImgWeb"
			],
			[
				"cNbrArt",
				"cNbrArt"
			],
			[
				"Msg",
				"ApoloMsgNoYes"
			],
			[
				"dbfA",
				"dbfFacCliL"
			],
			[
				"Cursor",
				"CursorWE"
			],
			[
				"Da",
				"day"
			],
			[
				"Mo",
				"month"
			],
			[
				"case",
				"case"
			],
			[
				"lSel",
				"lSelPr2"
			],
			[
				"lSelPR",
				"lSelPr1"
			],
			[
				"nCont",
				"nContEdt"
			],
			[
				"nSave",
				"nSave"
			],
			[
				"nTotIva",
				"nTotIva"
			],
			[
				"ntotPed",
				"nTotPed"
			],
			[
				"id_shop",
				"id_shop"
			],
			[
				"cPref",
				"cPrefixTable"
			],
			[
				"Co",
				"Codigo"
			],
			[
				"ctext",
				"cTextoWait"
			],
			[
				"cText",
				"cTextoWait"
			],
			[
				"lChange",
				"lChangeImage"
			],
			[
				"lchange",
				"lChangeImage"
			],
			[
				"Prepare",
				"PrepareTemporal"
			],
			[
				"Destroy",
				"DestroyTemporalLbl"
			],
			[
				"lCreate",
				"lCreateTemporalLbl"
			]
		]
	},
	"buffers":
	[
		{
			"file": "prg/Tcomercio.prg",
			"settings":
			{
				"buffer_size": 232035,
				"line_ending": "Windows"
			}
		},
		{
			"file": "prg/Factcli.prg",
			"settings":
			{
				"buffer_size": 809244,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n#ifndef __PDA__\n   #include \"FiveWin.Ch\"\n   #include \"Folder.ch\"\n   #include \"Report.ch\"\n   #include \"Menu.ch\"\n   #include \"Xbrowse.ch\"\n#else\n   #include \"FWCE.ch\"\nREQUEST DBFCDX\n#endif\n\n#include \"Factu.ch\"\n\n#define CLR_BAR                   14197607\n#define _MENUITEM_                \"01057\"\n\n#define impuestos_DESG                  1\n#define impuestos_INCL                  2\n\n/*\nDefinición de la base de datos de albaranes a CLIENTES\n*/\n\n#define _CSERALB                  1\n#define _NNUMALB                  2\n#define _CSUFALB                  3\n#define _CTURALB                  4\n#define _DFECALB                  5\n#define _CCODCLI                  6\n#define _CCODALM                  7\n#define _CCODCAJ                  8\n#define _CNOMCLI                  9\n#define _CDIRCLI                  10\n#define _CPOBCLI                  11\n#define _CPRVCLI                  12\n#define _CPOSCLI                  13\n#define _CDNICLI                  14\n#define _LMODCLI                  15\n#define _LFACTURADO               16\n#define _LENTREGADO               17\n#define _DFECENT                  18\n#define _CCODSUALB                19\n#define _CCONDENT                 20\n#define _MCOMENT                  21\n#define _MOBSERV                  22\n#define _CCODPAGO                 23\n#define _NBULTOS                  24\n#define _NPORTES                  25\n#define _CCODAGE                  26\n#define _CCODOBR                  27\n#define _CCODTAR                  28\n#define _CCODRUT                  29\n#define _CNUMPED                  30\n#define _CNUMPRE                  31\n#define _CNUMSAT                  32\n#define _NTIPOALB                 33\n#define _CNUMFAC                  34\n#define _LMAYOR                   35\n#define _NTARIFA                  36\n#define _CDTOESP                  37\n#define _NDTOESP                  38\n#define _CDPP                     39\n#define _NDPP                     40\n#define _CDTOUNO                  41\n#define _NDTOUNO                  42\n#define _CDTODOS                  43\n#define _NDTODOS                  44\n#define _NDTOCNT                  45\n#define _NDTORAP                  46\n#define _NDTOPUB                  47\n#define _NDTOPGO                  48\n#define _NDTOPTF                  49\n#define _LRECARGO                 50\n#define _NPCTCOMAGE               51\n#define _LSNDDOC                  52\n#define _CDIVALB                  53\n#define _NVDVALB                  54\n#define _CRETPOR                  55\n#define _CRETMAT                  56\n#define _CNUMDOC                  57\n#define _CSUPED                   58\n#define _LIVAINC                  59\n#define _NREGIVA                  60\n#define _LGENLQD                  61\n#define _NNUMORD                  62\n#define _CSUFORD                  63\n#define _DFECORD                  64\n#define _NIVAMAN                  65\n#define _NMANOBR                  66\n#define _CCODTRN                  67\n#define _NKGSTRN                  68\n#define _LCLOALB                  69\n#define _CCODUSR                  70\n#define _DFECCRE                  71\n#define _CTIMCRE                  72\n#define _DFECENV                  73\n#define _CCODGRP                  74\n#define _LIMPRIMIDO               75\n#define _DFECIMP                  76\n#define _CHORIMP                  77\n#define _CCODDLG                  78\n#define _NDTOATP                  79\n#define _NSBRATP                  80\n#define _NMONTAJE                 81\n#define _DFECENTR                 82\n#define _DFECSAL                  83\n#define _LALQUILER                84\n#define _CMANOBR                  85\n#define _LORDCAR                  86\n#define _CNUMTIK                  87\n#define _CTLFCLI                  88\n#define _NTOTNET                  89\n#define _NTOTIVA                  90\n#define _NTOTREQ                  91\n#define _NTOTALB                  92\n#define _NTOTPAG                  93\n#define _LOPERPV                  94\n#define _CBANCO                   95\n#define _CENTBNC                  96\n#define _CSUCBNC                  97\n#define _CDIGBNC                  98\n#define _CCTABNC                  99\n\n/*\nDefinici¢n de la base de datos de lineas de detalle\n*/\n\n#define _dCSERALB                 1\n#define _dNNUMALB                 2\n#define _dCSUFALB                 3\n#define _CREF                     4\n#define _CDETALLE                 5\n#define _NSATUNIT                 6\n#define _NPNTVER                  7\n#define _NIMPTRN                  8\n#define _NDTO                     9\n#define _NDTOPRM                  10\n#define _NIVA                     11\n#define _NCANENT                  12\n#define _NCANFAC                  13\n#define _LCONTROL                 14\n#define _NPESOKG                  15\n#define _CPESOKG                  16\n#define _CUNIDAD                  17\n#define _NCOMAGE                  18\n#define _NUNICAJA                 19\n#define _NUNDKIT                  20\n#define _DFECHA                   21\n#define _CTIPMOV                  22\n#define _MLNGDES                  23\n#define _LTOTLIN                  24\n#define _LIMPLIN                  25\n#define _LNEWLIN                  26\n#define _dCNUMPED                 27\n#define _CCODPR1                  28\n#define _CCODPR2                  29\n#define _CVALPR1                  30\n#define _CVALPR2                  31\n#define _NFACCNV                  32\n#define _NDTODIV                  33\n#define _NNUMLIN                  34      //   N      4     0\n#define _NCTLSTK                  35      //   N      1     0\n#define _NCOSDIV                  36      //   N     13     3\n#define _NPVSATC                  37      //   N     13     3\n#define _CALMLIN                  38      //   C     3      0\n#define _LIVALIN                  39\n#define _NVALIMP                  40      //   N    16      6\n#define _CCODIMP                  41      //   C     3      0\n#define _LLOTE                    42      //   L     1      0\n#define _NLOTE                    43      //   N     4      0\n#define _CLOTE                    44\n#define _DFECCAD                  45\n#define _LKITART                  46      //   L     4      0\n#define _LKITCHL                  47      //   L     4      0\n#define _LKITPRC                  48      //   L     4      0\n#define _NMESGRT                  49      //   N     2      0\n#define _LMSGVTA                  50\n#define _LNOTVTA                  51\n#define _MNUMSER                  52\n#define _CCODTIP                  53      //   C     3      0\n#define _CCODFAM                  54      //   C     8      0\n#define _CGRPFAM                  55      //   C     3      0\n#define _NREQ                     56      //   N    16      6\n#define _MOBSLIN                  57      //   M    10      0\n#define _CCODPRV                  58      //   C    12      0\n#define _CNOMPRV                  59      //   C    30      0\n#define _CIMAGEN                  60      //   C    30      0\n#define _NPUNTOS                  61\n#define _NVALPNT                  62\n#define _NDTOPNT                  63\n#define _NINCPNT                  64\n#define _CREFPRV                  65\n#define _NVOLUMEN                 66\n#define _CVOLUMEN                 67\n#define __DFECENT                 68\n#define __DFECSAL                 69\n#define _NSATALQ                  70\n#define __LALQUILER               71\n#define _NNUMMED                  72\n#define _NMEDUNO                  73\n#define _NMEDDOS                  74\n#define _NMEDTRE                  75\n#define _NTARLIN                  76      //   L      1     0\n#define _CCODUBI1                 77\n#define _CCODUBI2                 78\n#define _CCODUBI3                 79\n#define _CVALUBI1                 80\n#define _CVALUBI2                 81\n#define _CVALUBI3                 82\n#define _CNOMUBI1                 83\n#define _CNOMUBI2                 84\n#define _CNOMUBI3                 85\n#define _LIMPFRA                  86\n#define _CCODFRA                  87\n#define _CTXTFRA                  88\n#define _DESCRIP                  89\n#define _dLFACTURADO              90      //   L      1     0\n#define _LLINOFE                  91      //   L      1     0\n#define _LVOLIMP                  92\n#define __DFECALB                 93\n\n/*\nDefinici¢n de Array para impuestos\n*/\n\n#define _NBRTIVA1                aTotIva[ 1, 1 ]\n#define _NBASIVA1                aTotIva[ 1, 2 ]\n#define _NPCTIVA1                aTotIva[ 1, 3 ]\n#define _NPCTREQ1                aTotIva[ 1, 4 ]\n#define _NPNTVER1                aTotIva[ 1, 5 ]\n#define _NIVMIVA1                aTotIva[ 1, 6 ]\n#define _NTRNIVA1                aTotIva[ 1, 7 ]\n#define _NIMPIVA1                aTotIva[ 1, 8 ]\n#define _NIMSATQ1                aTotIva[ 1, 9 ]\n#define _NBRTIVA2                aTotIva[ 2, 1 ]\n#define _NBASIVA2                aTotIva[ 2, 2 ]\n#define _NPCTIVA2                aTotIva[ 2, 3 ]\n#define _NPCTREQ2                aTotIva[ 2, 4 ]\n#define _NPNTVER2                aTotIva[ 2, 5 ]\n#define _NIVMIVA2                aTotIva[ 2, 6 ]\n#define _NTRNIVA2                aTotIva[ 2, 7 ]\n#define _NIMPIVA2                aTotIva[ 2, 8 ]\n#define _NIMSATQ2                aTotIva[ 2, 9 ]\n#define _NBRTIVA3                aTotIva[ 3, 1 ]\n#define _NBASIVA3                aTotIva[ 3, 2 ]\n#define _NPCTIVA3                aTotIva[ 3, 3 ]\n#define _NPCTREQ3                aTotIva[ 3, 4 ]\n#define _NPNTVER3                aTotIva[ 3, 5 ]\n#define _NIVMIVA3                aTotIva[ 3, 6 ]\n#define _NTRNIVA3                aTotIva[ 3, 7 ]\n#define _NIMPIVA3                aTotIva[ 3, 8 ]\n#define _NIMSATQ3                aTotIva[ 3, 9 ]\n\nmemvar cDbf\nmemvar cDbfCol\nmemvar cDbfPag\nmemvar cCliente\nmemvar cDbfCli\nmemvar cIva\nmemvar cDbfIva\nmemvar cDbfDiv\nmemvar cDbfUsr\nmemvar cFPago\nmemvar cDbfPgo\nmemvar cAgent\nmemvar cDbfAge\nmemvar cTvta\nmemvar cObras\nmemvar cDbfObr\nmemvar cTarPreL\nmemvar cTarPreS\nmemvar cDbfRut\nmemvar cDbfTrn\nmemvar cDbfPro\nmemvar cDbfDlg\nmemvar cDbfTblPro\nmemvar cDbfAnt\nmemvar aTotIva\nmemvar cCtaCli\nmemvar nTotBrt\nmemvar nTotDto\nmemvar nTotDpp\nmemvar nTotUno\nmemvar nTotDos\nmemvar nTotNet\nmemvar nTotIva\nmemvar nTotIvm\nmemvar aTotIvm\nmemvar nTotReq\nmemvar nTotImp\nmemvar nTotAlb\nmemvar nTotPag\nmemvar nTotEur\nmemvar nTotPnt\nmemvar nTotPes\nmemvar nTotCos\nmemvar nTotAge\nmemvar nTotTrn\nmemvar nTotRnt\nmemvar nTotDif\nmemvar nTotAtp\nmemvar nPctRnt\nmemvar aIvaUno\nmemvar aIvaDos\nmemvar aIvaTre\nmemvar aIvmUno\nmemvar aIvmDos\nmemvar aIvmTre\nmemvar nVdvDivAlb\nmemvar cPicUndAlb\nmemvar cPouDivAlb\nmemvar cPorDivAlb\nmemvar cPpvDivAlb\nmemvar cPouEurAlb\nmemvar nDouDivAlb\nmemvar nRouDivAlb\nmemvar nTotArt\nmemvar nTotCaj\nmemvar cPorDivEnt\nmemvar cDbfEnt\nmemvar nTotPage\nmemvar oStk\nmemvar nTotalDto\n\nmemvar lEnd\nmemvar nRow\nmemvar oInf\nmemvar nPagina\nmemvar oReport\n\n/*\nDefinici¢n de Array para objetos impuestos\n*/\n\nstatic oWndBrw\nstatic oBrwIva\nstatic dbfUsr\nstatic dbfAlbCliT\nstatic dbfAlbCliL\nstatic dbfAlbCliI\nstatic dbfAlbCliD\nstatic dbfAlbCliP\nstatic dbfAlbCliS\nstatic dbfProSer\nstatic dbfMatSer\nstatic dbfAlbPrvL\nstatic dbfAlbPrvS\nstatic dbfTmpLin\nstatic dbfTmpInc\nstatic dbfTmpDoc\nstatic dbfTmpPgo\nstatic dbfTmpSer\nstatic dbfAntCliT\nstatic dbfDelega\nstatic dbfCount\nstatic cTmpLin\nstatic cTmpInc\nstatic cTmpDoc\nstatic cTmpPgo\nstatic cTmpSer\nstatic dbfInci\nstatic dbfRuta\nstatic dbfIva\nstatic dbfClient\nstatic dbfCliInc\nstatic dbfCliBnc\nstatic dbfArtPrv\nstatic dbfAlm\nstatic dbfFPago\nstatic dbfAgent\nstatic dbfTarPreL\nstatic dbfTarPreS\nstatic dbfPedCliT\nstatic dbfPedCliL\nstatic dbfPedCliR\nstatic dbfPedCliP\nstatic dbfPedCliI\nstatic dbfPedCliD\nstatic dbfPreCliT\nstatic dbfPreCliL\nstatic dbfPreCliI\nstatic dbfPreCliD\nstatic dbfSatCliT\nstatic dbfSatCliL\nstatic dbfSatCliI\nstatic dbfSatCliD\nstatic dbfSatCliS\nstatic dbfFacCliT\nstatic dbfFacCliL\nstatic dbfFacCliS\nstatic dbfFacCliP\nstatic dbfFacRecT\nstatic dbfFacRecL\nstatic dbfFacRecS\nstatic dbfPedPrvL\nstatic dbfTikT\nstatic dbfTikL\nstatic dbfTikS\nstatic dbfArticulo\nstatic dbfCodebar\nstatic dbfPromoT\nstatic dbfPromoL\nstatic dbfPromoC\nstatic dbfCliAtp\nstatic dbfTVta\nstatic dbfTblPro\nstatic dbfPro\nstatic dbfCajT\nstatic dbfFacPrvL\nstatic dbfFacPrvS\nstatic dbfRctPrvL\nstatic dbfRctPrvS\nstatic dbfProLin\nstatic dbfProMat\nstatic dbfHisMov\nstatic dbfHisMovS\nstatic dbfEmp\nstatic oFont\nstatic oMenu\nstatic oStock\nstatic oGrpCli\nstatic oTrans\nstatic oNewImp\nstatic oUndMedicion\nstatic dbfDiv\nstatic oBandera\nstatic dbfKit\nstatic dbfDoc\nstatic dbfFlt\nstatic dbfTblCnv\nstatic dbfOferta\nstatic dbfObrasT\nstatic dbfFamilia\nstatic dbfArtDiv\nstatic dbfUbicaL\nstatic dbfAgeCom\nstatic oGetTotal\nstatic oGetIvm\nstatic oGetRnt\nstatic oGetMasDiv\nstatic cGetMasDiv       := \"\"\nstatic oGetNet\nstatic oGetIva\nstatic oGetReq\nstatic oGetAge\nstatic oComisionLinea\nstatic nComisionLinea   := 0\nstatic oGetTrn\nstatic oGetPnt\nstatic cPouDiv\nstatic cPorDiv\nstatic cPpvDiv\nstatic cPouEur\nstatic cPicUnd\nstatic nVdvDiv\nstatic nDouDiv\nstatic nRouDiv\nstatic nDorDiv\nstatic nDpvDiv\n\nstatic oTipArt\nstatic oGrpFam\nstatic oFraPub\n\nstatic oBtnKit\n\nstatic oBtnPre\nstatic oBtnSat\nstatic oBtnPed\nstatic oBtnAgruparPedido\nstatic oBtnAgruparSAT\n\nstatic aNumPed          := {}\nstatic aNumSat          := {}\nstatic oGetAlb\nstatic oGetEnt\nstatic oGetPdt\nstatic oGetPes\nstatic oGetDif\nstatic nTotOld\nstatic nNumCaj          := 0\nstatic cOldCodCli       := \"\"\nstatic cOldCodArt       := \"\"\nstatic cOldPrpArt       := \"\"\nstatic cOldUndMed       := \"\"\nstatic lOpenFiles       := .f.\nstatic lExternal        := .f.\nstatic aTipAlb          := { \"Venta\", \"Alquiler\" }\nstatic oTipAlb\nstatic cFiltroUsuario   := \"\"\nstatic oTotAlbLin\n\nstatic oBrwLin\nstatic oBrwInc\nstatic oBrwDoc\n\nstatic aPedidos         := {}\nstatic aSats            := {}\n\nstatic bEdtRec          := { | aTmp, aGet, dbfAlbCliT, oBrw, bWhen, bValid, nMode, hHash | EdtRec( aTmp, aGet, dbfAlbCliT, oBrw, bWhen, bValid, nMode, hHash ) }\nstatic bEdtDet          := { | aTmp, aGet, dbfAlbCliL, oBrw, bWhen, bValid, nMode, aTmpAlb | EdtDet( aTmp, aGet, dbfAlbCliL, oBrw, bWhen, bValid, nMode, aTmpAlb ) }\nstatic bEdtInc          := { | aTmp, aGet, dbfAlbCliI, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbfAlbCliI, oBrw, bWhen, bValid, nMode, aTmpLin ) }\nstatic bEdtDoc          := { | aTmp, aGet, dbfAlbCliD, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbfAlbCliD, oBrw, bWhen, bValid, nMode, aTmpLin ) }\nstatic bEdtPgo          := { | aTmp, aGet, dbfAlbCliP, oBrw, bWhen, bValid, nMode, aTmpAlb | EdtEnt( aTmp, aGet, dbfAlbCliP, oBrw, bWhen, bValid, nMode, aTmpAlb ) }\n\n#ifndef __PDA__\n\n//--------------------------------------------------------------------------//\n//Funciones para el programa\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION OpenFiles()\n\n   local oError\n   local oBlock\n\n   if lOpenFiles\n      MsgStop( 'Imposible abrir ficheros de albaranes de clientes' )\n      Return ( .f. )\n   end if\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      // DisableAcceso()\n\n      lOpenFiles        := .t.\n\n      USE ( cPatEmp() + \"ALBCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIL\", @dbfAlbCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLII\", @dbfAlbCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLID\", @dbfAlbCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIP\", @dbfAlbCliP ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIP.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIS\", @dbfAlbCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIS.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenPreCliT( @dbfPreCliT )\n         lOpenFiles     := .f.\n      end if \n\n      USE ( cPatEmp() + \"PreCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PreCliT\", @dbfPreCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PreCliL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PreCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PreCliI\", @dbfPreCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PreCliI.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PreCliD.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PreCliD\", @dbfPreCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PreCliD.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenSatCliT( @dbfSatCliT )\n         lOpenFiles        := .f.\n      end if\n\n      USE ( cPatEmp() + \"SatCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliL\", @dbfSatCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliI\", @dbfSatCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliI.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliD.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliD\", @dbfSatCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliD.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"SatCliS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"SatCliS\", @dbfSatCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"SatCliS.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenPedCliT( @dbfPedCliT )\n         lOpenFiles     := .f.\n      end if \n\n      USE ( cPatEmp() + \"PEDCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIL\", @dbfPedCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLIR.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIR\", @dbfPedCliR ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIR.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLIP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLIP\", @dbfPedCliP ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLIP.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLII\", @dbfPedCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PEDCLID\", @dbfPedCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIKET.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKET\", @dbfTikT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKET.CDX\" ) ADDITIVE\n      SET TAG TO \"cNumDoc\"\n\n      USE ( cPatEmp() + \"TIKEL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKEL\", @dbfTikL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKEL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIKES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIKES\", @dbfTikS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIKES.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CLIENT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIENT\", @dbfClient ) )\n      SET ADSINDEX TO ( cPatCli() + \"CLIENT.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliInc.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CliInc\", @dbfCliInc ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliInc.Cdx\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliBnc.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIBNC\", @dbfCliBnc ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliBnc.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROVART.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROVART\", @dbfArtPrv ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROVART.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TIVA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIVA\", @dbfIva ) )\n      SET ADSINDEX TO ( cPatDat() + \"TIVA.CDX\" ) ADDITIVE\n\n      USE ( cPatGrp() + \"FPAGO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FPAGO\", @dbfFPago ) )\n      SET ADSINDEX TO ( cPatGrp() + \"FPAGO.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliAtp.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIATP\", @dbfCliAtp ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliAtp.Cdx\" ) ADDITIVE\n\n      USE ( cPatCli() + \"AGENTES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AGENTES\", @dbfAgent ) )\n      SET ADSINDEX TO ( cPatCli() + \"AGENTES.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TarPreL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TarPreL\", @dbfTarPreL ) )\n      SET ADSINDEX TO ( cPatArt() + \"TarPreL.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TarPreS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TarPreS\", @dbfTarPreS ) )\n      SET ADSINDEX TO ( cPatArt() + \"TarPreS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOT\", @dbfPromoT ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOL\", @dbfPromoL ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOL.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROMOC.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMOC\", @dbfPromoC ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROMOC.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTICULO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTICULO\", @dbfArticulo ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTICULO.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ArtCodebar.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CODEBAR\", @dbfCodebar ) )\n      SET ADSINDEX TO ( cPatArt() + \"ArtCodebar.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"FAMILIAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FAMILIAS\", @dbfFamilia ) )\n      SET ADSINDEX TO ( cPatArt() + \"FAMILIAS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTKIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTTIK\", @dbfKit ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTKIT.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TVTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TVTA\", @dbfTVta ) )\n      SET ADSINDEX TO ( cPatDat() + \"TVTA.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DIVISAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"DIVISAS\", @dbfDiv ) )\n      SET ADSINDEX TO ( cPatDat() + \"DIVISAS.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"CNFFLT.DBF\" ) NEW SHARED VIA ( cDriver() )ALIAS ( cCheckArea( \"CNFFLT\", @dbfFlt ) )\n      SET ADSINDEX TO ( cPatDat() + \"CNFFLT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"RDOCUMEN.DBF\" ) NEW SHARED VIA ( cDriver() )ALIAS ( cCheckArea( \"RDOCUMEN\", @dbfDoc ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RDOCUMEN.CDX\" ) ADDITIVE\n      SET TAG TO \"CTIPO\"\n\n      USE ( cPatDat() + \"TBLCNV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TBLCNV\", @dbfTblCnv ) )\n      SET ADSINDEX TO ( cPatDat() + \"TBLCNV.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"OFERTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OFERTA\", @dbfOferta ) )\n      SET ADSINDEX TO ( cPatArt() + \"OFERTA.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"ObrasT.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OBRAST\", @dbfObrasT ) )\n      SET ADSINDEX TO ( cPatCli() + \"ObrasT.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PRO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PRO\", @dbfPro ) )\n      SET ADSINDEX TO ( cPatArt() + \"PRO.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"TBLPRO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TBLPRO\", @dbfTblPro ) )\n      SET ADSINDEX TO ( cPatArt() + \"TBLPRO.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"RUTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RUTA\", @dbfRuta ) )\n      SET ADSINDEX TO ( cPatCli() + \"RUTA.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTDIV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTDIV\", @dbfArtDiv ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTDIV.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"Cajas.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CAJAS\", @dbfCajT ) )\n      SET ADSINDEX TO ( cPatDat() + \"Cajas.Cdx\" ) ADDITIVE\n\n      USE ( cPatAlm() + \"Almacen.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALMACEN\", @dbfAlm ) )\n      SET ADSINDEX TO ( cPatAlm() + \"Almacen.Cdx\" ) ADDITIVE\n\n      USE ( cPatDat() + \"USERS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"USERS\", @dbfUsr ) )\n      SET ADSINDEX TO ( cPatDat() + \"USERS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIPINCI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIPINCI\", @dbfInci ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIPINCI.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"AntCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AntCliT\", @dbfAntCliT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"AntCliT.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DELEGA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"DELEGA\", @dbfDelega ) )\n      SET ADSINDEX TO ( cPatDat() + \"DELEGA.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"NCOUNT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"NCOUNT\", @dbfCount ) )\n      SET ADSINDEX TO ( cPatEmp() + \"NCOUNT.CDX\" ) ADDITIVE\n\n      USE ( cPatAlm() + \"UBICAL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"UBICAL\", @dbfUbicaL ) )\n      SET ADSINDEX TO ( cPatAlm() + \"UBICAL.CDX\" ) ADDITIVE\n\n      USE ( cPatGrp() + \"AGECOM.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AGECOM\", @dbfAgeCom ) )\n      SET ADSINDEX TO ( cPatGrp() + \"AGECOM.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLIL\", @dbfFacCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACCLIS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACCLIS\", @dbfFacCliS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACCLIS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECT\", @dbfFacRecT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECL\", @dbfFacRecL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACRECS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACRECS\", @dbfFacRecS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACRECS.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"Empresa.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"Empresa\", @dbfEmp ) )\n      SET ADSINDEX TO ( cPatDat() + \"Empresa.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBPROVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBPROVL\", @dbfAlbPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBPROVL.CDX\" ) ADDITIVE\n      SET TAG TO \"cStkFast\"\n\n      USE ( cPatEmp() + \"ALBPRVS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBPRVS\", @dbfAlbPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBPRVS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"FACPRVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACPRVL\", @dbfFacPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACPRVL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      USE ( cPatEmp() + \"FACPRVS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FACPRVS\", @dbfFacPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"FACPRVS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"RctPrvL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RctPrvL\", @dbfRctPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RctPrvL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      USE ( cPatEmp() + \"RctPrvS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RctPrvS\", @dbfRctPrvS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"RctPrvS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PROLIN.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROLIN\", @dbfProLin ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROLIN.CDX\" ) ADDITIVE\n      SET TAG TO \"cCodArt\"\n\n      USE ( cPatEmp() + \"PROMAT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROMAT\", @dbfProMat ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROMAT.CDX\" ) ADDITIVE\n      SET TAG TO \"cCodArt\"\n\n      USE ( cPatEmp() + \"HISMOV.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"HISMOV\", @dbfHisMov ) )\n      SET ADSINDEX TO ( cPatEmp() + \"HISMOV.CDX\" ) ADDITIVE\n      SET TAG TO \"cRefMov\"\n\n      USE ( cPatEmp() + \"MOVSER.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"MOVSER\", @dbfHisMovS ) )\n      SET ADSINDEX TO ( cPatEmp() + \"MOVSER.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"PEDPROVL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PedPrvL\", @dbfPedPrvL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PEDPROVL.CDX\" ) ADDITIVE\n      SET TAG TO \"cRef\"\n\n      USE ( cPatEmp() + \"PROSER.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROSER\", @dbfProSer ) )\n      SET ADSINDEX TO ( cPatEmp() + \"PROSER.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"MATSER.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"MATSER\", @dbfMatSer ) )\n      SET ADSINDEX TO ( cPatEmp() + \"MATSER.CDX\" ) ADDITIVE\n\n      if !TDataCenter():OpenAlbCliT( @dbfAlbCliT )\n         lOpenFiles     := .f.\n      end if\n\n      if !TDataCenter():OpenFacCliT( @dbfFacCliT )\n         lOpenFiles     := .f.\n      end if\n\n      if !TDataCenter():OpenFacCliP( @dbfFacCliP )\n         lOpenFiles     := .f.\n      end if\n\n      oBandera             := TBandera():New()\n\n      oStock               := TStock():Create( cPatGrp() )\n      if !oStock:lOpenFiles()\n         lOpenFiles        := .f.\n      end if\n\n      oGrpCli           := TGrpCli():Create( cPatCli() )\n      if !oGrpCli:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oNewImp           := TNewImp():Create( cPatEmp() )\n      if !oNewImp:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oTrans            := TTrans():Create( cPatCli() )\n      if !oTrans:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oTipArt           := TTipArt():Create( cPatArt() )\n      if !oTipArt:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oGrpFam           := TGrpFam():Create( cPatArt() )\n      if !oGrpFam:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oUndMedicion      := UniMedicion():Create( cPatGrp() )\n      if !oUndMedicion:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oFraPub           := TFrasesPublicitarias():Create( cPatArt() )\n      if !oFraPub:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      /*\n      Declaración de variables públicas----------------------------------------\n      */\n\n      public nTotBrt    := 0\n      public nTotAlb    := 0\n      public nTotDto    := 0\n      public nTotDPP    := 0\n      public nTotNet    := 0\n      public nTotIva    := 0\n      public nTotIvm    := 0\n      public nTotAge    := 0\n      public nTotReq    := 0\n      public nTotPnt    := 0\n      public nTotUno    := 0\n      public nTotDos    := 0\n      public nTotCos    := 0\n      public nTotPes    := 0\n      public nTotDif    := 0\n      public nTotAtp    := 0\n      public nTotTrn    := 0\n      public nPctRnt    := 0\n      public nTotRnt    := 0\n\n      public aTotIva    := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }\n      public aIvaUno    := aTotIva[ 1 ]\n      public aIvaDos    := aTotIva[ 2 ]\n      public aIvaTre    := aTotIva[ 3 ]\n\n      public aTotIvm    := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }\n      public aIvmUno    := aTotIvm[ 1 ]\n      public aIvmDos    := aTotIvm[ 2 ]\n      public aIvmTre    := aTotIvm[ 3 ]\n\n      public nTotPag    := 0\n\n      public nTotArt    := 0\n      public nTotCaj    := 0\n\n      /*\n      Limitaciones de cajero y cajas--------------------------------------------------------\n      */\n\n      if lAIS() .and. !oUser():lAdministrador()\n      \n         cFiltroUsuario    := \"Field->cSufAlb == '\" + oUser():cDelegacion() + \"' .and. Field->cCodCaj == '\" + oUser():cCaja() + \"'\"\n         if oUser():lFiltroVentas()         \n            cFiltroUsuario += \" .and. Field->cCodUsr == '\" + oUser():cCodigo() + \"'\"\n         end if \n\n         ( dbfAlbCliT )->( AdsSetAOF( cFiltroUsuario ) )\n\n      end if\n\n   RECOVER USING oError\n\n      lOpenFiles        := .f.\n\n      msgStop( \"Imposible abrir todas las bases de datos\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   if !lOpenFiles\n      CloseFiles()\n   end if\n\nReturn ( lOpenFiles )\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION CloseFiles()\n\n   DisableAcceso()\n\n   DestroyFastFilter( dbfAlbCliT, .t., .t. )\n\n   if !Empty( oFont )\n      oFont:end()\n   end if\n\n   if !Empty( dbfAlbCliT )\n      ( dbfAlbCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfClient )\n      ( dbfClient    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfIva )\n      ( dbfIva       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfFPago )\n      ( dbfFPago     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliL )\n      ( dbfAlbCliL   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliI )\n      ( dbfAlbCliI   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliD )\n      ( dbfAlbCliD   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliP )\n      ( dbfAlbCliP   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliS )\n      ( dbfAlbCliS   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTikT )\n      ( dbfTikT      )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPreCliT )\n      ( dbfPreCliT )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPreCliL )\n      ( dbfPreCliL )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPreCliI )\n      ( dbfPreCliI )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPreCliD )\n      ( dbfPreCliD )->( dbCloseArea() )\n   end if\n   if !Empty( dbfSatCliT )\n      ( dbfSatCliT )->( dbCloseArea() )\n   end if\n   if !Empty( dbfSatCliL )\n      ( dbfSatCliL )->( dbCloseArea() )\n   end if\n   if !Empty( dbfSatCliI )\n      ( dbfSatCliI )->( dbCloseArea() )\n   end if\n   if !Empty( dbfSatCliD )\n      ( dbfSatCliD )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfSatCliS )\n      ( dbfSatCliS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliT )\n      ( dbfPedCliT   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPedCliL )\n      ( dbfPedCliL   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPedCliR )\n      ( dbfPedCliR   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPedCliP )\n      ( dbfPedCliP   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPedCliI )\n      ( dbfPedCliI   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPedCliD )\n      ( dbfPedCliD   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAgent )\n      ( dbfAgent     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTarPreL )\n      ( dbfTarPreL   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTarPreS )\n      ( dbfTarPreS   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPromoT )\n      ( dbfPromoT    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPromoL )\n      ( dbfPromoL    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPromoC )\n      ( dbfPromoC    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfArticulo )\n      ( dbfArticulo  )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCodebar )\n      ( dbfCodebar   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfFamilia )\n      ( dbfFamilia   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfKit )\n      ( dbfKit       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfFlt )\n      ( dbfFlt       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlm )\n      ( dbfAlm       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCliAtp )\n      ( dbfCliAtp    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTVta )\n      ( dbfTVta      )->( dbCloseArea() )\n   end if\n   if !Empty( dbfDiv )\n      ( dbfDiv       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfDoc )\n      ( dbfDoc       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTblCnv )\n      ( dbfTblCnv    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfOferta )\n      ( dbfOferta    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfObrasT )\n      ( dbfObrasT    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfPro )\n      ( dbfPro       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfTblPro )\n      ( dbfTblPro    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfRuta )\n      ( dbfRuta      )->( dbCloseArea() )\n   end if\n   if !Empty( dbfArtDiv )\n      ( dbfArtDiv    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCajT )\n      ( dbfCajT )->( dbCloseArea() )\n   end if\n   if !Empty( dbfUsr )\n      ( dbfUsr )->( dbCloseArea() )\n   end if\n   if dbfInci != nil\n      ( dbfInci )->( dbCloseArea() )\n   end if\n   if dbfArtPrv != nil\n      ( dbfArtPrv )->( dbCloseArea() )\n   end if\n   if dbfAntCliT != nil\n      ( dbfAntCliT )->( dbCloseArea() )\n   end if\n   if dbfDelega != nil\n      ( dbfDelega )->( dbCloseArea() )\n   end if\n   if dbfCount != nil\n      ( dbfCount )->( dbCloseArea() )\n   end if\n   if dbfUbicaL != nil\n      ( dbfUbicaL )->( dbCloseArea() )\n   end if\n   if dbfAgeCom != nil\n      ( dbfAgeCom )->( dbCloseArea() )\n   end if\n   if dbfFacCliT != nil\n      ( dbfFacCliT )->( dbCloseArea() )\n   end if\n   if dbfFacCliL != nil\n      ( dbfFacCliL )->( dbCloseArea() )\n   end if\n   if dbfFacCliS != nil\n      ( dbfFacCliS )->( dbCloseArea() )\n   end if\n   if dbfFacCliP != nil\n      ( dbfFacCliP )->( dbCloseArea() )\n   end if\n   if dbfFacRecT != nil\n      ( dbfFacRecT )->( dbCloseArea() )\n   end if\n   if dbfFacRecL != nil\n      ( dbfFacRecL )->( dbCloseArea() )\n   end if\n   if dbfFacRecS != nil\n      ( dbfFacRecS )->( dbCloseArea() )\n   end if\n   if dbfTikT != nil\n      ( dbfTikT )->( dbCloseArea() )\n   end if\n   if dbfTikL != nil\n      ( dbfTikL )->( dbCloseArea() )\n   end if\n   if dbfTikS != nil\n      ( dbfTikS )->( dbCloseArea() )\n   end if\n   if dbfEmp != nil\n      ( dbfEmp )->( dbCloseArea() )\n   end if\n   if dbfProLin != nil\n      ( dbfProLin )->( dbCloseArea() )\n   end if\n   if dbfProMat != nil\n      ( dbfProMat )->( dbCloseArea() )\n   end if\n   if dbfProSer != nil\n      ( dbfProSer )->( dbCloseArea() )\n   end if\n   if dbfMatSer != nil\n      ( dbfMatSer )->( dbCloseArea() )\n   end if\n   if dbfHisMov != nil\n      ( dbfHisMov )->( dbCloseArea() )\n   end if\n   if dbfHisMovS != nil\n      ( dbfHisMovS )->( dbCloseArea() )\n   end if\n   if dbfAlbPrvL != nil\n      ( dbfAlbPrvL )->( dbCloseArea() )\n   end if\n   if dbfAlbPrvS != nil\n      ( dbfAlbPrvS )->( dbCloseArea() )\n   end if\n   if dbfFacPrvL != nil\n      ( dbfFacPrvL )->( dbCloseArea() )\n   end if\n   if dbfFacPrvS != nil\n      ( dbfFacPrvS )->( dbCloseArea() )\n   end if\n   if dbfRctPrvL != nil\n      ( dbfRctPrvL )->( dbCloseArea() )\n   end if\n   if dbfRctPrvS != nil\n      ( dbfRctPrvS )->( dbCloseArea() )\n   end if\n   if dbfCliInc != nil\n      ( dbfCliInc )->( dbCloseArea() )\n   end if\n   if dbfPedPrvL != nil\n      ( dbfPedPrvL )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCliBnc  )\n      ( dbfCliBnc  )->( dbCloseArea() )\n   end if\n\n   if !Empty( oStock )\n      oStock:end()\n   end if\n   if !Empty( oGrpCli )\n      oGrpCli:end()\n   end if\n   if !Empty( oNewImp )\n      oNewImp:end()\n   end if\n   if !Empty( oTrans )\n      oTrans:end()\n   end if\n   if !Empty( oTipArt )\n      oTipArt:end()\n   end if\n   if !Empty( oGrpFam )\n      oGrpFam:end()\n   end if\n   if !Empty( oUndMedicion )\n      oUndMedicion:end()\n   end if\n   if !Empty( oFraPub )\n      oFraPub:end()\n   end if\n\n   dbfClient      := nil\n   dbfIva         := nil\n   dbfAlbCliL     := nil\n   dbfAlbCliT     := nil\n   dbfAlbCliI     := nil\n   dbfAlbCliD     := nil\n   dbfAlbCliP     := nil\n   dbfAlbCliS     := nil\n   dbfPedCliT     := nil\n   dbfPedCliL     := nil\n   dbfPedCliR     := nil\n   dbfPedCliP     := nil\n   dbfPedCliI     := nil\n   dbfPedCliD     := nil\n   dbfTikT        := nil\n   dbfFPago       := nil\n   dbfAgent       := nil\n   dbfAlm         := nil\n   dbfTarPreL     := nil\n   dbfTarPreS     := nil\n   dbfPromoT      := nil\n   dbfPromoL      := nil\n   dbfPromoC      := nil\n   dbfArticulo    := nil\n   dbfCodebar     := nil\n   dbfFamilia     := nil\n   dbfKit         := nil\n   dbfCliAtp      := nil\n   dbfTVta        := nil\n   dbfDiv         := nil\n   oBandera       := nil\n   dbfDoc         := nil\n   dbfTblCnv      := nil\n   dbfOferta      := nil\n   dbfObrasT      := nil\n   dbfPro         := nil\n   dbfFlt         := nil\n   dbfTblPro      := nil\n   dbfRuta        := nil\n   dbfArtDiv      := nil\n   dbfCajT        := nil\n   dbfUsr         := nil\n   dbfInci        := nil\n   dbfArtPrv      := nil\n   dbfAntCliT     := nil\n   dbfDelega      := nil\n   dbfCount       := nil\n   dbfUbicaL      := nil\n   dbfAgeCom      := nil\n   dbfFacCliT     := nil\n   dbfFacCliL     := nil\n   dbfFacCliS     := nil\n   dbfFacRecT     := nil\n   dbfFacRecL     := nil\n   dbfTikT        := nil\n   dbfTikL        := nil\n   dbfTikS        := nil\n   dbfEmp         := nil\n   dbfProLin      := nil\n   dbfProMat      := nil\n   dbfHisMov      := nil\n   dbfHisMovS     := nil\n   dbfAlbPrvL     := nil\n   dbfCliInc      := nil\n   dbfPedPrvL     := nil\n   dbfCliBnc      := nil\n\n   oStock         := nil\n   oGrpCli        := nil\n   oNewImp        := nil\n   oTrans         := nil\n   oTipArt        := nil\n   oGrpFam        := nil\n   oUndMedicion   := nil\n   oFraPub        := nil\n\n   lOpenFiles     := .f.\n\n   oWndBrw        := nil\n\n   EnableAcceso()\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION GenAlbCli( nDevice, cCaption, cCodDoc, cPrinter, nCopies )\n\n   local oDevice\n   local cAlbaran\n\n   if ( dbfAlbCliT )->( Lastrec() ) == 0\n      Return nil\n   end if\n\n   cAlbaran             := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n\n   DEFAULT nDevice      := IS_PRINTER\n   DEFAULT cCaption     := \"Imprimiendo albaranes a clientes\"\n   DEFAULT cCodDoc      := cFormatoDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount )\n   DEFAULT nCopies      := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n\n   if Empty( cCodDoc )\n      cCodDoc           := cFirstDoc( \"AC\", dbfDoc )\n   end if\n\n   if !lExisteDocumento( cCodDoc, dbfDoc )\n      return nil\n   end if\n\n   /*\n   Si el documento es de tipo visual-------------------------------------------\n   */\n\n   if lVisualDocumento( cCodDoc, dbfDoc )\n\n      PrintReportAlbCli( nDevice, nCopies, cPrinter, dbfDoc )\n\n   else\n\n      /*\n      Recalculamos el albaran\n      */\n\n      nTotAlbCli( cAlbaran, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv )\n      nPagAlbCli( cAlbaran, dbfAlbCliP, dbfDiv )\n\n      /*\n      Buscamos el primer registro\n      */\n\n      ( dbfAlbCliL )->( dbSeek( cAlbaran ) )\n      ( dbfAlbCliP )->( dbSeek( cAlbaran ) )\n\n      /*\n      Posicionamos en ficheros auxiliares\n      */\n\n      ( dbfClient)->( dbSeek( ( dbfAlbCliT )->cCodCli ) )\n      ( dbfAgent )->( dbSeek( ( dbfAlbCliT )->cCodAge ) )\n      ( dbfFPago )->( dbSeek( ( dbfAlbCliT )->cCodPago) )\n      ( dbfObrasT)->( dbSeek( ( dbfAlbCliT )->cCodCli + ( dbfAlbCliT )->cCodObr ) )\n      ( dbfDelega)->( dbSeek( ( dbfAlbCliT )->cCodDlg ) )\n\n      oTrans:oDbf:Seek( ( dbfAlbCliT )->cCodTrn )\n\n      private oInf\n      private cDbf         := dbfAlbCliT\n      private cDbfCol      := dbfAlbCliL\n      private cDbfPag      := dbfAlbCliP\n      private cCliente     := dbfClient\n      private cDbfCli      := dbfClient\n      private cDbfDiv      := dbfDiv\n      private cIva         := dbfIva\n      private cDbfIva      := dbfIva\n      private cFPago       := dbfFPago\n      private cDbfPgo      := dbfFPago\n      private cAgent       := dbfAgent\n      private cDbfAge      := dbfAgent\n      private cTvta        := dbfTvta\n      private cObras       := dbfObrasT\n      private cDbfObr      := dbfObrasT\n      private cTarPreL     := dbfTarPreL\n      private cTarPreS     := dbfTarPreS\n      private cDbfRut      := dbfRuta\n      private cDbfUsr      := dbfUsr\n      private cDbfAnt      := dbfAntCliT\n      private cDbfDlg      := dbfDelega\n      private cDbfTrn      := oTrans:GetAlias()\n      private cDbfPro      := dbfPro\n      private cDbfTblPro   := dbfTblPro\n\n      private nTotPage     := nTotLAlbCli( dbfAlbCliL )\n      private nVdvDivAlb   := nVdvDiv\n      private cPicUndAlb   := cPicUnd\n      private cPouDivAlb   := cPouDiv\n      private cPorDivAlb   := cPorDiv\n      private cPpvDivAlb   := cPpvDiv\n      private cPouEurAlb   := cPouEur\n      private nDouDivAlb   := nDouDiv\n      private nRouDivAlb   := nRouDiv\n\n      private nTotCaj      := nNumCaj\n\n      private oStk         := oStock\n\n      /*\n      Creamos el informe con la impresora seleccionada para ese informe-----------\n      */\n\n      if !Empty( cPrinter ) // .and. lPrinter\n         oDevice           := TPrinter():New( cCaption, .f., .t., cPrinter )\n         REPORT oInf CAPTION cCaption TO DEVICE oDevice\n      else\n         REPORT oInf CAPTION cCaption PREVIEW\n      end if\n\n      if !Empty( oInf ) .and. oInf:lCreated\n\n         oInf:lAutoland    := .f.\n         oInf:lFinish      := .f.\n         oInf:lNoCancel    := .t.\n         oInf:bSkip        := {|| AlbCliReportSkipper( dbfAlbCliL ) }\n\n         oInf:oDevice:lPrvModal  := .t.\n\n         do case\n            case nDevice == IS_PRINTER\n\n               oInf:oDevice:SetCopies( nCopies )\n\n               oInf:bPreview  := {| oDevice | PrintPreview( oDevice ) }\n\n            case nDevice == IS_PDF\n\n               oInf:bPreview  := {| oDevice | PrintPdf( oDevice ) }\n\n         end case\n\n         SetMargin( cCodDoc, oInf )\n         PrintColum( cCodDoc, oInf )\n\n      else\n\n         MsgStop( \"No se ha podido crear el documento \" + cCodDoc )\n\n      end if\n\n      END REPORT\n\n      if !Empty( oInf )\n\n         private oReport   := oInf\n\n         ACTIVATE REPORT oInf ;\n            WHILE       ( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cAlbaran .and. !( dbfAlbCliL )->( Eof() ) ) ;\n            FOR         ( !( dbfAlbCliL )->lImpLin ) ;\n            ON ENDPAGE  ( ePage( oInf, cCodDoc ) )\n\n            if nDevice == IS_PRINTER\n               oInf:oDevice:end()\n            end if\n\n      end if\n\n      oInf                 := nil\n\n   end if\n\n   /*\n   Funcion para marcar el documento como imprimido-----------------------------\n   */\n\n   lChgImpDoc( dbfAlbCliT )\n\nReturn nil\n\n//----------------------------------------------------------------------------//\n\nStatic Function AlbCliReportSkipper( dbfAlbCliL )\n\n   ( dbfAlbCliL )->( dbSkip() )\n\n   nTotPage              += nTotLAlbCli( dbfAlbCliL )\n\nReturn nil\n\n//----------------------------------------------------------------------------//\n\nSTATIC FUNCTION EPage( oInf, cCodDoc )\n\n	private nPagina		:= oInf:nPage\n	private lEnd			:= oInf:lFinish\n   private nRow         := oInf:nRow\n\n   PrintItems( cCodDoc, oInf )\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nFUNCTION AlbCli( oMenuItem, oWnd, hHash )\n\n   local oRpl\n   local oSnd\n   local oPrv\n   local oImp\n   local oDel\n   local oPdf\n   local oMail\n   local oDup\n   local oBtnEur\n   local nLevel\n   local oRotor\n   local lEuro          := .f.\n\n   DEFAULT  oMenuItem   := _MENUITEM_\n   DEFAULT  oWnd        := oWnd()\n\n   nLevel               := nLevelUsr( oMenuItem )\n   if nAnd( nLevel, 1 ) != 0\n      msgStop( \"Acceso no permitido.\" )\n      return .f.\n   end if\n\n   /*\n   Cerramos todas las ventanas\n   */\n\n   if oWnd != nil\n      oWnd:CloseAll()\n   end if\n\n   if !OpenFiles()\n      return .f.\n   end if\n\n   DisableAcceso()\n\n   DEFINE SHELL oWndBrw FROM 0, 0 TO 22, 80 ;\n      XBROWSE ;\n      TITLE    \"Albaranes de clientes\" ;\n      PROMPT   \"Número\",;\n               \"Fecha\",;\n               \"Código\",;\n               \"Nombre\",;\n               \"Obra\",;\n               \"Agente\",;\n               \"Su albarán\",;\n               \"Facturado\";\n      MRU      \"Document_plain_user1_16\";\n      BITMAP   clrTopArchivos ;\n      ALIAS    ( dbfAlbCliT );\n      APPEND   ( WinAppRec( oWndBrw:oBrw, bEdtRec, dbfAlbCliT, hHash ) );\n      DUPLICAT ( WinDupRec( oWndBrw:oBrw, bEdtRec, dbfAlbCliT, hHash ) );\n      EDIT     ( WinEdtRec( oWndBrw:oBrw, bEdtRec, dbfAlbCliT, hHash ) );\n      ZOOM     ( WinZooRec( oWndBrw:oBrw, bEdtRec, dbfAlbCliT ) );\n      DELETE   ( WinDelRec( oWndBrw:oBrw, dbfAlbCliT, {|| QuiAlbCli() } ) ) ;\n      LEVEL    nLevel ;\n      OF       oWnd\n\n      oWndBrw:lFechado     := .t.\n\n	  oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Sesión cerrada\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfAlbCliT )->lCloAlb }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Zoom16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Facturado\"\n         :nHeadBmpNo       := 3\n         :cSortOrder       := \"lFacturado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfAlbCliT )->lFacturado }\n         :nWidth           := 20\n         :SetCheck( { \"Bullet_Square_Green_16\", \"Bullet_Square_Red_16\" } )\n         :AddResource( \"trafficlight_on_16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Envio\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfAlbCliT )->lSndDoc }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"Lbl16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Entregado\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfAlbCliT )->lEntregado }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"hand_paper_16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Incidencia\"\n         :nHeadBmpNo       := 4\n         :bStrData         := {|| \"\" }\n         :bBmpData         := {|| nEstadoIncidencia( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) }\n         :nWidth           := 20\n         :lHide            := .t.\n         :AddResource( \"Bullet_Square_Red_16\" )\n         :AddResource( \"Bullet_Square_Yellow_16\" )\n         :AddResource( \"Bullet_Square_Green_16\" )\n         :AddResource( \"informacion_16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Impreso\"\n         :nHeadBmpNo       := 3\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( dbfAlbCliT )->lImprimido }\n         :nWidth           := 20\n         :lHide            := .t.\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n         :AddResource( \"IMP16\" )\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Tipo\"\n         :bEditValue       := {|| aTipAlb[ if( ( dbfAlbCliT )->lAlquiler, 2, 1 ) ] }\n         :nWidth           := 50\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := \"nNumAlb\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Delegación\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cSufAlb }\n         :nWidth           := 40\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Sesión\"\n         :bEditValue       := {|| Trans( ( dbfAlbCliT )->cTurAlb, \"######\" ) }\n         :nWidth           := 40\n         :lHide            := .t.\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oWndBrw:AddXCol() )   \n         :cHeader          := \"Fecha\"\n         :cSortOrder       := \"dFecAlb\"\n         :bEditValue       := {|| Dtoc( ( dbfAlbCliT )->dFecAlb ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Caja\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodCaj }\n         :nWidth           := 40\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Usuario\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodUsr }\n         :nWidth           := 40\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Código\"\n         :cSortOrder       := \"cCodCli\"\n         :bEditValue       := {|| AllTrim( ( dbfAlbCliT )->cCodCli ) }\n         :nWidth           := 70\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Nombre\"\n         :cSortOrder       := \"cNomCli\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cNomCli }\n         :nWidth           := 180\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Su albarán\"\n         :cSortOrder       := \"cCodSuAlb\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodSuAlb }\n         :nWidth           := 40\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Agente\"\n         :cSortOrder       := \"cCodAge\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodAge }\n         :nWidth           := 50\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Ruta\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodRut }\n         :nWidth           := 40\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Almacén\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodAlm }\n         :nWidth           := 60\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Obra\"\n         :cSortOrder       := \"cObra\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cCodObr }\n         :nWidth           := 40\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Su pedido\"\n         :cSortOrder       := \"cSuPed\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cSuPed }\n         :nWidth           := 60\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }\n         :lHide            := .t.\n      end with\n\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Base\"\n         :bEditValue       := {|| ( dbfAlbCliT )->nTotNet }\n         :cEditPicture     := cPorDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := cImp()\n         :bEditValue       := {|| ( dbfAlbCliT )->nTotIva }\n         :cEditPicture     := cPorDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"R.E.\"\n         :bEditValue       := {|| ( dbfAlbCliT )->nTotReq }\n         :cEditPicture     := cPorDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Total\"\n         :bEditValue       := {|| ( dbfAlbCliT )->nTotAlb }\n         :cEditPicture     := cPorDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Div.\"\n         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( dbfAlbCliT )->cDivAlb ), dbfDiv ) }\n         :nWidth           := 30\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Entregado\"\n         :bEditValue       := {|| ( dbfAlbCliT )->nTotPag }\n         :cEditPicture     := cPorDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      with object ( oWndBrw:AddXCol() )\n         :cHeader          := \"Total und.\"\n         :bEditValue       := {|| nTotalUnd( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliL, MasUnd() ) }\n         :nWidth           := 95\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :lHide            := .t.\n      end with\n\n      oWndBrw:CreateXFromCode()\n\n   DEFINE BTNSHELL RESOURCE \"BUS\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:SearchSetFocus() ) ;\n      TOOLTIP  \"(B)uscar\";\n      HOTKEY   \"B\"\n\n   oWndBrw:AddSeaBar()\n\n   DEFINE BTNSHELL RESOURCE \"NEW\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecAdd() );\n      ON DROP  ( oWndBrw:RecDup() );\n      TOOLTIP  \"(A)ñadir\";\n      HOTKEY   \"A\";\n      BEGIN GROUP ;\n      LEVEL    ACC_APPD\n\n   DEFINE BTNSHELL oDup RESOURCE \"DUP\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecDup() );\n      MENU     This:Toggle() ;\n      TOOLTIP  \"(D)uplicar\";\n      HOTKEY   \"D\";\n      LEVEL    ACC_APPD\n\n#ifdef __HARBOUR__\n\n      DEFINE BTNSHELL RESOURCE \"Dup\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( DupSerie( oWndBrw ) );\n         TOOLTIP  \"Series\" ;\n         FROM     oDup ;\n         CLOSED ;\n         LEVEL    ACC_APPD\n\n#endif\n\n   DEFINE BTNSHELL RESOURCE \"EDIT\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecEdit() );\n      TOOLTIP  \"(M)odificar\";\n      HOTKEY   \"M\" ;\n      MRU;\n      LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL RESOURCE \"ZOOM\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oWndBrw:RecZoom() );\n      TOOLTIP  \"(Z)oom\";\n      HOTKEY   \"Z\" ;\n      MRU;\n      LEVEL    ACC_ZOOM\n\n   DEFINE BTNSHELL oDel RESOURCE \"DEL\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( WinDelRec( oWndBrw:oBrw, dbfAlbCliT, {|| QuiAlbCli() } ) );\n      TOOLTIP  \"(E)liminar\";\n      HOTKEY   \"E\";\n      LEVEL    ACC_DELE\n\n      /*DEFINE BTNSHELL RESOURCE \"DEL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( AlbRecDel( .t., .f. ) );\n         TOOLTIP  \"Solo cabecera\" ;\n         FROM     oDel ;\n         CLOSED ;\n         LEVEL    ACC_DELE\n\n      DEFINE BTNSHELL RESOURCE \"DEL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( AlbRecDel( .f., .t. ) );\n         TOOLTIP  \"Solo detalle\" ;\n         FROM     oDel ;\n         CLOSED ;\n         LEVEL    ACC_DELE*/\n\n      DEFINE BTNSHELL RESOURCE \"DEL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( DelSerie( oWndBrw ) );\n         TOOLTIP  \"Series\" ;\n         FROM     oDel ;\n         CLOSED ;\n         LEVEL    ACC_DELE\n\n   DEFINE BTNSHELL oImp RESOURCE \"IMP\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenAlbCli( IS_PRINTER ), oWndBrw:Refresh() ) ;\n      TOOLTIP  \"(I)mprimir\";\n      HOTKEY   \"I\";\n      LEVEL    ACC_IMPR\n\n      lGenAlbCli( oWndBrw:oBrw, oImp, IS_PRINTER ) ;\n\n   DEFINE BTNSHELL RESOURCE \"SERIE1\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( PrnSerie(), oWndBrw:Refresh() ) ;\n      TOOLTIP  \"Imp(r)imir series\";\n      HOTKEY   \"R\";\n      LEVEL    ACC_IMPR\n\n   DEFINE BTNSHELL oPrv RESOURCE \"Prev1\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenAlbCli( IS_SCREEN ), oWndBrw:Refresh() ) ;\n      TOOLTIP  \"(P)revisualizar\";\n      HOTKEY   \"P\";\n      LEVEL    ACC_IMPR\n\n      lGenAlbCli( oWndBrw:oBrw, oPrv, IS_SCREEN ) ;\n\n   DEFINE BTNSHELL oPdf RESOURCE \"DOCLOCK\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenAlbCli( IS_PDF ) ) ;\n      TOOLTIP  \"Pd(f)\";\n      HOTKEY   \"F\";\n      LEVEL    ACC_IMPR\n\n      lGenAlbCli( oWndBrw:oBrw, oPdf, IS_PDF ) ;\n\n   DEFINE BTNSHELL oMail RESOURCE \"Mail\" OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      ACTION   ( GenAlbCli( IS_MAIL ) ) ;\n      TOOLTIP  \"Correo electrónico\";\n      LEVEL    ACC_IMPR\n\n      lGenAlbCli( oWndBrw:oBrw, oMail, IS_MAIL ) ;\n\n   DEFINE BTNSHELL RESOURCE \"Money2_\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( If( !( dbfAlbCliT )->lFacturado, WinAppRec( oWndBrw:oBrw, bEdtPgo, dbfAlbCliP ), MsgStop( \"El albarán ya fue facturado.\" ) ) );\n      TOOLTIP  \"Entregas a (c)uenta\" ;\n      HOTKEY   \"C\";\n      LEVEL    ACC_APPD\n\n   if oUser():lAdministrador()\n\n      DEFINE BTNSHELL RESOURCE \"GENFAC\" GROUP OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( GenFCli( oWndBrw:oBrw, dbfAlbCliT, dbfAlbCliL, dbfAlbCliP, dbfAlbCliS, dbfClient, dbfCliAtp, dbfIva, dbfDiv, dbfFPago, dbfUsr, dbfCount, oGrpCli, oStock ) );\n         TOOLTIP  \"(G)enerar facturas\";\n         HOTKEY   \"G\";\n         LEVEL    ACC_APPD\n\n      DEFINE BTNSHELL RESOURCE \"CHGSTATE\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( if( ApoloMsgNoYes(  \"¿ Está seguro de cambiar el estado del documento ?\", \"Elija una opción\" ), SetFacturadoAlbaranCliente( !( dbfAlbCliT )->lFacturado, oWndBrw:oBrw ), ) ) ;\n         TOOLTIP  \"Cambiar Es(t)ado\" ;\n         HOTKEY   \"T\";\n         LEVEL    ACC_EDIT\n\n   end if\n\n   DEFINE BTNSHELL RESOURCE \"Sel\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( SelSend( oWndBrw:oBrw ) ) ;\n      TOOLTIP  \"Entregad(o)\" ;\n      HOTKEY   \"O\";\n      LEVEL    ACC_APPD\n\n   DEFINE BTNSHELL oSnd RESOURCE \"LBL\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      MENU     This:Toggle() ;\n      TOOLTIP  \"En(v)iar\" ;\n      MESSAGE  \"Seleccionar albaranes para ser enviados\" ;\n      ACTION   lSnd( oWndBrw, dbfAlbCliT ) ;\n      HOTKEY   \"V\";\n      LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfAlbCliT, \"lSndDoc\", .t., .t., .t. ) );\n         TOOLTIP  \"Todos\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfAlbCliT, \"lSndDoc\", .f., .t., .t. ) );\n         TOOLTIP  \"Ninguno\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n      DEFINE BTNSHELL RESOURCE \"LBL\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( lSelectAll( oWndBrw, dbfAlbCliT, \"lSndDoc\", .t., .f., .t. ) );\n         TOOLTIP  \"Abajo\" ;\n         FROM     oSnd ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL oBtnEur RESOURCE \"BAL_EURO\" OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( lEuro := !lEuro, oWndBrw:Refresh() ) ;\n      TOOLTIP  \"M(o)neda\";\n      HOTKEY   \"O\"\n\n   if oUser():lAdministrador()\n\n      DEFINE BTNSHELL oRpl RESOURCE \"BMPCHG\" GROUP OF oWndBrw ;\n         NOBORDER ;\n         MENU     This:Toggle() ;\n         ACTION   ( TDlgFlt():New( aItmAlbCli(), dbfAlbCliT ):ChgFields(), oWndBrw:Refresh() ) ;\n         TOOLTIP  \"Cambiar campos\" ;\n         LEVEL    ACC_EDIT\n\n         DEFINE BTNSHELL RESOURCE \"BMPCHG\" OF oWndBrw ;\n            ACTION   ( TDlgFlt():New( aColAlbCli(), dbfAlbCliL ):ChgFields(), oWndBrw:Refresh() ) ;\n            TOOLTIP  \"Líneas\" ;\n            FROM     oRpl ;\n            CLOSED ;\n            LEVEL    ACC_EDIT\n\n    end if\n\n   DEFINE BTNSHELL RESOURCE \"INFO\" GROUP OF oWndBrw ;\n      ACTION   ( TTrazaDocumento():Activate( ALB_CLI, ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) ) ;\n      TOOLTIP  \"I(n)forme documento\" ;\n      HOTKEY   \"N\" ;\n      LEVEL    ACC_EDIT\n\n   DEFINE BTNSHELL oRotor RESOURCE \"ROTOR\" GROUP OF oWndBrw ;\n      NOBORDER ;\n      ACTION   ( oRotor:Expand() ) ;\n      TOOLTIP  \"Rotor\" ;\n\n      DEFINE BTNSHELL RESOURCE \"USER1_\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( EdtCli( ( dbfAlbCliT )->cCodCli ) );\n         TOOLTIP  \"Modificar cliente\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"INFO\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( InfCliente( ( dbfAlbCliT )->cCodCli ) );\n         TOOLTIP  \"Informe de cliente\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"WORKER\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( EdtObras( ( dbfAlbCliT )->cCodCli, ( dbfAlbCliT )->cCodObr, dbfObrasT ) );\n         TOOLTIP  \"Modificar obra\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"CLIPBOARD_EMPTY_USER1_\" OF oWndBrw ;\n         ACTION   ( if( !Empty( ( dbfAlbCliT )->cNumPed ), ZooPedCli( ( dbfAlbCliT )->cNumPed ), MsgStop( \"El albarán no procede de un pedido\" ) ) );\n         TOOLTIP  \"Visualizar pedido\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_USER1_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( if( !( dbfAlbCliT )->lFacturado, FactCli( nil, nil, { \"Albaran\" => ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } ), MsgStop( \"Albarán facturado\" ) ) );\n         TOOLTIP  \"Generar factura\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_USER1_\" OF oWndBrw ;\n         ACTION   ( if( !Empty( ( dbfAlbCliT )->cNumFac ), EdtFacCli( ( dbfAlbCliT )->cNumFac ), msgStop( \"No hay factura asociada\" ) ) );\n         TOOLTIP  \"Modificar factura\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT_MONEY2_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( FacAntCli( nil, nil, ( dbfAlbCliT )->cCodCli ) );\n         TOOLTIP  \"Generar anticipo\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"Note_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( AlbCliNotas() );\n         TOOLTIP  \"Generar nota de agenda\" ;\n         FROM     oRotor ;\n\n      DEFINE BTNSHELL RESOURCE \"CASHIER_USER1_\" OF oWndBrw ;\n         ALLOW    EXIT ;\n         ACTION   ( if( !( dbfAlbCliT )->lFacturado .and. Empty( ( dbfAlbCliT )->cNumTik ), FrontTpv( nil, nil, nil, nil, .f., .f., { nil, nil, ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } ), MsgStop( \"Albarán facturado o convertido a ticket\" ) ) );\n         TOOLTIP  \"Convertir a ticket\" ;\n         FROM     oRotor ;\n\n   DEFINE BTNSHELL RESOURCE \"END\" GROUP OF oWndBrw;\n      NOBORDER ;\n      ACTION   ( oWndBrw:End() ) ;\n      TOOLTIP  \"(S)alir\" ;\n      HOTKEY   \"S\"\n\n      /*\n      Datos para el filtro-----------------------------------------------------\n      */\n\n   if !oUser():lFiltroVentas()\n      oWndBrw:oActiveFilter:aTField       := aItmAlbCli()\n      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt\n      oWndBrw:oActiveFilter:cTipFilter    := ALB_CLI\n   end if\n\n   ACTIVATE WINDOW oWndBrw VALID ( CloseFiles() )\n\n   EnableAcceso()\n\n   if !Empty( hHash ) \n\n      if !Empty( oWndBrw )\n         oWndBrw:RecAdd()\n      end if\n\n      hHash    := nil\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION EdtRec( aTmp, aGet, dbfAlbCliT, oBrw, hHash, bValid, nMode )\n\n	local oDlg\n	local oFld\n   local nOrd\n   local cEstAlb\n   local oSay        := Array( 11 )\n   local cSay        := Array( 11 )\n   local oSayLabels  := Array( 10 )\n   local oBmpDiv\n   local oBmpEmp\n   local oRieCli\n   local nRieCli\n   local oTlfCli\n   local cTlfCli\n   local oBrwPgo\n   local lWhen       := if( oUser():lAdministrador(), nMode != ZOOM_MODE, if( nMode == EDIT_MODE, !aTmp[ _LCLOALB ], nMode != ZOOM_MODE ) )\n   local oSayGetRnt\n   local cTipAlb\n   local oSayDias\n   local oSayTxtDias\n   local oBmpGeneral\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios----------------\n   */\n\n   cOldCodCli                 := aTmp[ _CCODCLI ]\n\n   do case\n      case nMode == APPD_MODE\n\n         if !lCurSesion()\n            MsgStop( \"No hay sesiones activas, imposible añadir documentos\" )\n            Return .f.\n         end if\n\n         if !lCajaOpen( oUser():cCaja() ) .and. !oUser():lAdministrador()\n            msgStop( \"Esta caja \" + oUser():cCaja() + \" esta cerrada.\" )\n            Return .f.\n         end if\n\n         aTmp[ _CTURALB   ]   := cCurSesion()\n         aTmp[ _CCODALM   ]   := oUser():cAlmacen()\n         aTmp[ _CDIVALB   ]   := cDivEmp()\n         aTmp[ _CCODPAGO  ]   := cDefFpg()\n         aTmp[ _CCODCAJ   ]   := oUser():cCaja()\n         aTmp[ _CCODUSR   ]   := cCurUsr()\n         aTmp[ _NVDVALB   ]   := nChgDiv( aTmp[ _CDIVALB ], dbfDiv )\n         aTmp[ _LFACTURADO]   := .f.\n         aTmp[ _LSNDDOC   ]   := .t.\n         aTmp[ _CSUFALB   ]   := RetSufEmp()\n         aTmp[ _CSERALB   ]   := cNewSer( \"NALBCLI\", dbfCount )\n         aTmp[ _DFECENV   ]   := Ctod( \"\" )\n         aTmp[ _DFECIMP   ]   := Ctod( \"\" )\n         aTmp[ _CCODDLG   ]   := oUser():cDelegacion()\n         aTmp[ _LIVAINC   ]   := uFieldEmpresa( \"lIvaInc\" )\n         aTmp[ _NIVAMAN   ]   := nIva( dbfIva, cDefIva() )\n         aTmp[ _CMANOBR   ]   := Padr( \"Gastos\", 250 )\n\n      case nMode == DUPL_MODE\n\n         if !lCurSesion()\n            MsgStop( \"No hay sesiones activas, imposible añadir documentos\" )\n            Return .f.\n         end if\n\n         if !lCajaOpen( oUser():cCaja() ) .and. !oUser():lAdministrador()\n            msgStop( \"Esta caja \" + oUser():cCaja() + \" esta cerrada.\" )\n            Return .f.\n         end if\n\n         aTmp[ _DFECALB   ]   := GetSysDate()\n         aTmp[ _CTURALB   ]   := cCurSesion()\n         aTmp[ _CCODCAJ   ]   := oUser():cCaja()\n         aTmp[ _LFACTURADO]   := .f.\n         aTmp[ _LSNDDOC   ]   := .t.\n         aTmp[ _CNUMPED   ]   := \"\"\n         aTmp[ _LCLOALB   ]   := .f.\n\n      case nMode == EDIT_MODE\n\n         if aTmp[ _LCLOALB ] .and. !oUser():lAdministrador()\n            MsgStop( \"El albarán está cerrado.\" )\n            Return .f.\n         end if\n\n         if aTmp[ _LFACTURADO ]\n            MsgStop( \"El albarán ya fue facturado.\" )\n            return .t.\n         end if\n\n   end case\n\n   if Empty( aTmp[ _CSERALB ] )\n      aTmp[ _CSERALB ]        := cDefSer()\n   end if\n\n   if Empty( aTmp[ _NTARIFA ] )\n      aTmp[ _NTARIFA ]        := Max( uFieldEmpresa( \"nPreVta\" ), 1 )\n   end if\n\n   if Empty( aTmp[ _CDTOESP ] )\n      aTmp[ _CDTOESP ]        := Padr( \"General\", 50 )\n   end if\n\n   if Empty( aTmp[ _CDPP ] )\n      aTmp[ _CDPP ]           := Padr( \"Pronto pago\", 50 )\n   end if\n\n   /*\n   tipo de presupuesto---------------------------------------------------------\n   */\n\n   cTipAlb                    := aTipAlb[ if( aTmp[ _LALQUILER ], 2, 1  ) ]\n\n   /*\n   Comineza la transaccion-----------------------------------------------------\n   */\n\n   if BeginTrans( aTmp, nMode )\n      Return .f.\n   end if\n\n   /*\n   Mostramos datos de clientes-------------------------------------------------\n   */\n\n   nRieCli                    := oStock:nRiesgo( aTmp[ _CCODCLI ] )\n\n   if Empty( aTmp[ _CTLFCLI ] )\n      aTmp[ _CTLFCLI ]        := RetFld( aTmp[ _CCODCLI ], dbfClient, \"Telefono\" )\n   end if\n\n   nOrd                       := ( dbfAlbCliT )->( ordSetFocus( \"nNumAlb\" ) )\n\n   oFont                      := TFont():New( \"Arial\", 8, 26, .f., .t. )\n\n   cPicUnd                    := MasUnd()                            // Picture de las unidades\n   cPouDiv                    := cPouDiv( aTmp[ _CDIVALB ], dbfDiv ) // Picture de la divisa\n   cPorDiv                    := cPorDiv( aTmp[ _CDIVALB ], dbfDiv ) // Picture de la divisa redondeada\n   cPpvDiv                    := cPpvDiv( aTmp[ _CDIVALB ], dbfDiv ) // Picture del punto verde\n   nDouDiv                    := nDouDiv( aTmp[ _CDIVALB ], dbfDiv ) // Numero de decimales de la divisa\n   nDorDiv                    := nRouDiv( aTmp[ _CDIVALB ], dbfDiv ) // Numero de decimales de la divisa\n   nDpvDiv                    := nDpvDiv( aTmp[ _CDIVALB ], dbfDiv ) // Decimales de redondeo del punto verde\n\n   if aTmp[ _LFACTURADO ]\n      cEstAlb                 := \"Facturado\"\n   else\n      cEstAlb                 := \"Pendiente\"\n   end if\n\n   /*\n   Etiquetas-------------------------------------------------------------------\n   */\n\n   cSay[ 2 ]                  := RetFld( aTmp[ _CCODALM ], dbfAlm )\n   cSay[ 3 ]                  := RetFld( aTmp[ _CCODPAGO], dbfFPago )\n   cSay[ 4 ]                  := RetFld( aTmp[ _CCODAGE ], dbfAgent )\n   cSay[ 5 ]                  := RetFld( aTmp[ _CCODTAR ], dbfTarPreS )\n   cSay[ 6 ]                  := RetFld( aTmp[ _CCODCLI ] + aTmp[ _CCODOBR ], dbfObrasT, \"cNomObr\" )\n   cSay[ 7 ]                  := RetFld( aTmp[ _CCODRUT ], dbfRuta )\n   cSay[ 8 ]                  := oTrans:cNombre( aTmp[ _CCODTRN ] )\n   cSay[ 9 ]                  := RetFld( aTmp[ _CCODCAJ ], dbfCajT )\n   cSay[ 10]                  := RetFld( aTmp[ _CCODUSR ], dbfUsr, \"cNbrUse\" )\n   cSay[ 11]                  := RetFld( cCodEmp() + aTmp[ _CCODDLG ], dbfDelega, \"cNomDlg\" )\n\n   /*\n   Inicializamos el valor de la tarifa por si cambian--------------------------\n   */\n\n   InitTarifaCabecera( aTmp[ _NTARIFA ] )\n\n   /*\n   Comienza el dialogo---------------------------------------------------------\n   */\n\n   DEFINE DIALOG oDlg RESOURCE \"PEDCLI\" TITLE LblTitle( nMode ) + \"albaranes a clientes\"\n\n      REDEFINE FOLDER oFld ID 200 OF oDlg ;\n         PROMPT   \"Albará&n\", \"Da&tos\",   \"&Incidencias\", \"D&ocumentos\" ;\n         DIALOGS  \"ALBCLI_1\", \"ALBCLI_2\", \"PEDCLI_3\",     \"PEDCLI_4\"\n\n      /*\n      Codigo de Cliente________________________________________________________\n      */\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"albaran_cliente_48_alpha\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[1]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"folder2_red_alpha_48\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[2]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"information_48_alpha\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[3]\n\n      REDEFINE BITMAP oBmpGeneral ;\n        ID       990 ;\n        RESOURCE \"address_book2_alpha_48\" ;\n        TRANSPARENT ;\n        OF       oFld:aDialogs[4]\n\n      REDEFINE GET aGet[ _CCODCLI ] VAR aTmp[ _CCODCLI ] ;\n         ID       170 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( LoaCli( aGet, aTmp, nMode, oRieCli ), RecalculaTotal( aTmp ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwClient( aGet[ _CCODCLI ], aGet[ _CNOMCLI ] ) );\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CNOMCLI] VAR aTmp[_CNOMCLI] ;\n         ID       171 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CDNICLI] VAR aTmp[_CDNICLI] ;\n         ID       101 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDIRCLI ] VAR aTmp[ _CDIRCLI ] ;\n         ID       102 ;\n         BITMAP   \"Environnment_View_16\" ;\n         ON HELP  GoogleMaps( aTmp[ _CDIRCLI ], Rtrim( aTmp[ _CPOBCLI ] ) + Space( 1 ) + Rtrim( aTmp[ _CPRVCLI ] ) ) ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOBCLI ] VAR aTmp[ _CPOBCLI ] ;\n         ID       103 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPRVCLI ] VAR aTmp[ _CPRVCLI ] ;\n         ID       104 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPOSCLI ] VAR aTmp[ _CPOSCLI ] ;\n         ID       107 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NTARIFA ] VAR aTmp[ _NTARIFA ];\n         ID       172 ;\n         SPINNER ;\n         MIN      1 ;\n         MAX      6 ;\n         PICTURE  \"9\" ;\n         VALID    ( ChangeTarifaCabecera( aTmp[ _NTARIFA ], dbfTmpLin, oBrwLin ) ) ;\n         WHEN     ( nMode != ZOOM_MODE .and. ( lUsrMaster() .or. oUser():lCambiarPrecio() ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oRieCli VAR nRieCli;\n         ID       173 ;\n         WHEN     ( nMode != ZOOM_MODE );\n         PICTURE  cPorDiv ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CTLFCLI ] VAR aTmp[ _CTLFCLI ] ;\n         ID       106 ;\n         WHEN     ( lWhen .and. ( !aTmp[ _LMODCLI ] .or. oUser():lAdministrador() ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCODUSR ] VAR aTmp[ _CCODUSR ];\n         ID       125 ;\n         WHEN     ( .f. ) ;\n         VALID    ( SetUsuario( aGet[ _CCODUSR ], oSay[ 10 ], nil, dbfUsr ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 10 ] VAR cSay[ 10 ] ;\n         ID       126 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Codigo de Tarifa_______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODTAR ] VAR aTmp[ _CCODTAR ] ;\n			ID 		180 ;\n         WHEN     ( lWhen .and. oUser():lAdministrador() ) ;\n         VALID    ( cTarifa( aGet[ _CCODTAR ], oSay[ 5 ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwTarifa( aGet[ _CCODTAR ], oSay[ 5 ] ) ) ;\n			COLOR 	CLR_GET ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 5 ] VAR cSay[ 5 ] ;\n			WHEN 		.F. ;\n			ID 		181 ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      Codigo de Obra_________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODOBR ] VAR aTmp[ _CCODOBR ] ;\n			ID 		190 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cObras( aGet[ _CCODOBR ], oSay[ 6 ], aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwObras( aGet[ _CCODOBR ], oSay[ 6 ], aTmp[ _CCODCLI ], dbfObrasT ) ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 6 ] VAR cSay[ 6 ] ;\n			WHEN 		.F. ;\n			ID 		191 ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      Codigo de Almacen______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODALM ] VAR aTmp[ _CCODALM ] ;\n         ID       200 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cAlmacen( aGet[ _CCODALM ], , oSay[ 2 ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAlmacen( aGet[ _CCODALM ], oSay[ 2 ] ) ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 2 ] VAR cSay[ 2 ] ;\n         ID       201 ;\n         WHEN     ( lWhen ) ;\n         BITMAP   \"Bot\" ;\n         ON HELP  ( ExpAlmacen( aTmp[ _CCODALM ], dbfTmpLin, oBrwLin ) ) ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      Formas de pago___________________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODPAGO ] VAR aTmp[ _CCODPAGO ] ;\n         ID       210 ;\n         WHEN     ( lWhen .and. oUser():lAdministrador() ) ;\n			PICTURE  \"@!\" ;\n         VALID    ( cFPago( aGet[ _CCODPAGO ], dbfFPago, oSay[ 3 ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwFPago( aGet[ _CCODPAGO ], oSay[ 3 ] ) ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 3 ] VAR cSay[ 3 ] ;\n         ID       211 ;\n			WHEN 		.F. ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      Banco del cliente--------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CBANCO ] VAR aTmp[ _CBANCO ];\n         ID       410 ;\n         WHEN     ( lWhen );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwBncCli( aGet[ _CBANCO ], aGet[ _CENTBNC ], aGet[ _CSUCBNC ], aGet[ _CDIGBNC ], aGet[ _CCTABNC ], aTmp[ _CCODCLI ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CENTBNC ] VAR aTmp[ _CENTBNC ];\n         ID       420 ;\n         WHEN     ( lWhen );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CSUCBNC ] VAR aTmp[ _CSUCBNC ];\n         ID       421 ;\n         WHEN     ( lWhen );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CDIGBNC ] VAR aTmp[ _CDIGBNC ];\n         ID       422 ;\n         WHEN     ( lWhen );\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CCTABNC ] VAR aTmp[ _CCTABNC ];\n         ID       423 ;\n         WHEN     ( lWhen );\n         PICTURE  \"9999999999\" ;\n         VALID    ( lCalcDC( aTmp[ _CENTBNC ], aTmp[ _CSUCBNC ], aTmp[ _CDIGBNC ], aTmp[ _CCTABNC ], aGet[ _CDIGBNC ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de Agente_______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CCODAGE ] VAR aTmp[ _CCODAGE ] ;\n         ID       220 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cAgentes( aGet[_CCODAGE], dbfAgent, oSay[ 4 ], aGet[ _NPCTCOMAGE ], dbfAgeCom ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAgentes( aGet[_CCODAGE], oSay[ 4 ] ) ) ;\n			COLOR 	CLR_GET ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 4 ] VAR cSay[ 4 ] ;\n         ID       221 ;\n         WHEN     ( !Empty( aTmp[ _CCODAGE ] ) .AND. lWhen ) ;\n         BITMAP   \"Bot\" ;\n         ON HELP  ( ExpAgente( aTmp[ _CCODAGE ], aTmp[ _NPCTCOMAGE ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NPCTCOMAGE ] VAR aTmp[ _NPCTCOMAGE ] ;\n         WHEN     ( !Empty( aTmp[ _CCODAGE ] ) .AND. lWhen ) ;\n         PICTURE  \"@E 999.99\" ;\n         SPINNER;\n         ID       222 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET oGetAge VAR nTotAge ;\n         ID       223 ;\n         WHEN     ( .f. );\n			OF 		oFld:aDialogs[1]\n\n      /*\n		Ruta____________________________________________________________________\n		*/\n\n		REDEFINE GET aGet[ _CCODRUT ] VAR aTmp[ _CCODRUT ] ;\n         ID       225 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( cRuta( aGet[ _CCODRUT ], dbfRuta, oSay[ 7 ] ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwRuta( aGet[ _CCODRUT ], dbfRuta, oSay[ 7 ] ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 7 ] VAR cSay[ 7 ] ;\n         ID       226 ;\n			WHEN 		.F. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSay[ 9 ] VAR cSay[ 9 ] ;\n         ID       166 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Codigo de Divisas______________________________________________________________\n      */\n\n      REDEFINE GET aGet[ _CDIVALB ] VAR aTmp[ _CDIVALB ];\n         WHEN     ( nMode == APPD_MODE .AND. ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         VALID    ( cDivOut( aGet[ _CDIVALB ], oBmpDiv, aTmp[ _NVDVALB ], @cPouDiv, @nDouDiv, @cPorDiv, @nDorDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, dbfDiv, oBandera ) );\n         PICTURE  \"@!\";\n         ID       230 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  BrwDiv( aGet[ _CDIVALB ], oBmpDiv, aTmp[ _NVDVALB ], dbfDiv, oBandera ) ;\n			OF 		oFld:aDialogs[1]\n\n		REDEFINE BITMAP oBmpDiv ;\n         RESOURCE ( cBmpDiv( aTmp[ _CDIVALB ], dbfDiv ) ) ;\n         ID       231;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      REDEFINE GET aGet[ _NVDVALB ] VAR aTmp[ _NVDVALB ];\n			WHEN		( .F. ) ;\n         ID       232 ;\n         VALID    ( aTmp[ _NVDVALB ] > 0 ) ;\n			PICTURE	\"@E 999,999.9999\" ;\n			COLOR 	CLR_GET ;\n			OF 		oFld:aDialogs[1]\n\n      Bitmap________________________________________________________________\n		*/\n\n      REDEFINE BITMAP oBmpEmp ;\n         FILE     \"Bmp\\ImgAlbCli.bmp\" ;\n         ID       500 ;\n         OF       oDlg\n\n      /*\n      Detalle------------------------------------------------------------------\n      */\n\n      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )\n\n      oBrwLin:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwLin:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n      oBrwLin:bClrStd         := {|| { if( ( dbfTmpLin )->lKitChl, CLR_GRAY, CLR_BLACK ), GetSysColor( COLOR_WINDOW ) } }\n\n      oBrwLin:cAlias          := dbfTmpLin\n\n      oBrwLin:nMarqueeStyle   := 6\n      oBrwLin:cName           := \"Albaran de cliente.Detalle\"\n\n      oBrwLin:CreateFromResource( 240 )\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Oferta\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }\n         :nWidth              := 60\n         :SetCheck( { \"Star_Red_16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Número\"\n         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }\n         :cEditPicture        := \"9999\"\n         :nWidth              := 65\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Código\"\n         :bEditValue          := {|| ( dbfTmpLin )->cRef }\n         :nWidth              := 70\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"C. Barras\"\n         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }\n         :nWidth              := 100\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Descripción\"\n         :bEditValue          := {|| Descrip( dbfTmpLin ) }\n         :nWidth              := 260\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Código proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cCodPrv ) }\n         :nWidth              := 50\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Nombre proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cNomPrv ) }\n         :nWidth              := 150\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Referencia proveedor\"\n         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cRefPrv ) }\n         :nWidth              := 50\n         :lHide               := !( IsMuebles() )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Prop. 1\"\n         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }\n         :nWidth              := 40\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Prop. 2\"\n         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }\n         :nWidth              := 40\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Lote\"\n         :bEditValue          := {|| ( dbfTmpLin )->cLote }\n         :nWidth              := 60\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Caducidad\"\n         :bEditValue          := {|| Dtoc( ( dbfTmpLin )->dFecCad ) }\n         :nWidth              := 60\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := cNombreCajas()\n         :bEditValue          := {|| ( dbfTmpLin )->nCanEnt }\n         :cEditPicture        := MasUnd()\n         :nWidth              := 60\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := cNombreUnidades()\n         :bEditValue          := {|| nTotNAlbCli( dbfTmpLin ) }\n         :cEditPicture        := cPicUnd\n         :nWidth              := 60\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"UM. Unidad de medición\"\n         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }\n         :nWidth              := 25\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Alm.\"\n         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }\n         :nWidth              := 35\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Precio\"\n         :bEditValue          := {|| nTotUAlbCli( dbfTmpLin, nDouDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 80\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Dto.\"\n         :bEditValue          := {|| ( dbfTmpLin )->nDto }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 60\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Dto. Lin.\"\n         :bEditValue          := {|| nDtoUAlbCli( dbfTmpLin, nDouDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 50\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Prm.\"\n         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 40\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% Age\"\n         :bEditValue          := {|| ( dbfTmpLin )->nComAge }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 40\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"% \" + cImp()\n         :bEditValue          := {|| ( dbfTmpLin )->nIva }\n         :cEditPicture        := \"@E 999.99\"\n         :nWidth              := 50\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Portes\"\n         :bEditValue          := {|| nTrnUAlbCli( dbfTmpLin, nRouDiv ) }\n         :cEditPicture        := cPouDiv\n         :nWidth              := 70\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"P. verde\"\n         :bEditValue          := {|| nPntUAlbCli( dbfTmpLin, nDpvDiv ) }\n         :cEditPicture        := cPpvDiv\n         :nWidth              := 70\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader             := \"Total\"\n         :bEditValue          := {|| nTotLAlbCli( dbfTmpLin, nDouDiv, nRouDiv, nil, .t., aTmp[ _LOPERPV ], .t. ) }\n         :cEditPicture        := cPorDiv\n         :nWidth              := 102\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      if nMode != ZOOM_MODE\n         oBrwLin:bLDblClick   := {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) }\n      end if\n\n		/*\n		Cajas para el desglose\n		*/\n\n      REDEFINE GET aGet[ _CDTOESP ] VAR aTmp[ _CDTOESP ] ;\n         ID       249 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTOESP ] VAR aTmp[ _NDTOESP ] ;\n         ID       250 ;\n         PICTURE  \"@E 999.99\" ;\n         SPINNER ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) ) ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE BUTTON oSayLabels[ 2 ] ;\n         ID       248 ;\n         OF       oFld:aDialogs[ 1 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( aGet[ _NDTOESP ]:cText( Val( GetPvProfString( \"Descuentos\", \"Descuento especial\", 0, cPatEmp() + \"Empresa.Ini\" ) ) ), RecalculaTotal( aTmp ) )\n\n      REDEFINE GET aGet[ _CDPP ] VAR aTmp[ _CDPP ] ;\n         ID       259 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n		REDEFINE GET aGet[ _NDPP ] VAR aTmp[ _NDPP ];\n         ID       260 ;\n         PICTURE  \"@E 999.99\" ;\n         SPINNER ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) ) ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE BUTTON oSayLabels[ 3 ] ;\n         ID       258 ;\n         OF       oFld:aDialogs[ 1 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( aGet[ _NDPP ]:cText( Val( GetPvProfString( \"Descuentos\", \"Descuento pronto pago\", 0, cPatEmp() + \"Empresa.Ini\" ) ) ), RecalculaTotal( aTmp ) )\n\n		REDEFINE GET aGet[ _CDTOUNO ] VAR aTmp[ _CDTOUNO ] ;\n         ID       270 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n		REDEFINE GET aGet[ _NDTOUNO ] VAR aTmp[ _NDTOUNO ];\n         ID       280 ;\n         PICTURE  \"@E 999.99\" ;\n         SPINNER ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) ) ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE BUTTON oSayLabels[ 4 ] ;\n         ID       268 ;\n         OF       oFld:aDialogs[ 1 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( aGet[ _NDTOUNO ]:cText( Val( GetPvProfString( \"Descuentos\", \"Descuento uno\", 0, cPatEmp() + \"Empresa.Ini\" ) ) ), RecalculaTotal( aTmp ) )\n\n      REDEFINE GET aGet[ _CDTODOS ] VAR aTmp[ _CDTODOS ] ;\n         ID       290 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NDTODOS ] VAR aTmp[ _NDTODOS ];\n         ID       300 ;\n         PICTURE  \"@E 999.99\" ;\n         SPINNER ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) ) ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE BUTTON oSayLabels[ 5 ] ;\n         ID       288 ;\n         OF       oFld:aDialogs[ 1 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( aGet[ _NDTODOS ]:cText( Val( GetPvProfString( \"Descuentos\", \"Descuento dos\", 0, cPatEmp() + \"Empresa.Ini\" ) ) ), RecalculaTotal( aTmp ) )\n\n      if IsMuebles()\n\n         REDEFINE GET aGet[_NMONTAJE] VAR aTmp[_NMONTAJE];\n            ID       750 ;\n            WHEN     ( lWhen ) ;\n            PICTURE  \"@E 999.99\" ;\n            SPINNER;\n            COLOR    CLR_GET ;\n            OF       oFld:aDialogs[1]\n\n      end if\n\n      /*\n      Desglose del impuestos---------------------------------------------------------\n      */\n\n      oBrwIva                        := TXBrowse():New( oFld:aDialogs[ 1 ] )\n\n      oBrwIva:bClrSel                := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwIva:bClrSelFocus           := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwIva:SetArray( aTotIva, , , .f. )\n\n      oBrwIva:nMarqueeStyle          := 5\n      oBrwIva:lRecordSelector        := .f.\n      oBrwIva:lHScroll               := .f.\n\n      oBrwIva:CreateFromResource( 310 )\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"Base\"\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil, Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPorDiv ), \"\" ) }\n         :nWidth           := 96\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"%\" + cImp()\n         :bStrData         := {|| if( !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ), aTotIva[ oBrwIva:nArrayAt, 3 ], \"\" ) }\n         :bEditValue       := {|| aTotIva[ oBrwIva:nArrayAt, 3 ] }\n         :nWidth           := 55\n         :cEditPicture     := \"@E 999.99\"\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n         :nFootStrAlign    := 1\n         :nEditType        := 1\n         :bEditWhen        := {|| !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ) }\n         :bOnPostEdit      := {|o,x| EdtIva( o, x, aTotIva[ oBrwIva:nArrayAt, 3 ], dbfTmpLin, dbfIva, oBrwLin ), RecalculaTotal( aTmp ) }\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := cImp()\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil, Trans( aTotIva[ oBrwIva:nArrayAt, 8 ], cPorDiv ), \"\" ) }\n         :nWidth           := 58\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"% R.E.\"\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil .and. aTmp[ _LRECARGO ], Trans( aTotIva[ oBrwIva:nArrayAt, 4 ], \"@E 99.9\"), \"\" ) }\n         :nWidth           := 54\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      with object ( oBrwIva:AddCol() )\n         :cHeader          := \"R.E.\"\n         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] != nil .and. aTmp[ _LRECARGO ], Trans( aTotIva[ oBrwIva:nArrayAt, 9 ], cPorDiv ), \"\" ) }\n         :nWidth           := 54\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n		/*\n		Cajas de Totales\n		------------------------------------------------------------------------\n		*/\n\n      REDEFINE GET aGet[ _CMANOBR ] VAR aTmp[ _CMANOBR ] ;\n         ID       411 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NIVAMAN ] VAR aTmp[ _NIVAMAN ] ;\n         ID       412 ;\n         WHEN     ( lWhen ) ;\n         PICTURE  \"@E 99.99\" ;\n         VALID    ( lTiva( dbfIva, aTmp[ _NIVAMAN ] ) .and. RecalculaTotal( aTmp ) );\n         ON CHANGE( RecalculaTotal( aTmp ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIva( aGet[ _NIVAMAN ], dbfIva, , .t. ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NMANOBR ] VAR aTmp[ _NMANOBR ] ;\n         ID       400 ;\n         PICTURE  cPorDiv ;\n         WHEN     ( lWhen ) ;\n         VALID    ( RecalculaTotal( aTmp ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetNet VAR nTotNet ;\n         ID       401 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTrn VAR nTotTrn ;\n         ID       402 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGetRnt VAR nTotRnt ;\n         ID       408 ;\n         IDTEXT   709 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetIvm VAR nTotIvm;\n         ID       403 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE CHECKBOX aGet[ _LOPERPV ] ;\n         VAR      aTmp[ _LOPERPV  ] ;\n         ID       409 ;\n         WHEN     ( lWhen ) ;\n         ON CHANGE( RecalculaTotal( aTmp ), oBrwLin:Refresh() );\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE SAY oGetPnt VAR nTotPnt;\n         ID       404 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oGetIva VAR nTotIva ;\n         ID       405 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE CHECKBOX aGet[ _LRECARGO ] ;\n         VAR      aTmp[ _LRECARGO ] ;\n         ID       406 ;\n         WHEN     ( lWhen ) ;\n         ON CHANGE( RecalculaTotal( aTmp ) );\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE SAY oGetReq VAR nTotReq ;\n         ID       407 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE SAY oGetTotal VAR nTotAlb;\n         ID       360 ;\n			FONT 		oFont ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n		Botones de la caja de dialogo___________________________________________\n		*/\n\n      REDEFINE BUTTON ;\n			ID 		515 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( AppDeta( oBrwLin, bEdtDet, aTmp, .t., nMode ) )\n\n		REDEFINE BUTTON ;\n			ID 		500 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( AppDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) )\n\n		REDEFINE BUTTON ;\n			ID 		501 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( EdtDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) )\n\n		REDEFINE BUTTON ;\n			ID 		502 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinDelRec( oBrwLin, dbfTmpLin, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) )\n\n		REDEFINE BUTTON ;\n			ID 		503 ;\n			OF 		oFld:aDialogs[1] ;\n         ACTION   ( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, .f., nMode, aTmp ) )\n\n		REDEFINE BUTTON ;\n			ID 		524 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( DbSwapUp( dbfTmpLin, oBrwLin ) )\n\n		REDEFINE BUTTON ;\n			ID 		525 ;\n			OF 		oFld:aDialogs[1] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( DbSwapDown( dbfTmpLin, oBrwLin ) )\n\n      REDEFINE BUTTON oBtnKit;\n         ID       526 ;\n			OF 		oFld:aDialogs[1] ;\n         ACTION   ( lEscandalloEdtRec( .t., oBrwLin ) )\n\n      REDEFINE GET aGet[ _CSERALB ] VAR aTmp[ _CSERALB ] ;\n         ID       100 ;\n         SPINNER ;\n         ON UP    ( UpSerie( aGet[ _CSERALB ] ) );\n         ON DOWN  ( DwSerie( aGet[ _CSERALB ] ) );\n         PICTURE  \"@!\" ;\n			COLOR 	CLR_GET ;\n         WHEN     ( nMode == APPD_MODE .OR. nMode == DUPL_MODE );\n         VALID    ( aTmp[ _CSERALB ] >= \"A\" .AND. aTmp[ _CSERALB ] <= \"Z\"  );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NNUMALB ] VAR aTmp[ _NNUMALB ] ;\n         ID       110 ;\n			PICTURE 	\"999999999\" ;\n			WHEN  	( .F. ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CSUFALB] VAR aTmp[_CSUFALB] ;\n         ID       120 ;\n         PICTURE  \"@!\" ;\n			WHEN  	( .F. ) ;\n			OF 		oFld:aDialogs[1]\n\n		REDEFINE GET aGet[_DFECALB] VAR aTmp[_DFECALB];\n         ID       130 ;\n			SPINNER ;\n         WHEN     ( lWhen ) ;\n			COLOR 	CLR_GET ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE COMBOBOX oTipAlb VAR cTipAlb ;\n         ID       217 ;\n         WHEN     ( ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         ON CHANGE( SetDialog( aGet, oSayDias, oSayTxtDias ) );\n         ITEMS    aTipAlb ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECSAL ] VAR aTmp[ _DFECSAL ];\n         ID       111 ;\n         IDSAY    112 ;\n			SPINNER;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n			COLOR 	CLR_GET ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _DFECENTR ] VAR aTmp[ _DFECENTR ];\n         ID       113 ;\n         IDSAY    114 ;\n			SPINNER;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         COLOR    CLR_GET ;\n         ON CHANGE( oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oSayDias ;\n         VAR      ( aTmp[ _DFECENTR ] - aTmp[ _DFECSAL ] );\n         ID       115 ;\n         PICTURE  \"9999\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oSayTxtDias ;\n         ID       116 ;\n         OF       oFld:aDialogs[1]\n\n		REDEFINE GET aGet[ _CCODSUALB ] VAR aTmp[ _CCODSUALB ];\n         ID       140 ;\n         IDSAY    141 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE BTNBMP oBtnPre ;\n         ID       601 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Notebook_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar presupuesto\" ;\n         ACTION   ( BrwPreCli( aGet[ _CNUMPRE ], dbfPreCliT, dbfPreCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BTNBMP oBtnSat ;\n         ID       602 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Power-drill_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar SAT\" ;\n         ACTION   ( BrwSatCli( aGet[ _CNUMSAT ], dbfSatCliT, dbfSatCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BTNBMP oBtnPed ;\n         ID       603 ;\n         OF       oFld:aDialogs[1] ;\n         RESOURCE \"Clipboard_empty_user1_16\" ;\n         NOBORDER ;\n         TOOLTIP  \"Importar pedido\" ;\n         ACTION   ( BrwPedCli( aGet[ _CNUMPED ], dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ) )\n\n      REDEFINE BUTTON oBtnAgruparPedido;\n         ID       512 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( nMode == APPD_MODE .and. Empty( aTmp[ _CNUMPED ] ) ) ;\n         ACTION   ( GrpPed( aGet, aTmp, oBrwLin  ) )\n\n      REDEFINE BUTTON oBtnAgruparSat;\n         ID       513 ;\n         OF       oFld:aDialogs[1] ;\n         WHEN     ( nMode == APPD_MODE .and. Empty( aTmp[ _CNUMSAT ] ) ) ;\n         ACTION   ( GrpSat( aGet, aTmp, oBrwLin  ) )\n\n      REDEFINE GET aGet[ _CNUMPED ] VAR aTmp[ _CNUMPED ] ;\n         ID       150 ;\n         PICTURE  \"@R #/#########/##\" ;\n         VALID    ( cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode ), RecalculaTotal( aTmp ), SetDialog( aGet, oSayDias, oSayTxtDias ) );\n         WHEN     ( nMode == APPD_MODE ) ;\n         ON HELP  ( BrwPedCli( aGet[ _CNUMPED ], dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, aGet[ _LIVAINC ] ),;\n                    RecalculaTotal( aTmp ) ) ;\n         BITMAP   \"LUPA\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNUMPRE ] VAR aTmp[ _CNUMPRE ] ;\n         ID       151 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cPreCli( aGet, aTmp, oBrwLin, nMode ), RecalculaTotal( aTmp ), SetDialog( aGet, oSayDias, oSayTxtDias ) ) ;\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CNUMSAT ] VAR aTmp[ _CNUMSAT ] ;\n         ID       152 ;\n         WHEN     ( .f. ) ;\n         VALID    ( cSatCli( aGet, aTmp, oBrwLin, nMode ), RecalculaTotal( aTmp ), SetDialog( aGet, oSayDias, oSayTxtDias ) ) ;\n         PICTURE  \"@R #/#########/##\" ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _LFACTURADO ] VAR cEstAlb;\n         WHEN     .f. ;\n         ID       160 ;\n			OF 		oFld:aDialogs[1]\n\n      REDEFINE CHECKBOX aGet[ _LIVAINC ] VAR aTmp[ _LIVAINC ] ;\n         ID       165 ;\n         WHEN     ( lWhen .and. ( dbfTmpLin )->( LastRec() ) == 0 ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      REDEFINE CHECKBOX aTmp[ _LENTREGADO ] ;\n         ID       166 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n      */\n\n      /*\n      Segunda caja de dialogo\n      */\n\n      /*\n      Transportistas-----------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CCODTRN ] VAR aTmp[ _CCODTRN ] ;\n         ID       235 ;\n         WHEN     ( lWhen ) ;\n         VALID    ( LoadTrans( aTmp, aGet[ _CCODTRN ], aGet[ _NKGSTRN ], oSay[ 8 ] ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( oTrans:Buscar( aGet[ _CCODTRN ] ), .t. );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 8 ] VAR cSay[ 8 ] ;\n         ID       236 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _NKGSTRN ] VAR aTmp[ _NKGSTRN ] ;\n         ID       237 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _NBULTOS ] VAR aTmp[ _NBULTOS ];\n         ID       128 ;\n			SPINNER;\n         PICTURE  \"999\" ;\n         WHEN     ( lWhen ) ;\n			COLOR 	CLR_GET ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CSUPED ] VAR aTmp[ _CSUPED ];\n         ID       129 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n		Cajas____________________________________________________________________\n		*/\n\n      REDEFINE GET aGet[ _CCODCAJ ] VAR aTmp[ _CCODCAJ ];\n         WHEN     ( lWhen ) ;\n         VALID    cCajas( aGet[ _CCODCAJ ], dbfCajT, oSay[ 9 ] ) ;\n         ID       165 ;\n			COLOR 	CLR_GET ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwCajas( aGet[ _CCODCAJ ], oSay[ 9 ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Retirado por________________________________________________________________\n		*/\n\n      REDEFINE GET aGet[_CRETPOR] VAR aTmp[_CRETPOR] ;\n         ID       160 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CRETMAT] VAR aTmp[_CRETMAT] ;\n         ID       170 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n      Fecha entregado\n      */\n\n      REDEFINE CHECKBOX aGet[_LENTREGADO] VAR aTmp[_LENTREGADO] ;\n         ID       200 ;\n         ON CHANGE( ValCheck( aGet, aTmp ) ) ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_DFECENV] VAR aTmp[_DFECENV] ;\n         ID       127 ;\n         SPINNER ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n		Comentarios_____________________________________________________________\n		*/\n\n		REDEFINE GET aGet[_CCONDENT] VAR aTmp[_CCONDENT] ;\n			ID 		230 ;\n         WHEN     ( lWhen ) ;\n			OF 		oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_MOBSERV] VAR aTmp[_MOBSERV] MEMO ;\n         ID       240 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_MCOMENT] VAR aTmp[_MCOMENT] MEMO ;\n         ID       250 ;\n         WHEN     ( lWhen ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_CCODDLG] VAR aTmp[_CCODDLG] ;\n         ID       300 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSay[ 11 ] VAR cSay[ 11 ] ;\n         ID       301 ;\n         WHEN     ( .f. ) ;\n         OF       oFld:aDialogs[2]\n\n      /*Impresión ( informa de si está imprimido o no y de cuando se imprimió )*/\n\n      REDEFINE CHECKBOX aGet[ _LIMPRIMIDO ] VAR aTmp[ _LIMPRIMIDO ] ;\n         ID       120 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _DFECIMP ] VAR aTmp[ _DFECIMP ] ;\n         ID       121 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CHORIMP ] VAR aTmp[ _CHORIMP ] ;\n         ID       122 ;\n         WHEN     ( lWhen .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetMasDiv VAR cGetMasDiv;\n         ID       488 ;\n			FONT 		oFont ;\n			OF 		oFld:aDialogs[1]\n\n      /*\n      Pagos\n      -------------------------------------------------------------------------\n      */\n\n      oBrwPgo                 := IXBrowse():New( oFld:aDialogs[2] )\n\n      oBrwPgo:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwPgo:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwPgo:cAlias          := dbfTmpPgo\n      oBrwPgo:cName           := \"Albaran de cliente.Pagos\"\n\n      oBrwPgo:nMarqueeStyle   := 6\n      oBrwPgo:lHScroll        := .f.\n\n      oBrwPgo:CreateFromResource( 310 )\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Sesión cerrada\"\n         :bStrData            := {|| \"\" }\n         :bEditValue          := {|| ( dbfTmpPgo )->lCloPgo }\n         :nWidth              := 20\n         :SetCheck( { \"Cnt16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Fecha\"\n         :bEditValue          := {|| Dtoc( ( dbfTmpPgo )->dEntrega ) }\n         :nWidth              := 80\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Sesión\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cTurRec }\n         :nWidth              := 60\n         :lHide               := .t.\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Caja\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cCodCaj }\n         :nWidth              := 50\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Agente\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cCodAge }\n         :nWidth              := 60\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Concepto\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cDescrip }\n         :nWidth              := 155\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Importe\"\n         :bEditValue          := {|| nEntAlbCli( dbfTmpPgo, dbfDiv, cDivEmp(), .t. ) }\n         :nWidth              := 80\n         :nDataStrAlign       := 1\n         :nHeadStrAlign       := 1\n      end with\n\n      with object ( oBrwPgo:AddCol() )\n         :cHeader             := \"Forma pago\"\n         :bEditValue          := {|| ( dbfTmpPgo )->cCodPgo }\n         :nWidth              := 120\n         :lHide               := .t.\n      end with\n\n      if nMode == EDIT_MODE\n         oBrwPgo:bLDblClick   := {|| WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) }\n      end if\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[2] ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinAppRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       502 ;\n         OF       oFld:aDialogs[2] ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       503 ;\n         OF       oFld:aDialogs[2] ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( if( ( dbfTmpPgo )->lCloPgo .and. !oUser():lAdministrador(), MsgStop( \"Solo pueden eliminar las entregas cerradas los administradores.\" ), ( WinDelRec( oBrwPgo, dbfTmpPgo ), RecalculaTotal( aTmp ) ) ) )\n\n      REDEFINE BUTTON ;\n         ID       600 ;\n         OF       oFld:aDialogs[2] ;\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( PrnEntregas( .f., dbfTmpPgo ) )\n\n      REDEFINE BUTTON ;\n         ID       610 ;\n         OF       oFld:aDialogs[2] ;\n         WHEN     ( nMode == EDIT_MODE ) ;\n         ACTION   ( PrnEntregas( .t., dbfTmpPgo ) )\n\n      /*\n      Pagado y pendiente en facturas\n      ------------------------------------------------------------------------\n      */\n\n      REDEFINE SAY oGetAlb VAR nTotAlb ;\n         ID       320 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetEnt VAR 0 ;\n         ID       330 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE SAY oGetPdt VAR 0 ;\n         ID       340 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oGetPes VAR nTotPes ;\n         ID       570 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oGetDif VAR nTotDif ;\n         ID       580 ;\n         WHEN     ( .f. ) ;\n         PICTURE  ( MasUnd() ) ;\n         OF       oFld:aDialogs[2]\n\n      /*\n		Detalle________________________________________________________________\n		*/\n\n      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )\n\n      oBrwInc:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwInc:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwInc:cAlias          := dbfTmpInc\n\n      oBrwInc:nMarqueeStyle   := 6\n      oBrwInc:cName           := \"Albaran de cliente.Incidencias\"\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Resuelta\"\n            :bStrData         := {|| \"\" }\n            :bEditValue       := {|| ( dbfTmpInc )->lListo }\n            :nWidth           := 65\n            :SetCheck( { \"Sel16\", \"Cnt16\" } )\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Código\"\n            :bEditValue       := {|| ( dbfTmpInc )->cCodTip }\n            :nWidth           := 80\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Incidencia\"\n            :bEditValue       := {|| cNomInci( ( dbfTmpInc )->cCodTip, dbfInci ) }\n            :nWidth           := 230\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Fecha\"\n            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }\n            :nWidth           := 90\n         end with\n\n         with object ( oBrwInc:AddCol() )\n            :cHeader          := \"Descripción\"\n            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }\n            :nWidth           := 480\n         end with\n\n         if nMode != ZOOM_MODE\n            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }\n         else\n            oBrwInc:bLDblClick   := {|| WinZooRec( oBrwInc, bEdtDet, aTmp ) }\n         end if\n\n         oBrwInc:CreateFromResource( 210 )\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )\n\n		REDEFINE BUTTON ;\n			ID 		502 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinDelRec( oBrwInc, dbfTmpInc ) )\n\n		REDEFINE BUTTON ;\n			ID 		503 ;\n         OF       oFld:aDialogs[ 3 ] ;\n         ACTION   ( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )\n\n      //Caja de documentos\n\n      oBrwDoc                 := TXBrowse():New( oFld:aDialogs[ 4 ] )\n\n      oBrwDoc:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwDoc:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwDoc:cAlias          := dbfTmpDoc\n\n      oBrwDoc:nMarqueeStyle   := 6\n      oBrwDoc:nRowHeight      := 40\n      oBrwDoc:nDataLines      := 2\n\n      with object ( oBrwDoc:AddCol() )\n         :cHeader          := \"Documento\"\n         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + CRLF + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }\n         :nWidth           := 860\n      end with\n\n      if nMode != ZOOM_MODE\n         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, \"open\", Rtrim( ( dbfTmpDoc )->cRuta ) ) }\n      end if\n\n      oBrwDoc:CreateFromResource( 210 )\n\n      REDEFINE BUTTON ;\n         ID       500 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       501 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )\n\n		REDEFINE BUTTON ;\n			ID 		502 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( WinDelRec( oBrwDoc, dbfTmpDoc ) )\n\n		REDEFINE BUTTON ;\n			ID 		503 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         ACTION   ( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )\n\n      REDEFINE BUTTON ;\n         ID       504 ;\n         OF       oFld:aDialogs[ 4 ] ;\n         ACTION   ( ShellExecute( oDlg:hWnd, \"open\", rTrim( ( dbfTmpDoc )->cRuta ) ) )\n\n      /*\n		Botones comunes a la caja de dialogo____________________________________\n		*/\n\n      REDEFINE BUTTON ;\n         ID       3 ;\n         OF       oDlg ;\n         WHEN     ( lWhen ) ;\n         ACTION   ( RecAlbCli( aTmp, oDlg ), oBrwLin:Refresh(), RecalculaTotal( aTmp ) )\n\n      REDEFINE BUTTON ;\n         ID       4 ;\n			OF 		oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( if( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ), GenAlbCli( IS_PRINTER ), ) )\n\n		REDEFINE BUTTON ;\n         ID       IDOK ;\n			OF 		oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ) )\n\n		REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n			OF 		oDlg ;\n         CANCEL ;\n         ACTION   ( CancelEdtRec( nMode, aGet, oDlg ) )\n\n      REDEFINE GROUP oSayLabels[ 1 ] ID 700 OF oFld:aDialogs[ 1 ] TRANSPARENT\n      REDEFINE SAY   oSayLabels[ 6 ] ID 708 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 7 ] ID 710 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 8 ] ID 711 OF oFld:aDialogs[ 1 ]\n      REDEFINE SAY   oSayLabels[ 9 ] ID 712 OF oFld:aDialogs[ 1 ]\n\n   if nMode != ZOOM_MODE\n\n      oFld:aDialogs[1]:AddFastKey( VK_F2, {|| AppDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) } )\n      oFld:aDialogs[1]:AddFastKey( VK_F3, {|| EdtDeta( oBrwLin, bEdtDet, aTmp, .f., nMode ) } )\n      oFld:aDialogs[1]:AddFastKey( VK_F4, {|| WinDelRec( oBrwLin, dbfTmpLin, {|| delDeta() }, {|| RecalculaTotal( aTmp ) } ) } )\n\n      oFld:aDialogs[2]:AddFastKey( VK_F2, {|| WinAppRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) } )\n      oFld:aDialogs[2]:AddFastKey( VK_F3, {|| WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) } )\n      oFld:aDialogs[2]:AddFastKey( VK_F4, {|| if( ( dbfTmpPgo )->lCloPgo .and. !oUser():lAdministrador(), MsgStop( \"Solo pueden eliminar las entregas cerradas los administradores.\" ), ( WinDelRec( oBrwPgo, dbfTmpPgo ), RecalculaTotal( aTmp ) ) ) } )\n\n      oFld:aDialogs[3]:AddFastKey( VK_F2, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )\n      oFld:aDialogs[3]:AddFastKey( VK_F3, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )\n      oFld:aDialogs[3]:AddFastKey( VK_F4, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )\n\n      oFld:aDialogs[4]:AddFastKey( VK_F2, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )\n      oFld:aDialogs[4]:AddFastKey( VK_F3, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )\n      oFld:aDialogs[4]:AddFastKey( VK_F4, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )\n\n      oDlg:AddFastKey( VK_F6,             {|| if( EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ), GenAlbCli( IS_PRINTER ), ) } )\n      oDlg:AddFastKey( VK_F5,             {|| EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg ) } )\n      oDlg:AddFastKey( 65,                {|| if( GetKeyState( VK_CONTROL ), CreateInfoArticulo(), ) } )\n\n   end if\n\n   oDlg:bStart       := {|| StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin ) }\n\n   oDlg:AddFastKey(  VK_F1, {|| ChmHelp( \"Albaranes2\" ) } )\n\n   ACTIVATE DIALOG   oDlg ;\n      ON INIT        (  InitEdtRec( aTmp, aGet, oDlg, oSayDias, oSayTxtDias, oBrwLin, oBrwInc, oBrwPgo, hHash ) );\n      ON PAINT       (  RecalculaTotal( aTmp ) );\n      CENTER\n\n   oMenu:end()\n\n   oFont:end()\n\n   oBmpEmp:end()\n   oBmpDiv:end()\n   oBmpGeneral:end()\n\n   oBrwLin:CloseData()\n   oBrwPgo:CloseData()\n   oBrwInc:CloseData()\n\n   ( dbfAlbCliT )->( ordSetFocus( nOrd ) )\n\n   KillTrans()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nStatic Function StartEdtRec( aTmp, aGet, oDlg, nMode, hHash, oBrwLin )\n\n   if nMode == APPD_MODE\n\n      if lRecogerUsuario()\n\n         if !lGetUsuario( aGet[ _CCODUSR ], dbfUsr )\n            oDlg:End()\n         end if\n\n      end if \n\n      if IsHash( hHash )\n\n         do case\n            case HGetKeyAt( hHash, 1 ) == \"Artículo\"\n               AppDeta( oBrwLin, bEdtDet, aTmp, nil, nMode, HGetValueAt( hHash, 1 ) )\n\n            case HGetKeyAt( hHash, 1 ) == \"Cliente\"\n               aGet[ _CCODCLI ]:cText( HGetValueAt( hHash, 1 ) )\n               aGet[ _CCODCLI ]:lValid()\n\n            case HGetKeyAt( hHash, 1 ) == \"Presupuesto\"\n               aGet[ _CNUMPRE ]:cText( HGetValueAt( hHash, 1 ) )\n               aGet[ _CNUMPRE ]:lValid()\n\n            case HGetKeyAt( hHash, 1 ) == \"Pedido\"\n               aGet[ _CNUMPED ]:cText( HGetValueAt( hHash, 1 ) )\n               aGet[ _CNUMPED ]:lValid()\n\n            case HGetKeyAt( hHash, 1 ) == \"SAT\"\n               aGet[ _CNUMSAT ]:cText( HGetValueAt( hHash, 1 ) )\n               aGet[ _CNUMSAT ]:lValid()\n         \n         end case\n \n      end if \n\n   end if \n\n   /*\n   Muestra y oculta las rentabilidades-----------------------------------------\n   */\n\n   if oGetRnt != nil .and. oUser():lNotRentabilidad()\n      oGetRnt:Hide()\n   end if\n\n   /*\n   Mostramos los escandallos---------------------------------------------------\n   */\n\n   lEscandalloEdtRec( .f., oBrwLin )\n\n   /*\n   Hace que salte la incidencia al entrar en el documento----------------------\n   */\n\n   if !Empty( dbfTmpInc ) .and. ( dbfTmpInc )->( Used() ) \n\n      while !( dbfTmpInc )->( Eof() )\n         if ( dbfTmpInc )->lAviso .and. !( dbfTmpInc )->lListo\n            MsgInfo( Trim( ( dbfTmpInc )->mDesInc ), \"¡Incidencia!\" )\n         end if\n         ( dbfTmpInc )->( dbSkip() )\n      end while\n\n      ( dbfTmpInc )->( dbGoTop() )\n\n   end if\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n\nStatic Function InitEdtRec( aTmp, aGet, oDlg, oSayDias, oSayTxtDias, oBrwLin, oBrwInc, oBrwPgo, hHash )\n\n   EdtRecMenu( aGet, aTmp, oBrwLin, oDlg )\n                        \n   SetDialog( aGet, oSayDias, oSayTxtDias )\n\n   oBrwLin:Load()\n   oBrwInc:Load()\n   oBrwPgo:Load()\n\nRETURN ( nil )\n\n//---------------------------------------------------------------------------//\n\nStatic Function CancelEdtRec( nMode, aGet, oDlg )\n\n   local cNumDoc  \n\n   if ExitNoSave( nMode, dbfTmpLin )\n\n      if ( nMode == APPD_MODE .or. nMode == DUPL_MODE )\n\n         CursorWait()\n   \n         // Presupuesto-----------------------------------------------------------\n   \n         cNumDoc                             := aGet[ _CNUMPRE ]:VarGet()\n   \n         if !Empty( cNumDoc ) .and. dbSeekInOrd( cNumDoc, \"nNumPre\", dbfPreCliT )\n            if ( dbfPreCliT )->lEstado .and. dbLock( dbfPreCliT )\n               ( dbfPreCliT )->cNumAlb    := \"\"\n               ( dbfPreCliT )->lEstado    := .f.\n               ( dbfPreCliT )->( dbUnLock() )\n            end if\n         end if \n\n         // Pedido----------------------------------------------------------------\n   \n         cNumDoc                             := aGet[ _CNUMPED ]:VarGet()\n   \n         if !Empty( cNumDoc ) .and. dbSeekInOrd( cNumDoc, \"nNumPed\", dbfPedCliT )\n            if ( dbfPedCliT )->lEstado .and. dbLock( dbfPedCliT )\n               ( dbfPedCliT )->cNumAlb    := \"\"\n               ( dbfPedCliT )->lEstado    := .f.\n               ( dbfPedCliT )->( dbUnLock() )\n            end if\n         end if \n\n         // SAT----------------------------------------------------------------\n\n         cNumDoc                             := aGet[ _CNUMSAT ]:VarGet()\n\n         if !Empty( cNumDoc ) .and. dbSeekInOrd( cNumDoc, \"nNumSat\", dbfSatCliT )\n            if ( dbfSatCliT )->lEstado .and. dbLock( dbfSatCliT )\n               ( dbfSatCliT )->cNumAlb    := \"\"\n               ( dbfSatCliT )->lEstado    := .f.\n               ( dbfSatCliT )->( dbUnLock() )\n            end if\n         end if \n\n         CursorWE()\n\n      end if \n\n      oDlg:end()\n\n   end if \n\nRETURN ( nil )\n\n//---------------------------------------------------------------------------//\n\nStatic Function EdtRecMenu( aGet, aTmp, oBrw, oDlg )\n\n   MENU oMenu\n\n      MENUITEM    \"&1. Rotor\"\n\n         MENU\n\n            MENUITEM    \"&1. Visualizar pedido\";\n               MESSAGE  \"Visualiza el pedido del que proviene\" ;\n               RESOURCE \"Clipboard_Empty_User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CNUMPED ] ), ZooPedCli( aTmp[ _CNUMPED ] ), MsgStop( \"El albarán no procede de un pedido\" ) ) )\n\n            SEPARATOR\n\n            MENUITEM    \"&2. Generar anticipo\";\n               MESSAGE  \"Genera factura de anticipo\" ;\n               RESOURCE \"Document_Money2_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ),;\n                              CreateAntCli( aTmp[ _CCODCLI ] ),;\n                              msgStop(\"Debe seleccionar un cliente para hacer una factura de anticipo\" ) ) )\n\n            SEPARATOR\n\n            MENUITEM    \"&3. Modificar cliente\";\n               MESSAGE  \"Modifica la ficha del cliente\" ;\n               RESOURCE \"User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ), EdtCli( aTmp[ _CCODCLI ] ), MsgStop( \"Código de cliente vacío\" ) ) );\n\n            MENUITEM    \"&4. Informe de cliente\";\n               MESSAGE  \"Informe de cliente\" ;\n               RESOURCE \"Info16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODCLI ] ), InfCliente( aTmp[ _CCODCLI ] ), MsgStop( \"Código de cliente vacío\" ) ) );\n\n            MENUITEM    \"&5. Modificar obra\";\n               MESSAGE  \"Modifica ficha de la obra\" ;\n               RESOURCE \"Worker16\" ;\n               ACTION   ( if( !Empty( aTmp[ _CCODOBR ] ), EdtObras( aTmp[ _CCODCLI ], aTmp[ _CCODOBR ], dbfObrasT ), MsgStop( \"Código de obra vacío\" ) ) );\n\n            SEPARATOR\n\n            MENUITEM    \"&6. Informe del documento\";\n               MESSAGE  \"Informe del documento\" ;\n               RESOURCE \"Info16\" ;\n               ACTION   ( TTrazaDocumento():Activate( ALB_CLI, aTmp[ _CSERALB ] + Str( aTmp[ _NNUMALB ] ) + aTmp[ _CSUFALB ] ) );\n\n         ENDMENU\n\n   ENDMENU\n\n   oDlg:SetMenu( oMenu )\n\nReturn ( oMenu )\n\n//---------------------------------------------------------------------------//\n\nStatic Function lEscandalloEdtRec( lSet, oBrwLin )\n\n   local lShwKit     := lShwKit()\n\n   if lSet\n      lShwKit        := !lShwKit\n   end if\n\n   if lShwKit\n      SetWindowText( oBtnKit:hWnd, \"Ocultar Esc&ll.\" )\n      if ( dbfTmpLin )->( Used() )\n         ( dbfTmpLin )->( dbClearFilter() )\n      end if\n   else\n      SetWindowText( oBtnKit:hWnd, \"Mostrar Esc&ll.\" )\n      if ( dbfTmpLin )->( Used() )\n         ( dbfTmpLin )->( dbSetFilter( {|| ! Field->lKitChl }, \"!lKitChl\" ) )\n      end if\n   end if\n\n   if lSet\n      lShwKit( lShwKit )\n   end if\n\n   if !Empty( oBrwLin )\n      oBrwLin:Refresh()\n   end if   \n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n\nStatic Function ValCheck( aGet, aTmp )\n\n   if aTmp[ _LENTREGADO ]\n      aGet[ _DFECENV ]:cText( GetSysDate() )\n   else\n      aGet[ _DFECENV ]:cText( Ctod( \"\" ) )\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\n/*\nEdita las lineas de Detalle\n*/\n\nSTATIC FUNCTION EdtDet( aTmp, aGet, dbfAlbCliL, oBrw, lTotLin, cCodArtEnt, nMode, aTmpAlb )\n\n	local oDlg\n   local oFld\n   local oBtn\n	local oGet2\n	local cGet2\n   local oGet3\n   local cGet3\n   local oTotal\n   local nTotal        := 0\n   local oSayPr1\n   local oSayPr2\n   local cSayPr1       := \"\"\n   local cSayPr2       := \"\"\n   local oSayVp1\n   local oSayVp2\n   local cSayVp1       := \"\"\n   local cSayVp2       := \"\"\n   local bmpImage\n   local oSayAlm\n   local cSayAlm\n   local oStkAct\n   local nStkAct        := 0\n   local oBtnSer\n   local oSayGrp\n   local cSayGrp        := \"\"\n   local oSayFam\n   local cSayFam        := \"\"\n   local cCodArt        := Padr( aTmp[ _CREF ], 32 )\n   local oRentLin\n   local cRentLin       := \"\"\n   local cCodDiv        := aTmpAlb[ _CDIVALB ]\n   local oSayDias\n\n   do case\n   case nMode == APPD_MODE\n\n      aTmp[_dCSERALB]   := aTmpAlb[_CSERALB]\n      aTmp[_dNNUMALB]   := aTmpAlb[_NNUMALB]\n      aTmp[_NCANENT ]   := 1\n      aTmp[_NUNICAJA]   := 1\n      aTmp[_DFECHA  ]   := GetSysDate()\n      aTmp[_CTIPMOV ]   := cDefVta()\n      aTmp[_LTOTLIN ]   := lTotLin\n      aTmp[_LNEWLIN ]   := .t.\n      aTmp[_CALMLIN ]   := aTmpAlb[ _CCODALM ]\n      aTmp[_LIVALIN ]   := aTmpAlb[ _LIVAINC ]\n      aTmp[_dCNUMPED]   := aTmpAlb[ _CNUMPED ]\n      aTmp[_NTARLIN ]   := aTmpAlb[ _NTARIFA ]\n      aTmp[_LIMPFRA ]   := .t.\n\n      if !Empty( cCodArtEnt )\n         cCodArt           := cCodArtEnt\n      end if\n\n      aTmp[ __DFECSAL ]    := aTmpAlb[ _DFECSAL ]\n      aTmp[ __DFECENT ]    := aTmpAlb[ _DFECENTR ]\n\n      if !Empty( oTipAlb ) .and. oTipAlb:nAt == 2\n         aTmp[ __LALQUILER ] := .t.\n      else\n         aTmp[ __LALQUILER ]:= .f.\n      end if\n\n   case nMode == EDIT_MODE\n\n      lTotLin           := aTmp[ _LTOTLIN ]\n\n   end case\n\n   /*\n   Este valor los guaradamos para detectar los posibles cambios----------------\n   */\n\n   cOldCodArt           := aTmp[ _CREF ]\n   cOldPrpArt           := aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ] + aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ]\n   cOldUndMed           := aTmp[ _CUNIDAD ]\n\n   cSayGrp              := RetFld( aTmp[ _CGRPFAM ], oGrpFam:GetAlias() )\n   cSayFam              := RetFld( aTmp[ _CCODFAM ], dbfFamilia )\n\n   /*\n   Caja de dialogo-------------------------------------------------------------\n   */\n\n   DEFINE DIALOG oDlg RESOURCE \"LFACCLI\" TITLE LblTitle( nMode ) + \"líneas a albaranes de clientes\"\n\n      if aTmp[ __LALQUILER ]\n\n      REDEFINE FOLDER oFld ;\n         ID       400 ;\n         OF       oDlg ;\n         PROMPT   \"&General\",    \"Da&tos\",    \"&Observaciones\" ;\n         DIALOGS  \"LPEDCLI_8\",   \"LALBCLI_2\", \"LFACCLI_3\"\n\n      else\n\n      REDEFINE FOLDER oFld ;\n         ID       400 ;\n         OF       oDlg ;\n         PROMPT   \"&General\",    \"Da&tos\",    \"&Observaciones\" ;\n         DIALOGS  \"LPEDCLI_1\",   \"LALBCLI_2\", \"LFACCLI_3\"\n\n      end if\n\n      REDEFINE GET aGet[ _CREF ] VAR cCodArt;\n			ID 		100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         OF       oFld:aDialogs[1]\n\n      aGet[ _CREF ]:bValid       := {|| LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode ) }\n      aGet[ _CREF ]:bHelp        := {|| BrwArticulo( aGet[ _CREF ], aGet[ _CDETALLE ], .f., .t., oBtn, aGet[ _CLOTE ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aGet[ _CVALPR1 ], aGet[ _CVALPR2 ], aGet[ _DFECCAD ] ) }\n      aGet[ _CREF ]:bLostFocus   := {|| lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }\n\n      REDEFINE GET aGet[ _CDETALLE ] VAR aTmp[ _CDETALLE ] ;\n         ID       110 ;\n         WHEN     ( ( lModDes() .or. Empty( aTmp[ _CDETALLE ] ) ) .AND. nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET aGet[ _MLNGDES ] VAR aTmp[ _MLNGDES ] ;\n			MEMO ;\n			ID 		111 ;\n         WHEN     ( ( lModDes() .or. Empty( aTmp[ _MLNGDES ] ) ) .AND. nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Lotes\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CLOTE ] VAR aTmp[ _CLOTE ];\n         ID       112 ;\n         IDSAY    113 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CLOTE ]:bValid   := {|| lValidLote( aTmp, aGet, oStkAct ) }\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ _DFECCAD ] VAR aTmp[ _DFECCAD ];\n         ID       340 ;\n         IDSAY    341 ;\n			SPINNER ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      end if\n\n      /*\n      Propiedades\n      -------------------------------------------------------------------------\n      */\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ _CVALPR1 ] VAR aTmp[_CVALPR1];\n         ID       270 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n			COLOR 	CLR_GET ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR1 ], oSayVp1, aTmp[ _CCODPR1 ], dbfTblPro ),;\n                        LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[_CVALPR1], oSayVp1, aTmp[_CCODPR1 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CVALPR1 ]:bChange      := {|| aGet[ _CVALPR1 ]:Assign(), if( !uFieldEmpresa( \"lNStkAct\" ), oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) }\n         aGet[ _CVALPR1 ]:bLostFocus   := {|| lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }\n\n      REDEFINE SAY oSayPr1 VAR cSayPr1;\n         ID       271 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayVp1 VAR cSayVp1;\n         ID       272 ;\n         WHEN     .f. ;\n         COLOR    CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CVALPR2] VAR aTmp[_CVALPR2];\n         ID       280 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n			COLOR 	CLR_GET ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( if( lPrpAct( aTmp[ _CVALPR2 ], oSayVp2, aTmp[ _CCODPR2 ], dbfTblPro ),;\n                        LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ),;\n                        .f. ) );\n         ON HELP  ( brwPrpAct( aGet[_CVALPR2], oSayVp2, aTmp[_CCODPR2 ] ) ) ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ _CVALPR2 ]:bChange      := {|| aGet[ _CVALPR2 ]:Assign(), if( !uFieldEmpresa( \"lNStkAct\" ), oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) }\n         aGet[ _CVALPR2 ]:bLostFocus   := {|| lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }\n\n      REDEFINE SAY oSayPr2 VAR cSayPr2;\n         ID       281 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayVp2 VAR cSayVp2;\n         ID       282 ;\n         WHEN     .f. ;\n         COLOR    CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n      end if\n\n      /*\n      fin de propiedades\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _NIVA ] VAR aTmp[ _NIVA ] ;\n			ID 		120 ;\n         PICTURE  \"@E 99.99\" ;\n         WHEN     ( !aTmp[ _LCONTROL ] .AND. lModIva() .and. nMode != ZOOM_MODE ) ;\n         VALID    ( lTiva( dbfIva, aTmp[ _NIVA ], @aTmp[ _NREQ ] ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIva( aGet[ _NIVA ], dbfIva, , .t. ) ) ;\n         OF       oFld:aDialogs[1]\n\n      if aTmp[ __LALQUILER ]\n\n      REDEFINE GET aGet[ __DFECSAL ] VAR aTmp[ __DFECSAL ];\n         ID       420 ;\n			SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ __DFECENT ] VAR aTmp[ __DFECENT ];\n         ID       430 ;\n			SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), oSayDias:Refresh() );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY oSayDias ;\n         VAR      ( aTmp[ __DFECENT ] - aTmp[ __DFECSAL ] );\n         PICTURE  \"9999\";\n         ID       440;\n         OF       oFld:aDialogs[1]\n\n      else\n\n      REDEFINE GET aGet[ _NVALIMP ] VAR aTmp[ _NVALIMP ] ;\n         ID       125 ;\n         IDSAY    126 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         PICTURE  cPouDiv ;\n         COLOR    CLR_GET ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         ON HELP  ( oNewImp:nBrwImp( aGet[ _NVALIMP ] ) );\n         OF       oFld:aDialogs[1]\n\n      end if\n\n		REDEFINE GET aGet[_NCANENT] VAR aTmp[_NCANENT];\n			ID 		130;\n			SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. lUseCaj() .AND. nMode != ZOOM_MODE ) ;\n			PICTURE 	cPicUnd ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ) );\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ) );\n         OF       oFld:aDialogs[1] ;\n         IDSAY    131\n\n		REDEFINE GET aGet[_NUNICAJA] VAR aTmp[_NUNICAJA] ;\n			ID 		140;\n			SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ) );\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, .f. ) );\n			PICTURE 	cPicUnd ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    141\n\n      REDEFINE GET aGet[ _NFACCNV ] VAR aTmp[ _NFACCNV ] ;\n         ID       295 ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE ) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NSATUNIT ] VAR aTmp[ _NSATUNIT ];\n         ID       150 ;\n         SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         PICTURE  cPouDiv;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NTARLIN ] VAR aTmp[ _NTARLIN ];\n         ID       156 ;\n         SPINNER ;\n         MIN      1 ;\n         MAX      6 ;\n         PICTURE  \"9\" ;\n         VALID    ( aTmp[ _NTARLIN ] >= 1 .AND. aTmp[ _NTARLIN ] <= 6 );\n         WHEN     ( nMode != ZOOM_MODE .and. ( lUsrMaster() .or. oUser():lCambiarPrecio() ) );\n         ON CHANGE( ChangeTarifa( aTmp, aGet, aTmpAlb ), lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CUNIDAD ] VAR aTmp[ _CUNIDAD ] ;\n         ID       170 ;\n         IDTEXT   171 ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( oUndMedicion:Existe( aGet[ _CUNIDAD ], aGet[ _CUNIDAD ]:oHelpText, \"cNombre\" ), ValidaMedicion( aTmp, aGet ) );\n         ON HELP  ( oUndMedicion:Buscar( aGet[ _CUNIDAD ] ), ValidaMedicion( aTmp, aGet ) ) ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[1]\n\n      // Campos de las descripciones de la unidad de medición\n\n      REDEFINE GET aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] ;\n         VAR      aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] ;\n         ID       520 ;\n         IDSAY    521 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n\n      REDEFINE GET aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] ;\n         VAR      aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] ;\n         ID       530 ;\n         IDSAY    531 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n\n      REDEFINE GET aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] ;\n         VAR      aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] ;\n         ID       540 ;\n         IDSAY    541 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         PICTURE  MasUnd() ;\n         OF       oFld:aDialogs[1]\n\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetColor( CLR_BLUE )\n\n      if aTmp[ __LALQUILER ]\n\n         REDEFINE GET aGet[ _NSATALQ ] VAR aTmp[ _NSATALQ ] ;\n            ID       250 ;\n            SPINNER ;\n            WHEN     ( nMode != ZOOM_MODE .and. !lTotLin ) ;\n            ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n            VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n            COLOR    CLR_GET ;\n            PICTURE  cPouDiv ;\n            OF       oFld:aDialogs[1]\n\n      end if\n\n      REDEFINE GET aGet[ _NIMPTRN ] VAR aTmp[ _NIMPTRN ] ;\n         ID       350 ;\n         IDSAY    351 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NPNTVER ] VAR aTmp[ _NPNTVER ] ;\n         ID       151 ;\n         IDSAY    152 ;\n         SPINNER ;\n         PICTURE  cPpvDiv ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin) ;\n         VALID    ( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NPESOKG ] VAR aTmp[ _NPESOKG ] ;\n         ID       160 ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CPESOKG ] VAR aTmp[ _CPESOKG ] ;\n         ID       175 ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _NVOLUMEN ] VAR aTmp[ _NVOLUMEN ] ;\n         ID       400 ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin) ;\n         PICTURE  \"@E 999,999.999999\";\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[ _CVOLUMEN ] VAR aTmp[ _CVOLUMEN ] ;\n         ID       410;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n			COLOR 	CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n		REDEFINE GET aGet[_NDTO] VAR aTmp[_NDTO] ;\n         ID       180 ;\n			SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n			COLOR 	CLR_GET ;\n         PICTURE  \"@E 999.99\";\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         OF       oFld:aDialogs[1]\n\n		REDEFINE GET aGet[_NDTOPRM] VAR aTmp[_NDTOPRM] ;\n         ID       190 ;\n			SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n			COLOR 	CLR_GET ;\n         PICTURE  \"@E 999.99\";\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         OF       oFld:aDialogs[1]\n\n		REDEFINE GET aGet[_NCOMAGE] VAR aTmp[_NCOMAGE] ;\n         ID       200 ;\n			SPINNER ;\n         WHEN     ( !aTmp[_LCONTROL] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n			COLOR 	CLR_GET ;\n         PICTURE  \"@E 999.99\";\n         OF       oFld:aDialogs[1]\n\n      if !aTmp[ __LALQUILER ]\n\n      REDEFINE GET oComisionLinea VAR nComisionLinea ;\n         ID       201 ;\n         WHEN     ( .f. ) ;\n         PICTURE  cPorDiv ;\n         OF       oFld:aDialogs[ 1 ]\n\n      end if\n\n      REDEFINE GET aGet[_NDTODIV] VAR aTmp[_NDTODIV] ;\n         ID       260 ;\n         IDSAY    261 ;\n			SPINNER ;\n         MIN      0 ;\n         COLOR    Rgb( 255, 0, 0 ) ;\n         ON CHANGE( lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) );\n         VALID    ( !aTmp[_LCONTROL] .AND. aTmp[_NDTODIV] >= 0 ) ;\n         WHEN     ( nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Tipo de moviminto\n      -------------------------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CTIPMOV ] VAR aTmp[ _CTIPMOV ] ;\n         WHEN     ( !aTmp[ _LCONTROL ] .AND. nMode != ZOOM_MODE .AND. !lTotLin ) ;\n         VALID    ( cTVta( aGet[ _CTIPMOV ], dbfTVta, oGet2 ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwTVta( aGet[ _CTIPMOV ], dbfTVta, oGet2 ) ) ;\n         ID       290 ;\n         OF       oFld:aDialogs[1] ;\n         IDSAY    292\n\n		REDEFINE GET oGet2 VAR cGet2 ;\n         ID       291 ;\n			WHEN 		( .F. ) ;\n			COLOR 	CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Tipo de articulo---------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CCODTIP ] VAR aTmp[ _CCODTIP ] ;\n         WHEN     ( nMode != ZOOM_MODE .and. nMode != MULT_MODE .and. !lTotLin ) ;\n         VALID    ( oTipArt:lValid( aGet[ _CCODTIP ], oGet3 ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( oTipArt:Buscar( aGet[ _CCODTIP ] ) ) ;\n         ID       205 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oGet3 VAR cGet3 ;\n         ID       206 ;\n			WHEN 		( .F. ) ;\n			COLOR 	CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Codigo de almacen--------------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CALMLIN ] VAR aTmp[ _CALMLIN ] ;\n         ID       300 ;\n         WHEN     ( !aTmp[ _LCONTROL ] .AND. nMode != ZOOM_MODE ) ;\n         VALID    ( cNomUbica( aTmp, aGet, dbfAlm ), cAlmacen( aGet[ _CALMLIN ], , oSayAlm ), if( !uFieldEmpresa( \"lNStkAct\" ), oStock:lPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct ), .t. ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAlmacen( aGet[ _CALMLIN ], oSayAlm ) ) ;\n			COLOR 	CLR_GET ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oSayAlm VAR cSayAlm ;\n         WHEN     .f. ;\n         ID       301 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY aGet[_CCODUBI1] VAR aTmp[_CCODUBI1];\n         ID       612 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CVALUBI1] VAR aTmp[_CVALUBI1] ;\n         ID       610 ;\n         BITMAP   \"LUPA\" ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         ON HELP  ( BrwUbiLin( aGet[_CVALUBI1], aGet[_CNOMUBI1], aTmp[_CCODUBI1], dbfUbicaL ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CNOMUBI1] VAR aTmp[_CNOMUBI1];\n         WHEN     .F. ;\n         ID       611 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY aGet[_CCODUBI2] VAR aTmp[_CCODUBI2];\n         ID       622 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CVALUBI2] VAR aTmp[_CVALUBI2] ;\n         ID       620 ;\n         BITMAP   \"LUPA\" ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         ON HELP  ( BrwUbiLin( aGet[_CVALUBI2], aGet[_CNOMUBI2], aTmp[_CCODUBI2], dbfUbicaL ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CNOMUBI2] VAR aTmp[_CNOMUBI2];\n         WHEN     .F. ;\n         ID       621 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE SAY aGet[_CCODUBI3] VAR aTmp[_CCODUBI3];\n         ID       632 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CVALUBI3] VAR aTmp[_CVALUBI3] ;\n         ID       630 ;\n         BITMAP   \"LUPA\" ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         ON HELP  ( BrwUbiLin( aGet[_CVALUBI3], aGet[_CNOMUBI3], aTmp[_CCODUBI3], dbfUbicaL ) ) ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_CNOMUBI3] VAR aTmp[_CNOMUBI3];\n         WHEN     .F. ;\n         ID       631 ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET oStkAct VAR nStkAct ;\n         ID       310 ;\n         WHEN     .f. ;\n         PICTURE  cPicUnd ;\n         OF       oFld:aDialogs[1]\n\n		REDEFINE GET oTotal VAR nTotal ;\n         ID       220 ;\n         PICTURE  cPorDiv ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_NCOSDIV] VAR aTmp[_NCOSDIV] ;\n         ID       320 ;\n         IDSAY    321 ;\n         WHEN     ( oUser():lAdministrador() .and. nMode != ZOOM_MODE );\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[1]\n\n      REDEFINE GET aGet[_NMESGRT] VAR aTmp[_NMESGRT] ;\n         ID       330 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         PICTURE  \"99\" ;\n         OF       oFld:aDialogs[1]\n\n      /*\n      Segunda caja de dialogo -------------------------------------------------\n      */\n\n      REDEFINE GET aGet[ _NNUMLIN ] VAR aTmp[ _NNUMLIN ] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( .f. ) ; // !aTmp[ _LCONTROL ] .AND. nMode == APPD_MODE ) ;\n         PICTURE  \"9999\" ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[_LIMPLIN] VAR aTmp[_LIMPLIN] ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_DFECHA] VAR aTmp[_DFECHA] ;\n         ID       120 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[_LCONTROL] VAR aTmp[_LCONTROL]  ;\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[_NPVSATC] VAR aTmp[_NPVSATC] ;\n         ID       140 ;\n			COLOR 	CLR_GET ;\n         WHEN     ( .f. ) ;\n         PICTURE  cPouDiv ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ _CIMAGEN ] ;\n         VAR      aTmp[ _CIMAGEN ] ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( GetBmp( aGet[ _CIMAGEN ], bmpImage ) ) ;\n         ON CHANGE( ChgBmp( aGet[ _CIMAGEN ], bmpImage ) ) ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ID       220 ;\n         OF       oFld:aDialogs[ 2 ]\n\n      /*\n      Definición de familias y grupos de familias------------------------------\n      */\n\n      REDEFINE GET aGet[ _CGRPFAM ] VAR aTmp[ _CGRPFAM ] ;\n         ID       ( 150 );\n         WHEN     ( nMode != ZOOM_MODE );\n         BITMAP   \"LUPA\" ;\n         VALID    ( oSayGrp:cText( RetFld( aTmp[ _CGRPFAM  ], oGrpFam:GetAlias() ) ), .t. ) ;\n         ON HELP  ( oGrpFam:Buscar( aGet[ _CGRPFAM ] ) ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET oSayGrp VAR cSayGrp ;\n         ID       ( 151 );\n         WHEN     .f.;\n         OF       oFld:aDialogs[ 2 ]\n\n      /*\n      Definición de frases publicitarias---------------------------------------\n      */\n\n      REDEFINE GET aGet[ _CCODFAM ] VAR aTmp[ _CCODFAM ] ;\n			ID 		160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         VALID    ( oSayFam:cText( RetFld( aTmp[ _CCODFAM  ], dbfFamilia ) ), .t. );\n         ON HELP  ( BrwFamilia( aGet[ _CCODFAM ], oSayFam ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET oSayFam VAR cSayFam ;\n			WHEN 		( .F. );\n			ID 		161 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[ _LIMPFRA ] VAR aTmp[ _LIMPFRA ]  ;\n         ID       310 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET aGet[ _CCODFRA ] VAR aTmp[ _CCODFRA ] ;\n         ID       320 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         OF       oFld:aDialogs[ 2 ]\n\n         aGet[ _CCODFRA ]:bValid := {|| oFraPub:lValid( aGet[ _CCODFRA ], aGet[ _CTXTFRA ] ) }\n         aGet[ _CCODFRA ]:bHelp  := {|| oFraPub:Buscar( aGet[ _CCODFRA ] ) }\n\n      REDEFINE GET aGet[ _CTXTFRA ] VAR aTmp[ _CTXTFRA ] ;\n         ID       321 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET oRentLin VAR cRentLin ;\n         ID       300 ;\n         IDSAY    301 ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE CHECKBOX aGet[ _LKITCHL ] VAR aTmp[ _LKITCHL ]  ;\n         ID       330 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE CHECKBOX aGet[ _LKITPRC ] VAR aTmp[ _LKITPRC ]  ;\n         ID       340 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE RADIO aGet[ _NCTLSTK ] VAR aTmp[ _NCTLSTK ] ;\n         ID       350, 351, 352 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET aGet[ _MOBSLIN ] VAR aTmp[ _MOBSLIN ] ;\n         MEMO ;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 3 ]\n\n      REDEFINE GET aGet[ _DESCRIP ] VAR aTmp[ _DESCRIP ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 3 ]\n\n      REDEFINE BITMAP bmpImage ;\n         ID       220 ;\n         FILE     ( cFileBitmap( cPatImg(), aTmp[ _CIMAGEN ] ) );\n         ON RIGHT CLICK ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() );\n         OF       oDlg\n\n         bmpImage:SetColor( , GetSysColor( 15 ) )\n\n      REDEFINE BUTTON oBtn ;\n         ID       IDOK ;\n			OF 		oDlg ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         ACTION   SaveDeta( aTmp, aTmpAlb, oFld, aGet, oBrw, bmpImage, oDlg, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oStkAct, nStkAct, oTotal, cCodArt, oBtn, oBtnSer )\n\n		REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n			OF 		oDlg ;\n         CANCEL ;\n			ACTION 	( oDlg:end() )\n\n      REDEFINE BUTTON ;\n         ID       9 ;\n			OF 		oDlg ;\n         ACTION   ( ChmHelp( \"Añadir_v\" ) )\n\n      REDEFINE BUTTON oBtnSer;\n         ID       552 ;\n			OF 		oDlg ;\n         ACTION   ( EditarNumeroSerie( aTmp, oStock, nMode ) )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| SaveDeta( aTmp, aTmpAlb, oFld, aGet, oBrw, bmpImage, oDlg, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oStkAct, nStkAct, oTotal, cCodArt, oBtn, oBtnSer ) } )\n   end if\n\n   oDlg:AddFastKey( VK_F6, {|| oBtnSer:Click() } )\n\n   oDlg:bStart    := {||   SetDlgMode( aTmp, aGet, oFld, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oGet2, oTotal, aTmpAlb, oRentLin ),;\n                           if( !Empty( cCodArtEnt ), aGet[ _CREF ]:lValid(), ),;\n                           aGet[ _CUNIDAD ]:lValid(),;\n                           lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oRentLin, cCodDiv ) }\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT     ( EdtDetMenu( aGet[ _CREF ], oDlg ) );\n      CENTER\n\n   EndDetMenu()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//--------------------------------------------------------------------------//\n\nStatic Function EdtInc( aTmp, aGet, dbfAlbCliI, oBrw, bWhen, bValid, nMode, aTmpAlb )\n\n   local oDlg\n   local oNomInci\n   local cNomInci       := RetFld( aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], dbfInci )\n   local oTitulo\n   local cTitulo        := LblTitle( nMode ) + \" incidencia\"\n\n\n   if nMode == APPD_MODE\n      aTmp[ _CSERALB  ] := aTmpAlb[ _CSERALB ]\n      aTmp[ _NNUMALB  ] := aTmpAlb[ _NNUMALB ]\n      aTmp[ _CSUFALB  ] := aTmpAlb[ _CSUFALB ]\n\n      if IsMuebles()\n         aTmp[ ( dbfTmpInc )->( FieldPos( \"lAviso\" ) ) ]  := .t.\n      end if\n   end if\n\n   if ( \"PDA\" $ cParamsMain() )\n      DEFINE DIALOG oDlg RESOURCE \"ALBCLI_INC_PDA\"\n   else\n      DEFINE DIALOG oDlg RESOURCE \"INCIDENCIA\" TITLE LblTitle( nMode ) + \"incidencias de albaranes a clientes\"\n   end if\n\n      REDEFINE GET aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         VAR      aTmp[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE );\n         VALID    ( cTipInci( aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], dbfInci, oNomInci ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwIncidencia( dbfInci, aGet[ ( dbfTmpInc )->( FieldPos( \"cCodTip\" ) ) ], oNomInci ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oNomInci VAR cNomInci;\n         ID       130 ;\n         WHEN     .f. ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"dFecInc\" ) ) ] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lAviso\" ) ) ] ;\n         ID       150 ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET aTmp[ ( dbfTmpInc )->( FieldPos( \"mDesInc\" ) ) ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE CHECKBOX aTmp[ ( dbfTmpInc )->( FieldPos( \"lListo\" ) ) ] ;\n         ID       140 ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      if ( \"PDA\" $ cParamsMain() )\n\n         REDEFINE SAY oTitulo VAR cTitulo;\n               ID       1000 ;\n               OF       oDlg\n\n      end if\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( IDOK ) } )\n   end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\nReturn ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nStatic Function EdtDoc( aTmp, aGet, dbfAlbCliD, oBrw, bWhen, bValid, nMode, aTmpLin )\n\n   local oDlg\n   local oRuta\n   local oNombre\n   local oObservacion\n\n   DEFINE DIALOG oDlg RESOURCE \"DOCUMENTOS\" TITLE LblTitle( nMode ) + \"documento de albaranes de clientes\"\n\n      REDEFINE GET oNombre VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"cNombre\" ) ) ] ;\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE GET oRuta VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"cRuta\" ) ) ] ;\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"FOLDER\" ;\n         ON HELP  ( oRuta:cText( cGetFile( 'Doc ( *.* ) | *.*', 'Seleccione el nombre del fichero' ) ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oObservacion VAR aTmp[ ( dbfTmpDoc )->( FieldPos( \"mObsDoc\" ) ) ] ;\n         MEMO ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oDlg\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      if nMode != ZOOM_MODE\n         oDlg:AddFastKey( VK_F5, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( IDOK ) } )\n      end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\nReturn ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION PrnSerie()\n\n	local oDlg\n   local oFmtDoc\n   local cFmtDoc     := cFormatoDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount )\n   local oSayFmt\n   local cSayFmt\n   local oSerIni\n   local oSerFin   \n   local cSerIni     := (dbfAlbCliT)->cSerAlb\n   local cSerFin     := (dbfAlbCliT)->cSerAlb\n   local nDocIni     := (dbfAlbCliT)->nNumAlb\n   local nDocFin     := (dbfAlbCliT)->nNumAlb\n   local cSufIni     := (dbfAlbCliT)->cSufAlb\n   local cSufFin     := (dbfAlbCliT)->cSufAlb\n   local oPrinter\n   local cPrinter    := PrnGetName()\n   local lCopiasPre  := .t.\n   local lInvOrden   := .f.\n   local oNumCop\n   local nNumCop     := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n   local oRango\n   local nRango      := 1\n   local dFecDesde   := CtoD( \"01/01/\" + Str( Year( Date() ) ) )\n   local dFecHasta   := Date()\n\n   if Empty( cFmtDoc )\n      cFmtDoc        := cSelPrimerDoc( \"AC\" )\n   end if\n\n   cSayFmt           := cNombreDoc( cFmtDoc )\n\n   DEFINE DIALOG oDlg RESOURCE \"IMPSERIES\" TITLE \"Imprimir series de albaranes\"\n\n   REDEFINE RADIO oRango VAR nRango ;\n      ID       201, 202 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR cSerIni ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      VALID    ( cSerIni >= \"A\" .AND. cSerIni <= \"Z\"  );\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR cSerFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      VALID    ( cSerFin >= \"A\" .AND. cSerFin <= \"Z\"  );\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET nDocIni;\n      ID       120 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET nDocFin;\n      ID       130 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET cSufIni ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET cSufFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( nRango == 1 ); \n      OF       oDlg\n\n   REDEFINE GET dFecDesde ;\n      ID       210 ;\n      WHEN     ( nRango == 2 ) ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE GET dFecHasta ;\n      ID       220 ;\n      WHEN     ( nRango == 2 ) ;\n      SPINNER ;\n      OF       oDlg   \n\n   REDEFINE CHECKBOX lInvOrden ;\n      ID       500 ;\n      OF       oDlg\n\n   REDEFINE CHECKBOX lCopiasPre ;\n      ID       170 ;\n      OF       oDlg\n\n   REDEFINE GET oNumCop VAR nNumCop;\n      ID       180 ;\n      WHEN     !lCopiasPre ;\n      VALID    nNumCop > 0 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      MIN      1 ;\n      MAX      99999 ;\n      OF       oDlg\n\n   REDEFINE GET oFmtDoc VAR cFmtDoc ;\n      ID       90 ;\n      COLOR    CLR_GET ;\n      VALID    ( cDocumento( oFmtDoc, oSayFmt, dbfDoc ) ) ;\n      BITMAP   \"LUPA\" ;\n      ON HELP  ( BrwDocumento( oFmtDoc, oSayFmt, \"AC\" ) ) ;\n      OF       oDlg\n\n   REDEFINE GET oSayFmt VAR cSayFmt ;\n      ID       91 ;\n      WHEN     ( .f. );\n      COLOR    CLR_GET ;\n      OF       oDlg\n\n   TBtnBmp():ReDefine( 92, \"Printer_pencil_16\",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .f., , .f.,  )\n\n   REDEFINE GET oPrinter VAR cPrinter;\n      WHEN     ( .f. ) ;\n      ID       160 ;\n      OF       oDlg\n\n   TBtnBmp():ReDefine( 161, \"Printer_preferences_16\",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .f., , .f.,  )\n\n   REDEFINE BUTTON ;\n      ID       IDOK ;\n		OF 		oDlg ;\n      ACTION   (  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ),;\n                  oDlg:end( IDOK ) )\n\n   REDEFINE BUTTON ;\n      ID       IDCANCEL ;\n		OF 		oDlg ;\n      ACTION   ( oDlg:end() )\n\n   oDlg:bStart := { || oSerIni:SetFocus() }\n\n   oDlg:AddFastKey( VK_F5, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta ), oDlg:end( IDOK ) } )\n\n   ACTIVATE DIALOG oDlg CENTER\n\n	oWndBrw:oBrw:refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden, nRango, dFecDesde, dFecHasta )\n\n   local nCopyClient\n   local nRecno\n   local nOrdAnt\n\n   oDlg:disable()\n\n   if nRango == 1\n\n      nRecno      := ( dbfAlbCliT )->( recno() )\n      nOrdAnt     := ( dbfAlbCliT )->( OrdSetFocus( \"nNumAlb\" ) )\n\n      if !lInvOrden\n\n         ( dbfAlbCliT )->( DbSeek( cDocIni, .t. ) )\n\n         while ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb >= cDocIni .AND. ;\n               ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb <= cDocFin\n\n               lChgImpDoc( dbfAlbCliT )\n\n            if lCopiasPre\n\n               nCopyClient := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n\n               GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + (dbfAlbCliT)->cSerAlb + Str( (dbfAlbCliT)->nNumAlb ) + (dbfAlbCliT)->cSufAlb, cFmtDoc, cPrinter, nCopyClient )\n\n            else\n\n               GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + (dbfAlbCliT)->cSerAlb + Str( (dbfAlbCliT)->nNumAlb ) + (dbfAlbCliT)->cSufAlb, cFmtDoc, cPrinter, nNumCop )\n\n            end if\n\n            ( dbfAlbCliT )->( DbSkip( 1 ) )\n\n         end do\n\n      else\n\n      ( dbfAlbCliT )->( DbSeek( cDocFin ) )\n\n         while ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb >= cDocIni .and.;\n               ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb <= cDocFin .and.;\n               !( dbfAlbCliT )->( Bof() )\n\n               lChgImpDoc( dbfAlbCliT )\n\n            if lCopiasPre\n\n               nCopyClient := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n\n               GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, cFmtDoc, cPrinter, nCopyClient )\n\n            else\n\n               GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, cFmtDoc, cPrinter, nNumCop )\n\n            end if\n\n            ( dbfAlbCliT )->( DbSkip( -1 ) )\n\n         end while\n\n      end if\n\n   else\n\n      nRecno      := ( dbfAlbCliT )->( recno() )\n      nOrdAnt     := ( dbfAlbCliT )->( OrdSetFocus( \"dFecAlb\" ) )\n\n      if !lInvOrden\n\n         ( dbfAlbCliT )->( dbGoTop() )\n\n         while !( dbfAlbCliT )->( Eof() )\n\n            if ( dbfAlbCliT )->dFecAlb >= dFecDesde .and. ( dbfAlbCliT )->dFecAlb <= dFecHasta\n\n               lChgImpDoc( dbfAlbCliT )\n\n               if lCopiasPre\n\n                  nCopyClient := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n\n                  GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + (dbfAlbCliT)->cSerAlb + Str( (dbfAlbCliT)->nNumAlb ) + (dbfAlbCliT)->cSufAlb, cFmtDoc, cPrinter, nCopyClient )\n\n               else\n\n                  GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + (dbfAlbCliT)->cSerAlb + Str( (dbfAlbCliT)->nNumAlb ) + (dbfAlbCliT)->cSufAlb, cFmtDoc, cPrinter, nNumCop )\n\n               end if\n\n            end if  \n\n            ( dbfAlbCliT )->( DbSkip( 1 ) )\n\n         end while\n\n      else\n\n         ( dbfAlbCliT )->( dbGoBottom() )\n\n         while !( dbfAlbCliT )->( Bof() )\n\n            if ( dbfAlbCliT )->dFecAlb >= dFecDesde .and. ( dbfAlbCliT )->dFecAlb <= dFecHasta\n\n               lChgImpDoc( dbfAlbCliT )\n\n               if lCopiasPre\n\n                  nCopyClient := if( nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) == 0, Max( Retfld( ( dbfAlbCliT )->cCodCli, dbfClient, \"CopiasF\" ), 1 ), nCopiasDocumento( ( dbfAlbCliT )->cSerAlb, \"nAlbCli\", dbfCount ) )\n\n                  GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, cFmtDoc, cPrinter, nCopyClient )\n\n               else\n\n                  GenAlbCli( IS_PRINTER, \"Imprimiendo documento : \" + ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, cFmtDoc, cPrinter, nNumCop )\n\n               end if\n\n            end if\n\n            ( dbfAlbCliT )->( DbSkip( -1 ) )\n\n         end while\n\n      end if\n   \n   end if   \n\n   ( dbfAlbCliT )->( dbGoTo( nRecNo ) )\n   ( dbfAlbCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oDlg:enable()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n/*\nTotal de unidades en un albaran\n*/\n\nstatic function nTotalUnd( nAlbaran, dbfAlbCliL, cPicUnd )\n\n   local nTotUnd  := 0\n   local nRecNum  := ( dbfAlbCliL )->( RecNo() )\n\n   if ( dbfAlbCliL )->( DbSeek( nAlbaran ) )\n      while  ( dbfAlbCliL )->CSERALB + Str( ( dbfAlbCliL )->NNUMALB ) + ( dbfAlbCliL )->CSUFALB == nAlbaran .and. ( dbfAlbCliL )->( !eof() )\n         nTotUnd  += nTotNAlbCli( dbfAlbCliL )\n         ( dbfAlbCliL )->( dbSkip() )\n      end do\n   end if\n\n   ( dbfAlbCliL )->( dbGoTo( nRecNum ) )\n\nRETURN ( Trans( nTotUnd, cPicUnd ) )\n\n//--------------------------------------------------------------------------//\n\nFunction aTotAlbCli( cAlbaran, dbfMaster, dbfLine, dbfIva, dbfDiv, cDivRet, lExcCnt )\n\n   nTotAlbCli( cAlbaran, dbfMaster, dbfLine, dbfIva, dbfDiv, nil, cDivRet, .f., lExcCnt )\n\nReturn ( { nTotNet, nTotIva, nTotReq, nTotAlb, nTotPnt, nTotTrn, nTotAge, aTotIva, nTotCos, nTotIvm, nTotRnt, nTotDto, nTotDpp, nTotUno, nTotDos, nTotBrt } )\n\n//--------------------------------------------------------------------------//\n\nFunction sTotAlbCli( cAlbaran, dbfMaster, dbfLine, dbfIva, dbfDiv, cDivRet, lExcCnt )\n\n   local sTotal\n\n   nTotAlbCli( cAlbaran, dbfMaster, dbfLine, dbfIva, dbfDiv, nil, cDivRet, .f., lExcCnt )\n\n   sTotal                                 := sTotal()\n   sTotal:nTotalBruto                     := nTotBrt\n   sTotal:nTotalNeto                      := nTotNet\n   sTotal:nTotalIva                       := nTotIva\n   sTotal:aTotalIva                       := aTotIva\n   sTotal:nTotalRecargoEquivalencia       := nTotReq\n   sTotal:nTotalDocumento                 := nTotAlb\n   sTotal:nTotalPuntoVerde                := nTotPnt\n   sTotal:nTotalTransporte                := nTotTrn\n   sTotal:nTotalAgente                    := nTotAge\n   sTotal:nTotalCosto                     := nTotCos\n   sTotal:nTotalImpuestoHidrocarburos     := nTotIvm\n   sTotal:nTotalRentabilidad              := nTotRnt\n   sTotal:nTotalDescuentoGeneral          := nTotDto\n   sTotal:nTotalDescuentoProntoPago       := nTotDpp\n   sTotal:nTotalDescuentoUno              := nTotUno\n   sTotal:nTotalDescuentoDos              := nTotDos\n\nReturn ( sTotal )\n\n//--------------------------------------------------------------------------//\n\nStatic Function QuiAlbCli()\n\n   local nOrdLin\n   local nOrdPgo\n   local nOrdInc\n   local nOrdDoc\n   local cNumPed\n   local cNumSat\n   local aNumPed\n\n   if ( dbfAlbCliT )->lCloAlb .and. !oUser():lAdministrador()\n      msgStop( \"Solo pueden eliminar albarares cerrados los administradores.\" )\n      Return .f.\n   end if\n\n   CursorWait()\n\n   aNumPed        := {}\n   cNumPed        := ( dbfAlbCliT )->cNumPed\n   cNumSat        := ( dbfAlbCliT )->cNumSat\n   nOrdLin        := ( dbfAlbCliL )->( OrdSetFocus( \"nNumAlb\" ) )\n   nOrdPgo        := ( dbfAlbCliP )->( OrdSetFocus( \"nNumAlb\" ) )\n   nOrdInc        := ( dbfAlbCliI )->( OrdSetFocus( \"nNumAlb\" ) )\n   nOrdDoc        := ( dbfAlbCliD )->( OrdSetFocus( \"nNumAlb\" ) )\n\n   /*\n   Eliminamos las entregas-----------------------------------------------------\n   */\n\n   while ( dbfAlbCliP )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) ) .and. !( dbfAlbCliP )->( eof() )\n\n      if ( dbfPedCliP )->( dbSeek( ( dbfAlbCliP )->cNumRec ) )\n         if dbLock( dbfPedCliP )\n            ( dbfPedCliP )->lPasado := .f.\n            ( dbfPedCliP )->( dbUnLock() )\n         end if\n      end if\n\n      if dbDialogLock( dbfAlbCliP )\n         ( dbfAlbCliP )->( dbDelete() )\n         ( dbfAlbCliP )->( dbUnLock() )\n      end if\n\n      ( dbfAlbCliP )->( dbSkip() )\n\n   end do\n\n   /*\n   Detalle---------------------------------------------------------------------\n   */\n\n   while ( dbfAlbCliL )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb ) ) .and. !( dbfAlbCliL )->( eof() )\n      \n      if aScan( aNumPed, ( dbfAlbCliL )->cNumPed ) == 0\n         aAdd( aNumPed, ( dbfAlbCliL )->cNumPed )\n      end if      \n\n      if dbLock( dbfAlbCliL )\n         ( dbfAlbCliL )->( dbDelete() )\n         ( dbfAlbCliL )->( dbUnLock() )\n      end if\n\n   end while\n\n   /*\n   Incidencias-----------------------------------------------------------------\n   */\n\n   while ( dbfAlbCliI )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb ) ) .and. !( dbfAlbCliI )->( eof() )\n      if dbLock( dbfAlbCliI )\n         ( dbfAlbCliI )->( dbDelete() )\n         ( dbfAlbCliI )->( dbUnLock() )\n      end if\n   end while\n\n   /*\n   Documentos------------------------------------------------------------------\n   */\n\n   while ( dbfAlbCliD )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb ) ) .and. !( dbfAlbCliD )->( eof() )\n      if dbLock( dbfAlbCliD )\n         ( dbfAlbCliD )->( dbDelete() )\n         ( dbfAlbCliD )->( dbUnLock() )\n      end if\n   end while\n\n   /*\n   Series----------------------------------------------------------------------\n   */\n\n   while ( dbfAlbCliS )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb ) ) .and. !( dbfAlbCliS )->( eof() )\n      if dbLock( dbfAlbCliS )\n         ( dbfAlbCliS )->( dbDelete() )\n         ( dbfAlbCliS )->( dbUnLock() )\n      end if\n   end while\n\n   /*\n   Estado del pedido si tiramos de uno-----------------------------------------\n   */\n\n   if !Empty( cNumPed )\n      oStock:SetEstadoPedCli( cNumPed, .t., ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb )\n   end if\n\n   /*\n   Estado de los pedidos cuando es agrupando-----------------------------------\n   */\n\n   for each cNumPed in aNumPed\n      oStock:SetEstadoPedCli( cNumPed )\n   next   \n\n   /*\n   Estado del Sat si tiramos de uno-----------------------------------------\n   */\n\n   if !Empty( cNumSat )\n      oStock:SetEstadoSatCli( cNumSat, .t., ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb )\n   end if\n\n   /*\n   Estado de los sat cuando es agrupando-----------------------------------\n   */\n\n   while dbSeekInOrd( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT  )->cSufAlb, \"cNumAlb\", dbfSatCliT ) .and. !( dbfSatCliT )->( Eof() )\n\n      if dbLock( dbfSatCliT )\n         ( dbfSatCliT )->cNumAlb    := \"\"\n         ( dbfSatCliT )->lEstado    := .f.\n         ( dbfSatCliT )->( dbUnLock() )\n      end if\n\n   end while\n\n   /*\n   Cerramos las tablas---------------------------------------------------------\n   */\n\n   ( dbfAlbCliL )->( OrdSetFocus( nOrdLin ) )\n   ( dbfAlbCliP )->( OrdSetFocus( nOrdPgo ) )\n   ( dbfAlbCliI )->( OrdSetFocus( nOrdInc ) )\n   ( dbfAlbCliD )->( OrdSetFocus( nOrdDoc ) )\n\n   CursorWE()\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\nFUNCTION BrwAlbCli( oGet, oIva )\n\n	local oDlg\n	local oBrw\n   local oGet1\n   local cGet1\n   local lIva     := oIva:VarGet()\n   local oCbxOrd\n   local cCbxOrd\n   local nOrd\n   local aCbxOrd\n\n   if !OpenFiles()\n      Return .f.\n   end if\n\n   aCbxOrd        := { \"N. albarán\", \"Fecha\", \"Cliente\", \"Nombre\", \"Su albarán\" }\n   nOrd           := GetBrwOpt( \"BrwAlbCli\" )\n   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )\n   cCbxOrd        := aCbxOrd[ nOrd ]\n\n   ( dbfAlbCliT )->( dbSetFilter( {|| !Field->lFacturado .and. Field->lIvaInc == lIva }, \"!lFacturado .and. lIvaInc == lIva\" ) )\n   ( dbfAlbCliT )->( dbGoTop() )\n\n   DEFINE DIALOG oDlg RESOURCE \"HELPENTRY\" TITLE if( lIva, \"Albaranes de clientes con \" + cImp() + \" incluido\", \"Albaranes de clientes con \" + cImp() + \" desglosado\" )\n\n		REDEFINE GET oGet1 VAR cGet1;\n			ID 		104 ;\n         ON CHANGE( AutoSeek( nKey, nFlags, Self, oBrw, dbfAlbCliT, .t., nil, .t. ) );\n         VALID    ( OrdClearScope( oBrw, dbfAlbCliT ) );\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n		REDEFINE COMBOBOX oCbxOrd ;\n			VAR 		cCbxOrd ;\n			ID 		102 ;\n         ITEMS    aCbxOrd ;\n         ON CHANGE( ( dbfAlbCliT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() ) ;\n			OF 		oDlg\n\n      oBrw                 := IXBrowse():New( oDlg )\n\n      oBrw:bClrSel         := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrw:bClrSelFocus    := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrw:cAlias          := dbfAlbCliT\n      oBrw:nMarqueeStyle   := 5\n      oBrw:cName           := \"Albaran de cliente.Browse\"\n\n      oBrw:bLDblClick      := {|| oDlg:end( IDOK ) }\n\n      oBrw:CreateFromResource( 105 )\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Tipo\"\n         :bEditValue       := {|| aTipAlb[ if( ( dbfAlbCliT )->lAlquiler, 2, 1  ) ] }\n         :nWidth           := 50\n         :lHide            := .t.\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Número\"\n         :cSortOrder       := \"nNumAlb\"\n         :bEditValue       := {|| ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb }\n         :nWidth           := 60\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Fecha\"\n         :cSortOrder       := \"dFecAlb\"\n         :bEditValue       := {|| dtoc( ( dbfAlbCliT )->dFecAlb ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Cliente\"\n         :cSortOrder       := \"cCodCli\"\n         :bEditValue       := {|| AllTrim( ( dbfAlbCliT )->cCodCli ) }\n         :nWidth           := 80\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Nombre\"\n         :cSortOrder       := \"cNomCli\"\n         :bEditValue       := {|| AllTrim( ( dbfAlbCliT )->cNomCli ) }\n         :nWidth           := 200\n         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }\n      end with\n\n      with object ( oBrw:AddCol() )\n         :cHeader          := \"Importe\"\n         :bEditValue       := {|| nTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, cDivEmp(), .t. )  }\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n		REDEFINE BUTTON ;\n			ID 		500 ;\n			OF 		oDlg ;\n         ACTION   ( WinAppRec( oBrw, bEdtRec, dbfAlbCliT ) )\n\n		REDEFINE BUTTON ;\n			ID 		501 ;\n			OF 		oDlg ;\n         ACTION   ( WinEdtRec( oBrw, bEdtRec, dbfAlbCliT ) )\n\n		REDEFINE BUTTON ;\n         ID       IDOK ;\n			OF 		oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n		REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n			OF 		oDlg ;\n			ACTION 	( oDlg:end() )\n\n      oDlg:AddFastKey( VK_F5, {|| oDlg:end( IDOK ) } )\n\n      oDlg:bStart    := {|| oBrw:Refresh( .t. ) }\n\n   ACTIVATE DIALOG oDlg ;\n   ON INIT ( oBrw:Load() ) ;\n   CENTER\n\n   DestroyFastFilter( dbfAlbCliT )\n\n   SetBrwOpt( \"BrwAlbCli\", ( dbfAlbCliT )->( OrdNumber() ) )\n\n   ( dbfAlbCliT )->( dbClearFilter() )\n\n   if oDlg:nResult == IDOK\n      oGet:cText( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb )\n      oGet:lValid()\n   end if\n\n   CloseFiles()\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\n//\n// Importa pedidos de clientes\n//\n\nSTATIC FUNCTION cPedCli( aGet, aTmp, oBrwLin, oBrwPgo, nMode )\n\n   local nDiv\n   local cDesAlb\n   local nTotRet\n   local cPedido  := aGet[ _CNUMPED ]:VarGet()\n   local lValid   := .f.\n\n   if nMode != APPD_MODE .or. Empty( cPedido )\n      Return .t.\n   end if\n\n   if dbSeekInOrd( cPedido, \"nNumPed\", dbfPedCliT )\n\n      CursorWait()\n\n      if ( dbfPedCliT )->nEstado == 3\n\n         MsgStop( \"Pedido recibido\" )\n         lValid   := .f.\n\n      else\n\n         aGet[ _CSERALB ]:cText( (dbfPedCliT)->cSerPed )\n         aGet[ _CNUMPED ]:bWhen := {|| .f. }\n\n         aGet[ _CCODCLI ]:cText( (dbfPedCliT)->CCODCLI )\n         aGet[ _CCODCLI ]:lValid()\n         aGet[ _CCODCLI ]:Disable()\n\n         aGet[ _CNOMCLI ]:cText( (dbfPedCliT)->CNOMCLI )\n         aGet[ _CDIRCLI ]:cText( (dbfPedCliT)->CDIRCLI )\n         aGet[ _CPOBCLI ]:cText( (dbfPedCliT)->CPOBCLI )\n         aGet[ _CPRVCLI ]:cText( (dbfPedCliT)->CPRVCLI )\n         aGet[ _CPOSCLI ]:cText( (dbfPedCliT)->CPOSCLI )\n         aGet[ _CDNICLI ]:cText( (dbfPedCliT)->CDNICLI )\n         aGet[ _CCODALM ]:cText( (dbfPedCliT)->CCODALM )\n         aGet[ _CTLFCLI ]:cText( (dbfPedCliT)->CTLFCLI )\n         aGet[ _CCODALM ]:lValid()\n\n         aGet[ _CCODCAJ ]:cText( (dbfPedCliT)->cCodCaj )\n         aGet[ _CCODCAJ ]:lValid()\n\n         aGet[ _CCODPAGO]:cText( (dbfPedCliT)->CCODPGO )\n         aGet[ _CCODPAGO]:lValid()\n\n         aGet[ _CCODAGE ]:cText( (dbfPedCliT)->CCODAGE )\n         aGet[ _CCODAGE ]:lValid()\n\n         aGet[ _NPCTCOMAGE ]:cText( ( dbfPedCliT )->nPctComAge )\n\n         aGet[ _CCODTAR ]:cText( (dbfPedCliT)->CCODTAR )\n         aGet[ _CCODTAR ]:lValid()\n\n         aGet[ _CCODOBR ]:cText( (dbfPedCliT)->CCODOBR )\n         aGet[ _CCODOBR ]:lValid()\n\n         aGet[ _NTARIFA ]:cText( ( dbfPedCliT )->nTarifa )\n\n         aGet[ _CCODTRN ]:cText( ( dbfPedCliT )->cCodTrn )\n         aGet[ _CCODTRN ]:lValid()\n\n         aGet[ _LIVAINC ]:Click( ( dbfPedCliT )->lIvaInc )\n         aGet[ _LRECARGO]:Click( ( dbfPedCliT )->lRecargo )\n         aGet[ _LOPERPV ]:Click( ( dbfPedCliT )->lOperPv )\n\n         /*\n         Pasamos los comentarios-----------------------------------------------\n         */\n\n         aGet[ _CCONDENT ]:cText( ( dbfPedCliT )->cCondEnt )\n         aGet[ _MCOMENT  ]:cText( ( dbfPedCliT )->mComent )\n         aGet[ _MOBSERV  ]:cText( ( dbfPedCliT )->mObserv )\n\n         /*\n         Pasamos todos los Descuentos------------------------------------------\n			*/\n\n         aGet[_CDTOESP]:cText( ( dbfPedCliT )->cDtoEsp )\n         aGet[_NDTOESP]:cText( ( dbfPedCliT )->nDtoEsp )\n         aGet[_CDPP   ]:cText( ( dbfPedCliT )->cDpp    )\n         aGet[_NDPP   ]:cText( ( dbfPedCliT )->nDpp    )\n         aGet[_CDTOUNO]:cText( ( dbfPedCLiT )->cDtoUno )\n         aGet[_NDTOUNO]:cText( ( dbfPedCLiT )->nDtoUno )\n         aGet[_CDTODOS]:cText( ( dbfPedCLiT )->cDtoDos )\n         aGet[_NDTODOS]:cText( ( dbfPedCLiT )->nDtoDos )\n         aGet[_CMANOBR]:cText( ( dbfPedCliT )->cManObr )\n         aGet[_NIVAMAN]:cText( ( dbfPedCliT )->nIvaMan )\n         aGet[_NMANOBR]:cText( ( dbfPedCliT )->nManObr )\n         aGet[_NBULTOS]:cText( ( dbfPedCliT )->nBultos )\n\n         aTmp[_CSUPED ]                := ( dbfPedCliT )->cSuPed\n\n         /*\n         Código de grupo\n         */\n\n         aTmp[_CCODGRP]                := ( dbfPedCliT )->cCodGrp\n         aTmp[_LMODCLI]                := ( dbfPedCliT )->lModCli\n         aTmp[_LOPERPV]                := ( dbfPedCliT )->lOperPv\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]            := ( dbfPedCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]            := ( dbfPedCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]            := ( dbfPedCliT )->dFecSal\n\n         if !Empty( oTipAlb )\n            if ( dbfPedCliT )->lAlquiler\n               oTipAlb:Select( 2 )\n            else\n               oTipAlb:Select( 1 )\n            end if\n         end if\n\n			/*\n         Si encuentra las lineas-----------------------------------------------\n			*/\n\n         if ( dbfPedCliL )->( dbSeek( cPedido ) )\n\n            if lNumPed()\n               ( dbfTmpLin )->( dbAppend() )\n               cDesAlb                 := Rtrim( cNumPed() ) + Space( 1 ) + ( dbfPedCliT )->cSerPed + \"/\" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + \"/\" + ( dbfPedCliT )->cSufPed\n               cDesAlb                 += \" - Fecha \" + Dtoc( ( dbfPedCliT )->dFecPed )\n               (dbfTmpLin)->cDetalle   := cDesAlb\n               (dbfTmpLin)->lControl   := .t.\n            end if\n\n            while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cPedido )\n\n               nTotRet                 := ( dbfPedCliL )->nUniCaja\n               nTotRet                 -= nUnidadesRecibidasAlbCli( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cRefPrv, ( dbfPedCliL )->cDetalle, dbfAlbCliL )\n               nTotRet                 -= nUnidadesRecibidasFacCli( cPedido, ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, dbfFacCliL )\n\n               //if ( nTotNPedCli( dbfPedCliL ) == 0 .or. nTotRet > 0 ) para meter lineas en negativo\n\n                  (dbfTmpLin)->( dbAppend() )\n\n                  (dbfTmpLin)->nNumAlb    := 0\n                  (dbfTmpLin)->nNumLin    := (dbfPedCliL)->nNumLin\n                  (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef\n                  (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle\n                  (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes\n                  (dbfTmpLin)->mNumSer    := (dbfPedCliL)->mNumSer\n                  (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv\n                  (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer\n                  (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn\n                  (dbfTmpLin)->nUndKit    := (dbfPedCliL)->nUndKit\n                  (dbfTmpLin)->nPesoKg    := (dbfPedCliL)->nPesoKg\n                  (dbfTmpLin)->cPesoKg    := (dbfPedCliL)->cPesoKg\n                  (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad\n                  (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen\n                  (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen\n                  (dbfTmpLin)->nIva       := (dbfPedCliL)->nIva\n                  (dbfTmpLin)->nReq       := (dbfPedCliL)->nReq\n                  (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad\n                  (dbfTmpLin)->nDto       := (dbfPedCliL)->nDto\n                  (dbfTmpLin)->nDtoPrm    := (dbfPedCliL)->nDtoPrm\n                  (dbfTmpLin)->nComAge    := (dbfPedCliL)->nComAge\n                  (dbfTmpLin)->lTotLin    := (dbfPedCliL)->lTotLin\n                  (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv\n                  (dbfTmpLin)->nCtlStk    := (dbfPedCliL)->nCtlStk\n                  (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv\n                  (dbfTmpLin)->nPvpRec    := (dbfPedCliL)->nPvpRec\n                  (dbfTmpLin)->cTipMov    := (dbfPedCliL)->cTipMov\n                  (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin\n                  (dbfTmpLin)->lIvaLin    := (dbfPedCliL)->lIvaLin\n                  (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n                  (dbfTmpLin)->nValImp    := (dbfPedCliL)->nValImp\n                  (dbfTmpLin)->nMesGrt    := (dbfPedCliL)->nMesGrt\n                  (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote\n                  (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote\n                  (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote\n                  (dbfTmpLin)->lKitArt    := (dbfPedCliL)->lKitArt\n                  (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl\n                  (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc\n                  (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta\n                  (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta\n                  (dbfTmpLin)->cCodPr1    := (dbfPedCliL)->cCodPr1\n                  (dbfTmpLin)->cCodPr2    := (dbfPedCliL)->cCodPr2\n                  (dbfTmpLin)->cValPr1    := (dbfPedCliL)->cValPr1\n                  (dbfTmpLin)->cValPr2    := (dbfPedCliL)->cValPr2\n                  (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin\n                  (dbfTmpLin)->cCodTip    := (dbfPedCliL)->cCodTip\n                  (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin\n                  (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n                  (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv\n                  (dbfTmpLin)->cNomPrv    := (dbfPedCliL)->cNomPrv\n                  (dbfTmpLin)->cImagen    := (dbfPedCliL)->cImagen\n                  (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam\n                  (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam\n                  (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv\n                  (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt\n                  (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal\n                  (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq\n                  (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler\n                  (dbfTmpLin)->nNumMed    := (dbfPedCliL)->nNumMed\n                  (dbfTmpLin)->nMedUno    := (dbfPedCliL)->nMedUno\n                  (dbfTmpLin)->nMedDos    := (dbfPedCliL)->nMedDos\n                  (dbfTmpLin)->nMedTre    := (dbfPedCliL)->nMedTre\n                  (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos\n                  (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt\n                  (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt\n                  (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt\n                  (dbfTmpLin)->cNumPed    := cPedido\n                  (dbfTmpLin)->lControl   := (dbfPedCliL)->lControl\n                  (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe\n\n                  /*\n                  Pasamos las ubicaciones de la mercancía\n                  */\n\n                  if dbSeekInOrd( cPedido + ( dbfPedCliL )->cRef + ( dbfPedCliL )->cValPr1 + ( dbfPedCliL )->cValPr2 + ( dbfPedCliL )->cLote + ( dbfPedCliL )->cDetalle, \"cPCliDet\", dbfAlbPrvL )\n\n                     ( dbfTmpLin )->cCodUbi1 := ( dbfAlbPrvL )->cCodUbi1\n                     ( dbfTmpLin )->cCodUbi2 := ( dbfAlbPrvL )->cCodUbi2\n                     ( dbfTmpLin )->cCodUbi3 := ( dbfAlbPrvL )->cCodUbi3\n                     ( dbfTmpLin )->cValUbi1 := ( dbfAlbPrvL )->cValUbi1\n                     ( dbfTmpLin )->cValUbi2 := ( dbfAlbPrvL )->cValUbi2\n                     ( dbfTmpLin )->cValUbi3 := ( dbfAlbPrvL )->cValUbi3\n                     ( dbfTmpLin )->cNomUbi1 := ( dbfAlbPrvL )->cNomUbi1\n                     ( dbfTmpLin )->cNomUbi2 := ( dbfAlbPrvL )->cNomUbi2\n                     ( dbfTmpLin )->cNomUbi3 := ( dbfAlbPrvL )->cNomUbi3\n\n                  end if\n\n                  if !( dbfPedCliL )->lKitArt\n\n                     /*\n                     Comprobamos si hay calculos por cajas\n                     */\n\n                     if lCalCaj()\n\n                        nDiv                       := DecimalMod( nTotRet, ( dbfPedCliL )->nCanPed )\n                        if nDiv == 0 .and. ( dbfPedCliL )->nCanPed != 0\n                           ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed\n                           ( dbfTmpLin )->nUniCaja := nTotRet // / ( dbfPedCliL )->nCanPed\n                        else\n                           ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed\n                           ( dbfTmpLin )->nUniCaja := nTotRet\n                        end if\n\n                     else\n\n                        ( dbfTmpLin )->nUniCaja    := nTotRet\n\n                     end if\n\n                  else\n\n                     ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed\n                     ( dbfTmpLin )->nUniCaja := ( dbfPedCliL )->nUniCaja\n\n                  end if\n\n               //end if\n\n               ( dbfPedCliL )->( dbSkip( 1 ) )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos los pagos a cuenta-----------------------------------------\n            */\n\n            if ( dbfPedCliP )->( dbSeek( cPedido ) )\n\n               while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cPedido .and. !( dbfPedCliP )->( Eof() )\n\n                  if !( dbfPedCliP )->lPasado\n\n                     ( dbfTmpPgo )->( dbAppend() )\n\n                     ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( Recno() )\n                     ( dbfTmpPgo )->cCodCaj  := ( dbfPedCliP )->cCodCaj\n                     ( dbfTmpPgo )->cTurRec  := ( dbfPedCliP )->cTurRec\n                     ( dbfTmpPgo )->cCodCli  := ( dbfPedCliP )->cCodCli\n                     ( dbfTmpPgo )->dEntrega := ( dbfPedCliP )->dEntrega\n                     ( dbfTmpPgo )->nImporte := ( dbfPedCliP )->nImporte\n                     ( dbfTmpPgo )->cDescrip := ( dbfPedCliP )->cDesCrip\n                     ( dbfTmpPgo )->cPgdoPor := ( dbfPedCliP )->cPgdoPor\n                     ( dbfTmpPgo )->cDocPgo  := ( dbfPedCliP )->cDocPgo\n                     ( dbfTmpPgo )->cDivPgo  := ( dbfPedCliP )->cDivPgo\n                     ( dbfTmpPgo )->nVdvPgo  := ( dbfPedCliP )->nVdvPgo\n                     ( dbfTmpPgo )->cCodAge  := ( dbfPedCliP )->cCodAge\n                     ( dbfTmpPgo )->cCodPgo  := ( dbfPedCliP )->cCodPgo\n                     ( dbfTmpPgo )->cBncEmp  := ( dbfPedCliP )->cBncEmp\n                     ( dbfTmpPgo )->cBncCli  := ( dbfPedCliP )->cBncCli\n                     ( dbfTmpPgo )->cEntEmp  := ( dbfPedCliP )->cEntEmp\n                     ( dbfTmpPgo )->cSucEmp  := ( dbfPedCliP )->cSucEmp\n                     ( dbfTmpPgo )->cDigEmp  := ( dbfPedCliP )->cDigEmp\n                     ( dbfTmpPgo )->cCtaEmp  := ( dbfPedCliP )->cCtaEmp\n                     ( dbfTmpPgo )->cEntCli  := ( dbfPedCliP )->cEntCli\n                     ( dbfTmpPgo )->cSucCli  := ( dbfPedCliP )->cSucCli\n                     ( dbfTmpPgo )->cDigCli  := ( dbfPedCliP )->cDigCli\n                     ( dbfTmpPgo )->cCtaCli  := ( dbfPedCliP )->cCtaCli\n                     ( dbfTmpPgo )->lCloPgo  := .f.\n                     ( dbfTmpPgo )->cNumRec  := ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed + Str( ( dbfPedCliP )->nNumRec )\n\n                  end if\n\n                  ( dbfPedCliP )->( dbSkip() )\n\n               end while\n\n            end if\n\n            ( dbfPedCliP )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias de los pedidos-----------------------------\n            */\n\n            if ( dbfPedCliI )->( dbSeek( cPedido ) )\n\n               while ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido .and. !( dbfPedCliI )->( Eof() )\n                  dbPass( dbfPedCliI, dbfTmpInc, .t. )\n                  ( dbfPedCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPedCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos de los pedidos------------------------------\n            */\n\n            if ( dbfPedCliD )->( dbSeek( cPedido ) )\n\n               while ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido .and. !( dbfPedCliD )->( Eof() )\n                  dbPass( dbfPedCliD, dbfTmpDoc, .t. )\n                  ( dbfPedCliD )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPedCliD )->( dbGoTop() )\n\n            /*\n            Refresh------------------------------------------------------------\n            */\n\n            oBrwLin:Refresh()\n            oBrwPgo:Refresh()\n\n            oBrwLin:SetFocus()\n\n         end if\n\n         lValid   := .t.\n\n      end if\n\n      aGet[ _CNUMPED ]:Disable()\n\n      CursorWE()\n\n   else\n\n		MsgStop( \"Pedido no existe\" )\n\n   end if\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nNetUAlbCli( uTmp, nDec, nVdv, lIva )\n\n   local nCalculo\n\n   DEFAULT nDec      := 0\n   DEFAULT nVdv      := 1\n   DEFAULT lIva      := .f.\n\n   nCalculo          := nTotUAlbCli( uTmp, nDec, nVdv )\n\n   if ( dbfAlbCliL )->nIva != 0\n      do case\n         case !lIva .and. ( dbfAlbCliL )->lIvaLin\n            nCalculo -= Round( nCalculo / ( 100 / ( dbfAlbCliL )->nIva + 1 ), nDec )\n         case lIva .and. !( dbfAlbCliL )->lIvaLin\n            nCalculo += Round( nCalculo * ( dbfAlbCliL )->nIva / 100, nDec )\n      end case\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nBrtLAlbCli( uTmpCab, uTmpLin, nDec, nRec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT nDec      := 2\n   DEFAULT nVdv      := 1\n\n   nCalculo          := nImpUAlbCli( uTmpCab, uTmpLin, nDec, nVdv, cPorDiv )\n   nCalculo          *= nTotNAlbCli( uTmpLin )\n\n   nCalculo          := Round( nCalculo / nVdv, nRec )\n\nReturn ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el valor del impuestos de un artículo\n*/\n/*\nFUNCTION nIvaUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := nTotUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   if !( dbfTmpLin )->lIvaLin\n      nCalculo    := nCalculo * ( dbfTmpLin )->nIva / 100\n   else\n      nCalculo    -= nCalculo / ( 1 + ( dbfTmpLin )->nIva / 100 )\n   end if\n\n   if nVdv != 0\n      nCalculo    := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n  */\n//---------------------------------------------------------------------------//\n/*\nDevuelve el precio unitario impuestos incluido\n*/\n\nFUNCTION nIncUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := nTotUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   if !( dbfTmpLin )->lIvaLin\n      nCalculo    += nCalculo * ( dbfTmpLin )->nIva / 100\n   end if\n\n	IF nVdv != 0\n      nCalculo    := nCalculo / nVdv\n	END IF\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION cDesAlbCli( cAlbCliL, cAlbCliS )\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n   DEFAULT cAlbCliS  := dbfAlbCliS\n\nRETURN ( Descrip( cAlbCliL, cAlbCliS ) )\n\n//---------------------------------------------------------------------------//\n\nFunction cFraAlbCli( cAlbCliL )\n\n   local cTxtFra     := \"\"\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n\n   if ( cAlbCliL )->lImpFra\n      cTxtFra        := ( cAlbCliL )->cTxtFra\n   end if\n\nReturn ( cTxtFra )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el precio del articulo una vez realizados los descuentos en linea\n*/\n\nFUNCTION nTotPAlbCli( dbfLin, nDec, nVdv, lDto, cPouDiv )\n\n	local nCalculo\n\n   DEFAULT dbfLin    := dbfAlbCliL\n   DEFAULT nDec      := 0\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n\n   if ( dbfLin )->lTotLin\n\n      nCalculo       := nTotUAlbCli( dbfLin, nDec, nVdv )\n\n   else\n\n      /*\n      Tomamos los valores redondeados\n      */\n\n      nCalculo       := nTotUAlbCli( dbfLin, nDec, nVdv )\n\n      nCalculo       -= Round( ( dbfLin )->nDtoDiv , nDec )\n\n      /*\n      Descuentos---------------------------------------------------------------\n      */\n\n      IF lDto\n\n         IF ( dbfLin )->NDTO != 0\n            nCalculo -= nCalculo * ( dbfLin )->NDTO / 100\n         END IF\n\n         IF ( dbfLin )->NDTOPRM != 0\n            nCalculo -= nCalculo * ( dbfLin )->NDTOPRM / 100\n         END IF\n\n      END IF\n\n      nCalculo       := Round( nCalculo, nDec )\n\n   end if\n\nRETURN ( if( cPouDiv != NIL, trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve el total de una linea con impuestos incluido\n*/\n\nFUNCTION nIncLAlbCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo := nTotLAlbCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   if !( dbfLin )->lIvaLin\n      nCalculo    += nCalculo * ( dbfLin )->nIva / 100\n   end if\n\nRETURN ( if( cPouDiv != NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nIvaLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nRou      := nRouDiv()\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n   DEFAULT lImpTrn   := .t.\n\n   nCalculo          := nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )   \n\n   if !( cAlbCliL )->lIvaLin\n      nCalculo       := nCalculo * ( cAlbCliL )->nIva / 100\n   else\n      nCalculo       -= nCalculo / ( 1 + ( cAlbCliL )->nIva / 100 )\n   end if\n\n   nCalculo          := Round( nCalculo, nRou )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el neto de una linea una vez quitados los Dtos.\n//\n\nFUNCTION nNetLAlbCli( cAlbCliT, cAlbCliL, nDec, nRou, nVdv, lIva, lDto, lImpTrn, lPntVer, cPouDiv )\n\n   local nCalculo\n\n   DEFAULT cAlbCliT  := dbfAlbCliT\n   DEFAULT cAlbCliL  := dbfAlbCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nRou      := nRouDiv()\n   DEFAULT nVdv      := 1\n   DEFAULT lIva      := .t.\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n   DEFAULT lImpTrn   := .t.\n\n   nCalculo          := nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lImpTrn, lPntVer )\n\n   if ( cAlbCliL )->nIva != 0\n      do case\n         case !lIva .and. ( cAlbCliT )->lIvaInc\n            nCalculo -= Round( nCalculo / ( 100 / ( cAlbCliL )->nIva  + 1 ), nRou )\n         case lIva .and. !( cAlbCliT )->lIvaInc\n            nCalculo += nCalculo * ( cAlbCliL )->nIva / 100\n      end case\n   end if\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nDtoAtpAlbCli( uAlbCliT, dbfAlbCliL, nDec, nRou, nVdv, lImpTrn, lPntVer )\n\n   local nCalculo\n   local nDtoAtp  := 0\n\n   DEFAULT nDec   := 0\n   DEFAULT nRou   := 0\n   DEFAULT nVdv   := 1\n   DEFAULT lPntVer:= .f.\n   DEFAULT lImpTrn:= .f.\n\n   nCalculo       := nTotLAlbCli( dbfAlbCliL, nDec, nRou, nVdv, .t., lImpTrn, lPntVer )\n\n   if ( uAlbCliT )->nSbrAtp <= 1 .and. ( uAlbCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nRou )\n\n   if ( uAlbCliT )->nSbrAtp == 2 .and. ( uAlbCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nRou )\n\n   if ( uAlbCliT )->nSbrAtp == 3 .and. ( uAlbCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nRou )\n\n   if ( uAlbCliT )->nSbrAtp == 4 .and. ( uAlbCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )\n   end if\n\n   nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nRou )\n\n   if ( uAlbCliT )->nSbrAtp == 5 .and. ( uAlbCliT )->nDtoAtp != 0\n      nDtoAtp     += Round( nCalculo * ( uAlbCliT )->nDtoAtp / 100, nRou )\n   end if\n\nRETURN ( nDtoAtp )\n\n//---------------------------------------------------------------------------//\n\n/*\nFunciones auxiliares para comunicarnos desde fuera del PRG\n*/\n\nFUNCTION Ped2AlbCli( cNumPed, dbfAlbCliT )\n\n   local oBlock\n   local oError\n   local nOrdAnt\n   local cNumAlb\n\n   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      nOrdAnt     := ( dbfAlbCliT )->( OrdSetFocus( \"cNumPed\" ) )\n\n      if ( dbfAlbCliT )->( dbSeek( cNumPed ) )\n         cNumAlb  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n      end if\n\n      if !Empty( cNumAlb )\n         EdtAlbCli( cNumAlb )\n      else\n         msgStop( \"No hay albarán asociado\" )\n      end if\n\n      ( dbfAlbCliT )->( OrdSetFocus( nOrdAnt ) )\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible abrir todas las bases de datos de albaranes\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n   \n   ErrorBlock( oBlock )\n\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\n/*\nDevuelve en numero de articulos en una linea de detalle\n*/\n\n/*STATIC FUNCTION nTotLNumArt( dbfDetalle )\n\n	local nCalculo := 0\n\n   if lCalCaj() .AND. (dbfDetalle)->NCANENT != 0 .AND. (dbfDetalle)->NSATUNIT != 0\n		nCalculo := (dbfDetalle)->NCANENT\n   end if\n\nRETURN ( nCalculo )*/\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION SelSend( oBrw )\n\n   local oDlg\n   local oFecEnv\n   local dFecEnv  := GetSysDate()\n\n   if dbDialogLock( dbfAlbCliT )\n\n      if ( dbfAlbCliT )->lEntregado\n\n         if lUsrMaster()\n\n            ( dbfAlbCliT )->lEntregado := !( dbfAlbCliT )->lEntregado\n            ( dbfAlbCliT )->dFecEnv    := Ctod( \"\" )\n\n         else\n\n            MsgStop( \"Sin autorizacion para cambio de entrega\" )\n\n         end if\n\n      else\n\n         DEFINE DIALOG oDlg RESOURCE \"ENVIADO\" TITLE \"Fecha entrega\"\n\n            REDEFINE GET oFecEnv VAR dFecEnv ;\n               ID       100 ;\n               SPINNER ;\n               BITMAP   \"LUPA\" ;\n               COLOR    CLR_GET ;\n               OF       oDlg\n\n            REDEFINE BUTTON ;\n               ID       501 ;\n               OF       oDlg ;\n               ACTION   (  ( dbfAlbCliT )->lEntregado := !( dbfAlbCliT )->lEntregado ,;\n                           ( dbfAlbCliT )->dFecEnv    := dFecEnv ,;\n                           ( dbfAlbCliT )->lSndDoc    := .t. ,;\n                           oDlg:end() )\n\n            REDEFINE BUTTON ;\n               ID       502 ;\n               OF       oDlg ;\n               ACTION   ( oDlg:end() )\n\n         oDlg:AddFastKey( VK_F5, {|| ( dbfAlbCliT )->lEntregado := !( dbfAlbCliT )->lEntregado , ( dbfAlbCliT )->dFecEnv    := dFecEnv , ( dbfAlbCliT )->lSndDoc    := .t. , oDlg:end() } )\n         oDlg:bStart := { || oFecEnv:SetFocus() }\n\n         ACTIVATE DIALOG oDlg CENTER\n\n      end if\n\n   ( dbfAlbCliT )->( dbUnLock() )\n\n   end if\n\n   oBrw:Refresh()\n   oBrw:SetFocus()\n\nRETURN NIL\n\n//-------------------------------------------------------------------------//\n/*\nDevuelve la fecha de un albaran de cliente\n*/\n\nFUNCTION dFecAlbCli( cAlbCli, uAlbCliT )\n\n   local dFecAlb  := CtoD( \"\" )\n\n   if ValType( uAlbCliT ) == \"C\"\n\n      if dbSeekInOrd( cAlbCli, \"nNumAlb\", uAlbCliT )\n         dFecAlb  := ( uAlbCliT )->dFecAlb\n      end if\n\n   else\n\n      if uAlbCliT:SeekInOrd( cAlbCli, \"nNumAlb\" )\n         dFecAlb  := uAlbCliT:dFecAlb\n      end if\n\n   end if\n\nRETURN ( dFecAlb )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION cCliAlbCli( cAlbCli, uAlbCliT )\n\n   local cCodCli  := \"\"\n\n   do case\n      case ValType( uAlbCliT ) == \"C\"\n         if (uAlbCliT)->( dbSeek( cAlbCli ) )\n            cCodCli     := (uAlbCliT)->CCODCLI\n         end if\n      case ValType( uAlbCliT ) == \"O\"\n         if uAlbCliT:Seek( cAlbCli )\n            cCodCli     := uAlbCliT:cCodCli\n         end if\n   end case\n\nRETURN ( cCodCli )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION cNbrAlbCli( cAlbCli, uAlbCliT )\n\n   local cCodCli  := \"\"\n\n   do case\n      case ValType( uAlbCliT ) == \"C\"\n         if (uAlbCliT)->( dbSeek( cAlbCli ) )\n            cCodCli     := ( uAlbCliT )->cNomCli\n         end if\n      case ValType( uAlbCliT ) == \"O\"\n         if uAlbCliT:Seek( cAlbCli )\n            cCodCli     := uAlbCliT:cNomCli\n         end if\n   end case\n\nRETURN ( cCodCli )\n\n//----------------------------------------------------------------------------//\n\n/*\nFuncion que nos permite a¤adir a los albaranes pedidos ye existentes\n*/\n\nSTATIC FUNCTION GrpPed( aGet, aTmp, oBrw )\n\n	local oDlg\n   local nDiv\n   local nItem       := 1\n   local cCodAge\n   local oBrwLin\n   local nOrdAnt\n   local nNumLin\n   local lCodAge     := .f.\n   local nOffSet     := 0\n   local cDesAlb     := \"\"\n   local cCodCli     := aGet[ _CCODCLI ]:varGet()\n   local nTotPed\n   local nTotRec\n   local nTotPdt\n   local lAlquiler   := .f.\n   local cCliente    := RTrim( aTmp[ _CNOMCLI ] )\n   local cObra       := if( Empty( aTmp[ _CCODOBR ] ), \"Todas\", Rtrim( aTmp[ _CCODOBR ] ) )  \n   local cIva        := cImp() + Space( 1 ) + if( aTmp[ _LIVAINC ], \"Incluido\", \"Desglosado\" )\n\n   aPedidos          := {}\n\n   if Empty( cCodCli )\n      msgStop( \"Es necesario codificar un cliente\", \"Agrupar pedidos\" )\n      return .t.\n   end if\n\n   if !Empty( aGet[ _CNUMPED ]:VarGet() )\n      msgStop( \"Ya ha importado un pedido\", \"Agrupar pedidos\" )\n      return .t.\n   end if\n\n   if !Empty( oTipAlb ) .and. oTipAlb:nAt == 2\n      lAlquiler      := .t.\n   end if\n\n   /*\n	Seleccion de Registros\n	--------------------------------------------------------------------------\n	*/\n\n   nOrdAnt           := ( dbfPedCliT )->( ordSetFocus( \"cCodCli\" ) )\n\n   if ( dbfPedCliT )->( dbSeek( cCodCli ) )\n\n      while ( dbfPedCliT )->cCodCli == cCodCli .AND. ( dbfPedCliT )->( !eof() )\n\n         if ( dbfPedCliT )->lAlquiler == lAlquiler                                              .and.;\n            ( dbfPedCliT )->nEstado != 3                                                        .and.;\n            ( dbfPedCliT )->lIvaInc == aTmp[ _LIVAINC ]                                         .and.;\n            if( Empty( aTmp[ _CCODOBR ] ), .t., ( dbfPedCliT )->cCodObr == aTmp[ _CCODOBR ] )   .and.;\n            aScan( aNumPed, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) == 0\n\n            aAdd( aPedidos,    {  .f. ,;\n                                 ( if( ( dbfPedCliT )->nEstado == 1, 3, ( dbfPedCliT )->nEstado ) ),;\n                                 ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed,;\n                                 ( dbfPedCliT )->dFecPed ,;\n                                 ( dbfPedCliT )->cCodCli ,;\n                                 ( dbfPedCliT )->cNomCli ,;\n                                 ( dbfPedCliT )->cCodObr ,;\n                                 RetObras( ( dbfPedCliT )->cCodCli, ( dbfPedCliT )->cCodObr, dbfObrasT ),;\n                                 ( dbfPedCliT )->cCodAge  } )\n\n         endif\n\n         ( dbfPedCliT )->( dbSkip( 1 ) )\n\n      end while\n\n   end if\n\n   ( dbfPedCliT )->( ordSetFocus( nOrdAnt ) )\n\n   /*\n	Puede que no hay albaranes que facturar-------------------------------------\n	*/\n\n   if Len( aPedidos ) == 0\n      msgStop( \"No existen pedidos pendientes de albaranar de este cliente\" )\n      return .t.\n   end if\n\n   /*\n   Caja de Dialogo\n   ----------------------------------------------------------------------------\n   */\n\n   DEFINE DIALOG  oDlg ;\n      RESOURCE    \"SET_ALBARAN\" ;\n      TITLE       \"Agrupando pedidos\"\n\n      REDEFINE SAY PROMPT cCliente ;\n         ID       501 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cObra ;\n         ID       502 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cIva ;\n         ID       503 ;\n         OF       oDlg\n\n      oBrwLin                       := TXBrowse():New( oDlg )\n\n      oBrwLin:bClrSel               := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwLin:bClrSelFocus          := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwLin:SetArray( aPedidos, , , .f. )\n      oBrwLin:lHscroll              := .f.\n\n      oBrwLin:nMarqueeStyle         := 5\n      oBrwLin:lRecordSelector       := .f.\n\n      oBrwLin:CreateFromResource( 130 )\n\n      oBrwLin:bLDblClick            := {|| aPedidos[ oBrwLin:nArrayAt, 1 ] := !aPedidos[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh() }\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Seleccionado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 1 ] }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Estado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( aPedidos[ oBrwLin:nArrayAt, 2 ] == 2 ) }\n         :nWidth           := 20\n         :SetCheck( { \"Bullet_Square_Yellow_16\", \"Bullet_Square_Red_16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Número\"\n         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 3 ] }\n         :cEditPicture     := \"@R #/999999999/##\"\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Fecha\"\n         :bEditValue       := {|| Dtoc( aPedidos[ oBrwLin:nArrayAt, 4 ] ) }\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Cliente\"\n         :bEditValue       := {|| Rtrim( aPedidos[ oBrwLin:nArrayAt, 5 ] ) + Space(1) + aPedidos[ oBrwLin:nArrayAt, 6 ] }\n         :nWidth           := 250\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Obra\"\n         :bEditValue       := {|| Rtrim( aPedidos[ oBrwLin:nArrayAt, 7 ] ) + Space(1) + aPedidos[ oBrwLin:nArrayAt, 8 ] }\n         :nWidth           := 220\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Agente\"\n         :bEditValue       := {|| aPedidos[ oBrwLin:nArrayAt, 9 ] }\n         :lHide            := .t.\n         :nWidth           := 60\n      end with\n\n      REDEFINE BUTTON ;\n         ID       514 ;\n         OF       oDlg ;\n         ACTION   (  aPedidos[ oBrwLin:nArrayAt, 1 ] := !aPedidos[ oBrwLin:nArrayAt, 1 ],;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       516 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aPedidos, { |aItem| aItem[1] := .t. } ),;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       517 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aPedidos, { |aItem| aItem[1] := .f. } ),;\n                     oBrwLin:Refresh(),;\n                     oBrwLin:SetFocus() )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end() )\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult != IDOK\n      aPedidos  := {}\n   end if\n\n   /*\n   Llamada a la funcion que busca el Albaran-----------------------------------\n   */\n\n   if oDlg:nResult == IDOK .AND. Len( aPedidos ) >= 1\n\n      CursorWait()\n\n      HideImportacion( aGet )\n\n      /*\n      A¤adimos los albaranes seleccionado para despues-------------------------\n      */\n\n      for nItem := 1 to Len( aPedidos )\n\n         if ( aPedidos[ nItem, 1 ] )\n\n            aAdd( aNumPed, aPedidos[ nItem, 3 ] )\n\n            if Empty( cCodAge )\n               cCodAge  := aPedidos[ nItem, 9 ]\n            end if\n\n            if cCodAge != aPedidos[ nItem, 9 ]\n               lCodAge  := .t.\n            end if\n\n         end if\n\n      next\n\n      if lCodAge\n         MsgInfo( \"Existen conflictos de agentes\" )\n      end if\n\n      for nItem := 1 to Len( aPedidos )\n\n         /*\n         Cabeceras de albaranes a facturas-------------------------------------\n         */\n\n         if !lCodAge .and. cCodAge != nil\n            aGet[ _CCODAGE ]:cText( cCodAge )\n            aGet[ _CCODAGE ]:lValid()\n         end if\n\n         if ( dbfPedCliT )->( dbSeek( aPedidos[ nItem, 3 ] ) ) .AND. aPedidos[ nItem, 1 ]\n\n            if ( dbfPedCliT )->lRecargo\n               aTmp[ _LRECARGO ] := .t.\n               aGet[ _LRECARGO ]:Refresh()\n            end if\n\n            if ( dbfPedCliT )->lOperPv\n               aTmp[ _LOPERPV ] := .t.\n               aGet[ _LOPERPV ]:Refresh()\n            end if\n\n         end if\n\n         /*\n         Detalle de albaranes a facturas---------------------------------------\n         */\n\n         if ( dbfPedCliL )->( dbSeek( aPedidos[ nItem, 3] ) ) .AND. aPedidos[ nItem, 1]\n\n            /*\n            Cabeceras de pedidos-----------------------------------------------\n            */\n\n            nNumLin                    := nil\n\n            if lNumPed()\n               (dbfTmpLin)->( dbAppend() )\n               cDesAlb                 := Rtrim( cNumPed() )\n               cDesAlb                 += \" Pedido Nº \" + Alltrim( Trans( aPedidos[ nItem, 3 ], \"@R #/999999999/##\" ) )\n               cDesAlb                 += \" - Fecha \" + Dtoc( aPedidos[ nItem, 4] )\n               (dbfTmpLin)->mLngDes    := cDesAlb\n               (dbfTmpLin)->lControl   := .t.\n               (dbfTmpLin)->nNumLin    := ++nOffSet\n            end if\n\n            /*\n            Mientras estemos en el mismo pedido--------------------------------\n            */\n\n            while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == aPedidos[ nItem, 3]\n\n               if aPedidos[ nItem, 2 ] == 2\n\n                  nTotPed              := nTotNPedCli( dbfPedCliL )\n                  nTotRec              := nUnidadesRecibidasAlbCli( aPedidos[ nItem, 3 ], ( dbfPedCliL )->cRef, ( dbfPedCliL )->cCodPr1, ( dbfPedCliL )->cCodPr2, ( dbfPedCliL )->cRefPrv, ( dbfPedCliL )->cDetalle, dbfAlbCliL )\n                  nTotPdt              := nTotPed - nTotRec\n\n                  if nTotPdt > 0\n\n                     if nNumLin != (dbfPedCliL)->nNumLin\n                        ++nOffSet\n                        nNumLin        := (dbfPedCliL)->nNumLin\n                     end if\n\n                     ( dbfTmpLin )->( dbAppend() )\n\n                     ( dbfTmpLin )->cNumPed  := aPedidos[ nItem, 3]\n\n                     (dbfTmpLin)->nNumAlb    := 0\n                     (dbfTmpLin)->nNumLin    := nOffSet\n                     (dbfTmpLin)->cRef       := (dbfPedCliL)->cRef\n                     (dbfTmpLin)->cDetalle   := (dbfPedCliL)->cDetalle\n                     (dbfTmpLin)->mLngDes    := (dbfPedCliL)->mLngDes\n                     (dbfTmpLin)->nPreUnit   := (dbfPedCliL)->nPreDiv\n                     (dbfTmpLin)->cUnidad    := (dbfPedCliL)->cUnidad\n                     (dbfTmpLin)->nPesoKg    := (dbfPedCliL)->nPesoKg\n                     (dbfTmpLin)->cPesoKg    := (dbfPedCliL)->cPesoKg\n                     (dbfTmpLin)->nVolumen   := (dbfPedCliL)->nVolumen\n                     (dbfTmpLin)->cVolumen   := (dbfPedCliL)->cVolumen\n                     (dbfTmpLin)->lIvaLin    := (dbfPedCliL)->lIvaLin\n                     (dbfTmpLin)->nIva       := (dbfPedClil)->nIva\n                     (dbfTmpLin)->nReq       := (dbfPedClil)->nReq\n                     (dbfTmpLin)->nDto       := (dbfPedClil)->nDto\n                     (dbfTmpLin)->nPntVer    := (dbfPedCliL)->nPntVer\n                     (dbfTmpLin)->nImpTrn    := (dbfPedCliL)->nImpTrn\n                     (dbfTmpLin)->nDtoPrm    := (dbfPedCliL)->nDtoPrm\n                     (dbfTmpLin)->nComAge    := (dbfPedCliL)->nComAge\n                     (dbfTmpLin)->dFecHa     := (dbfPedCliL)->dFecha\n                     (dbfTmpLin)->cTipMov    := (dbfPedCliL)->cTipMov\n                     (dbfTmpLin)->nDtoDiv    := (dbfPedCliL)->nDtoDiv\n                     (dbfTmpLin)->nUndKit    := (dbfPedCliL)->nUndKit\n                     (dbfTmpLin)->lKitArt    := (dbfPedCliL)->lKitArt\n                     (dbfTmpLin)->lKitChl    := (dbfPedCliL)->lKitChl\n                     (dbfTmpLin)->lKitPrc    := (dbfPedCliL)->lKitPrc\n                     (dbfTmpLin)->cCodPr1    := (dbfPedCliL)->cCodPr1\n                     (dbfTmpLin)->cCodPr2    := (dbfPedCliL)->cCodPr2\n                     (dbfTmpLin)->cValPr1    := (dbfPedCliL)->cValPr1\n                     (dbfTmpLin)->cValPr2    := (dbfPedCliL)->cValPr2\n                     (dbfTmpLin)->nCosDiv    := (dbfPedCliL)->nCosDiv\n                     (dbfTmpLin)->nMesGrt    := (dbfPedCliL)->nMesGrt\n                     (dbfTmpLin)->lMsgVta    := (dbfPedCliL)->lMsgVta\n                     (dbfTmpLin)->lNotVta    := (dbfPedCliL)->lNotVta\n                     (dbfTmpLin)->lLote      := (dbfPedCliL)->lLote\n                     (dbfTmpLin)->nLote      := (dbfPedCliL)->nLote\n                     (dbfTmpLin)->cLote      := (dbfPedCliL)->cLote\n                     (dbfTmpLin)->mObsLin    := (dbfPedCliL)->mObsLin\n                     (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n                     (dbfTmpLin)->cCodPrv    := (dbfPedCliL)->cCodPrv\n                     (dbfTmpLin)->cNomPrv    := (dbfPedCliL)->cNomPrv\n                     (dbfTmpLin)->cCodFam    := (dbfPedCliL)->cCodFam\n                     (dbfTmpLin)->cGrpFam    := (dbfPedCliL)->cGrpFam\n                     (dbfTmpLin)->cAlmLin    := (dbfPedCliL)->cAlmLin\n                     (dbfTmpLin)->cRefPrv    := (dbfPedCliL)->cRefPrv\n                     (dbfTmpLin)->dFecEnt    := (dbfPedCliL)->dFecEnt\n                     (dbfTmpLin)->dFecSal    := (dbfPedCliL)->dFecSal\n                     (dbfTmpLin)->lAlquiler  := (dbfPedCliL)->lAlquiler\n                     (dbfTmpLin)->nPreAlq    := (dbfPedCliL)->nPreAlq\n                     (dbfTmpLin)->nPuntos    := (dbfPedCliL)->nPuntos\n                     (dbfTmpLin)->nValPnt    := (dbfPedCliL)->nValPnt\n                     (dbfTmpLin)->nDtoPnt    := (dbfPedCliL)->nDtoPnt\n                     (dbfTmpLin)->nIncPnt    := (dbfPedCliL)->nIncPnt\n                     (dbfTmpLin)->lImpLin    := (dbfPedCliL)->lImpLin\n                     (dbfTmpLin)->lLinOfe    := (dbfPedCliL)->lLinOfe\n\n                     if lCalCaj()\n                        if nTotRec != 0\n                           nDiv                       := DecimalMod( nTotPdt, ( dbfPedCliL )->nCanPed )\n                           if nDiv == 0 .and. ( dbfPedCliL )->nCanPed != 0\n                              ( dbfTmpLin )->nCanEnt  := ( dbfPedCliL )->nCanPed\n                              ( dbfTmpLin )->nUniCaja := nTotPdt / ( dbfPedCliL )->nCanPed\n                           else\n                              ( dbfTmpLin )->nCanEnt  := 0\n                              ( dbfTmpLin )->nUniCaja := nTotPdt\n                           end if\n                        else\n                           ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed\n                           ( dbfTmpLin )->nUniCaja    := ( dbfPedCliL )->nUniCaja\n                        end if\n                     else\n                        ( dbfTmpLin )->nUniCaja       := nTotPdt\n                     end if\n\n                  end if\n\n               else\n\n                  if nNumLin != (dbfPedCliL)->nNumLin\n                     ++nOffSet\n                     nNumLin                 := (dbfPedCliL)->nNumLin\n                  end if\n\n                  ( dbfTmpLin )->( dbAppend() )\n\n                  ( dbfTmpLin )->cNumPed     := aPedidos[ nItem, 3]\n                  ( dbfTmpLin )->nNumAlb     := 0 \n                  ( dbfTmpLin )->nNumLin     := nOffSet\n                  ( dbfTmpLin )->cRef        := ( dbfPedCliL )->cRef\n                  ( dbfTmpLin )->cDetalle    := ( dbfPedCliL )->cDetalle\n                  ( dbfTmpLin )->mLngDes     := ( dbfPedCliL )->mLngDes\n                  ( dbfTmpLin )->nPreUnit    := ( dbfPedCliL )->nPreDiv\n                  ( dbfTmpLin )->cUnidad     := ( dbfPedCliL )->cUnidad\n                  ( dbfTmpLin )->nPesoKg     := ( dbfPedCliL )->nPesoKg\n                  ( dbfTmpLin )->cPesoKg     := ( dbfPedCliL )->cPesoKg\n                  ( dbfTmpLin )->nVolumen    := ( dbfPedCliL )->nVolumen\n                  ( dbfTmpLin )->cVolumen    := ( dbfPedCliL )->cVolumen\n                  ( dbfTmpLin )->nIva        := ( dbfpedclil )->nIva\n                  ( dbfTmpLin )->nReq        := ( dbfpedclil )->nReq\n                  ( dbfTmpLin )->nDto        := ( dbfpedclil )->nDto\n                  ( dbfTmpLin )->nPntVer     := ( dbfPedCliL )->nPntVer\n                  ( dbfTmpLin )->nImpTrn     := ( dbfPedCliL )->nImpTrn\n                  ( dbfTmpLin )->nDtoPrm     := ( dbfPedCliL )->nDtoPrm\n                  ( dbfTmpLin )->nComAge     := ( dbfPedCliL )->nComAge\n                  ( dbfTmpLin )->dFecHa      := ( dbfPedCliL )->dFecha\n                  ( dbfTmpLin )->cTipMov     := ( dbfPedCliL )->cTipMov\n                  ( dbfTmpLin )->nDtoDiv     := ( dbfPedCliL )->nDtoDiv\n                  ( dbfTmpLin )->nUniCaja    := ( dbfPedCliL )->nUniCaja - ( dbfPedCliL )->nUniEnt\n                  ( dbfTmpLin )->nCanEnt     := ( dbfPedCliL )->nCanPed  - ( dbfPedCliL )->nCanEnt\n                  ( dbfTmpLin )->nUndKit     := ( dbfPedCliL )->nUndKit\n                  ( dbfTmpLin )->lKitArt     := ( dbfPedCliL )->lKitArt\n                  ( dbfTmpLin )->lKitChl     := ( dbfPedCliL )->lKitChl\n                  ( dbfTmpLin )->lKitPrc     := ( dbfPedCliL )->lKitPrc\n                  ( dbfTmpLin )->cCodPr1     := ( dbfPedCliL )->cCodPr1\n                  ( dbfTmpLin )->cCodPr2     := ( dbfPedCliL )->cCodPr2\n                  ( dbfTmpLin )->cValPr1     := ( dbfPedCliL )->cValPr1\n                  ( dbfTmpLin )->cValPr2     := ( dbfPedCliL )->cValPr2\n                  ( dbfTmpLin )->nCosDiv     := ( dbfPedCliL )->nCosDiv\n                  ( dbfTmpLin )->nMesGrt     := ( dbfPedCliL )->nMesGrt\n                  ( dbfTmpLin )->lMsgVta     := ( dbfPedCliL )->lMsgVta\n                  ( dbfTmpLin )->lNotVta     := ( dbfPedCliL )->lNotVta\n                  ( dbfTmpLin )->lLote       := ( dbfPedCliL )->lLote\n                  ( dbfTmpLin )->nLote       := ( dbfPedCliL )->nLote\n                  ( dbfTmpLin )->cLote       := ( dbfPedCliL )->cLote\n                  ( dbfTmpLin )->mObsLin     := ( dbfPedCliL )->mObsLin\n                  ( dbfTmpLin )->Descrip     := ( dbfPedCliL )->Descrip\n                  ( dbfTmpLin )->cCodPrv     := ( dbfPedCliL )->cCodPrv\n                  ( dbfTmpLin )->cNomPrv     := ( dbfPedCliL )->cNomPrv\n                  ( dbfTmpLin )->cCodFam     := ( dbfPedCliL )->cCodFam\n                  ( dbfTmpLin )->cGrpFam     := ( dbfPedCliL )->cGrpFam\n                  ( dbfTmpLin )->cAlmLin     := ( dbfPedCliL )->cAlmLin\n                  ( dbfTmpLin )->cRefPrv     := ( dbfPedCliL )->cRefPrv\n                  ( dbfTmpLin )->dFecEnt     := ( dbfPedCliL )->dFecEnt\n                  ( dbfTmpLin )->dFecSal     := ( dbfPedCliL )->dFecSal\n                  ( dbfTmpLin )->lAlquiler   := ( dbfPedCliL )->lAlquiler\n                  ( dbfTmpLin )->nPreAlq     := ( dbfPedCliL )->nPreAlq\n                  ( dbfTmpLin )->cUnidad     := ( dbfPedCliL )->cUnidad\n                  ( dbfTmpLin )->nNumMed     := ( dbfPedCliL )->nNumMed\n                  ( dbfTmpLin )->nMedUno     := ( dbfPedCliL )->nMedUno\n                  ( dbfTmpLin )->nMedDos     := ( dbfPedCliL )->nMedDos\n                  ( dbfTmpLin )->nMedTre     := ( dbfPedCliL )->nMedTre\n                  ( dbfTmpLin )->nPuntos     := ( dbfPedCliL )->nPuntos\n                  ( dbfTmpLin )->nValPnt     := ( dbfPedCliL )->nValPnt\n                  ( dbfTmpLin )->nDtoPnt     := ( dbfPedCliL )->nDtoPnt\n                  ( dbfTmpLin )->nIncPnt     := ( dbfPedCliL )->nIncPnt\n                  ( dbfTmpLin )->lLinOfe     := ( dbfPedCliL )->lLinOfe\n\n               end if\n\n               ( dbfPedCliL )->( dbSkip( 1 ) )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las entregas a cuenta--------------------------------------\n            */\n\n            if ( dbfPedCliP )->( dbSeek( aPedidos[ nItem, 3 ] ) ) .AND. aPedidos[ nItem, 1 ]\n\n               while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == aPedidos[ nItem, 3 ] .and. !( dbfPedCliP )->( Eof() )\n\n                  if !( dbfPedCliP )->lPasado\n\n                     ( dbfTmpPgo )->( dbAppend() )\n\n                     ( dbfTmpPgo )->nNumRec  := ( dbfTmpPgo )->( Recno() )\n                     ( dbfTmpPgo )->cCodCaj  := ( dbfPedCliP )->cCodCaj\n                     ( dbfTmpPgo )->cTurRec  := ( dbfPedCliP )->cTurRec\n                     ( dbfTmpPgo )->cCodCli  := ( dbfPedCliP )->cCodCli\n                     ( dbfTmpPgo )->dEntrega := ( dbfPedCliP )->dEntrega\n                     ( dbfTmpPgo )->nImporte := ( dbfPedCliP )->nImporte\n                     ( dbfTmpPgo )->cDescrip := ( dbfPedCliP )->cDesCrip\n                     ( dbfTmpPgo )->cPgdoPor := ( dbfPedCliP )->cPgdoPor\n                     ( dbfTmpPgo )->cDocPgo  := ( dbfPedCliP )->cDocPgo\n                     ( dbfTmpPgo )->cDivPgo  := ( dbfPedCliP )->cDivPgo\n                     ( dbfTmpPgo )->nVdvPgo  := ( dbfPedCliP )->nVdvPgo\n                     ( dbfTmpPgo )->cCodAge  := ( dbfPedCliP )->cCodAge\n                     ( dbfTmpPgo )->cCodPgo  := ( dbfPedCliP )->cCodPgo\n                     ( dbfTmpPgo )->lCloPgo  := .f.\n\n                  end if\n\n                  if dbLock( dbfPedCliP )\n                     ( dbfPedCliP )->lPasado := .t.\n                     ( dbfPedCliP )->( dbUnLock() )\n                  end if\n\n                  ( dbfPedCliP )->( dbSkip() )\n\n               end while\n\n            end if\n\n            ( dbfTmpPgo )->( dbGoTop() )\n\n            oBrw:Refresh()\n\n         end if\n\n      next\n\n      /*\n      No dejamos importar pedidos directos-------------------------------------\n      */\n\n      aGet[ _CNUMPED ]:bWhen           := {|| .f. }\n      aGet[ _CNUMPED ]:Disable()\n\n      /*\n      Recalculo de totales-----------------------------------------------------\n      */\n\n      RecalculaTotal( aTmp )\n\n      CursorWE()\n\n   end if\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nfunction lGenAlbCli( oBrw, oBtn, nDevice )\n\n   local bAction\n\n   DEFAULT nDevice   := IS_PRINTER\n\n   if Empty( oBtn )\n      return nil\n   end if\n\n   IF !( dbfDoc )->( dbSeek( \"AC\" ) )\n\n      DEFINE BTNSHELL RESOURCE \"DOCUMENT\" OF oWndBrw ;\n         NOBORDER ;\n         ACTION   ( msgStop( \"No hay documentos predefinidos\" ) );\n         TOOLTIP  \"No hay documentos\" ;\n         FROM     oBtn ;\n         CLOSED ;\n         LEVEL    ACC_EDIT\n\n   ELSE\n\n      WHILE ( dbfDoc )->CTIPO == \"AC\" .AND. !( dbfDoc )->( eof() )\n\n         bAction  := bGenAlbCli( nDevice, \"Imprimiendo albaranes de clientes\", ( dbfDoc )->CODIGO )\n\n         oWndBrw:NewAt( \"Document\", , , bAction, Rtrim( ( dbfDoc )->cDescrip ) , , , , , oBtn )\n\n         ( dbfDoc )->( dbSkip() )\n\n      END DO\n\n   END IF\n\n   SysRefresh()\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la venta en albaranes de clientes de un articulo\n//\n\n/*function nTotVAlbCli( cCodArt, dbfAlbCliL, nDouDiv, nDorDiv )\n\n   local nTotVta  := 0\n   local nRecno   := ( dbfAlbCliL )->( Recno() )\n\n   if ( dbfAlbCliL )->( dbSeek( cCodArt ) )\n\n      while ( dbfAlbCliL )->cRef == cCodArt .and. !( dbfAlbCliL )->( eof() )\n\n         if !( dbfAlbCliL )->lTotLin\n            nTotVta += nTotLAlbCli( dbfAlbCliL, nDouDiv, nDorDiv )\n         end if\n\n         ( dbfAlbCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfAlbCliL )->( dbGoTo( nRecno ) )\n\nreturn ( nTotVta )*/\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la compra en albaranes de clientes de un articulo\n//\n\nfunction nTotDAlbCli( cCodArt, dbfAlbCliL, dbfAlbCliT, cCodAlm )\n\n   local lFacAlb        := .f.\n   local nTotVta        := 0\n   local nRecno         := ( dbfAlbCliL )->( Recno() )\n\n   if ( dbfAlbCliL )->( dbSeek( cCodArt ) )\n\n      while ( dbfAlbCliL )->cRef == cCodArt .and. !( dbfAlbCliL )->( eof() )\n\n         if dbfAlbCliT != nil\n            lFacAlb     := lFacAlbCli( ( dbfAlbCliL )->CSERALB + Str( ( dbfAlbCliL )->NNUMALB ) + ( dbfAlbCliL )->CSUFALB, dbfAlbCliT )\n         end if\n\n         if !( dbfAlbCliL )->lTotLin .and. !lFacAlb\n            if cCodAlm != nil\n               if cCodAlm == ( dbfAlbCliL )->cAlmLin\n                  nTotVta  += nTotNAlbPrv( dbfAlbCliL ) * NotCero( ( dbfAlbCliL )->nFacCnv )\n               end if\n            else\n               nTotVta     += nTotNAlbCli( dbfAlbCliL ) * NotCero( ( dbfAlbCliL )->nFacCnv )\n            end if\n         end if\n\n         ( dbfAlbCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfAlbCliL )->( dbGoTo( nRecno ) )\n\nreturn ( nTotVta )\n\n//---------------------------------------------------------------------------//\n\n//\n// Devuelve el precio de compra real de un articulo una vez aplicados los descuentos\n//\n/*\nFUNCTION nPreAlbCli( dbfAlbCliL, uTmp, nDec, lIva )\n\n   local cDivAlb\n   local nDtoEsp\n   local nDtoPp\n   local nDtoUno\n   local nDtoDos\n   local nCalculo := ( dbfAlbCliL )->NSATUNIT\n\n   DEFAULT lIva   := .t.\n\n   if valtype( uTmp ) == \"A\"\n      cDivAlb     := uTmp[ _CDIVALB ]\n      nDtoEsp     := uTmp[ _NDTOESP ]\n      nDtoPp      := uTmp[ _NDPP    ]\n      nDtoUno     := uTmp[ _NDTOUNO ]\n      nDtoDos     := uTmp[ _NDTODOS ]\n   else\n      cDivAlb     := (uTmp)->CDIVALB\n      nDtoEsp     := (uTmp)->NDTOESP\n      nDtoPp      := (uTmp)->NDPP\n      nDtoUno     := (uTmp)->NDTOUNO\n      nDtoDos     := (uTmp)->NDTODOS\n   end if\n\n   DEFAULT nDec   := nDouDiv( cDivAlb, dbfDiv )\n\n   nCalculo       -= (dbfAlbCliL)->nDtoDiv\n\n   IF (dbfAlbCliL)->NDTO != 0\n      nCalculo    -= nCalculo * (dbfAlbCliL)->NDTO / 100\n	END IF\n\n   IF (dbfAlbCliL)->NDTOPRM != 0\n      nCalculo    -= nCalculo * (dbfAlbCliL)->NDTOPRM / 100\n	END IF\n\n   IF nDtoEsp != 0\n      nCalculo    -= nCalculo * nDtoEsp / 100\n   END IF\n\n   IF nDtoPp != 0\n      nCalculo    -= nCalculo * nDtoPp / 100\n   END IF\n\n   IF nDtoUno != 0\n      nCalculo    -= nCalculo * nDtoUno / 100\n   END IF\n\n   IF nDtoDos != 0\n      nCalculo    -= nCalculo * nDtoDos / 100\n   END IF\n\n   IF lIva\n      nCalculo    += Round( nCalculo * ( dbfAlbCliL )->nIva / 100, nDec )\n   END IF\n\nRETURN ( round( nCalculo, nDec ) )\n  */\n//----------------------------------------------------------------------------//\n\nstatic function bGenAlbCli( nDevice, cTitle, cCodDoc )\n\n   local bGen\n   local nDev  := by( nDevice )\n   local cTit  := by( cTitle  )\n   local cCod  := by( cCodDoc )\n\n   if nDev == IS_PRINTER\n      bGen     := {|| GenAlbCli( nDev, cTit, cCod ) }\n   else\n      bGen     := {|| GenAlbCli( nDev, cTit, cCod ) }\n   end if\n\nreturn ( bGen )\n\n//---------------------------------------------------------------------------//\n//\n// Devuelve el total de la venta en albaranes de un clientes determinado\n//\n\n\nfunction nVtaAlbCli( cCodCli, dDesde, dHasta, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, lNotFac, nYear )\n\n   local nCon        := 0\n   local nRec        := ( dbfAlbCliT )->( Recno() )\n\n   DEFAULT lNotFac   := .f.\n\n   /*\n   Albaranes a Clientes -------------------------------------------------------\n   */\n\n   if ( dbfAlbCliT )->( dbSeek( cCodCli ) )\n\n      while ( dbfAlbCliT )->cCodCli == cCodCli .and. !( dbfAlbCliT )->( Eof() )\n\n         if ( dDesde == nil .or. ( dbfAlbCliT )->dFecAlb >= dDesde )    .and.;\n            ( dHasta == nil .or. ( dbfAlbCliT )->dFecAlb <= dHasta )    .and.;\n            ( if( lNotFac, !( dbfAlbCliT )->lFacturado, .t. ) )         .and.;\n            ( nYear == nil .or. Year( ( dbfAlbCliT )->dFecAlb ) == nYear )\n\n            nCon  += nTotAlbCli( ( dbfAlbCliT )->CSERALB + Str( ( dbfAlbCliT )->NNUMALB ) + ( dbfAlbCliT )->CSUFALB, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, cDivEmp(), .f. )\n\n         end if\n\n         ( dbfAlbCliT )->( dbSkip() )\n\n         SysRefresh()\n\n      end while\n\n   end if\n\n   ( dbfAlbCliT )->( dbGoTo( nRec ) )\n\nreturn nCon\n\n//---------------------------------------------------------------------------//\n\n/*\nNOMBRE FICHERO      : TALBAxxx.PSI   (xxx = Agente)\nDESCRIPCION         : CABECERAS  ALBARAN\nTIPO DE FICHERO     : SECUENCIAL SIN SEPARADOR DE CAMPOS\nNUM. DE CAMPOS      : 20\nLONG. DEL REGISTRO  : 143\n\nN§ PO  LC  Descripci¢n       Observaciones\n1  1   7   CODIGO CLIENTE\n2  8   10  NUM. NOTA         aaa/nnnnnn    (agente/numeronota)\n3  18  1   TIPO NOTA         (1)\n4  19  2   COD. PROVEEDOR    diferente de espacios si es venta indirecta\n5  21  8   BASE IMPONIBLE 1\n6  29  8   BASE IMPONIBLE 2\n7  37  8   BASE IMPONIBLE 3\n8  45  8   impuestos TIPO 1\n9  53  8   impuestos TIPO 2\n10 61  8   impuestos TIPO 3\n11 69  8   R.E. TIPO 1\n12 77  8   R.E. TIPO 2\n13 85  8   R.E. TIPO 3\n14 93  5   DESC. CONCERTADO  Descuento que figura en la ficha del cliente\n15 98  5   DESC. PRONTO PAGO Descuento opcional al final de factura\n16 103 8   IMPORTE PVERDE    Cargo por impuesto punto verde\n17 111 8   IMPORTE NOTA      Importe total del documento (incluye pverde)\n18 119 8   IMPORTE COBRADO   (2)\n19 127 10  FECHA             DD/MM/AAAA\n20 137 5   HORA              HH:MM\n21 142 2   FINAL REGISTRO    CR LF\n\n\n  (1) Tipos de nota: 1- Factura Contado     2- Factura Credito\n                     3- Albaran Contado     4- Albaran Credito\n                     5- Adicional Contado   6- Adicional Credito\n                     7- Indirecto Contado   8- Indirecto Credit\no\n\n  (2) S¢lo s\ner  igual a ImporteNota si se trata de contado-met lico.\n      Si es credito o contado-tal¢n ira con 0.\n\n Ej: \"000032100   20000       0       0    3200       0       0       0\n             0       0 0.00 0.00       0   23300   2330012/03/199618:15\"\n     (Factura de contado n§ 10900 emitida al cliente 321 por el vendedor 4\n      el d¡a 12 de Marzo de 1996, por un importe de 23200, sin descuentos,\n      ni punto verde, a las 6 y cuarto de la tarde. El tipo de impuestos fue el 1)\n\n\nNOMBRE FICHERO      : EALBAxxx.PSI   (xxx = Agente)\nDESCRIPCION         : LINEAS DE  ALBARAN\nTIPO DE FICHERO     : SECUENCIAL SIN SEPARADOR DE CAMPOS\nNUM. DE CAMPOS      : 13\nLONG. DEL REGISTRO  : 70\n\nN§ PO  LC  Descripci¢n       Observaciones\n1  1   7   CODIGO CLIENTE\n2  8   10  NUM. NOTA         aaa/nnnnnn   (agente/numeronota)\n3  18  1   TIPO NOTA         (1)\n4  19  13  COD. ARTICULO\n5  32  7   SATCIO            Precio de venta sin descuentos\n6  39  5   DESC.             Descuento por unidad en euros o ptas\n7  44  5   DESC. PORCENTUAL  Descuento por unidad en %\n8  49  4   UNID. VALORA. 1   cajas\n9  53  7   UNID. VALORA  2   kilos/unidades\n10 60  1   TIPO LINEA        (2)\n11 61  1   tipo impuestos          1, 2 ¢ 3\n12 62  1   EUROS S/N         Indica si se hizo en euros o en pts (3)\n13 63  7   PVERDE            Cargo unitario por Punto Verde\n14 70  2   FINAL REGISTRO    CR LF  ( chr$(13) y chr$(10) )\n\n  (1) Tipos de nota:  1- Factura Contado     2- Factura Credito\n                      3- Albaran Contado     4- Albaran Credito\n                      5- Adicional Contado   6- Adicional Credito\n                      7- Indirecto Contado   8- Indirecto Credito\n\n  (2) Tipos de linea: 0- Venta      1- Devoluci¢n      2- Defectuoso\n                      3- Caducado   4- Abono  7- Regalo mercancia Automat.\n\n  (3) Si el cliente est  en euros, los campos precio y desc. vendran en\n      euros, y si estaba en ptas, vendr n en ptas.\n*/\n\nFUNCTION EdmAlbCli( cCodRut, cPathTo, oStru, aSucces )\n\n   local n           := 0\n   local cSerie\n   local cFilEdm\n   local oFilEdm\n   local dFecAlb\n   local cCodCli\n   local nNumAlb\n   local cNumDoc\n   local nCajEnt     := 0\n   local cTipDoc\n   local aHeadLine   := {}\n   local aLotes      := {}\n\n   DEFAULT cCodRut   := \"001\"\n   DEFAULT cPathTo   := \"C:\\INTERS~1\\\"\n\n   /*\n   Obtenemos la fecha del albaran----------------------------------------------\n   */\n\n   cCodRut           := SubStr( cCodRut, -3 )\n\n   cFilEdm           := cPathTo + \"TALBA\" + cCodRut + \".PSI\"\n\n   if !file( cFilEdm )\n      msgWait( \"No existe el fichero \" + cFilEdm, \"Atención\", 1 )\n      return nil\n   end if\n\n   oFilEdm           := TTxtFile():New( cFilEdm )\n\n   /*\n   Abrimos las bases de datos--------------------------------------------------\n   */\n\n   while ! oFilEdm:lEoF()\n      aAdd( aHeadLine, { SubStr( oFilEdm:cLine, 8, 10 ), Ctod( SubStr( oFilEdm:cLine, 127, 10 ) ) } )\n      oFilEdm:Skip()\n   end while\n\n   oFilEdm:Close()\n\n   /*\n   Nuevo fichero con los lotes-------------------------------------------------\n   */\n\n   cFilEdm           := cPathTo + \"LALBA\" + cCodRut + \".PSI\"\n\n   if !file( cFilEdm )\n\n      msgWait( \"No existe el fichero \" + cFilEdm, \"Atención\", 1 )\n\n   else\n\n      oFilEdm           := TTxtFile():New( cFilEdm )\n\n      /*\n      Abrimos las bases de datos--------------------------------------------------\n      */\n\n      while ! oFilEdm:lEoF()\n\n         cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )\n\n         if ( cTipDoc == \"3\" .or. cTipDoc == \"4\" )\n            aAdd( aLotes, { SubStr( oFilEdm:cLine, 8, 10 ),;                // Num. nota\n                            LTrim( SubStr( oFilEdm:cLine, 19, 13 ) ),;      // Código del artículo\n                            RTrim( SubStr( oFilEdm:cLine, 43, 21 ) ) } )    // Num. lote\n         end if\n\n         oFilEdm:Skip()\n\n      end while\n\n   oFilEdm:Close()\n\n   end if\n\n   /*\n   ----------------------------------------------------------------------------\n   */\n\n   cFilEdm           := cPathTo + \"EALBA\" + cCodRut + \".PSI\"\n\n   /*\n   Creamos el fichero destino--------------------------------------------------\n   */\n\n   if !file( cFilEdm )\n      msgStop( cFilEdm, \"No existe\" )\n      return nil\n   end if\n\n   oFilEdm           := TTxtFile():New( cFilEdm )\n\n   /*\n   Abrimos las bases de datos--------------------------------------------------\n   */\n\n   OpenFiles()\n\n   oStru:oMetDos:cText   := \"Alb. Clientes\"\n   oStru:oMetDos:SetTotal( oFilEdm:nTLines )\n\n   /*\n   Mientras no estemos en el final del archivo\n   */\n\n   while !oFilEdm:lEoF()\n      /*\n      Tomamos el codigo del cliente\n      */\n\n      cCodCli        := SubStr( oFilEdm:cLine,  1,  7 )\n      cNumDoc        := SubStr( oFilEdm:cLine,  8, 10 )\n      cTipDoc        := SubStr( oFilEdm:cLine, 18,  1 )\n\n      if ( cTipDoc == \"3\" .or. cTipDoc == \"4\" )\n\n         if dbSeekInOrd( cCodCli, \"Cod\", dbfClient )\n\n            nNumAlb                          := Val( StrTran( cNumDoc, \"/\", \"\" ) )\n\n            if Empty( ( dbfClient )->Serie )\n               cSerie                        := \"A\"\n            else\n               cSerie                        := ( dbfClient )->Serie\n            end if\n\n            if !( dbfAlbCliT )->( dbSeek( cSerie + Str( nNumAlb, 9 ) + RetSufEmp() ) )\n\n               n  := aScan( aHeadLine, {|a| a[1] == cNumDoc } )\n               if n != 0\n                  dFecAlb                    := aHeadLine[n,2]\n\n                  ( dbfAlbCliT )->( dbAppend() )\n                  ( dbfAlbCliT )->cSerAlb    := cSerie\n                  ( dbfAlbCliT )->nNumAlb    := nNumAlb\n                  ( dbfAlbCliT )->cSufAlb    := RetSufEmp()\n                  ( dbfAlbCliT )->dFecAlb    := dFecAlb\n                  ( dbfAlbCliT )->cCodAlm    := oUser():cAlmacen()\n                  ( dbfAlbCliT )->cDivAlb    := cDivEmp()\n                  ( dbfAlbCliT )->nVdvAlb    := nChgDiv( ( dbfAlbCliT )->cDivAlb, dbfDiv )\n                  ( dbfAlbCliT )->lFacturado := .f.\n                  ( dbfAlbCliT )->cCodCli    := ( dbfClient )->Cod\n                  ( dbfAlbCliT )->cNomCli    := ( dbfClient )->Titulo\n                  ( dbfAlbCliT )->cDirCli    := ( dbfClient )->Domicilio\n                  ( dbfAlbCliT )->cPobCli    := ( dbfClient )->Poblacion\n                  ( dbfAlbCliT )->cPrvCli    := ( dbfClient )->Provincia\n                  ( dbfAlbCliT )->cPosCli    := ( dbfClient )->CodPostal\n                  ( dbfAlbCliT )->cDniCli    := ( dbfClient )->Nif\n                  ( dbfAlbCliT )->cCodTar    := ( dbfClient )->cCodTar\n                  ( dbfAlbCliT )->cCodPago   := ( dbfClient )->CodPago\n                  ( dbfAlbCliT )->cCodAge    := ( dbfClient )->cAgente\n                  ( dbfAlbCliT )->cCodRut    := ( dbfClient )->cCodRut\n                  ( dbfAlbCliT )->nTarifa    := ( dbfClient )->nTarifa\n                  ( dbfAlbCliT )->lRecargo   := ( dbfClient )->lReq\n                  ( dbfAlbCliT )->lOperPv    := ( dbfClient )->lPntVer\n                  ( dbfAlbCliT )->cDtoEsp    := ( dbfClient )->cDtoEsp\n                  ( dbfAlbCliT )->cDpp       := ( dbfClient )->cDpp\n                  ( dbfAlbCliT )->nDtoEsp    := ( dbfClient )->nDtoEsp\n                  ( dbfAlbCliT )->nDpp       := ( dbfClient )->nDpp\n                  ( dbfAlbCliT )->nDtoUno    := ( dbfClient )->nDtoCnt\n                  ( dbfAlbCliT )->cDtoUno    := ( dbfClient )->cDtoUno\n                  ( dbfAlbCliT )->nDtoDos    := ( dbfClient )->nDtoRap\n                  ( dbfAlbCliT )->cDtoDos    := ( dbfClient )->cDtoDos\n                  ( dbfAlbCliT )->( dbUnLock() )\n\n                  aAdd( aSucces, { .t., \"Nuevo albarán de clientes \" + ( dbfAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb } )\n\n                  /*\n                  Mientras estemos en el mismo albarán pasamos las lineas------\n                  */\n\n                  while cNumDoc == SubStr( oFilEdm:cLine,  8, 10 ) .and. ! oFilEdm:lEoF()\n\n                     if cTipDoc == \"3\" .or. cTipDoc == \"4\"\n\n                        if ( dbfAlbCliT )->( dbSeek( cSerie + Str( nNumAlb, 9 ) + RetSufEmp() ) )\n\n                           ( dbfAlbCliL )->( dbAppend() )\n                           ( dbfAlbCliL )->cSerAlb       := ( dbfAlbCliT )->cSerAlb\n                           ( dbfAlbCliL )->nNumAlb       := ( dbfAlbCliT )->nNumAlb\n                           ( dbfAlbCliL )->cSufAlb       := ( dbfAlbCliT )->cSufAlb\n                           ( dbfAlbCliL )->cRef          := Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) )\n                           ( dbfAlbCliL )->cDetalle      := RetFld( ( dbfAlbCliL )->cRef, dbfArticulo )\n                           ( dbfAlbCliL )->nPreUnit      := Val( SubStr( oFilEdm:cLine, 32,  7 ) )\n                           ( dbfAlbClil )->nDtoDiv       := Val( SubStr( oFilEdm:cLine, 39,  5 ) )\n                           ( dbfAlbClil )->nDto          := Val( SubStr( oFilEdm:cLine, 44,  5 ) )\n                           ( dbfAlbClil )->nIva          := nIvaCodTer( SubStr( oFilEdm:cLine, 61, 1 ), dbfIva )\n                           ( dbfAlbClil )->nPntVer       := Val( SubStr( oFilEdm:cLine, 63, 7 ) )\n                           ( dbfAlbCliL )->nCanEnt       := 1\n                           ( dbfAlbCliL )->nUniCaja      := Val( SubStr( oFilEdm:cLine, 53,  7 ) )\n\n                           /*\n                           Buscamos en el array l numero de lote---------------\n                           */\n\n                           if ( n  := aScan( aLotes, {|a| a[1] == cNumDoc .and. a[2] == Ltrim( SubStr( oFilEdm:cLine, 19, 13 ) ) } ) ) != 0\n                              ( dbfAlbCliL )->lLote      := .t.\n                              ( dbfAlbCliL )->cLote      := aLotes[ n, 3 ]\n                           end if\n\n                           ( dbfAlbCliL )->( dbUnLock() )\n\n                        end if\n\n                     end if\n\n                     oFilEdm:Skip()\n\n                  end do\n\n               else\n\n                  aAdd( aSucces, { .f., \"Líneas de albarán huerfanas, cliente \" + cCodCli + \" documento : \" + cNumDoc } )\n                  oFilEdm:Skip()\n\n               end if\n\n            else\n\n               aAdd( aSucces, { .f., \"Albarán de clientes ya existe \" + ( dbfAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb } )\n               oFilEdm:Skip()\n\n            end if\n\n         else\n\n            aAdd( aSucces, { .f., \"No existe cliente \" + cCodCli + \" de albarán \" + AllTrim( cNumDoc ) } )\n            oFilEdm:Skip()\n\n         end if\n\n      else\n\n         oFilEdm:Skip()\n\n      end if\n\n      oStru:oMetDos:Set( oFilEdm:nLine )\n\n   end do\n\n   oStru:oMetDos:SetTotal( oFilEdm:nTLines )\n\n   CloseFiles()\n\n   oFilEdm:Close()\n\nRETURN ( aSucces )\n\n//---------------------------------------------------------------------------//\n\n\n//-----------------------------------------------------------------------------//\n\nFunction aDocAlbCli( lEntregas )\n\n   local aDoc        := {}\n\n   DEFAULT lEntregas := .f.\n\n   /*\n   Itmes-----------------------------------------------------------------------\n   */\n\n   aAdd( aDoc, { \"Empresa\",         \"EM\" } )\n   aAdd( aDoc, { \"Albaran\",         \"AC\" } )\n\n   if lEntregas\n      aAdd( aDoc, { \"Entregas a cuenta\",  \"EA\" } )\n   end if\n\n   aAdd( aDoc, { \"Cliente\",         \"CL\" } )\n   aAdd( aDoc, { \"Almacen\",         \"AL\" } )\n   aAdd( aDoc, { \"Obras\",           \"OB\" } )\n   aAdd( aDoc, { \"Rutas\",           \"RT\" } )\n   aAdd( aDoc, { \"Agentes\",         \"AG\" } )\n   aAdd( aDoc, { \"Divisas\",         \"DV\" } )\n   aAdd( aDoc, { \"Formas de pago\",  \"PG\" } )\n   aAdd( aDoc, { \"Transportistas\",  \"TR\" } )\n\nRETURN ( aDoc )\n\n//---------------------------------------------------------------------------//\n\nFunction aCalAlbCli()\n\n   local aCalAlbCli  := {}\n\n   aAdd( aCalAlbCli, { \"nTotArt\",                                                   \"N\", 16,  6, \"Total artículos\",             \"cPicUndAlb\",  \"\" } )\n   aAdd( aCalAlbCli, { \"nTotCaj\",                                                   \"N\", 16,  6, \"Total cajas\",                 \"cPicUndAlb\",  \"\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[1,1]\",                                              \"N\", 16,  6, \"Bruto primer tipo de \" + cImp(),    \"cPorDivAlb\",  \"aTotIva[1,1] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[2,1]\",                                              \"N\", 16,  6, \"Bruto segundo tipo de \" + cImp(),   \"cPorDivAlb\",  \"aTotIva[2,1] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[3,1]\",                                              \"N\", 16,  6, \"Bruto tercer tipo de \" + cImp(),    \"cPorDivAlb\",  \"aTotIva[3,1] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[1,2]\",                                              \"N\", 16,  6, \"Base primer tipo de \" + cImp(),     \"cPorDivAlb\",  \"aTotIva[1,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[2,2]\",                                              \"N\", 16,  6, \"Base segundo tipo de \" + cImp(),    \"cPorDivAlb\",  \"aTotIva[2,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[3,2]\",                                              \"N\", 16,  6, \"Base tercer tipo de \" + cImp(),     \"cPorDivAlb\",  \"aTotIva[3,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[1,3]\",                                              \"N\",  5,  2, \"Porcentaje primer tipo \" + cImp(),  \"'@R 99.99%'\", \"aTotIva[1,3] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[2,3]\",                                              \"N\",  5,  2, \"Porcentaje segundo tipo \" + cImp(), \"'@R 99.99%'\", \"aTotIva[2,3] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[3,3]\",                                              \"N\",  5,  2, \"Porcentaje tercer tipo \" + cImp(),  \"'@R 99.99%'\", \"aTotIva[3,3] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[1,4]\",                                              \"N\",  5,  2, \"Porcentaje primer tipo RE\",   \"'@R 99.99%'\", \"aTotIva[1,4] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[2,4]\",                                              \"N\",  5,  2, \"Porcentaje segundo tipo RE\",  \"'@R 99.99%'\", \"aTotIva[2,4] != 0\" } )\n   aAdd( aCalAlbCli, { \"aTotIva[3,4]\",                                              \"N\",  5,  2, \"Porcentaje tercer tipo RE\",   \"'@R 99.99%'\", \"aTotIva[3,4] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[1,2] * aTotIva[1,3] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe primer tipo \" + cImp(),     \"cPorDivAlb\",  \"aTotIva[1,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[2,2] * aTotIva[2,3] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe segundo tipo \" + cImp(),    \"cPorDivAlb\",  \"aTotIva[2,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[3,2] * aTotIva[3,3] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe tercer tipo \" + cImp(),     \"cPorDivAlb\",  \"aTotIva[3,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[1,2] * aTotIva[1,4] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe primer RE\",           \"cPorDivAlb\",  \"aTotIva[1,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[2,2] * aTotIva[2,4] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe segundo RE\",          \"cPorDivAlb\",  \"aTotIva[2,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"round( aTotIva[3,2] * aTotIva[3,4] / 100, nDouDivAlb )\",    \"N\", 16,  6, \"Importe tercer RE\",           \"cPorDivAlb\",  \"aTotIva[3,2] != 0\" } )\n   aAdd( aCalAlbCli, { \"nTotBrt\",                                                   \"N\", 16,  6, \"Total bruto\",                 \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotDto\",                                                   \"N\", 16,  6, \"Total descuento\",             \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotDpp\",                                                   \"N\", 16,  6, \"Total descuento pronto pago\", \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotUno\",                                                   \"N\", 16,  6, \"Total primer descuento personalizable\",  \"cPorDivAlb\",  \"lEnd\" }   )\n   aAdd( aCalAlbCli, { \"nTotDos\",                                                   \"N\", 16,  6, \"Total segundo descuento personalizable\", \"cPorDivAlb\",  \"lEnd\" }   )\n   aAdd( aCalAlbCli, { \"nTotNet\",                                                   \"N\", 16,  6, \"Total neto\",                  \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotIva\",                                                   \"N\", 16,  6, \"Total \" + cImp(),                   \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotIvm\",                                                   \"N\", 16,  6, \"Total IVMH\",                  \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotReq\",                                                   \"N\", 16,  6, \"Total RE\",                    \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotAlb\",                                                   \"N\", 16,  6, \"Total albarán\",               \"cPorDivAlb\",  \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nTotPage\",                                                  \"N\", 16,  6, \"Total página\",                \"cPorDivAlb\",  \"!lEnd\"}              )\n   aAdd( aCalAlbCli, { \"nTotPes\",                                                   \"N\", 16,  6, \"Total peso\",                  \"'@E 99,999.99'\",\"lEnd\" }            )\n   aAdd( aCalAlbCli, { \"nTotCos\",                                                   \"N\", 16,  6, \"Total costo\",                 \"cPorDivAlb\",  \"lEnd\" }            )\n   aAdd( aCalAlbCli, { \"nImpEuros( nTotAlb, (cDbf)->cDivAlb, cDbfDiv )\",            \"N\", 16,  6, \"Total albarán (Euros)\",       \"\",            \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nImpPesetas( nTotAlb, (cDbf)->cDivAlb, cDbfDiv )\",          \"N\", 16,  6, \"Total albarán (Pesetas)\",     \"\",            \"lEnd\" }              )\n   aAdd( aCalAlbCli, { \"nPagina\",                                                   \"N\",  2,  0, \"Número de página\",            \"'99'\",        \"\" }                  )\n   aAdd( aCalAlbCli, { \"lEnd\",                                                      \"L\",  1,  0, \"Fin del documento\",           \"\",            \"\" }                  )\n\nReturn ( aCalAlbCli )\n\n//---------------------------------------------------------------------------//\n\nFunction aCocAlbCli()\n\n   local aCocAlbCli  := {}\n\n   aAdd( aCocAlbCli, { \"( Descrip( cDbfCol ) )\",                                                   \"C\", 100,0, \"Detalle del artículo\",           \"\",            \"Descripción\", \"\" } )\n   aAdd( aCocAlbCli, { \"( nTotNAlbCli( cDbfCol ) )\",                                               \"N\", 16, 6, \"Total unidades\",                 \"cPicUndAlb\",  \"Unds.\",       \"\" } )\n   aAdd( aCocAlbCli, { \"( nTotUAlbCli( cDbfCol, nDouDivAlb, nVdvDivAlb ) )\",                       \"N\", 16, 6, \"Precio unitario\",                \"cPouDivAlb\",  \"Precio\",      \"\" } )\n   aAdd( aCocAlbCli, { \"( nNetUAlbCli( cDbfCol, nDouDivAlb, nVdvDivAlb, .f. ) )\",                  \"N\", 16, 6, \"Precio unitario sin \" + cImp(),     \"cPouDivAlb\",  \"Precio\",      \"\" } )\n   aAdd( aCocAlbCli, { \"( nTotPAlbCli( cDbfCol, nVdvDivAlb ) )\",                                   \"N\", 16, 6, \"Precio unitario con descuentos\", \"cPouDivAlb\",  \"Precio\",      \"\" } )\n   aAdd( aCocAlbCli, { \"( nPesLAlbCli( cDbfCol ) )\",                                               \"N\", 16, 6, \"Total peso por línea\",           \"'@E 999,999.99'\",\"Peso\",     \"\" } )\n   aAdd( aCocAlbCli, { \"( nTotLAlbCli( cDbfCol, nDouDivAlb, nRouDivAlb, nVdvDivAlb ) )\",           \"N\", 16, 6, \"Total linea de albarán\",         \"cPorDivAlb\",  \"Total\",       \"\" } )\n   aAdd( aCocAlbCli, { \"( nNetLAlbCli( cDbf, cDbfCol, nDouDivAlb, nRouDivAlb, nVdvDivAlb, .f. ) )\",\"N\", 16, 6, \"Total linea sin \" + cImp(),         \"cPorDivAlb\",  \"Total\",       \"\" } )\n   aAdd( aCocAlbCli, { \"cFrasePublicitaria( cDbfCol )\",                                            \"C\", 50, 0, \"Texto de frase publicitaria\",    \"\",            \"Publicidad\",  \"\" } )\n\nReturn ( aCocAlbCli )\n\n//---------------------------------------------------------------------------//\n\nfunction aSerAlbCli()\n\n   local aColAlbCli  := {}\n\n   aAdd( aColAlbCli,  { \"cSerAlb\",     \"C\",  1,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"nNumAlb\",     \"N\",  9,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"cSufAlb\",     \"C\",  2,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"dFecAlb\",     \"D\",  8,   0, \"\",                                 \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"nNumLin\",     \"N\",  4,   0, \"Número de la línea\",               \"'9999'\",            \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"lFacturado\",  \"L\",  1,   0, \"Lógico de facturado\",              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"lUndNeg\",     \"L\",  1,   0, \"Lógico de unidades en negativo\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"cRef\",        \"C\", 18,   0, \"Referencia del artículo\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"cAlmLin\",     \"C\",  3,   0, \"Almacen del artículo\",             \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli,  { \"cNumSer\",     \"C\", 30,   0, \"Número de serie\",                  \"\",                  \"\", \"( cDbfCol )\" } )\n\nreturn ( aColAlbCli )\n\n//---------------------------------------------------------------------------//\n\nStatic Function RecAlbCli( aTmpAlb, oDlg )\n\n	local nDtoAge\n   local nRecno\n   local cCodFam\n   local nImpAtp  := 0\n   local nImpOfe  := 0\n\n   if !ApoloMsgNoYes( \"¡Atención!,\"                                      + CRLF + ;\n                  \"todos los precios se recalcularán en función de\"  + CRLF + ;\n                  \"los valores en las bases de datos.\",;\n                  \"¿ Desea proceder ?\" )\n      return nil\n   end if\n\n   oDlg:aEvalWhen()\n\n   ( dbfArticulo )->( ordSetFocus( \"Codigo\" ) )\n\n   nRecno         := ( dbfTmpLin )->( RecNo() )\n\n   ( dbfTmpLin )->( dbGotop() )\n   while !( dbfTmpLin )->( eof() )\n\n      /*\n      Ahora buscamos por el codigo interno\n      */\n\n      if ( dbfArticulo )->( dbSeek( ( dbfTmpLin )->cRef ) )\n\n         if aTmpAlb[ _NREGIVA ] <= 1\n            ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )\n            ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n         end if\n\n         /*\n         Ahora recogemos el impuesto especial si lo hay\n         */\n\n         if !Empty( ( dbfArticulo )->cCodImp )\n            ( dbfTmpLin )->cCodImp  := ( dbfArticulo )->cCodImp\n            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpAlb[ _LIVAINC ], ( dbfTmpLin )->nIva )\n         end if\n\n         /*\n         Tomamos los precios de la base de datos de articulos---------------------\n         */\n\n         ( dbfTmpLin )->nPreUnit    := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpAlb[ _CDIVALB ], aTmpAlb[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n\n         /*\n         Linea por contadores-----------------------------------------------------\n         */\n\n         ( dbfTmpLin )->nCtlStk     := ( dbfArticulo )->nCtlStock\n         ( dbfTmpLin )->nPvpRec     := ( dbfArticulo )->PvpRec\n         ( dbfTmpLin )->nCosDiv     := nCosto( nil, dbfArticulo, dbfKit )\n\n         /*\n         Punto verde--------------------------------------------------------------\n         */\n\n         ( dbfTmpLin )->nPntVer     := ( dbfArticulo )->nPntVer1\n\n         /*\n         Chequeamos situaciones especiales y comprobamos las fechas\n         */\n\n         do case\n         case lSeekAtpArt( aTmpAlb[ _CCODCLI ] + ( dbfTmpLin )->cRef, ( dbfTmpLin )->cCodPr1 + ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1 + ( dbfTmpLin )->cValPr2, aTmpAlb[ _DFECALB ], dbfCliAtp ) .and. ;\n               ( dbfCliAtp )->lAplAlb\n\n               nImpAtp              := nImpAtp( ( dbfTmpLin )->nTarLin, dbfCliAtp )\n               if nImpAtp != 0\n                  ( dbfTmpLin )->nPreUnit := nImpAtp\n               end if\n\n               nImpAtp              := nDtoAtp( ( dbfTmpLin )->nTarLin, dbfCliAtp )\n               if nImpAtp != 0\n                  ( dbfTmpLin )->nDto     := nImpAtp\n               end if\n\n               if ( dbfCliAtp )->nDprArt != 0\n                  ( dbfTmpLin )->nDtoPrm  := ( dbfCliAtp )->nDprArt\n               end if\n\n               if ( dbfCliAtp )->nComAge != 0\n                  ( dbfTmpLin )->nComAge  := ( dbfCliAtp )->nComAge\n               end if\n\n         /*\n         Precios en tarifas----------------------------------------------------\n         */\n\n         case !Empty( aTmpAlb[ _CCODTAR ] )\n\n            cCodFam  := RetFamArt( ( dbfTmpLin )->cRef, dbfArticulo )\n\n            nImpOfe  := RetPrcTar( ( dbfTmpLin )->cRef, aTmpAlb[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )\n            if nImpOfe != 0\n               ( dbfTmpLin )->nPreUnit := nImpOfe\n            end if\n\n            nImpOfe  := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )\n            if nImpOfe != 0\n               ( dbfTmpLin )->nDto     := nImpOfe\n            end if\n\n            nImpOfe  := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ _CCODAGE ], dbfTarPreL, dbfTarPreS )\n\n            if nImpOfe != 0\n               ( dbfTmpLin )->nComAge  := nImpOfe\n            end if\n\n            /*\n            Descuento de promoci¢n, esta funci¢n comprueba si existe y si es\n            asi devuelve el descunto de la promoci¢n.\n            */\n\n            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ _DFECALB ], dbfTarPreL )\n            if nImpOfe  != 0\n               ( dbfTmpLin )->nDtoPrm  := nImpOfe\n            end if\n\n            /*\n            Obtenemos el descuento de Agente\n            */\n\n            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpAlb[ _CCODTAR ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpAlb[ _DFECALB ], aTmpAlb[ _CCODAGE ], dbfTarPreL, dbfTarPreS )\n\n            if nDtoAge  != 0\n               ( dbfTmpLin )->nComAge  := nDtoAge\n            end if\n\n         end case\n\n         /*\n         Buscamos si existen ofertas para este articulo y le cambiamos el precio\n         */\n\n         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], ( dbfTmpLin )->nUniCaja, aTmpAlb[ _DFECALB ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )\n         if nImpOfe  != 0\n            ( dbfTmpLin )->nPreUnit := nCnv2Div( nImpOfe, cDivEmp(), aTmpAlb[ _CDIVALB ], dbfDiv )\n         end if\n\n         /*\n         Buscamos si existen descuentos en las ofertas\n         */\n\n         nImpOfe     := nDtoOferta( ( dbfTmpLin )->cRef, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], ( dbfTmpLin )->nUniCaja, aTmpAlb[ _DFECALB ], dbfOferta, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )\n         if nImpOfe  != 0\n            ( dbfTmpLin )->nDtoPrm  := nImpOfe\n         end if\n\n      end if\n\n      ( dbfTmpLin )->( dbSkip() )\n\n   end while\n\n   ( dbfTmpLin )->( dbGoTo( nRecno ) )\n\nreturn nil\n\n//--------------------------------------------------------------------------//\n\nfunction SynAlbCli( cPath )\n\n   local oError\n   local oBlock\n   local aTotAlb\n   local cCodImp\n   local cNumSer\n   local aNumSer\n   local cNumPed\n   local aNumPed     := {}\n\n   DEFAULT cPath     := cPatEmp()\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIT.DBF\", cCheckArea( \"ALBCLIT\", @dbfAlbCliT ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"ALBCLIT.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIL.DBF\", cCheckArea( \"ALBCLIL\", @dbfAlbCliL ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"ALBCLIL.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIS.DBF\", cCheckArea( \"ALBCLIS\", @dbfAlbCliS ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"ALBCLIS.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLII.DBF\", cCheckArea( \"ALBCLII\", @dbfAlbCliI ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"ALBCLII.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIP.DBF\", cCheckArea( \"ALBCLIP\", @dbfAlbCliP ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"ALBCLIP.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPatArt() + \"FAMILIAS.DBF\", cCheckArea( \"FAMILIAS\", @dbfFamilia ), .f. )\n   if !lAIS(); ordListAdd( cPatArt() + \"FAMILIAS.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPatArt() + \"ARTICULO.DBF\", cCheckArea( \"ARTICULO\", @dbfArticulo ), .f. )\n   if !lAIS(); ordListAdd( cPatArt() + \"ARTICULO.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPatCli() + \"CLIENT.DBF\", cCheckArea( \"CLIENT\", @dbfClient ), .f. )\n   if !lAIS(); ordListAdd( cPatCli() + \"CLIENT.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPatDat() + \"TIVA.DBF\", cCheckArea( \"TIVA\", @dbfIva ), .t. )\n   if !lAIS(); ordListAdd( cPatDat() + \"TIVA.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPatDat() + \"DIVISAS.DBF\", cCheckArea( \"DIVISAS\", @dbfDiv ), .t. )\n   if !lAIS(); ordListAdd( cPatDat() + \"DIVISAS.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"PEDCLIT.DBF\", cCheckArea( \"PEDCLIT\", @dbfPedCliT ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"PEDCLIT.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"PEDCLIL.DBF\", cCheckArea( \"PEDCLIL\", @dbfPedCliL ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"PEDCLIL.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   dbUseArea( .t., cDriver(), cPath + \"FACCLIL.DBF\", cCheckArea( \"FACCLIL\", @dbfFacCliL ), .f. )\n   if !lAIS(); ordListAdd( cPath + \"FACCLIL.CDX\" ); else ; ordSetFocus( 1 ) ; end\n\n   oNewImp              := TNewImp():Create( cPatEmp() )\n   if !oNewImp:OpenFiles()\n      lOpenFiles     := .f.\n   end if\n\n   ( dbfAlbCliT )->( ordSetFocus( 0 ) )\n   ( dbfAlbCliT )->( dbGoTop() )\n\n   while !( dbfAlbCliT )->( eof() )\n\n      if Empty( ( dbfAlbCliT )->cSufAlb )\n         ( dbfAlbCliT )->cSufAlb := \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumPre ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumPre ) ) != 12\n         ( dbfAlbCliT )->cNumPre := AllTrim( ( dbfAlbCliT )->cNumPre ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumPed ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumPed ) ) != 12\n         ( dbfAlbCliT )->cNumPed := AllTrim( ( dbfAlbCliT )->cNumPed ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumSat ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumSat ) ) != 12\n         ( dbfAlbCliT )->cNumSat := AllTrim( ( dbfAlbCliT )->cNumSat ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumFac ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumFac ) ) != 12\n         ( dbfAlbCliT )->cNumFac := AllTrim( ( dbfAlbCliT )->cNumFac ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumDoc ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumDoc ) ) != 12\n         ( dbfAlbCliT )->cNumDoc := AllTrim( ( dbfAlbCliT )->cNumDoc ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliT )->cNumTik ) .and. Len( AllTrim( ( dbfAlbCliT )->cNumTik ) ) != 13\n         ( dbfAlbCliT )->cNumTik := AllTrim( ( dbfAlbCliT )->cNumTik ) + \"00\"\n      end if\n\n      if Empty( ( dbfAlbCliT )->cCodCaj )\n         ( dbfAlbCliT )->cCodCaj := \"000\"\n      end if\n\n      if Empty( ( dbfAlbCliT )->cCodGrp )\n         ( dbfAlbCliT )->cCodGrp := RetGrpCli( ( dbfAlbCliT )->cCodCli, dbfClient )\n      end if\n\n      if Empty( ( dbfAlbCliT )->cNomCli ) .and. !Empty ( ( dbfAlbCliT )->cCodCli )\n         ( dbfAlbCliT )->cNomCli    := RetFld( ( dbfAlbCliT )->cCodCli, dbfClient, \"Titulo\" )\n      end if\n\n      /*\n      Rellenamos los campos de totales-----------------------------------------\n      */\n\n      if ( dbfAlbCliT )->nTotAlb == 0 .and. dbLock( dbfAlbCliT )\n\n         aTotAlb                 := aTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, ( dbfAlbCliT )->cDivAlb )\n\n         ( dbfAlbCliT )->nTotNet := aTotAlb[1]\n         ( dbfAlbCliT )->nTotIva := aTotAlb[2]\n         ( dbfAlbCliT )->nTotReq := aTotAlb[3]\n         ( dbfAlbCliT )->nTotAlb := aTotAlb[4]\n\n         ( dbfAlbCliT )->( dbUnLock() )\n\n      end if\n      */\n\n      /*\n      Rellenamos los campos de totales-----------------------------------------\n\n      if ( dbfAlbCliT )->nTotPag == 0 .and. dbLock( dbfAlbCliT )\n         ( dbfAlbCliT )->nTotPag := nPagAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliP, dbfDiv )\n         ( dbfAlbCliT )->( dbUnLock() )\n      end if\n      */\n\n      /*\n      Si el albarán está creado desde un pedido le revisamos el estado---------\n      */\n\n      aAdd( aNumPed, ( dbfAlbCliT )->cNumPed )\n\n      ( dbfAlbCliT )->( dbSkip() )\n\n   end while\n\n   ( dbfAlbCliT )->( ordSetFocus( 1 ) )\n\n   /*\n   Repasamos para que siempre esten rellenos los campos de totales-------------\n   */\n\n   ( dbfAlbCliT )->( dbGoTop() )\n\n   while !( dbfAlbCliT )->( eof() )\n\n      if ( dbfAlbCliT )->nTotAlb == 0 .and. dbLock( dbfAlbCliT )\n\n         aTotAlb                 := aTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, ( dbfAlbCliT )->cDivAlb )\n\n         ( dbfAlbCliT )->nTotNet := aTotAlb[1]\n         ( dbfAlbCliT )->nTotIva := aTotAlb[2]\n         ( dbfAlbCliT )->nTotReq := aTotAlb[3]\n         ( dbfAlbCliT )->nTotAlb := aTotAlb[4]\n\n         ( dbfAlbCliT )->( dbUnLock() )\n\n      end if\n      \n      ( dbfAlbCliT )->( dbSkip() )\n\n   end while\n\n   /*\n   Lineas----------------------------------------------------------------------\n   */\n\n   ( dbfAlbCliL )->( ordSetFocus( 0 ) )\n   ( dbfAlbCliL )->( dbGoTop() )\n\n   while !( dbfAlbCliL )->( eof() )\n\n      if Empty( ( dbfAlbCliL )->cSufAlb )\n         ( dbfAlbCliL )->cSufAlb    := \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliL )->cNumPed ) .and. Len( AllTrim( ( dbfAlbCliL )->cNumPed ) ) != 12\n         ( dbfAlbCliL )->cNumPed := AllTrim( ( dbfAlbCliL )->cNumPed ) + \"00\"\n      end if\n\n      if !Empty( ( dbfAlbCliL )->cNumSat ) .and. Len( AllTrim( ( dbfAlbCliL )->cNumSat ) ) != 12\n         ( dbfAlbCliL )->cNumSat := AllTrim( ( dbfAlbCliL )->cNumSat ) + \"00\"\n      end if\n\n      if Empty( ( dbfAlbCliL )->cLote ) .and. !Empty( ( dbfAlbCliL )->nLote )\n         ( dbfAlbCliL )->cLote      := AllTrim( Str( ( dbfAlbCliL )->nLote ) )\n      end if\n\n      if Empty( ( dbfAlbCliL )->nValImp )\n         cCodImp                    := RetFld( ( dbfAlbCliL )->CREF, dbfArticulo, \"cCodImp\" )\n         if !Empty( cCodImp )\n            ( dbfAlbCliL )->nValImp := oNewImp:nValImp( cCodImp )\n         end if\n      end if\n\n      if Empty( ( dbfAlbCliL )->nVolumen )\n         ( dbfAlbCliL )->nVolumen   := RetFld( ( dbfAlbCliL )->CREF, dbfArticulo, \"nVolumen\" )\n      end if\n\n      if ( dbfAlbCliL )->lIvaLin != RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"lIvaInc\" )\n         ( dbfAlbCliL )->lIvaLin    := RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"lIvaInc\" )\n      end if\n\n      if !Empty( ( dbfAlbCliL )->cRef ) .and. Empty( ( dbfAlbCliL )->cCodFam )\n         ( dbfAlbCliL )->cCodFam    := RetFamArt( ( dbfAlbCliL )->cRef, dbfArticulo )\n      end if\n\n      if !Empty( ( dbfAlbCliL )->cRef ) .and. !Empty( ( dbfAlbCliL )->cCodFam )\n         ( dbfAlbCliL )->cGrpFam    := cGruFam( ( dbfAlbCliL )->cCodFam, dbfFamilia )\n      end if\n\n      if Empty( ( dbfAlbCliL )->nReq )\n         ( dbfAlbCliL )->nReq       := nPReq( dbfIva, ( dbfAlbCliL )->nIva )\n      end if\n\n      if ( dbfAlbCliL )->lFacturado != RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"lFacturado\" )\n         ( dbfAlbCliL )->lFacturado := RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"lFacturado\" )\n      end if\n\n      if ( dbfAlbCliL )->dFecAlb != RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"dFecAlb\" )\n         ( dbfAlbCliL )->dFecAlb    := RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"dFecAlb\" )\n      end if\n\n      if Empty( ( dbfAlbCliL )->cAlmLin )\n         ( dbfAlbCliL )->cAlmLin    := RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"cCodAlm\" )\n      end if\n\n      if !Empty( ( dbfAlbCliL )->mNumSer )\n         aNumSer                       := hb_aTokens( ( dbfAlbCliL )->mNumSer, \",\" )\n         for each cNumSer in aNumSer\n            ( dbfAlbCliS )->( dbAppend() )\n            ( dbfAlbCliS )->cSerAlb    := ( dbfAlbCliL )->cSerAlb\n            ( dbfAlbCliS )->nNumAlb    := ( dbfAlbCliL )->nNumAlb\n            ( dbfAlbCliS )->cSufAlb    := ( dbfAlbCliL )->cSufAlb\n            ( dbfAlbCliS )->cRef       := ( dbfAlbCliL )->cRef\n            ( dbfAlbCliS )->cAlmLin    := ( dbfAlbCliL )->cAlmLin\n            ( dbfAlbCliS )->nNumLin    := ( dbfAlbCliL )->nNumLin\n            ( dbfAlbCliS )->lFacturado := ( dbfAlbCliL )->lFacturado\n            ( dbfAlbCliS )->cNumSer    := cNumSer\n         next\n         ( dbfAlbCliL )->mNumSer       := \"\"\n      end if\n\n      ( dbfAlbCliL )->( dbSkip() )\n\n      SysRefresh()\n\n   end while\n\n   ( dbfAlbCliL )->( ordSetFocus( 1 ) )\n\n   // Incidencias--------------------------------------------------------------\n\n   ( dbfAlbCliI )->( ordSetFocus( 0 ) )\n   ( dbfAlbCliI )->( dbGoTop() )\n\n   while !( dbfAlbCliI )->( eof() )\n\n      if Empty( ( dbfAlbCliI )->cSufAlb )\n         ( dbfAlbCliI )->cSufAlb    := \"00\"\n      end if\n\n      ( dbfAlbCliI )->( dbSkip() )\n\n      SysRefresh()\n\n   end while\n\n   ( dbfAlbCliI )->( OrdSetFocus( 1 ) )\n\n   // Series ---------------------------------------------------------------\n\n   ( dbfAlbCliS )->( ordSetFocus( 0 ) )\n   ( dbfAlbCliS )->( dbGoTop() )\n\n   while !( dbfAlbCliS )->( eof() )\n\n      if Empty( ( dbfAlbCliS )->cSufAlb )\n         ( dbfAlbCliS )->cSufAlb    := \"00\"\n      end if\n\n      if ( dbfAlbCliS )->dFecAlb != RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"dFecAlb\" )\n         ( dbfAlbCliS )->dFecAlb    := RetFld( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT, \"dFecAlb\" )\n      end if\n\n      ( dbfAlbCliS )->( dbSkip() )\n\n      SysRefresh()\n\n   end while\n\n   ( dbfAlbCliS )->( ordSetFocus( 1 ) )\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible sincronizar albaranes de clientes\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   if !Empty( dbfAlbCliT ) .and. ( dbfAlbCliT )->( Used() )\n      ( dbfAlbCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliL ) .and. ( dbfAlbCliL )->( Used() )\n      ( dbfAlbCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliS ) .and. ( dbfAlbCliS )->( Used() )\n      ( dbfAlbCliS )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliI ) .and. ( dbfAlbCliI )->( Used() )\n      ( dbfAlbCliI )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfAlbCliP ) .and. ( dbfAlbCliP )->( Used() )\n      ( dbfAlbCliP )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfArticulo ) .and. ( dbfArticulo )->( Used() )\n      ( dbfArticulo )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFamilia ) .and. ( dbfFamilia )->( Used() )\n      ( dbfFamilia )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfClient ) .and. ( dbfClient )->( Used() )\n      ( dbfClient )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfIva ) .and. ( dbfIva )->( Used() )\n      ( dbfIva )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfDiv ) .and. ( dbfDiv )->( Used() )\n      ( dbfDiv )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliT ) .and. ( dbfPedCliT )->( Used() )\n      ( dbfPedCliT )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfPedCliL ) .and. ( dbfPedCliL )->( Used() )\n      ( dbfPedCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfFacCliL ) .and. ( dbfFacCliL )->( Used() )\n      ( dbfFacCliL )->( dbCloseArea() )\n   end if\n\n   if !Empty( oNewImp )\n      oNewImp:end()\n   end if\n\n   oNewImp     := nil\n\n   /*\n   Estado de los pedidos-------------------------------------------------------\n   */\n\n   oStock               := TStock():Create()\n   if oStock:lOpenFiles()\n\n      for each cNumPed in aNumPed\n         oStock:SetEstadoPedCli( cNumPed )\n      end if\n\n   end if\n       \n   if !Empty( oStock )\n      oStock:end()\n   end if\n\n   oStock      := nil\n\nreturn nil\n\n//------------------------------------------------------------------------//\n\nFunction lGetUsuario( oGetUsuario, dbfUsr )\n\n   local oDlg\n   local oCodigoUsuario\n   local cCodigoUsuario := Space( 3 )\n   local oNombreUsuario\n   local cNombreUsuario := \"\"\n\n   if !lRecogerUsuario()\n      Return .t.\n   end if\n\n   DEFINE DIALOG oDlg RESOURCE \"GetUsuario\"\n\n      REDEFINE GET oCodigoUsuario ;\n         VAR      cCodigoUsuario ;\n         ID       100 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwUser( oCodigoUsuario, dbfUsr ) ) ;\n         VALID    ( SetUsuario( oCodigoUsuario, oNombreUsuario, oDlg, dbfUsr ) ) ;\n         OF       oDlg\n\n      REDEFINE GET oNombreUsuario ;\n         VAR      cNombreUsuario ;\n         ID       110 ;\n         WHEN     ( .f. ) ;\n         OF       oDlg\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( if( oCodigoUsuario:lValid(), oDlg:end( IDOK ), ) )\n\n		REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:end() )\n\n      oDlg:bStart       := { || oCodigoUsuario:SetFocus(), oCodigoUsuario:SelectAll() }\n      oDlg:bKeyDown     := { | nKey | if( nKey == 65 .and. GetKeyState( VK_CONTROL ), CreateInfoArticulo(), 0 ) }\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult == IDOK\n\n      oCodigoUsuario:cText( cCodigoUsuario )\n      oCodigoUsuario:lValid()\n\n      if !Empty( oGetUsuario )\n         oGetUsuario:cText( cCodigoUsuario )\n         oGetUsuario:lValid()\n      end if\n\n   end if\n\nReturn ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nFunction SetUsuario( oCodUsr, oSay, oDlg, dbfUsr )\n\n   local lSetUsr  := .t.\n   local cCodUsr  := oCodUsr:VarGet()\n\n   if ( dbfUsr )->( dbSeek( cCodUsr ) )\n      oSay:cText( Rtrim( ( dbfUsr )->cNbrUse ) )\n      if !Empty( oDlg )\n         oDlg:End( IDOK )\n      end if\n   else\n      oCodUsr:cText( Space( 3 ) )\n      lSetUsr     := .f.\n   end if\n\nReturn ( lSetUsr )\n\n//---------------------------------------------------------------------------//\n\nStatic Function EdtEnt( aTmp, aGet, dbfTmpPgo, oBrw, bWhen, bValid, nMode, aTmpAlb )\n\n   local oDlg\n   local oFld\n   local oBmp\n   local oFpago\n   local cFpago\n   local oBmpDiv\n   local oGetCli\n   local cGetCli\n   local oGetAge\n   local cGetAge\n   local oGetCaj\n   local cGetCaj\n   local cPorDiv\n   local oBmpBancos\n\n   DEFAULT aTmpAlb   := dbScatter( dbfAlbCliT )\n\n   do case\n      case nMode == APPD_MODE\n\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cTurRec\" ) ) ]      := cCurSesion()\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ]      := oUser():cCaja()\n\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cSerAlb\" ) ) ]      := aTmpAlb[ _CSERALB ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"nNumAlb\" ) ) ]      := aTmpAlb[ _NNUMALB ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cSufAlb\" ) ) ]      := aTmpAlb[ _CSUFALB ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ]      := aTmpAlb[ _CCODCLI ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ]      := aTmpAlb[ _CCODAGE ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ]      := aTmpAlb[ _CDIVALB ]\n         aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ]      := aTmpAlb[ _CCODPAGO]\n\n         if dbSeekInOrd( aTmpAlb[ _CCODPAGO ], \"cCodPago\", dbfFPago ) .and. ( dbfFPago )->lUtlBnc\n\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cBncEmp\" ) ) ]   := ( dbfFPago )->cBanco\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cEntEmp\" ) ) ]   := ( dbfFPago )->cEntBnc\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cSucEmp\" ) ) ]   := ( dbfFPago )->cSucBnc\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDigEmp\" ) ) ]   := ( dbfFPago )->cDigBnc\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCtaEmp\" ) ) ]   := ( dbfFPago )->cCtaBnc\n\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cBncCli\" ) ) ]   := aTmpAlb[ _CBANCO  ]\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cEntCli\" ) ) ]   := aTmpAlb[ _CENTBNC ]\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cSucCli\" ) ) ]   := aTmpAlb[ _CSUCBNC ]\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDigCli\" ) ) ]   := aTmpAlb[ _CDIGBNC ]\n            aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCtaCli\" ) ) ]   := aTmpAlb[ _CCTABNC ]\n\n         end if\n\n      case nMode == EDIT_MODE\n\n         if aTmp[ ( dbfTmpPgo )->( FieldPos( \"lCloPgo\" ) ) ] .and. !oUser():lAdministrador()\n            msgStop( \"Solo pueden modificar las entregas cerradas los administradores.\" )\n            return .f.\n         end if\n\n   end case\n\n   cGetCli           := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ], dbfClient, \"Titulo\" )\n   cGetAge           := cNbrAgent( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ], dbfAgent )\n   cGetCaj           := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ], dbfCajT, \"cNomCaj\" )\n   cPorDiv           := cPorDiv(aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ], dbfDiv )\n   cFPago            := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ], dbfFPago )\n\n   DEFINE DIALOG  oDlg ;\n         RESOURCE \"Recibos\" ;\n         TITLE    LblTitle( nMode ) + \"Entregas a cuenta\"\n\n      REDEFINE FOLDER oFld ;\n         ID       500;\n         OF       oDlg ;\n         PROMPT   \"&General\",;\n                  \"Bancos\";\n         DIALOGS  \"Entregas_1\",;\n                  \"Recibos_4\"\n\n      REDEFINE BITMAP oBmp ;\n         ID       500 ;\n         RESOURCE \"Money_Alpha_48\" ;\n         TRANSPARENT ;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Importe\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"nImporte\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"nImporte\" ) ) ] ;\n         ID       160 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         PICTURE  ( cPorDiv ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      // Divisa\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ];\n         WHEN     ( .f. ) ;\n         VALID    ( cDivOut( aGet[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ], oBmpDiv, aGet[ ( dbfTmpPgo )->( FieldPos( \"nVdvPgo\" ) ) ], nil, nil, @cPorDiv, nil, nil, nil, nil, dbfDiv, oBandera ) );\n         PICTURE  \"@!\";\n         ID       150 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  BrwDiv( aGet[ ( dbfTmpPgo )->( FieldPos( \"cDivPgo\" ) ) ], oBmpDiv, aGet[ ( dbfTmpPgo )->( FieldPos( \"nVdvPgo\" ) ) ], dbfDiv, oBandera ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE BITMAP oBmpDiv ;\n         RESOURCE \"BAN_EURO\" ;\n         ID       151;\n         OF       oFld:aDialogs[ 1 ]\n\n      // Forma de pago---------------------------------------------------------\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ] ;\n         ID       180 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n			PICTURE  \"@!\" ;\n         VALID    ( cFPago( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ], dbfFPago, oFpago ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwFPago( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodPgo\" ) ) ], oFpago ) ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET oFpago VAR cFpago ;\n         ID       181 ;\n			WHEN 		.F. ;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Fecha\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"dEntrega\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"dEntrega\" ) ) ] ;\n         ID       100 ;\n         SPINNER ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ON HELP  aGet[ ( dbfTmpPgo )->( FieldPos( \"dEntrega\" ) ) ]:cText( Calendario( aTmp[ ( dbfTmpPgo )->( FieldPos( \"dEntrega\" ) ) ] ) ) ;\n         BITMAP   \"LUPA\" ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cTurRec\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"cTurRec\" ) ) ] ;\n         ID       335 ;\n         PICTURE  \"999999\" ;\n         WHEN     ( nMode != ZOOM_MODE .and. lUsrMaster() ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Cliente\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ;\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( cClient( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ], dbfClient, oGetCli ) ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwClient( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ], oGetCli ) ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET oGetCli VAR cGetCli ;\n         ID       111 ;\n         WHEN     .f.;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Agente\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ] ;\n         ID       120 ;\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         VALID    ( cAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ], dbfAgent, oGetAge ) );\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodAge\" ) ) ], oGetAge ) );\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET oGetAge VAR cGetAge ;\n         ID       121 ;\n         WHEN     .f.;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Descripción\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cDescrip\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cDescrip\" ) ) ] ;\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Pagado por\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cPgdoPor\" ) ) ];\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cPgdoPor\" ) ) ] ;\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      //Cajas\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ] ;\n         VAR      aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ];\n			WHEN 		( nMode != ZOOM_MODE ) ;\n         VALID    cCajas( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ], dbfCajT, oGetCaj ) ;\n         ID       170 ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwCajas( aGet[ ( dbfTmpPgo )->( FieldPos( \"cCodCaj\" ) ) ], oGetCaj ) ) ;\n         OF       oFld:aDialogs[ 1 ]\n\n      REDEFINE GET oGetCaj VAR cGetCaj ;\n         ID       171 ;\n         WHEN     .f. ;\n         OF       oFld:aDialogs[ 1 ]\n\n      /*\n      Pestaña de bancos--------------------------------------------------------\n      */\n\n      REDEFINE BITMAP oBmpBancos ;\n         ID       500 ;\n         RESOURCE \"office_building_48_alpha\" ;\n         TRANSPARENT ;\n         OF       oFld:aDialogs[ 2 ]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CBNCEMP\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CBNCEMP\" ) ) ];\n         ID       100 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwBncEmp( aGet[ ( dbfTmpPgo )->( FieldPos( \"CBNCEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ] ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ];\n         ID       110 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ];\n         ID       120 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ];\n         ID       130 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ];\n         ID       140 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTAEMP\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGEMP\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CBNCCLI\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CBNCCLI\" ) ) ];\n         ID       200 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         BITMAP   \"LUPA\" ;\n         ON HELP  ( BrwBncCli( aGet[ ( dbfTmpPgo )->( FieldPos( \"CBNCCLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCODCLI\" ) ) ] ) );\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ];\n         ID       210 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ];\n         ID       220 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ];\n         ID       230 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      REDEFINE GET aGet[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ] VAR aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ];\n         ID       240 ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         VALID    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( \"CENTCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CSUCCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( \"CCTACLI\" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( \"CDIGCLI\" ) ) ] ) ) ;\n         OF       oFld:aDialogs[2]\n\n      //Botones\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         WHEN     ( nMode != ZOOM_MODE ) ;\n         ACTION   ( ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo ) )\n\n		REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n			OF 		oDlg ;\n         CANCEL ;\n         ACTION   ( oDlg:End() )\n\n   oDlg:bStart    := {|| aGet[ ( dbfTmpPgo )->( FieldPos( \"nImporte\" ) ) ]:SetFocus() }\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo ) } )\n   end if\n\n   ACTIVATE DIALOG oDlg CENTER;\n      ON INIT ( CreateMenuEntrega( aTmp, oDlg ) )\n\n   if !Empty( oMenu )\n      oMenu:End()\n   end if\n\n   if !Empty( oBmpDiv )\n      oBmpDiv:End()\n   end if\n\n   if !Empty( oBmp )\n      oBmp:End()\n   end if\n\n   if !Empty( oBmpBancos )\n      oBmpBancos:End()\n   end if\n\nRETURN ( oDlg:nResult == IDOK )\n\n//---------------------------------------------------------------------------//\n\nStatic Function ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo )\n\n   if nMode == APPD_MODE\n      aTmp[ ( dbfTmpPgo )->( FieldPos( \"nNumRec\" ) ) ]   := ( dbfTmpPgo )->( LastRec() ) + 1\n   end if\n\n   WinGather( aTmp, aGet, dbfTmpPgo, oBrw, nMode )\n\n   oDlg:End( IDOK )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function CreateMenuEntrega( aTmp, oDlg )\n\n   MENU oMenu\n\n      MENUITEM    \"&1. Rotor\"\n\n         MENU\n\n            MENUITEM    \"&2. Modificar cliente\";\n               MESSAGE  \"Modifica la ficha del cliente\" ;\n               RESOURCE \"User1_16\" ;\n               ACTION   ( if( !Empty( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ), EdtCli( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ), MsgStop( \"Código de cliente vacío\" ) ) )\n\n            MENUITEM    \"&3. Informe de cliente\";\n               MESSAGE  \"Informe de cliente\" ;\n               RESOURCE \"Info16\" ;\n               ACTION   ( if( !Empty( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ), InfCliente( aTmp[ ( dbfTmpPgo )->( FieldPos( \"cCodCli\" ) ) ] ), MsgStop( \"Código de cliente vacío\" ) ) );\n\n         ENDMENU\n\n   ENDMENU\n\n   oDlg:SetMenu( oMenu )\n\nRETURN ( oMenu )\n\n//--------------------------------------------------------------------------//\n\nCLASS TAlbaranesClientesSenderReciver FROM TSenderReciverItem\n\n   Method CreateData()\n\n   Method RestoreData()\n\n   Method SendData()\n\n   Method ReciveData()\n\n   Method Process()\n\nEND CLASS\n\n//----------------------------------------------------------------------------//\n\nMethod CreateData()\n\n   local oBlock\n   local oError\n   local lSnd        := .f.\n   local nOrd\n   local dbfAlbCliT\n   local dbfAlbCliL\n   local dbfAlbCliI\n   local tmpAlbCliT\n   local tmpAlbCliL\n   local tmpAlbCliI\n   local cFileName\n\n   if ::oSender:lServer\n      cFileName      := \"AlbCli\" + StrZero( ::nGetNumberToSend(), 6 ) + \".All\"\n   else\n      cFileName      := \"AlbCli\" + StrZero( ::nGetNumberToSend(), 6 ) + \".\" + RetSufEmp()\n   end if\n\n   ::oSender:SetText( \"Enviando albaranes de clientes\" )\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   USE ( cPatEmp() + \"AlbCLIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCLIT\", @dbfAlbCliT ) )\n   SET ADSINDEX TO ( cPatEmp() + \"AlbCLIT.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"AlbCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCLIL\", @dbfAlbCliL ) )\n   SET ADSINDEX TO ( cPatEmp() + \"AlbCLIL.CDX\" ) ADDITIVE\n\n   USE ( cPatEmp() + \"AlbCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliI\", @dbfAlbCliI ) )\n   SET ADSINDEX TO ( cPatEmp() + \"AlbCliI.CDX\" ) ADDITIVE\n\n   /*\n   Creamos todas las bases de datos relacionadas con Articulos\n   */\n\n   rxAlbCli( cPatSnd() )\n\n   USE ( cPatSnd() + \"AlbCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliT\", @tmpAlbCliT ) )\n   SET ADSINDEX TO ( cPatSnd() + \"AlbCliT.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"AlbCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliL\", @tmpAlbCliL ) )\n   SET ADSINDEX TO ( cPatSnd() + \"AlbCliL.CDX\" ) ADDITIVE\n\n   USE ( cPatSnd() + \"AlbCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliI\", @tmpAlbCliI ) )\n   SET ADSINDEX TO ( cPatSnd() + \"AlbCliI.CDX\" ) ADDITIVE\n\n   if !Empty( ::oSender:oMtr )\n      ::oSender:oMtr:nTotal := ( dbfAlbCliT )->( LastRec() )\n   end if\n\n   nOrd  := ( dbfAlbCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n   if ( dbfAlbCliT )->( dbSeek( .t. ) )\n\n      while !( dbfAlbCliT )->( eof() )\n\n         if ( lEnviarEntregados() .and. ( dbfAlbCliT )->lEntregado ) .or. !lEnviarEntregados()\n\n            lSnd  := .t.\n\n            dbPass( dbfAlbCliT, tmpAlbCliT, .t. )\n            ::oSender:SetText( ( dbfAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + AllTrim( ( dbfAlbCliT )->cSufAlb ) + \"; \" + Dtoc( ( dbfAlbCliT )->dFecAlb ) + \"; \" + AllTrim( ( dbfAlbCliT )->cCodCli ) + \"; \" + ( dbfAlbCliT )->cNomCli )\n\n            if ( dbfAlbCliL )->( dbSeek( ( dbfAlbCliT )->CSERAlb + Str( ( dbfAlbCliT )->NNUMAlb ) + ( dbfAlbCliT )->CSUFAlb ) )\n               while ( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->NNUMAlb ) + ( dbfAlbCliL )->CSUFAlb ) == ( ( dbfAlbCliT )->CSERAlb + Str( ( dbfAlbCliT )->NNUMAlb ) + ( dbfAlbCliT )->CSUFAlb ) .AND. !( dbfAlbCliL )->( eof() )\n                  dbPass( dbfAlbCliL, tmpAlbCliL, .t. )\n                  ( dbfAlbCliL )->( dbSkip() )\n               end do\n            end if\n\n            if ( dbfAlbCliI )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) )\n               while ( ( dbfAlbCliI )->cSerAlb + Str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb ) == ( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) .AND. !( dbfAlbCliI )->( eof() )\n                  dbPass( dbfAlbCliI, tmpAlbCliI, .t. )\n                  ( dbfAlbCliI )->( dbSkip() )\n               end do\n            end if\n\n         end if\n\n         SysRefresh()\n\n         ( dbfAlbCliT )->( dbSkip() )\n\n         if !Empty( ::oSender:oMtr )\n            ::oSender:oMtr:Set( ( dbfAlbCliT )->( OrdKeyNo() ) )\n         end if\n\n      end do\n\n   end if\n\n   ( dbfAlbCliT )->( OrdSetFocus( nOrd ) )\n\n   RECOVER USING oError\n\n      msgStop( \"Imposible abrir todas las bases de datos de albaranes\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n   ErrorBlock( oBlock )\n\n   CLOSE ( dbfAlbCliT )\n   CLOSE ( dbfAlbCliL )\n   CLOSE ( dbfAlbCliI )\n   CLOSE ( tmpAlbCliT )\n   CLOSE ( tmpAlbCliL )\n   CLOSE ( tmpAlbCliI )\n\n   if lSnd\n\n      ::oSender:SetText( \"Comprimiendo albaranes de clientes\" )\n\n      if ::oSender:lZipData( cFileName )\n         ::oSender:SetText( \"Ficheros comprimidos\" )\n      else\n         ::oSender:SetText( \"ERROR al crear fichero comprimido\" )\n      end if\n\n   else\n\n      ::oSender:SetText( \"No hay albaranes de clientes para enviar\" )\n\n   end if\n\nReturn ( Self )\n\n//----------------------------------------------------------------------------//\n\nMethod RestoreData()\n\n   local oBlock\n   local oError\n   local dbfAlbCliT\n\n   /*\n   Retorna el valor anterior\n   */\n\n   if ::lSuccesfullSend\n\n      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n      BEGIN SEQUENCE\n\n         USE ( cPatEmp() + \"AlbCLIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCLIT\", @dbfAlbCliT ) )\n         SET ADSINDEX TO ( cPatEmp() + \"AlbCliT.Cdx\" ) ADDITIVE\n\n         ( dbfAlbCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n         while ( dbfAlbCliT )->( dbSeek( .t. ) ) .and. !( dbfAlbCliT )->( eof() )\n            if dbLock( dbfAlbCliT )\n               ( dbfAlbCliT )->lSndDoc := .f.\n               ( dbfAlbCliT )->( dbRUnlock() )\n            end if\n         end do\n\n      RECOVER USING oError\n\n         msgStop( \"Imposible abrir todas las bases de datos de albaranes\" + CRLF + ErrorMessage( oError ) )\n\n      END SEQUENCE\n      ErrorBlock( oBlock )\n\n      CLOSE ( dbfAlbCliT )\n\n   end if\n\nReturn ( Self )\n\n//---------------------------------------------------------------------------//\n\nMethod SendData()\n\n   local cFileName\n\n   if ::oSender:lServer\n      cFileName         := \"AlbCli\" + StrZero( ::nGetNumberToSend(), 6 ) + \".All\"\n   else\n      cFileName         := \"AlbCli\" + StrZero( ::nGetNumberToSend(), 6 ) + \".\" + RetSufEmp()\n   end if\n\n   /*\n   Enviarlos a internet--------------------------------------------------------\n   */\n\n   if File( cPatOut() + cFileName )\n\n      if ftpSndFile( cPatOut() + cFileName, cFileName, 2000, ::oSender )\n         ::IncNumberToSend()\n         ::lSuccesfullSend := .t.\n         ::oSender:SetText( \"Fichero enviado \" + cFileName )\n      else\n         ::oSender:SetText( \"ERROR al enviar fichero\" )\n      end if\n\n   end if\n\nReturn ( Self )\n\n//---------------------------------------------------------------------------//\n\nMethod ReciveData()\n\n   local n\n   local aExt\n\n   if ::oSender:lServer\n      aExt        := aRetDlgEmp()\n   else\n      aExt        := { \"All\" }\n   end if\n\n   /*\n   Recibirlo de internet\n   */\n\n   ::oSender:SetText( \"Recibiendo albaranes de clientes\" )\n\n   for n := 1 to len( aExt )\n      ftpGetFiles( \"AlbCli*.\" + aExt[ n ], cPatIn(), 2000, ::oSender )\n   next\n\n   ::oSender:SetText( \"Albaranes de clientes recibidos\" )\n\nReturn Self\n\n//----------------------------------------------------------------------------//\n\nMethod Process()\n\n   local m\n   local dbfAlbCliT\n   local dbfAlbCliL\n   local dbfAlbCliI\n   local tmpAlbCliT\n   local tmpAlbCliL\n   local tmpAlbCliI\n   local oBlock\n   local oError\n   local aFiles      := Directory( cPatIn() + \"AlbCli*.*\" )\n   local lClient     := ::oSender:lServer\n\n   for m := 1 to len( aFiles )\n\n      ::oSender:SetText( \"Procesando fichero : \" + aFiles[ m, 1 ] )\n\n      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n      BEGIN SEQUENCE\n\n         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )\n\n            /*\n            Ficheros temporales\n            */\n\n            if lExistTable( cPatSnd() + \"AlbCliT.DBF\" )   .and.;\n               lExistTable( cPatSnd() + \"AlbCliL.DBF\" )   .and.;\n               lExistTable( cPatSnd() + \"AlbCliI.DBF\" )\n\n               USE ( cPatSnd() + \"AlbCliT.DBF\" ) NEW VIA ( cDriver() )READONLY ALIAS ( cCheckArea( \"AlbCliT\", @tmpAlbCliT ) )\n               SET ADSINDEX TO ( cPatSnd() + \"AlbCliT.CDX\" ) ADDITIVE\n\n               USE ( cPatSnd() + \"AlbCliL.DBF\" ) NEW VIA ( cDriver() )READONLY ALIAS ( cCheckArea( \"AlbCliL\", @tmpAlbCliL ) )\n               SET ADSINDEX TO ( cPatSnd() + \"AlbCliL.CDX\" ) ADDITIVE\n\n               USE ( cPatSnd() + \"AlbCliI.DBF\" ) NEW VIA ( cDriver() )READONLY ALIAS ( cCheckArea( \"AlbCliI\", @tmpAlbCliI ) )\n               SET ADSINDEX TO ( cPatSnd() + \"AlbCliI.CDX\" ) ADDITIVE\n\n               USE ( cPatEmp() + \"AlbCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliT\", @dbfAlbCliT ) )\n               SET ADSINDEX TO ( cPatEmp() + \"AlbCliT.CDX\" ) ADDITIVE\n\n               USE ( cPatEmp() + \"AlbCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliL\", @dbfAlbCliL ) )\n               SET ADSINDEX TO ( cPatEmp() + \"AlbCliL.CDX\" ) ADDITIVE\n\n               USE ( cPatEmp() + \"AlbCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliI\", @dbfAlbCliI ) )\n               SET ADSINDEX TO ( cPatEmp() + \"AlbCliI.CDX\" ) ADDITIVE\n\n               while ( tmpAlbCliT )->( !eof() )\n\n                  if lValidaOperacion( ( tmpAlbCliT )->dFecAlb, .f. ) .and. ;\n                     !( dbfAlbCliT )->( dbSeek( ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb ) )\n\n                     dbPass( tmpAlbCliT, dbfAlbCliT, .t. )\n\n                     if lClient .and. dbLock( dbfAlbCliT )\n                        ( dbfAlbCliT )->lSndDoc := .f.\n                        ( dbfAlbCliT )->( dbUnLock() )\n                     end if\n\n                     ::oSender:SetText( \"Añadido     : \" + ( tmpAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( tmpAlbCliT )->nNumAlb ) ) + \"/\" + AllTrim( ( tmpAlbCliT )->cSufAlb ) + \"; \" + Dtoc( ( tmpAlbCliT )->dFecAlb ) + \"; \" + AllTrim( ( tmpAlbCliT )->cCodCli ) + \"; \" + ( tmpAlbCliT )->cNomCli )\n\n                     if ( tmpAlbCliL )->( dbSeek( ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb ) )\n                        while ( tmpAlbCliL )->cSerAlb + Str( ( tmpAlbCliL )->nNumAlb ) + ( tmpAlbCliL )->cSufAlb == ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb .and. !( tmpAlbCliL )->( eof() )\n                           dbPass( tmpAlbCliL, dbfAlbCliL, .t. )\n                           ( tmpAlbCliL )->( dbSkip() )\n                        end do\n                     end if\n\n                     if ( tmpAlbCliI )->( dbSeek( ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb ) )\n                        while ( tmpAlbCliI )->cSerAlb + Str( ( tmpAlbCliI )->nNumAlb ) + ( tmpAlbCliI )->cSufAlb == ( tmpAlbCliT )->cSerAlb + Str( ( tmpAlbCliT )->nNumAlb ) + ( tmpAlbCliT )->cSufAlb .and. !( tmpAlbCliI )->( eof() )\n                           dbPass( tmpAlbCliI, dbfAlbCliI, .t. )\n                           ( tmpAlbCliI )->( dbSkip() )\n                        end do\n                     end if\n\n                  else\n\n                     ::oSender:SetText( \"Desestimado : \" + ( tmpAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( tmpAlbCliT )->nNumAlb ) ) + \"/\" + AllTrim( ( tmpAlbCliT )->cSufAlb ) + \"; \" + Dtoc( ( tmpAlbCliT )->dFecAlb ) + \"; \" + AllTrim( ( tmpAlbCliT )->cCodCli ) + \"; \" + ( tmpAlbCliT )->cNomCli )\n\n                  end if\n\n                  SysRefresh()\n\n                  ( tmpAlbCliT )->( dbSkip() )\n\n               end do\n\n               CLOSE ( dbfAlbCliT )\n               CLOSE ( dbfAlbCliL )\n               CLOSE ( dbfAlbCliI )\n               CLOSE ( tmpAlbCliT )\n               CLOSE ( tmpAlbCliL )\n               CLOSE ( tmpAlbCliI )\n\n               ::oSender:AppendFileRecive( aFiles[ m, 1 ] )\n\n            else\n\n               ::oSender:SetText( \"Faltan ficheros\" )\n\n               if !file( cPatSnd() + \"AlbCliT.Dbf\" )\n                  ::oSender:SetText( \"Falta\" + cPatSnd() + \"AlbCliT.Dbf\" )\n               end if\n\n               if !file( cPatSnd() + \"AlbCliL.Dbf\" )\n                  ::oSender:SetText( \"Falta\" + cPatSnd() + \"AlbCliL.Dbf\" )\n               end if\n\n               if !file( cPatSnd() + \"AlbCliI.Dbf\" )\n                  ::oSender:SetText( \"Falta\" + cPatSnd() + \"AlbCliI.Dbf\" )\n               end if\n\n            end if\n\n            fErase( cPatSnd() + \"AlbCliT.DBF\" )\n            fErase( cPatSnd() + \"AlbCliL.DBF\" )\n            fErase( cPatSnd() + \"AlbCliI.DBF\" )\n\n         else\n\n            ::oSender:SetText( \"Error al descomprimir los ficheros\" )\n\n         end if\n\n      RECOVER USING oError\n\n         CLOSE ( dbfAlbCliT )\n         CLOSE ( dbfAlbCliL )\n         CLOSE ( dbfAlbCliI )\n         CLOSE ( tmpAlbCliT )\n         CLOSE ( tmpAlbCliL )\n         CLOSE ( tmpAlbCliI )\n\n         ::oSender:SetText( \"Error procesando fichero \" + aFiles[ m, 1 ] )\n         ::oSender:SetText( ErrorMessage( oError ) )\n\n      END SEQUENCE\n      ErrorBlock( oBlock )\n\n   next\n\nReturn Self\n\n//----------------------------------------------------------------------------//\n/*\nStatic Function LoopDeta( oBrw, bEdt, aTmp, cNumAlb )\n\n   while !( dbfTmpLin )->( eof() )\n\n      EdtDeta( oBrw, bEdt, aTmp, , cNumAlb )\n\n      ( dbfTmpLin )->( dbSkip() )\n\n   end while\n\nreturn nil\n */\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DelSerie( oWndBrw )\n\n	local oDlg\n   local oSerIni\n   local oSerFin\n   local oTxtDel\n   local nTxtDel     := 0\n   local nRecno      := ( dbfAlbCliT )->( Recno() )\n   local nOrdAnt     := ( dbfAlbCliT )->( OrdSetFocus( 1 ) )\n   local oDesde      := TDesdeHasta():Init( ( dbfAlbCliT )->cSerAlb, ( dbfAlbCliT )->nNumAlb, ( dbfAlbCliT )->cSufAlb, GetSysDate() )\n   local lCancel     := .f.\n   local oBtnAceptar\n   local oBtnCancel\n\n   DEFINE DIALOG oDlg ;\n      RESOURCE \"DelSerDoc\" ;\n      TITLE    \"Eliminar series de albaranes\" ;\n      OF       oWndBrw\n\n   REDEFINE RADIO oDesde:nRadio ;\n      ID       90, 91 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR oDesde:cSerieInicio ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieInicio >= \"A\" .and. oDesde:cSerieInicio <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR oDesde:cSerieFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieFin >= \"A\" .and. oDesde:cSerieFin <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroInicio ;\n      ID       120 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroFin ;\n      ID       130 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoInicio ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaInicio ;\n      ID       170 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaFin ;\n      ID       180 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE BUTTON oBtnAceptar ;\n      ID       IDOK ;\n		OF 		oDlg ;\n      ACTION   ( DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, @lCancel ) )\n\n   REDEFINE BUTTON oBtnCancel ;\n      ID       IDCANCEL ;\n		OF 		oDlg ;\n      CANCEL ;\n      ACTION   ( lCancel := .t., oDlg:end() )\n\n   REDEFINE METER oTxtDel VAR nTxtDel ;\n      ID       160 ;\n      NOPERCENTAGE ;\n      TOTAL    ( dbfAlbCliT )->( OrdKeyCount() ) ;\n      OF       oDlg\n\n   ACTIVATE DIALOG oDlg CENTER VALID ( lCancel )\n\n   ( dbfAlbCliT )->( dbGoTo( nRecNo ) )\n   ( dbfAlbCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oWndBrw:SetFocus()\n   oWndBrw:Refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, lCancel )\n\n   local nOrd\n   local nDeleted          := 0\n   local nProcesed         := 0\n\n   oBtnAceptar:Hide()\n   oBtnCancel:bAction      := {|| lCancel := .t. }\n\n   if oDesde:nRadio == 1\n\n      nOrd                 := ( dbfAlbCliT )->( OrdSetFocus( \"nNumAlb\" ) )\n\n      ( dbfAlbCliT )->( dbSeek( oDesde:cNumeroInicio(), .t. ) )\n      while !lCancel .and. ( dbfAlbCliT )->( !eof() )\n\n         if ( dbfAlbCliT )->cSerAlb >= oDesde:cSerieInicio  .and.;\n            ( dbfAlbCliT )->cSerAlb <= oDesde:cSerieFin     .and.;\n            ( dbfAlbCliT )->nNumAlb >= oDesde:nNumeroInicio .and.;\n            ( dbfAlbCliT )->nNumAlb <= oDesde:nNumeroFin    .and.;\n            ( dbfAlbCliT )->cSufAlb >= oDesde:cSufijoInicio .and.;\n            ( dbfAlbCliT )->cSufAlb <= oDesde:cSufijoFin\n\n            ++nDeleted\n\n            oTxtDel:cText  := \"Eliminando : \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb\n\n            //AlbRecDel( .t., .t., .f., .f. )\n\n            WinDelRec( nil, dbfAlbCliT, {|| QuiAlbCli() } )\n\n         else\n\n            ( dbfAlbCliT )->( dbSkip() )\n\n         end if\n\n         ++nProcesed\n\n         oTxtDel:Set( ( dbfAlbCliT )->( OrdKeyNo() ) )\n\n      end do\n\n      ( dbfAlbCliT )->( OrdSetFocus( nOrd ) )\n\n   else\n\n      nOrd                 := ( dbfAlbCliT )->( OrdSetFocus( \"dFecAlb\" ) )\n\n      ( dbfAlbCliT )->( dbSeek( oDesde:dFechaInicio, .t. ) )\n      while !lCancel .and. ( dbfAlbCliT )->( !eof() )\n\n         if ( dbfAlbCliT )->dFecAlb >= oDesde:dFechaInicio  .and.;\n            ( dbfAlbCliT )->dFecAlb <= oDesde:dFechaFin\n\n            ++nDeleted\n\n            oTxtDel:cText  := \"Eliminando : \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb\n\n            //AlbRecDel( .t., .t., .f., .f. )\n\n            WinDelRec( nil, dbfAlbCliT, {|| QuiAlbCli() } )\n\n         else\n\n            ( dbfAlbCliT )->( dbSkip() )\n\n         end if\n\n         ++nProcesed\n\n         oTxtDel:Set( ( dbfAlbCliT )->( OrdKeyNo() ) )\n\n      end do\n\n      ( dbfAlbCliT )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   lCancel                 := .t.\n\n   oBtnAceptar:Show()\n\n   if lCancel\n      msgStop( \"Total de registros borrados : \" + Str( nDeleted ), \"Proceso cancelado\" )\n   else\n      msgInfo( \"Total de registros borrados : \" + Str( nDeleted ), \"Proceso finalizado\" )\n   end if\n\nRETURN ( oDlg:End() )\n\n//---------------------------------------------------------------------------//\n\n Static Function nEstadoIncidencia( cNumAlb )\n\n   local nEstado  := 0\n   local aBmp     := \"\"\n   local nOrdAnt  := ( dbfAlbCliI )->( OrdSetFocus( \"nNumAlb\" ) )\n\n   if ( dbfAlbCliI )->( dbSeek( cNumAlb ) )\n\n      while ( dbfAlbCliI )->cSerAlb + Str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == cNumAlb .and. !( dbfAlbCliI )->( Eof() )\n\n         if ( dbfAlbCliI )->lListo\n            do case\n               case nEstado == 0 .or. nEstado == 3\n                    nEstado := 3\n               case nEstado == 1\n                    nEstado := 2\n            end case\n         else\n            do case\n               case nEstado == 0\n                    nEstado := 1\n               case nEstado == 3\n                    nEstado := 2\n            end case\n         end if\n\n         ( dbfAlbCliI )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfAlbCliI )->( OrdSetFocus( nOrdAnt ) )\n\nReturn ( nEstado )\n\n//---------------------------------------------------------------------------//\n//NOTA: Esta funcion se utiliza para el estado de generado de pedidos de clientes\n//\n\nfunction nEstadoGenerado( cNumPed, dbfPedCliL, dbfPedPrvL )\n\n   local nEstado := 0\n   local nOrdAnt\n\n   if IsMuebles()\n      nOrdAnt := ( dbfPedPrvL )->( OrdSetFocus( \"CPEDCLIREFDET\" ) )\n   else\n      nOrdAnt := ( dbfPedPrvL )->( OrdSetFocus( \"CPEDCLIREF\" ) )\n   end if\n\n   ( dbfPedCliL )->( dbSeek( cNumPed ) )\n\n   while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cNumPed .and. !( dbfPedCliL )->( Eof() )\n\n      if IsMuebles()\n\n         if ( dbfPedPrvL )->( dbSeek( cNumPed + ( dbfPedCliL )->cRef + ( dbfPedCliL )->cRefPrv + ( dbfPedCliL )->cDetalle ) )\n\n            do case\n               case nEstado == 0 .or. nEstado == 3\n                  nEstado := 3\n               case nEstado == 1\n                  nEstado := 2\n            end case\n         else\n            do case\n               case nEstado == 0\n                  nEstado := 1\n               case nEstado == 3\n                  nEstado := 2\n            end case\n         end if\n\n      else\n\n         if( dbfPedPrvL )->( dbSeek( cNumPed + ( dbfPedCliL )->cRef ) )\n            do case\n               case nEstado == 0 .or. nEstado == 3\n                  nEstado := 3\n               case nEstado == 1\n                  nEstado := 2\n            end case\n         else\n            do case\n               case nEstado == 0\n                  nEstado := 1\n               case nEstado == 3\n                  nEstado := 2\n            end case\n         end if\n\n      end if\n\n   ( dbfPedCliL )->( dbSkip() )\n\n   end while\n\n   ( dbfPedPrvL )->( OrdSetFocus( nOrdAnt ) )\n\nreturn ( Max( nEstado, 1 ) )\n\n//---------------------------------------------------------------------------//\n\nFunction AppAlbCli( hHash, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_APPD ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli( nil, nil, hHash )\n         oWndBrw:RecAdd()\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n         nTotAlbCli()\n         WinAppRec( nil, bEdtRec, dbfAlbCliT, hHash )\n         CloseFiles()\n      end if\n\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\nFunction EdtAlbCli( cNumAlb, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_EDIT ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli()\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            oWndBrw:RecEdit()\n         else\n            MsgStop( \"No se encuentra albaran\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            nTotAlbCli()\n            WinEdtRec( nil, bEdtRec, dbfAlbCliT )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION ZooAlbCli( cNumAlb, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_ZOOM ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli()\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            oWndBrw:RecZoom()\n         else\n            MsgStop( \"No se encuentra albaran\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            nTotAlbCli()\n            WinZooRec( nil, bEdtRec, dbfAlbCliT )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION DelAlbCli( cNumAlb, lOpenBrowse )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_DELE ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli()\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            WinDelRec( nil, dbfAlbCliT, {|| QuiAlbCli() } )\n         else\n            MsgStop( \"No se encuentra albaran\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            nTotAlbCli()\n            WinDelRec( nil, dbfAlbCliT, {|| QuiAlbCli() } )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//----------------------------------------------------------------------------//\n\nFUNCTION PrnAlbCli( cNumAlb, lOpenBrowse, cCaption, cFormato, cPrinter )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli()\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            GenAlbCli( IS_PRINTER, cCaption, cFormato, cPrinter )\n         else\n            MsgStop( \"No se encuentra albaran\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            nTotAlbCli()\n            GenAlbCli( IS_PRINTER, cCaption, cFormato, cPrinter )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFUNCTION VisAlbCli( cNumAlb, lOpenBrowse, cCaption, cFormato, cPrinter )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   DEFAULT lOpenBrowse  := .f.\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if lOpenBrowse\n\n      if AlbCli()\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            GenAlbCli( IS_SCREEN, cCaption, cFormato, cPrinter )\n         else\n            MsgStop( \"No se encuentra albaran\" )\n         end if\n      end if\n\n   else\n\n      if OpenFiles( nil, .t. )\n\n         if dbSeekInOrd( cNumAlb, \"nNumAlb\", dbfAlbCliT )\n            nTotAlbCli()\n            GenAlbCli( IS_SCREEN, cCaption, cFormato, cPrinter )\n         end if\n\n         CloseFiles()\n\n      end if\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )\n\n   local oDlg\n   local oPuntos\n   local oValorPunto\n   local oDtoPnt\n   local oIncPnt\n   local oImporte\n   local nPuntos     := 0\n   local nValorPunto := 0\n   local nDtoPnt     := 0\n   local nIncPnt     := 0\n\n   /*comprobamos que no esté vacío el artículo*/\n\n   if Empty( cCodArt )\n      MsgInfo( \"Debe seleccinar un artículo\", \"Código vacío\" )\n      return .f.\n   end if\n\n   /*Cargamos valores por defecto*/\n\n   nPuntos           := aTmp[ _NPUNTOS ]\n   nValorPunto       := aTmp[ _NVALPNT ]\n   nDtoPnt           := aTmp[ _NDTOPNT ]\n   nIncPnt           := aTmp[ _NINCPNT ]\n\n   DEFINE DIALOG oDlg RESOURCE \"DESGPUNTOS\" TITLE \"Desglose de puntos\"\n\n   REDEFINE GET oPuntos VAR nPuntos ;\n      ID       200 ;\n      SPINNER ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  cPouDiv ;\n      OF       oDlg\n\n   REDEFINE GET oValorPunto VAR nValorPunto ;\n      ID       210 ;\n      SPINNER ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  cPouDiv ;\n      OF       oDlg\n\n   REDEFINE GET oDtoPnt VAR nDtoPnt ;\n      ID       220 ;\n      SPINNER ;\n      MIN      0 ;\n      MAX      100 ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  \"999.99\" ;\n      OF       oDlg\n\n   REDEFINE GET oIncPnt VAR nIncPnt ;\n      ID       230 ;\n      SPINNER ;\n      MIN      0 ;\n      MAX      100 ;\n      ON CHANGE( oImporte:Refresh() ) ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      PICTURE  \"999.99\" ;\n      OF       oDlg\n\n   REDEFINE SAY oImporte PROMPT nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt ) ;\n      ID       240 ;\n      PICTURE  cPouDiv ;\n      COLOR    CLR_GET ;\n      OF       oDlg\n\n   REDEFINE BUTTON ;\n      ID       500 ;\n      OF       oDlg ;\n      WHEN     ( nMode != ZOOM_MODE ) ;\n      ACTION   ( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( IDOK ) )\n\n   REDEFINE BUTTON ;\n      ID       550 ;\n      OF       oDlg ;\n      ACTION   ( oDlg:end() )\n\n   if nMode != ZOOM_MODE\n      oDlg:AddFastKey( VK_F5, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( IDOK ) } )\n   end if\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult == IDOK\n\n      aTmp[ _NPUNTOS ]     := nPuntos\n      aTmp[ _NVALPNT ]     := nValorPunto\n      aTmp[ _NDTOPNT ]     := nDtoPnt\n      aTmp[ _NINCPNT ]     := nIncPnt\n      oCosDiv:cText( oImporte:VarGet() )\n      oCosDiv:Refresh()\n\n   end if\n\nReturn ( .t. )\n\n//---------------------------------------------------------------------------//\n\nStatic Function AlbCliNotas()\n\n   local cObserv  := \"\"\n   local aData    := {}\n\n   aAdd( aData, \"Albaran \" + ( dbfAlbCliT )->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + Alltrim( ( dbfAlbCliT )->cSufAlb ) + \" de \" + Rtrim( ( dbfAlbCliT )->cNomCli ) )\n   aAdd( aData, ALB_CLI )\n   aAdd( aData, ( dbfAlbCliT )->cCodCli )\n   aAdd( aData, ( dbfAlbCliT )->cNomCli )\n   aAdd( aData, ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb )\n\n   if ( dbfClient )->( dbSeek( ( dbfAlbCliT )->cCodCli ) )\n\n      if !Empty( ( dbfClient )->cPerCto )\n         cObserv  += Rtrim( ( dbfClient )->cPerCto ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Telefono )\n         cObserv  += \"Télefono : \" + Rtrim( ( dbfClient )->Telefono ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Movil )\n         cObserv  += \"Móvil : \" + Rtrim( ( dbfClient )->Movil ) + Space( 1 )\n      end if\n\n      if !Empty( ( dbfClient )->Fax )\n         cObserv  += \"Fax : \" + Rtrim( ( dbfClient )->Fax ) + Space( 1 )\n      end if\n\n   end if\n\n   aAdd( aData, cObserv )\n\n   GenerarNotas( aData )\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n/*Esta funcion se usa para lanzar el diálogo para imprimir o visualizar las entregas a cuenta*/\n\nSTATIC FUNCTION PrnEntregas( lPrint, cAlbCliP, lTicket )\n\n	local oDlg\n   local oFmtEnt\n   local cFmtEnt\n   local oSayEnt\n   local cSayEnt\n   local cPrinter\n   local oPrinter\n   local nCopPrn\n   local oCopPrn\n\n   DEFAULT lPrint    := .t.\n   DEFAULT lTicket   := .f.\n\n   if lTicket\n      cFmtEnt        := cFormatoEntregasCuentaEnCaja( oUser():cCaja(), dbfCajT )\n      cPrinter       := cPrinterEntregasCuenta( oUser():cCaja(), dbfCajT )\n      nCopPrn        := nCopiasEntregasCuentaEnCaja( oUser():cCaja(), dbfCajT )\n   else\n      cFmtEnt        := cFormatoDocumento( nil, \"NENTALB\", dbfCount )\n      cPrinter       := PrnGetName()\n      nCopPrn        := nCopiasDocumento( nil, \"NENTALB\", dbfCount )\n   end if\n\n   cSayEnt           := cNombreDoc( cFmtEnt )\n\n   DEFINE DIALOG oDlg RESOURCE \"IMPSERENT\"\n\n   REDEFINE GET oFmtEnt VAR cFmtEnt ;\n      ID       100 ;\n      COLOR    CLR_GET ;\n      VALID    ( cDocumento( oFmtEnt, oSayEnt, dbfDoc ) ) ;\n      BITMAP   \"LUPA\" ;\n      ON HELP  ( BrwDocumento( oFmtEnt, oSayEnt, \"EA\" ) ) ;\n      OF       oDlg\n\n   REDEFINE GET oSayEnt VAR cSayEnt ;\n      ID       101 ;\n      WHEN     ( .f. );\n      COLOR    CLR_GET ;\n      OF       oDlg\n\n   REDEFINE GET oPrinter VAR cPrinter ;\n      WHEN     ( .f. ) ;\n      ID       110 ;\n      OF       oDlg\n\n   TBtnBmp():ReDefine( 111, \"Printer_preferences_16\",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .f., , .f.,  )\n\n   REDEFINE GET oCopPrn VAR nCopPrn;\n      ID       120 ;\n      VALID    nCopPrn > 0 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      MIN      1 ;\n      MAX      99999 ;\n      OF       oDlg\n\n   REDEFINE BUTTON ;\n      ID       500 ;\n		OF 		oDlg ;\n      ACTION   ( GenPrnEntregas( lPrint, cFmtEnt, cPrinter, if( lPrint, nCopPrn, 1 ), cAlbCliP, lTicket ), oDlg:End( IDOK ) )\n\n   REDEFINE BUTTON ;\n      ID       550 ;\n		OF 		oDlg ;\n      CANCEL ;\n      ACTION   ( oDlg:end() )\n\n   oDlg:bStart := {|| if( !lPrint, oCopPrn:Disable(), oCopPrn:Enable() ) }\n\n   ACTIVATE DIALOG oDlg CENTER\n\nreturn nil\n\n//---------------------------------------------------------------------------//\n/*\nEsta funcion se utiliza para terminar de imprimir las entregas a cuenta\n*/\n\nStatic Function GenPrnEntregas( lPrint, cFmtEnt, cPrinter, nCopies, cAlbCliP, lTicket )\n\n   local n              := 1\n   local oRpt\n   local oDevice\n   local cCaption       := 'Imprimiendo entrega a cuenta'\n   local nRecno         := ( cAlbCliP )->( Recno() )\n\n   DEFAULT lPrint       := .t.\n   DEFAULT nCopies      := 1\n   DEFAULT lTicket      := .f.\n\n   if Empty( cFmtEnt )\n      MsgStop( \"Es necesario elegir un formato\" )\n      return nil\n   end if\n\n   if !lExisteDocumento( cFmtEnt, dbfDoc )\n      return nil\n   end if\n\n   if lVisualDocumento( cFmtEnt, dbfDoc )\n\n      PrintReportEntAlbCli( if( lPrint, IS_PRINTER, IS_SCREEN ), nCopies, cPrinter, dbfDoc, cAlbCliP, lTicket )\n\n   else\n\n      private cDbf         := dbfAlbCliT\n      private cDbfEnt      := cAlbCliP\n      private cCliente     := dbfClient\n      private cDbfCli      := dbfClient\n      private cFPago       := dbfFPago\n      private cDbfPgo      := dbfFPago\n      private cDbfAge      := dbfAgent\n      private cDbfDiv      := dbfDiv\n      private cPorDivEnt   := cPorDiv( ( cAlbCliP )->cDivPgo, dbfDiv )\n\n      while n <= nCopies\n\n         if !Empty( cPrinter )\n            oDevice           := TPrinter():New( cCaption, .f., .t., cPrinter )\n            REPORT oRpt CAPTION cCaption TO DEVICE oDevice\n         else\n            REPORT oRpt CAPTION cCaption PREVIEW\n         end if\n\n         if !Empty( oRpt ) .and. oRpt:lCreated\n            oRpt:lFinish      := .f.\n            oRpt:lAutoland    := .t.\n            oRpt:lNoCancel    := .t.\n            oRpt:bSkip        := {|| .t. }\n\n            if lPrint\n               oRpt:bPreview  := {| oDevice | PrintPreview( oDevice ) }\n            else\n            end if\n         end if\n\n         SetMargin( cFmtEnt, oRpt )\n         PrintColum( cFmtEnt, oRpt )\n\n         END REPORT\n\n         if !Empty( oRpt )\n\n            private nPagina   := oRpt:nPage\n            private lEnd      := oRpt:lFinish\n\n            ACTIVATE REPORT oRpt ;\n               WHILE       ( .f. ) ;\n               ON ENDPAGE  ( PrintItems( cFmtEnt, oRpt ) )\n\n            if lPrint\n               oRpt:oDevice:end()\n            end if\n\n         end if\n\n         ( cAlbCliP )->( dbGoTo( nRecno ) )\n\n         oRpt              := nil\n\n         n++\n\n      end while\n\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nFUNCTION PrnEntAlb( cNumEnt, lPrint, dbfAlbCliP )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if OpenFiles( nil, .t. )\n\n      if dbSeekInOrd( cNumEnt, \"nNumAlb\", dbfAlbCliP )\n         PrnEntregas( lPrint, dbfAlbCliP )\n      end if\n\n      CloseFiles()\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\n#ifdef __HARBOUR__\n\n/*Static Function EditMenu( nLevel, oBrw, oDlg )\n\n   MENU oMenu\n\n      MENUITEM    \"Albaranes\"\n\n      MENUITEM    \"&1. Edición\"\n\n         MENU\n\n            MENUITEM    \"&1. Añadir\";\n               ACTION   ( if( nAnd( nLevel, ACC_APPD ) != 0, WinAppRec( oBrw, bEdtPda, dbfAlbCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&2. Modificar\";\n               ACTION   ( if( nAnd( nLevel, ACC_EDIT ) != 0, WinEdtRec( oBrw, bEdtPda, dbfAlbCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&3. Eliminar\";\n               ACTION   ( if( nAnd( nLevel, ACC_DELE ) != 0, ( AlbRecDel(), oBrw:Refresh() ),         MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&4. Zoom\";\n               ACTION   ( if( nAnd( nLevel, ACC_ZOOM ) != 0, WinZooRec( oBrw, bEdtPda, dbfAlbCliT ),  MsgStop( \"Acceso no permitido\" ) ) );\n\n            MENUITEM    \"&5. Generar nota\";\n               ACTION   ( if( nAnd( nLevel, ACC_ZOOM ) != 0, AlbCliNotas(),                           MsgStop( \"Acceso no permitido\" ) ) );\n\n         ENDMENU\n\n      MENUITEM    \"&S. Salir\";\n         MESSAGE  \"Salir de la ventana actual\" ;\n         RESOURCE \"End\" ;\n         ACTION   ( oDlg:End() );\n\n   ENDMENU\n\n   oDlg:SetMenu( oMenu )\n\nReturn ( oMenu )*/\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupSerie( oWndBrw )\n\n   local oDlg\n   local oSerIni\n   local oSerFin\n   local oTxtDup\n   local nTxtDup     := 0\n   local nRecno      := ( dbfAlbCliT )->( Recno() )\n   local nOrdAnt     := ( dbfAlbCliT )->( OrdSetFocus( 1 ) )\n   local oDesde      := TDesdeHasta():Init( ( dbfAlbCliT )->cSerAlb, ( dbfAlbCliT )->nNumAlb, ( dbfAlbCliT )->cSufAlb, GetSysDate() )\n   local lCancel     := .f.\n   local oBtnAceptar\n   local oBtnCancel\n   local oFecDoc\n   local cFecDoc     := GetSysDate()\n\n   DEFINE DIALOG oDlg ;\n      RESOURCE \"DUPSERDOC\" ;\n      TITLE    \"Duplicar series de albaranes\" ;\n      OF       oWndBrw\n\n   REDEFINE RADIO oDesde:nRadio ;\n      ID       90, 91 ;\n      OF       oDlg\n\n   REDEFINE GET oSerIni VAR oDesde:cSerieInicio ;\n      ID       100 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerIni ) );\n      ON DOWN  ( DwSerie( oSerIni ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieInicio >= \"A\" .and. oDesde:cSerieInicio <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oSerFin VAR oDesde:cSerieFin ;\n      ID       110 ;\n      PICTURE  \"@!\" ;\n      UPDATE ;\n      SPINNER ;\n      ON UP    ( UpSerie( oSerFin ) );\n      ON DOWN  ( DwSerie( oSerFin ) );\n      WHEN     ( oDesde:nRadio == 1 );\n      VALID    ( oDesde:cSerieFin >= \"A\" .and. oDesde:cSerieFin <= \"Z\"  );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroInicio ;\n      ID       120 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:nNumeroFin ;\n      ID       130 ;\n		PICTURE 	\"999999999\" ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoInicio ;\n      ID       140 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:cSufijoFin ;\n      ID       150 ;\n      PICTURE  \"##\" ;\n      WHEN     ( oDesde:nRadio == 1 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaInicio ;\n      ID       170 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE GET oDesde:dFechaFin ;\n      ID       180 ;\n      SPINNER ;\n      WHEN     ( oDesde:nRadio == 2 );\n      OF       oDlg\n\n   REDEFINE GET oFecDoc VAR cFecDoc ;\n      ID       200 ;\n      SPINNER ;\n      OF       oDlg\n\n   REDEFINE BUTTON oBtnAceptar ;\n      ID       IDOK ;\n		OF 		oDlg ;\n      ACTION   ( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) )\n\n   REDEFINE BUTTON oBtnCancel ;\n      ID       IDCANCEL ;\n		OF 		oDlg ;\n      CANCEL ;\n      ACTION   ( lCancel := .t., oDlg:end() )\n\n   REDEFINE METER oTxtDup VAR nTxtDup ;\n      ID       160 ;\n      NOPERCENTAGE ;\n      TOTAL    ( dbfAlbCliT )->( OrdKeyCount() ) ;\n      OF       oDlg\n\n      oDlg:AddFastKey( VK_F5, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) } )\n\n   ACTIVATE DIALOG oDlg CENTER VALID ( lCancel )\n\n   ( dbfAlbCliT )->( dbGoTo( nRecNo ) )\n   ( dbfAlbCliT )->( ordSetFocus( nOrdAnt ) )\n\n   oWndBrw:SetFocus()\n   oWndBrw:Refresh()\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, cFecDoc )\n\n   local nOrd\n   local nDuplicados    := 0\n   local nProcesed      := 0\n\n   oBtnAceptar:Hide()\n   oBtnCancel:bAction   := {|| lCancel := .t. }\n\n   if oDesde:nRadio == 1\n\n      nOrd              := ( dbfAlbCliT )->( OrdSetFocus( \"nNumAlb\" ) )\n\n      ( dbfAlbCliT )->( dbSeek( oDesde:cNumeroInicio(), .t. ) )\n\n      while !lCancel .and. ( dbfAlbCliT )->( !eof() )\n\n         if ( dbfAlbCliT )->cSerAlb >= oDesde:cSerieInicio  .and.;\n            ( dbfAlbCliT )->cSerAlb <= oDesde:cSerieFin     .and.;\n            ( dbfAlbCliT )->nNumAlb >= oDesde:nNumeroInicio .and.;\n            ( dbfAlbCliT )->nNumAlb <= oDesde:nNumeroFin    .and.;\n            ( dbfAlbCliT )->cSufAlb >= oDesde:cSufijoInicio .and.;\n            ( dbfAlbCliT )->cSufAlb <= oDesde:cSufijoFin\n\n            ++nDuplicados\n\n            oTxtDup:cText  := \"Duplicando : \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb\n\n            DupAlbaran( cFecDoc )\n\n         end if\n\n         ( dbfAlbCliT )->( dbSkip() )\n\n         ++nProcesed\n\n         oTxtDup:Set( nProcesed )\n\n      end do\n\n      ( dbfAlbCliT )->( OrdSetFocus( nOrd ) )\n\n   else\n\n      nOrd              := ( dbfAlbCliT )->( OrdSetFocus( \"dFecAlb\" ) )\n\n      ( dbfAlbCliT )->( dbSeek( oDesde:dFechaInicio, .t. ) )\n\n      while !lCancel .and. ( dbfAlbCliT )->( !eof() )\n\n         if ( dbfAlbCliT )->dFecAlb >= oDesde:dFechaInicio  .and.;\n            ( dbfAlbCliT )->dFecAlb <= oDesde:dFechaFin\n\n            ++nDuplicados\n\n            oTxtDup:cText  := \"Duplicando : \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb\n\n            DupAlbaran( cFecDoc )\n\n         end if\n\n         ( dbfAlbCliT )->( dbSkip() )\n\n         ++nProcesed\n\n         oTxtDup:Set( nProcesed )\n\n      end do\n\n      ( dbfAlbCliT )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   lCancel              := .t.\n\n   oBtnAceptar:Show()\n\n   if lCancel\n      msgStop( \"Total de registros duplicados : \" + Str( nDuplicados ), \"Proceso cancelado\" )\n   else\n      msgInfo( \"Total de registros duplicados : \" + Str( nDuplicados ), \"Proceso finalizado\" )\n   end if\n\nRETURN ( oDlg:End() )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION AlbRecDup( cDbf, xField1, xField2, xField3, lCab, cFecDoc )\n\n   local nRec           := ( cDbf )->( Recno() )\n   local aTabla         := {}\n   local nOrdAnt\n\n   DEFAULT lCab         := .f.\n\n   aTabla               := DBScatter( cDbf )\n   aTabla[ _CSERALB ]   := xField1\n   aTabla[ _NNUMALB ]   := xField2\n   aTabla[ _CSUFALB ]   := xField3\n\n   if lCab\n\n      aTabla[ _CTURALB     ]  := cCurSesion()\n      if !Empty( cFecDoc )\n         aTabla[ _DFECALB  ]  := cFecDoc\n      end if\n      aTabla[ _CCODCAJ     ]  := oUser():cCaja()\n      aTabla[ _LENTREGADO  ]  = .f.\n      aTabla[ _DFECENT     ]  := Ctod(\"\")\n      aTabla[ _CNUMPED     ]  := Space( 12 )\n      aTabla[ _CNUMFAC     ]  := Space( 12 )\n      aTabla[ _LSNDDOC     ]  := .t.\n      aTabla[ _LCLOALB     ]  := .f.\n      aTabla[ _DFECENV     ]  := GetSysDate()\n      aTabla[ _CCODUSR     ]  := cCurUsr()\n      aTabla[ _DFECCRE     ]  := GetSysDate()\n      aTabla[ _CTIMCRE     ]  := Time()\n      aTabla[ _LIMPRIMIDO  ]  := .f.\n      aTabla[ _DFECIMP     ]  := Ctod(\"\")\n      aTabla[ _CHORIMP     ]  := Space( 5 )\n      aTabla[ _CCODDLG     ]  := oUser():cDelegacion()\n      aTabla[ _LFACTURADO  ]  := .f.\n\n      nOrdAnt                 := ( cDbf )->( OrdSetFocus( \"NNUMALB\" ) )\n\n   end if\n\n   if dbDialogLock( cDbf, .t. )\n      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )\n      ( cDbf )->( dbUnLock() )\n   end if\n\n   if lCab\n      ( cDbf )->( OrdSetFocus( nOrdAnt ) )\n   end if\n\n   ( cDbf )->( dbGoTo( nRec ) )\n\nRETURN ( .t. )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION DupAlbaran( cFecDoc )\n\n   local nNewNumAlb  := 0\n\n   //Recogemos el nuevo numero de factura--------------------------------------\n\n   nNewNumAlb        := nNewDoc( ( dbfAlbCliT )->cSerAlb, dbfAlbCliT, \"NALBCLI\", , dbfCount )\n\n   //Duplicamos las cabeceras--------------------------------------------------\n\n   AlbRecDup( dbfAlbCliT, ( dbfAlbCliT )->cSerAlb, nNewNumAlb, ( dbfAlbCliT )->cSufAlb, .t., cFecDoc )\n\n   //Duplicamos las lineas del documento---------------------------------------\n\n   if ( dbfAlbCliL )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) )\n\n      while ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb == ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb .and. ;\n            !( dbfAlbCliL )->( Eof() )\n\n         AlbRecDup( dbfAlbCliL, ( dbfAlbCliT )->cSerAlb, nNewNumAlb, ( dbfAlbCliT )->cSufAlb, .f. )\n\n         ( dbfAlbCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   //Duplicamos los documentos-------------------------------------------------\n\n   if ( dbfAlbCliD )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) )\n\n      while ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb == ( dbfAlbCliD )->cSerAlb + Str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb .and. ;\n            !( dbfAlbCliD )->( Eof() )\n\n         AlbRecDup( dbfAlbCliD, ( dbfAlbCliT )->cSerAlb, nNewNumAlb, ( dbfAlbCliT )->cSufAlb, .f. )\n\n         ( dbfAlbCliD )->( dbSkip() )\n\n      end while\n\n   end if\n\nRETURN ( .t. )\n//---------------------------------------------------------------------------//\n\n#endif\n\nSTATIC FUNCTION SetDialog( aGet, oSayDias, oSayTxtDias )\n\n   if !Empty( oTipAlb )\n\n      if oTipAlb:nAt == 2\n         aGet[ _DFECENTR  ]:Show()\n         aGet[ _DFECSAL   ]:Show()\n         aGet[ _CCODSUALB ]:Hide()\n         oSayDias:Show()\n         oSayTxtDias:Show()\n      else\n         aGet[ _DFECENTR  ]:Hide()\n         aGet[ _DFECSAL   ]:Hide()\n         aGet[ _CCODSUALB ]:Show()\n         oSayDias:Hide()\n         oSayTxtDias:Hide()\n      end if\n\n      aGet[ _DFECSAL   ]:Refresh()\n      aGet[ _DFECENTR  ]:Refresh()\n      aGet[ _CCODSUALB ]:Refresh()\n      oSayDias:Refresh()\n      oSayTxtDias:Refresh()\n\n   end if\n\n   if !lAccArticulo() .or. oUser():lNotRentabilidad()\n\n      if !Empty( oGetRnt )\n         oGetRnt:Hide()\n      end if\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )\n\n   local uValor   := oGetCod:VarGet()\n\n   if Empty( uValor )\n\n      oSayTrn:cText( \"\" )\n      oGetKgs:cText( 0 )\n\n   else\n\n      if oTrans:oDbf:SeekInOrd( uValor, \"cCodTrn\" )\n         oGetCod:cText( uValor )\n         oSayTrn:cText( oTrans:oDbf:cNomTrn )\n         oGetKgs:cText( oTrans:oDbf:nKgsTrn )\n      else\n         msgStop( \"Código de transportista no encontrado.\" )\n         Return .f.\n      end if\n\n   end if\n\n   RecalculaTotal( aTmp )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFunction nPesAlbCli( cAlbaran, dbfAlbCliL, lPicture )\n\n   local nOrd           := ( dbfAlbCliL )->( OrdSetFocus( \"nNumAlb\" ) )\n   local nTotPes        := 0\n\n   DEFAULT lPicture     := .f.\n\n   if ( dbfAlbCliL )->( dbSeek( cAlbaran ) )\n\n      while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cAlbaran .and. ( dbfAlbCliL )->( !eof() )\n\n         if lValLine( dbfAlbCliL )\n\n            nTotPes     += nPesLAlbCli( dbfAlbCliL )\n\n         end if\n\n         ( dbfAlbCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfAlbCliL )->( OrdSetFocus( nOrd ) )\n\nReturn ( if( lPicture, Trans( nTotPes, MasUnd() ), nTotPes ) )\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION ValidaMedicion( aTmp, aGet )\n\n   local cNewUndMed  := aGet[ _CUNIDAD ]:VarGet\n\n   /*\n   Cargamos el codigo de las unidades---------------------------------\n   */\n\n   if ( Empty( cOldUndMed ) .or. cOldUndMed != cNewUndMed )\n\n      if oUndMedicion:oDbf:Seek( aTmp[ _CUNIDAD ] )\n\n         if oUndMedicion:oDbf:nDimension >= 1 .and. !Empty( oUndMedicion:oDbf:cTextoDim1 )\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( ( dbfArticulo )->nLngArt )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]  := ( dbfArticulo )->nLngArt\n            end if\n         else\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( 0 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n            else\n               aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]  := 0\n            end if\n         end if\n\n         if oUndMedicion:oDbf:nDimension >= 2 .and. !Empty( oUndMedicion:oDbf:cTextoDim2 )\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( ( dbfArticulo )->nAltArt )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]  := ( dbfArticulo )->nAltArt\n            end if\n\n         else\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( 0 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n            else\n                 aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]  := 0\n            end if\n         end if\n\n         if oUndMedicion:oDbf:nDimension >= 3 .and. !Empty( oUndMedicion:oDbf:cTextoDim3 )\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( ( dbfArticulo )->nAncArt )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:Show()\n            else\n               aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]  := ( dbfArticulo )->nAncArt\n            end if\n         else\n            if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( 0 )\n               aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n            else\n               aTmp[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]  := 0\n            end if\n         end if\n\n      else\n\n         if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:cText( 0 )\n         end if\n\n         if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:cText( 0 )\n         end if\n\n         if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n            aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:cText( 0 )\n         end if\n\n      end if\n\n      cOldUndMed := cNewUndMed\n\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function ChangeTarifa( aTmp, aGet, aTmpAlb )\n\n    local nPrePro  := 0\n\n   if !aTmp[ __LALQUILER ]\n\n      nPrePro     := nPrePro( aTmp[ _CREF ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ], aTmp[ _NTARLIN ], aTmpAlb[ _LIVAINC ], dbfArtDiv, aTmpAlb[ _CCODTAR ] )\n\n      if nPrePro == 0\n         nPrePro  := nRetPreArt( aTmp[ _NTARLIN ], aTmpAlb[ _CDIVALB ], aTmpAlb[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n      end if\n\n      if nPrePro != 0\n         aGet[ _NSATUNIT ]:cText( nPrePro )\n      end if\n\n   else\n\n      aGet[ _NSATUNIT ]:cText( 0 )\n      aGet[ _NSATALQ  ]:cText( nPreAlq( aTmp[ _CREF ], aTmp[ _NTARLIN ], aTmpAlb[ _LIVAINC ], dbfArticulo ) )\n\n   end if\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nstatic Function cNomUbica( aTmp, aGet, dbfAlm )\n\n   aTmp[_CCODUBI1]      := cGetUbica( aTmp[_CALMLIN], dbfAlm, 1 )\n   aTmp[_CCODUBI2]      := cGetUbica( aTmp[_CALMLIN], dbfAlm, 2 )\n   aTmp[_CCODUBI3]      := cGetUbica( aTmp[_CALMLIN], dbfAlm, 3 )\n\n   if Empty( aTmp[_CCODUBI1] )\n      aGet[_CCODUBI1]:Hide()\n      aGet[_CVALUBI1]:Hide()\n      aGet[_CNOMUBI1]:Hide()\n   else\n      aGet[_CCODUBI1]:Show()\n      aGet[_CVALUBI1]:Show()\n      aGet[_CNOMUBI1]:Show()\n   end if\n\n   if Empty( aTmp[_CCODUBI2] )\n      aGet[_CCODUBI2]:Hide()\n      aGet[_CVALUBI2]:Hide()\n      aGet[_CNOMUBI2]:Hide()\n   else\n      aGet[_CCODUBI2]:Show()\n      aGet[_CVALUBI2]:Show()\n      aGet[_CNOMUBI2]:Show()\n   end if\n\n   if Empty( aTmp[_CCODUBI3] )\n      aGet[_CCODUBI3]:Hide()\n      aGet[_CVALUBI3]:Hide()\n      aGet[_CNOMUBI3]:Hide()\n   else\n      aGet[_CCODUBI3]:Show()\n      aGet[_CVALUBI3]:Show()\n      aGet[_CNOMUBI3]:Show()\n   end if\n\n   aGet[_CCODUBI1]:Refresh()\n   aGet[_CVALUBI1]:Refresh()\n   aGet[_CNOMUBI1]:Refresh()\n   aGet[_CCODUBI2]:Refresh()\n   aGet[_CVALUBI2]:Refresh()\n   aGet[_CNOMUBI3]:Refresh()\n   aGet[_CCODUBI3]:Refresh()\n   aGet[_CVALUBI3]:Refresh()\n   aGet[_CNOMUBI3]:Refresh()\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\n#include \"FastRepH.ch\"\n\nStatic Function DataReport( oFr )\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   oFr:ClearDataSets()\n\n   oFr:SetWorkArea(     \"Albaranes\", ( dbfAlbCliT )->( Select() ), .f., { FR_RB_CURRENT, FR_RB_CURRENT, 0 } )\n   oFr:SetFieldAliases( \"Albaranes\", cItemsToReport( aItmAlbCli() ) )\n\n   oFr:SetWorkArea(     \"Lineas de albaranes\", ( dbfAlbCliL )->( Select() ) )\n   oFr:SetFieldAliases( \"Lineas de albaranes\", cItemsToReport( aColAlbCli() ) )\n\n   oFr:SetWorkArea(     \"Series de lineas de albaranes\", ( dbfAlbCliS )->( Select() ) )\n   oFr:SetFieldAliases( \"Series de lineas de albaranes\", cItemsToReport( aSerAlbCli() ) )\n\n   oFr:SetWorkArea(     \"Incidencias de albaranes\", ( dbfAlbCliI )->( Select() ) )\n   oFr:SetFieldAliases( \"Incidencias de albaranes\", cItemsToReport( aIncAlbCli() ) )\n\n   oFr:SetWorkArea(     \"Documentos de albaranes\", ( dbfAlbCliD )->( Select() ) )\n   oFr:SetFieldAliases( \"Documentos de albaranes\", cItemsToReport( aAlbCliDoc() ) )\n\n   oFr:SetWorkArea(     \"Entregas de albaranes\", ( dbfAlbCliP )->( Select() ) )\n   oFr:SetFieldAliases( \"Entregas de albaranes\", cItemsToReport( aItmAlbPgo() ) )\n\n   oFr:SetWorkArea(     \"Empresa\", ( dbfEmp )->( Select() ) )\n   oFr:SetFieldAliases( \"Empresa\", cItemsToReport( aItmEmp() ) )\n\n   oFr:SetWorkArea(     \"Clientes\", ( dbfClient )->( Select() ) )\n   oFr:SetFieldAliases( \"Clientes\", cItemsToReport( aItmCli() ) )\n\n   oFr:SetWorkArea(     \"Obras\", ( dbfObrasT )->( Select() ) )\n   oFr:SetFieldAliases( \"Obras\",  cItemsToReport( aItmObr() ) )\n\n   oFr:SetWorkArea(     \"Almacenes\", ( dbfAlm )->( Select() ) )\n   oFr:SetFieldAliases( \"Almacenes\", cItemsToReport( aItmAlm() ) )\n\n   oFr:SetWorkArea(     \"Rutas\", ( dbfRuta )->( Select() ) )\n   oFr:SetFieldAliases( \"Rutas\", cItemsToReport( aItmRut() ) )\n\n   oFr:SetWorkArea(     \"Agentes\", ( dbfAgent )->( Select() ) )\n   oFr:SetFieldAliases( \"Agentes\", cItemsToReport( aItmAge() ) )\n\n   oFr:SetWorkArea(     \"Formas de pago\", ( dbfFpago )->( Select() ) )\n   oFr:SetFieldAliases( \"Formas de pago\", cItemsToReport( aItmFPago() ) )\n\n   oFr:SetWorkArea(     \"Transportistas\", oTrans:Select() )\n   oFr:SetFieldAliases( \"Transportistas\", cObjectsToReport( oTrans:oDbf ) )\n\n   oFr:SetWorkArea(     \"Artículos\", ( dbfArticulo )->( Select() ) )\n   oFr:SetFieldAliases( \"Artículos\", cItemsToReport( aItmArt() ) )\n\n   oFr:SetWorkArea(     \"Tipo de venta\", ( dbfTVta )->( Select() ) )\n   oFr:SetFieldAliases( \"Tipo de venta\", cItemsToReport( aItmTVta() ) )\n\n   oFr:SetWorkArea(     \"Usuarios\", ( dbfUsr )->( Select() ) )\n   oFr:SetFieldAliases( \"Usuarios\", cItemsToReport( aItmUsr() ) )\n\n   oFr:SetWorkArea(     \"Ofertas\", ( dbfOferta )->( Select() ) )\n   oFr:SetFieldAliases( \"Ofertas\", cItemsToReport( aItmOfe() ) )\n\n   oFr:SetWorkArea(     \"Unidades de medición\",  oUndMedicion:Select() )\n   oFr:SetFieldAliases( \"Unidades de medición\",  cObjectsToReport( oUndMedicion:oDbf ) )\n\n   oFr:SetWorkArea(     \"SAT\", ( dbfSatCliT )->( Select() ) )\n   oFr:SetFieldAliases( \"SAT\", cItemsToReport( aItmSatCli() ) )\n\n   oFr:SetMasterDetail( \"Albaranes\", \"Lineas de albaranes\",             {|| ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Series de lineas de albaranes\",   {|| ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Incidencias de albaranes\",        {|| ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Documentos de albaranes\",         {|| ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Entregas de albaranes\",           {|| ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Clientes\",                        {|| ( dbfAlbCliT )->cCodCli } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Obras\",                           {|| ( dbfAlbCliT )->cCodCli + ( dbfAlbCliT )->cCodObr } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Almacen\",                         {|| ( dbfAlbCliT )->cCodAlm } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Rutas\",                           {|| ( dbfAlbCliT )->cCodRut } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Agentes\",                         {|| ( dbfAlbCliT )->cCodAge } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Formas de pago\",                  {|| ( dbfAlbCliT )->cCodPago} )\n   oFr:SetMasterDetail( \"Albaranes\", \"Transportistas\",                  {|| ( dbfAlbCliT )->cCodTrn } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Empresa\",                         {|| cCodigoEmpresaEnUso() } )\n   oFr:SetMasterDetail( \"Albaranes\", \"Usuarios\",                        {|| ( dbfAlbCliT )->cCodUsr } )\n\n   oFr:SetMasterDetail( \"Lineas de albaranes\", \"Artículos\",             {|| ( dbfAlbCliL )->cRef } )\n   oFr:SetMasterDetail( \"Lineas de albaranes\", \"Tipo de venta\",         {|| ( dbfAlbCliL )->cTipMov } )\n   oFr:SetMasterDetail( \"Lineas de albaranes\", \"Ofertas\",               {|| ( dbfAlbCliL )->cRef } )\n   oFr:SetMasterDetail( \"Lineas de albaranes\", \"Unidades de medición\",  {|| ( dbfAlbCliL )->cUnidad } )\n\n   oFr:SetMasterDetail( \"Lineas de albaranes\", \"SAT\",                   {|| ( dbfAlbCliL )->cNumSat } )\n\n   oFr:SetResyncPair(   \"Albaranes\", \"Lineas de albaranes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Series de lineas de albaranes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Incidencias de albaranes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Documentos de albaranes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Entregas de albaranes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Empresa\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Clientes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Obras\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Almacenes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Rutas\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Agentes\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Formas de pago\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Transportistas\" )\n   oFr:SetResyncPair(   \"Albaranes\", \"Usuarios\" )\n\n   oFr:SetResyncPair(   \"Lineas de albaranes\", \"Artículos\" )\n   oFr:SetResyncPair(   \"Lineas de albaranes\", \"Tipo de venta\" )\n   oFr:SetResyncPair(   \"Lineas de albaranes\", \"Ofertas\" )\n   oFr:SetResyncPair(   \"Lineas de albaranes\", \"Unidades de medición\" )\n\n   oFr:SetResyncPair(   \"Lineas de albaranes\", \"SAT\" )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function VariableReport( oFr )\n\n   oFr:DeleteCategory(  \"Albaranes\" )\n   oFr:DeleteCategory(  \"Lineas de albaranes\" )\n\n   /*\n   Creación de variables----------------------------------------------------\n   */\n\n   oFr:AddVariable(     \"Albaranes\",             \"Total bruto\",                         \"GetHbVar('nTotBrt')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total albaran\",                       \"GetHbVar('nTotAlb')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total descuento\",                     \"GetHbVar('nTotDto')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total descuento pronto pago\",         \"GetHbVar('nTotDpp')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total bruto\",                         \"GetHbVar('nTotBrt')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total descuento\",                     \"GetHbVar('nTotDto')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total descuento pronto pago\",         \"GetHbVar('nTotDpp')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total descuentos\",                    \"GetHbVar('nTotalDto')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total neto\",                          \"GetHbVar('nTotNet')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total primer descuento definible\",    \"GetHbVar('nTotUno')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total segundo descuento definible\",   \"GetHbVar('nTotDos')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total \" + cImp(),                     \"GetHbVar('nTotIva')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total RE\",                            \"GetHbVar('nTotReq')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total entregado a cuenta\",            \"GetHbVar('nTotPag')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total retención\",                     \"GetHbVar('nTotRet')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total peso\",                          \"GetHbVar('nTotPes')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total costo\",                         \"GetHbVar('nTotCos')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total artículos\",                     \"GetHbVar('nTotArt')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total cajas\",                         \"GetHbVar('nTotCaj')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total punto verde\",                   \"GetHbVar('nTotPnt')\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Cuenta por defecto del cliente\",      \"GetHbVar('cCtaCli')\" )\n\n   oFr:AddVariable(     \"Albaranes\",             \"Bruto primer tipo de \" + cImp(),     \"GetHbArrayVar('aIvaUno',1)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Bruto segundo tipo de \" + cImp(),    \"GetHbArrayVar('aIvaDos',1)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Bruto tercer tipo de \" + cImp(),     \"GetHbArrayVar('aIvaTre',1)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Base primer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaUno',2)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Base segundo tipo de \" + cImp(),     \"GetHbArrayVar('aIvaDos',2)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Base tercer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaTre',2)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje primer tipo \" + cImp(),   \"GetHbArrayVar('aIvaUno',3)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje segundo tipo \" + cImp(),  \"GetHbArrayVar('aIvaDos',3)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje tercer tipo \" + cImp(),   \"GetHbArrayVar('aIvaTre',3)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje primer tipo RE\",          \"GetHbArrayVar('aIvaUno',4)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje segundo tipo RE\",         \"GetHbArrayVar('aIvaDos',4)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Porcentaje tercer tipo RE\",          \"GetHbArrayVar('aIvaTre',4)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe primer tipo \" + cImp(),      \"GetHbArrayVar('aIvaUno',8)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe segundo tipo \" + cImp(),     \"GetHbArrayVar('aIvaDos',8)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe tercer tipo \" + cImp(),      \"GetHbArrayVar('aIvaTre',8)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe primer RE\",                  \"GetHbArrayVar('aIvaUno',9)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe segundo RE\",                 \"GetHbArrayVar('aIvaDos',9)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe tercer RE\",                  \"GetHbArrayVar('aIvaTre',9)\" )\n\n   oFr:AddVariable(     \"Albaranes\",             \"Total unidades primer tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmUno',1 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total unidades segundo tipo de impuestos especiales\",           \"GetHbArrayVar('aIvmDos',1 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total unidades tercer tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmTre',1 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del primer tipo de impuestos especiales\",               \"GetHbArrayVar('aIvmUno',2 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del segundo tipo de impuestos especiales\",              \"GetHbArrayVar('aIvmDos',2 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del tercer tipo de impuestos especiales\",               \"GetHbArrayVar('aIvmTre',2 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total importe primer tipo de impuestos especiales\",             \"GetHbArrayVar('aIvmUno',3 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total importe segundo tipo de impuestos especiales\",            \"GetHbArrayVar('aIvmDos',3 )\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Total importe tercer tipo de impuestos especiales\",             \"GetHbArrayVar('aIvmTre',3 )\" )\n\n   /*\n   oFr:AddVariable(     \"Albaranes\",             \"Fecha del primer vencimiento\",        \"GetHbArrayVar('aDatVto',1)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Fecha del segundo vencimiento\",       \"GetHbArrayVar('aDatVto',2)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Fecha del tercer vencimiento\",        \"GetHbArrayVar('aDatVto',3)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Fecha del cuarto vencimiento\",        \"GetHbArrayVar('aDatVto',4)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Fecha del quinto vencimiento\",        \"GetHbArrayVar('aDatVto',5)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del primer vencimiento\",      \"GetHbArrayVar('aImpVto',1)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del segundo vencimiento\",     \"GetHbArrayVar('aImpVto',2)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del tercero vencimiento\",     \"GetHbArrayVar('aImpVto',3)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del cuarto vencimiento\",      \"GetHbArrayVar('aImpVto',4)\" )\n   oFr:AddVariable(     \"Albaranes\",             \"Importe del quinto vencimiento\",      \"GetHbArrayVar('aImpVto',5)\" )\n   */\n   \n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Detalle del artículo\",                \"CallHbFunc('cDesAlbCli')\"  )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Total unidades artículo\",             \"CallHbFunc('nTotNAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Precio unitario del artículo\",        \"CallHbFunc('nTotUAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Total línea de albaran\",              \"CallHbFunc('nTotLAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Total peso por línea\",                \"CallHbFunc('nPesLAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Total línea sin \" + cImp(),           \"CallHbFunc('nNetLAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Frase publicitaria en línea\",         \"CallHbFunc('cFraAlbCli')\" )\n\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Fecha en juliano 6 meses\",            \"CallHbFunc('dJulianoAlbCli')\" )\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Fecha en juliano 8 meses\",            \"CallHbFunc('dJulianoAlbAnio')\" )\n\n   oFr:AddVariable(     \"Lineas de albaranes\",   \"Dirección del SAT\",                   \"CallHbFunc('cDireccionSAT')\" )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nFunction DesignReportAlbCli( oFr, dbfDoc )\n\n   local lOpen    := .f.\n   local lFlag    := .f.\n\n   /*\n   Tratamiento para no hacer dos veces el openfiles al editar el documento en imprimir series\n   */\n\n   if lOpenFiles\n      lFlag       := .t.\n   else\n      if Openfiles()\n         lFlag    := .t.\n         lOpen    := .t.\n      else\n         lFlag    := .f.\n      end if\n   end if\n\n   if lFlag\n\n      /*\n      Zona de datos------------------------------------------------------------\n      */\n\n      DataReport( oFr )\n\n      /*\n      Paginas y bandas---------------------------------------------------------\n      */\n\n      if !Empty( ( dbfDoc )->mReport )\n\n         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      else\n\n         oFr:SetProperty(     \"Report\",            \"ScriptLanguage\", \"PascalScript\" )\n         oFr:SetProperty(     \"Report.ScriptText\", \"Text\",;\n                                                   + ;\n                                                   \"procedure DetalleOnMasterDetail(Sender: TfrxComponent);\"   + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"   CallHbFunc('nTotAlbCli');\"                              + Chr(13) + Chr(10) + ;\n                                                   \"end;\"                                                      + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"end.\" )\n\n         oFr:AddPage(         \"MainPage\" )\n\n         oFr:AddBand(         \"CabeceraDocumento\", \"MainPage\", frxPageHeader )\n         oFr:SetProperty(     \"CabeceraDocumento\", \"Top\", 0 )\n         oFr:SetProperty(     \"CabeceraDocumento\", \"Height\", 200 )\n\n         oFr:AddBand(         \"CabeceraColumnas\",  \"MainPage\", frxMasterData )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Top\", 200 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Height\", 0 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"StartNewPage\", .t. )\n         oFr:SetObjProperty(  \"CabeceraColumnas\",  \"DataSet\", \"Albaranes\" )\n\n         oFr:AddBand(         \"DetalleColumnas\",   \"MainPage\", frxDetailData  )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"Top\", 230 )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"Height\", 28 )\n         oFr:SetObjProperty(  \"DetalleColumnas\",   \"DataSet\", \"Lineas de albaranes\" )\n         oFr:SetProperty(     \"DetalleColumnas\",   \"OnMasterDetail\", \"DetalleOnMasterDetail\" )\n\n         oFr:AddBand(         \"PieDocumento\",      \"MainPage\", frxPageFooter )\n         oFr:SetProperty(     \"PieDocumento\",      \"Top\", 930 )\n         oFr:SetProperty(     \"PieDocumento\",      \"Height\", 110 )\n\n      end if\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReport( oFr )\n\n      /*\n      Diseño de report---------------------------------------------------------\n      */\n\n      oFr:DesignReport()\n\n      /*\n      Destruye el diseñador----------------------------------------------------\n      */\n\n      oFr:DestroyFr()\n\n      /*\n      Cierra ficheros----------------------------------------------------------\n      */\n\n      if lOpen\n         CloseFiles()\n      end if\n\n   else\n\n      Return .f.\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFunction PrintReportAlbCli( nDevice, nCopies, cPrinter, dbfDoc )\n\n   local oFr\n   local cFilePdf       := cPatTmp() + \"AlbaranesCliente\" + StrTran( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, \" \", \"\" ) + \".Pdf\"\n\n   DEFAULT nDevice      := IS_SCREEN\n   DEFAULT nCopies      := 1\n   DEFAULT cPrinter     := PrnGetName()\n\n   SysRefresh()\n\n   oFr                  := frReportManager():New()\n\n   oFr:LoadLangRes(     \"Spanish.Xml\" )\n\n   oFr:SetIcon( 1 )\n\n   oFr:SetTitle(        \"Diseñador de documentos\" )\n\n   /*\n   Manejador de eventos--------------------------------------------------------\n   */\n\n   oFr:SetEventHandler( \"Designer\", \"OnSaveReport\", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), \"mReport\" ) } )\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   DataReport( oFr )\n\n   /*\n   Cargar el informe-----------------------------------------------------------\n   */\n\n   if !Empty( ( dbfDoc )->mReport )\n\n      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReport( oFr )\n\n      /*\n      Preparar el report-------------------------------------------------------\n      */\n\n      oFr:PrepareReport()\n\n      /*\n      Imprimir el informe------------------------------------------------------\n      */\n\n      do case\n         case nDevice == IS_SCREEN\n\n            oFr:ShowPreparedReport()\n\n         case nDevice == IS_PRINTER\n\n            oFr:PrintOptions:SetPrinter( cPrinter )\n            oFr:PrintOptions:SetCopies( nCopies )\n            oFr:PrintOptions:SetShowDialog( .f. )\n            oFr:Print()\n\n         case nDevice == IS_PDF\n\n            oFr:SetProperty(  \"PDFExport\", \"ShowDialog\",       .f. )\n            oFr:SetProperty(  \"PDFExport\", \"DefaultPath\",      cPatTmp() )\n            oFr:SetProperty(  \"PDFExport\", \"FileName\",         cFilePdf )\n            oFr:SetProperty(  \"PDFExport\", \"EmbeddedFonts\",    .t. )\n            oFr:SetProperty(  \"PDFExport\", \"PrintOptimized\",   .t. )\n            oFr:SetProperty(  \"PDFExport\", \"Outline\",          .t. )\n            oFr:SetProperty(  \"PDFExport\", \"OpenAfterExport\",  .t. )\n            oFr:DoExport(     \"PDFExport\" )\n\n         case nDevice == IS_MAIL\n\n            oFr:SetProperty(  \"PDFExport\", \"ShowDialog\",       .f. )\n            oFr:SetProperty(  \"PDFExport\", \"DefaultPath\",      cPatTmp() )\n            oFr:SetProperty(  \"PDFExport\", \"FileName\",         cFilePdf )\n            oFr:SetProperty(  \"PDFExport\", \"EmbeddedFonts\",    .t. )\n            oFr:SetProperty(  \"PDFExport\", \"PrintOptimized\",   .t. )\n            oFr:SetProperty(  \"PDFExport\", \"Outline\",          .t. )\n            oFr:SetProperty(  \"PDFExport\", \"OpenAfterExport\",  .f. )\n            oFr:DoExport(     \"PDFExport\" )\n\n            if file( cFilePdf )\n\n               with object ( TGenMailing():New() )\n\n                  :SetTypeDocument( \"nAlbCli\" )\n                  :SetDe(           uFieldEmpresa( \"cNombre\" ) )\n                  :SetCopia(        uFieldEmpresa( \"cCcpMai\" ) )\n                  :SetAdjunto(      cFilePdf )\n                  :SetPara(         RetFld( ( dbfAlbCliT )->cCodCli, dbfClient, \"cMeiInt\" ) )\n                  :SetAsunto(       \"Envio de albaran de cliente número \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) )\n                  :SetMensaje(      \"Adjunto le remito nuestro albaran de cliente \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + Space( 1 ) )\n                  :SetMensaje(      \"de fecha \" + Dtoc( ( dbfAlbCliT )->dFecAlb ) + Space( 1 ) )\n                  :SetMensaje(      CRLF )\n                  :SetMensaje(      CRLF )\n                  :SetMensaje(      \"Reciba un cordial saludo.\" )\n\n                  :GeneralResource( dbfAlbCliT, aItmAlbCli() )\n\n               end with\n\n            end if\n\n      end case\n\n   end if\n\n   /*\n   Destruye el diseñador-------------------------------------------------------\n   */\n\n   oFr:DestroyFr()\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function DataReportEntAlbCli( oFr, cAlbCliP, lTicket )\n\n   DEFAULT lTicket      := .f.\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   oFr:ClearDataSets()\n\n   if !Empty( cAlbCliP )\n      oFr:SetWorkArea(  \"Entrega\", ( cAlbCliP )->( Select() ), .f., { FR_RB_CURRENT, FR_RB_CURRENT, 0 } )\n   else\n      oFr:SetWorkArea(  \"Entrega\", ( dbfAlbCliP )->( Select() ), .f., { FR_RB_CURRENT, FR_RB_CURRENT, 0 } )\n   end if\n   oFr:SetFieldAliases( \"Entrega\", cItemsToReport( aItmAlbPgo() ) )\n\n   if lTicket\n   oFr:SetWorkArea(     \"Albarán de cliente\", ( dbfAlbCliT )->( Select() ) )\n   oFr:SetFieldAliases( \"Albarán de cliente\", cItemsToReport( aItmAlbCli() ) )\n   else\n   oFr:SetWorkArea(     \"Albarán de cliente\", ( dbfAlbCliT )->( Select() ), .f., { FR_RB_CURRENT, FR_RB_CURRENT, 0 } )\n   oFr:SetFieldAliases( \"Albarán de cliente\", cItemsToReport( aItmAlbCli() ) )\n   end if\n\n   oFr:SetWorkArea(     \"Empresa\", ( dbfEmp )->( Select() ) )\n   oFr:SetFieldAliases( \"Empresa\", cItemsToReport( aItmEmp() ) )\n\n   oFr:SetWorkArea(     \"Clientes\", ( dbfClient )->( Select() ) )\n   oFr:SetFieldAliases( \"Clientes\", cItemsToReport( aItmCli() ) )\n\n   oFr:SetWorkArea(     \"Formas de pago\", ( dbfFpago )->( Select() ) )\n   oFr:SetFieldAliases( \"Formas de pago\", cItemsToReport( aItmFPago() ) )\n\n   if lTicket\n      if !Empty( cAlbCliP )\n         oFr:SetMasterDetail( \"Entrega\", \"Albarán de cliente\",       {|| ( cAlbCliP )->cSerAlb + Str( ( cAlbCliP )->nNumAlb ) + ( cAlbCliP )->cSufAlb } )\n      else\n         oFr:SetMasterDetail( \"Entrega\", \"Albarán de cliente\",       {|| ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb } )\n      end if\n   end if\n\n   if !Empty( cAlbCliP )\n   oFr:SetMasterDetail( \"Entrega\", \"Clientes\",                 {|| ( cAlbCliP )->cCodCli } )\n   oFr:SetMasterDetail( \"Entrega\", \"Formas de pago\",           {|| ( cAlbCliP )->cCodPgo } )\n   else\n   oFr:SetMasterDetail( \"Entrega\", \"Clientes\",                 {|| ( dbfAlbCliP )->cCodCli } )\n   oFr:SetMasterDetail( \"Entrega\", \"Formas de pago\",           {|| ( dbfAlbCliP )->cCodPgo } )\n   end if\n\n   oFr:SetMasterDetail( \"Entrega\", \"Empresa\",                  {|| cCodigoEmpresaEnUso() } )\n\n   oFr:SetResyncPair(   \"Entrega\", \"Empresa\" )\n   oFr:SetResyncPair(   \"Entrega\", \"Clientes\" )\n   oFr:SetResyncPair(   \"Entrega\", \"Formas de pago\" )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nStatic Function VariableReportEntAlbCli( oFr )\n\n   /*\n   Creación de variables----------------------------------------------------\n   */\n\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total bruto\",                         \"GetHbVar('nTotBrt')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total albaran\",                       \"GetHbVar('nTotAlb')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total descuento\",                     \"GetHbVar('nTotDto')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total descuento pronto pago\",         \"GetHbVar('nTotDpp')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total bruto\",                         \"GetHbVar('nTotBrt')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total descuento\",                     \"GetHbVar('nTotDto')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total descuento pronto pago\",         \"GetHbVar('nTotDpp')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total neto\",                          \"GetHbVar('nTotNet')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total primer descuento definible\",    \"GetHbVar('nTotUno')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total segundo descuento definible\",   \"GetHbVar('nTotDos')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total \" + cImp(),                     \"GetHbVar('nTotIva')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total RE\",                            \"GetHbVar('nTotReq')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total entregado a cuenta\",            \"GetHbVar('nTotPag')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total retención\",                     \"GetHbVar('nTotRet')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total peso\",                          \"GetHbVar('nTotPes')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total costo\",                         \"GetHbVar('nTotCos')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total anticipado\",                    \"GetHbVar('nTotAnt')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total artículos\",                     \"GetHbVar('nTotArt')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Total cajas\",                         \"GetHbVar('nTotCaj')\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Bruto primer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaUno',1)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Bruto segundo tipo de \" + cImp(),     \"GetHbArrayVar('aIvaDos',1)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Bruto tercer tipo de \" + cImp(),      \"GetHbArrayVar('aIvaTre',1)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Base primer tipo de \" + cImp(),       \"GetHbArrayVar('aIvaUno',2)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Base segundo tipo de \" + cImp(),      \"GetHbArrayVar('aIvaDos',2)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Base tercer tipo de \" + cImp(),       \"GetHbArrayVar('aIvaTre',2)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje primer tipo \" + cImp(),    \"GetHbArrayVar('aIvaUno',3)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje segundo tipo \" + cImp(),   \"GetHbArrayVar('aIvaDos',3)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje tercer tipo \" + cImp(),    \"GetHbArrayVar('aIvaTre',3)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje primer tipo RE\",           \"GetHbArrayVar('aIvaUno',4)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje segundo tipo RE\",          \"GetHbArrayVar('aIvaDos',4)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Porcentaje tercer tipo RE\",           \"GetHbArrayVar('aIvaTre',4)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe primer tipo \" + cImp(),       \"GetHbArrayVar('aIvaUno',8)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe segundo tipo \" + cImp(),      \"GetHbArrayVar('aIvaDos',8)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe tercer tipo \" + cImp(),       \"GetHbArrayVar('aIvaTre',8)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe primer RE\",                   \"GetHbArrayVar('aIvaUno',9)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe segundo RE\",                  \"GetHbArrayVar('aIvaDos',9)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe tercer RE\",                   \"GetHbArrayVar('aIvaTre',9)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Fecha del primer vencimiento\",        \"GetHbArrayVar('aDatVto',1)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Fecha del segundo vencimiento\",       \"GetHbArrayVar('aDatVto',2)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Fecha del tercer vencimiento\",        \"GetHbArrayVar('aDatVto',3)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Fecha del cuarto vencimiento\",        \"GetHbArrayVar('aDatVto',4)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Fecha del quinto vencimiento\",        \"GetHbArrayVar('aDatVto',5)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe del primer vencimiento\",      \"GetHbArrayVar('aImpVto',1)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe del segundo vencimiento\",     \"GetHbArrayVar('aImpVto',2)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe del tercero vencimiento\",     \"GetHbArrayVar('aImpVto',3)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe del cuarto vencimiento\",      \"GetHbArrayVar('aImpVto',4)\" )\n   oFr:AddVariable( \"Albarán de cliente\",    \"Importe del quinto vencimiento\",      \"GetHbArrayVar('aImpVto',5)\" )\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\nFunction DesignReportEntAlbCli( oFr, dbfDoc )\n\n   if OpenFiles()\n\n      /*\n      Zona de datos------------------------------------------------------------\n      */\n\n      DataReportEntAlbCli( oFr )\n\n      /*\n      Paginas y bandas---------------------------------------------------------\n      */\n\n      if !Empty( ( dbfDoc )->mReport )\n\n         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      else\n\n         oFr:SetProperty(     \"Report\",            \"ScriptLanguage\", \"PascalScript\" )\n         oFr:SetProperty(     \"Report.ScriptText\", \"Text\",;\n                                                   + ;\n                                                   \"procedure DetalleOnMasterDetail(Sender: TfrxComponent);\"   + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"CallHbFunc('nTotAlbCli');\"                                 + Chr(13) + Chr(10) + ;\n                                                   \"end;\"                                                      + Chr(13) + Chr(10) + ;\n                                                   \"begin\"                                                     + Chr(13) + Chr(10) + ;\n                                                   \"end.\" )\n\n         oFr:AddPage(         \"MainPage\" )\n\n         oFr:SetProperty(     \"MainPage\",          \"OnBeforePrint\", \"DetalleOnMasterDetail\" )\n\n         oFr:AddBand(         \"CuerpoDocumento\",   \"MainPage\", frxPageHeader )\n         oFr:SetProperty(     \"CuerpoDocumento\",   \"Top\", 0 )\n         oFr:SetProperty(     \"CuerpoDocumento\",   \"Height\", 300 )\n\n         oFr:AddBand(         \"CabeceraColumnas\",  \"MainPage\", frxMasterData )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Top\", 300 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"Height\", 0 )\n         oFr:SetProperty(     \"CabeceraColumnas\",  \"StartNewPage\", .t. )\n         oFr:SetObjProperty(  \"CabeceraColumnas\",  \"DataSet\", \"Entrega\" )\n\n      end if\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReportEntAlbCli( oFr )\n\n      /*\n      Diseño de report---------------------------------------------------------\n      */\n\n      oFr:DesignReport()\n\n      /*\n      Destruye el diseñador----------------------------------------------------\n      */\n\n      oFr:DestroyFr()\n\n      /*\n      Cierra ficheros----------------------------------------------------------\n      */\n\n      CloseFiles()\n\n   else\n\n      Return .f.\n\n   end if\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFunction PrintReportEntAlbCli( nDevice, nCopies, cPrinter, dbfDoc, cAlbCliP, lTicket )\n\n   local oFr\n   local nRecAlbCliT    := ( dbfAlbCliT )->( Recno() )\n\n   DEFAULT nDevice      := IS_SCREEN\n   DEFAULT nCopies      := 1\n   DEFAULT cPrinter     := PrnGetName()\n   DEFAULT lTicket      := .f.\n\n   SysRefresh()\n\n   oFr                  := frReportManager():New()\n\n   oFr:LoadLangRes(     \"Spanish.Xml\" )\n\n   oFr:SetIcon( 1 )\n\n   oFr:SetTitle(        \"Diseñador de documentos\" )\n\n   /*\n   Manejador de eventos--------------------------------------------------------\n   */\n\n   oFr:SetEventHandler( \"Designer\", \"OnSaveReport\", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), \"mReport\" ) } )\n\n   /*\n   Zona de datos------------------------------------------------------------\n   */\n\n   DataReportEntAlbCli( oFr, cAlbCliP, lTicket )\n\n   /*\n   Cargar el informe-----------------------------------------------------------\n   */\n\n   if !Empty( ( dbfDoc )->mReport )\n\n      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), \"mReport\")\n\n      /*\n      Zona de variables--------------------------------------------------------\n      */\n\n      VariableReportEntAlbCli( oFr )\n\n      /*\n      Preparar el report-------------------------------------------------------\n      */\n\n      oFr:PrepareReport()\n\n      /*\n      Imprimir el informe------------------------------------------------------\n      */\n\n      do case\n         case nDevice == IS_SCREEN\n            oFr:ShowPreparedReport()\n\n         case nDevice == IS_PRINTER\n            oFr:PrintOptions:SetPrinter( cPrinter )\n            oFr:PrintOptions:SetCopies( nCopies )\n            oFr:PrintOptions:SetShowDialog( .f. )\n            oFr:Print()\n\n         case nDevice == IS_PDF\n            oFr:DoExport( \"PDFExport\" )\n\n      end case\n\n   end if\n\n   /*\n   Destruye el diseñador-------------------------------------------------------\n   */\n\n   oFr:DestroyFr()\n\n   ( dbfAlbCliT )->( dbGoTo( nRecAlbCliT ) )\n\nReturn .t.\n\n//---------------------------------------------------------------------------//\n\nFUNCTION PrnEntAlbCli( cNumDoc, lPrint, dbfTmpEnt )\n\n   local nLevel         := nLevelUsr( _MENUITEM_ )\n\n   if nAnd( nLevel, 1 ) != 0 .or. nAnd( nLevel, ACC_IMPR ) == 0\n      msgStop( 'Acceso no permitido.' )\n      return .t.\n   end if\n\n   if OpenFiles( nil, .t. )\n\n      if ( dbfTmpEnt )->( Used() )\n         ( dbfTmpEnt )->( dbSetFilter( {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nNumRec ) == cNumDoc }, \"cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nNumRec ) == cNumDoc\" ) )\n         ( dbfTmpEnt )->( dbGoTop() )\n      end if\n\n      PrnEntregas( lPrint, dbfTmpEnt, .t. )\n\n      ( dbfTmpEnt )->( DbClearFilter() )\n\n      CloseFiles()\n\n   end if\n\nReturn .t.\n\n#else\n\n//---------------------------------------------------------------------------//\n//Funciones de PDA\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION pdaOpenFiles( lExt )\n\n   local oError\n   local oBlock\n\n   if lOpenFiles\n      MsgStop( 'Imposible abrir ficheros de albaranes de clientes' )\n      Return ( .f. )\n   end if\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      lOpenFiles        := .t.\n\n      USE ( cPatEmp() + \"ALBCLIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIT\", @dbfAlbCliT ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIT.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIL\", @dbfAlbCliL ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIL.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLII.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLII\", @dbfAlbCliI ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLII.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLID.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLID\", @dbfAlbCliD ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLID.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"ALBCLIP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALBCLIP\", @dbfAlbCliP ) )\n      SET ADSINDEX TO ( cPatEmp() + \"ALBCLIP.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CLIENT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIENT\", @dbfClient ) )\n      SET ADSINDEX TO ( cPatCli() + \"CLIENT.CDX\" ) ADDITIVE\n\n      USE ( cPatDat() + \"TIVA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIVA\", @dbfIva ) )\n      SET ADSINDEX TO ( cPatDat() + \"TIVA.CDX\" ) ADDITIVE\n\n      USE ( cPatGrp() + \"FPAGO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FPAGO\", @dbfFPago ) )\n      SET ADSINDEX TO ( cPatGrp() + \"FPAGO.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"TIPINCI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"TIPINCI\", @dbfInci ) )\n      SET ADSINDEX TO ( cPatEmp() + \"TIPINCI.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"CliAtp.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CLIATP\", @dbfCliAtp ) )\n      SET ADSINDEX TO ( cPatCli() + \"CliAtp.Cdx\" ) ADDITIVE\n\n      USE ( cPatCli() + \"AGENTES.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AGENTES\", @dbfAgent ) )\n      SET ADSINDEX TO ( cPatCli() + \"AGENTES.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"ObrasT.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OBRAST\", @dbfObrasT ) )\n      SET ADSINDEX TO ( cPatCli() + \"ObrasT.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTICULO.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTICULO\", @dbfArticulo ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTICULO.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ArtCodebar.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"CODEBAR\", @dbfCodebar ) )\n      SET ADSINDEX TO ( cPatGrp() + \"ArtCodebar.Cdx\" ) ADDITIVE\n\n      USE ( cPatArt() + \"FAMILIAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"FAMILIAS\", @dbfFamilia ) )\n      SET ADSINDEX TO ( cPatArt() + \"FAMILIAS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ARTKIT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTTIK\", @dbfKit ) )\n      SET ADSINDEX TO ( cPatArt() + \"ARTKIT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"ArtDiv.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ARTDIV\", @dbfArtDiv ) )\n      SET ADSINDEX TO ( cPatArt() + \"ArtDiv.Cdx\" ) ADDITIVE\n\n      USE ( cPatDat() + \"DIVISAS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"DIVISAS\", @dbfDiv ) )\n      SET ADSINDEX TO ( cPatDat() + \"DIVISAS.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"OFERTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"OFERTA\", @dbfOferta ) )\n      SET ADSINDEX TO ( cPatArt() + \"OFERTA.CDX\" ) ADDITIVE\n\n      USE ( cPatCli() + \"RUTA.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"RUTA\", @dbfRuta ) )\n      SET ADSINDEX TO ( cPatCli() + \"RUTA.CDX\" ) ADDITIVE\n\n      USE ( cPatAlm() + \"Almacen.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"ALMACEN\", @dbfAlm ) )\n      SET ADSINDEX TO ( cPatAlm() + \"Almacen.Cdx\" ) ADDITIVE\n\n      USE ( cPatDat() + \"USERS.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"USERS\", @dbfUsr ) )\n      SET ADSINDEX TO ( cPatDat() + \"USERS.CDX\" ) ADDITIVE\n\n      USE ( cPatEmp() + \"NCOUNT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"NCOUNT\", @dbfCount ) )\n      SET ADSINDEX TO ( cPatEmp() + \"NCOUNT.CDX\" ) ADDITIVE\n\n      USE ( cPatArt() + \"PROVART.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"PROVART\", @dbfArtPrv ) )\n      SET ADSINDEX TO ( cPatArt() + \"PROVART.CDX\" ) ADDITIVE\n\n      oTrans            := TTrans():Create( cPatCli() )\n      if !oTrans:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n      oUndMedicion      := UniMedicion():Create( cPatGrp() )\n      if !oUndMedicion:OpenFiles()\n         lOpenFiles     := .f.\n      end if\n\n   RECOVER USING oError\n\n      lOpenFiles        := .f.\n\n      msgStop( \"Imposible abrir todas las bases de datos\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   if !lOpenFiles\n      pdaCloseFiles()\n   end if\n\nReturn ( lOpenFiles )\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION pdaCloseFiles()\n\n   if !Empty( oFont )\n      oFont:end()\n   end if\n\n   if oWndBrw     != nil\n		oWndBrw:oBrw:lCloseArea()\n      oWndBrw     := nil\n   else\n      if !Empty( dbfAlbCliT )\n         ( dbfAlbCliT )->( dbCloseArea() )\n      end if\n   end if\n   if !Empty( dbfClient )\n      ( dbfClient    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfIva )\n      ( dbfIva       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfFPago )\n      ( dbfFPago     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliL )\n      ( dbfAlbCliL   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliI )\n      ( dbfAlbCliI   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliD )\n      ( dbfAlbCliD   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlbCliP )\n      ( dbfAlbCliP   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAgent )\n      ( dbfAgent     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfArtPrv )\n      ( dbfArtPrv     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfArtDiv )\n      ( dbfArtDiv     )->( dbCloseArea() )\n   end if\n   if !Empty( dbfArticulo )\n      ( dbfArticulo  )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCodebar )\n      ( dbfCodebar   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfFamilia )\n      ( dbfFamilia   )->( dbCloseArea() )\n   end if\n   if !Empty( dbfKit )\n      ( dbfKit       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfAlm )\n      ( dbfAlm       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfCliAtp )\n      ( dbfCliAtp    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfDiv )\n      ( dbfDiv       )->( dbCloseArea() )\n   end if\n   if !Empty( dbfOferta )\n      ( dbfOferta    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfObrasT )\n      ( dbfObrasT    )->( dbCloseArea() )\n   end if\n   if !Empty( dbfRuta )\n      ( dbfRuta      )->( dbCloseArea() )\n   end if\n   if !Empty( dbfUsr )\n      ( dbfUsr )->( dbCloseArea() )\n   end if\n   if dbfInci != nil\n      ( dbfInci )->( dbCloseArea() )\n   end if\n   if dbfCount != nil\n      ( dbfCount )->( dbCloseArea() )\n   end if\n\n   if !Empty( oTrans )\n      oTrans:end()\n   end if\n   if !Empty( oUndMedicion )\n      oUndMedicion:end()\n   end if\n\n   dbfClient      := nil\n   dbfIva         := nil\n   dbfAlbCliL     := nil\n   dbfAlbCliT     := nil\n   dbfAlbCliI     := nil\n   dbfAlbCliD     := nil\n   dbfAlbCliP     := nil\n   dbfPedCliT     := nil\n   dbfPedCliL     := nil\n   dbfPedCliR     := nil\n   dbfPedCliP     := nil\n   dbfPedCliI     := nil\n   dbfPedCliD     := nil\n   dbfTikT        := nil\n   dbfFPago       := nil\n   dbfAgent       := nil\n   dbfAlm         := nil\n   dbfTarPreL     := nil\n   dbfTarPreS     := nil\n   dbfPromoT      := nil\n   dbfPromoL      := nil\n   dbfPromoC      := nil\n   dbfArticulo    := nil\n   dbfCodebar     := nil\n   dbfFamilia     := nil\n   dbfKit         := nil\n   dbfCliAtp      := nil\n   dbfTVta        := nil\n   dbfDiv         := nil\n   oBandera       := nil\n   dbfDoc         := nil\n   dbfTblCnv      := nil\n   dbfOferta      := nil\n   dbfObrasT      := nil\n   dbfPro         := nil\n   dbfFlt         := nil\n   dbfTblPro      := nil\n   dbfRuta        := nil\n   dbfArtDiv      := nil\n   dbfCajT        := nil\n   dbfUsr         := nil\n   dbfInci        := nil\n   dbfArtPrv      := nil\n   dbfAntCliT     := nil\n   dbfDelega      := nil\n   dbfCount       := nil\n   dbfUbicaL      := nil\n   dbfAgeCom      := nil\n   dbfFacCliT     := nil\n   dbfFacRecT     := nil\n   dbfFacRecL     := nil\n   dbfTikT        := nil\n   dbfEmp         := nil\n\n   oStock         := nil\n   oGrpCli        := nil\n   oNewImp        := nil\n   oTrans         := nil\n   oTipArt        := nil\n   oGrpFam        := nil\n   oUndMedicion   := nil\n   oFraPub        := nil\n\n   lOpenFiles     := .f.\n\n   oWndBrw        := nil\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\nFunction pdaAlbCli( oMenuItem )\n\n   local oDlg\n   local oBrw\n   local nLevel\n   local oGetBuscar\n   local cGetBuscar     := Space( 100 )\n   local oCbxOrden\n   local cCbxOrden      := \"Número\"\n   local oSayTit\n   local oFont\n   local oBtn\n\n   nLevel               := nLevelUsr( _MENUITEM_ )\n\n   if nAnd( nLevel, 1 ) != 0\n      msgStop( \"Acceso no permitido.\" )\n      return .f.\n   end if\n\n   /*\n   Abrimos los ficheros--------------------------------------------------------\n   */\n\n   if !pdaOpenFiles()\n      return .f.\n   end if\n\n   /*\n   Creamos el Shell------------------------------------------------------------\n   */\n\n      DEFINE FONT oFont NAME \"Verdana\" SIZE 0, -14\n\n      DEFINE DIALOG oDlg RESOURCE \"Dlg_info\"\n\n      REDEFINE SAY oSayTit ;\n         VAR      \"Albaranes\" ;\n         ID       140 ;\n         COLOR    \"N/W*\" ;\n         FONT     oFont ;\n         OF       oDlg\n\n      REDEFINE BTNBMP oBtn ;\n         ID       130 ;\n         OF       oDlg ;\n         FILE     ( cPatBmp() + \"document_plain_user1_16.bmp\" ) ;\n         NOBORDER ;\n         ACTION      ( nil )\n\n      oBtn:SetColor( 0, nRGB( 255, 255, 255 )  )\n\n      REDEFINE GET oGetBuscar ;\n         VAR      cGetBuscar;\n         ID       110 ;\n         BITMAP   \"FIND\" ;\n         OF       oDlg\n\n      oGetBuscar:bChange   := {| nKey, nFlags | AutoSeek( nKey, nFlags, oGetBuscar, oBrw, dbfAlbCliT ) }\n\n      REDEFINE COMBOBOX oCbxOrden ;\n         VAR      cCbxOrden ;\n         ID       120 ;\n         ITEMS    { \"Número\", \"Fecha\", \"Código\", \"Nombre\" } ;\n			OF 		oDlg\n\n      oCbxOrden:bChange    := {|| ( dbfAlbCliT )->( OrdSetFocus( oCbxOrden:nAt ) ), ( dbfAlbCliT )->( dbGoTop() ), oBrw:Refresh(), oGetBuscar:SetFocus(), oCbxOrden:Refresh() }\n\n      REDEFINE IBROWSE oBrw;\n         FIELDS   (dbfAlbCliT)->cSerAlb + \"/\" + AllTrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"/\" + ( dbfAlbCliT )->cSufAlb + CRLF + Dtoc( (dbfAlbCliT)->dFecAlb ) ,;\n                  (dbfAlbCliT)->cNomCli,;\n                  nTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, cDivEmp(), .t. );\n         HEAD     \"Número\" + CRLF + \"Fecha\",;\n                  \"Cliente\",;\n                  \"Importe \";\n         FIELDSIZES ;\n                  100,;\n                  180,;\n                  40;\n         JUSTIFY  .f.,;\n                  .f.,;\n                  .t. ;\n         ALIAS    ( dbfAlbCliT ) ;\n         ID       100 ;\n         OF       oDlg\n\n   ACTIVATE DIALOG oDlg ;\n      ON INIT ( oDlg:SetMenu( pdaBuildMenu( oDlg, oBrw ) ) )\n\n   pdaCloseFiles()\n\n   oFont:End()\n\n   // Restauramos la ventana---------------------------------------------------\n\n   oWnd():Show()\n\nRETURN ( nil )\n\n//---------------------------------------------------------------------------//\n\nstatic function pdaBuildMenu( oDlg, oBrw )\n\n   local oMenu\n\n   DEFINE MENU oMenu ;\n      RESOURCE 500 ;\n      BITMAPS  60 ; // bitmaps resoruces ID\n      IMAGES   6     // number of images in the bitmap\n\n      REDEFINE MENUITEM ID 510 OF oMenu ACTION ( WinAppRec( oBrw, bEdtPda, dbfAlbCliT ) )\n\n      REDEFINE MENUITEM ID 520 OF oMenu ACTION ( WinEdtRec( oBrw, bEdtPda, dbfAlbCliT, oDlg ) )\n\n      REDEFINE MENUITEM ID 530 OF oMenu ACTION ( WinDelRec( oBrw, dbfAlbCliT, {|| QuiAlbPda() } ) )\n\n      REDEFINE MENUITEM ID 540 OF oMenu ACTION ( WinZooRec( oBrw, bEdtPda, dbfAlbCliT, oDlg ) )\n\n      REDEFINE MENUITEM ID 550 OF oMenu ACTION ( pdaGenAlbCli( oBrw, dbfAlbCliT, dbfAlbCliL ) )\n\n      REDEFINE MENUITEM ID 560 OF oMenu ACTION ( oDlg:End() )\n\nReturn oMenu\n\n//---------------------------------------------------------------------------//\n\nStatic Function pdaGenAlbCli( oBrw, dbfAlbCliT, dbfAlbCliL )\n\n   local cTextToPrint   := \"\"\n   local cCodAlbCli     := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb\n   local oError\n   local oBlock\n\n   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   /*\n   Cargamos los valores iniciales con nTotAlbCli-------------------------------\n   */\n\n   nTotAlbCli( cCodAlbCli, dbfAlbCliT, dbfAlbCliL )\n\n   /*\n   Cabecera del documento------------------------------------------------------\n   */\n\n   cTextToPrint         += CRLF + CRLF\n\n   cTextToPrint         += \"Albaran    : \" + ( dbfAlbCliT )->cSerAlb + \"/\" + Alltrim( Str( ( dbfAlbCliT )->nNumAlb ) ) + \"-\" + ( dbfAlbCliT )->cSufAlb + CRLF\n\n   cTextToPrint         += \"Fecha      : \" + Dtoc( ( dbfAlbCliT )->dFecAlb ) + CRLF\n\n   cTextToPrint         += \"Cliente    : \" + AllTrim( ( dbfAlbCliT )->cCodCli ) + \" - \" + RTrim( ( dbfAlbCliT )->cNomCli ) + CRLF\n\n   cTextToPrint         += \"Establec.  : \" + Padr( RetFld( ( dbfAlbCliT )->cCodCli, dbfClient, \"NbrEst\" ), 46 ) + CRLF\n\n   cTextToPrint         += \"N.I.F.     : \" + ( dbfAlbCliT )->cDniCli + CRLF\n\n   cTextToPrint         += \"Direccion  : \" + RTrim( ( dbfAlbCliT )->cDirCli ) + CRLF\n\n   cTextToPrint         += \"CP y Pobl. : \" + RTrim( ( dbfAlbCliT )->cPosCli ) + Space( 1 ) + RTrim( ( dbfAlbCliT )->cPobCli ) + CRLF\n\n   cTextToPrint         += \"Provincia  : \" + RTrim( ( dbfAlbCliT )->cPrvCli ) + CRLF\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n   /*\n   Lineas del documento--------------------------------------------------------\n   */\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"Codigo Descripcion                     Und.  Precio    Total\" + CRLF\n   cTextToPrint         += \"------ ------------------------------ ----- ------- --------\" + CRLF\n\n   if ( dbfAlbCliL )->( dbSeek( cCodAlbCli ) )\n\n      while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cCodAlbCli .and. !( dbfAlbCliL )->( eof() )\n\n          cTextToPrint  += SubStr( ( dbfAlbCliL )->cRef, 1, 6 )                                         + Space( 1 )\n          cTextToPrint  += SubStr( ( dbfAlbCliL )->cDetalle, 1, 30 )                                    + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotNAlbCli( dbfAlbCliL ), MasUnd() ), 5 )                     + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotUAlbCli( dbfAlbCliL, nDouDiv ), cPouDiv ), 7 )             + Space( 1 )\n          cTextToPrint  += Right( Trans( nTotLAlbCli( dbfAlbCliL, nDouDiv, nRouDiv ), cPorDiv ), 8 )    + CRLF\n\n          if ( dbfAlbCliL )->lLote\n             cTextToPrint  += \"       Lote: \" + Padr( ( dbfAlbCliL )->cLote, 47 )                       + CRLF\n          end if\n\n          ( dbfAlbCliL )->( dbSkip() )\n\n      end while\n\n   end if\n\n   /*\n   Pie del documento-----------------------------------------------------------\n   */\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n   cTextToPrint         += \"   Base impuestos%   Importe RE%    Importe   Base   \" + Right( Str( nTotNet ), 12 ) + CRLF\n   cTextToPrint         += \"------- ---- --------- ---- ---------   impuestos \" + Right( Str( nTotIva ), 12 ) + CRLF\n\n   cTextToPrint         += Right( Trans( aIvaUno[ 2 ], cPorDiv )  , 7 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 8 ], cPorDiv )  , 9 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n   cTextToPrint         += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n   cTextToPrint         += \"R.E.   \" + Right( Str( nTotReq ), 12 )\n\n   if aIvaDos[ 3 ] != nil\n\n      cTextToPrint      += Right( Trans( aIvaDos[ 2 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaDos[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaDos[ 8 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n      cTextToPrint      += \"-------------------\"\n\n   else\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n      cTextToPrint      += \"                                         -------------------\"\n\n   end if\n\n   if aIvaTre[ 3 ] != nil\n\n      cTextToPrint      += Right( Trans( aIvaTre[ 2 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaTre[ 3 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaTre[ 8 ], cPorDiv )  , 9 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 4 ], \"@E 99.9\" ), 4 ) + Space(1)\n      cTextToPrint      += Right( Trans( aIvaUno[ 9 ], cPorDiv )  , 9 ) + Space(3)\n      cTextToPrint       += \"TOTAL  \" + Right( Str( nTotAlb ) , 12 ) + CRLF\n\n   else\n                        //           1         2         3         4         5         6\n                        //  123456789012345678901234567890123456789012345678901234567890\n      cTextToPrint      += \"                                         TOTAL  \" + Right( Str( nTotAlb ) , 12 ) + CRLF\n\n   end if\n\n   cTextToPrint         += Replicate( \"_\" , 60 ) + CRLF\n\n   msginfo( \"Compruebe si la impresora está en línea y si tiene papel suficiente\" )\n   SendText( cTextToPrint )\n\n   RECOVER\n\n      msgStop( \"Ocurrió un error a la hora de imprimir albaranes\" )\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\n#endif\n\n//---------------------------------------------------------------------------//\n\nCLASS pdaAlbCliSenderReciver\n\n   Method CreateData()\n\nEND CLASS\n\n//----------------------------------------------------------------------------//\n\nMethod CreateData( oPgrActual, oSayStatus, cPatPreVenta ) CLASS pdaAlbCliSenderReciver\n\n   local pdaAlbCliT\n   local pdaAlbCliL\n   local pdaAlbCliI\n   local pdaAlbCliP\n   local pdaAlbCliD\n   local dbfAlbCliT\n   local dbfAlbCliL\n   local dbfAlbCliI\n   local dbfAlbCliP\n   local dbfAlbCliD\n   local lExist         := .f.\n   local cFileName\n   local cNumAlbCliT\n   local cPatPc      := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )\n\n   //Cabeceras de las tablas\n\n   USE ( cPatPc + \"AlbCliT.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliT\", @dbfAlbCliT ) )\n   SET ADSINDEX TO ( cPatPc + \"AlbCliT.CDX\" ) ADDITIVE\n   ( dbfAlbCliT )->( OrdSetFocus( \"lSndDoc\" ) )\n\n   USE ( cPatPc + \"AlbCliL.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliL\", @dbfAlbCliL ) )\n   SET ADSINDEX TO ( cPatPc + \"AlbCliL.CDX\" ) ADDITIVE\n\n   USE ( cPatPc + \"AlbCliI.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliI\", @dbfAlbCliI ) )\n   SET ADSINDEX TO ( cPatPc + \"AlbCliI.CDX\" ) ADDITIVE\n\n   USE ( cPatPc + \"AlbCliP.DBF\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliP\", @dbfAlbCliP ) )\n   SET ADSINDEX TO ( cPatPc + \"AlbCliP.CDX\" ) ADDITIVE\n\n   USE ( cPatPc + \"AlbCliD.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"AlbCliD\", @dbfAlbCliD ) )\n   SET ADSINDEX TO ( cPatPc + \"AlbCliD.Cdx\" ) ADDITIVE\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"AlbCliT.Dbf\", cCheckArea( \"AlbCliT\", @pdaAlbCliT ), .t. )\n   ( pdaAlbCliT )->( ordListAdd( cPatEmp() + \"AlbCliT.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"AlbCliL.Dbf\", cCheckArea( \"AlbCliL\", @pdaAlbCliL ), .t. )\n   ( pdaAlbCliL )->( ordListAdd( cPatEmp() + \"AlbCliL.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"AlbCliI.Dbf\", cCheckArea( \"AlbCliI\", @pdaAlbCliI ), .t. )\n   ( pdaAlbCliI )->( ordListAdd( cPatEmp() + \"AlbCliI.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"AlbCliP.Dbf\", cCheckArea( \"AlbCliP\", @pdaAlbCliP ), .t. )\n   ( pdaAlbCliP )->( ordListAdd( cPatEmp() + \"AlbCliP.Cdx\" ) )\n\n   dbUseArea( .t., cDriver(), cPatEmp() + \"AlbCliD.Dbf\", cCheckArea( \"AlbCliD\", @pdaAlbCliD ), .t. )\n   ( pdaAlbCliD )->( ordListAdd( cPatEmp() + \"AlbCliD.Cdx\" ) )\n\n   if !Empty( oPgrActual )\n      oPgrActual:SetRange( 0, ( pdaAlbCliT )->( OrdKeyCount() ) )\n   end if\n\n   ( pdaAlbCliT )->( dbGoTop() )\n   while !( pdaAlbCliT )->( eof() )\n\n      if ( pdaAlbCliT )->lSndDoc\n\n         cNumAlbCliT    := ( pdaAlbCliT )->cSeralb + Str( ( pdaAlbCliT )->nNumalb ) + ( pdaAlbCliT )->cSufalb\n\n         if !( dbfAlbCliT )->( dbSeek( cNumAlbCliT ) )\n\n            dbPass( pdaAlbCliT, dbfAlbCliT, .t. )\n\n            /*\n            Lineas de albaranes--------------------------------------------------\n            */\n\n            if ( pdaAlbCliL )->( dbSeek( cNumAlbCliT ) )\n               while ( pdaAlbCliL )->cSeralb + Str( ( pdaAlbCliL )->nNumalb ) + ( pdaAlbCliL )->cSufalb == cNumAlbCliT .and. !( pdaAlbCliL )->( eof() )\n                  dbPass( pdaAlbCliL, dbfAlbCliL, .t. )\n                  ( pdaAlbCliL )->( dbSkip() )\n               end while\n            end if\n\n            /*\n            Incidencias de albaranes---------------------------------------------\n            */\n\n            if ( pdaAlbCliI )->( dbSeek( cNumAlbCliT ) )\n               while ( pdaAlbCliI )->cSeralb + Str( ( pdaAlbCliI )->nNumalb ) + ( pdaAlbCliI )->cSufalb == cNumAlbCliT .AND. !( pdaAlbCliI )->( eof() )\n                  dbPass( pdaAlbCliI, dbfAlbCliI, .t. )\n                  ( pdaAlbCliI )->( dbSkip() )\n               end while\n            end if\n\n            /*\n            Pagos de albaranes---------------------------------------------------\n            */\n\n            if ( pdaAlbCliP )->( dbSeek( cNumAlbCliT ) )\n               while ( pdaAlbCliP )->cSeralb + Str( ( pdaAlbCliP )->nNumalb ) + ( pdaAlbCliP )->cSufalb == cNumAlbCliT .AND. !( pdaAlbCliP )->( eof() )\n                  dbPass( pdaAlbCliP, dbfAlbCliP, .t. )\n                  ( pdaAlbCliP )->( dbSkip() )\n               end while\n            end if\n\n            /*\n            Documentos de albaranes----------------------------------------------\n            */\n\n            if ( pdaAlbCliD )->( dbSeek( cNumAlbCliT ) )\n               while ( pdaAlbCliD )->cSeralb + Str( ( pdaAlbCliD )->nNumalb ) + ( pdaAlbCliD )->cSufalb == cNumAlbCliT .AND. !( pdaAlbCliD )->( eof() )\n                  dbPass( pdaAlbCliD, dbfAlbCliD, .t. )\n                  ( pdaAlbCliD )->( dbSkip() )\n               end while\n            end if\n\n             if dbLock( pdaAlbCliT )\n               ( pdaAlbCliT )->lSndDoc  := .f.\n               ( pdaAlbCliT )->( dbUnLock() )\n            end if\n\n         end if\n\n      end if\n\n      ( pdaAlbCliT )->( dbSkip() )\n\n      if !Empty( oSayStatus )\n         oSayStatus:SetText( \"Sincronizando albaranes \" + Alltrim( Str( ( pdaAlbCliT )->( OrdKeyNo() ) ) ) + \" de \" + Alltrim( Str( ( pdaAlbCliT )->( OrdKeyCount() ) ) ) )\n      end if\n\n      SysRefresh()\n\n      if !Empty( oPgrActual )\n         oPgrActual:SetPos( ( pdaAlbCliT )->( OrdKeyNo() ) )\n      end if\n\n      SysRefresh()\n\n   end while\n\n   CLOSE ( pdaAlbCliT )\n   CLOSE ( pdaAlbCliL )\n   CLOSE ( pdaAlbCliI )\n   CLOSE ( pdaAlbCliP )\n   CLOSE ( pdaAlbCliD )\n   CLOSE ( dbfAlbCliT )\n   CLOSE ( dbfAlbCliL )\n   CLOSE ( dbfAlbCliI )\n   CLOSE ( dbfAlbCliP )\n   CLOSE ( dbfAlbCliD )\n\nReturn ( Self )\n\n//---------------------------------------------------------------------------//\n\n//---------------------------------------------------------------------------//\n//Funciones comunes para el programa y pda\n//---------------------------------------------------------------------------//\n\n//\n// Devuelve el numero de unidades reservadas en albaranes a clientes\n//\n\nfunction nUnidadesRecibidasAlbCli( cNumPed, cCodArt, cCodPr1, cCodPr2, cRefPrv, cDetalle, dbfAlbCliL )\n\n   local nTot        := 0\n   local aStaLin     := aGetStatus( dbfAlbCliL, .f. )\n\n   DEFAULT cCodPr1   := Space( 10 )\n   DEFAULT cCodPr2   := Space( 10 )\n   DEFAULT cRefPrv   := Space( 18 )\n   DEFAULT cDetalle  := Space( 250 )\n\n   if ( IsMuebles() )\n\n      ( dbfAlbCliL )->( OrdSetFocus( \"cNumPedDet\" ) )\n\n      if ( dbfAlbCliL )->( dbSeek( cNumPed + cCodArt + cCodPr1 + cCodPr2 + cRefPrv + cDetalle ) )\n         while ( dbfAlbCliL )->cNumPed + ( dbfAlbCliL )->cRef + ( dbfAlbCliL )->cCodPr1 + ( dbfAlbCliL )->cCodPr2 + ( dbfAlbCliL )->cRefPrv + ( dbfAlbCliL )->cDetalle == cNumPed + cCodArt + cCodPr1 + cCodPr2 + cRefPrv + cDetalle .and. !( dbfAlbCliL )->( eof() )\n            nTot     += nTotNAlbCli( dbfAlbCliL )\n            ( dbfAlbCliL )->( dbSkip() )\n         end while\n      end if\n\n   else\n\n      ( dbfAlbCliL )->( OrdSetFocus( \"cNumPedRef\" ) )\n\n      if ( dbfAlbCliL )->( dbSeek( cNumPed + cCodArt + cCodPr1 + cCodPr2 ) )\n         while ( dbfAlbCliL )->cNumPed + ( dbfAlbCliL )->cRef + ( dbfAlbCliL )->cCodPr1 + ( dbfAlbCliL )->cCodPr2 == cNumPed + cCodArt + cCodPr1 + cCodPr2 .and. !( dbfAlbCliL )->( eof() )\n            nTot     += nTotNAlbCli( dbfAlbCliL )\n            ( dbfAlbCliL )->( dbSkip() )\n         end while\n      end if\n\n   end if\n\n   SetStatus( dbfAlbCliL, aStaLin )\n\nreturn ( nTot )\n\n//---------------------------------------------------------------------------//\n\nfunction nTotNAlbCli( uDbf )\n\n   local nTotUnd\n\n   DEFAULT uDbf   := dbfAlbCliL\n\n   do case\n      case ValType( uDbf ) == \"A\"\n\n         if uDbf[ __LALQUILER ]\n\n            nTotUnd  := NotCaja( uDbf[ _NCANENT ] )\n            nTotUnd  *= uDbf[ _NUNICAJA ]\n            nTotUnd  *= NotCero( uDbf[ _NUNDKIT ] )\n            nTotUnd  *= NotCero( uDbf[ __DFECENT ] - uDbf[ __DFECSAL ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDUNO ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDDOS ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDTRE ] )\n\n\n         else\n\n            nTotUnd  := NotCaja( uDbf[ _NCANENT ] )\n            nTotUnd  *= uDbf[ _NUNICAJA ]\n            nTotUnd  *= NotCero( uDbf[ _NUNDKIT ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDUNO ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDDOS ] )\n            nTotUnd  *= NotCero( uDbf[ _NMEDTRE ] )\n\n\n         end if\n\n      case ValType( uDbf ) == \"C\"\n\n         if ( uDbf )->lAlquiler\n\n            nTotUnd  := NotCaja( ( uDbf )->nCanEnt )\n            nTotUnd  *= ( uDbf )->nUniCaja\n            nTotUnd  *= NotCero( ( uDbf )->nUndKit )\n            nTotUnd  *= NotCero( ( uDbf )->dFecEnt - ( uDbf )->dFecSal )\n            nTotUnd  *= NotCero( ( uDbf )->nMedUno )\n            nTotUnd  *= NotCero( ( uDbf )->nMedDos )\n            nTotUnd  *= NotCero( ( uDbf )->nMedTre )\n\n         else\n\n            nTotUnd  := NotCaja( ( uDbf )->nCanEnt )\n            nTotUnd  *= ( uDbf )->nUniCaja\n            nTotUnd  *= NotCero( ( uDbf )->nUndKit )\n            nTotUnd  *= NotCero( ( uDbf )->nMedUno )\n            nTotUnd  *= NotCero( ( uDbf )->nMedDos )\n            nTotUnd  *= NotCero( ( uDbf )->nMedTre )\n\n         end if\n\n\n      otherwise\n\n         if uDbf:lAlquiler\n\n            nTotUnd  := NotCaja( uDbf:nCanEnt )\n            nTotUnd  *= uDbf:nUniCaja\n            nTotUnd  *= NotCero( uDbf:nUndKit )\n            nTotUnd  *= NotCero( uDbf:dFecEnt - uDbf:dFecSal )\n            nTotUnd  *= NotCero( uDbf:nMedUno )\n            nTotUnd  *= NotCero( uDbf:nMedDos )\n            nTotUnd  *= NotCero( uDbf:nMedTre )\n\n\n         else\n\n            nTotUnd  := NotCaja( uDbf:nCanEnt )\n            NtotUnd  *= uDbf:nUniCaja\n            nTotUnd  *= NotCero( uDbf:nUndKit )\n            nTotUnd  *= NotCero( uDbf:nMedUno )\n            nTotUnd  *= NotCero( uDbf:nMedDos )\n            nTotUnd  *= NotCero( uDbf:nMedTre )\n\n         end if\n\n   end case\n\nreturn ( nTotUnd )\n\n//---------------------------------------------------------------------------//\n\nfunction nTotVAlbCli( uDbf )\n\n   local nTotUnd\n\n   DEFAULT uDbf   := dbfAlbCliL\n\n   do case\n      case ValType( uDbf ) == \"A\"\n\n         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( uDbf[ _NFACCNV ] )\n\n      case ValType( uDbf ) == \"C\"\n\n         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( ( uDbf )->nFacCnv )\n\n      otherwise\n\n         nTotUnd  := nTotNAlbCli( uDbf ) * NotCero( uDbf:nFacCnv )\n\n   end case\n\nreturn ( nTotUnd )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n	local nCalculo\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nRou      := nRouDiv()\n   DEFAULT nVdv      := 1\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .t.\n   DEFAULT lImpTrn   := .t.\n\n   if ( cAlbCliL )->lTotLin\n\n      nCalculo       := nTotUAlbCli( cAlbCliL, nDec, nVdv )\n\n   else\n\n      /*\n      Tomamos los valores redondeados\n      */\n\n      nCalculo       := nTotUAlbCli( cAlbCliL, nDec, nVdv )\n      nCalculo       -= Round( ( cAlbCliL )->nDtoDiv , nDec )\n\n      /*\n      Descuentos---------------------------------------------------------------\n      */\n\n      if lDto\n\n         if ( cAlbCliL )->nDto != 0\n            nCalculo -= nCalculo * ( cAlbCliL )->nDto / 100\n         end if\n\n         if ( cAlbCliL )->nDtoPrm != 0\n            nCalculo -= nCalculo * ( cAlbCliL )->nDtoPrm / 100\n         end if\n\n      end if\n\n      /*\n      Unidades-----------------------------------------------------------------\n      */\n\n      nCalculo       *= nTotNAlbCli( cAlbCliL )\n\n      /*\n      Punto Verde--------------------------------------------------------------\n      */\n\n      if lPntVer\n         nCalculo    += nPntLAlbCli( cAlbCliL, nDec, nVdv )\n      end if\n\n\n      if nRou != nil\n         nCalculo    := Round( nCalculo, nRou )\n      end if\n\n      /*\n      Transporte\n      */\n\n      if lImpTrn .and. ( cAlbCliL )->nImpTrn != 0\n         nCalculo    += ( cAlbCliL )->nImpTrn * nTotNAlbCli( cAlbCliL )\n      end if\n\n   end if\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n//\n// Precio del punto verde por linea\n//\n\nFUNCTION nPntLAlbCli( dbfLin, nDec, nVdv )\n\n   local nPntVer\n\n   DEFAULT dbfLin    := dbfAlbCliL\n   DEFAULT nDec      := 0\n   DEFAULT nVdv      := 1\n\n   /*\n   Punto Verde\n   */\n\n   nPntVer           := ( dbfLin )->nPntVer * nTotNAlbCli( dbfLin )\n\nRETURN ( Round( nPntVer, nDec ) )\n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el importe de descuento porcentual por cada linea---------------------\n*/\n\nFUNCTION nDtoLAlbCli( cAlbCliL, nDec, nRou, nVdv )\n\n   local nCalculo       := 0\n\n   DEFAULT cAlbCliL     := dbfAlbCliL\n   DEFAULT nDec         := nDouDiv()\n   DEFAULT nRou         := nRouDiv()\n   DEFAULT nVdv         := 1\n\n   if ( cAlbCliL )->nDto != 0 .and. !( cAlbCliL )->lTotLin\n\n      nCalculo          := nTotUAlbCli( cAlbCliL, nDec ) * nTotNAlbCli( cAlbCliL )\n\n      /*\n      Descuentos---------------------------------------------------------------\n      */\n\n      nCalculo          -= Round( ( cAlbCliL )->nDtoDiv / nVdv , nDec )\n\n      nCalculo          := nCalculo * ( cAlbCliL )->nDto / 100\n\n\n      if nVdv != 0\n         nCalculo       := nCalculo / nVdv\n      end if\n\n      if nRou != nil\n         nCalculo       := Round( nCalculo, nRou )\n      end if\n\n   end if\n\nRETURN ( nCalculo ) \n\n//---------------------------------------------------------------------------//\n/*\nDevuelve el importe de descuento porcentual en promociones por cada linea------\n*/\n\nFUNCTION nPrmLAlbCli( cAlbCliL, nDec, nRou, nVdv )\n\n   local nCalculo       := 0\n\n   DEFAULT cAlbCliL     := dbfAlbCliL\n   DEFAULT nDec         := nDouDiv()\n   DEFAULT nRou         := nRouDiv()\n   DEFAULT nVdv         := 1\n\n   if ( cAlbCliL )->nDtoPrm != 0 .and. !( cAlbCliL )->lTotLin\n\n      nCalculo          := nTotUAlbCli( cAlbCliL, nDec ) * nTotNAlbCli( cAlbCliL )\n\n      /*\n      Descuentos---------------------------------------------------------------\n      */\n\n      nCalculo          -= Round( ( cAlbCliL )->nDtoDiv / nVdv , nDec )\n\n      if ( cAlbCliL )->nDto != 0 \n         nCalculo       -= nCalculo * ( cAlbCliL )->nDto / 100\n      end if\n\n      nCalculo          := nCalculo * ( cAlbCliL )->nDtoPrm / 100\n\n      if nVdv != 0\n         nCalculo       := nCalculo / nVdv\n      end if\n\n      if nRou != nil\n         nCalculo       := Round( nCalculo, nRou )\n      end if\n\n   end if\n\nRETURN ( nCalculo ) \n\n//---------------------------------------------------------------------------//\n\n//\n// Precio unitario\n//\n\nFUNCTION nTotUAlbCli( uTmpLin, nDec, nVdv )\n\n   local nCalculo    := 0\n\n   DEFAULT uTmpLin   := dbfAlbCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   do case\n      case IsChar( uTmpLin )\n\n         if ( uTmpLin )->lAlquiler\n            nCalculo    := ( uTmpLin )->nPreAlq\n         else\n            nCalculo    := ( uTmpLin )->nPreUnit\n         end if\n\n      case IsObject( uTmpLin )\n\n         if uTmpLin:lAlquiler\n            nCalculo    := uTmpLin:nPreAlq\n         else\n            nCalculo    := uTmpLin:nPreUnit\n         end if\n\n      case IsArray( uTmpLin )\n\n         if uTmpLin[ __LALQUILER ]\n            nCalculo    := uTmpLin[ _NSATALQ ]\n         else\n            nCalculo    := uTmpLin[ _NSATUNIT ]\n         end if\n\n   end case\n\n   if nVdv != 0\n      nCalculo          := nCalculo / nVdv\n   end if\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n//\n// Valor del punto verde\n//\n\nFunction nPntUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo := ( dbfTmpLin )->nPntVer\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n	IF nVdv != 0\n      nCalculo    := ( dbfTmpLin )->nPntVer / nVdv\n	END IF\n\nReturn ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION IsAlbCli( cPath )\n\n   DEFAULT cPath  := cPatEmp()\n\n   if !lExistTable( cPath + \"AlbCliT.Dbf\" )\n      dbCreate( cPath + \"AlbCliT.Dbf\", aSqlStruct( aItmAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliL.Dbf\" )\n      dbCreate( cPath + \"AlbCliL.Dbf\", aSqlStruct( aColAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliP.Dbf\" )\n      dbCreate( cPath + \"AlbCliP.Dbf\", aSqlStruct( aItmAlbPgo() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliI.Dbf\" )\n      dbCreate( cPath + \"AlbCliI.Dbf\", aSqlStruct( aIncAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliD.Dbf\" )\n      dbCreate( cPath + \"AlbCliD.Dbf\", aSqlStruct( aAlbCliDoc() ), cDriver() )\n   end if\n\n   if !lExistIndex( cPath + \"AlbCliT.Cdx\" ) .or. ;\n      !lExistIndex( cPath + \"AlbCliL.Cdx\" ) .or. ;\n      !lExistIndex( cPath + \"AlbCliP.Cdx\" ) .or. ;\n      !lExistIndex( cPath + \"AlbCliI.Cdx\" ) .or. ;\n      !lExistTable( cPath + \"AlbCliD.Cdx\" )\n\n      rxAlbCli( cPath )\n\n   end if\n\nReturn ( .t. )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION mkAlbCli( cPath, lAppend, cPathOld, oMeter, bFor )\n\n   local oBlock\n   local oError\n	local dbfAlbCliT\n   local dbfAlbCliL\n   local dbfAlbCliI\n   local dbfAlbCliD\n   local dbfAlbCliP\n   local oldAlbCliT\n   local oldAlbCliL\n   local oldAlbCliI\n   local oldAlbCliD\n   local oldAlbCliP\n\n   DEFAULT bFor      := {|| .t. }\n\n   if oMeter != nil\n		oMeter:cText	:= \"Generando Bases\"\n		sysrefresh()\n   end if\n\n   CreateFiles( cPath )\n\n   rxAlbCli( cPath, oMeter )\n\n   if lAppend .and. lIsDir( cPathOld )\n\n      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n      BEGIN SEQUENCE\n\n      dbUseArea( .t., cDriver(), cPath + \"ALBCLIT.DBF\", cCheckArea( \"ALBCLIT\", @dbfAlbCliT ), .f. )\n      ( dbfAlbCliT )->( ordListAdd( cPath + \"ALBCLIT.CDX\" ) )\n\n      dbUseArea( .t., cDriver(), cPath + \"ALBCLIL.DBF\", cCheckArea( \"ALBCLIL\", @dbfAlbCliL ), .f. )\n      ( dbfAlbCliL )->( ordListAdd( cPath + \"ALBCLIL.CDX\" ) )\n\n      dbUseArea( .t., cDriver(), cPath + \"AlbCliI.Dbf\", cCheckArea( \"AlbCliI\", @dbfAlbCliI ), .f. )\n      ( dbfAlbCliI )->( ordListAdd( cPath + \"AlbCliI.Cdx\"  ) )\n\n      dbUseArea( .t., cDriver(), cPath + \"AlbCliD.Dbf\", cCheckArea( \"AlbCliD\", @dbfAlbCliD ), .f. )\n      ( dbfAlbCliD )->( ordListAdd( cPath + \"AlbCliD.Cdx\"  ) )\n\n      dbUseArea( .t., cDriver(), cPath + \"AlbCliP.Dbf\", cCheckArea( \"AlbCliP\", @dbfAlbCliP ), .f. )\n      ( dbfAlbCliP )->( ordListAdd( cPath + \"AlbCliP.Cdx\"  ) )\n\n      dbUseArea( .t., cDriver(), cPathOld + \"AlbCLIT.DBF\", cCheckArea( \"AlbCLIT\", @oldAlbCliT ), .f. )\n      ( oldAlbCliT )->( ordListAdd( cPathOld + \"AlbCLIT.CDX\"  ) )\n\n      dbUseArea( .t., cDriver(), cPathOld + \"AlbCLIL.DBF\", cCheckArea( \"AlbCLIL\", @oldAlbCliL ), .f. )\n      ( oldAlbCliL )->( ordListAdd( cPathOld + \"AlbCLIL.CDX\"  ) )\n\n      dbUseArea( .t., cDriver(), cPathOld + \"AlbCliI.Dbf\", cCheckArea( \"AlbCliI\", @oldAlbCliI ), .f. )\n      ( oldAlbCliI )->( ordListAdd( cPathOld + \"AlbCliI.Cdx\"  ) )\n\n      dbUseArea( .t., cDriver(), cPathOld + \"AlbCliD.Dbf\", cCheckArea( \"AlbCliD\", @oldAlbCliD ), .f. )\n      ( oldAlbCliD )->( ordListAdd( cPathOld + \"AlbCliD.Cdx\"  ) )\n\n      dbUseArea( .t., cDriver(), cPathOld + \"AlbCliP.Dbf\", cCheckArea( \"AlbCliP\", @oldAlbCliP ), .f. )\n      ( oldAlbCliP )->( ordListAdd( cPathOld + \"AlbCliP.Cdx\"  ) )\n\n      while !( oldAlbCliT )->( eof() )\n\n         if eval( bFor, oldAlbCliT )\n            dbCopy( oldAlbCliT, dbfAlbCliT, .t. )\n\n            if ( oldAlbCliL )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )\n               while ( oldAlbCliL )->CSERALB + Str( ( oldAlbCliL )->NNUMALB ) + ( oldAlbCliL )->CSUFALB == (oldAlbCliT)->CSERALB + Str( (dbfAlbCliT)->NNUMALB ) + (dbfAlbCliT)->CSUFALB .and. !(oldAlbCliL)->( eof() )\n                  dbCopy( oldAlbCliL, dbfAlbCliL, .t. )\n                  ( oldAlbCliL )->( dbSkip() )\n               end while\n            end if\n\n            if ( oldAlbCliI )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )\n               while ( oldAlbCliI )->CSERALB + Str( ( oldAlbCliI )->NNUMALB ) + ( oldAlbCliI )->CSUFALB == ( oldAlbCliT )->CSERALB + Str( ( dbfAlbCliT )->NNUMALB ) + ( dbfAlbCliT )->CSUFALB .and. !( oldAlbCliI )->( eof() )\n                  dbCopy( oldAlbCliI, dbfAlbCliI, .t. )\n                  ( oldAlbCliI )->( dbSkip() )\n               end while\n            end if\n\n            if ( oldAlbCliD )->( dbSeek( (oldAlbCliT)->CSERALB + Str( (oldAlbCliT)->NNUMALB ) + (oldAlbCliT)->CSUFALB ) )\n               while ( oldAlbCliD )->CSERALB + Str( ( oldAlbCliD )->NNUMALB ) + ( oldAlbCliD )->CSUFALB == ( oldAlbCliT )->CSERALB + Str( ( dbfAlbCliT )->NNUMALB ) + ( dbfAlbCliT )->CSUFALB .and. !( oldAlbCliI )->( eof() )\n                  dbCopy( oldAlbCliD, dbfAlbCliD, .t. )\n                  ( oldAlbCliD )->( dbSkip() )\n               end while\n            end if\n\n            if ( oldAlbCliP )->( dbSeek( ( oldAlbCliT )->CSERALB + Str( ( oldAlbCliT )->NNUMALB ) + ( oldAlbCliT )->CSUFALB ) )\n               while ( oldAlbCliP )->CSERALB + Str( ( oldAlbCliP )->NNUMALB ) + ( oldAlbCliP )->CSUFALB == ( oldAlbCliT )->CSERALB + Str( ( dbfAlbCliT )->NNUMALB ) + ( dbfAlbCliT )->CSUFALB .and. !( oldAlbCliI )->( eof() )\n                  dbCopy( oldAlbCliP, dbfAlbCliP, .t. )\n                  ( oldAlbCliP )->( dbSkip() )\n               end while\n            end if\n\n         end if\n\n         ( oldAlbCliT )->( dbSkip() )\n\n      end while\n\n      /*\n      Reemplaza la antigua sesion----------------------------------------------\n      */\n\n      ( dbfAlbCliT )->( dbEval( {|| ( dbfAlbCliT )->cTurAlb := Space( 6 ) },,,,, .f. ) )\n\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n      ( dbfAlbCliL )->( dbCloseArea() )\n      ( dbfAlbCliI )->( dbCloseArea() )\n      ( dbfAlbCliD )->( dbCloseArea() )\n      ( dbfAlbCliP )->( dbCloseArea() )\n\n      ( oldAlbCliT )->( dbCloseArea() )\n      ( oldAlbCliL )->( dbCloseArea() )\n      ( oldAlbCliI )->( dbCloseArea() )\n      ( oldAlbCliD )->( dbCloseArea() )\n      ( oldAlbCliP )->( dbCloseArea() )\n\n      RECOVER USING oError\n\n         msgStop( \"Imposible abrir todas las bases de datos de albaranes de clientes\" + CRLF + ErrorMessage( oError ) )\n\n      END SEQUENCE\n      ErrorBlock( oBlock )\n\n   end if\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\nFUNCTION rxAlbCli( cPath, oMeter )\n\n	local dbfAlbCliT\n\n   DEFAULT cPath  := cPatEmp()\n\n   if !lExistTable( cPath + \"ALBCLIT.DBF\" )   .OR. ;\n      !lExistTable( cPath + \"ALBCLIL.DBF\" )   .OR. ;\n      !lExistTable( cPath + \"ALBCLII.DBF\" )   .OR. ;\n      !lExistTable( cPath + \"ALBCLID.DBF\" )   .OR. ;\n      !lExistTable( cPath + \"ALBCLIP.DBF\" )   .OR. ;\n      !lExistTable( cPath + \"ALBCLIS.DBF\" )\n\n      CreateFiles( cPath )\n\n   end if\n\n   fEraseIndex( cPath + \"ALBCLIT.CDX\" )\n   fEraseIndex( cPath + \"ALBCLIL.CDX\" )\n   fEraseIndex( cPath + \"ALBCLII.CDX\" )\n   fEraseIndex( cPath + \"ALBCLID.CDX\" )\n   fEraseIndex( cPath + \"ALBCLIP.CDX\" )\n   fEraseIndex( cPath + \"ALBCLIS.CDX\" )\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIT.DBF\", cCheckArea( \"ALBCLIT\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"NNUMALB\", \"CSERALB + Str(NNUMALB) + CSUFALB\", {|| Field->CSERALB + Str( Field->NNUMALB ) + Field->CSUFALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"DFECALB\", \"DFECALB\", {|| Field->DFECALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CCODCLI\", \"CCODCLI\", {|| Field->CCODCLI } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CNOMCLI\", \"Upper( CNOMCLI )\", {|| Upper( Field->CNOMCLI ) } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"cObra\", \"cCodObr + Dtos( dFecAlb )\", {|| Field->cCodObr + Dtos( Field->dFecAlb ) } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"cCodAge\", \"cCodAge + Dtos( dFecAlb )\", {|| Field->cCodAge + Dtos( Field->dFecAlb ) } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CCODSUALB\", \"CCODSUALB\", {|| Field->CCODSUALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"LFACTURADO\", \"LFACTURADO\", {|| Field->LFACTURADO } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"cNumFac\", \"CNUMFAC\", {|| Field->CNUMFAC }, ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CTURALB\", \"CTURALB + CSUFALB + CCODCAJ\", {|| Field->CTURALB + Field->CSUFALB + Field->CCODCAJ } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"NNUMORD\", \"Str( nNumOrd ) + cSufOrd\", {|| Str( Field->nNumOrd ) + Field->cSufOrd } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CCODTRN\", \"CCODTRN\", {|| Field->CCODTRN } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CCODOBR\", \"CCODCLI + CCODOBR\", {|| Field->CCODCLI + Field->CCODOBR } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"CNUMPED\", \"CNUMPED\", {|| Field->CNUMPED } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ))\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIT.CDX\", \"lSndDoc\", \"lSndDoc\", {|| Field->lSndDoc } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliT.Cdx\", \"cCodUsr\", \"Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre\", {|| Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted() .and. !lFacturado\", {|| !Deleted() .and. !Field->lFacturado }  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliT.Cdx\", \"lCodCli\", \"Field->cCodCli\", {|| Field->cCodCli } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliT.CDX\", \"cSuPed\", \"cSuPed\", {|| Field->cSuPed } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliT.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de albaranes de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIL.DBF\", cCheckArea( \"ALBCLIL\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"NNUMALB\", \"CSERALB + STR( NNUMALB ) + CSUFALB\", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cRef\", \"cRef + cCodPr1 + cCodPr2 + cSerAlb + Str( nNumAlb ) + cSufAlb\", {|| Field->cRef + Field->cCodPr1 + Field->cCodPr2 + Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"Lote\", \"cLote\" , {|| Field->cLote } ) )\n\n      ( dbfAlbCliT )->( ordCondSet(\"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCLIL.CDX\", \"cRefLote\", \"cRef + cLote\", {|| Field->cRef + Field->cLote } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cNumPed\", \"cNumPed\", {|| Field->cNumPed } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cNumPedRef\", \"cNumPed + cRef + cCodPr1 + cCodPr2\", {|| Field->cNumPed + Field->cRef + Field->cCodPr1 + Field->cCodPr2 } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cNumPedDet\", \"cNumPed + cRef + cCodPr1 + cCodPr2 + cRefPrv\", {|| Field->cNumPed + Field->cRef + Field->cCodPr1 + Field->cCodPr2 + Field->cRefPrv } ) ) // + cDetalle\n\n      ( dbfAlbCliT )->( ordCondSet(\"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cNumRef\", \"cSerAlb + Str( nNumAlb ) + cSufAlb + cRef\", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Field->cRef } ) )\n\n      ( dbfAlbCliT )->( ordCondSet(\"!lFacturado .and. !Deleted()\", {|| !Field->lFacturado .and. !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cStkFast\", \"cRef\", {|| Field->cRef } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIL.CDX\", \"cPedRef\", \"cNumPed + cRef\", {|| Field->cNumPed + Field->cRef } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliL.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de albaranes de clientes\" )\n   end if\n\n   // Pagos de albaranes\n\n   dbUseArea( .t., cDriver(), cPath + \"ALBCLIP.DBF\", cCheckArea( \"ALBCLIP\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIP.CDX\", \"NNUMALB\", \"CSERALB + STR( NNUMALB ) + CSUFALB + STR( NNUMREC )\", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB + STR( Field->NNUMREC ) } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIP.CDX\", \"CTURREC\", \"cTurRec + cSufAlb + cCodCaj\", {|| Field->cTurRec + Field->cSufAlb + Field->cCodCaj } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"ALBCLIP.CDX\", \"CCODCLI\", \"cCodCli\", {|| Field->cCodCli } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliP.CDX\", \"DENTREGA\", \"dEntrega\", {|| Field->dEntrega } ) )\n\n      ( dbfAlbCliT )->( ordCondSet(\"!Deleted() .and. !Field->lPasado\", {|| !Deleted() .and. !Field->lPasado } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliP.Cdx\", \"lCtaBnc\", \"Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp\", {|| Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliP.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de albaranes de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"AlbCliI.DBF\", cCheckArea( \"AlbCliI\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet(\"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliI.CDX\", \"NNUMALB\", \"CSERALB + STR( NNUMALB ) + CSUFALB\", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliI.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de albaranes de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"AlbCliD.DBF\", cCheckArea( \"AlbCliD\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet(\"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliD.CDX\", \"NNUMALB\", \"CSERALB + STR( NNUMALB ) + CSUFALB\", {|| Field->CSERALB + STR( Field->NNUMALB ) + Field->CSUFALB } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliD.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de albaranes de clientes\" )\n   end if\n\n   dbUseArea( .t., cDriver(), cPath + \"AlbCliS.Dbf\", cCheckArea( \"AlbCliS\", @dbfAlbCliT ), .f. )\n\n   if !( dbfAlbCliT )->( neterr() )\n      ( dbfAlbCliT )->( __dbPack() )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {||!Deleted()}  ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliS.CDX\", \"nNumAlb\", \"cSerAlb + Str( nNumAlb ) + cSufAlb + Str( nNumLin )\", {|| Field->cSerAlb + Str( Field->nNumAlb ) + Field->cSufAlb + Str( Field->nNumLin ) } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!lFacturado .and. !Deleted()\", {|| !Field->lFacturado .and. !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliS.CDX\", \"cRefSer\", \"cRef + cAlmLin + cNumSer\", {|| Field->cRef + Field->cAlmLin + Field->cNumSer } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!lFacturado .and. !Deleted()\", {|| !Field->lFacturado .and. !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliS.CDX\", \"cNumSer\", \"cNumSer\", {|| Field->cNumSer } ) )\n\n      ( dbfAlbCliT )->( ordCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n      ( dbfAlbCliT )->( ordCreate( cPath + \"AlbCliS.Cdx\", \"iNumAlb\", \"'10' + cSerAlb + Str( nNumAlb ) + Space( 1 ) + cSufAlb\", {|| '10' + Field->cSerAlb + Str( Field->nNumAlb ) + Space( 1 ) + Field->cSufAlb } ) )\n\n      ( dbfAlbCliT )->( dbCloseArea() )\n   else\n      msgStop( \"Imposible abrir en modo exclusivo la tabla de numeros de series de albaranes de clientes\" )\n   end if\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION CreateFiles( cPath )\n\n   if !lExistTable( cPath + \"AlbCliT.Dbf\" )\n      dbCreate( cPath + \"AlbCliT.Dbf\", aSqlStruct( aItmAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliL.Dbf\" )\n      dbCreate( cPath + \"AlbCliL.Dbf\", aSqlStruct( aColAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliP.Dbf\" )\n      dbCreate( cPath + \"AlbCliP.Dbf\", aSqlStruct( aItmAlbPgo() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliI.Dbf\" )\n      dbCreate( cPath + \"AlbCliI.Dbf\", aSqlStruct( aIncAlbCli() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliD.Dbf\" )\n      dbCreate( cPath + \"AlbCliD.Dbf\", aSqlStruct( aAlbCliDoc() ), cDriver() )\n   end if\n\n   if !lExistTable( cPath + \"AlbCliS.Dbf\" )\n      dbCreate( cPath + \"AlbCliS.Dbf\", aSqlStruct( aSerAlbCli() ), cDriver() )\n   end if\n\nRETURN NIL\n\n//--------------------------------------------------------------------//\n\nfunction aAlbCliDoc()\n\n   local aAlbCliDoc  := {}\n\n   aAdd( aAlbCliDoc, { \"cSerAlb\", \"C\",    1,  0, \"Serie de albarán\" ,                \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aAlbCliDoc, { \"nNumAlb\", \"N\",    9,  0, \"Número de albarán\" ,               \"'999999999'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aAlbCliDoc, { \"cSufAlb\", \"C\",    2,  0, \"Sufijo de albarán\" ,               \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aAlbCliDoc, { \"cNombre\", \"C\",  250,  0, \"Nombre del documento\" ,            \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aAlbCliDoc, { \"cRuta\",   \"C\",  250,  0, \"Ruta del documento\" ,              \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aAlbCliDoc, { \"mObsDoc\", \"M\",   10,  0, \"Observaciones del documento\" ,     \"\",                   \"\", \"( cDbfCol )\" } )\n\nreturn ( aAlbCliDoc )\n\n//---------------------------------------------------------------------------//\n\nfunction aIncAlbCli()\n\n   local aIncAlbCli  := {}\n\n   aAdd( aIncAlbCli, { \"cSerAlb\", \"C\",    1,  0, \"Serie de albarán\" ,                \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"nNumAlb\", \"N\",    9,  0, \"Número de albarán\" ,               \"'999999999'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"cSufAlb\", \"C\",    2,  0, \"Sufijo de albarán\" ,               \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"cCodTip\", \"C\",    3,  0, \"Tipo de incidencia\" ,              \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"dFecInc\", \"D\",    8,  0, \"Fecha de la incidencia\" ,          \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"mDesInc\", \"M\",   10,  0, \"Descripción de la incidencia\" ,    \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"lListo\",  \"L\",    1,  0, \"Lógico de listo\" ,                 \"\",                   \"\", \"( cDbfCol )\" } )\n   aAdd( aIncAlbCli, { \"lAviso\",  \"L\",    1,  0, \"Lógico de aviso\" ,                 \"\",                   \"\", \"( cDbfCol )\" } )\n\nreturn ( aIncAlbCli )\n\n//---------------------------------------------------------------------------//\n\nfunction aItmAlbPgo()\n\n   local aBasRecCli  := {}\n\n   aAdd( aBasRecCli, {\"cSerAlb\"     ,\"C\",  1, 0, \"Serie de albarán\" ,                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"nNumAlb\"     ,\"N\",  9, 0, \"Número de albarán\" ,                 \"'999999999'\",       \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cSufAlb\"     ,\"C\",  2, 0, \"Sufijo de albarán\" ,                 \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"nNumRec\"     ,\"N\",  2, 0, \"Número del recibo\",                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cCodCaj\"     ,\"C\",  3, 0, \"Código de caja\",                     \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cTurRec\"     ,\"C\",  6, 0, \"Sesión del recibo\",                  \"######\",            \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cCodCli\"     ,\"C\", 12, 0, \"Código de cliente\",                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"dEntrega\"    ,\"D\",  8, 0, \"Fecha de cobro\",                     \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"nImporte\"    ,\"N\", 16, 6, \"Importe\",                            \"cPorDivEnt\",        \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cDescrip\"    ,\"C\",100, 0, \"Concepto del pago\",                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cPgdoPor\"    ,\"C\", 50, 0, \"Pagado por\",                         \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cDocPgo\"     ,\"C\", 50, 0, \"Documento de pago\",                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cDivPgo\"     ,\"C\",  3, 0, \"Código de la divisa\",                \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"nVdvPgo\"     ,\"N\", 10, 6, \"Cambio de la divisa\",                \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cCodAge\"     ,\"C\",  3, 0, \"Código del agente\",                  \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cCodPgo\"     ,\"C\",  2, 0, \"Código de la forma de pago\",         \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"lCloPgo\"     ,\"L\",  1, 0, \"Logico de turno cerrado\",            \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cNumAnt\"     ,\"C\", 14, 0, \"Número del anticipo en el pedido\",   \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cNumRec\"     ,\"C\", 14, 0, \"Número del pedido al que pertenece\", \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"lPasado\"     ,\"L\",  1, 0, \"Lógico de pasado\",                   \"\",                  \"\", \"( cDbfEnt )\" } )\n   aAdd( aBasRecCli, {\"cBncEmp\"     ,\"C\", 50, 0, \"Banco de la empresa para el recibo\" ,\"\",                  \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cBncCli\"     ,\"C\", 50, 0, \"Banco del cliente para el recibo\" ,\"\",                    \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cEntEmp\"     ,\"C\",  4, 0, \"Entidad de la cuenta de la empresa\",  \"\",                 \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cSucEmp\"     ,\"C\",  4, 0, \"Sucursal de la cuenta de la empresa\",  \"\",                \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cDigEmp\"     ,\"C\",  2, 0, \"Dígito de control de la cuenta de la empresa\", \"\",        \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cCtaEmp\"     ,\"C\", 10, 0, \"Cuenta bancaria de la empresa\",  \"\",                      \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cEntCli\"     ,\"C\",  4, 0, \"Entidad de la cuenta del cliente\",  \"\",                   \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cSucCli\"     ,\"C\",  4, 0, \"Sucursal de la cuenta del cliente\",  \"\",                  \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cDigCli\"     ,\"C\",  2, 0, \"Dígito de control de la cuenta del cliente\", \"\",          \"\", \"( cDbfEnt )\", nil } )\n   aAdd( aBasRecCli, {\"cCtaCli\"     ,\"C\", 10, 0, \"Cuenta bancaria del cliente\",  \"\",                        \"\", \"( cDbfEnt )\", nil } )\n\n\nreturn ( aBasRecCli )\n\n//---------------------------------------------------------------------------//\n\nFunction aColAlbCli()\n\n   local aColAlbCli  := {}\n\n   aAdd( aColAlbCli, { \"cSerAlb\",   \"C\",  1, 0, \"Serie del albarán\" ,            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nNumAlb\",   \"N\",  9, 0, \"Número del albarán\" ,           \"'999999999'\",       \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cSufAlb\",   \"C\",  2, 0, \"Sufijo del albarán\" ,           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cRef\",      \"C\", 18, 0, \"Referencia de artículo\" ,       \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cDetalle\",  \"C\",250, 0, \"Detalle de artículo\" ,          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nPreUnit\",  \"N\", 16, 6, \"Precio artículo\" ,              \"cPouDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nPntVer\",   \"N\", 16, 6, \"Importe punto verde\" ,          \"cPpvDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nImpTrn\",   \"N\", 16, 6, \"Importe del porte\" ,            \"cPouDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nDto\",      \"N\",  6, 2, \"Descuento de artículo\" ,        \"'@E 999.9'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nDtoPrm\",   \"N\",  6, 2, \"Descuento de promoción\" ,       \"'@E 999.9'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nIva\",      \"N\",  4, 1, cImp() + \" del artículo\" ,             \"'@E 99'\",           \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nCanEnt\",   \"N\", 16, 6, cNombreCajas(),                  \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nCanFac\",   \"N\", 16, 6, \"Cantidad facturada\" ,           \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lControl\",  \"L\",  1, 0, \"Control reservado\" ,            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nPesoKg\",   \"N\", 16, 6, \"Peso del producto\" ,            \"'@E 9,999.99'\",     \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cPesoKg\",   \"C\",  2, 0, \"Unidad de peso del producto\" ,  \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cUnidad\",   \"C\",  2, 0, \"Unidad de venta\" ,              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nComAge\",   \"N\",  6, 2, \"Comisión del agente\" ,          \"'@E 999.9'\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nUniCaja\",  \"N\", 16, 6, cNombreUnidades(),               \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nUndKit\",   \"N\", 16, 6, \"Unidades del producto kit\",     \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"dFecha\",    \"D\",  8, 0, \"Fecha de linea\" ,               \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cTipMov\",   \"C\",  2, 0, \"Tipo de movimiento\" ,           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"mLngDes\",   \"M\", 10, 0, \"Descripción larga\" ,            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lTotLin\",   \"L\",  1, 0, \"Línea de total\" ,               \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lImpLin\",   \"L\",  1, 0, \"Línea no imprimible\" ,          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lNewLin\",   \"L\",  1, 0, \"\" ,                             \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNumPed\"   ,\"C\", 12, 0, \"Número del pedido\" ,            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodPr1\",   \"C\", 20, 0, \"Código de primera propiedad\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodPr2\",   \"C\", 20, 0, \"Código de segunda propiedad\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cValPr1\",   \"C\", 20, 0, \"Valor de primera propiedad\",    \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cValPr2\",   \"C\", 20, 0, \"Valor de segunda propiedad\",    \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nFacCnv\",   \"N\", 16, 6, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nDtoDiv\",   \"N\", 16, 6, \"Descuento en línea\",            \"cPouDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nNumLin\",   \"N\",  4, 0, \"Número de la línea\",            \"'9999'\",            \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nCtlStk\",   \"N\",  1, 0, \"Tipo de stock de la linea\",     \"9\",                 \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nCosDiv\",   \"N\", 16, 6, \"Precio de costo\",               \"cPouDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nPvpRec\",   \"N\", 16, 6, \"Precio de venta recomendado\",   \"cPouDivAlb\",        \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cAlmLin\",   \"C\",  3, 0, \"Código del almacen\",            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lIvaLin\",   \"L\",  1, 0, cImp() + \" incluido\",            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nValImp\",   \"N\", 16, 6, \"Importe de impuesto\",           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodImp\",   \"C\",  3, 0, \"Código del IVMH\",               \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lLote\",     \"L\",  1, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nLote\",     \"N\",  9, 0, \"\",                              \"'999999999'\",       \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cLote\",     \"C\", 12, 0, \"Número de lote\",                \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"dFecCad\",   \"D\",  8, 0, \"Fecha de caducidad\",            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lKitArt\",   \"L\",  1, 0, \"Línea con escandallo\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lKitChl\",   \"L\",  1, 0, \"Línea pertenciente a escandallo\", \"\",                \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lKitPrc\",   \"L\",  1, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nMesGrt\",   \"N\",  2, 0, \"Meses de garantía\",             \"'99'\",              \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lMsgVta\",   \"L\",  1, 0, \"Avisar venta sin stocks\",       \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lNotVta\",   \"L\",  1, 0, \"No permitir venta sin stocks\",  \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"mNumSer\",   \"M\", 10, 0, \"\" ,                             \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodTip\",   \"C\",  3, 0, \"Código del tipo de artículo\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodFam\",   \"C\", 16, 0, \"Código de familia\",             \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cGrpFam\",   \"C\",  3, 0, \"Código del grupo de familia\",   \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nReq\",      \"N\", 16, 6, \"Recargo de equivalencia\",       \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"mObsLin\",   \"M\", 10, 0, \"Observación de línea\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodPrv\",   \"C\", 12, 0, \"Código del proveedor\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNomPrv\",   \"C\", 30, 0, \"Nombre del proveedor\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cImagen\",   \"C\",250, 0, \"Fichero de imagen\" ,            \"\",                  \"\", \"( cDbfCol )\", .t. } )\n   aAdd( aColAlbCli, { \"nPuntos\",   \"N\", 15, 6, \"Puntos del artículo\",           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nValPnt\",   \"N\", 16, 6, \"Valor del punto\",               \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nDtoPnt\",   \"N\",  5, 2, \"Descuento puntos\",              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nIncPnt\",   \"N\",  5, 2, \"Incremento porcentual\",         \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cRefPrv\",   \"C\", 18, 0, \"Referencia proveedor\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nVolumen\",  \"N\", 16, 6, \"Volumen del producto\" ,         \"'@E 9,999.99'\",     \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cVolumen\",  \"C\",  2, 0, \"Unidad del volumen\" ,           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"dFecEnt\" ,  \"D\",  8, 0, \"Fecha de entrada del alquiler\", \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"dFecSal\" ,  \"D\",  8, 0, \"Fecha de salida del alquiler\",  \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nPreAlq\" ,  \"N\", 16, 6, \"Precio de alquiler\",            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lAlquiler\", \"L\",  1, 0, \"Lógico de alquiler\",            \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nNumMed\",   \"N\",  1, 0, \"Número de mediciones\",          \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nMedUno\",   \"N\", 16, 6, \"Primera unidad de medición\",    \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nMedDos\",   \"N\", 16, 6, \"Segunda unidad de medición\",    \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nMedTre\",   \"N\", 16, 6, \"Tercera unidad de medición\",    \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"nTarLin\",   \"N\", 16, 6, \"Tarifa de precio aplicada\",     \"MasUnd()\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodUbi1\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodUbi2\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodUbi3\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cValUbi1\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cValUbi2\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cValUbi3\",  \"C\",  5, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNomUbi1\",  \"C\", 30, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNomUbi2\",  \"C\", 30, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNomUbi3\",  \"C\", 30, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lImpFra\",   \"L\",  1, 0, \"Lógico de imprimir frase publicitaria\", \"\",          \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cCodFra\",   \"C\",  3, 0, \"Código de frase publicitaria\",  \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cTxtFra\",   \"C\",250, 0, \"\",                              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"Descrip\",   \"M\", 10, 0, \"Observación de línea\",          \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lFacturado\",\"L\",  1, 0, \"Lógico de facturado\",           \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lLinOfe\"  , \"L\",  1, 0, \"Línea con oferta\",              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"lVolImp\",   \"L\",  1, 0, \"Lógico aplicar volumen con IpusEsp\",  \"\",            \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"dFecAlb\",   \"D\",  8, 0, \"Fecha de albaran\",              \"\",                  \"\", \"( cDbfCol )\" } )\n   aAdd( aColAlbCli, { \"cNumSat\"   ,\"C\", 12, 0, \"Número del SAT\" ,               \"\",                  \"\", \"( cDbfCol )\" } )\n\nReturn ( aColAlbCli )\n\n//---------------------------------------------------------------------------//\n\nFunction aItmAlbCli()\n\n   local aItmAlbCli := {}\n\n   aAdd( aItmAlbCli, { \"CSERALB\"   ,\"C\",  1, 0, \"Serie del albarán\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NNUMALB\"   ,\"N\",  9, 0, \"Número del albarán\" ,                                   \"'999999999'\",        \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CSUFALB\"   ,\"C\",  2, 0, \"Sufijo del albarán\" ,                                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CTURALB\"   ,\"C\",  6, 0, \"Sesión del albarán\",                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"DFECALB\"   ,\"D\",  8, 0, \"Fecha del albarán\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODCLI\"   ,\"C\", 12, 0, \"Código del cliente\" ,                                   \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODALM\"   ,\"C\",  3, 0, \"Código de almacén\" ,                                    \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODCAJ\"   ,\"C\",  3, 0, \"Código de caja\" ,                                       \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CNOMCLI\"   ,\"C\", 80, 0, \"Nombre del cliente\" ,                                   \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDIRCLI\"   ,\"C\",100, 0, \"Domicilio del cliente\" ,                                \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CPOBCLI\"   ,\"C\", 35, 0, \"Población del cliente\" ,                                \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CPRVCLI\"   ,\"C\", 20, 0, \"Provincia del cliente\" ,                                \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CPOSCLI\"   ,\"C\", 15, 0, \"Código postal del cliente\" ,                            \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDNICLI\"   ,\"C\", 30, 0, \"DNI/CIF del cliente\" ,                                  \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LMODCLI\"   ,\"L\",  1, 0, \"Lógico de modificar datos del cliente\" ,                \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LFACTURADO\",\"L\",  1, 0, \"Lógico de facturado\" ,                                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lEntregado\",\"L\",  1, 0, \"Lógico albarán enviado\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"DFECENT\"   ,\"D\",  8, 0, \"Fecha de entrada del albarán\" ,                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODSUALB\" ,\"C\", 25, 0, \"Referencia a su albarán\" ,                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCONDENT\"  ,\"C\",100, 0, \"Condición de entrada\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"MCOMENT\"   ,\"M\", 10, 0, \"Cometarios del albarán\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"MOBSERV\"   ,\"M\", 10, 0, \"Observaciones\" ,                                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODPAGO\"  ,\"C\",  2, 0, \"Código de la forma de pago\" ,                           \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NBULTOS\"   ,\"N\",  3, 0, \"Número de bultos\" ,                                     \"'999'\",              \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NPORTES\"   ,\"N\", 16, 6, \"Importe de los portes\" ,                                \"cPouDivAlb\",         \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODAGE\"   ,\"C\",  3, 0, \"Código del agente\" ,                                    \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODOBR\"   ,\"C\", 10, 0, \"Código de obra\" ,                                       \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODTAR\"   ,\"C\",  5, 0, \"Código de tarifa\" ,                                     \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CCODRUT\"   ,\"C\",  4, 0, \"Código de ruta\" ,                                       \"'@!'\",               \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CNUMPED\"   ,\"C\", 12, 0, \"Número del pedido\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cNumPre\"   ,\"C\", 12, 0, \"Número del presupuesto\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cNumSat\"   ,\"C\", 12, 0, \"Número del SAT\" ,                                       \"\",                   \"\", \"( cDbf )\" } )\n   aAdd( aItmAlbCli, { \"NTIPOALB\"  ,\"N\",  1, 0, \"Tipo de albarán\" ,                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CNUMFAC\"   ,\"C\", 12, 0, \"Número del documento facturado\" ,                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LMAYOR\"    ,\"L\",  1, 0, \"\" ,                                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NTARIFA\"   ,\"N\",  1, 0, \"Tarifa de precio aplicada\" ,                            \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDTOESP\"   ,\"C\", 50, 0, \"Descripción porcentaje de descuento\",                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOESP\"   ,\"N\",  6, 2, \"Porcentaje de descuento\",                               \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDPP\"      ,\"C\", 50, 0, \"Descripción pct. de dto. por pronto pago\",              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDPP\"      ,\"N\",  6, 2, \"Porcentaje de dto. por pronto pago\",                    \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDTOUNO\"   ,\"C\", 25, 0, \"Descripción del primer descuento personalizado\",        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOUNO\"   ,\"N\",  4, 1, \"Porcentaje del primer descuento pers.\",                 \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDTODOS\"   ,\"C\", 25, 0, \"Descripción del segundo descuento pers.\",               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTODOS\"   ,\"N\",  4, 1, \"Descripción del segundo descuento pers.\",               \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOCNT\"   ,\"N\",  6, 2, \"Pct. de dto. por pago contado\",                         \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTORAP\"   ,\"N\",  6, 2, \"Pct. de dto. por rappel\",                               \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOPUB\"   ,\"N\",  6, 2, \"Pct. de dto. por publicidad\",                           \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOPGO\"   ,\"N\",  6, 2, \"Pct. de dto. por pago centralizado\",                    \"'@EZ 999.99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NDTOPTF\"   ,\"N\",  7, 2, \"\"                                 ,                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LRECARGO\"  ,\"L\",  1, 0, \"Lógico recargo de equivalencia\",                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NPCTCOMAGE\",\"N\",  6, 2, \"Pct. de comisión del agente\",                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LSNDDOC\"   ,\"L\",  1, 0, \"Lógico de documento a enviar\",                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CDIVALB\"   ,\"C\",  3, 0, \"Código de divisa\",                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NVDVALB\"   ,\"N\", 10, 4, \"Valor del cambio de la divisa\",                         \"'@EZ 999,999.9999'\", \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CRETPOR\"   ,\"C\",100, 0, \"Retirado por\" ,                                         \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CRETMAT\"   ,\"C\", 20, 0, \"Matrícula\" ,                                            \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CNUMDOC\"   ,\"C\", 12, 0, \"\",                                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CSUPED\"    ,\"C\", 50, 0, \"Su pedido\",                                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LIVAINC\"   ,\"L\",  1, 0, cImp() + \" incluido\",                                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NREGIVA\"   ,\"N\",  1, 0, \"Regimen de \" + cImp(),                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"LGENLQD\"   ,\"L\",  1, 0, \"Generado por liquidación\",                              \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NNUMORD\"   ,\"N\",  9, 0, \"Número de la orden de carga\" ,                          \"'999999999'\",        \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CSUFORD\"   ,\"C\",  2, 0, \"Sufijo de la orden de carga\" ,                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"DFECORD\"   ,\"D\",  8, 0, \"Fecha de la orden de carga\" ,                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NIVAMAN\"   ,\"N\",  6, 2, \"Porcentaje de \" + cImp() + \" del gasto\" ,                       \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"NMANOBR\"   ,\"N\", 16, 6, \"Gastos\" ,                                               \"cPorDivAlb\",         \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cCodTrn\"   ,\"C\",  9, 0, \"Código del transportista\" ,                             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nKgsTrn\"   ,\"N\", 16, 6, \"TARA del transportista\" ,                               \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lCloAlb\"   ,\"L\",  1, 0, \"\" ,                                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cCodUsr\"   ,\"C\",  3, 0, \"Código de usuario\",                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"dFecCre\"   ,\"D\",  8, 0, \"Fecha de creación/modificación del documento\",          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cTimCre\"   ,\"C\",  5, 0, \"Hora de creación/modificación del documento\",           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"dFecEnv\"   ,\"D\",  8, 0, \"Fecha de envio\",                                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cCodGrp\"   ,\"C\",  4, 0, \"Código de grupo de cliente\" ,                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lImprimido\",\"L\",  1, 0, \"Lógico de imprimido\" ,                                  \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"dFecImp\"   ,\"D\",  8, 0, \"Última fecha de impresión\" ,                            \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cHorImp\"   ,\"C\",  5, 0, \"Hora de la última impresión\" ,                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cCodDlg\"   ,\"C\",  2, 0, \"Código delegación\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nDtoAtp\"   ,\"N\",  6, 2, \"Porcentaje de descuento atípico\",                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nSbrAtp\"   ,\"N\",  1, 0, \"Lugar donde aplicar dto atípico\",                       \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nMontaje\"  ,\"N\",  6, 2, \"Horas de montaje\",                                      \"'@EZ 999,99'\",       \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"dFecEntr\",  \"D\",  8, 0, \"Fecha de entrada de alquiler\",                          \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"dFecSal\",   \"D\",  8, 0, \"Fecha de salida de alquiler\",                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lAlquiler\", \"L\",  1, 0, \"Lógico de alquiler\",                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cManObr\",   \"C\",250, 0, \"\" ,                                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lOrdCar\",   \"L\",  1, 0, \"Lógico de pertenecer a un orden de carga\" ,             \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CNUMTIK\",   \"C\", 13, 0, \"Número del ticket\" ,                                    \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"CTLFCLI\",   \"C\", 20, 0, \"Teléfono del cliente\" ,                                 \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nTotNet\",   \"N\", 16, 6, \"Total neto\" ,                                           \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nTotIva\",   \"N\", 16, 6, \"Total \" + cImp() ,                                      \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nTotReq\",   \"N\", 16, 6, \"Total recargo\" ,                                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nTotAlb\",   \"N\", 16, 6, \"Total albarán\" ,                                        \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"nTotPag\",   \"N\", 16, 6, \"Total anticipado\" ,                                     \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"lOperPV\",   \"L\",  1, 0, \"Lógico para operar con punto verde\" ,                   \"\",                   \"\", \"( cDbf )\"} )\n   aAdd( aItmAlbCli, { \"cBanco\"   , \"C\", 50, 0, \"Nombre del banco del cliente\",                          \"\",                   \"\", \"( cDbf )\", nil } )\n   aAdd( aItmAlbCli, { \"cEntBnc\"  , \"C\",  4, 0, \"Entidad de la cuenta bancaria del cliente\",             \"\",                   \"\", \"( cDbf )\", nil } )\n   aAdd( aItmAlbCli, { \"cSucBnc\"  , \"C\",  4, 0, \"Sucursal de la cuenta bancaria del cliente\",            \"\",                   \"\", \"( cDbf )\", nil } )\n   aAdd( aItmAlbCli, { \"cDigBnc\"  , \"C\",  2, 0, \"Dígito de control de la cuenta bancaria del cliente\",   \"\",                   \"\", \"( cDbf )\", nil } )\n   aAdd( aItmAlbCli, { \"cCtaBnc\"  , \"C\", 10, 0, \"Cuenta bancaria del cliente\",                           \"\",                   \"\", \"( cDbf )\", nil } )\n\nReturn ( aItmAlbCli )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTotAlbCli( cAlbaran, cAlbCliT, cAlbCliL, cIva, cDiv, aTmp, cDivRet, lPic, lExcCnt, lNeto )\n\n   local nRecno\n	local bCondition\n   local dFecAlb\n   local lRecargo\n   local nDtoUno\n   local nDtoDos\n   local nDtoEsp\n	local nDtoPP\n	local nDtoCnt\n	local nDtoRap\n	local nDtoPub\n	local nDtoPgo\n	local nDtoPtf\n	local cCodDiv\n	local cCodPgo\n   local lIvaInc\n   local nDtoAtp\n   local nSbrAtp\n   local nKgsTrn\n   local nIvaMan\n   local nManObr           := 0\n   local nTotalArt         := 0\n   local nTotalUnd         := 0\n   local nTotalLin         := 0\n   local nTotalTrn         := 0\n   local nTotalPnt         := 0\n   local nTotalIvm         := 0\n   local nImpIva           := { 0, 0, 0 }\n   local nImpReq           := { 0, 0, 0 }\n   local aTotalDto         := { 0, 0, 0 }\n   local aTotalDPP         := { 0, 0, 0 }\n   local aTotalUno         := { 0, 0, 0 }\n   local aTotalDos         := { 0, 0, 0 }\n   local aTotalAtp         := { 0, 0, 0 }\n   local nDescuentosLineas := 0\n   local lOperarPntVer     := .f.\n\n   DEFAULT cAlbCliT        := dbfAlbCliT\n   DEFAULT cAlbCliL        := dbfAlbCliL\n   DEFAULT cAlbaran        := ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb\n   DEFAULT cIva            := dbfIva\n   DEFAULT cDiv            := dbfDiv\n   DEFAULT lPic            := .f.\n   DEFAULT lNeto           := .f.\n\n   if Empty( Select( cAlbCliT ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cAlbCliL ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cIva ) )\n      Return ( 0 )\n   end if\n\n   if Empty( Select( cDiv ) )\n      Return ( 0 )\n   end if\n\n   public nTotBrt    := 0\n   public nTotAlb    := 0\n   public nTotDto    := 0\n   public nTotDPP    := 0\n   public nTotNet    := 0\n   public nTotIva    := 0\n   public nTotIvm    := 0\n   public nTotAge    := 0\n   public nTotReq    := 0\n   public nTotPnt    := 0\n   public nTotUno    := 0\n   public nTotDos    := 0\n   public nTotCos    := 0\n   public nTotPes    := 0\n   public nTotDif    := 0\n   public nTotAtp    := 0\n   public nTotTrn    := 0\n   public nPctRnt    := 0\n   public nTotRnt    := 0\n   public cCtaCli    := cClientCuenta( ( cAlbCliT )->cCodCli )\n\n   public aTotIva    := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }\n   public aIvaUno    := aTotIva[ 1 ]\n   public aIvaDos    := aTotIva[ 2 ]\n   public aIvaTre    := aTotIva[ 3 ]\n\n   public aTotIvm    := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }\n   public aIvmUno    := aTotIvm[ 1 ]\n   public aIvmDos    := aTotIvm[ 2 ]\n   public aIvmTre    := aTotIvm[ 3 ]\n\n\n   public nTotalDto  := 0\n\n   public nTotArt    := 0\n   public nTotCaj    := 0\n\n   nImpIva           := { 0,0,0 }\n   nImpReq           := { 0,0,0 }\n\n   nRecno            := ( cAlbCliL )->( recno() )\n\n   if aTmp != nil\n      nDtoUno        := aTmp[ _NDTOUNO ]\n      nDtoDos        := aTmp[ _NDTODOS ]\n      dFecAlb        := aTmp[ _DFECALB ]\n		nDtoEsp			:= aTmp[ _NDTOESP ]\n      nDtoPP         := aTmp[ _NDPP    ]\n		nDtoCnt			:= aTmp[ _NDTOCNT ]\n		nDtoRap     	:= aTmp[ _NDTORAP ]\n		nDtoPub     	:= aTmp[ _NDTOPUB ]\n		nDtoPgo     	:= aTmp[ _NDTOPGO ]\n		nDtoPtf			:= aTmp[ _NDTOPTF ]\n      lRecargo       := aTmp[ _LRECARGO]\n      nIvaMan        := aTmp[ _NIVAMAN ]\n      nManObr        := aTmp[ _NMANOBR ]\n      cCodDiv        := aTmp[ _CDIVALB ]\n      nVdvDiv        := aTmp[ _NVDVALB ]\n		cCodPgo			:= aTmp[ _CCODPAGO]\n      lIvaInc        := aTmp[ _LIVAINC ]\n      nDtoAtp        := aTmp[ _NDTOATP ]\n      nSbrAtp        := aTmp[ _NSBRATP ]\n      nKgsTrn        := aTmp[ _NKGSTRN ]\n      lOperarPntVer  := aTmp[ _LOPERPV ]\n      bCondition     := {|| ( cAlbCliL )->( !eof() ) }\n      ( cAlbCliL )->( dbGoTop() )\n   else\n      nDtoUno        := ( cAlbCliT )->nDtoUno\n      nDtoDos        := ( cAlbCliT )->nDtoDos\n      dFecAlb        := ( cAlbCliT )->dFecAlb\n      nDtoEsp        := ( cAlbCliT )->nDtoEsp\n      nDtoPP         := ( cAlbCliT )->nDpp\n      nDtoCnt        := ( cAlbCliT )->nDtoCnt\n      nDtoRap        := ( cAlbCliT )->nDtoRap\n      nDtoPub        := ( cAlbCliT )->nDtoPub\n      nDtoPgo        := ( cAlbCliT )->nDtoPgo\n      nDtoPtf        := ( cAlbCliT )->nDtoPtf\n      lRecargo       := ( cAlbCliT )->lRecargo\n      nIvaMan        := ( cAlbCliT )->nIvaMan\n      nManObr        := ( cAlbCliT )->nManObr\n      cCodDiv        := ( cAlbCliT )->cDivAlb\n      nVdvDiv        := ( cAlbCliT )->nVdvAlb\n      cCodPgo        := ( cAlbCliT )->cCodPago\n      lIvaInc        := ( cAlbCliT )->lIvaInc\n      nDtoAtp        := ( cAlbCliT )->nDtoAtp\n      nSbrAtp        := ( cAlbCliT )->nSbrAtp\n      nKgsTrn        := ( cAlbCliT )->nKgsTrn\n      lOperarPntVer  := ( cAlbCliT )->lOperPV\n      bCondition     := {|| ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb == cAlbaran .and. ( cAlbCliL )->( !eof() ) }\n      ( cAlbCliL )->( dbSeek( cAlbaran ) )\n   endif\n\n    /*\n	Cargamos los pictures dependiendo de la moneda\n   */\n\n   cPorDiv           := cPorDiv( cCodDiv, cDiv )\n   cPouDiv           := cPouDiv( cCodDiv, cDiv )\n   nDouDiv           := nDouDiv( cCodDiv, cDiv )\n   nRouDiv           := nRouDiv( cCodDiv, cDiv )\n   nDpvDiv           := nDpvDiv( cCodDiv, cDiv )\n\n   while Eval( bCondition )\n\n      if lValLine( cAlbCliL )\n\n         if ( lExcCnt == nil                                .or.;    // Entran todos\n            ( lExcCnt .and. ( cAlbCliL )->nCtlStk != 2 )    .or.;    // Articulos sin contadores\n            ( !lExcCnt .and. ( cAlbCliL )->nCtlStk == 2 ) )          // Articulos con contadores\n\n            if ( cAlbCliL )->lTotLin\n\n               // Esto es para evitar escirbir en el fichero muchas veces\n\n               if ( cAlbCliL )->nPreUnit != nTotalLin .or. ( cAlbCliL )->nUniCaja != nTotalUnd\n\n                  if dbLock( cAlbCliL )\n                     ( cAlbCliL )->nPreUnit := nTotalLin\n                     ( cAlbCliL )->nUniCaja := nTotalUnd\n                     ( cAlbCliL )->( dbUnLock() )\n                  end if\n\n               end if\n\n               // Limpien\n\n               nTotalLin         := 0\n               nTotalUnd         := 0\n\n            else\n\n               nTotalArt         := nTotLAlbCli( cAlbCliL, nDouDiv, nRouDiv, nil, .t., .f., .f. )\n               nTotalTrn         := nTrnLAlbCli( cAlbCliL, nDouDiv )\n               nTotalPnt         := if( lOperarPntVer, nPntLAlbCli( cAlbCliL, nDpvDiv ), 0 )\n               nTotalIvm         := nTotIAlbCli( cAlbCliL, nDouDiv, nRouDiv )\n               nTotCos           += nCosLAlbCli( cAlbCliL, nDouDiv, nDorDiv )\n               nTotPes           += nPesLAlbCli( cAlbCliL )\n               nDescuentosLineas += nTotDtoLAlbCli( cAlbCliL, nDouDiv )\n\n               if aTmp != nil\n                  nTotAge        += nComLAlbCli( aTmp, cAlbCliL, nDouDiv, nRouDiv )\n               else\n                  nTotAge        += nComLAlbCli( cAlbCliT, cAlbCliL, nDouDiv, nRouDiv )\n               end if\n\n               // Acumuladores para las lineas de totales----------------------\n\n               nTotalLin         += nTotalArt\n               nTotalUnd         += nTotNAlbCli( cAlbCliL )\n\n               nTotArt           += nTotNAlbCli( cAlbCliL )\n               nTotCaj           += ( cAlbCliL )->nCanEnt\n\n               // Estudio de impuestos-----------------------------------------------\n\n               if nTotalArt + nTotalIvm + nTotalTrn + nTotalPnt != 0\n\n                  do case\n                     case _NPCTIVA1 == nil .OR. _NPCTIVA1 == ( cAlbCliL )->nIva\n\n                        _NPCTIVA1   := ( cAlbCliL )->nIva\n                        _NPCTREQ1   := ( cAlbCliL )->nReq\n                        _NBRTIVA1   += nTotalArt\n                        _NIVMIVA1   += nTotalIvm\n                        _NTRNIVA1   += nTotalTrn\n                        _NPNTVER1   += nTotalPnt\n\n                     case _NPCTIVA2 == nil .OR. _NPCTIVA2 == ( cAlbCliL )->nIva\n\n                        _NPCTIVA2   := (cAlbCliL)->nIva\n                        _NPCTREQ2   := (cAlbCliL)->nReq\n                        _NBRTIVA2   += nTotalArt\n                        _NIVMIVA2   += nTotalIvm\n                        _NTRNIVA2   += nTotalTrn\n                        _NPNTVER3   += nTotalPnt\n\n                     case _NPCTIVA3 == nil .OR. _NPCTIVA3 == ( cAlbCliL )->nIva\n\n                        _NPCTIVA3   := ( cAlbCliL )->nIva\n                        _NPCTREQ3   := ( cAlbCliL )->nReq\n                        _NBRTIVA3   += nTotalArt\n                        _NIVMIVA3   += nTotalIvm\n                        _NTRNIVA3   += nTotalTrn\n                        _NPNTVER3   += nTotalPnt\n\n                  end case\n\n                  //Estudio de los impuestos especiales------------------------\n\n                  if ( cAlbCliL )->nValImp != 0\n\n                     do case\n                        case aTotIvm[ 1, 2 ] == nil .or. aTotIvm[ 1, 2 ] == ( cAlbCliL )->nValImp\n                           aTotIvm[ 1, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )\n                           aTotIvm[ 1, 2 ]      := ( cAlbCliL )->nValImp\n                           aTotIvm[ 1, 3 ]      := aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ]\n\n                        case aTotIvm[ 2, 2 ] == nil .or. aTotIvm[ 2, 2 ] == ( cAlbCliL )->nValImp\n                           aTotIvm[ 2, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )\n                           aTotIvm[ 2, 2 ]      := ( cAlbCliL )->nValImp\n                           aTotIvm[ 2, 3 ]      := aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ]\n\n                        case aTotIvm[ 3, 2 ] == nil .or. aTotIvm[ 3, 2 ] == ( cAlbCliL )->nValImp\n                           aTotIvm[ 3, 1 ]      += nTotNAlbCli( cAlbCliL ) * if( ( cAlbCliL )->lVolImp, NotCero( ( cAlbCliL )->nVolumen ), 1 )\n                           aTotIvm[ 3, 2 ]      := ( cAlbCliL )->nValImp\n                           aTotIvm[ 3, 3 ]      := aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ]\n\n                     end case\n\n                  end if\n\n               end if\n\n            end if\n\n         else\n\n           // Limpien tambien si tenemos una linea de control\n\n            nTotalLin   := 0\n            nTotalUnd   := 0\n\n         end if\n\n      end if\n\n      ( cAlbCliL )->( dbSkip() )\n\n   end while\n\n   ( cAlbCliL )->( dbGoto( nRecno ) )\n\n   // Ordenamos los impuestosS de menor a mayor\n\n   aTotIva           := aSort( aTotIva,,, {|x,y| if( x[3] != nil, x[3], -1 ) > if( y[3] != nil, y[3], -1 )  } )\n\n   _NBASIVA1         := Round( _NBRTIVA1, nRouDiv )\n   _NBASIVA2         := Round( _NBRTIVA2, nRouDiv )\n   _NBASIVA3         := Round( _NBRTIVA3, nRouDiv )\n\n   nTotBrt           := _NBRTIVA1 + _NBRTIVA2 + _NBRTIVA3\n\n   // Descuentos atipicos sobre base\n\n   if nSbrAtp <= 1 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   // Descuentos Especiales\n\n   if nDtoEsp  != 0\n\n      aTotalDto[1]   := Round( _NBASIVA1 * nDtoEsp / 100, nRouDiv )\n      aTotalDto[2]   := Round( _NBASIVA2 * nDtoEsp / 100, nRouDiv )\n      aTotalDto[3]   := Round( _NBASIVA3 * nDtoEsp / 100, nRouDiv )\n\n      nTotDto        := aTotalDto[1] + aTotalDto[2] + aTotalDto[3]\n\n		_NBASIVA1		-= aTotalDto[1]\n		_NBASIVA2		-= aTotalDto[2]\n		_NBASIVA3		-= aTotalDto[3]\n\n   end if\n\n   // Descuentos atipicos sobre Descuentos especiales\n\n\n   if nSbrAtp == 2 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   // Descuentos por Pronto Pago estos son los buenos\n\n	IF nDtoPP	!= 0\n\n      aTotalDPP[1]   := Round( _NBASIVA1 * nDtoPP / 100, nRouDiv )\n      aTotalDPP[2]   := Round( _NBASIVA2 * nDtoPP / 100, nRouDiv )\n      aTotalDPP[3]   := Round( _NBASIVA3 * nDtoPP / 100, nRouDiv )\n\n      nTotDPP        := aTotalDPP[1] + aTotalDPP[2] + aTotalDPP[3]\n\n		_NBASIVA1		-= aTotalDPP[1]\n		_NBASIVA2		-= aTotalDPP[2]\n		_NBASIVA3		-= aTotalDPP[3]\n\n	END IF\n\n   // Descuentos atipicos sobre Descuento Pronto Pago\n\n   if nSbrAtp == 3 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n	IF nDtoUno != 0\n\n      aTotalUno[1]   := Round( _NBASIVA1 * nDtoUno / 100, nRouDiv )\n      aTotalUno[2]   := Round( _NBASIVA2 * nDtoUno / 100, nRouDiv )\n      aTotalUno[3]   := Round( _NBASIVA3 * nDtoUno / 100, nRouDiv )\n\n      nTotUno        := aTotalUno[1] + aTotalUno[2] + aTotalUno[3]\n\n		_NBASIVA1		-= aTotalUno[1]\n		_NBASIVA2		-= aTotalUno[2]\n		_NBASIVA3		-= aTotalUno[3]\n\n	END IF\n\n   // Descuentos atipicos sobre Descuento definido 1\n\n   if nSbrAtp == 4 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n	IF nDtoDos != 0\n\n      aTotalDos[1]   := Round( _NBASIVA1 * nDtoDos / 100, nRouDiv )\n      aTotalDos[2]   := Round( _NBASIVA2 * nDtoDos / 100, nRouDiv )\n      aTotalDos[3]   := Round( _NBASIVA3 * nDtoDos / 100, nRouDiv )\n\n      nTotDos        := aTotalDos[1] + aTotalDos[2] + aTotalDos[3]\n\n		_NBASIVA1		-= aTotalDos[1]\n		_NBASIVA2		-= aTotalDos[2]\n		_NBASIVA3		-= aTotalDos[3]\n\n	END IF\n\n   // Descuentos atipicos sobre Descuento definido 2\n\n   if nSbrAtp == 5 .and. nDtoAtp != 0\n\n      aTotalAtp[1]   := Round( _NBASIVA1 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[2]   := Round( _NBASIVA2 * nDtoAtp / 100, nRouDiv )\n      aTotalAtp[3]   := Round( _NBASIVA3 * nDtoAtp / 100, nRouDiv )\n\n      nTotAtp        := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]\n\n   end if\n\n   /*\n   Estudio de impuestos para el Gasto despues de los descuentos----------------------\n   */\n\n   if nManObr != 0\n\n      do case\n      case _NPCTIVA1 == nil .or. _NPCTIVA1 == nIvaMan\n\n         _NPCTIVA1   := nIvaMan\n         _NBASIVA1   += nManObr\n\n      case _NPCTIVA2 == nil .or. _NPCTIVA2 == nIvaMan\n\n         _NPCTIVA2   := nIvaMan\n         _NBASIVA2   += nManObr\n\n      case _NPCTIVA3 == nil .or. _NPCTIVA3 == nIvaMan\n\n         _NPCTIVA3   := nIvaMan\n         _NBASIVA3   += nManObr\n\n      end case\n\n   end if\n\n   // Una vez echos los descuentos le sumamos los transportes------------------\n\n   _NBASIVA1         += _NTRNIVA1\n   _NBASIVA2         += _NTRNIVA2\n   _NBASIVA3         += _NTRNIVA3\n\n   // Una vez echos los descuentos le sumamos el punto verde-------------------\n\n   _NBASIVA1         += _NPNTVER1\n   _NBASIVA2         += _NPNTVER2\n   _NBASIVA3         += _NPNTVER3\n\n   /*\n   Una vez echos los descuentos le sumamos el IVMH-----------------------------\n	*/\n\n   if uFieldEmpresa( \"lIvaImpEsp\" )\n      _NBASIVA1      += _NIVMIVA1\n      _NBASIVA2      += _NIVMIVA2\n      _NBASIVA3      += _NIVMIVA3\n   end if\n\n   // Calculamos los impuestosS-----------------------------------------------------\n\n   if !lIvaInc\n\n      //Calculos de impuestos\n\n      _NIMPIVA1      := if ( _NPCTIVA1 != NIL, Round( _NBASIVA1 * _NPCTIVA1 / 100, nRouDiv ), 0 )\n      _NIMPIVA2      := if ( _NPCTIVA2 != NIL, Round( _NBASIVA2 * _NPCTIVA2 / 100, nRouDiv ), 0 )\n      _NIMPIVA3      := if ( _NPCTIVA3 != NIL, Round( _NBASIVA3 * _NPCTIVA3 / 100, nRouDiv ), 0 )\n\n      //Calculo de recargo\n\n      if lRecargo\n         _NIMSATQ1   := if ( _NPCTIVA1 != NIL, Round( _NBASIVA1 * _NPCTREQ1 / 100, nRouDiv ), 0 )\n         _NIMSATQ2   := if ( _NPCTIVA2 != NIL, Round( _NBASIVA2 * _NPCTREQ2 / 100, nRouDiv ), 0 )\n         _NIMSATQ3   := if ( _NPCTIVA3 != NIL, Round( _NBASIVA3 * _NPCTREQ3 / 100, nRouDiv ), 0 )\n      end if\n\n   else\n\n      if _NPCTIVA1 != 0\n         _NIMPIVA1   := if( _NPCTIVA1 != nil, Round( _NBASIVA1 / ( 100 / _NPCTIVA1 + 1 ), nRouDiv ), 0 )\n      end if\n\n      if _NPCTIVA2 != 0\n         _NIMPIVA2   := if( _NPCTIVA2 != nil, Round( _NBASIVA2 / ( 100 / _NPCTIVA2 + 1 ), nRouDiv ), 0 )\n      end if\n\n      if _NPCTIVA3 != 0\n         _NIMPIVA3   := if( _NPCTIVA3 != nil, Round( _NBASIVA3 / ( 100 / _NPCTIVA3 + 1 ), nRouDiv ), 0 )\n      end if\n\n      if lRecargo\n         if _NPCTREQ1 != 0\n            _NIMSATQ1   := if( _NPCTIVA1 != NIL, Round( _NBASIVA1 / ( 100 / _NPCTREQ1 + 1 ), nRouDiv ), 0 )\n         end if\n         if _NPCTREQ2 != 0\n            _NIMSATQ2   := if( _NPCTIVA2 != NIL, Round( _NBASIVA2 / ( 100 / _NPCTREQ2 + 1 ), nRouDiv ), 0 )\n         end if\n         if _NPCTREQ3 != 0\n            _NIMSATQ3   := if( _NPCTIVA3 != NIL, Round( _NBASIVA3 / ( 100 / _NPCTREQ3 + 1 ), nRouDiv ), 0 )\n         end if\n      end if\n\n      _NBASIVA1      -= _NIMPIVA1\n      _NBASIVA2      -= _NIMPIVA2\n      _NBASIVA3      -= _NIMPIVA3\n\n      _NBASIVA1      -= _NIMSATQ1\n      _NBASIVA2      -= _NIMSATQ2\n      _NBASIVA3      -= _NIMSATQ3\n\n   end if\n\n   //Neto del Albaran\n\n   nTotNet           := Round( _NBASIVA1 + _NBASIVA2 + _NBASIVA3, nRouDiv )\n\n   // Total IVMH\n\n   nTotIvm           := Round( aTotIvm[ 1, 3 ] + aTotIvm[ 2, 3 ] + aTotIvm[ 3, 3 ], nRouDiv )\n\n   //Total Transpote\n\n   nTotTrn           := Round( _NTRNIVA1 + _NTRNIVA2 + _NTRNIVA3, nRouDiv )\n\n   //Total punto verde\n\n   nTotPnt           := Round( _NPNTVER1 + _NPNTVER2 + _NPNTVER3, nRouDiv )\n\n   //Total de impuestos\n\n   nTotIva           := Round( _NIMPIVA1 + _NIMPIVA2 + _NIMPIVA3, nRouDiv )\n\n   //Total de R.E.\n\n   nTotReq           := Round( _NIMSATQ1 + _NIMSATQ2 + _NIMSATQ3, nRouDiv )\n\n   //Total de impuestos\n\n   nTotImp           := nTotIva + nTotReq // + nTotIvm\n\n   /*\n   Total rentabilidad----------------------------------------------------------\n   */\n\n   nTotRnt           := Round(         nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )\n\n   nPctRnt           := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt,  nTotAtp,  nTotCos )\n\n   // Diferencias de pesos\n\n   if nKgsTrn != 0\n      nTotDif        := nKgsTrn - nTotPes\n   else\n      nTotDif        := 0\n   end if\n\n   // Total facturas-----------------------------------------------------------\n\n   nTotAlb           := nTotNet + nTotImp\n\n   if nTotNet == 0\n      nPctRnt        := 0\n   end if\n\n   /*\n   Total de descuentos del albaran---------------------------------------------\n   */\n\n   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp\n\n   // Solicitan una divisa distinta a la q se hizo originalmente la factura\n\n   if cDivRet != nil .and. cDivRet != cCodDiv\n      nTotNet        := nCnv2Div( nTotNet, cCodDiv, cDivRet, cDiv )\n      nTotIvm        := nCnv2Div( nTotIvm, cCodDiv, cDivRet, cDiv )\n      nTotIva        := nCnv2Div( nTotIva, cCodDiv, cDivRet, cDiv )\n      nTotReq        := nCnv2Div( nTotReq, cCodDiv, cDivRet, cDiv )\n      nTotAlb        := nCnv2Div( nTotAlb, cCodDiv, cDivRet, cDiv )\n      nTotPnt        := nCnv2Div( nTotPnt, cCodDiv, cDivRet, cDiv )\n      nTotTrn        := nCnv2Div( nTotTrn, cCodDiv, cDivRet, cDiv )\n      cPorDiv        := cPorDiv( cDivRet, cDiv )\n   end if\n\nRETURN ( if( lPic, Trans( if( lNeto, nTotNet, nTotAlb ), cPorDiv ), if( lNeto, nTotNet, nTotAlb ) ) )\n\n//--------------------------------------------------------------------------//\n\n/*\nDevuelve la comisi¢n de un agente en una linea de detalle\n*/\n\nFUNCTION nComLAlbCli( dbfAlbCliT, dbfAlbCliL, nDecOut, nDerOut )\n\n   local nImp  := nImpLAlbCli( dbfAlbCliT, dbfAlbCliL, nDecOut, nDerOut, , .f., .t., .f., .f. )\n\nRETURN ( Round( ( nImp * ( dbfAlbCliL )->nComAge / 100 ), nDerOut ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nImpUAlbCli( uAlbCliT, uAlbCliL, nDec, nVdv, lIva, cPouDiv )\n\n   local nIva\n   local lIvaInc\n   local nCalculo\n\n   DEFAULT nDec      := 0\n   DEFAULT nVdv      := 1\n   DEFAULT lIva      := .f.\n\n   nCalculo          := nTotUAlbCli( uAlbCliL, nDec, nVdv )\n\n   do case\n   case ValType( uAlbCliT ) == \"A\"\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTOESP ]  / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDPP    ]  / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTOUNO ]  / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTODOS ]  / 100, nDec )\n\n      lIvaInc        := uAlbCliT[ _LIVAINC ]\n\n   case ValType( uAlbCliT ) == \"C\"\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nDec )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nDec )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nDec )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nDec )\n\n      lIvaInc        := ( uAlbCliT )->lIvaInc\n\n   case ValType( uAlbCliT ) == \"O\"\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoEsp / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDpp    / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoUno / 100, nDec )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoDos / 100, nDec )\n\n      lIvaInc        := uAlbCliT:lIvaInc\n\n   end case\n\n   do case\n   case IsArray( uAlbCliL )\n      nIva           := uAlbCliL[ _NIVA    ]\n\n   case IsChar( uAlbCliL )\n      nIva           := ( uAlbCliL )->nIva\n\n   case IsObject( uAlbCliL )\n      nIva           := uAlbCliL:nIva\n\n   end case\n\n   if nIva != 0\n      if lIva  // lo quermos con impuestos\n         if !lIvaInc\n            nCalculo += Round( nCalculo * nIva / 100, nDec )\n         end if\n      else     // lo queremos sin impuestos\n         if lIvaInc\n            nCalculo -= Round( nCalculo / ( 100 / nIva  + 1 ), nDec )\n         end if\n      end if\n   end if\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nImpLAlbCli( uAlbCliT, dbfAlbCliL, nDec, nRou, nVdv, lIva, lDto, lImpTrn, lPntVer, cPouDiv )\n\n   local lIvaInc\n   local nCalculo\n\n   DEFAULT nDec      := 0\n   DEFAULT nRou      := 0\n   DEFAULT nVdv      := 1\n   DEFAULT lIva      := .f.\n   DEFAULT lDto      := .t.\n   DEFAULT lPntVer   := .f.\n   DEFAULT lImpTrn   := .f.\n\n   nCalculo          := nTotLAlbCli( dbfAlbCliL, nDec, nRou, nVdv, .t., lImpTrn, lPntVer )\n\n   do case\n   case ValType( uAlbCliT ) == \"A\"\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTOESP ]  / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDPP    ]  / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTOUNO ]  / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT[ _NDTODOS ]  / 100, nRou )\n\n      lIvaInc        := uAlbCliT[ _LIVAINC ]\n\n   case ValType( uAlbCliT ) == \"C\"\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoEsp / 100, nRou )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDpp    / 100, nRou )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoUno / 100, nRou )\n      nCalculo       -= Round( nCalculo * ( uAlbCliT )->nDtoDos / 100, nRou )\n\n      lIvaInc        := ( uAlbCliT )->lIvaInc\n\n   case ValType( uAlbCliT ) == \"O\"\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoEsp / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDpp    / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoUno / 100, nRou )\n      nCalculo       -= Round( nCalculo * uAlbCliT:nDtoDos / 100, nRou )\n\n      lIvaInc        := uAlbCliT:lIvaInc\n\n   end if\n\n   if ( dbfAlbCliL )->nIva != 0\n      if lIva  // lo quermos con impuestos\n         if !lIvaInc\n            nCalculo += Round( nCalculo * ( dbfAlbCliL )->nIva / 100, nRou )\n         end if\n      else     // lo queremos sin impuestos\n         if lIvaInc\n            nCalculo -= Round( nCalculo / ( 100 / ( dbfAlbCliL )->nIva  + 1 ), nRou )\n         end if\n      end if\n   end if\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nPesLAlbCli( cAlbCliL )\n\n	local nCalculo\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n\n   if !( cAlbCliL )->lTotLin\n      nCalculo       := Abs( nTotNAlbCli( cAlbCliL ) ) * ( cAlbCliL )->nPesoKg\n   end if\n\nRETURN ( nCalculo )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nCosLAlbCli( dbfLine, nDec, nRec, nVdv, cPouDiv )\n\n   local nCalculo       := 0\n\n   DEFAULT nDec         := 0\n   DEFAULT nRec         := 0\n   DEFAULT nVdv         := 1\n\n   if !( dbfLine )->lKitChl\n      nCalculo          := nTotNAlbCli( dbfLine )\n      nCalculo          *= ( dbfLine )->nCosDiv\n   end if\n\n   if nVdv != 0\n      nCalculo          := nCalculo / nVdv\n   end if\n\n   nCalculo             := Round( nCalculo, nRec )\n\nRETURN ( if( cPouDiv != nil, Trans( nCalculo, cPouDiv ), nCalculo ) )\n\n//---------------------------------------------------------------------------//\n\n//\n// Devuelve el valor del IVMH\n//\n\nFUNCTION nTotIAlbCli( dbfLin, nDec, nRouDec, nVdv, cPorDiv )\n\n   local nCalculo    := 0\n\n   DEFAULT dbfLin    := dbfAlbCliL\n   DEFAULT nDec      := 0\n   DEFAULT nRouDec   := 0\n   DEFAULT nVdv      := 1\n\n   if !( dbfLin )->lTotLin\n\n      /*\n      Tomamos los valores redondeados------------------------------------------\n      */\n\n      nCalculo       := Round( ( dbfLin )->nValImp, nDec )\n\n      /*\n      Unidades-----------------------------------------------------------------\n      */\n\n      nCalculo       *= nTotNAlbCli( dbfLin )\n\n         if ( dbfLin )->LVOLIMP\n            nCalculo *= NotCero( ( dbfLin )->nVolumen )\n         end if\n\n      nCalculo       := Round( nCalculo / nVdv, nRouDec )\n\n   end if\n\nRETURN ( if( cPorDiv != NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION nTrnLAlbCli( dbfLin, nDec, nRou, nVdv )\n\n   local nImpTrn\n\n   DEFAULT dbfLin    := dbfAlbCliL\n   DEFAULT nDec      := 2\n   DEFAULT nRou      := 2\n   DEFAULT nVdv      := 1\n\n   /*\n   Punto Verde-----------------------------------------------------------------\n   */\n\n   nImpTrn           := nTrnUAlbCli( dbfLin, nDec ) * nTotNAlbCli( dbfLin )\n\n   IF nVdv != 0\n      nImpTrn        := nImpTrn / nVdv\n	END IF\n\nRETURN ( Round( nImpTrn, nRou ) )\n\n//---------------------------------------------------------------------------//\n\nFUNCTION nTrnUAlbCli( dbfTmpLin, nDec, nVdv )\n\n	local nCalculo\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n   nCalculo       := ( dbfTmpLin )->nImpTrn\n\n	IF nVdv != 0\n      nCalculo    := nCalculo / nVdv\n	END IF\n\nRETURN ( Round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION KillTrans()\n\n	/*\n   Borramos los ficheros-------------------------------------------------------\n   */\n\n   if !Empty( dbfTmpLin ) .and. ( dbfTmpLin )->( Used() )\n      ( dbfTmpLin )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpPgo ) .and. ( dbfTmpPgo )->( Used() )\n      ( dbfTmpPgo )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpInc ) .and. ( dbfTmpInc )->( Used() )\n      ( dbfTmpInc )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpDoc ) .and. ( dbfTmpDoc )->( Used() )\n      ( dbfTmpDoc )->( dbCloseArea() )\n   end if\n\n   if !Empty( dbfTmpSer ) .and. ( dbfTmpSer )->( Used() )\n      ( dbfTmpSer )->( dbCloseArea() )\n   end if\n\n   dbfTmpLin      := nil\n   dbfTmpInc      := nil\n   dbfTmpDoc      := nil\n   dbfTmpPgo      := nil\n   dbfTmpSer      := nil\n\n   dbfErase( cTmpLin )\n   dbfErase( cTmpPgo )\n   dbfErase( cTmpInc )\n   dbfErase( cTmpDoc )\n   dbfErase( cTmpSer )\n\n   oStock:SetTmpAlbCliL()\n   oStock:SetTmpAlbCliS()\n\nRETURN NIL\n\n//------------------------------------------------------------------------//\n\nSTATIC FUNCTION BeginTrans( aTmp, nMode )\n\n   local oError\n   local oBlock\n   local lErrors     := .f.\n   local cDbfLin     := \"ACliL\"\n   local cDbfInc     := \"ACliI\"\n   local cDbfDoc     := \"ACliD\"\n   local cDbfPgo     := \"ACliP\"\n   local cDbfSer     := \"ACliS\"\n   local cAlbaran\n\n   CursorWait()\n\n   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n      aNumPed        := {}\n      aNumSat        := {}\n\n      cAlbaran       := aTmp[ _CSERALB ] + Str( aTmp[ _NNUMALB ] ) + aTmp[ _CSUFALB ]\n\n      cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )\n      cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )\n      cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )\n      cTmpPgo        := cGetNewFileName( cPatTmp() + cDbfPgo )\n      cTmpSer        := cGetNewFileName( cPatTmp() + cDbfSer )\n\n      do case\n         case nMode == APPD_MODE .or. nMode == DUPL_MODE\n\n            nTotOld  := 0\n\n         case nMode == EDIT_MODE\n\n            nTotOld  := nTotAlb\n\n      end case\n\n      /*\n      Primero Crear la base de datos local----------------------------------------\n      */\n\n      dbCreate( cTmpLin, aSqlStruct( aColAlbCli() ), cLocalDriver() )\n      dbUseArea( .t., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .f. )\n\n      if !NetErr() .and. ( dbfTmpLin )->( Used() )\n\n         ( dbfTmpLin )->( OrdCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n         ( dbfTmpLin )->( OrdCreate( cTmpLin, \"nNumLin\", \"Str( nNumLin, 4 )\", {|| Str( Field->nNumLin ) } ) )\n\n         ( dbfTmpLin )->( OrdCondSet( \"!Deleted()\", {|| !Deleted() } ) )\n         ( dbfTmpLin )->( OrdCreate( cTmpLin, \"nNumAlb\", \"Str( Recno() )\", {|| Str( Recno() ) } ) )\n\n         if ( dbfAlbCliL )->( dbSeek( cAlbaran ) )\n            while ( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb ) == cAlbaran .and. !( dbfAlbCliL )->( eof() )\n               dbPass( dbfAlbCliL, dbfTmpLin, .t. )\n               ( dbfAlbCliL )->( dbSkip() )\n            end while\n         end if\n\n         ( dbfTmpLin )->( dbGoTop() )\n\n         oStock:SetTmpAlbCliL( dbfTmpLin )\n\n      else\n\n         lErrors           := .t.\n\n      end if\n\n      /*\n      Base de datos de los anticipos----------------------------------------------\n      */\n\n      dbCreate( cTmpPgo, aSqlStruct( aItmAlbPgo() ), cLocalDriver() )\n      dbUseArea( .t., cLocalDriver(), cTmpPgo, cCheckArea( cDbfPgo, @dbfTmpPgo ), .f. )\n\n      if !NetErr()\n\n         ( dbfTmpPgo )->( OrdCondSet( \"!Deleted()\", {||!Deleted() } ) )\n         ( dbfTmpPgo )->( OrdCreate( cTmpPgo, \"nNumAlb\", \"Str( Recno() )\", {|| Str( Recno() ) } ) )\n\n         if ( dbfAlbCliP )->( dbSeek( cAlbaran ) )\n            while ( ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb ) == cAlbaran .and. !( dbfAlbCliP )->( eof() )\n               dbPass( dbfAlbCliP, dbfTmpPgo, .t. )\n               ( dbfAlbCliP )->( dbSkip() )\n            end while\n         end if\n\n         ( dbfTmpPgo )->( dbGoTop() )\n\n      else\n\n         lErrors     := .t.\n\n      end if\n\n      /*\n      A¤adimos desde el fichero de incidencias\n      */\n\n      dbCreate( cTmpInc, aSqlStruct( aIncAlbCli() ), cLocalDriver() )\n      dbUseArea( .t., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .f. )\n\n      if !NetErr()\n         ( dbfTmpInc )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n         ( dbfTmpInc )->( ordCreate( cTmpInc, \"nNumAlb\", \"Recno()\", {|| Recno() } ) )\n\n         if ( dbfAlbCliI )->( dbSeek( cAlbaran ) )\n            while ( ( dbfAlbCliI )->cSerAlb + Str( ( dbfAlbCliI )->nNumAlb ) + ( dbfAlbCliI )->cSufAlb == cAlbaran ) .and. ( dbfAlbCliI )->( !eof() )\n               dbPass( dbfAlbCliI, dbfTmpInc, .t. )\n               ( dbfAlbCliI )->( dbSkip() )\n            end while\n         end if\n\n         ( dbfTmpInc )->( dbGoTop() )\n\n      else\n\n         lErrors     := .t.\n\n      end if\n\n      /*\n      Añadimos desde el fichero de documentos\n      */\n\n      dbCreate( cTmpDoc, aSqlStruct( aAlbCliDoc() ), cLocalDriver() )\n      dbUseArea( .t., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .f. )\n\n      if !NetErr()\n\n         ( dbfTmpDoc )->( ordCondSet( \"!Deleted()\", {||!Deleted() } ) )\n         ( dbfTmpDoc )->( ordCreate( cTmpDoc, \"nNumAlb\", \"Recno()\", {|| Recno() } ) )\n\n         if ( dbfAlbCliD )->( dbSeek( cAlbaran ) )\n            while ( ( dbfAlbCliD )->cSerAlb + Str( ( dbfAlbCliD )->nNumAlb ) + ( dbfAlbCliD )->cSufAlb == cAlbaran ) .and. ( dbfAlbCliD )->( !eof() )\n               dbPass( dbfAlbCliD, dbfTmpDoc, .t. )\n               ( dbfAlbCliD )->( dbSkip() )\n            end while\n         end if\n\n         ( dbfTmpDoc )->( dbGoTop() )\n\n      else\n\n         lErrors     := .t.\n\n      end if\n\n      /*\n      Creamos el fichero de series------------------------------------------------\n      */\n\n      dbCreate( cTmpSer, aSqlStruct( aSerAlbCli() ), cLocalDriver() )\n      dbUseArea( .t., cLocalDriver(), cTmpSer, cCheckArea( cDbfSer, @dbfTmpSer ), .f. )\n\n      if !( dbfTmpSer )->( NetErr() )\n\n         ( dbfTmpSer )->( OrdCondSet( \"!Deleted()\", {||!Deleted() } ) )\n         ( dbfTmpSer )->( OrdCreate( cTmpSer, \"nNumLin\", \"Str( nNumLin, 4 ) + cRef\", {|| Str( Field->nNumLin, 4 ) + Field->cRef } ) )\n\n         if ( dbfAlbCliS )->( dbSeek( cAlbaran ) )\n            while ( ( dbfAlbCliS )->cSerAlb + Str( ( dbfAlbCliS )->nNumAlb ) + ( dbfAlbCliS )->cSufAlb == cAlbaran ) .and. !( dbfAlbCliS )->( eof() )\n               dbPass( dbfAlbCliS, dbfTmpSer, .t. )\n               ( dbfAlbCliS )->( dbSkip() )\n            end while\n         end if\n\n         ( dbfTmpSer )->( dbGoTop() )\n\n         oStock:SetTmpAlbCliS( dbfTmpSer )\n\n      else\n\n         lErrors     := .t.\n\n      end if\n\n   RECOVER USING oError\n\n      msgStop( ErrorMessage( oError ), \"Imposible crear tablas temporales.\" )\n\n      KillTrans()\n\n      lErrors        := .t.\n\n   END SEQUENCE\n\n   ErrorBlock( oBlock )\n\n   CursorWE()\n\nReturn ( lErrors )\n\n//-----------------------------------------------------------------------//\n\n/*\nCalcula el Total del albaran\n*/\n\nStatic Function RecalculaTotal( aTmpAlb )\n\n   local nTotAlbCli     := nTotAlbCli( nil, dbfAlbCliT, dbfTmpLin, dbfIva, dbfDiv, aTmpAlb )\n   local nEntAlbCli     := nPagAlbCli( nil, dbfTmpPgo, dbfDiv )\n\n   if oBrwIva != nil\n      oBrwIva:Refresh()\n   end if\n\n   if oGetNet != nil\n      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )\n   end if\n\n   if oGetIva != NIL\n      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )\n   end if\n\n   if oGetReq != NIL\n      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )\n   end if\n\n   if oGetIvm != nil\n      oGetIvm:SetText( Trans( nTotIvm, cPorDiv ) )\n   end if\n\n   if oGetRnt != nil\n      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) + AllTrim( cSimDiv( aTmpAlb[ _CDIVALB ], dbfDiv ) ) + \" : \" + AllTrim( Trans( nPctRnt, \"999.99\" ) ) + \"%\" ) )\n   end if\n\n   if oGetPnt != nil\n      oGetPnt:SetText( Trans( nTotPnt, cPorDiv ) )\n   end if\n\n   if oGetTrn != nil\n      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )\n   end if\n\n   if oGetTotal != NIL\n      oGetTotal:SetText( Trans( nTotAlb, cPorDiv ) )\n   end if\n\n   if oTotAlbLin != NIL\n      oTotAlbLin:SetText( Trans( nTotAlb, cPorDiv ) )\n   end if\n\n   if oGetAlb != nil\n      oGetAlb:SetText( Trans( nTotAlb, cPorDiv ) )\n   end if\n\n   if oGetEnt != nil\n      oGetEnt:SetText( Trans( nTotPag, cPorDiv ) )\n   end if\n\n   if oGetPdt != nil\n      oGetPdt:SetText( Trans( nTotAlb - nTotPag, cPorDiv ) )\n   end if\n\n   if oGetAge != nil\n      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )\n   end if\n\n   if oGetPes != nil\n      oGetPes:cText( nTotPes )\n   end if\n\n   if oGetDif != nil\n      oGetDif:cText( nTotDif )\n   end if\n\nReturn .t.\n\n//--------------------------------------------------------------------------//\n\n//\n// Total anticipos de un albaran\n//\n\nFUNCTION nPagAlbCli( cNumAlb, cAlbCliP, cDiv, cDivRet, lPic )\n\n   local nRec\n   local nOrd\n   local cCodDiv\n   local cPorDiv\n   local nRouDiv\n\n   public nTotPag       := 0\n\n   DEFAULT cAlbCliP     := dbfAlbCliP\n   DEFAULT cDiv         := dbfDiv\n   DEFAULT lPic         := .f.\n\n   nRec                 := ( cAlbCliP )->( Recno() )\n   nOrd                 := ( cAlbCliP )->( OrdSetFocus( \"nNumAlb\" ) )\n   cCodDiv              := cDivEmp()\n   cPorDiv              := cPorDiv( cCodDiv, cDiv ) // Picture de la divisa redondeada\n   nRouDiv              := nRouDiv( cCodDiv, cDiv )\n\n   if IsNil( cNumAlb )\n\n      ( cAlbCliP )->( dbGoTop() )\n      while !( cAlbCliP )->( Eof() )\n         nTotPag        += nEntAlbCli( cAlbCliP, cDiv, cDivRet )\n         ( cAlbCliP )->( dbSkip() )\n      end while\n\n   else\n\n      if ( cAlbCliP )->( dbSeek( cNumAlb ) )\n         while ( cAlbCliP )->cSerAlb + Str( ( cAlbCliP )->nNumAlb ) + ( cAlbCliP )->cSufAlb == cNumAlb .and. !( cAlbCliP )->( eof() )\n            nTotPag     += nEntAlbCli( cAlbCliP, cDiv, cDivRet )\n            ( cAlbCliP )->( dbSkip() )\n         end while\n      end if\n\n   end if\n\n   ( cAlbCliP )->( OrdSetFocus( nOrd ) )\n   ( cAlbCliP )->( dbGoTo( nRec ) )\n\n   if cDivRet != nil .and. cCodDiv != cDivRet\n      nTotPag           := nCnv2Div( nTotPag, cCodDiv, cDivRet, cDiv )\n      cPorDiv           := cPorDiv( cDivRet, cDiv ) // Picture de la divisa redondeada\n      nRouDiv           := nRouDiv( cDivRet, cDiv )\n   end if\n\n   nTotPag              := Round( nTotPag, nRouDiv )\n\n   if lPic\n      nTotPag           := Trans( nTotPag, cPorDiv )\n   end if\n\nRETURN ( nTotPag )\n\n//--------------------------------------------------------------------------//\n\nfunction nEntAlbCli( uAlbCliP, cDbfDiv, cDivRet, lPic )\n\n   local cDivPgo\n   local nRouDiv\n   local cPorDiv\n   local nTotRec\n\n   DEFAULT uAlbCliP  := dbfAlbCliP\n   DEFAULT cDbfDiv   := dbfDiv\n   DEFAULT cDivRet   := cDivEmp()\n   DEFAULT lPic      := .f.\n\n   if ValType( uAlbCliP ) == \"O\"\n      cDivPgo        := uAlbCliP:cDivPgo\n      nTotRec        := uAlbCliP:nImporte\n   else\n      cDivPgo        := ( uAlbCliP )->cDivPgo\n      nTotRec        := ( uAlbCliP )->nImporte\n   end if\n\n   nRouDiv           := nRouDiv( cDivPgo, cDbfDiv )\n   cPorDiv           := cPorDiv( cDivPgo, cDbfDiv )\n\n   nTotRec           := Round( nTotRec, nRouDiv )\n\n   if cDivRet != cDivPgo\n      nRouDiv        := nRouDiv( cDivRet, cDbfDiv )\n      cPorDiv        := cPorDiv( cDivRet, cDbfDiv )\n      nTotRec        := nCnv2Div( nTotRec, cDivPgo, cDivRet, cDbfDiv )\n   end if\n\nRETURN if( lPic, Trans( nTotRec, cPorDiv ), nTotRec )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION LoaCli( aGet, aTmp, nMode, oRieCli, oTlfCli )\n\n   local lValid      := .t.\n   local cNewCodCli  := aGet[ _CCODCLI ]:varGet()\n   local lChgCodCli  := ( Empty( cOldCodCli ) .or. cOldCodCli != cNewCodCli )\n\n	IF Empty( cNewCodCli )\n      Return .t.\n	ELSEIF At( \".\", cNewCodCli ) != 0\n      cNewCodCli     := PntReplace( aGet[_CCODCLI], \"0\", RetNumCodCliEmp() )\n	ELSE\n      cNewCodCli     := Rjust( cNewCodCli, \"0\", RetNumCodCliEmp() )\n	END IF\n\n   /*\n   Calculo del reisgo del cliente\n   */\n\n   if ( dbfClient )->( dbSeek( cNewCodCli ) )\n\n      /*\n      Asignamos el codigo siempre\n      */\n\n      aGet[ _CCODCLI ]:cText( ( dbfClient )->Cod )\n\n      if oTlfCli != nil\n         oTlfCli:SetText( ( dbfClient )->Telefono )\n      end if\n\n      /*\n      Color de fondo del cliente\n      */\n\n      if ( dbfClient )->nColor != 0\n         aGet[_CNOMCLI]:SetColor( , ( dbfClient )->nColor )\n      end if\n\n      if Empty( aGet[_CNOMCLI]:varGet() ) .or. lChgCodCli\n         aGet[_CNOMCLI]:cText( ( dbfClient )->Titulo )\n      end if\n\n      if Empty( aGet[_CDIRCLI]:varGet() ) .or. lChgCodCli\n         aGet[_CDIRCLI]:cText( ( dbfClient )->Domicilio )\n      end if\n\n      if Empty( aGet[ _CTLFCLI ]:varGet() ) .or. lChgCodCli\n         aGet[ _CTLFCLI ]:cText( ( dbfClient )->Telefono )\n      end if\n\n      if Empty( aGet[_CPOBCLI]:varGet() ) .or. lChgCodCli\n         aGet[_CPOBCLI]:cText( ( dbfClient )->Poblacion )\n      end if\n\n      if !Empty( aGet[_CPRVCLI] )\n         if Empty( aGet[_CPRVCLI]:varGet() ) .or. lChgCodCli\n            aGet[_CPRVCLI]:cText( ( dbfClient )->Provincia )\n         end if\n      end if\n\n      if !Empty( aGet[_CPOSCLI] )\n         if Empty( aGet[_CPOSCLI]:varGet() ) .or. lChgCodCli\n            aGet[_CPOSCLI]:cText( ( dbfClient )->CodPostal )\n         end if\n      end if\n\n      if !Empty( aGet[_CDNICLI] )\n         if Empty( aGet[_CDNICLI]:varGet() ) .or. lChgCodCli\n            aGet[_CDNICLI]:cText( ( dbfClient )->Nif )\n         end if\n      end if\n\n      if Empty( aTmp[_CCODGRP] ) .or. lChgCodCli\n         aTmp[_CCODGRP]    := ( dbfClient )->cCodGrp\n      end if\n     \n      if ( lChgCodCli )\n\n         /*\n         Cargamos la obra por defecto------------------------------------------\n         */\n\n         if !Empty( aGet[ _CCODOBR ] )\n\n            if dbSeekInOrd( cNewCodCli, \"lDefObr\", dbfObrasT )\n               aGet[ _CCODOBR ]:cText( ( dbfObrasT )->cCodObr )\n            else\n               aGet[ _CCODOBR ]:cText( Space( 10 ) )\n            end if\n\n            aGet[ _CCODOBR ]:lValid()\n\n         end if\n\n         /*\n         Calculo del reisgo del cliente-------------------------------------------\n         */\n\n         if oRieCli != nil\n            oStock:SetRiesgo( cNewCodCli, oRieCli, ( dbfClient )->Riesgo )\n         end if\n\n         aTmp[ _LMODCLI ]  := ( dbfClient )->lModDat\n\n      end if\n\n      if ( lChgCodCli )\n         aTmp[ _LOPERPV ]  := ( dbfClient )->lPntVer\n      end if\n\n      if nMode == APPD_MODE\n\n         aTmp[ _NREGIVA ]  := ( dbfClient )->nRegIva\n\n         /*\n         Si estamos a¤adiendo cargamos todos los datos del cliente\n         */\n\n         if Empty( aTmp[ _CSERALB ] )\n\n            if !Empty( ( dbfClient )->Serie )\n               aGet[ _CSERALB ]:cText( ( dbfClient )->Serie )\n            end if\n\n         else\n\n            if !Empty( ( dbfClient )->Serie )                .and.;\n               aTmp[ _CSERALB ] != ( dbfClient )->Serie      .and.;\n               ApoloMsgNoYes( \"La serie del cliente seleccionado es distinta a la anterior.\", \"¿Desea cambiar la serie?\" )\n               aGet[ _CSERALB ]:cText( ( dbfClient )->Serie )\n            end if\n\n         end if\n\n         if !Empty( aGet[_CCODALM] )\n            if ( Empty( aGet[_CCODALM]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodAlm )\n                aGet[_CCODALM]:cText( ( dbfClient )->cCodAlm )\n                aGet[_CCODALM]:lValid()\n            end if\n         end if\n\n         if !Empty( aGet[_CCODTAR] )\n            if ( Empty( aGet[_CCODTAR]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodTar )\n               aGet[_CCODTAR]:cText( ( dbfClient )->CCODTAR )\n               aGet[_CCODTAR]:lValid()\n            end if\n         end if\n\n         if ( Empty( aGet[_CCODPAGO]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->CodPago )\n            aGet[_CCODPAGO]:cText( (dbfClient)->CODPAGO )\n            aGet[_CCODPAGO]:lValid()\n         end if\n\n         /*\n         Si la forma de pago es un movimiento bancario le asignamos el banco y cuenta por defecto\n         */\n\n         if ( lChgCodCli .and. lBancoDefecto( ( dbfClient )->Cod, dbfCliBnc ) )\n\n            if !Empty( aGet[ _CBANCO ] )\n               aGet[ _CBANCO ]:cText( ( dbfCliBnc )->cCodBnc )\n               aGet[ _CBANCO ]:lValid()\n            end if\n\n            if !Empty( aGet[ _CENTBNC ] )\n               aGet[ _CENTBNC ]:cText( ( dbfCliBnc )->cEntBnc )\n               aGet[ _CENTBNC ]:lValid()\n            end if\n\n            if !Empty( aGet[ _CSUCBNC ] )\n               aGet[ _CSUCBNC ]:cText( ( dbfCliBnc )->cSucBnc )\n               aGet[ _CSUCBNC ]:lValid()\n            end if\n\n            if !Empty( aGet[ _CDIGBNC ] )\n               aGet[ _CDIGBNC ]:cText( ( dbfCliBnc )->cDigBnc )\n               aGet[ _CDIGBNC ]:lValid()\n            end if\n\n            if !Empty( aGet[ _CCTABNC ] )\n               aGet[ _CCTABNC ]:cText( ( dbfCliBnc )->cCtaBnc )\n               aGet[ _CCTABNC ]:lValid()\n            end if\n\n         end if\n\n         if !Empty( aGet[_CCODAGE] )\n            if ( Empty( aGet[_CCODAGE]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cAgente )\n                aGet[_CCODAGE]:cText( (dbfClient)->CAGENTE )\n                aGet[_CCODAGE]:lValid()\n            end if\n         end if\n\n         if ( Empty( aGet[_CCODRUT]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodRut )\n            aGet[_CCODRUT]:cText( ( dbfClient)->CCODRUT )\n            aGet[_CCODRUT]:lValid()\n         end if\n\n         if ( Empty( aGet[ _NTARIFA ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->nTarifa )\n             aGet[ _NTARIFA ]:cText( ( dbfClient )->nTarifa )\n         end if\n\n         if !Empty( aGet[ _CCODTRN ] ) .and. ( Empty( aGet[ _CCODTRN ]:varGet() ) .or. lChgCodCli ) .and. !Empty( ( dbfClient )->cCodTrn )\n            aGet[ _CCODTRN ]:cText( ( dbfClient )->cCodTrn )\n            aGet[ _CCODTRN ]:lValid()\n         end if\n\n\n         if lChgCodCli\n\n            aGet[ _LRECARGO ]:Click( ( dbfClient )->lReq ):Refresh()\n\n            aGet[ _LOPERPV  ]:Click( ( dbfClient )->lPntVer ):Refresh()\n\n            /*\n            Retenciones desde la ficha de cliente----------------------------------\n\n            if !Empty( aGet[ _NTISATT ] )\n               aGet[ _NTISATT  ]:Select( ( dbfClient )->nTipRet )\n            else\n               aTmp[ _NTISATT  ] := ( dbfClient )->nTipRet\n            end if\n\n            if !Empty( aGet[ _NPCTRET ] )\n               aGet[ _NPCTRET  ]:cText( ( dbfClient )->nPctRet )\n            else\n               aTmp[ _NPCTRET  ] := ( dbfClient )->nPctRet\n            end if\n            */\n\n            /*\n            Descuentos desde la ficha de cliente----------------------------------\n            */\n\n            if !Empty( aGet[ _CDTOESP ] )\n               aGet[ _CDTOESP ]:cText( ( dbfClient )->cDtoEsp )\n            else\n               aTmp[ _CDTOESP ]  := ( dbfClient )->cDtoEsp\n            end if\n\n            if !Empty( aGet[ _NDTOESP ] )\n               aGet[ _NDTOESP ]:cText( ( dbfClient )->nDtoEsp )\n            else\n               aTmp[ _NDTOESP ]  := ( dbfClient )->nDtoEsp\n            end if\n\n            if !Empty( aGet[ _CDPP    ] )\n               aGet[ _CDPP    ]:cText( ( dbfClient )->cDpp )\n            else\n               aTmp[ _CDPP    ]  := ( dbfClient )->cDpp\n            end if\n\n            if !Empty( aGet[ _NDPP    ] )\n               aGet[ _NDPP    ]:cText( ( dbfClient )->nDpp )\n            else\n               aTmp[ _NDPP    ]  := ( dbfClient )->nDpp\n            end if\n\n            if !Empty( aGet[ _CDTOUNO ] )\n               aGet[ _CDTOUNO ]:cText( ( dbfClient )->cDtoUno )\n            else\n               aTmp[ _CDTOUNO ]  := ( dbfClient )->cDtoUno\n            end if\n\n            if !Empty( aGet[ _CDTODOS ] )\n               aGet[ _CDTODOS ]:cText( ( dbfClient )->cDtoDos )\n            else\n               aTmp[ _CDTODOS ]  := ( dbfClient )->cDtoDos\n            end if\n\n            if !Empty( aGet[ _NDTOUNO ] )\n               aGet[ _NDTOUNO ]:cText( ( dbfClient )->nDtoCnt )\n            else\n               aTmp[ _NDTOUNO ]  := ( dbfClient )->nDtoCnt\n            end if\n\n            if !Empty( aGet[ _NDTODOS ] )\n               aGet[ _NDTODOS ]:cText( ( dbfClient )->nDtoRap )\n            else\n               aTmp[ _NDTODOS ]  := ( dbfClient )->nDtoRap\n            end if\n\n            aTmp[ _NSBRATP ]  := ( dbfClient )->nSbrAtp\n\n            aTmp[ _NDTOATP ]  := ( dbfClient )->nDtoAtp\n\n         end if\n\n      end if\n\n      if lChgCodCli\n\n         if ( dbfClient )->lMosCom .and. !Empty( ( dbfClient )->mComent )\n            MsgStop( Trim( ( dbfClient )->mComent ) )\n         end if\n\n#ifndef __PDA__\n         ShowInciCliente( ( dbfClient )->Cod, dbfCliInc )\n#endif\n\n         if ( dbfClient )->lBlqCli\n            msgStop( \"Cliente bloqueado, no se pueden realizar operaciones de venta\" , \"Imposible archivar como albarán\" )\n         end if\n\n         if !( dbfClient )->lChgPre\n            msgStop( \"Este cliente no tiene autorización para venta a credito\", \"Imposible archivar como albarán\" )\n         end if\n\n\n\n      end if\n\n      cOldCodCli  := ( dbfClient )->Cod\n\n      lValid      := .t.\n\n	ELSE\n\n		msgStop( \"Cliente no encontrado\" )\n\n      lValid      := .f.\n\n	END IF\n\nRETURN lValid\n\n//----------------------------------------------------------------------------//\n\n/*\nEstudiamos la posiblidades que se pueden dar en una linea de detalle\n*/\n\nSTATIC FUNCTION SetDlgMode( aTmp, aGet, oFld, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oGet2, oTotal, aTmpAlb, oRentLin )\n\n   if !lUseCaj()\n      aGet[ _NCANENT ]:Hide()\n   else\n      if !Empty( aGet[ _NCANENT ] )\n         aGet[ _NCANENT ]:SetText( cNombreCajas() )\n      end if\n   end if\n\n   aGet[ _NUNICAJA ]:SetText( cNombreUnidades() )\n\n   if aGet[ _NVALIMP ] != nil\n\n      if !uFieldEmpresa( \"lUseImp\" )\n         aGet[ _NVALIMP ]:Hide()\n      else\n         if !uFieldEmpresa( \"lModImp\" )\n            aGet[ _NVALIMP ]:Disable()\n         end if\n      end if\n\n   end if\n\n   if !lTipMov()\n\n      if !Empty( aGet[ _CTIPMOV ] )\n         aGet[ _CTIPMOV ]:hide()\n      end if\n\n      if !Empty( oGet2 )\n         oGet2:hide()\n      end if\n\n   end if\n\n   if aGet[ _NIMPTRN ] != nil\n      if !uFieldEmpresa( \"lUsePor\", .f. )\n         aGet[ _NIMPTRN ]:Hide()\n      end if\n   end if\n\n   if aGet[ _NPNTVER ] != nil\n      if !uFieldEmpresa( \"lUsePnt\", .f. ) .or. !aTmpAlb[ _LOPERPV ]\n         aGet[ _NPNTVER ]:Hide()\n      end if\n   end if\n\n   if aGet[ _NDTODIV ] != nil\n      if !uFieldEmpresa( \"lDtoLin\", .f. )\n         aGet[ _NDTODIV ]:Hide()\n      end if\n   end if\n\n\n   if oRentLin != nil .and. oUser():lNotRentabilidad()\n      oRentLin:Hide()\n   end if\n\n   if aTmp[ __LALQUILER ]\n      aGet[ _NSATUNIT ]:Hide()\n      aGet[ _NSATALQ  ]:Show()\n   end if\n\n   do case\n   case nMode == APPD_MODE\n\n      aTmp[ _CREF    ]  := Space( 32 )\n      aTmp[ _LIVALIN ]  := aTmpAlb[ _LIVAINC ]\n\n      aGet[ _NCANENT ]:cText( 1 )\n      aGet[ _NUNICAJA]:cText( 1 )\n\n      if !Empty( aGet[ _NNUMLIN ] )\n         aGet[ _NNUMLIN ]:cText( nLastNum( dbfTmpLin )  )\n      end if\n\n      aGet[ _CALMLIN ]:cText( aTmpAlb[ _CCODALM ] )\n\n      if lTipMov() .and. aGet[ _CTIPMOV ] != nil\n         aGet[ _CTIPMOV ]:cText( cDefVta() )\n      end if\n\n      if !Empty( aGet[ _LCONTROL] )\n         aGet[ _LCONTROL]:Click( .f. )\n      end if\n\n      if !Empty( oStkAct )\n\n         if !uFieldEmpresa( \"lNStkAct\" )\n            oStkAct:Show()\n            oStkAct:cText( 0 )\n         else\n            oStkAct:Hide()\n         end if\n\n      end if\n\n      aGet[ _CDETALLE]:Show()\n      aGet[ _MLNGDES ]:Hide()\n\n      if !Empty( aGet[ _CLOTE ] )\n         aGet[ _CLOTE ]:Hide()\n      end if\n\n      if !Empty( aGet[ _DFECCAD ] )\n         aGet[ _DFECCAD ]:Hide()\n      end if\n\n      if aTmpAlb[ _NREGIVA ] <= 1\n         aGet[ _NIVA ]:cText( nIva( dbfIva, cDefIva() ) )\n      end if\n\n   case ( nMode == DUPL_MODE .or. nMode == EDIT_MODE .OR. nMode == ZOOM_MODE )\n\n      if aTmp[ _LLOTE ]\n\n         if !Empty( aGet[ _CLOTE ] )\n            aGet[ _CLOTE ]:Show()\n         end if\n\n         if !Empty( aGet[ _DFECCAD ] )\n            aGet[ _DFECCAD ]:Show()\n         end if\n\n      else\n\n         if !Empty( aGet[ _CLOTE ] )\n             aGet[ _CLOTE ]:Hide()\n         end if\n\n         if !Empty( aGet[ _DFECCAD ] )\n            aGet[ _DFECCAD ]:Hide()\n         end if\n\n      end if\n\n      if !Empty( aTmp[_CREF] )\n         aGet[ _CDETALLE ]:show()\n         aGet[ _MLNGDES  ]:hide()\n      else\n         aGet[ _CDETALLE ]:hide()\n         aGet[ _MLNGDES  ]:show()\n      end if\n\n   if !Empty( oStock )\n\n      oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n\n      if uFieldEmpresa( \"lNStkAct\" )\n         oStkAct:Hide()\n      end if\n\n   end if\n\n   end case\n\n   if !Empty( aTmp[_CCODPR1 ] )\n\n      if !Empty( aGet[ _CVALPR1 ] )\n         aGet[ _CVALPR1 ]:Show()\n         aGet[ _CVALPR1 ]:lValid()\n      end if\n      if !Empty( oSayPr1 )\n         oSayPr1:Show()\n         oSayPr1:SetText( retProp( aTmp[_CCODPR1], dbfPro ) )\n      end if\n      if !Empty( oSayVp1 )\n         oSayVp1:Show()\n      end if\n\n   else\n\n      if !Empty( aGet[ _CVALPR1 ] )\n         aGet[_CVALPR1 ]:hide()\n      end if\n      if !Empty( oSayPr1 )\n         oSayPr1:hide()\n      end if\n      if !Empty( oSayVp1 )\n         oSayVp1:hide()\n      end if\n\n   end if\n\n   if !Empty( aTmp[_CCODPR2 ] )\n\n      if !Empty( aGet[ _CVALPR2 ] )\n         aGet[ _CVALPR2 ]:Show()\n         aGet[ _CVALPR2 ]:lValid()\n      end if\n      if !Empty( oSayPr2 )\n         oSayPr2:Show()\n         oSayPr2:SetText( retProp( aTmp[ _CCODPR2 ], dbfPro ) )\n      end if\n      if !Empty( oSayVp2 )\n         oSayVp2:Show()\n      end if\n\n   else\n\n      if !Empty( aGet[ _CVALPR2 ] )\n         aGet[_CVALPR2 ]:hide()\n      end if\n      if !Empty( oSayPr2 )\n         oSayPr2:hide()\n      end if\n      if !Empty( oSayVp2 )\n         oSayVp2:hide()\n      end if\n\n   end if\n\n   /*\n   Ocultamos el precio de costo------------------------------------------------\n   */\n\n   if !lAccArticulo() .or. oUser():lNotCostos()\n\n      if !Empty( aGet[ _NCOSDIV ] )\n         aGet[ _NCOSDIV ]:Hide()\n      end if\n\n   end if\n\n   /*\n   Solo pueden modificar los precios los administradores-----------------------\n   */\n\n   if ( Empty( aTmp[ _NSATUNIT ] ) .or. lUsrMaster() .or. oUser():lCambiarPrecio() ) .and. nMode != ZOOM_MODE\n\n      if !Empty( aGet[ _NSATUNIT ] )\n         aGet[ _NSATUNIT ]:HardEnable()\n      end if\n\n      aGet[ _NIMPTRN ]:HardEnable()\n\n      if !Empty( aGet[ _NPNTVER ] )\n         aGet[ _NPNTVER ]:HardEnable()\n      end if\n\n      aGet[ _NDTO     ]:HardEnable()\n      aGet[ _NDTOPRM  ]:HardEnable()\n\n      if !Empty( aGet[ _NDTODIV ] )\n         aGet[ _NDTODIV  ]:HardEnable()\n      end if\n\n   else\n\n      aGet[ _NSATUNIT ]:HardDisable()\n      aGet[ _NIMPTRN  ]:HardDisable()\n\n      if !Empty( aGet[ _NPNTVER ] )\n         aGet[ _NPNTVER  ]:HardDisable()\n      end if\n\n      aGet[ _NDTO     ]:HardDisable()\n      aGet[ _NDTOPRM  ]:HardDisable()\n\n      if !Empty( aGet[ _NDTODIV  ] )\n          aGet[ _NDTODIV ]:HardDisable()\n      end if\n\n   end if\n\n   /*\n   Ocultamos las tres unidades de medicion-------------------------------------\n   */\n\n   if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] )\n      aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:Hide()\n   end if\n\n   if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] )\n      aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:Hide()\n   end if\n\n   if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] )\n      aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:Hide()\n   end if\n\n   if oUndMedicion:oDbf:Seek( aTmp[ _CUNIDAD ] )\n\n      if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 1 .and. !Empty( oUndMedicion:oDbf:cTextoDim1 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedUno\" ) ) ]:Show()\n      end if\n\n      if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 2 .and. !Empty( oUndMedicion:oDbf:cTextoDim2 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedDos\" ) ) ]:Show()\n      end if\n\n      if !Empty( aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ] ) .and. oUndMedicion:oDbf:nDimension >= 3 .and. !Empty( oUndMedicion:oDbf:cTextoDim3 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )\n         aGet[ ( dbfAlbCliL )->( fieldpos( \"nMedTre\" ) ) ]:Show()\n      end if\n\n   end if\n\n   /*\n   Mostramos u ocultamos las tarifas por líneas--------------------------------\n   */\n\n   if Empty( aTmp[ _NTARLIN ] )\n      if !Empty( aGet[ _NTARLIN ] )\n         aGet[ _NTARLIN ]:cText( aTmpAlb[ _NTARIFA ] )\n      else\n         aTmp[ _NTARLIN ]     := aTmpAlb[ _NTARIFA ]\n      end if\n   end if\n\n   if !Empty( aGet[ _NTARLIN ] )\n      if !uFieldEmpresa( \"lPreLin\" )\n         aGet[ _NTARLIN ]:Hide()\n      else\n         aGet[ _NTARLIN ]:Show()\n      end if\n   end if\n\n   /*\n   Focus y validaci¢n----------------------------------------------------------\n   */\n\n   if !Empty( oFld )\n      oFld:SetOption( 1 )\n   end if\n\n   if !Empty( oTotal )\n      oTotal:cText( 0 )\n   end if\n\n   if !Empty( aGet[ _CTIPMOV ] )\n      aGet[ _CTIPMOV ]:lValid()\n   end if\n\n   if !Empty( aGet[ _CALMLIN ] )\n      aGet[ _CALMLIN ]:lValid()\n   end if\n\nReturn nil\n\n//---------------------------------------------------------------------------//\n\n/*\nCalcula totales en las lineas de Detalle\n*/\n\nSTATIC FUNCTION lCalcDeta( aTmp, aTmpAlb, nDouDiv, oTotal, oMargen, cCodDiv, lTotal )\n\n   local nCalculo\n   local nUnidades\n   local nCosto\n   local nMargen\n   local nRentabilidad\n   local nBase    := 0\n\n   DEFAULT lTotal := .f.\n\n   if aTmp[ __LALQUILER ]\n      nCalculo    := aTmp[ _NSATALQ  ]\n   else\n      nCalculo    := aTmp[ _NSATUNIT  ]\n   end if\n\n   nCalculo       -= aTmp[ _NDTODIV  ]\n\n   /*\n   Unidades\n   */\n\n   nUnidades      := nTotNAlbCli( aTmp )\n\n   /*\n   IVMH\n   */\n\n   if !aTmp[ _LIVALIN ]\n      if aTmp[ _LVOLIMP ]\n         nCalculo += aTmp[ _NVALIMP ] * NotCero( aTmp[ _NVOLUMEN ] )\n      else\n         nCalculo += aTmp[ _NVALIMP ]\n      end if\n   end if\n\n   nCalculo       *= nUnidades\n\n   /*\n   Transporte------------------------------------------------------------------\n   */\n\n   if aTmp[ _NIMPTRN ] != 0\n      nCalculo     += aTmp[ _NIMPTRN ] * nUnidades\n   end if\n\n   /*\n   Descuentos------------------------------------------------------------------\n   */\n\n   if aTmp[ _NDTO    ] != 0\n      nCalculo    -= nCalculo * aTmp[ _NDTO    ] / 100\n   end if\n\n   if aTmp[ _NDTOPRM ] != 0\n      nCalculo    -= nCalculo * aTmp[ _NDTOPRM ] / 100\n   end if\n\n   /*\n   Calculo del margen y rentabilidad-------------------------------------------\n   */\n\n   nCosto            := nUnidades * aTmp[ _NCOSDIV ]\n\n   if aTmp[ _LIVALIN ] .and. aTmp[ _NIVA ] != 0\n      nMargen        := nCalculo - Round( nCalculo / ( 100 / aTmp[ _NIVA ] + 1 ), nRouDiv )\n   else\n      nMargen        := nCalculo\n   end if\n\n   nBase             := nMargen\n\n   nMargen           -= nCosto\n\n   if nCalculo == 0\n      nRentabilidad  := 0\n   else\n      nRentabilidad  := nRentabilidad( nCalculo, 0, nCosto )\n   end if\n\n   /*\n   Punto Verde-----------------------------------------------------------------\n   */\n\n   if aTmpAlb[ _LOPERPV ]\n      nCalculo       += nUnidades * aTmp[ _NPNTVER ]\n   end if\n\n   if !Empty( oTotal )\n      oTotal:cText( Round( nCalculo, nDouDiv ) )\n   end if\n\n   if oMargen != nil\n      oMargen:cText( AllTrim( Trans( nMargen, cPorDiv ) + AllTrim( cSimDiv( cCodDiv, dbfDiv ) ) + \" : \" + AllTrim( Trans( nRentabilidad, \"999.99\" ) ) + \"%\" ) )\n   end if\n\n   if !Empty( oComisionLinea )\n      oComisionLinea:cText( Round( ( nBase * aTmp[ _NCOMAGE ] / 100 ), nRouDiv ) )\n   end if\n\nRETURN ( if( !lTotal, .t., nCalculo ) )\n\n//--------------------------------------------------------------------------//\n\nFUNCTION nDtoUAlbCli( dbfTmpLin, nDec, nVdv )\n\n   local nCalculo := ( dbfTmpLin )->nDtoDiv\n\n   DEFAULT nDec   := 0\n   DEFAULT nVdv   := 1\n\n	IF nVdv != 0\n      nCalculo    := ( dbfTmpLin )->nDtoDiv / nVdv\n	END IF\n\nRETURN ( round( nCalculo, nDec ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para A¤adir lineas de detalle a un albaran\n*/\n\nSTATIC FUNCTION AppDeta( oBrwLin, bEdtDet, aTmpAlb, lTot, nMode, cCodArt )\n\n   DEFAULT lTot := .f.\n\n   WinAppRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmpAlb )\n\nRETURN ( RecalculaTotal( aTmpAlb ) )\n\n//---------------------------------------------------------------------------//\n\nfunction nTotFAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\n   local nCalculo := 0\n\n   nCalculo       += nTotLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n   nCalculo       += nIvaLAlbCli( cAlbCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )\n\nreturn ( nCalculo )\n\n//----------------------------------------------------------------------------//\n\nFUNCTION lFacAlbCli( cAlbCli, uAlbCliT )\n\n   local lFacAlb  := .f.\n\n   if ValType( uAlbCliT ) == \"C\"\n\n      if ( uAlbCliT )->( dbSeek( cAlbCli ) )\n         lFacAlb  := ( uAlbCliT )->lFacturado\n      end if\n\n   else\n\n      if uAlbCliT:Seek( cAlbCli )\n         lFacAlb  := uAlbCliT:lFacturado\n      end if\n\n   end if\n\nRETURN ( lFacAlb )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION LoaArt( cCodArt, aTmp, aGet, aTmpAlb, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, nMode, lFocused )\n\n   local nDtoAge\n   local cCodFam\n   local cPrpArt\n   local nCosPro\n   local nPrePro     := 0\n   local nImpAtp     := 0\n   local nImpOfe     := 0\n   local lChgCodArt  := ( Empty( cOldCodArt ) .or. Rtrim( cOldCodArt ) != Rtrim( cCodArt ) )\n   local nPosComa\n   local cProveedor\n   local nTarOld     := aTmp[ _NTARLIN ]\n   local nNumDto     := 0\n\n   DEFAULT lFocused  := .t.\n\n   if Empty( cCodArt )\n\n      if lRetCodArt()\n         MsgStop( \"No se pueden añadir líneas sin codificar\" )\n         return .f.\n      end if\n\n      if Empty( aTmp[ _NIVA ] )\n         aGet[ _NIVA ]:bWhen      := {|| .t. }\n      end if\n\n      if !Empty( aGet[ _CDETALLE ] )\n          aGet[ _CDETALLE ]:cText( Space( 50 ) )\n      end if\n\n      aGet[_CDETALLE]:bWhen      := {|| .t. }\n      aGet[_CDETALLE]:Hide()\n\n      if !Empty( aGet[ _MLNGDES ] )\n          aGet[ _MLNGDES ]:Show()\n      end if\n\n      if lFocused .and. !Empty( aGet[ _MLNGDES ] )\n        aGet[ _MLNGDES ]:SetFocus()\n      end if\n\n   else\n\n      if lModIva()\n         aGet[ _NIVA ]:bWhen      := {|| .t. }\n      else\n         aGet[ _NIVA ]:bWhen      := {|| .f. }\n      end if\n\n      /*\n      Primero buscamos por codigos de barra y por referencia de proveedor\n      */\n\n      if \",\" $ cCodArt\n         nPosComa                := At( \",\", cCodArt )\n         cProveedor              := RJust( Left( cCodArt, nPosComa - 1 ), \"0\", RetNumCodPrvEmp() )\n         cCodArt                 := cSeekProveedor( cCodArt, dbfArtPrv )\n      else\n         cCodArt                 := cSeekCodebar( cCodArt, dbfCodebar, dbfArticulo )\n      end if\n\n      /*\n      Ahora buscamos por el codigo interno\n      */\n\n      if ( dbfArticulo )->( dbSeek( cCodArt ) ) .or. ( dbfArticulo )->( dbSeek( Upper( cCodArt ) ) )\n\n         if ( dbfArticulo )->lObs\n            MsgStop( \"Artículo catalogado como obsoleto\" )\n            return .f.\n         end if\n\n         if ( lChgCodArt )\n\n            cCodArt              := ( dbfArticulo )->Codigo\n            aTmp[ _CREF   ]      := cCodArt\n            aGet[ _CREF   ]:cText( cCodArt )\n\n            if ( dbfArticulo )->lMosCom .and. !Empty( ( dbfArticulo )->mComent )\n               MsgStop( Trim( ( dbfArticulo )->mComent ) )\n            end if\n\n            if !Empty( cProveedor )\n               aTmp[ _CCODPRV ]  := cProveedor\n               aTmp[ _CNOMPRV ]  := AllTrim( RetProvee( cProveedor ) )\n               aTmp[ _CREFPRV ]  := Padr( cRefPrvArt( cCodArt, Padr( cProveedor, 12 ) , dbfArtPrv ), 18 )\n            else\n               aTmp[ _CCODPRV ]  := ( dbfArticulo )->cPrvHab\n               aTmp[ _CNOMPRV ]  := AllTrim( RetProvee( ( dbfArticulo )->cPrvHab ) )\n               aTmp[ _CREFPRV ]  := Padr( cRefPrvArt( cCodArt, ( dbfArticulo )->cPrvHab , dbfArtPrv ), 18 )\n            end if\n\n            aGet[_CDETALLE ]:show()\n            aGet[_MLNGDES  ]:hide()\n\n            aGet[_CDETALLE ]:cText( ( dbfArticulo )->Nombre )\n\n            /*\n            Descripciones largas--------------------------------------------------\n            */\n\n            if aGet[ _MLNGDES ] != nil\n               aGet[ _MLNGDES ]:cText( ( dbfArticulo )->Descrip )\n            else\n               aTmp[ _MLNGDES ] := ( dbfArticulo )->Descrip\n            end if\n\n            if !Empty( aGet[ _DESCRIP ] )\n               aGet[ _DESCRIP ]:cText( ( dbfArticulo )->Descrip )\n            else\n               aTmp[ _DESCRIP ]     := ( dbfArticulo )->Descrip\n            end if\n\n            /*\n            Peso y volumen\n            -------------------------------------------------------------------\n            */\n\n            if !Empty( aGet[ _NPESOKG ] )\n               aGet[ _NPESOKG  ]:cText( ( dbfArticulo )->nPesoKg )\n            else\n               aGet[ _NPESOKG  ] := ( dbfArticulo )->nPesoKg\n            end if\n\n            if !Empty( aGet[ _CPESOKG ] )\n                aGet[ _CPESOKG ]:cText( ( dbfArticulo )->cUndDim )\n            else\n                aGet[ _CPESOKG ] := ( dbfArticulo )->cUndDim\n            end if\n\n            if !Empty( aGet[ _NVOLUMEN ] )\n               aGet[ _NVOLUMEN ]:cText( ( dbfArticulo )->nVolumen )\n            else\n               aGet[ _NVOLUMEN ] := ( dbfArticulo )->nVolumen\n            end if\n\n            if !Empty( aGet[ _CUNIDAD ] )\n                aGet[ _CUNIDAD ]:cText( ( dbfArticulo )->cUnidad )\n                aGet[ _CUNIDAD ]:lValid()\n            else\n                aTmp[ _CUNIDAD ] := ( dbfArticulo )->cUnidad\n            end if\n\n            if !Empty( aGet[ _CVOLUMEN ] )\n                aGet[ _CVOLUMEN ]:cText( ( dbfArticulo )->cVolumen )\n            else\n                aTmp[ _CVOLUMEN ]:= ( dbfArticulo )->cVolumen\n            end if\n\n            /*\n            Lotes\n            -------------------------------------------------------------------\n            */\n\n            if ( dbfArticulo )->lLote\n\n               if !Empty( aGet[ _CLOTE ] )\n\n                  aGet[ _CLOTE ]:Show()\n\n                  if Empty( aGet[ _CLOTE ]:VarGet() )\n                     aGet[ _CLOTE ]:cText( ( dbfArticulo )->cLote )\n                     aGet[ _CLOTE ]:lValid()\n                  end if\n\n               else\n\n                  if Empty( aTmp[ _CLOTE ] )\n                     aTmp[ _CLOTE ] := ( dbfArticulo )->cLote\n                  end if\n\n               end if\n\n               aTmp[ _LLOTE ] := ( dbfArticulo )->lLote\n\n               if !Empty( aGet[ _DFECCAD ] )\n\n                  aGet[ _DFECCAD ]:Show()\n\n                  if Empty( aGet[ _DFECCAD ]:VarGet() )\n                     aGet[ _DFECCAD ]:cText( dFechaCaducidadLote( aTmp[ _CREF ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], dbfAlbPrvL, dbfFacPrvL ) )\n                  end if\n\n               end if\n\n            else\n\n               if !Empty( aGet[ _CLOTE ] )\n                  aGet[ _CLOTE ]:Hide()\n               end if\n\n               if !Empty( aGet[ _DFECCAD ] )\n                  aGet[ _DFECCAD ]:Hide()\n               end if\n\n            end if\n\n            /*\n            Cogemos las familias y los grupos de familias----------------------\n            */\n\n            cCodFam              := ( dbfArticulo )->Familia\n\n            if !Empty( cCodFam )\n\n               if aGet[ _CCODFAM ] != nil\n                  aGet[ _CCODFAM ]:cText( cCodFam )\n                  aGet[ _CCODFAM ]:lValid()\n               else\n                  aTmp[ _CCODFAM ]  := cCodFam\n               end if\n\n               if aGet[ _CGRPFAM ] != nil\n                  aGet[ _CGRPFAM ]:cText( cGruFam( cCodFam, dbfFamilia ) )\n                  aGet[ _CGRPFAM ]:lValid()\n               else\n                  aTmp[ _CGRPFAM ]  := cGruFam( cCodFam, dbfFamilia )\n               end if\n\n               if aGet[ _CCODFRA ] != nil\n                  aGet[ _CCODFRA ]:cText( cCodFra( cCodFam, dbfFamilia ) )\n                  aGet[ _CCODFRA ]:lValid()\n               else\n                  aTmp[ _CCODFRA ]  := cCodFra( cCodFam, dbfFamilia )\n               end if\n\n            else\n\n               if aGet[ _CCODFAM ] != nil\n                  aGet[ _CCODFAM ]:cText( Space( 8 ) )\n                  aGet[ _CCODFAM ]:lValid()\n               end if\n\n               if aGet[ _CGRPFAM ] != nil\n                  aGet[ _CGRPFAM ]:cText( Space( 3 ) )\n                  aGet[ _CGRPFAM ]:lValid()\n               end if\n\n               if aGet[ _CCODFRA ] != nil\n                  aGet[ _CCODFRA ]:cText( Space( 3 ) )\n                  aGet[ _CCODFRA ]:lValid()\n               end if\n\n            end if\n\n            /*\n            Tratamientos kits-----------------------------------------------------\n            */\n\n            if ( dbfArticulo )->lKitArt\n\n               aTmp[ _LKITART ]     := ( dbfArticulo )->lKitArt                        // Marcamos como padre del kit\n               aTmp[ _LIMPLIN ]     := lImprimirCompuesto( ( dbfArticulo )->Codigo, dbfArticulo ) // 1 Todos, 2 Compuesto\n               aTmp[ _LKITPRC ]     := lPreciosCompuestos( ( dbfArticulo )->Codigo, dbfArticulo ) // 1 Todos, 2 Compuesto\n\n               if lStockCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )\n\n                  if aGet[ _NCTLSTK ] != nil\n                     aGet[ _NCTLSTK ]:SetOption( ( dbfArticulo )->nCtlStock )\n                  else\n                     aTmp[ _NCTLSTK ]  := ( dbfArticulo )->nCtlStock\n                  end if\n\n               else\n\n                  if aGet[ _NCTLSTK ] != nil\n                     aGet[ _NCTLSTK ]:SetOption( STOCK_NO_CONTROLAR )\n                  else\n                     aTmp[ _NCTLSTK ]  := STOCK_NO_CONTROLAR\n                  end if\n\n               end if\n\n            else\n\n               aTmp[ _LIMPLIN ]     := .f.\n\n               if aGet[ _NCTLSTK ] != nil\n                  aGet[ _NCTLSTK ]:SetOption( ( dbfArticulo )->nCtlStock )\n               else\n                  aTmp[ _NCTLSTK ]  := ( dbfArticulo )->nCtlStock\n               end if\n\n            end if\n\n            /*\n            Preguntamos si el regimen de impuestos es distinto de Exento-------------\n            */\n\n            if aTmpAlb[ _NREGIVA ] <= 1\n               aGet[ _NIVA ]:cText( nIva( dbfIva, ( dbfArticulo )->TipoIva ) )\n               aTmp[ _NREQ ]        := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n            end if\n\n            /*\n            Ahora recogemos el impuesto especial si lo hay---------------------\n            */\n\n            if !Empty( ( dbfArticulo )->cCodImp )\n               aTmp[ _CCODIMP ]     := ( dbfArticulo )->cCodImp\n               aGet[ _NVALIMP ]:cText( oNewImp:nValImp( ( dbfArticulo )->cCodImp ) )\n\n               aTmp[ _LVOLIMP ]     := RetFld( ( dbfArticulo )->cCodImp, oNewImp:oDbf:cAlias, \"lIvaVol\" )\n\n            end if\n\n            if ( dbfArticulo )->nCajEnt != 0\n               aGet[_NCANENT ]:cText( ( dbfArticulo )->nCajEnt )\n            end if\n\n            if ( dbfArticulo )->nUniCaja != 0\n               aGet[_NUNICAJA]:cText( ( dbfArticulo )->nUniCaja )\n            end if\n\n            /*\n            Meses de grantia---------------------------------------------------\n            */\n            if !Empty( aGet[ _NMESGRT ] )\n               aGet[ _NMESGRT ]:cText( ( dbfArticulo )->nMesGrt )\n            end if\n\n            /*\n            Si la comisi¢n del articulo hacia el agente es distinto de cero----\n            */\n\n            aGet[ _NCOMAGE ]:cText( aTmpAlb[ _NPCTCOMAGE ] )\n\n            /*\n            Tomamos el valor del stock y anotamos si nos dejan vender sin stock\n            */\n\n            if oStkAct != nil .and. aTmp[ _NCTLSTK ] <= 1\n               oStock:nPutStockActual( cCodArt, aTmp[ _CALMLIN ], , , , aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n            end if\n\n            /*\n            No permitir venta sin stock----------------------------------------\n            */\n\n            aTmp[ _LMSGVTA ]     := ( dbfArticulo )->lMsgVta\n            aTmp[ _LNOTVTA ]     := ( dbfArticulo )->lNotVta\n\n            if ( dbfArticulo )->lFacCnv\n               aTmp[ _NFACCNV ]  := ( dbfArticulo )->nFacCnv\n            end if\n\n            /*\n            Tipo de articulo---------------------------------------------------\n            */\n\n            if !Empty( aGet[_CCODTIP ] )\n               aGet[_CCODTIP ]:cText( ( dbfArticulo )->cCodTip )\n            end if\n\n            /*\n            Imagen del producto------------------------------------------------\n            */\n\n            if !Empty( aGet[ _CIMAGEN ] )\n               aGet[ _CIMAGEN ]:cText( ( dbfArticulo )->cImagen )\n            else\n               aTmp[ _CIMAGEN ]     := ( dbfArticulo )->cImagen\n            end if\n\n            if !Empty( bmpImage )\n               if !Empty( aTmp[ _CIMAGEN ] )\n                  bmpImage:Show()\n                  bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ _CIMAGEN ] ) )\n               else\n                  bmpImage:Hide()\n               end if\n            end if\n\n            /*\n            Código de la frase publicitaria------------------------------------\n            */\n\n            if !Empty( ( dbfArticulo )->cCodFra )\n\n               if aGet[ _CCODFRA ] != nil\n                  aGet[ _CCODFRA ]:cText( ( dbfArticulo )->cCodFra )\n                  aGet[ _CCODFRA ]:lValid()\n               else\n                  aTmp[ _CCODFRA ]  := ( dbfArticulo )->cCodFra\n               end if\n\n            end if\n\n            /*\n            Buscamos la familia del articulo y anotamos las propiedades--------\n            */\n\n            aTmp[_CCODPR1 ]   := ( dbfArticulo )->cCodPrp1\n            aTmp[_CCODPR2 ]   := ( dbfArticulo )->cCodPrp2\n\n            if !Empty( aTmp[ _CCODPR1 ] )\n\n               if aGet[ _CVALPR1 ] != nil\n                  aGet[ _CVALPR1 ]:Show()\n                  if lFocused\n                     aGet[ _CVALPR1 ]:SetFocus()\n                  end if\n               end if\n\n               if oSayPr1 != nil\n                  oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )\n                  oSayPr1:show()\n               end if\n\n               if oSayVp1 != nil\n                  oSayVp1:SetText( \"\" )\n                  oSayVp1:Show()\n               end if\n\n            else\n\n               if !Empty( aGet[ _CVALPR1 ] )\n                  aGet[ _CVALPR1 ]:hide()\n               end if\n\n               if !Empty( oSayPr1 )\n                  oSayPr1:hide()\n               end if\n\n               if !Empty( oSayVp1 )\n                  oSayVp1:hide()\n               end if\n\n            end if\n\n            if !empty( aTmp[ _CCODPR2 ] )\n\n               if aGet[ _CVALPR2 ] != nil\n                  aGet[ _CVALPR2 ]:show()\n               end if\n\n               if oSayPr2 != nil\n                  oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )\n                  oSayPr2:show()\n               end if\n\n               if oSayVp2 != nil\n                  oSayVp2:SetText( \"\" )\n                  oSayVp2:Show()\n               end if\n\n            else\n\n               if !Empty( aGet[ _CVALPR2 ] )\n                  aGet[ _CVALPR2 ]:hide()\n               end if\n\n               if !Empty( oSayPr2 )\n                  oSayPr2:hide()\n               end if\n\n               if !Empty( oSayVp2 )\n                  oSayVp2:hide()\n               end if\n\n            end if\n\n         end if\n\n         /*\n         He terminado de meter todo lo que no son precios----------------------\n         ahora es cuando meteré los precios con todas las opciones posibles----\n         */\n\n         cPrpArt              := aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ] + aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ]\n\n         if ( lChgCodArt ) .or. ( cPrpArt != cOldPrpArt )\n\n            // Tomamos el valor de la familia----------------------------------\n\n            if nMode == APPD_MODE\n               cCodFam        := RetFamArt( cCodArt, dbfArticulo )\n            else\n               cCodFam        := aTmp[_CCODFAM]\n            end if\n\n            //--Tomamos el precio recomendado, el costo y el punto verde--//\n\n            aTmp[_NPVSATC ]      := ( dbfArticulo )->PvpRec\n\n            if !Empty( aGet[_NPNTVER ] )\n               aGet[_NPNTVER ]:cText( ( dbfArticulo )->nPntVer1 )\n            end if\n\n            /*\n            Cargamos los costos\n            */\n\n            if !uFieldEmpresa( \"lCosAct\" )\n               nCosPro           := oStock:nCostoMedio( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ] )\n               if nCosPro == 0\n                  nCosPro        := nCosto( aTmp[ _CREF ], dbfArticulo, dbfKit, .f., , dbfDiv )\n               end if\n            else\n               nCosPro           := nCosto( aTmp[ _CREF ], dbfArticulo, dbfKit, .f., , dbfDiv )\n            end if\n\n            if aGet[ _NCOSDIV ] != nil\n               aGet[ _NCOSDIV ]:cText( nCosPro )\n            else\n               aTmp[ _NCOSDIV ]  := nCosPro\n            end if\n\n            /*\n            Descuento de artículo----------------------------------------------\n            */\n\n            nNumDto              := RetFld( aTmpAlb[ _CCODCLI ], dbfClient, \"nDtoArt\" )\n\n            if nNumDto != 0\n\n               do case\n                  case nNumDto == 1\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt1 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt1\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt1\n                     end if\n\n                  case nNumDto == 2\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt2 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt2\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt2\n                     end if\n\n                  case nNumDto == 3\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO]:cText( ( dbfArticulo )->nDtoArt3 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt3\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt3\n                     end if\n\n                  case nNumDto == 4\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt4 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt4\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt4\n                     end if\n\n                  case nNumDto == 5\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO ]:cText( ( dbfArticulo )->nDtoArt5 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt5\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt5\n                     end if\n\n                  case nNumDto == 6\n\n                     if !Empty( aGet[ _NDTO ] )\n                        aGet[ _NDTO]:cText( ( dbfArticulo )->nDtoArt6 )\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt6\n                     else\n                        aTmp[ _NDTO ]     := ( dbfArticulo )->nDtoArt6\n                     end if\n\n               end case\n\n            end if\n\n            /*\n            Vemos si hay descuentos en las familias----------------------------\n            */\n\n            if aTmp[ _NDTO ] == 0\n\n               if !Empty( aGet[ _NDTO ] )\n                  aGet[ _NDTO ]:cText( nDescuentoFamilia( cCodFam, dbfFamilia ) )\n               else\n                  aTmp[ _NDTO ]     := nDescuentoFamilia( cCodFam, dbfFamilia )\n               end if\n\n            end if\n\n            /*\n            Cargamos el codigo de las unidades---------------------------------\n            */\n\n            if !Empty( aGet[ _CUNIDAD ] )\n               aGet[ _CUNIDAD ]:cText( ( dbfArticulo )->cUnidad )\n            else\n               aTmp[ _CUNIDAD ]  := ( dbfArticulo )->cUnidad\n            end if\n\n            // Tomamos el precio del articulo dependiento de las propiedades---\n\n            nPrePro           := nPrePro( aTmp[ _CREF ], aTmp[ _CCODPR1 ], aTmp[ _CVALPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR2 ], aTmp[ _NTARLIN ], aTmpAlb[ _LIVAINC ], dbfArtDiv, dbfTarPreL, aTmpAlb[_CCODTAR] )\n            if nPrePro == 0\n               if !Empty( aGet[ _NSATUNIT ] )\n                  aGet[ _NSATUNIT ]:cText( nRetPreArt( aTmp[ _NTARLIN ], aTmpAlb[ _CDIVALB ], aTmpAlb[_LIVAINC], dbfArticulo, dbfDiv, dbfKit, dbfIva, , aGet[ _NTARLIN ] ) )\n               end if\n            else\n               aGet[ _NSATUNIT ]:cText( nPrePro )\n            end if\n\n            if aTmp[ __LALQUILER ]\n               aGet[ _NSATUNIT ]:cText( 0 )\n               aGet[ _NSATALQ ]:cText( nPreAlq( aTmp[ _CREF ], aTmp[ _NTARLIN ], aTmpAlb[_LIVAINC], dbfArticulo ) )\n            end if\n\n            /*\n            Precios por tarifas------------------------------------------------\n            */\n\n            if !Empty( aTmpAlb[ _CCODTAR ] )\n\n               /*\n               Precio\n               */\n\n               nImpOfe     := RetPrcTar( cCodArt, aTmpAlb[ _CCODTAR ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], dbfTarPreL, aTmp[ _NTARLIN ] )\n               if nImpOfe  != 0\n                  aGet[ _NSATUNIT ]:cText( nImpOfe )\n               end if\n\n               //--Descuento porcentual--//\n\n               nImpOfe     := RetPctTar( cCodArt, cCodFam, aTmpAlb[ _CCODTAR ], aTmp[ _CCODPR1 ], aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], dbfTarPreL )\n               if nImpOfe  != 0\n                  aGet[_NDTO    ]:cText( nImpOfe )\n               end if\n\n               //--Descuento Lineal--//\n               nImpOfe     := RetLinTar( cCodArt, cCodFam, aTmpAlb[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], dbfTarPreL )\n               if nImpOfe  != 0\n                  aGet[_NDTODIV ]:cText( nImpOfe )\n               end if\n\n               //--comisión de agente--//\n\n               nImpOfe     := RetComTar( cCodArt, cCodFam, aTmpAlb[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpAlb[_CCODAGE], dbfTarPreL, dbfTarPreS )\n\n               if nImpOfe  != 0\n                  aGet[_NCOMAGE ]:cText( nImpOfe )\n               end if\n\n               //--Descuento de promoci¢n--//\n\n               nImpOfe     := RetDtoPrm( cCodArt, cCodFam, aTmpAlb[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpAlb[_DFECALB], dbfTarPreL )\n               if nImpOfe  != 0\n                  aGet[_NDTOPRM]:cText( nImpOfe )\n               end if\n\n               //--Descuento de promoci¢n para agente--//\n\n               nDtoAge     := RetDtoAge( cCodArt, cCodFam, aTmpAlb[_CCODTAR], aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmpAlb[_DFECALB], aTmpAlb[_CCODAGE], dbfTarPreL, dbfTarPreS )\n               if nDtoAge  != 0\n                  aGet[ _NCOMAGE ]:cText( nDtoAge )\n               end if\n\n            end if\n\n            /*\n            Chequeamos situaciones especiales y comprobamos las fechas\n            */\n\n            do case\n               case  lSeekAtpArt( aTmpAlb[ _CCODCLI ] + cCodArt, aTmp[ _CCODPR1 ] + aTmp[ _CCODPR2 ], aTmp[ _CVALPR1 ] + aTmp[ _CVALPR2 ], aTmpAlb[ _DFECALB ], dbfCliAtp ) .and.;\n                  ( dbfCliAtp )->lAplAlb\n\n                  nImpAtp     := nImpAtp( nTarOld, dbfCliAtp, , , aGet[ _NTARLIN ] )\n                  if nImpAtp  != 0\n                     aGet[ _NSATUNIT ]:cText( nImpAtp )\n                  end if\n\n                  /*\n                  Descuentos por tarifas de precios----------------------------\n                  */\n\n                  nImpAtp     := nDtoAtp( nTarOld, dbfCliAtp )\n                  /*COMENTADO PARA QUE LA ATIPICA SEA LA QUE MANDE*/ \n                  //if nImpAtp  != 0\n                     aGet[ _NDTO ]:cText( nImpAtp )\n                  //end if\n\n                  /*\n                  Descuento por promocion--------------------------------------\n                  */\n\n                  if ( dbfCliAtp )->nDprArt != 0\n                     aGet[ _NDTOPRM ]:cText( ( dbfCliAtp )->nDprArt )\n                  end if\n\n                  if ( dbfCliAtp )->NCOMAGE != 0\n                     aGet[ _NCOMAGE ]:cText( ( dbfCliAtp )->nComAge )\n                  end if\n\n                  if ( dbfCliAtp )->nDtoDiv != 0\n                     aGet[ _NDTODIV ]:cText( ( dbfCliAtp )->nDtoDiv )\n                  end if\n\n               //--Atipicas de clientes por familias--//\n\n               case  lSeekAtpFam( aTmpAlb[ _CCODCLI ] + aTmp[ _CCODFAM ], aTmpAlb[ _DFECALB ], dbfCliAtp ) .and. ;\n                  ( dbfCliAtp )->lAplAlb\n\n                  /*COMENTADO PARA QUE LA ATIPICA SEA LA QUE MANDE*/ \n                  //if ( dbfCliAtp )->nDtoArt != 0\n                     aGet[_NDTO    ]:cText( ( dbfCliAtp )->nDtoArt )\n                  //end if\n\n                  if ( dbfCliAtp )->nDprArt != 0\n                     aGet[ _NDTOPRM ]:cText( ( dbfCliAtp )->nDprArt )\n                  end if\n\n                  if ( dbfCliAtp )->nComAge != 0\n                     aGet[ _NCOMAGE ]:cText( ( dbfCliAtp )->nComAge )\n                  end if\n\n                  if ( dbfCliAtp )->nDtoDiv != 0\n                     aGet[ _NDTODIV ]:cText( ( dbfCliAtp )->nDtoDiv )\n                  end if\n\n            end case\n\n            ValidaMedicion( aTmp, aGet )\n\n         end if\n\n         /*\n         Buscamos si hay ofertas-----------------------------------------------\n         */\n\n         lBuscaOferta( cCodArt, aGet, aTmp, aTmpAlb, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )\n\n         /*\n         Cargamos los valores para los cambios---------------------------------\n         */\n\n         cOldPrpArt     := cPrpArt\n         cOldCodArt     := cCodArt\n\n         /*\n         Solo pueden modificar los precios los administradores--------------\n         */\n\n         if Empty( aTmp[ _NSATUNIT ] ) .or. lUsrMaster() .or. oUser():lCambiarPrecio()\n\n            if !Empty( aGet[ _NSATUNIT ] )\n                aGet[ _NSATUNIT ]:HardEnable()\n            end if\n\n             aGet[ _NIMPTRN  ]:HardEnable()\n\n            if !Empty( aGet[ _NPNTVER ] )\n               aGet[ _NPNTVER  ]:HardEnable()\n            end if\n\n            aGet[ _NDTO     ]:HardEnable()\n            aGet[ _NDTOPRM  ]:HardEnable()\n\n            if !Empty( aGet[ _NDTODIV ] )\n               aGet[ _NDTODIV  ]:HardEnable()\n            end if\n\n         else\n            aGet[ _NSATUNIT ]:HardDisable()\n            aGet[ _NIMPTRN  ]:HardDisable()\n            aGet[ _NPNTVER  ]:HardDisable()\n            aGet[ _NDTO     ]:HardDisable()\n            aGet[ _NDTOPRM  ]:HardDisable()\n            aGet[ _NDTODIV  ]:HardDisable()\n         end if\n\n      else\n\n         MsgStop( \"Artículo no encontrado\" )\n         Return ( .f. )\n\n      end if\n\n   end if\n\nRETURN ( .t. )\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION SaveDeta( aTmp, aTmpAlb, oFld, aGet, oBrw, bmpImage, oDlg, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oStkAct, nStkAct, oTotal, cCodArt, oBtn, oBtnSer )\n\n   local aXbyStr\n   local nTotUnd  := 0\n   local aClo     := aClone( aTmp )\n\n   oBtn:SetFocus()\n\n   if !aGet[ _CREF ]:lValid()\n      return nil\n   end if\n\n   if !lMoreIva( aTmp[ _NIVA ] )\n      return nil\n   end if\n\n   if Empty( aTmp[ _CALMLIN ] )\n      MsgStop( \"Código de almacen no puede estar vacio\" )\n      aGet[ _CALMLIN ]:SetFocus()\n      Return nil\n   end if\n\n   if !cAlmacen( aGet[ _CALMLIN ], dbfAlm )\n      Return nil\n   end if\n\n   /*\n   Comprobamos si tiene que introducir números de serie------------------------\n   */\n\n   if ( nMode == APPD_MODE ) .and. RetFld( aTmp[ _CREF ], dbfArticulo, \"lNumSer\" ) .and. !( dbfTmpSer )->( dbSeek( Str( aTmp[ _NNUMLIN ], 4 ) + aTmp[ _CREF ] ) )\n      MsgStop( \"Tiene que introducir números de serie para este artículo.\" )\n      oBtnSer:Click()\n      Return .f.\n   end if\n\n   if !Empty( aTmp[ _CREF ] ) .and. ( aTmp[ _LNOTVTA ] .or. aTmp[ _LMSGVTA ] )\n\n      nTotUnd     := nTotNAlbCli( aTmp )\n\n      if nMode == EDIT_MODE\n         nTotUnd  -= nTotNAlbCli( dbfTmpLin )\n      end if\n\n      if nTotUnd  != 0\n\n         do case\n            case ( nStkAct - nTotUnd ) < 0\n\n               if aTmp[ _LNOTVTA ]\n                  MsgStop( \"No hay stock suficiente, tenemos \" + Alltrim( Trans( nStkAct, MasUnd() ) ) + \" unidad(es) disponible(s),\" + CRLF + \"en almacén \" + aTmp[ _CALMLIN ] + \".\" )\n                  return nil\n               end if\n\n               if aTmp[ _LMSGVTA ]\n                  if !ApoloMsgNoYes( \"No hay stock suficiente, tenemos \" + Alltrim( Trans( nStkAct, MasUnd() ) ) + \" unidad(es) disponible(s),\" + CRLF + \" en almacén \" + aTmp[ _CALMLIN ] + \".\", \"¿Desea continuar?\" )\n                     return nil\n                  end if\n               end if\n\n            case ( nStkAct - nTotUnd ) < RetFld( aTmp[ _CREF ], dbfArticulo, \"nMinimo\"  )\n\n               if aTmp[ _LMSGVTA ]\n                  if !ApoloMsgNoYes( \"El stock está por debajo del minimo.\", \"¿Desea continuar?\" )\n                     return nil\n                  end if\n               end if\n\n         end case\n\n      end if\n\n   end if\n\n   aTmp[ _NREQ ]  := nPReq( dbfIva, aTmp[ _NIVA ] )\n\n   if nMode == APPD_MODE\n\n      aTmp[ _CREF ]  := cCodArt\n\n      if aTmp[ _LLOTE ]\n         GraLotArt( aTmp[ _CREF ], dbfArticulo, aTmp[ _CLOTE ] )\n      end if\n\n      /*\n      Chequeamos las ofertas X * Y\n      */\n\n      aXbYStr        := nXbYAtipica( aTmp[ _CREF ], aTmpAlb[ _CCODCLI ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfCliAtp )\n\n      if aXbYStr[ 1 ] == 0\n\n         /*\n         Chequeamos las ofertas por artículos X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( aTmp[ _CREF ], aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 1 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por familia X  *  Y----------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"FAMILIA\", \"CODIGO\" ), aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 2 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por tipo de artículos X  *  Y------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODTIP\", \"CODIGO\" ), aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 3 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por categoria X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODCATE\", \"CODIGO\" ), aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 4 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por temporada X  *  Y--------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODTEMP\", \"CODIGO\" ), aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 5 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n         /*\n         Chequeamos las ofertas por fabricante X  *  Y-------------------------\n         */\n\n         if !aTmp[ _LLINOFE ]\n\n            aXbyStr              := nXbYOferta( RetFld( aTmp[ _CREF ], dbfArticulo, \"CCODFAB\", \"CODIGO\" ), aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NCANENT ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, 6 )\n\n            if aXbYStr[ 1 ] != 0\n               aTmp[ _LLINOFE ]  := .t.\n            end if\n\n         end if\n\n      end if\n\n      /*\n      si tenemos q reagalar unidades\n      */\n\n      if aXbYStr[ 1 ] != 0 .and. aXbYStr[ 2 ] != 0\n\n         /*\n         Tenemos oferta vamos a ver de q tipo\n         */\n\n         if aXbYStr[ 1 ] == 1\n\n            /*\n            Ofertas de cajas---------------------------------------------------\n            */\n\n            aTmp[ _NCANENT  ] -= aXbYStr[ 2 ]\n            aClo              := aClone( aTmp )\n\n            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .f. )\n\n            if aClo[ _LKITART ]\n               AppendKit( aClo, aTmpAlb )\n            end if\n\n            /*\n            Cajas a regalar----------------------------------------------------\n            */\n\n            aTmp[ _NCANENT  ] := aXbYStr[ 2 ]\n            aTmp[ _NSATUNIT ] := 0\n\n            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n            if aClo[ _LKITART ]\n               AppendKit( aClo, aTmpAlb )\n            end if\n\n         else\n\n            /*\n            Restamos las unidades q vamos a regalar al total de unidades y guardamos primer registro\n            */\n\n            if aTmp[ _NUNICAJA ] < 0\n               aTmp[ _NUNICAJA ] += aXbYStr[ 2 ]\n            else\n               aTmp[ _NUNICAJA ] -= aXbYStr[ 2 ]\n            end if\n\n            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .f. )\n\n            if aClo[ _LKITART ]\n               AppendKit( aClo, aTmpAlb )\n            end if\n\n            /*\n            Unidades q vamos a regalar-----------------------------------------\n            */\n\n            if aTmp[ _NUNICAJA ] < 0\n               aTmp[ _NUNICAJA ] := -( aXbYStr[ 2 ] )\n            else\n               aTmp[ _NUNICAJA ] := aXbYStr[ 2 ]\n            end if\n\n            aTmp[ _NSATUNIT ] := 0\n\n            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n            if aClo[ _LKITART ]\n               AppendKit( aClo, aTmpAlb )\n            end if\n\n         end if\n\n      else\n\n         /*\n         Guardamos el registro de manera normal\n         */\n\n         WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n         /*\n         Guardamos los productos kits\n         */\n\n         if aClo[ _LKITART ]\n            AppendKit( aClo, aTmpAlb )\n         end if\n\n      end if\n\n   else\n\n      /*\n      Guardamos el registro de manera normal\n      */\n\n      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )\n\n   end if\n\n   /*\n   Liberacion del bitmap-------------------------------------------------------\n   */\n\n   if !Empty( bmpImage )\n       bmpImage:Hide()\n   end if\n\n   if !Empty( bmpImage )\n      PalBmpFree( bmpImage:hBitmap, bmpImage:hPalette )\n   end if\n\n   cOldCodArt     := \"\"\n   cOldUndMed     := \"\"\n\n   if !Empty( aGet[ _CUNIDAD ] )\n      aGet[ _CUNIDAD ]:lValid()\n   end if\n\n   if nMode == APPD_MODE .AND. lEntCon()\n\n      RecalculaTotal( aTmpAlb )\n\n      SetDlgMode( aTmp, aGet, oFld, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oStkAct, oGet2, oTotal, aTmpAlb )\n\n      SysRefresh()\n\n      if !Empty( aGet[ _CREF ] )\n         aGet[ _CREF ]:SetFocus()\n      end if\n\n   else\n\n      oDlg:End( IDOK )\n\n   end if\n\nRETURN NIL\n\n//--------------------------------------------------------------------------//\n\nSTATIC FUNCTION AppendKit( uTmpLin, aTmpAlb )\n\n   local cCodArt\n   local cSerAlb\n   local nNumAlb\n   local cSufAlb\n   local nCanEnt\n   local dFecAlb\n   local cTipMov\n   local cAlmLin\n   local nIvaLin\n   local lIvaLin\n   local nComAge\n   local nUniCaj\n   local nDtoGrl\n   local nDtoPrm\n   local nDtoDiv\n   local cNumPed\n   local nTarLin\n   local nNumLin                       := ( dbfTmpLin )->nNumLin\n   local nRecAct                       := ( dbfKit    )->( RecNo() )\n   local nRecLin                       := ( dbfTmpLin )->( RecNo() )\n   local nUnidades                     := 0\n   local nStkActual                    := 0\n\n   if ValType( uTmpLin ) == \"A\"\n      cCodArt                          := uTmpLin[ _CREF    ]\n      cSerAlb                          := uTmpLin[ _CSERALB ]\n      nNumAlb                          := uTmpLin[ _NNUMALB ]\n      cSufAlb                          := uTmpLin[ _CSUFALB ]\n      nCanEnt                          := uTmpLin[ _NCANENT ]\n      dFecAlb                          := uTmpLin[ _DFECHA  ]\n      cTipMov                          := uTmpLin[ _CTIPMOV ]\n      cAlmLin                          := uTmpLin[ _CALMLIN ]\n      nIvaLin                          := uTmpLin[ _NIVA    ]\n      lIvaLin                          := uTmpLin[ _LIVALIN ]\n      nComAge                          := uTmpLin[ _NCOMAGE ]\n      nUniCaj                          := uTmpLin[ _NUNICAJA]\n      nDtoGrl                          := uTmpLin[ _NDTO    ]\n      nDtoPrm                          := uTmpLin[ _NDTOPRM ]\n      nDtoDiv                          := uTmpLin[ _NDTODIV ]\n      nNumLin                          := uTmpLin[ _NNUMLIN ]\n      cNumPed                          := uTmpLin[ _dCNUMPED]\n      nTarLin                          := uTmpLin[ _NTARLIN ]\n   else\n      cCodArt                          := ( uTmpLin )->cRef\n      cSerAlb                          := ( uTmpLin )->cSerAlb\n      nNumAlb                          := ( uTmpLin )->nNumAlb\n      cSufAlb                          := ( uTmpLin )->cSufAlb\n      nCanEnt                          := ( uTmpLin )->nCanEnt\n      dFecAlb                          := ( uTmpLin )->dFecha\n      cTipMov                          := ( uTmpLin )->cTipMov\n      cAlmLin                          := ( uTmpLin )->cAlmLin\n      nIvaLin                          := ( uTmpLin )->nIva\n      lIvaLin                          := ( uTmpLin )->lIvaLin\n      nComAge                          := ( uTmpLin )->nComAge\n      nUniCaj                          := ( uTmpLin )->nUniCaja\n      nDtoGrl                          := ( uTmpLin )->nDto\n      nDtoPrm                          := ( uTmpLin )->nDtoPrm\n      nDtoDiv                          := ( uTmpLin )->nDtoDiv\n      nNumLin                          := ( uTmpLin )->nNumLin\n      cNumPed                          := ( uTmpLin )->cNumPed\n      nTarLin                          := ( uTmpLin )->nTarLin\n   end if\n\n   /*\n   Guardamos los productos kits\n   */\n\n   if ( dbfKit )->( dbSeek( cCodArt ) )\n\n      while ( dbfKit )->cCodKit == cCodArt .and. !( dbfKit )->( eof() )\n\n         if ( dbfArticulo )->( dbSeek( ( dbfKit )->cRefKit ) )\n\n            ( dbfTmpLin )->( dbAppend() )\n\n            if lKitAsociado( cCodArt, dbfArticulo )\n               ( dbfTmpLin )->nNumLin  := nLastNum( dbfTmpLin )\n               ( dbfTmpLin )->lKitChl  := .f.\n            else\n               ( dbfTmpLin )->nNumLin  := nNumLin\n               ( dbfTmpLin )->lKitChl  := .t.\n            end if\n\n            ( dbfTmpLin )->cRef        := ( dbfKit      )->cRefKit\n            ( dbfTmpLin )->cDetalle    := ( dbfArticulo )->Nombre\n            ( dbfTmpLin )->nPntVer     := ( dbfArticulo )->nPntVer1\n            ( dbfTmpLin )->nPesokg     := ( dbfArticulo )->nPesoKg\n            ( dbfTmpLin )->cPesokg     := ( dbfArticulo )->cUndDim\n            ( dbfTmpLin )->cUnidad     := ( dbfArticulo )->cUnidad\n            ( dbfTmpLin )->nVolumen    := ( dbfArticulo )->nVolumen\n            ( dbfTmpLin )->cVolumen    := ( dbfArticulo )->cVolumen\n            ( dbfTmpLin )->nCtlStk     := ( dbfArticulo )->nCtlStock\n            ( dbfTmpLin )->nPvpRec     := ( dbfArticulo )->PvpRec\n            ( dbfTmpLin )->cCodImp     := ( dbfArticulo )->cCodImp\n            ( dbfTmpLin )->lLote       := ( dbfArticulo )->lLote\n            ( dbfTmpLin )->cLote       := ( dbfArticulo )->cLote\n\n            ( dbfTmpLin )->nCosDiv     := nCosto( nil, dbfArticulo, dbfKit )\n            ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( dbfArticulo )->cCodImp )\n\n            if ( dbfArticulo )->lFacCnv\n               ( dbfTmpLin )->nFacCnv  := ( dbfArticulo )->nFacCnv\n            end if\n\n            ( dbfTmpLin )->cSerAlb     := cSerAlb\n            ( dbfTmpLin )->nNumAlb     := nNumAlb\n            ( dbfTmpLin )->cSufAlb     := cSufAlb\n            ( dbfTmpLin )->nCanEnt     := nCanEnt\n            ( dbfTmpLin )->dFecha      := dFecAlb\n            ( dbfTmpLin )->cTipMov     := cTipMov\n            ( dbfTmpLin )->cNumPed     := cNumPed\n            ( dbfTmpLin )->nNumLin     := nNumLin\n            ( dbfTmpLin )->cAlmLin     := cAlmLin\n            ( dbfTmpLin )->lIvaLin     := lIvaLin\n\n            /*\n            Propiedades de los kits-----------------------------------------\n            */\n\n            ( dbfTmpLin )->lImpLin     := lImprimirComponente( cCodArt, dbfArticulo )   // 1 Todos, 2 Compuesto, 3 Componentes\n            ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( cCodArt, dbfArticulo )   // 1 Todos, 2 Compuesto, 3 Componentes\n\n            ( dbfTmpLin )->nComAge     := nComAge\n            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( dbfKit )->nUndKit\n\n            /*\n            Estudio de los tipos de impuestos si el padre el cero todos cero---------\n            */\n\n            if !Empty( nIvaLin )\n               ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )\n               ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )\n            else\n               ( dbfTmpLin )->nIva     := 0\n               ( dbfTmpLin )->nReq     := 0\n            end if\n\n            /*\n            Cojemos el precio del kit------------------------------------------\n            */\n\n            if ( dbfTmpLin )->lKitPrc\n               ( dbfTmpLin )->nPreUnit := nRetPreArt( nTarLin, aTmpAlb[ _CDIVALB ], aTmpAlb[ _LIVAINC ], dbfArticulo, dbfDiv, dbfKit, dbfIva )\n            end if\n\n            /*\n            Tratamiento de stocks----------------------------------------------\n            */\n\n            if lStockComponentes( cCodArt, dbfArticulo )\n               ( dbfTmpLin )->nCtlStk  := ( dbfArticulo )->nCtlStock\n            else\n               ( dbfTmpLin )->nCtlstk  := STOCK_NO_CONTROLAR // No controlar Stock\n            end if\n\n            /*\n            Descuentos------------------------------------------------------\n            */\n\n            if ( dbfKit )->lAplDto\n               ( dbfTmpLin )->nDto     := nDtoGrl\n               ( dbfTmpLin )->nDtoPrm  := nDtoPrm\n               ( dbfTmpLin )->nDtoDiv  := nDtoDiv\n            end if\n\n            if ( dbfArticulo )->lKitArt\n               AppendKit( dbfTmpLin, aTmpAlb )\n            end if\n\n            /*\n            Avisaremos del stock bajo minimo--------------------------------------\n            */\n\n            if ( dbfArticulo )->lMsgVta .and. !uFieldEmpresa( \"lNStkAct\" )\n\n               nStkActual     := oStock:nStockAlmacen( ( dbfKit )->cRefKit, cAlmLin )\n               nUnidades      := nUniCaj * ( dbfKit )->nUndKit\n\n               do case\n                  case nStkActual - nUnidades < 0\n\n                        MsgStop( \"No hay stock suficiente para realizar la venta\" + CRLF + ;\n                                 \"del componente \" + AllTrim( ( dbfKit )->cRefKit ) + \" - \" + AllTrim( ( dbfArticulo )->Nombre ),;\n                                 \"¡Atención!\" )\n\n                  case nStkActual - nUnidades < ( dbfArticulo)->nMinimo\n\n                        MsgStop( \"El stock del componente \" + AllTrim( ( dbfKit )->cRefKit ) + \" - \" + AllTrim( ( dbfArticulo )->Nombre ) + CRLF + ;\n                                 \"está bajo minimo.\"                                                                                      + CRLF + ;\n                                 \"Unidades a vender : \" + AllTrim( Trans( nUnidades, MasUnd() ) )                                         + CRLF + ;\n                                 \"Stock minimo : \" + AllTrim( Trans( ( dbfArticulo)->nMinimo, MasUnd() ) )                                + CRLF + ;\n                                 \"Stock actual : \" + AllTrim( Trans( nStkActual, MasUnd() ) ),;\n                                 \"¡Atención!\" )\n               end case\n\n            end if\n\n         end if\n\n         ( dbfKit )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfKit    )->( dbGoTo( nRecAct ) )\n   ( dbfTmpLin )->( dbGoTo( nRecLin ) )\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION lMoreIva( nCodIva )\n\n	/*\n	Si no esta dentro de los porcentajes anteriores\n	*/\n\n   IF _NPCTIVA1 == nil .OR. _NPCTIVA2 == nil .OR. _NPCTIVA3 == nil\n		RETURN .T.\n	END IF\n\n	IF _NPCTIVA1 == nCodIva .OR. _NPCTIVA2 == nCodIva .OR. _NPCTIVA3 == nCodIva\n		RETURN .T.\n	END IF\n\n   MsgStop( \"Documento con mas de 3 Tipos de \" + cImp() )\n\nRETURN .F.\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para la Edici¢n de Lineas de Detalle en un albaran\n*/\n\nSTATIC FUNCTION EdtDeta( oBrwLin, bEdtDet, aTmpAlb, lTot, nMode )\n\n   WinEdtRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, nMode, aTmpAlb )\n\nRETURN ( RecalculaTotal( aTmpAlb ) )\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion Auxiliar para borrar las Lineas de Detalle en un albaran\n*/\n\nSTATIC FUNCTION DelDeta( oBrwLin )\n\n   CursorWait()\n\n   while ( dbfTmpSer )->( dbSeek( Str( ( dbfTmpLin )->nNumLin, 4 ) ) )\n      ( dbfTmpSer )->( dbDelete() )\n   end while\n\n   if ( dbfTmpLin )->lKitArt\n      dbDelKit( oBrwLin, dbfTmpLin, ( dbfTmpLin )->nNumLin )\n   end if\n\n   CursorWE()\n\nRETURN ( .t. )\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oBrwInc, nMode, oDlg )\n\n   local aTabla\n   local oError\n   local oBlock\n   local cSerAlb\n   local nNumAlb\n   local cSufAlb\n   local cNumPed\n   local dFecAlb\n   local cPedido\n   local cSat \n\n   if Empty( aTmp[ _CSERALB ] )\n      aTmp[ _CSERALB ]  := \"A\"\n   end if\n\n   cSerAlb              := aTmp[ _CSERALB ]\n   nNumAlb              := aTmp[ _NNUMALB ]\n   cSufAlb              := aTmp[ _CSUFALB ]\n   cNumPed              := aTmp[ _CNUMPED ]\n   dFecAlb              := aTmp[ _DFECALB ]\n\n   /*\n   Comprobamos la fecha del documento------------------------------------------\n   */\n\n   #ifndef __PDA__\n   if !lValidaOperacion( aTmp[ _DFECALB ] )\n      Return .f.\n   end if\n   #endif\n\n   /*\n   Estos campos no pueden estar vacios-----------------------------------------\n   */\n\n   if Empty( aTmp[ _CCODCLI ] )\n      msgStop( \"Código de cliente no puede estar vacío.\" )\n      aGet[ _CCODCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if lCliBlq( aTmp[ _CCODCLI ], dbfClient )\n      msgStop( \"Cliente bloqueado, no se pueden realizar operaciones de venta\" , \"Imposible archivar como albarán\" )\n      aGet[ _CCODCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if !lCliChg( aTmp[ _CCODCLI ], dbfClient )\n      msgStop( \"Este cliente no tiene autorización para venta a credito.\", \"Imposible archivar como albarán\" )\n      aGet[ _CCODCLI ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODALM ] )\n      msgStop( \"Almacén no puede estar vacío.\" )\n      aGet[ _CCODALM ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODCAJ ] )\n      msgStop( \"Caja no puede estar vacía.\" )\n      aGet[ _CCODCAJ ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODPAGO ] )\n      msgStop( \"Forma de pago no puede estar vacía.\" )\n      aGet[ _CCODPAGO ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CDIVALB ] )\n      MsgStop( \"No puede almacenar documento sin código de divisa.\" )\n      aGet[ _CDIVALB ]:SetFocus()\n      return .f.\n   end if\n\n   #ifndef __PDA__\n\n   if Empty( aTmp[ _CCODAGE ] ) .and. lRecogerAgentes()\n      msgStop( \"Agente no puede estar vacío.\" )\n      aGet[ _CCODAGE ]:SetFocus()\n      return .f.\n   end if\n\n   if Empty( aTmp[ _CCODOBR ] ) .and. lObras()\n      MsgStop( \"Debe de introducir una obra.\" )\n      aGet[ _CCODOBR ]:SetFocus()\n      return .f.\n   end if\n\n   #endif\n\n   if ( dbfTmpLin )->( eof() )\n      MsgStop( \"No puede almacenar un documento sin líneas.\" )\n      return .f.\n   end if\n\n   if nTotDif < 0\n      MsgStop( \"La carga excede la capacidad del medio de transporte.\" )\n   end if\n\n   CursorWait()\n\n   oDlg:Disable()\n\n   oMsgText( \"Archivando\" )\n\n   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )\n   BEGIN SEQUENCE\n\n   BeginTransaction()\n\n   /*\n   Quitamos los filtros--------------------------------------------------------\n   */\n\n   ( dbfTmpLin )->( dbClearFilter() )\n\n   oMsgProgress()\n   oMsgProgress():SetRange( 0, ( dbfTmpLin )->( LastRec() ) )\n\n   /*\n   Primero hacer el RollBack---------------------------------------------------\n	*/\n\n   aTmp[ _DFECCRE ]        := Date()\n   aTmp[ _CTIMCRE ]        := Time()\n\n   /*\n   Guardamos el tipo para alquileres\n   */\n\n   if !Empty( oTipAlb ) .and. oTipAlb:nAt == 2\n      aTmp[ _LALQUILER ]   := .t.\n   else\n      aTmp[ _LALQUILER ]   := .f.\n   end if\n\n   do case\n   case nMode == APPD_MODE .or. nMode == DUPL_MODE\n\n      nNumAlb              := nNewDoc( aTmp[ _CSERALB ], dbfAlbCliT, \"NALBCLI\", , dbfCount )\n      aTmp[ _NNUMALB ]     := nNumAlb\n      nTotOld              := 0\n\n   case nMode == EDIT_MODE\n\n      while ( dbfAlbCliL )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .and. !( dbfAlbCliL )->( eof() )\n         if dbLock( dbfAlbCliL )\n            ( dbfAlbCliL )->( dbDelete() )\n            ( dbfAlbCliL )->( dbUnLock() )\n         end if\n      end while\n\n      while ( dbfAlbCliP )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .and. !( dbfAlbCliP )->( eof() )\n         if dbLock( dbfAlbCliP )\n            ( dbfAlbCliP )->( dbDelete() )\n            ( dbfAlbCliP )->( dbUnLock() )\n         end if\n      end while\n\n      while ( dbfAlbCliI )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .and. !( dbfAlbCliI )->( eof() )\n         if dbLock( dbfAlbCliI )\n            ( dbfAlbCliI )->( dbDelete() )\n            ( dbfAlbCliI )->( dbUnLock() )\n         end if\n      end while\n\n      while ( dbfAlbCliD )->( dbSeek( cSerAlb + str( nNumAlb ) + cSufAlb ) ) .and. !( dbfAlbCliD )->( eof() )\n         if dbLock( dbfAlbCliD )\n            ( dbfAlbCliD )->( dbDelete() )\n            ( dbfAlbCliD )->( dbUnLock() )\n         end if\n      end while\n\n      while ( dbfAlbCliS )->( dbSeek( cSerAlb + Str( nNumAlb ) + cSufAlb ) ) .and. !( dbfAlbCliS )->( eof() )\n         if dbLock( dbfAlbCliS )\n            ( dbfAlbCliS )->( dbDelete() )\n            ( dbfAlbCliS )->( dbUnLock() )\n         end if\n      end while\n\n   end case\n\n   /*\n   Guardamos el albaran\n   */\n\n   ( dbfTmpLin )->( dbGoTop() )\n   while !( dbfTmpLin )->( eof() )\n\n      ( dbfTmpLin )->dFecAlb  := aTmp[ _DFECALB ]\n\n      dbPass( dbfTmpLin, dbfAlbCliL, .t., cSerAlb, nNumAlb, cSufAlb )\n\n      ( dbfTmpLin )->( dbSkip() )\n\n      oMsgProgress():Deltapos(1)\n\n   end while\n\n   /*\n   Guardamos los totales-------------------------------------------------------\n   */\n\n   aTmp[ _NTOTNET ]     := nTotNet\n   aTmp[ _NTOTIVA ]     := nTotIva\n   aTmp[ _NTOTREQ ]     := nTotReq\n   aTmp[ _NTOTALB ]     := nTotAlb\n   aTmp[ _NTOTPAG ]     := nTotPag\n\n   WinGather( aTmp, , dbfAlbCliT, , nMode )\n\n   /*\n   Ahora escribimos en el fichero definitivo-----------------------------------\n	*/\n\n   ( dbfTmpPgo )->( dbGoTop() )\n   while ( dbfTmpPgo )->( !eof() )\n      dbPass( dbfTmpPgo, dbfAlbCliP, .t., cSerAlb, nNumAlb, cSufAlb )\n      ( dbfTmpPgo )->( dbSkip() )\n   end while\n\n   /*\n   Ahora escribimos en el fichero definitivo-----------------------------------\n	*/\n\n   ( dbfTmpInc )->( dbGoTop() )\n   while ( dbfTmpInc )->( !eof() )\n      dbPass( dbfTmpInc, dbfAlbCliI, .t., cSerAlb, nNumAlb, cSufAlb )\n      ( dbfTmpInc )->( dbSkip() )\n   end while\n\n   /*\n   Ahora escribimos en el fichero definitivo-----------------------------------\n	*/\n\n   ( dbfTmpDoc )->( dbGoTop() )\n   while ( dbfTmpDoc )->( !eof() )\n      dbPass( dbfTmpDoc, dbfAlbCliD, .t., cSerAlb, nNumAlb, cSufAlb )\n      ( dbfTmpDoc )->( dbSkip() )\n   end while\n\n   /*\n   Ahora escribimos en el fichero definitivo-----------------------------------\n	*/\n\n   ( dbfTmpSer )->( dbGoTop() )\n   while ( dbfTmpSer )->( !eof() )\n      dbPass( dbfTmpSer, dbfAlbCliS, .t., cSerAlb, nNumAlb, cSufAlb, dFecAlb )\n      ( dbfTmpSer )->( dbSkip() )\n   end while\n\n   /*\n   Estado del pedido-----------------------------------------------------------\n   */\n\n   if !Empty( cNumPed )\n\n      /*\n      Si el albarán proviene de un pedido, le ponemos el estado----------------\n      */\n\n      oStock:SetEstadoPedCli( cNumPed, .t., cSerAlb + Str( nNumAlb ) + cSufAlb )\n\n      if ( dbfPedCliP )->( dbSeek( cNumPed ) )\n\n         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .and. !( dbfPedCliP )->( Eof() )\n\n            if !( dbfPedCliP )->lPasado\n\n               if dbLock( dbfPedCliP )\n                  ( dbfPedCliP )->lPasado := .t.\n                  ( dbfPedCliP )->( dbUnLock() )\n               end if\n\n            end if\n\n            ( dbfPedCliP )->( dbSkip() )\n\n         end while\n\n      end if\n\n   end if\n\n   /*\n   Estado de los pedidos al agrupar--------------------------------------------\n   */\n\n   if Len( aPedidos ) != 0\n\n      for each cPedido in aPedidos\n\n         if ( cPedido[ 1 ] ) .and. ( dbSeekInOrd( cPedido[ 3 ], \"nNumPed\", dbfPedCliT ) )\n\n            oStock:SetEstadoPedCli( cPedido[ 3 ], .t., cSerAlb + Str( nNumAlb ) + cSufAlb )\n\n            if dbLock( dbfPedCliT )\n               ( dbfPedCliT )->cNumAlb    := cSerAlb + Str( nNumAlb ) + cSufAlb\n               ( dbfPedCliT )->( dbUnLock() )\n            end if\n\n         end if\n\n      next\n\n   end if\n\n   /*\n   Estado de los Sat al agrupar------------------------------------------------\n   */\n\n   if Len( aNumSat ) != 0\n\n      for each cSat in aNumSat\n\n         if ( dbSeekInOrd( cSat, \"nNumSat\", dbfSatCliT ) )\n\n            if dbLock( dbfSatCliT )\n               ( dbfSatCliT )->lEstado    := .t.\n               ( dbfSatCliT )->cNumAlb    := cSerAlb + Str( nNumAlb ) + cSufAlb\n               ( dbfSatCliT )->( dbUnLock() )\n            end if\n\n         end if\n\n      next\n\n   end if\n\n   /*\n   Escribe los datos pendientes------------------------------------------------\n   */\n\n   dbCommitAll()\n\n   CommitTransaction()\n\n   CursorWE()\n\n   RECOVER USING oError\n\n      RollBackTransaction()\n\n      msgStop( \"Imposible almacenar documento\" + CRLF + ErrorMessage( oError ) )\n\n   END SEQUENCE\n   ErrorBlock( oBlock )\n\n   oMsgText()\n   EndProgress()\n\n   oDlg:Enable()\n   oDlg:End( IDOK )\n\nRETURN .t.\n\n//---------------------------------------------------------------------------//\n\nFUNCTION SetFacturadoAlbaranCliente( lFacturado, oBrw, cAlbCliT, cAlbCliL, cAlbCliS, cNumFac )\n\n   local nOrd\n   local nRec\n   local nRecHead             := ( cAlbCliT )->( Recno() )\n\n   DEFAULT lFacturado         := .f.\n   DEFAULT cNumFac            := Space( 12 )\n   DEFAULT cAlbCliT           := dbfAlbCliT\n   DEFAULT cAlbCliL           := dbfAlbCliL\n   DEFAULT cAlbCliS           := dbfAlbCliS\n\n   if oBrw != nil\n\n      for each nRec in ( oBrw:aSelected )\n\n         nRecHead             := nRec\n\n         ( cAlbCliT )->( dbGoTo( nRec ) )\n\n         /*\n         Restauramos los datos de cabecera----------------------------------------\n         */\n\n         if dbLock( cAlbCliT )\n            ( cAlbCliT )->lFacturado := lFacturado\n            ( cAlbCliT )->cNumFac    := cNumFac\n            ( cAlbCliT )->( dbUnLock() )\n         end if\n\n         /*\n         Cambiamos el estado en las lineas-------------------------------------------\n         */\n\n         nOrd                 := ( cAlbCliL )->( OrdSetFocus( \"nNumAlb\" ) )\n\n         if ( cAlbCliL )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )\n\n            while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb .and. !( cAlbCliL )->( Eof() )\n\n               if dbLock( cAlbCliL )\n                  ( cAlbCliL )->lFacturado := lFacturado\n                  ( cAlbCliL )->( dbUnlock() )\n                end if\n\n               ( cAlbCliL )->( dbSkip() )\n\n            end while\n\n         end if\n\n         ( cAlbCliL )->( OrdSetFocus( nOrd ) )\n\n         /*\n         Cambiamos el estado en las series-------------------------------------------\n         */\n\n         nOrd                 := ( cAlbCliS )->( OrdSetFocus( \"nNumAlb\" ) )\n\n         if ( cAlbCliS )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )\n\n            while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliS )->cSerAlb + Str( ( cAlbCliS )->nNumAlb ) + ( cAlbCliS )->cSufAlb .and. !( cAlbCliS )->( Eof() )\n\n               if dbLock( cAlbCliS )\n                  ( cAlbCliS )->lFacturado := lFacturado\n                  ( cAlbCliS )->( dbUnlock() )\n                end if\n\n               ( cAlbCliS )->( dbSkip() )\n\n            end while\n\n         end if\n\n         ( cAlbCliS )->( OrdSetFocus( nOrd ) )\n\n      next\n\n   else\n\n      /*\n      Restauramos los datos de cabecera----------------------------------------\n      */\n\n      if dbLock( cAlbCliT )\n         ( cAlbCliT )->lFacturado := lFacturado\n         ( cAlbCliT )->cNumFac    := cNumFac\n         ( cAlbCliT )->( dbUnLock() )\n      end if\n\n      /*\n      Cambiamos el estado en las lineas-------------------------------------------\n      */\n\n      nOrd                    := ( cAlbCliL )->( OrdSetFocus( \"nNumAlb\" ) )\n\n      if ( cAlbCliL )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )\n\n         while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliL )->cSerAlb + Str( ( cAlbCliL )->nNumAlb ) + ( cAlbCliL )->cSufAlb .and. !( cAlbCliL )->( Eof() )\n\n            if dbLock( cAlbCliL )\n               ( cAlbCliL )->lFacturado := lFacturado\n               ( cAlbCliL )->( dbUnlock() )\n             end if\n\n            ( cAlbCliL )->( dbSkip() )\n\n         end while\n\n      end if\n\n      ( cAlbCliL )->( OrdSetFocus( nOrd ) )\n\n      /*\n      Cambiamos el estado en las series-------------------------------------------\n      */\n\n      nOrd                   := ( cAlbCliS )->( OrdSetFocus( \"nNumAlb\" ) )\n\n      if ( cAlbCliS )->( dbSeek( ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb ) )\n\n         while ( cAlbCliT )->cSerAlb + Str( ( cAlbCliT )->nNumAlb ) + ( cAlbCliT )->cSufAlb == ( cAlbCliS )->cSerAlb + Str( ( cAlbCliS )->nNumAlb ) + ( cAlbCliS )->cSufAlb .and. !( cAlbCliS )->( Eof() )\n\n            if dbLock( cAlbCliS )\n               ( cAlbCliS )->lFacturado := lFacturado\n               ( cAlbCliS )->( dbUnlock() )\n             end if\n\n            ( cAlbCliS )->( dbSkip() )\n\n         end while\n\n      end if\n\n      ( cAlbCliS )->( OrdSetFocus( nOrd ) )\n\n   end if\n\n   /*\n   Dejamos la tabla en el registro que estaba----------------------------------\n   */\n\n   ( cAlbCliT )->( dbGoTo( nRecHead ) )\n\n   if oBrw != nil\n      oBrw:Refresh()\n      oBrw:SetFocus()\n   end if\n\nRETURN NIL\n\n//---------------------------------------------------------------------------//\n\n\nFunction nTotDtoLAlbCli( dbfLin, nDec, nVdv, cPorDiv )\n\n   local nCalculo\n\n   DEFAULT dbfLin    := dbfAlbCliL\n   DEFAULT nDec      := nDouDiv()\n   DEFAULT nVdv      := 1\n\n   nCalculo          := nDtoLAlbCli( dbfLin, nDec, nVdv ) * nTotNAlbCli( dbfLin )\n\n   if nVdv != 0\n      nCalculo       := nCalculo / nVdv\n   end if\n\n   nCalculo          := Round( nCalculo, nDec )\n\nRETURN ( if( cPorDiv != nil, Trans( nCalculo, cPorDiv ), nCalculo ) )\n\n//----------------------------------------------------------------------------//\n\nFunction dJulianoAlbCli( cAlbCliL )\n\n   local cPrefijo\n   local cLote\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n\n   cLote             := ( cAlbCliL )->cLote\n\n   cPrefijo          := Substr( ( cAlbCliL )->cLote, 1, 1 )\n\n   if Val( cPrefijo ) == 0\n      cLote          := Substr( ( cAlbCliL )->cLote, 2 )\n   end if\n\nRETURN ( AddMonth( JulianoToDate( Year( ( cAlbCliL )->dFecAlb ), Val( cLote ) ), 6 ) )\n\n//---------------------------------------------------------------------------//\n\nFunction dJulianoAlbAnio( cAlbCliL )\n\n   local cPrefijo\n   local cLote\n\n   DEFAULT cAlbCliL  := dbfAlbCliL\n\n   cLote             := ( cAlbCliL )->cLote\n\n   cPrefijo          := Substr( ( cAlbCliL )->cLote, 1, 1 )\n\n   if Val( cPrefijo ) == 0\n      cLote          := Substr( ( cAlbCliL )->cLote, 2 )\n   end if\n\nRETURN ( AddMonth( JulianoToDate( Year( ( cAlbCliL )->dFecAlb ), Val( cLote ) ), 8 ) )\n\n//---------------------------------------------------------------------------//\n\nStatic Function YearComboBoxChange()\n\n   if oWndBrw:oWndBar:lAllYearComboBox()\n      DestroyFastFilter( dbfAlbCliT )\n      CreateUserFilter( \"\", dbfAlbCliT, .f., , , \"all\" )\n   else\n      DestroyFastFilter( dbfAlbCliT )\n      CreateUserFilter( \"Year( Field->dFecAlb ) == \" + oWndBrw:oWndBar:cYearComboBox(), dbfAlbCliT, .f., , , \"Year( Field->dFecAlb ) == \" + oWndBrw:oWndBar:cYearComboBox() )\n   end if\n\n   ( dbfAlbCliT )->( dbGoTop() )\n\n   oWndBrw:Refresh()\n\nReturn nil\n\n//--------------------------------------------------------------------------//\n\nStatic Function lBuscaOferta( cCodArt, aGet, aTmp, aTmpAlb, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )\n\n   local sOfeArt\n   local nTotalLinea    := 0\n\n   if ( dbfArticulo )->Codigo == cCodArt .or. ( dbfArticulo )->( dbSeek( cCodArt ) )\n\n      /*\n      Buscamos si existen ofertas por artículo----------------------------\n      */\n\n      nTotalLinea := lCalcDeta( aTmp, aTmpAlb, nDouDiv, , , aTmpAlb[ _CDIVALB ], .t. )\n\n      sOfeArt     := sOfertaArticulo( cCodArt, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmp[ _NUNICAJA ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], , aTmp[_CCODPR1], aTmp[_CCODPR2], aTmp[_CVALPR1], aTmp[_CVALPR2], aTmp[ _CDIVALB ], dbfArticulo, dbfDiv, dbfKit, dbfIva, aTmp[ _NCANENT ], nTotalLinea )\n\n      if !Empty( sOfeArt ) \n         if ( sOfeArt:nPrecio != 0 )\n            aGet[ _NSATUNIT ]:cText( sOfeArt:nPrecio )\n         end if \n         if ( sOfeArt:nDtoPorcentual != 0 )\n            aGet[ _NDTO     ]:cText( sOfeArt:nDtoPorcentual )\n         end if \n         if ( sOfeArt:nDtoLineal != 0)\n            aGet[ _NDTODIV  ]:cText( sOfeArt:nDtoLineal )\n         end if \n         aTmp[ _LLINOFE  ] := .t.\n      end if\n\n      /*\n      Buscamos si existen ofertas por familia----------------------------\n      */\n\n      if !aTmp[ _LLINOFE ]\n\n         sOfeArt     := sOfertaFamilia( ( dbfArticulo )->Familia, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) \n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      /*\n      Buscamos si existen ofertas por tipos de articulos--------------\n      */\n\n      if !aTmp[ _LLINOFE ]\n\n         sOfeArt     := sOfertaTipoArticulo( ( dbfArticulo )->cCodTip, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt )\n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      /*\n      Buscamos si existen ofertas por tipos de articulos--------------\n      */\n\n      if !aTmp[ _LLINOFE ]\n\n         sOfeArt     := sOfertaCategoria( ( dbfArticulo )->cCodCate, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt )\n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      /*\n      Buscamos si existen ofertas por temporadas-------------------------------\n      */\n\n      if !aTmp[ _LLINOFE ]\n\n         sOfeArt     := sOfertaTemporada( ( dbfArticulo )->cCodTemp, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt ) .and. ( sOfeArt:nDtoPorcentual != 0 .or. sOfeArt:nDtoLineal != 0 )\n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n      /*\n      Buscamos si existen ofertas por fabricantes---------------------------\n      */\n\n      if !aTmp[ _LLINOFE ]\n\n         sOfeArt     := sOfertaFabricante( ( dbfArticulo )->cCodFab, aTmpAlb[ _CCODCLI ], aTmpAlb[ _CCODGRP ], aTmpAlb[ _DFECALB ], dbfOferta, aTmp[ _NTARLIN ], dbfArticulo, aTmp[ _NUNICAJA ], aTmp[ _NCANENT ], nTotalLinea )\n\n         if !Empty( sOfeArt )\n            if ( sOfeArt:nDtoPorcentual != 0 )\n               aGet[ _NDTO    ]:cText( sOfeArt:nDtoPorcentual )\n            end if \n            if ( sOfeArt:nDtoLineal != 0 )\n               aGet[ _NDTODIV ]:cText( sOfeArt:nDtoLineal )\n            end if \n            aTmp[ _LLINOFE ]  := .t.\n         end if\n\n      end if\n\n   end if\n\nreturn .t.\n\n//--------------------------------------------------------------------------//\n\nStatic Function lValidLote( aTmp, aGet, oStkAct )\n\n   if !uFieldEmpresa( \"lNStkAct\" )\n      oStock:nPutStockActual( aTmp[ _CREF ], aTmp[ _CALMLIN ], aTmp[ _CVALPR1 ], aTmp[ _CVALPR2 ], aTmp[ _CLOTE ], aTmp[ _LKITART ], aTmp[ _NCTLSTK ], oStkAct )\n   end if\n\nReturn ( .t. )\n\n//--------------------------------------------------------------------------//\n\nStatic Function EditarNumeroSerie( aTmp, oStock, nMode )\n\n   with object ( TNumerosSerie() )\n\n      :nMode            := nMode\n\n      :cCodArt          := aTmp[ _CREF    ]\n      :cCodAlm          := aTmp[ _CALMLIN ]\n      :nNumLin          := aTmp[ _NNUMLIN ]\n\n      :nTotalUnidades   := nTotNAlbCli( aTmp )\n\n      :oStock           := oStock\n\n      :uTmpSer          := dbfTmpSer\n\n      :Resource()\n\n   end with\n\nReturn ( nil )\n\n//--------------------------------------------------------------------------//\n\nStatic Function lValSer( cCodArt, cCodAlm, aNumSer, aValSer, nTotUnd, oStock, oBrwSer, oProSer, oSaySer )\n\n   local n\n   local lValid         := .t.\n\n   CursorWait()\n\n   if !Empty( oProSer )\n      oProSer:Show()\n      oProSer:SetTotal( nTotUnd )\n   end if\n\n   if !Empty( oSaySer )\n      oSaySer:SetText( \"Calculando disponibilidad del stock...\" )\n   end if\n\n   for n := 1 to nTotUnd\n\n      if !Empty( aNumSer[ n ] )\n\n         aValSer[ n ]   := oStock:lValidNumeroSerie( cCodArt, cCodAlm, aNumSer[ n ] )\n\n         if !aValSer[ n ]\n            lValid      := .f.\n         end if\n\n      else\n\n         lValid         := .f.\n\n      end if\n\n      if !Empty( oProSer ) .and. ( Mod( n, int( nTotUnd / 100 ) ) == 0 )\n         oProSer:Set( n )\n      end if\n\n   next\n\n   if !Empty( oBrwSer )\n      oBrwSer:Refresh()\n   end if\n\n   if !Empty( oProSer )\n      oProSer:Set( 0 )\n      oProSer:Hide()\n   end if\n\n   if !Empty( oSaySer )\n      oSaySer:SetText( \"\" )\n   end if\n\n   CursorWE()\n\nReturn ( lValid )\n\n//---------------------------------------------------------------------------//\n\nStatic Function lChkSer( aValSer, nTotUnd, oProSer, oBrwSer )\n\n   local l\n   local n\n   local lValid            := .t.\n\n   CursorWait()\n\n   if !Empty( oProSer )\n      oProSer:Show()\n      oProSer:SetTotal( nTotUnd )\n   end if\n\n   for each l in aValSer\n\n      if IsFalse( l )\n\n         lValid            := .f.\n         n                 := hb_EnumIndex()\n         exit\n\n      else\n\n         if !Empty( oProSer ) // .and. ( Mod( n, int( nTotUnd / 10 ) ) == 0 )\n            oProSer:Set( hb_EnumIndex() )\n         end if\n\n      end if\n\n   next\n\n   if !lValid\n\n      if uFieldEmpresa( \"lSerNoCom\" )\n         msgStop( \"Hay números de serie sin stock para su venta.\" )\n      else\n         lValid            := ApoloMsgNoYes( \"Hay números de serie sin stock para su venta.\", \"¿Desea continuar con la venta?\" )\n      end if\n\n      if !Empty( oBrwSer ) .and. IsNum( n )\n         oBrwSer:nArrayAt  := n\n         oBrwSer:Refresh()\n      end if\n\n   end if\n\n   if !Empty( oProSer )\n      oProSer:Hide()\n   end if\n\n   CursorWE()\n\nReturn ( lValid )\n\n//---------------------------------------------------------------------------//\n\nStatic Function SalvarNumeroSerie( aNumSer, aTmp, oProSer, oDlg )\n\n   local cNumSer\n   local nTotUnd              := len( aNumSer )\n\n   oDlg:Disable()\n\n   EliminarNumeroSerie( aTmp )\n\n   if !Empty( oProSer )\n      oProSer:SetTotal( nTotUnd )\n   end if\n\n   for each cNumSer in aNumSer\n\n      ( dbfTmpSer )->( dbAppend() )\n      ( dbfTmpSer )->cRef        := aTmp[ _CREF        ]\n      ( dbfTmpSer )->cAlmLin     := aTmp[ _CALMLIN     ]\n      ( dbfTmpSer )->nNumLin     := aTmp[ _NNUMLIN     ]\n      ( dbfTmpSer )->lFacturado  := aTmp[ _dLFACTURADO ]\n      ( dbfTmpSer )->cNumSer     := cNumSer\n\n      if !Empty( oProSer ) .and. ( Mod( hb_enumindex(), int( nTotUnd / 100 ) ) == 0 )\n         oProSer:Set( hb_enumindex() )\n      end if\n\n   next\n\n   oDlg:Enable()\n   oDlg:End()\n\nReturn ( nil )\n\n//----------------------------------------------------------------------------//\n\nStatic Function EliminarNumeroSerie( aTmp )\n\n   while ( ( dbfTmpSer )->( dbSeek( Str( aTmp[ _NNUMLIN ], 4 ) + aTmp[ _CREF ] ) ) ) .and. !( dbfTmpSer )->( Eof() )\n      ( dbfTmpSer )->( dbDelete() )\n   end while\n\nReturn ( nil )\n\n//---------------------------------------------------------------------------//\n//\n// Importa presupuestos de clientes\n//\n\nSTATIC FUNCTION cPreCli( aGet, aTmp, oBrw, nMode )\n\n   local cDesAlb\n   local cPedido  := aGet[ _CNUMPRE ]:VarGet()\n   local lValid   := .f.\n\n   if nMode != APPD_MODE .OR. Empty( cPedido )\n      return .t.\n   end if\n\n   if dbSeekInOrd( cPedido, \"nNumPre\", dbfPreCliT )\n\n      if ( dbfPreCliT )->lEstado\n\n         MsgStop( \"Presupuesto ya aprobado\" )\n         lValid   := .f.\n\n      else\n\n         CursorWait()\n\n         HideImportacion( aGet )\n\n         aGet[ _CCODCLI ]:cText( ( dbfPreCliT )->CCODCLI )\n         aGet[ _CCODCLI ]:lValid()\n         aGet[ _CCODCLI ]:Disable()\n\n         aGet[ _CNOMCLI ]:cText( ( dbfPreCliT )->CNOMCLI )\n         aGet[ _CDIRCLI ]:cText( ( dbfPreCliT )->CDIRCLI )\n         aGet[ _CPOBCLI ]:cText( ( dbfPreCliT )->CPOBCLI )\n         aGet[ _CPRVCLI ]:cText( ( dbfPreCliT )->CPRVCLI )\n         aGet[ _CPOSCLI ]:cText( ( dbfPreCliT )->CPOSCLI )\n         aGet[ _CDNICLI ]:cText( ( dbfPreCliT )->CDNICLI )\n         aGet[ _CTLFCLI ]:cText( ( dbfPreCliT )->CTLFCLI )\n\n         aGet[ _CCODALM ]:cText( ( dbfPreCliT )->CCODALM )\n         aGet[ _CCODALM ]:lValid()\n\n         aGet[ _CCODCAJ ]:cText( ( dbfPreCliT )->cCodCaj )\n         aGet[ _CCODCAJ ]:lValid()\n\n         aGet[ _CCODPAGO]:cText( ( dbfPreCliT )->CCODPGO )\n         aGet[ _CCODPAGO]:lValid()\n\n         aGet[ _CCODAGE ]:cText( ( dbfPreCliT )->CCODAGE )\n         aGet[ _CCODAGE ]:lValid()\n\n         aGet[ _NPCTCOMAGE]:cText( ( dbfPreCliT )->nPctComAge )\n\n         aGet[ _CCODTAR ]:cText( ( dbfPreCliT )->CCODTAR )\n         aGet[ _CCODTAR ]:lValid()\n\n         aGet[ _CCODOBR ]:cText( ( dbfPreCliT )->CCODOBR )\n         aGet[ _CCODOBR ]:lValid()\n\n         aGet[ _NTARIFA ]:cText( ( dbfPreCliT )->nTarifa )\n\n         aGet[ _CCODTRN ]:cText( ( dbfPreCliT )->cCodTrn )\n         aGet[ _CCODTRN ]:lValid() \n\n         aGet[ _LIVAINC ]:Click( ( dbfPreCliT )->lIvaInc )\n         aGet[ _LRECARGO]:Click( ( dbfPreCliT )->lRecargo )\n         aGet[ _LOPERPV ]:Click( ( dbfPreCliT )->lOperPv )\n\n         aGet[ _CCONDENT]:cText( ( dbfPreCliT )->cCondEnt )\n         aGet[ _MCOMENT ]:cText( ( dbfPreCliT )->mComent )\n         aGet[ _MOBSERV ]:cText( ( dbfPreCliT )->mObserv )\n\n         aGet[ _CDTOESP ]:cText( ( dbfPreCliT )->cDtoEsp )\n         aGet[ _CDPP    ]:cText( ( dbfPreCliT )->cDpp    )\n         aGet[ _NDTOESP ]:cText( ( dbfPreCliT )->nDtoEsp )\n         aGet[ _NDPP    ]:cText( ( dbfPreCliT )->nDpp    )\n         aGet[ _CDTOUNO ]:cText( ( dbfPreCliT )->cDtoUno )\n         aGet[ _NDTOUNO ]:cText( ( dbfPreCliT )->nDtoUno )\n         aGet[ _CDTODOS ]:cText( ( dbfPreCliT )->cDtoDos )\n         aGet[ _NDTODOS ]:cText( ( dbfPreCliT )->nDtoDos )\n         aGet[ _CMANOBR ]:cText( ( dbfPreCliT )->cManObr )\n         aGet[ _NIVAMAN ]:cText( ( dbfPreCliT )->nIvaMan )\n         aGet[ _NMANOBR ]:cText( ( dbfPreCliT )->nManObr )\n         aGet[ _NBULTOS ]:cText( ( dbfPreCliT )->nBultos )\n\n         aTmp[ _CCODGRP]         := ( dbfPreCliT )->cCodGrp\n         aTmp[ _LMODCLI]         := ( dbfPreCliT )->lModCli\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]      := ( dbfPreCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]      := ( dbfPreCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]      := ( dbfPreCliT )->dFecSal\n\n         if ( dbfPreCliL )->( dbSeek( cPedido ) )\n\n            ( dbfTmpLin )->( dbAppend() )\n            cDesAlb                    := \"\"\n            cDesAlb                    += \"Presupuesto Nº \" + ( dbfPreCliT )->cSerPre + \"/\" + AllTrim( Str( ( dbfPreCliT )->nNumPre ) ) + \"/\" + ( dbfPreCliT )->cSufPre\n            cDesAlb                    += \" - Fecha \" + Dtoc( ( dbfPreCliT )->dFecPre )\n            ( dbfTmpLin )->MLNGDES     := cDesAlb\n            ( dbfTmpLin )->LCONTROL    := .t.\n\n            while ( (dbfPreCliL)->cSerPre + Str( (dbfPreCliL)->nNumPre ) + (dbfPreCliL)->cSufPre == cPedido )\n\n               (dbfTmpLin)->( dbAppend() )\n\n               (dbfTmpLin)->nNumLin    := (dbfPreCliL)->nNumLin\n               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef\n               (dbfTmpLin)->cDetalle   := (dbfPreCliL)->cDetAlle\n               (dbfTmpLin)->mLngDes    := (dbfPreCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfPreCliL)->mNumSer\n               (dbfTmpLin)->nPreUnit   := (dbfPreCliL)->nPreDiv\n               (dbfTmpLin)->nPntVer    := (dbfPreCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfPreCliL)->nImpTrn\n               (dbfTmpLin)->nPESOKG    := (dbfPreCliL)->nPesOkg\n               (dbfTmpLin)->cPESOKG    := (dbfPreCliL)->cPesOkg\n               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad\n               (dbfTmpLin)->nVolumen   := (dbfPreCliL)->nVolumen\n               (dbfTmpLin)->cVolumen   := (dbfPreCliL)->cVolumen\n               (dbfTmpLin)->nIVA       := (dbfPreCliL)->nIva\n               (dbfTmpLin)->nReq       := (dbfPreCliL)->nReq\n               (dbfTmpLin)->cUNIDAD    := (dbfPreCliL)->cUnidad\n               (dbfTmpLin)->nDTO       := (dbfPreCliL)->nDto\n               (dbfTmpLin)->nDTOPRM    := (dbfPreCliL)->nDtoPrm\n               (dbfTmpLin)->nCOMAGE    := (dbfPreCliL)->nComAge\n               (dbfTmpLin)->lTOTLIN    := (dbfPreCliL)->lTotLin\n               (dbfTmpLin)->nDtoDiv    := (dbfPreCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfPreCliL)->nCtlStk\n               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv\n               (dbfTmpLin)->nPvpRec    := (dbfPreCliL)->nPvpRec\n               (dbfTmpLin)->cTipMov    := (dbfPreCliL)->cTipMov\n               (dbfTmpLin)->cAlmLin    := (dbfPreCliL)->cAlmLin\n               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n               (dbfTmpLin)->nValImp    := (dbfPreCliL)->nValImp\n               (dbfTmpLin)->CCODPR1    := (dbfPreCliL)->cCodPr1\n               (dbfTmpLin)->CCODPR2    := (dbfPreCliL)->cCodPr2\n               (dbfTmpLin)->CVALPR1    := (dbfPreCliL)->cValPr1\n               (dbfTmpLin)->CVALPR2    := (dbfPreCliL)->cValPr2\n               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanPre\n               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja\n               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit\n               (dbfTmpLin)->lKitArt    := (dbfPreCLiL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfPreCLiL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfPreCLiL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfPreCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfPreCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfPreCliL)->cLote\n               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta\n               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin\n               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfPreCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt\n               (dbfTmpLin)->lControl   := (dbfPreCliL)->lControl\n               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe\n\n               (dbfPreCliL)->( dbSkip() )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del presupuesto----------------------------\n            */\n\n            if ( dbfPreCliI )->( dbSeek( cPedido ) )\n\n               while ( dbfPreCliI )->cSerPre + Str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cPedido .and. !( dbfPreCliI )->( Eof() )\n                  dbPass( dbfPreCliI, dbfTmpInc, .t. )\n                  ( dbfPreCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfPreCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del presupuesto-----------------------------\n            */\n\n            if ( dbfPreCliD )->( dbSeek( cPedido ) )\n\n               while ( dbfPreCliD )->cSerPre + Str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cPedido .and. !( dbfPreCliD )->( Eof() )\n                  dbPass( dbfPreCliD, dbfTmpDoc, .t. )\n                  ( dbfPreCliD )->( dbSkip() )\n               end while\n\n            end if \n\n            ( dbfPreCliD )->( dbGoTop() )\n\n            oBrw:refresh()\n            oBrw:setFocus()\n\n         end if\n\n         lValid   := .t.\n\n         if ( dbfPreCliT )->( dbRLock() )\n            ( dbfPreCliT )->lEstado := .t.\n            ( dbfPreCliT )->( dbUnlock() )\n         end if\n\n         CursorWE()\n\n      end if\n\n      HideImportacion( aGet, aGet[ _CNUMPRE ] )\n\n   else\n\n      MsgStop( \"Presupuesto no existe\" )\n\n   end if\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\nSTATIC FUNCTION cSatCli( aGet, aTmp, oBrw, nMode )\n\n   local lValid   := .f.\n   local cDesAlb\n   local cNumSat  := aGet[ _CNUMSAT ]:VarGet()\n\n   if nMode != APPD_MODE .OR. Empty( cNumSat )\n      return .t.\n   end if\n\n   if dbSeekInOrd( cNumSat, \"nNumSat\", dbfSatCliT )\n\n      if ( dbfSatCliT )->lEstado\n\n         MsgStop( \"S.A.T. ya procesado\" )\n         lValid   := .f.\n\n      else\n\n         CursorWait()\n\n         HideImportacion( aGet, aGet[ _CNUMSAT ] )\n\n         aGet[ _CCODCLI ]:cText( ( dbfSatCliT )->CCODCLI )\n         aGet[ _CCODCLI ]:lValid()\n         aGet[ _CCODCLI ]:Disable()\n\n         aGet[ _CNOMCLI ]:cText( ( dbfSatCliT )->CNOMCLI )\n         aGet[ _CDIRCLI ]:cText( ( dbfSatCliT )->CDIRCLI )\n         aGet[ _CPOBCLI ]:cText( ( dbfSatCliT )->CPOBCLI )\n         aGet[ _CPRVCLI ]:cText( ( dbfSatCliT )->CPRVCLI )\n         aGet[ _CPOSCLI ]:cText( ( dbfSatCliT )->CPOSCLI )\n         aGet[ _CDNICLI ]:cText( ( dbfSatCliT )->CDNICLI )\n         aGet[ _CTLFCLI ]:cText( ( dbfSatCliT )->CTLFCLI )\n\n         aGet[ _CCODALM ]:cText( ( dbfSatCliT )->CCODALM )\n         aGet[ _CCODALM ]:lValid()\n\n         aGet[ _CCODCAJ ]:cText( ( dbfSatCliT )->cCodCaj )\n         aGet[ _CCODCAJ ]:lValid()\n\n         aGet[ _CCODPAGO]:cText( ( dbfSatCliT )->CCODPGO )\n         aGet[ _CCODPAGO]:lValid()\n\n         aGet[ _CCODAGE ]:cText( ( dbfSatCliT )->CCODAGE )\n         aGet[ _CCODAGE ]:lValid()\n\n         aGet[ _NPCTCOMAGE]:cText( ( dbfSatCliT )->nPctComAge )\n\n         aGet[ _CCODTAR ]:cText( ( dbfSatCliT )->CCODTAR )\n         aGet[ _CCODTAR ]:lValid()\n\n         aGet[ _CCODOBR ]:cText( ( dbfSatCliT )->CCODOBR )\n         aGet[ _CCODOBR ]:lValid()\n\n         aGet[ _NTARIFA ]:cText( ( dbfSatCliT )->nTarifa )\n\n         aGet[ _CCODTRN ]:cText( ( dbfSatCliT )->cCodTrn )\n         aGet[ _CCODTRN ]:lValid() \n\n         aGet[ _LIVAINC ]:Click( ( dbfSatCliT )->lIvaInc )\n         aGet[ _LRECARGO]:Click( ( dbfSatCliT )->lRecargo )\n         aGet[ _LOPERPV ]:Click( ( dbfSatCliT )->lOperPv )\n\n         aGet[ _CCONDENT]:cText( ( dbfSatCliT )->cCondEnt )\n         aGet[ _MCOMENT ]:cText( ( dbfSatCliT )->mComent )\n         aGet[ _MOBSERV ]:cText( ( dbfSatCliT )->mObserv )\n\n         aGet[ _CDTOESP ]:cText( ( dbfSatCliT )->cDtoEsp )\n         aGet[ _CDPP    ]:cText( ( dbfSatCliT )->cDpp    )\n         aGet[ _NDTOESP ]:cText( ( dbfSatCliT )->nDtoEsp )\n         aGet[ _NDPP    ]:cText( ( dbfSatCliT )->nDpp    )\n         aGet[ _CDTOUNO ]:cText( ( dbfSatCliT )->cDtoUno )\n         aGet[ _NDTOUNO ]:cText( ( dbfSatCliT )->nDtoUno )\n         aGet[ _CDTODOS ]:cText( ( dbfSatCliT )->cDtoDos )\n         aGet[ _NDTODOS ]:cText( ( dbfSatCliT )->nDtoDos )\n         aGet[ _CMANOBR ]:cText( ( dbfSatCliT )->cManObr )\n         aGet[ _NIVAMAN ]:cText( ( dbfSatCliT )->nIvaMan )\n         aGet[ _NMANOBR ]:cText( ( dbfSatCliT )->nManObr )\n         aGet[ _NBULTOS ]:cText( ( dbfSatCliT )->nBultos )\n\n         aTmp[ _CCODGRP]         := ( dbfSatCliT )->cCodGrp\n         aTmp[ _LMODCLI]         := ( dbfSatCliT )->lModCli\n\n         /*\n         Datos de alquileres---------------------------------------------------\n         */\n\n         aTmp[ _LALQUILER ]      := ( dbfSatCliT )->lAlquiler\n         aTmp[ _DFECENTR  ]      := ( dbfSatCliT )->dFecEntr\n         aTmp[ _DFECSAL   ]      := ( dbfSatCliT )->dFecSal\n\n         if ( dbfSatCliL )->( dbSeek( cNumSat ) )\n\n            ( dbfTmpLin )->( dbAppend() )\n            cDesAlb                    := \"\"\n            cDesAlb                    += \"S.A.T. Nº \" + ( dbfSatCliT )->cSerSat + \"/\" + AllTrim( Str( ( dbfSatCliT )->nNumSat ) ) + \"/\" + ( dbfSatCliT )->cSufSat\n            cDesAlb                    += \" - Fecha \" + Dtoc( ( dbfSatCliT )->dFecSat )\n            ( dbfTmpLin )->MLNGDES     := cDesAlb\n            ( dbfTmpLin )->LCONTROL    := .t.\n\n            while ( (dbfSatCliL)->cSerSat + Str( (dbfSatCliL)->nNumSat ) + (dbfSatCliL)->cSufSat == cNumSat )\n\n               (dbfTmpLin)->( dbAppend() )\n\n               (dbfTmpLin)->nNumLin    := (dbfSatCliL)->nNumLin\n               (dbfTmpLin)->cRef       := (dbfSatCliL)->cRef\n               (dbfTmpLin)->cDetalle   := (dbfSatCliL)->cDetAlle\n               (dbfTmpLin)->mLngDes    := (dbfSatCliL)->mLngDes\n               (dbfTmpLin)->mNumSer    := (dbfSatCliL)->mNumSer\n               (dbfTmpLin)->nPreUnit   := (dbfSatCliL)->nPreDiv\n               (dbfTmpLin)->nPntVer    := (dbfSatCliL)->nPntVer\n               (dbfTmpLin)->nImpTrn    := (dbfSatCliL)->nImpTrn\n               (dbfTmpLin)->nPesoKG    := (dbfSatCliL)->nPesokg\n               (dbfTmpLin)->cPesoKG    := (dbfSatCliL)->cPesokg\n               (dbfTmpLin)->cUnidad    := (dbfSatCliL)->cUnidad\n               (dbfTmpLin)->nVolumen   := (dbfSatCliL)->nVolumen\n               (dbfTmpLin)->cVolumen   := (dbfSatCliL)->cVolumen\n               (dbfTmpLin)->nIVA       := (dbfSatCliL)->nIva\n               (dbfTmpLin)->nReq       := (dbfSatCliL)->nReq\n               (dbfTmpLin)->cUNIDAD    := (dbfSatCliL)->cUnidad\n               (dbfTmpLin)->nDTO       := (dbfSatCliL)->nDto\n               (dbfTmpLin)->nDTOPRM    := (dbfSatCliL)->nDtoPrm\n               (dbfTmpLin)->nCOMAGE    := (dbfSatCliL)->nComAge\n               (dbfTmpLin)->lTOTLIN    := (dbfSatCliL)->lTotLin\n               (dbfTmpLin)->nDtoDiv    := (dbfSatCliL)->nDtoDiv\n               (dbfTmpLin)->nCtlStk    := (dbfSatCliL)->nCtlStk\n               (dbfTmpLin)->nCosDiv    := (dbfSatCliL)->nCosDiv\n               (dbfTmpLin)->cTipMov    := (dbfSatCliL)->cTipMov\n               (dbfTmpLin)->cAlmLin    := (dbfSatCliL)->cAlmLin\n               (dbfTmpLin)->cCodImp    := (dbfPedCLiL)->cCodImp\n               (dbfTmpLin)->nValImp    := (dbfSatCliL)->nValImp\n               (dbfTmpLin)->CCODPR1    := (dbfSatCliL)->cCodPr1\n               (dbfTmpLin)->CCODPR2    := (dbfSatCliL)->cCodPr2\n               (dbfTmpLin)->CVALPR1    := (dbfSatCliL)->cValPr1\n               (dbfTmpLin)->CVALPR2    := (dbfSatCliL)->cValPr2\n               (dbfTmpLin)->nCanEnt    := (dbfSatCLiL)->nCanSat\n               (dbfTmpLin)->nUniCaja   := (dbfSatCLiL)->nUniCaja\n               (dbfTmpLin)->nUndKit    := (dbfSatCLiL)->nUndKit\n               (dbfTmpLin)->lKitArt    := (dbfSatCLiL)->lKitArt\n               (dbfTmpLin)->lKitChl    := (dbfSatCLiL)->lKitChl\n               (dbfTmpLin)->lKitPrc    := (dbfSatCliL)->lKitPrc\n               (dbfTmpLin)->nMesGrt    := (dbfSatCLiL)->nMesGrt\n               (dbfTmpLin)->lLote      := (dbfSatCliL)->lLote\n               (dbfTmpLin)->nLote      := (dbfSatCliL)->nLote\n               (dbfTmpLin)->cLote      := (dbfSatCliL)->cLote\n               (dbfTmpLin)->lMsgVta    := (dbfSatCliL)->lMsgVta\n               (dbfTmpLin)->lNotVta    := (dbfSatCliL)->lNotVta\n               (dbfTmpLin)->lImpLin    := (dbfSatCliL)->lImpLin\n               (dbfTmpLin)->cCodTip    := (dbfSatCliL)->cCodTip\n               (dbfTmpLin)->mObsLin    := (dbfSatCliL)->mObsLin\n               (dbfTmpLin)->Descrip    := (dbfPedCliL)->Descrip\n               (dbfTmpLin)->cCodPrv    := (dbfSatCliL)->cCodPrv\n               (dbfTmpLin)->cNomPrv    := (dbfSatCliL)->cNomPrv\n               (dbfTmpLin)->cImagen    := (dbfSatCliL)->cImagen\n               (dbfTmpLin)->cCodFam    := (dbfSatCliL)->cCodFam\n               (dbfTmpLin)->cGrpFam    := (dbfSatCliL)->cGrpFam\n               (dbfTmpLin)->cRefPrv    := (dbfSatCliL)->cRefPrv\n               (dbfTmpLin)->dFecEnt    := (dbfSatCliL)->dFecEnt\n               (dbfTmpLin)->dFecSal    := (dbfSatCliL)->dFecSal\n               (dbfTmpLin)->nPreAlq    := (dbfSatCliL)->nPreAlq\n               (dbfTmpLin)->lAlquiler  := (dbfSatCliL)->lAlquiler\n               (dbfTmpLin)->nNumMed    := (dbfSatCliL)->nNumMed\n               (dbfTmpLin)->nMedUno    := (dbfSatCliL)->nMedUno\n               (dbfTmpLin)->nMedDos    := (dbfSatCliL)->nMedDos\n               (dbfTmpLin)->nMedTre    := (dbfSatCliL)->nMedTre\n               (dbfTmpLin)->nPuntos    := (dbfSatCliL)->nPuntos\n               (dbfTmpLin)->nValPnt    := (dbfSatCliL)->nValPnt\n               (dbfTmpLin)->nDtoPnt    := (dbfSatCliL)->nDtoPnt\n               (dbfTmpLin)->nIncPnt    := (dbfSatCliL)->nIncPnt\n               (dbfTmpLin)->lControl   := (dbfSatCliL)->lControl\n               (dbfTmpLin)->lLinOfe    := (dbfSatCliL)->lLinOfe\n               (dbfTmpLin)->cNumSat    := cNumSat\n\n               (dbfSatCliL)->( dbSkip() )\n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del SAT----------------------------\n            */\n\n            if ( dbfSatCliI )->( dbSeek( cNumSat ) )\n\n               while ( dbfSatCliI )->cSerSat + Str( ( dbfSatCliI )->nNumSat ) + ( dbfSatCliI )->cSufSat == cNumSat .and. !( dbfSatCliI )->( Eof() )\n                  dbPass( dbfSatCliI, dbfTmpInc, .t. )\n                  ( dbfSatCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfSatCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del SAT-----------------------------\n            */\n\n            if ( dbfSatCliD )->( dbSeek( cNumSat ) )\n\n               while ( dbfSatCliD )->cSerSat + Str( ( dbfSatCliD )->nNumSat ) + ( dbfSatCliD )->cSufSat == cNumSat .and. !( dbfSatCliD )->( Eof() )\n                  dbPass( dbfSatCliD, dbfTmpDoc, .t. )\n                  ( dbfSatCliD )->( dbSkip() )\n               end while\n\n            end if \n   \n            /*\n            Pasamos todas las series----------------------------------------------\n            */\n\n            if ( dbfSatCliS )->( dbSeek( cNumSat ) )\n\n               while ( dbfSatCliS )->cSerSat + Str( ( dbfSatCliS )->nNumSat ) + ( dbfSatCliS )->cSufSat == cNumSat .and. !( dbfSatCliS )->( Eof() )\n                  dbPass( dbfSatCliS, dbfTmpSer, .t. )\n                  ( dbfSatCliS )->( dbSkip() )\n               end while\n\n            end if \n\n            oBrw:Refresh()\n            oBrw:SetFocus()\n\n         end if\n\n         lValid   := .t.\n\n         if ( dbfSatCliT )->( dbRLock() )\n            ( dbfSatCliT )->lEstado := .t.\n            ( dbfSatCliT )->( dbUnlock() )\n         end if\n\n         CursorWE()\n\n      end if\n\n      aGet[ _CNUMPED ]:Hide()\n      aGet[ _CNUMSAT ]:Show()\n\n   else\n\n      MsgStop( \"S.A.T. no existe\" )\n\n   end if\n\nRETURN lValid\n\n//---------------------------------------------------------------------------//\n\n/*\nFuncion que nos permite a¤adir a los albaranes pedidos ye existentes\n*/\n\nSTATIC FUNCTION GrpSat( aGet, aTmp, oBrw )\n\n   local oDlg\n   local nDiv\n   local nItem       := 1\n   local cCodAge\n   local oBrwLin\n   local nOrdAnt\n   local nNumLin\n   local lCodAge     := .f.\n   local nOffSet     := 0\n   local cDesAlb     := \"\"\n   local cCodCli     := aGet[ _CCODCLI ]:varGet()\n   local nTotPed\n   local nTotRec\n   local nTotPdt\n   local lAlquiler   := .f.\n   local cCliente    := RTrim( aTmp[ _CNOMCLI ] )\n   local cObra       := if( Empty( aTmp[ _CCODOBR ] ), \"Todas\", Rtrim( aTmp[ _CCODOBR ] ) )  \n   local cIva        := cImp() + Space( 1 ) + if( aTmp[ _LIVAINC ], \"Incluido\", \"Desglosado\" )\n\n   aSats             := {}\n\n   if !Empty( oTipAlb ) .and. oTipAlb:nAt == 2\n      lAlquiler      := .t.\n   end if\n\n   if Empty( cCodCli )\n      msgStop( \"Es necesario codificar un cliente\", \"Agrupar SAT\" )\n      return .t.\n   end if\n\n   if !Empty( aGet[ _CNUMSAT ]:VarGet() )\n      msgStop( \"Ya ha importado un SAT\", \"Agrupar SAT\" )\n      return .t.\n   end if\n\n\n   /*\n   Seleccion de Registros\n   --------------------------------------------------------------------------\n   */\n\n   CursorWait()\n   \n   nOrdAnt           := ( dbfSatCliT )->( ordSetFocus( \"cCodCli\" ) )\n\n   if ( dbfSatCliT )->( dbSeek( cCodCli ) )\n\n      while ( dbfSatCliT )->cCodCli == cCodCli .and. ( dbfSatCliT )->( !eof() )\n\n         if ( dbfSatCliT )->lAlquiler == lAlquiler                                              .and.;\n            !( dbfSatCliT )->lEstado                                                            .and.;\n            ( dbfSatCliT )->lIvaInc == aTmp[ _LIVAINC ]                                         .and.;\n            if( Empty( aTmp[ _CCODOBR ] ), .t., ( dbfSatCliT )->cCodObr == aTmp[ _CCODOBR ] )   .and.;\n            aScan( aNumSat, ( dbfSatCliT )->cSerSat + Str( ( dbfSatCliT )->nNumSat ) + ( dbfSatCliT )->cSufSat ) == 0\n\n            aAdd( aSats,    {  .f. ,;\n                                 ( dbfSatCliT )->lEstado,;\n                                 ( dbfSatCliT )->cSerSat + Str( ( dbfSatCliT )->nNumSat ) + ( dbfSatCliT )->cSufSat,;\n                                 ( dbfSatCliT )->dFecSat ,;\n                                 ( dbfSatCliT )->cCodCli ,;\n                                 ( dbfSatCliT )->cNomCli ,;\n                                 ( dbfSatCliT )->cCodObr ,;\n                                 RetObras( ( dbfSatCliT )->cCodCli, ( dbfSatCliT )->cCodObr, dbfObrasT ),;\n                                 ( dbfSatCliT )->cCodAge,;\n                                 ( dbfSatCliT )->nTotSat } )\n\n         endif\n\n         ( dbfSatCliT )->( dbSkip() )\n\n      end while\n\n   end if\n\n   ( dbfSatCliT )->( ordSetFocus( nOrdAnt ) )\n\n   CursorWE()\n\n   /*\n   Puede que no hay albaranes que facturar-------------------------------------\n   */\n\n   if Len( aSats ) == 0\n      msgStop( \"No existen S.A.T. pendientes de este cliente\" )\n      return .t.\n   end if\n\n   /*\n   Caja de Dialogo\n   ----------------------------------------------------------------------------\n   */\n\n   DEFINE DIALOG  oDlg ;\n      RESOURCE    \"SET_ALBARAN\" ;\n      TITLE       \"Agrupando S.A.T.\"\n\n      REDEFINE SAY PROMPT cCliente ;\n         ID       501 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cObra ;\n         ID       502 ;\n         OF       oDlg\n\n      REDEFINE SAY PROMPT cIva ;\n         ID       503 ;\n         OF       oDlg\n\n      oBrwLin                       := TXBrowse():New( oDlg )\n\n      oBrwLin:bClrSel               := {|| { CLR_BLACK, Rgb( 229, 229, 229 ) } }\n      oBrwLin:bClrSelFocus          := {|| { CLR_BLACK, Rgb( 167, 205, 240 ) } }\n\n      oBrwLin:SetArray( aSats, , , .f. )\n      oBrwLin:lHscroll              := .f.\n\n      oBrwLin:nMarqueeStyle         := 5\n      oBrwLin:lRecordSelector       := .f.\n\n      oBrwLin:CreateFromResource( 130 )\n\n      oBrwLin:bLDblClick            := {|| aSats[ oBrwLin:nArrayAt, 1 ] := !aSats[ oBrwLin:nArrayAt, 1 ], oBrwLin:refresh() }\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Seleccionado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| aSats[ oBrwLin:nArrayAt, 1 ] }\n         :nWidth           := 20\n         :SetCheck( { \"Sel16\", \"Nil16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Estado\"\n         :bStrData         := {|| \"\" }\n         :bEditValue       := {|| ( aSats[ oBrwLin:nArrayAt, 2 ] ) }\n         :nWidth           := 20\n         :SetCheck( { \"Bullet_Square_Yellow_16\", \"Bullet_Square_Red_16\" } )\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Número\"\n         :bEditValue       := {|| aSats[ oBrwLin:nArrayAt, 3 ] }\n         :cEditPicture     := \"@R #/999999999/##\"\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Fecha\"\n         :bEditValue       := {|| Dtoc( aSats[ oBrwLin:nArrayAt, 4 ] ) }\n         :nWidth           := 80\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Cliente\"\n         :bEditValue       := {|| Rtrim( aSats[ oBrwLin:nArrayAt, 5 ] ) + Space(1) + aSats[ oBrwLin:nArrayAt, 6 ] }\n         :nWidth           := 250\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Obra\"\n         :bEditValue       := {|| Rtrim( aSats[ oBrwLin:nArrayAt, 7 ] ) + Space(1) + aSats[ oBrwLin:nArrayAt, 8 ] }\n         :nWidth           := 220\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Agente\"\n         :bEditValue       := {|| aSats[ oBrwLin:nArrayAt, 9 ] }\n         :lHide            := .t.\n         :nWidth           := 60\n      end with\n\n      with object ( oBrwLin:AddCol() )\n         :cHeader          := \"Total\"\n         :bEditValue       := {|| aSats[ oBrwLin:nArrayAt, 10 ] }\n         :cEditPicture     := cPorDiv( ( dbfSatCliT )->cDivSat, dbfDiv )\n         :nWidth           := 80\n         :nDataStrAlign    := 1\n         :nHeadStrAlign    := 1\n      end with\n\n      REDEFINE BUTTON ;\n         ID       514 ;\n         OF       oDlg ;\n         ACTION   (  aSats[ oBrwLin:nArrayAt, 1 ] := !aSats[ oBrwLin:nArrayAt, 1 ],;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       516 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aSats, { |aItem| aItem[1] := .t. } ),;\n                     oBrwLin:refresh(),;\n                     oBrwLin:setFocus() )\n\n      REDEFINE BUTTON ;\n         ID       517 ;\n         OF       oDlg ;\n         ACTION   (  aEval( aSats, { |aItem| aItem[1] := .f. } ),;\n                     oBrwLin:Refresh(),;\n                     oBrwLin:SetFocus() )\n\n      REDEFINE BUTTON ;\n         ID       518 ;\n         OF       oDlg ;\n         ACTION   ( ZooSatCli( aSats[ oBrwLin:nArrayAt, 3 ] ) )\n\n      REDEFINE BUTTON ;\n         ID       IDOK ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end( IDOK ) )\n\n      REDEFINE BUTTON ;\n         ID       IDCANCEL ;\n         OF       oDlg ;\n         ACTION   ( oDlg:end() )\n\n   ACTIVATE DIALOG oDlg CENTER\n\n   if oDlg:nResult != IDOK\n      aSats       := {}\n   end if\n\n   /*\n   Llamada a la funcion que busca el Albaran-----------------------------------\n   */\n\n   if oDlg:nResult == IDOK .and. Len( aSats ) >= 1\n\n      CursorWait()\n\n      HideImportacion( aGet )      \n\n      /*\n      A¤adimos los albaranes seleccionado para despues-------------------------\n      */\n\n      for nItem := 1 to Len( aSats )\n\n         if ( aSats[ nItem, 1 ] )\n\n            aAdd( aNumSat, aSats[ nItem, 3 ] )\n\n            if Empty( cCodAge )\n               cCodAge  := aSats[ nItem, 9 ]\n            end if\n\n            if cCodAge != aSats[ nItem, 9 ]\n               lCodAge  := .t.\n            end if\n\n         end if\n\n      next\n\n      if lCodAge\n         MsgInfo( \"Existen conflictos de agentes\" )\n      end if\n\n      for nItem := 1 to Len( aSats )\n\n         /*\n         Cabeceras de albaranes a facturas-------------------------------------\n         */\n\n         if !lCodAge .and. cCodAge != nil\n            aGet[ _CCODAGE ]:cText( cCodAge )\n            aGet[ _CCODAGE ]:lValid()\n         end if\n\n         if ( dbfSatCliT )->( dbSeek( aSats[ nItem, 3 ] ) ) .and. aSats[ nItem, 1 ]\n\n            if ( dbfSatCliT )->lRecargo\n               aTmp[ _LRECARGO ] := .t.\n               aGet[ _LRECARGO ]:Refresh()\n            end if\n\n            if ( dbfSatCliT )->lOperPv\n               aTmp[ _LOPERPV ] := .t.\n               aGet[ _LOPERPV ]:Refresh()\n            end if\n\n         end if\n\n         /*\n         Detalle de albaranes a facturas---------------------------------------\n         */\n\n         if ( dbfSatCliL )->( dbSeek( aSats[ nItem, 3] ) ) .AND. aSats[ nItem, 1]\n\n            /*\n            Cabeceras de Albaranes-----------------------------------------------\n            */\n\n            nNumLin                       := nil\n\n            ( dbfTmpLin )->( dbAppend() )\n            cDesAlb                       := \"SAT Nº \" + StrTran( Alltrim( Trans( aSats[ nItem, 3 ], \"@R #/999999999/##\" ) ), \" \", \"\" )\n            cDesAlb                       += \" - Fecha \" + Dtoc( aSats[ nItem, 4] )\n            ( dbfTmpLin )->mLngDes        := cDesAlb\n            ( dbfTmpLin )->lControl       := .t.\n            ( dbfTmpLin )->nNumLin        := ++nOffSet\n\n            /*\n            Mientras estemos en el mismo Satido--------------------------------\n            */\n\n            while ( dbfSatCliL )->cSerSat + Str( ( dbfSatCliL )->nNumSat ) + ( dbfSatCliL )->cSufSat == aSats[ nItem, 3]\n\n               if nNumLin != (dbfSatCliL)->nNumLin\n                  ++nOffSet\n                  nNumLin                 := ( dbfSatCliL )->nNumLin\n               end if\n\n               ( dbfTmpLin )->( dbAppend() )\n\n               ( dbfTmpLin )->cNumSat     := aSats[ nItem, 3 ]\n               ( dbfTmpLin )->nNumAlb     := 0 \n               ( dbfTmpLin )->nNumLin     := nOffSet\n               ( dbfTmpLin )->cRef        := ( dbfSatCliL )->cRef\n               ( dbfTmpLin )->cDetalle    := ( dbfSatCliL )->cDetalle\n               ( dbfTmpLin )->mLngDes     := ( dbfSatCliL )->mLngDes\n               ( dbfTmpLin )->nPreUnit    := ( dbfSatCliL )->nPreDiv\n               ( dbfTmpLin )->cUnidad     := ( dbfSatCliL )->cUnidad\n               ( dbfTmpLin )->nPesoKg     := ( dbfSatCliL )->nPesoKg\n               ( dbfTmpLin )->cPesoKg     := ( dbfSatCliL )->cPesoKg\n               ( dbfTmpLin )->nVolumen    := ( dbfSatCliL )->nVolumen\n               ( dbfTmpLin )->cVolumen    := ( dbfSatCliL )->cVolumen\n               ( dbfTmpLin )->nIva        := ( dbfSatClil )->nIva\n               ( dbfTmpLin )->nReq        := ( dbfSatClil )->nReq\n               ( dbfTmpLin )->nDto        := ( dbfSatClil )->nDto\n               ( dbfTmpLin )->nPntVer     := ( dbfSatCliL )->nPntVer\n               ( dbfTmpLin )->nImpTrn     := ( dbfSatCliL )->nImpTrn\n               ( dbfTmpLin )->nDtoPrm     := ( dbfSatCliL )->nDtoPrm\n               ( dbfTmpLin )->nComAge     := ( dbfSatCliL )->nComAge\n               ( dbfTmpLin )->dFecHa      := ( dbfSatCliL )->dFecha\n               ( dbfTmpLin )->cTipMov     := ( dbfSatCliL )->cTipMov\n               ( dbfTmpLin )->nDtoDiv     := ( dbfSatCliL )->nDtoDiv\n               ( dbfTmpLin )->nUniCaja    := ( dbfSatCliL )->nUniCaja\n               ( dbfTmpLin )->nCanEnt     := ( dbfSatCliL )->nCanSat \n               ( dbfTmpLin )->nUndKit     := ( dbfSatCliL )->nUndKit\n               ( dbfTmpLin )->lKitArt     := ( dbfSatCliL )->lKitArt\n               ( dbfTmpLin )->lKitChl     := ( dbfSatCliL )->lKitChl\n               ( dbfTmpLin )->lKitPrc     := ( dbfSatCliL )->lKitPrc\n               ( dbfTmpLin )->cCodPr1     := ( dbfSatCliL )->cCodPr1\n               ( dbfTmpLin )->cCodPr2     := ( dbfSatCliL )->cCodPr2\n               ( dbfTmpLin )->cValPr1     := ( dbfSatCliL )->cValPr1\n               ( dbfTmpLin )->cValPr2     := ( dbfSatCliL )->cValPr2\n               ( dbfTmpLin )->nCosDiv     := ( dbfSatCliL )->nCosDiv\n               ( dbfTmpLin )->nMesGrt     := ( dbfSatCliL )->nMesGrt\n               ( dbfTmpLin )->lMsgVta     := ( dbfSatCliL )->lMsgVta\n               ( dbfTmpLin )->lNotVta     := ( dbfSatCliL )->lNotVta\n               ( dbfTmpLin )->lLote       := ( dbfSatCliL )->lLote\n               ( dbfTmpLin )->nLote       := ( dbfSatCliL )->nLote\n               ( dbfTmpLin )->cLote       := ( dbfSatCliL )->cLote\n               ( dbfTmpLin )->mObsLin     := ( dbfSatCliL )->mObsLin\n               ( dbfTmpLin )->Descrip     := ( dbfSatCliL )->Descrip\n               ( dbfTmpLin )->cCodPrv     := ( dbfSatCliL )->cCodPrv\n               ( dbfTmpLin )->cNomPrv     := ( dbfSatCliL )->cNomPrv\n               ( dbfTmpLin )->cCodFam     := ( dbfSatCliL )->cCodFam\n               ( dbfTmpLin )->cGrpFam     := ( dbfSatCliL )->cGrpFam\n               ( dbfTmpLin )->cAlmLin     := ( dbfSatCliL )->cAlmLin\n               ( dbfTmpLin )->cRefPrv     := ( dbfSatCliL )->cRefPrv\n               ( dbfTmpLin )->dFecEnt     := ( dbfSatCliL )->dFecEnt\n               ( dbfTmpLin )->dFecSal     := ( dbfSatCliL )->dFecSal\n               ( dbfTmpLin )->lAlquiler   := ( dbfSatCliL )->lAlquiler\n               ( dbfTmpLin )->nPreAlq     := ( dbfSatCliL )->nPreAlq\n               ( dbfTmpLin )->cUnidad     := ( dbfSatCliL )->cUnidad\n               ( dbfTmpLin )->nNumMed     := ( dbfSatCliL )->nNumMed\n               ( dbfTmpLin )->nMedUno     := ( dbfSatCliL )->nMedUno\n               ( dbfTmpLin )->nMedDos     := ( dbfSatCliL )->nMedDos\n               ( dbfTmpLin )->nMedTre     := ( dbfSatCliL )->nMedTre\n               ( dbfTmpLin )->nPuntos     := ( dbfSatCliL )->nPuntos\n               ( dbfTmpLin )->nValPnt     := ( dbfSatCliL )->nValPnt\n               ( dbfTmpLin )->nDtoPnt     := ( dbfSatCliL )->nDtoPnt\n               ( dbfTmpLin )->nIncPnt     := ( dbfSatCliL )->nIncPnt\n               ( dbfTmpLin )->lLinOfe     := ( dbfSatCliL )->lLinOfe\n               \n               ( dbfTmpLin )->( dbUnLock() )\n             \n               /*\n               Pasamos todas las series----------------------------------------\n               */\n\n               if ( dbfSatCliS )->( dbSeek( aSats[ nItem, 3] + Str( nNumLin, 4 ) ) ) .and. ( aSats[ nItem, 1 ] )\n\n                  while ( dbfSatCliS )->cSerSat + Str( ( dbfSatCliS )->nNumSat ) + ( dbfSatCliS )->cSufSat + Str( ( dbfSatCliS )->nNumLin ) == aSats[ nItem, 3] + Str( nNumLin, 4 ) .and. !( dbfSatCliS )->( Eof() )\n                  \n                     ( dbfTmpSer )->( dbAppend() )\n                     ( dbfTmpSer )->nNumLin  := nOffSet\n                     ( dbfTmpSer )->cRef     := ( dbfSatCliS )->cRef\n                     ( dbfTmpSer )->cAlmLin  := ( dbfSatCliS )->cAlmLin\n                     ( dbfTmpSer )->cNumSer  := ( dbfSatCliS )->cNumSer\n                     ( dbfTmpSer )->( dbUnLock() )\n                  \n                     ( dbfSatCliS )->( dbSkip() )\n\n                  end while\n\n               end if \n\n               ( dbfSatCliL )->( dbSkip() ) \n\n            end while\n\n            ( dbfTmpLin )->( dbGoTop() )\n\n            /*\n            Pasamos las incidencias del SAT------------------------------------\n            */\n\n            if ( dbfSatCliI )->( dbSeek( aSats[ nItem, 3] ) ) .and. aSats[ nItem, 1 ]\n\n               while ( dbfSatCliI )->cSerSat + Str( ( dbfSatCliI )->nNumSat ) + ( dbfSatCliI )->cSufSat == aSats[ nItem, 3] .and. !( dbfSatCliI )->( Eof() )\n                  dbPass( dbfSatCliI, dbfTmpInc, .t. )\n                  ( dbfSatCliI )->( dbSkip() )\n               end while\n\n            end if\n\n            ( dbfSatCliI )->( dbGoTop() )\n\n            /*\n            Pasamos los documentos del SAT-------------------------------------\n            */\n\n            if ( dbfSatCliD )->( dbSeek( aSats[ nItem, 3] ) ) .and. aSats[ nItem, 1 ]\n\n               while ( dbfSatCliD )->cSerSat + Str( ( dbfSatCliD )->nNumSat ) + ( dbfSatCliD )->cSufSat == aSats[ nItem, 3] .and. !( dbfSatCliD )->( Eof() )\n                  dbPass( dbfSatCliD, dbfTmpDoc, .t. )\n                  ( dbfSatCliD )->( dbSkip() )\n               end while\n\n            end if \n   \n         end if\n\n      next\n\n      /*\n      No dejamos importar Albaranes directos-----------------------------------\n      */\n\n      aGet[ _CNUMSAT ]:bWhen           := {|| .f. }\n      aGet[ _CNUMSAT ]:Disable()\n\n      /*\n      Refresco de lineas-------------------------------------------------------\n      */\n      \n      oBrw:Refresh()\n\n      /*\n      Recalculo de totales-----------------------------------------------------\n      */\n\n      RecalculaTotal( aTmp )\n\n      CursorWE()\n\n   end if\n\nreturn .t.\n\n//---------------------------------------------------------------------------//\n\nStatic Function HideImportacion( aGet, oShow )\n\n   oBtnPre:Hide()\n   oBtnPed:Hide()\n   oBtnSat:Hide()\n\n   oBtnAgruparPedido:Hide()\n   oBtnAgruparSat:Hide()\n\n   aGet[ _CNUMSAT ]:Hide()\n   aGet[ _CNUMPRE ]:Hide()\n   aGet[ _CNUMPED ]:Hide()\n\n   if !Empty( oShow )\n      oShow:Show()\n   end if\n\nReturn nil \n\n//---------------------------------------------------------------------------//\n\nFunction cDireccionSAT()\n\n   local dbfObras\n   local cDireccion  := \"\"\n\n   USE ( cPatCli() + \"ObrasT.Dbf\" ) NEW VIA ( cDriver() ) SHARED ALIAS ( cCheckArea( \"Obras\", @dbfObras ) )\n   SET ADSINDEX TO ( cPatCli() + \"ObrasT.Cdx\" ) ADDITIVE\n\n   if ( dbfObras )->( dbSeek( ( dbfSatCliT )->cCodCli + ( dbfSatCliT )->cCodObr ) )\n      cDireccion     := ( dbfObras )->cNomObr\n   end if\n\n   CLOSE ( dbfObras )\n\nReturn ( cDireccion )\n\n//---------------------------------------------------------------------------//\n\nStatic Function ActualizaStockWeb( cNumDoc )\n\n   local nRec     := ( dbfAlbCliL )->( Recno() )\n   local nOrdAnt  := ( dbfAlbCliL )->( OrdSetFocus( \"nNumAlb\" ) )\n\n   if uFieldEmpresa( \"lRealWeb\" )\n\n      with object ( TComercio():GetInstance() )\n\n         if ( dbfAlbCliL )->( dbSeek( cNumDoc ) )\n\n            while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cNumDoc .and. !( dbfAlbCliL )->( Eof() )\n\n               :ActualizaStockProductsPrestashop( ( dbfAlbCliL )->cRef, ( dbfAlbCliL )->cCodPr1, ( dbfAlbCliL )->cCodPr2, ( dbfAlbCliL )->cValPr1, ( dbfAlbCliL )->cValPr2 )\n\n               ( dbfAlbCliL )->( dbSkip() )\n\n            end while\n\n        end if\n        \n      end with\n\n   end if \n\n   ( dbfAlbCliL )->( OrdSetFocus( nOrdAnt ) )\n   ( dbfAlbCliL )->( dbGoTo( nRec ) )  \n\nReturn .t.\n\n//---------------------------------------------------------------------------//",
			"file": "prg/Albcli.prg",
			"file_size": 662947,
			"file_write_time": 130219718612186065,
			"settings":
			{
				"buffer_size": 645368,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/gestool.sublime-build",
	"command_palette":
	{
		"height": 311.0,
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/fw195/Gestool/prg/albcli",
		"/C/fw195/Gestool/prg/Factu.prg",
		"/C/fw195/Gestool/prg/Internet.prg",
		"/C/fw195/Gestool/prg/Utildbf.prg",
		"/C/fw195/Gestool/prg/Factu.ppo",
		"/C/fw195/Gestool/prg/Tcomercio.prg",
		"/C/fw195/Gestool/prg/Stock.prg",
		"/C/fw195/Gestool/prg/Pro.prg",
		"/C/fw195/Gestool/prg/Factcli.prg",
		"/C/fw195/Gestool/prg/Tutil.prg",
		"/C/fw195/Gestool/prg/Articulo.prg",
		"/C/fw195/Gestool/HPPC.mak",
		"/C/fw195/Gestool/prg/Tpv.prg",
		"/C/fw195/Gestool/Hx.mak",
		"/C/fw195/Gestool/Build.bat",
		"/C/fw195/Gestool/prg/Remmov.prg",
		"/C/fw195/Gestool/prg/Brwvta.prg",
		"/C/fw195/Gestool/prg/Trazalote.prg",
		"/C/fw195/Gestool/Hx.bat",
		"/C/fw195/Gestool/HP.Bat",
		"/C/fw195/Gestool/prg/Tdetcaptura.prg",
		"/C/fw195/Gestool/prg/Tcaptura.prg",
		"/C/fw195/Gestool/prg/Albcli.prg",
		"/C/Users/Villa/Desktop/FACTU.PRG",
		"/C/fw195/Gestool/Hr.bat",
		"/C/fw195/Gestool/resource/Gstpda.rc",
		"/C/fw195/Gestool/resource/Gstdialog.rc",
		"/C/fw195/Gestool/Ax.bat",
		"/C/fw195/camero/HV.Bat",
		"/C/fw195/camero/HP.Bat",
		"/C/fw195/camero/HT.Bat",
		"/C/fw195/Gestool/prg/Satcli.prg",
		"/C/fw195/Gestool/prg/Precli.prg",
		"/C/fw195/Gestool/prg/Pedcli.prg",
		"/C/fw195/Gestool/prg/Tfastventasproveedores.prg",
		"/C/fw195/Gestool/prg/Tfastventasarticulos.prg",
		"/C/fw195/Gestool/prg/Tfastventasclientes.prg",
		"/C/fw195/Gestool/prg/Tfastreportinfgen.prg",
		"/C/fw195/Gestool/prg/Turno.prg",
		"/C/fw195/Gestool/prg/Ttotturno.prg",
		"/C/fw195/Gestool/prg/Rptgal.prg",
		"/C/fw195/Gestool/Lx.mak",
		"/C/fw195/Gestool/prg/Ordencomanda.prg",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/authentication.css",
		"/C/AppServ/www/zemtrum/tienda/controllers/front/AuthController.php",
		"/C/AppServ/www/zemtrum/tienda/classes/controller/AdminController.php",
		"/C/AppServ/www/zemtrum/tienda/controllers/front/MyAccountController.php",
		"/C/AppServ/www/zemtrum/tienda/authentication.php",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/authentication.tpl",
		"/C/Users/Villa/Desktop/mailchimp/mailchimp.tpl",
		"/C/Users/Villa/Desktop/memberalert/mails/es/memberalert.html",
		"/C/Users/Villa/Desktop/memberalert/memberalert.php",
		"/C/Users/Villa/Desktop/tcomercio",
		"/C/Users/Villa/Desktop/Copia web zemtrum 24-07-2013/includes/configure.php",
		"/C/Users/Villa/Desktop/settings.inc.php",
		"/C/Users/Villa/Desktop/Copia web zemtrum 24-07-2013/database.php",
		"/C/Users/Villa/Desktop/Copia web zemtrum 24-07-2013/admin/configuration.php",
		"/C/Users/Villa/Desktop/Copia web zemtrum 24-07-2013/includes/database_tables.php",
		"/C/fw195/Gestool/prg/TcomercioOSCOMMERCE.prg",
		"/C/fw195/Gestool/prg/Empresa.prg",
		"/C/fw195/Gestool/prg/Client.prg",
		"/C/fw195/Gestool/include/Empresa.ch",
		"/C/AppServ/www/zemtrum/tienda/modules/blockuserinfo/blockuserinfo.tpl",
		"/C/AppServ/www/zemtrum/tienda/config/settings.inc.php",
		"/C/AppServ/www/zemtrum/tienda/config/config.inc.php",
		"/C/AppServ/www/zemtrum/tienda/config/defines.inc.php",
		"/C/Users/Villa/Desktop/zemtrum/includes/cabecera.php",
		"/C/Users/Villa/Desktop/zemtrum/index.php",
		"/C/AppServ/www/zemtrum/tienda/js/jquery.reveal.js",
		"/C/AppServ/www/zemtrum/tienda/modules/blockuserinfo/blockuserinfo.css",
		"/C/Users/Villa/Desktop/zemtrum/conocenos.php",
		"/C/fw195/Gestool/prg/Oferta.prg",
		"/C/fw195/Gestool/prg/Reccli.prg",
		"/C/Users/Villa/Desktop/TIKET.CDX",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/header.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/footer.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/grid_prestashop.css",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/global.css",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/history.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-confirmation.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/index.tpl",
		"/C/AppServ/www/zemtrum/tienda/controllers/front/OrderController.php",
		"/C/AppServ/www/zemtrum/tienda/index.php",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/breadcrumb.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-carrier.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-detail.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-follow.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-steps.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/addresses.css",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/history.css",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-return.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-payment.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-slip.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-opc.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/order-address.tpl",
		"/C/AppServ/www/zemtrum/css/estilo.css",
		"/C/AppServ/www/zemtrum/index.html",
		"/C/AppServ/www/zemtrum/css/global.css",
		"/C/AppServ/www/zemtrum/tienda/controllers/front/OrderOpcController.php",
		"/C/AppServ/www/zemtrum/tienda/order.php",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/shopping-cart.tpl",
		"/C/AppServ/www/zemtrum/tienda/classes/order/Order.php",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/css/product.css",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/js/product.js",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/product.tpl",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/lang/es.php",
		"/C/AppServ/www/zemtrum/tienda/themes/zemtrum/product-list.tpl",
		"/C/AppServ/www/zemtrum/tienda/js/jquery/plugins/jqzoom/jquery.jqzoom.css",
		"/C/Users/Villa/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/fw195/Gestool/prg/Facrec.prg",
		"/C/fw195/Gestool/prg/Facant.prg",
		"/C/fw195/Gestool/prg/Obras.prg",
		"/C/fw195/Gestool/prg/Recprv.prg",
		"/C/fw195/Gestool/prg/Infpreprv.prg",
		"/C/fw195/Gestool/prg/Tnewinfgen.prg",
		"/C/fw195/Gestool/prg/Grpprv.prg",
		"/C/fw195/Gestool/prg/InfPrevisionPagos",
		"/C/fw195/Gestool/prg/Tpvtactil.prg",
		"/C/fw195/Gestool/prg/Usuario.prg",
		"/C/fw195/Gestool/prg/Tuser.prg",
		"/C/fw195/Gestool/prg/Count.prg",
		"/C/fw195/Gestool/prg/Cajas.prg",
		"/C/fw195/Gestool/prg/tpv",
		"/C/fw195/Gestool/bin/reporting/articulos/Ventas/Facturas de clientes/Facturas de clientes lineas agrupadas.fr3",
		"/C/fw195/Gestool/prg/Tpvcobros.prg",
		"/C/fw195/Gestool/prg/Tpvlistaticket.prg",
		"/C/fw195/Gestool/include/Factu.ch",
		"/C/fw195/Gestool/prg/Tcajon.prg"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"C:\\fw195\\Gestool\\prg",
			"C:\\AppServ\\www\\zemtrum\\tienda",
			"C:\\fw195\\Gestool\\prg",
			"",
			"C:\\AppServ\\www\\zemtrum\\*.css",
			"C:\\AppServ\\www\\zemtrum",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\include",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"C:\\fw195\\Gestool\\resource",
			"C:\\fw195\\Gestool\\prg",
			"",
			"C:\\",
			"C:\\FWH102\\samples",
			"",
			"<open files>",
			"<open files>,C:\\fw195\\Gestool",
			"",
			"C:\\fw195\\Gestool\\resource",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"first",
			"cDImagen",
			"SetCurrentDirectory",
			"cNoPath",
			"cFirstPath",
			"on cNoPath",
			"TSndRecInf",
			"ctext",
			"on edtrec",
			"while",
			"openfiles",
			"on oretfld",
			"on rx",
			"oret",
			"oretç",
			"nStockArticulo",
			"stock",
			"on aitm",
			"on acol",
			"ActualizaStockProductsPrestashop",
			"on rx",
			"actualizaweb",
			"on endtrans",
			"Actualizaweb",
			"actualiza",
			"appfaccli",
			"#endif",
			"__PDA__",
			"cdriver",
			"adsset",
			"on adsset",
			"on ads",
			"Updategrupo",
			"UpdateProductsPrestashop",
			"od actualiza",
			"InsertGrupoCategoriesPrestashop",
			"UpdateCategoriesPrestashop",
			"UpdateGrupoCategoriesPrestashop",
			"GrupoFamiliasPrestashop",
			"grupof",
			"UpdateOfertasPrestashop",
			"oDetMovimientos",
			"dfeccad",
			"lote",
			"updateofe",
			"InsertOfertasPrestashop",
			"ActualizaPropiedadesProducts",
			"FieldGetbyName",
			"EliminaPropiedadesProductsPrestashop",
			"ActualizaPropiedadesProducts",
			"ctualizaPropiedadesProducts",
			"Presupuestos de clientes",
			"Material consumido",
			"ImpTiket",
			"vis",
			"abmp",
			"od addt",
			"nTreeImagen",
			"v",
			"res",
			"cmru",
			"Albaranes de clientes",
			"AddTikCli",
			"oTikCliL",
			"cnumdoc",
			"cNumDoc",
			"on acol",
			"AddTikCli",
			"Addmov",
			"AddHisMov",
			"AddMovAlm",
			"search",
			"Search",
			"Activate",
			"TTrazarLote",
			"ExportarPrestashop",
			"FieldGetbyName",
			"while",
			"InsertPropiedadesProductPrestashop",
			"InsertPropiedadesProductPrestashop( nCodigoWeb )",
			"InsertPropiedadesProductPrestashop",
			"insertpro",
			"datareport",
			"lote",
			"caducidad",
			"cadu",
			"#ifndef __PDA__",
			"on main",
			"pda",
			"PDA",
			"Main(",
			"prg",
			"path.obj",
			"path.prg",
			"SOURCEPRG",
			".path.prg",
			"UpdateProductsPrestashop",
			"ActualizaProductsPrestashop",
			"nriesgo",
			"Actualizaweb",
			"ActualizaProductsPrestashop",
			"UpdateProductsPrestashop",
			"UpdatePropiedadesPrestashop",
			"UpdateLineasPropiedades",
			"TFtp",
			"DeleteImagesCategories",
			"ActualizaCategoriesPrestashop",
			"expand",
			"BuildNode",
			"tordencomanda",
			"orden",
			"OpenFiles",
			"on brw",
			"brw",
			"\"\n",
			"facturas de clientes",
			"factura de clientes",
			"factura clien",
			"on edtdet",
			"omenu:",
			"omenu",
			"MENUITEM",
			"5381",
			"omenu",
			"on EdtDetMenu",
			"on edtdet",
			"on edtdel",
			"welcomme"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"cPatEmp",
			"cTextoWait",
			"ctextowait",
			"TProduccionLabelGenerator",
			"lCheckConsolidacion",
			"InsertCategoriesPrestashop",
			"InsertGrupoCategoriesPrestashop",
			"cPreFixtable",
			"cImp()"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "prg/Tcomercio.prg",
					"settings":
					{
						"buffer_size": 232035,
						"regions":
						{
						},
						"selection":
						[
							[
								153535,
								153543
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 80555.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "prg/Factcli.prg",
					"settings":
					{
						"buffer_size": 809244,
						"regions":
						{
						},
						"selection":
						[
							[
								808348,
								809244
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 417665.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "prg/Albcli.prg",
					"settings":
					{
						"buffer_size": 645368,
						"regions":
						{
						},
						"selection":
						[
							[
								644469,
								644486
							]
						],
						"settings":
						{
							"syntax": "Packages/harbour/harbour/Harbour.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 332694.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 0.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 93 ".\Prg\Extage.prg"
memvar cDbf
memvar cDbfCol
memvar cIva
memvar cFPago
memvar aTotIva
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar nTotNet
memvar nTotBrt
memvar nTotDto
memvar nTotDpp
memvar nTotIva
memvar nTotReq
memvar nTotExt
memvar nTotEur
memvar cPinDivExt
memvar cPicEurExt
memvar nDinDivExt
memvar nPagina
memvar lEnd
memvar cPouExtAge

static oWndBrw
static oInf
static dbfExtAgeT
static dbfExtAgeL
static dbfDivisa
static oBandera
static dbfTmp
static cNewFile
static dbfAlmT
static dbfIva
static dbfFPago
static dbfTarPreL
static dbfArticulo
static dbfPromoT
static dbfKit
static dbfTVta
static dbfUsr
static dbfDelega
static dbfDoc
static dbfCount
static dbfEmp
static oStock
static oGetTotal
static oGetTotEur
static cPinDiv
static cPicEur
static cPicUnd
static cPouEur
static cPouDiv
static nDinDiv
static oGetNet
static oGetIva
static oGetReq
static oBrwIva
static nGetNet     := 0
static nGetIva     := 0
static nTotalImp    := 0
static nTotalArt    := 0
static nTotalAge  := 0
static nGetReq      := 0
static bEdit      := { |aTmp, aGet, dbfExtAgeT, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfExtAgeT, oBrw, bWhen, bValid, nMode ) }
static bEdit2     := { |aTmp, aGet, dbfExtAgeL, oBrw, bWhen, bValid, nMode, aTmpExt | EdtDet( aTmp, aGet, dbfExtAgeL, oBrw, bWhen, bValid, nMode, aTmpExt ) }



Function aItmExtAge()

   local aItmExtAge := {}

   aAdd( aItmExtAge, { "CSEREXT",   "C",  1, 0, "Serie de las existencias de almacén",                    "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NNUMEXT",   "N",  9, 0, "Número de las existencias de almacén",                   "'999999999'",        "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CSUFEXT",   "C",  2, 0, "Sufijo de las existencias de almacén",                   "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "DFECEXT",   "D",  8, 0, "Fecha del las existencias",                              "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CCODALM",   "C",  3, 0, "Código de almacén",                                      "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CNOMALM",   "C", 35, 0, "Nombre del almacén",                                     "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CDIRALM",   "C", 35, 0, "Domicilio del almacén",                                  "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CPOBALM",   "C", 25, 0, "Población del almacén",                                  "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CPRVALM",   "C", 20, 0, "Provincia del almacén",                                  "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CPOSALM",   "C",  5, 0, "Código Postal del almacén",                              "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "LLIQEXT",   "L",  1, 0, "Lógico para liquidación",                                "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CCODPGO",   "C",  2, 0, "Código del tipo de pago",                                "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NBULTOS",   "N",  3, 0, "Número de bultos",                                       "'999'",              "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NPORTES",   "N", 16, 6, "Importe de los portes",                                  "cPouExtAge",         "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CCODTAR",   "C",  5, 0, "Código de tarifa",                                       "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CDTOESP",   "C", 50, 0, "Descripción de porcentaje de descuento especial",        "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTOESP",   "N",  5, 2, "Porcentaje de descuento especial",                       "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CDPP",      "C", 50, 0, "Descripción de porcentaje de descuento por pronto pago", "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDPP",      "N",  5, 2, "Porcentaje de descuento por pronto pago",                "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTOCNT",   "N",  5, 2, "Porcentaje de descuento por pago de contado",            "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTORAP",   "N",  5, 2, "Porcentaje de descuento por rappel",                     "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTOPUB",   "N",  5, 2, "Porcentaje de descuento por publicidad",                 "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTOPGO",   "N",  5, 2, "Porcentaje de descuento por pago centralizado",          "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NDTOPTF",   "N",  7, 2, "Porcentaje de descuento por plataforma",                 "'@EZ 999.99'",       "", "( cDbf )"} )
   aAdd( aItmExtAge, { "LRECARGO",  "L",  1, 0, "Lógico de recargo de equivalencia",                      "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CDIVEXT",   "C",  3, 0, "Código de divisa",                                       "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "NVDVEXT",   "N", 10, 4, "Valor del cambio de la divisa",                          "'@EZ 999,999.9999'", "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CCODUSR",   "C",  3, 0, "Código de usuario",                                      "",                   "", "( cDbf )"} )
   aAdd( aItmExtAge, { "CCODDLG",   "C",  2, 0, "Código delegación",                                      "",                   "", "( cDbf )"} )

Return ( aItmExtAge )



Function aColExtAge()

   local aColExtAge := {}

   aAdd( aColExtAge, { "CSEREXT",   "C",  1, 0, "Serie de las existencias de almacén",  "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NNUMEXT",   "N",  9, 0, "Número de las existencias de almacén", "'999999999'",        "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "CSUFEXT",   "C",  2, 0, "Sufijo de las existencias de almacén", "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "CREF",      "C", 18, 0, "Referencia de artículo",               "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "CDETALLE",  "C",100, 0, "Detalle de artículo",                  "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NPREUNIT",  "N", 16, 6, "Precio artículo",                      "cPouExtAge",         "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NDTO",      "N",  6, 2, "Descuento de artículo",                "'@E 999.9'",         "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NDTOPRM",   "N",  6, 2, "Descuento de promoción",               "'@E 999.9'",         "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NIVA",      "N",  4, 1, cImp() + " del artículo",                     "'@E 99'",            "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NCANENT",   "N", 16, 6, "Cantidad entrada",                     "MasUnd()",           "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NPESOKG",   "N", 16, 6, "Peso en Kg. del producto",             "'@E 9,999.99'",      "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "CUNIDAD",   "C",  2, 0, "Unidades",                             "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "NUNICAJA",  "N",  6, 2, "Unidades por caja",                    "MasUnd()",           "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "DFECHA",    "D",  8, 0, "Fecha de linea",                       "",                   "", "( cDbfCol )"} )
   aAdd( aColExtAge, { "CTIPMOV",   "C",  2, 0, "Tipo de movimiento",                   "",                   "", "( cDbfCol )"} )

Return ( aColExtAge )



FUNCTION aDocExtAge()

   local aDoc  := {}

   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Existencias",     "EX" } )
   aAdd( aDoc, { "Almacén",         "AL" } )
   aAdd( aDoc, { "Divisas",         "DV" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )

RETURN ( aDoc )



STATIC FUNCTION OpenFiles()

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "EXTAGET.DBF" ), ( cCheckArea( "EXTAGET", @dbfExtAgeT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "EXTAGET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "EXTAGEL.DBF" ), ( cCheckArea( "EXTAGEL", @dbfExtAgeL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "EXTAGEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDivisa ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TVTA.DBF" ), ( cCheckArea( "TVTA", @dbfTVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "USERS.DBF" ), ( cCheckArea( "USERS", @dbfUsr ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "USERS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDelega ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "CTIPO" )

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oBandera             := TBandera():New()

   oStock               := TStock():Create()
   if !oStock:lOpenFiles()
      lOpen             := .F.
   else
      oStock:cExtAgeT   := dbfExtAgeT
      oStock:cExtAgeL   := dbfExtAgeL
      oStock:cKit       := dbfKit
   end

   RECOVER USING oError

      lOpen             := .F.
      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

   if !lOpen
      CloseFiles()
   end

RETURN ( lOpen )



STATIC FUNCTION CloseFiles()

   if !Empty( dbfExtAgeT )
      ( dbfExtAgeT )->( dbCloseArea() )
   end

   if !Empty( dbfExtAgeL )
      ( dbfExtAgeL )->( dbCloseArea() )
   end
   if !Empty( dbfIva )
      ( dbfIva )->( dbCloseArea() )
   end
   if !Empty( dbfFPago )
      ( dbfFPago )->( dbCloseArea() )
   end
   if !Empty( dbfAlmT )
      ( dbfAlmT )->( dbCloseArea() )
   end
   if !Empty( dbfTarPreL )
      ( dbfTarPreL )->( dbCloseArea() )
   end
   if !Empty( dbfPromoT  )
      ( dbfPromoT )->( dbCloseArea() )
   end
   if !Empty( dbfArticulo)
      ( dbfArticulo)->( dbCloseArea() )
   end
   if !Empty( dbfKit )
      ( dbfKit )->( dbCloseArea() )
   end
   if !Empty( dbfDivisa )
      ( dbfDivisa )->( dbCloseArea() )
   end
   if !Empty( dbfTVta )
      ( dbfTVta )->( dbCloseArea() )
   end
   if !Empty( dbfUsr )
      ( dbfUsr )->( dbCloseArea() )
   end
   if !Empty( dbfDelega )
      ( dbfDelega )->( dbCloseArea() )
   end
   if !Empty( dbfDoc )
      ( dbfDoc )->( dbCloseArea() )
   end
   if !Empty( dbfCount )
      ( dbfCount )->( dbCloseArea() )
   end

   if !Empty( dbfEmp )
      ( dbfEmp )->( dbCloseArea() )
   end

   if !Empty( oStock )
      oStock:end()
   end

   dbfExtAgeT  := nil
   dbfExtAgeL  := nil
   dbfIva      := nil
   dbfFPago    := nil
   dbfAlmT     := nil
   dbfTarPreL  := nil
   dbfPromoT   := nil
   dbfArticulo := nil
   dbfDivisa   := nil
   dbfTVta     := nil
   oBandera    := nil
   oStock      := nil
   dbfUsr      := nil
   dbfDelega   := nil
   dbfDoc      := nil
   dbfCount    := nil
   dbfEmp      := nil

   if oWndBrw <> nil
      oWndBrw  := nil
   end

Return .T.



FUNCTION ExtAge( oMenuItem, oWnd )

   local oImp
   local oPrv
   local nLevel
   local oBtnEur
   local lEuro          := .F.

   IIF( oMenuItem == nil, oMenuItem := "01029", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

    IF oWndBrw == NIL





      nLevel      := nLevelUsr( oMenuItem )
      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end

      if !OpenFiles()
         return nil
      end





      AddMnuNext( "Estado depósitos", ProcName() )

      cPouEur     := cPouDiv( "EUR", dbfDivisa )
      cPicUnd     := MasUnd()














      oWndBrw := TShell():New( 0, 0, 22, 80, "Estado depósitos",, oWnd,,, .F.,,, ( dbfExtAgeT ),,,,, {"Número",    "Fecha", "Almacén"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfExtAgeT ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfExtAgeT ) )}, {||( dbDelRec(  oWndBrw:oBrw, dbfExtAgeT, {|| delDetalle( (dbfExtAgeT)->CSEREXT + Str( (dbfExtAgeT)->NNUMEXT ) + (dbfExtAgeT)->CSUFEXT ) } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfExtAgeT ) )}, nil, nLevel, "Package_ok_16", ( 128 + ( 57 * 256 ) + ( 123 * 65536 ) ),,, )

         oWndBrw:lAutoSeek := .F.

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Liquidado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfExtAgeT )->lLiqExt }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "ChgPre16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumExt"
         :bEditValue       := {|| ( dbfExtAgeT )->cSerExt + "/" + Alltrim( Str( ( dbfExtAgeT )->nNumExt ) ) + "/" + ( dbfExtAgeT )->cSufExt }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( dbfExtAgeT )->cCodDlg }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecDep"
         :bEditValue       := {|| Dtoc( ( dbfExtAgeT )->dFecExt ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :cSortOrder       := "cCodAlm"
         :bEditValue       := {|| ( dbfExtAgeT )->cCodAlm + Space( 1 ) + RetAlmacen( ( dbfExtAgeT )->cCodAlm, dbfAlmT ) }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| nTotExtAge( ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt, dbfExtAgeT, dbfExtAgeL, dbfIva, dbfDivisa, nil, lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div"
         :bEditValue       := {|| cSimDiv( ( dbfExtAgeT )->cDivExt, dbfDivisa ) }
         :nWidth           := 40
      end

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








        oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfExtAgeT ) )}, "(Z)oom", "Z",,, 8,, .F. )






        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )






      oImp := oWndBrw:NewAt( "IMP",,, {||( nGenExtAge( .T. ) )}, "(I)mprimir", "I",,, 8,, .F. )

      lGenExtAge( oWndBrw:oBrw, oImp, .T. )






      oPrv := oWndBrw:NewAt( "PREV1",,, {||( GenExtAge( .F. ) )}, "(P)revisualizar", "P",,, 8,, .F. )

      lGenExtAge( oWndBrw:oBrw, oPrv, .F. )






      oWndBrw:NewAt( "CHGSTATE",,, {||( ChgState( oWndBrw:oBrw ) )}, "Cambiar Es(t)ado", "T",,, 4,, .F. )






        oBtnEur := oWndBrw:NewAt( "BAL_EURO",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,, 8,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "Salir", "S",,,,, .F. )

        oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

    ELSE

        oWndBrw:setFocus()

    end

RETURN NIL



STATIC FUNCTION EdtRec( aTmp, aGet, dbfExtAgeT, oBrw, bWhen, bValid, nMode )

    local oDlg
    local oBrw2
   local oSay2, oSay4, oSay5, oSay6
   local cSay2, cSay4, cSay5, cSay6
   local oBmpDiv
   local oFont          := TFont():New( "Arial", 8, 26, .F., .T. )
   local oBmpGeneral

   if nMode == 1
      aTmp[ (dbfExtAgeT)->( FieldPos( "CSEREXT" ) ) ]  := "A"
      aTmp[ (dbfExtAgeT)->( FieldPos( "CCODALM" ) ) ]  := oUser():cAlmacen()
      aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ]  := cDivEmp()
      aTmp[ (dbfExtAgeT)->( FieldPos( "CCODPGO" ) ) ]  := cDefFpg()
      aTmp[ (dbfExtAgeT)->( FieldPos( "NVDVEXT" ) ) ]  := nChgDiv( aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], dbfDivisa )
      aTmp[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ]  := cCurUsr()
      aTmp[ (dbfExtAgeT)->( FieldPos( "CCODDLG" ) ) ]  := oUser():cDelegacion()
   end

   cSay5                := RetFld( aTmp[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ], dbfUsr, "cNbrUse" )
   cSay6                := RetFld( cCodEmp() + aTmp[ (dbfExtAgeT)->( FieldPos( "CCODDLG" ) ) ], dbfDelega, "cNomDlg" )

   if Empty( aTmp[ (dbfExtAgeT)->( FieldPos( "CDTOESP" ) ) ] )
      aTmp[ (dbfExtAgeT)->( FieldPos( "CDTOESP" ) ) ]  := Padr( "General", 50 )
   end

   if Empty( aTmp[ (dbfExtAgeT)->( FieldPos( "CDPP"    ) ) ] )
      aTmp[ (dbfExtAgeT)->( FieldPos( "CDPP"    ) ) ]     := Padr( "Pronto pago", 50 )
   end

    BeginTrans( aTmp )

   cPouDiv              := cPouDiv( aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], dbfDivisa )
   cPicEur              := cPinDiv( "EUR", dbfDivisa )
   cPicUnd              := MasUnd()
   nDinDiv              := nDinDiv( aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], dbfDivisa )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "existencias de almacenes", "EXTAGE",, .F.,,,,,, .F.,,,,,, .F., )





      oBmpGeneral := TBitmap():ReDefine( 990, "estado_depositos_48_alpha",, oDlg,,, .F., .F.,,, .F.,,, .T. )





      aGet[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )], aTmp[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )]:= u ) }, oDlg,, "999999999",,,,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ (dbfExtAgeT)->( FieldPos( "DFECEXT" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "DFECEXT" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "DFECEXT" ) ) ]:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ] := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ]:= u ) }, oDlg,,, {||    ( SetUsuario( aGet[ (dbfExtAgeT)->( FieldPos( "CCODUSR" ) ) ], oSay5, nil, dbfUsr ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay5 := TGetHlp():ReDefine( 116, { | u | If( PCount()==0, cSay5, cSay5:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CCODDLG" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CCODDLG" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CCODDLG" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay6 := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay6, cSay6:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[(dbfExtAgeT)->( FieldPos( "LLIQEXT" ) )] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[(dbfExtAgeT)->( FieldPos( "LLIQEXT" ) )], aTmp[(dbfExtAgeT)->( FieldPos( "LLIQEXT" ) )]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )








      aGet[ (dbfExtAgeT)->( FieldPos( "CCODALM" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CCODALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CCODALM" ) ) ]:= u ) }, oDlg,,, {||    ( LoadAlm( aGet, aTmp ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ (dbfExtAgeT)->( FieldPos( "CCODALM" ) ) ] ) )}, nil, "LUPA",, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CNOMALM" ) ) ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CNOMALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CNOMALM" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CDIRALM" ) ) ] := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CDIRALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CDIRALM" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CPOSALM" ) ) ] := TGetHlp():ReDefine( 133, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CPOSALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CPOSALM" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CPOBALM" ) ) ] := TGetHlp():ReDefine( 134, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CPOBALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CPOBALM" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CPRVALM" ) ) ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CPRVALM" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CPRVALM" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ (dbfExtAgeT)->( FieldPos( "CCODPGO" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CCODPGO" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CCODPGO" ) ) ]:= u ) }, oDlg,, "@!", {||     ( cFPago( aGet[(dbfExtAgeT)->( FieldPos( "CCODPGO" ) )], dbfFPago, oSay2 ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[(dbfExtAgeT)->( FieldPos( "CCODPGO" ) )], oSay2 ) )}, nil, "LUPA",, )





        oSay2 := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay2, cSay2:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )








        aGet[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )], aTmp[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )]:= u ) }, oDlg,,, {||     ( cTarifa( aGet[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )], oSay4 ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )], oSay4 ) )}, nil, "LUPA",, )




        oSay4 := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay4, cSay4:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )















      aGet[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ]:= u ) }, oDlg,, "@!", {||    (  cDiv( aGet[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], oBmpDiv, aGet[ (dbfExtAgeT)->( FieldPos( "NVDVEXT" ) ) ], @cPinDiv, @nDinDiv, dbfDivisa, oBandera ), nTotExtAge( nil, dbfExtAgeT, dbfTmp, dbfIva, dbfDivisa, aTmp ),    .T. )}, "N/W*",,,,, .F., {||         (     nMode == 1 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ], oBmpDiv, aGet[ (dbfExtAgeT)->( FieldPos( "NVDVEXT" ) ) ], dbfDivisa, oBandera )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 171, "BAN_EURO",, oDlg,,, .F., .F.,,, .F.,,, .F. )





      oBrw2                   := IXBrowse():New( oDlg )

      oBrw2:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw2:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw2:cAlias            := dbfTmp

      oBrw2:nMarqueeStyle     := 6
      oBrw2:cName             := "Existencias de almacén detalle"

      oBrw2:CreateFromResource( 200 )

      with object ( oBrw2:AddCol() )
         :cHeader             := "Código"
         :bEditValue          := {|| ( dbfTmp )->cRef }
         :nWidth              := 70
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| ( dbfTmp )->cDetalle }
         :nWidth              := 360
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Unidades"
         :bEditValue          := {|| nUnitEnt( dbfTmp ) }
         :cEditPicture        := MasUnd()
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Precio U."
         :bEditValue          := {|| ( dbfTmp )->NPREUNIT }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Dto.%"
         :bEditValue          := {|| ( dbfTmp )->nDto }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Dto.P.%"
         :bEditValue          := {|| ( dbfTmp )->nDtoPrm }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := cImp()
         :bEditValue          := {|| ( dbfTmp )->nIva }
         :cEditPicture        := "@E 99.9"
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw2:AddCol() )
         :cHeader             := "Importe"
         :bEditValue          := {|| nTotLExtAge( dbfTmp ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      if nMode <> 3
            oBrw2:bLDblClick  := {|| EdtDeta( oBrw2, bEdit2, aTmp ) }
      end








      aGet[ (dbfExtAgeT)->( FieldPos( "CDTOESP" ) ) ] := TGetHlp():ReDefine( 209, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CDTOESP" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CDTOESP" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[(dbfExtAgeT)->( FieldPos( "NDTOESP" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "NDTOESP" ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "NDTOESP" ) ) ]:= u ) }, oDlg,, "@E 99.99", {||        ( nRecTotal( dbfTmp, aTmp ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ (dbfExtAgeT)->( FieldPos( "CDPP"    ) ) ] := TGetHlp():ReDefine( 219, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "CDPP"    ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "CDPP"    ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ (dbfExtAgeT)->( FieldPos( "NDPP"    ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ (dbfExtAgeT)->( FieldPos( "NDPP"    ) ) ], aTmp[ (dbfExtAgeT)->( FieldPos( "NDPP"    ) ) ]:= u ) }, oDlg,, "@E 99.99", {||        ( nRecTotal( dbfTmp, aTmp ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oBrwIva                        := TXBrowse():New( oDlg )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )

      oBrwIva:nMarqueeStyle          := 5
      oBrwIva:lRecordSelector        := .F.
      oBrwIva:lHScroll               := .F.

      oBrwIva:CreateFromResource( 310 )

      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPouDiv ), "" ) }
         :nWidth           := 115
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% " + cImp()
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 3 ], "@E 99.9"), "" ) }
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nEditType        := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 3 ] * aTotIva[ oBrwIva:nArrayAt, 2 ] / 100, cPouDiv ), "" ) }
         :nWidth           := 75
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 4 ], "@E 99.9"), "" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 4 ] * aTotIva[ oBrwIva:nArrayAt, 2 ] / 100, cPouDiv ), "" ) }
         :nWidth           := 65
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end









        oGetNet := TSay():ReDefine( 420, {|| nGetNet}, oDlg, cPinDiv,,, .F.,, .F., .F. )




        oGetIva := TSay():ReDefine( 430, {|| nGetIva}, oDlg, cPinDiv,,, .F.,, .F., .F. )




        oGetReq := TSay():ReDefine( 440, {|| nGetReq}, oDlg, cPinDiv,,, .F.,, .F., .F. )





        aGet[(dbfExtAgeT)->( FieldPos( "LRECARGO") )] := TCheckBox():ReDefine( 450, { | u | If( PCount()==0, aTmp[(dbfExtAgeT)->( FieldPos( "LRECARGO") )], aTmp[(dbfExtAgeT)->( FieldPos( "LRECARGO") )]:= u ) }, oDlg,, {||( nRecTotal( dbfTmp, aTmp ) )},,,,, .F., {||         ( nMode <> 3 )}, .F. )





      oGetTotal := TSay():ReDefine( 460, {|| nTotExt}, oDlg, cPinDiv,,, .F., oFont, .F., .F. )





        TButton():ReDefine( 500, {||( AppDeta( oBrw2, bEdit2, aTmp ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 501, {||( EdtDeta( oBrw2, bEdit2, aTmp ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DelDeta( oBrw2, aTmp ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( EdtZoom( oBrw2, bEdit2, aTmp ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 524, {||( DbSwapUp( dbfTmp, oBrw2 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 525, {||( DbSwapDown( dbfTmp, oBrw2 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )







      TButton():ReDefine( 511, {||( EndTrans( aTmp, oBrw2, nMode ), WinGather( aTmp, , dbfExtAgeT, oBrw, @nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 510, {||( If( ExitNoSave( nMode, dbfTmp ), oDlg:end(), ) )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 998, {||( ChmHelp ("Existencias_Almacen") )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 113, {|| AppDeta( oBrw2, bEdit2, aTmp ) } )
      oDlg:AddFastKey( 114, {|| EdtDeta( oBrw2, bEdit2, aTmp ) } )
      oDlg:AddFastKey( 115, {|| DelDeta( oBrw2, aTmp ) } )
      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, oBrw2, nMode ), WinGather( aTmp, , dbfExtAgeT, oBrw, @nMode ), oDlg:end( 1 ) } )
   end

   oDlg:AddFastKey ( 112, {|| ChmHelp ("Existencias_Almacen") } )

   oDlg:bStart := { || aGet[(dbfExtAgeT)->( FieldPos( "CCODALM" ) )]:SetFocus(), oBrw2:Load() }




    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( EvalGet( aGet, nMode ) )}, .T.,,, {|Self|( nRecTotal( dbfTmp, aTmp ) )}, oDlg:bRClicked,,, )

   KillTrans()

   oFont:end()
   oBmpGeneral:End()

RETURN ( oDlg:nResult == 1 )







STATIC FUNCTION EdtDet( aTmp, aGet, dbfExtAgeL, oBrw, bWhen, bValid, nMode, aTmpExT )

   local oBtn
    local oDlg2
   local oGet2
   local cGet2
    local oTotal
    local nTotal             := 0
   local oSayCaja

    IF nMode    == 1
      aTmp[(dbfExtAgeT)->( FieldPos( "CSEREXT" ) ) ]  := aTmpExt[(dbfExtAgeT)->( FieldPos( "CSEREXT" ) )]
      aTmp[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) ) ]  := aTmpExt[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )]
      aTmp[(dbfExtAgeT)->( FieldPos( "CSUFEXT" ) ) ]  := aTmpExt[(dbfExtAgeT)->( FieldPos( "CSUFEXT" ) )]
      aTmp[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) ) ]  := 1
        aTmp[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )]  := 1
      aTmp[(dbfExtAgeL)->( FieldPos( "DFECHA"   ) )  ]  := Date()
      aTmp[(dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) ) ]  := "01"
   end

   oDlg2 = TDialog():New(,,,, lblTitle( nMode ) + "lineas de estado depósitos de almacén", "LDEPAGE",, .F.,,,,,, .F.,,,,,, .F., )








        aGet[(dbfExtAgeL)->( FieldPos( "CREF"     ) )] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "CREF"     ) )], aTmp[(dbfExtAgeL)->( FieldPos( "CREF"     ) )]:= u ) }, oDlg2,,, {||    ( LoadArt( aGet, aTmpExt ) )}, "N/W*",,,,, .F., {||         ( nMode == 1 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[(dbfExtAgeL)->( FieldPos( "CREF"     ) )], aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )] ) )}, nil, "LUPA",, )





        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )], aTmp[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:= u ) }, oDlg2,,,, "N/W*",,,,, .F., {||     ( lModDes() .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









        aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:= u ) }, oDlg2,, "@E 99.9", {||     ( lTiva( dbfIva, aTmp[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )] ) )}, "N/W*",,,,, .F., {||     ( lModIva() .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwIva( aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )], dbfIva, , .T. ) )}, nil, "LUPA",, )



      oSayCaja := TSay():ReDefine( 129,, oDlg2,,,, .F.,, .F., .F. )








        aGet[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )]:= u ) }, oDlg2,, cPicUnd,, "N/W*",,,,, .F., {||     ( lUseCaj() .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )








        aGet[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )]:= u ) }, oDlg2,, cPicUnd,, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )





        aGet[(dbfExtAgeL)->( FieldPos( "NPESOKG"  ) )] := TGetHlp():ReDefine( 145, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NPESOKG"  ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NPESOKG"  ) )]:= u ) }, oDlg2,, "@E 999,999.999999",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





        aGet[(dbfExtAgeL)->( FieldPos( "CUNIDAD"  ) )] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "CUNIDAD"  ) )], aTmp[(dbfExtAgeL)->( FieldPos( "CUNIDAD"  ) )]:= u ) }, oDlg2,,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








        aGet[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )]:= u ) }, oDlg2,, cPinDiv,, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )








        aGet[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )]:= u ) }, oDlg2,, "@E 999.9",, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )








        aGet[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) )] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) )], aTmp[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) )]:= u ) }, oDlg2,, "@E 999.9",, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lCalcDeta( aTmp, oTotal ) ) }, .F., .T.,,,,,, nil,,, )






        aGet[(dbfExtAgeL)->( FieldPos( "DFECHA"   ) )] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[(dbfExtAgeL)->( FieldPos( "DFECHA"   ) )], aTmp[(dbfExtAgeL)->( FieldPos( "DFECHA"   ) )]:= u ) }, oDlg2,,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[(dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) )] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ (dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) ) ], aTmp[ (dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) ) ]:= u ) }, oDlg2,,, {||    ( cTVta( aGet[(dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) )], dbfTVta, oGet2 ) )},,,,,, .F., {||     ( nMode <> 3  )},, .F., .F.,,,,, {|Self|( BrwTVta( aGet[(dbfExtAgeL)->( FieldPos( "CTIPMOV"  ) )], dbfTVta, oGet2 ) )}, nil, "LUPA",, )





        oGet2 := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cGet2, cGet2:= u ) }, oDlg2,,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )





      oTotal := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oDlg2,, cPinDiv,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      oBtn := TButton():ReDefine( 1, {||SaveDeta( aTmp, aGet, oBrw, oDlg2, nMode, oTotal, oBtn )}, oDlg2,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg2:end() )}, oDlg2,,, .F.,,,, .F. )




      TButton():ReDefine( 9, {||( ChmHelp ("Añadir_linea_existencias") )}, oDlg2,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg2:AddFastKey( 116, {|| SaveDeta( aTmp, aGet, oBrw, oDlg2, nMode, oTotal, oBtn ) } )
   end

   oDlg2:AddFastKey ( 112, {|| ChmHelp ("Añadir_linea_existencias") } )

   oDlg2:bStart := {|| if( !lUseCaj(), ( aGet[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )]:hide(), oSayCaja:hide() ),  ) }

   oDlg2:Activate( oDlg2:bLClicked, oDlg2:bMoved, oDlg2:bPainted := {|hDC,cPS|( lCalcDeta( aTmp, oTotal ) )}, .T.,,,, oDlg2:bRClicked,,, )

RETURN ( oDlg2:nResult == 1 )







STATIC FUNCTION AppDeta(oBrw2, bEdit2, aTmp)

    WinAppRec( oBrw2, bEdit2, dbfTmp, , , aTmp )

RETURN ( nTotExtAge( nil, nil, dbfTmp, dbfIva, dbfDivisa, aTmp ) )






STATIC FUNCTION EdtDeta(oBrw2, bEdit2, aTmp )

    WinEdtRec( oBrw2, bEdit2, dbfTmp, , , aTmp )

RETURN ( nTotExtAge( nil, nil, dbfTmp, dbfIva, dbfDivisa, aTmp ) )







STATIC FUNCTION DelDeta( oBrw2, aTmp )

    dbDelRec( oBrw2, dbfTmp )

RETURN ( nTotExtAge( nil, nil, dbfTmp, dbfIva, dbfDivisa, aTmp ) )







STATIC FUNCTION EdtZoom( oBrw2, bEdit2, aTmp )

    WinZooRec( oBrw2, bEdit2, dbfTmp )

RETURN NIL



STATIC FUNCTION SaveDeta( aTmp, aGet, oBrw, oDlg2, nMode, oTotal, oBtn )

   oBtn:SetFocus()

    WinGather( aTmp, aGet, dbfTmp, oBrw, nMode )

   if nMode == 1 .AND. lEntCon()
        aGet[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )]:cText( 1 )
      aGet[(dbfExtAgeL)->( FieldPos( "CREF"     ) )   ]:setFocus()
        oTotal:cText( 0 )
   else
      oDlg2:end( 1 )
   end

RETURN NIL



STATIC FUNCTION PrnSerie()

    local oDlg
   local oDocIni
    local oDocFin
   local oSerIni
   local oSerFin
   local oSufIni
    local oBtnOk
    local oBtnCancel
   local nRecno   := (dbfExtAgeT)->(RecNo())
   local nOrdAnt  := (dbfExtAgeT)->(OrdSetFocus(1))
   local cSerIni  := (dbfExtAgeT)->cSerExt
   local cSerFin  := (dbfExtAgeT)->cSerExt
   local nDocIni  := (dbfExtAgeT)->nNumExt
   local nDocFin  := (dbfExtAgeT)->nNumExt
   local cSufIni  := (dbfExtAgeT)->cSufExt
   local cSufFin  := (dbfExtAgeT)->cSufExt

   oDlg = TDialog():New(,,,, "Imprimir series de existencias", "PRNSERIES",, .F.,,,,,, .F.,,,,,, .F., )








   oSerIni := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .F.,,, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )





   oDocIni := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oSufIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








   oSerFin := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .F.,,, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )





    oDocFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oSufIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




    oBtnOk := TButton():ReDefine( 505, {||( StartPrint( cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oBtnOk, oBtnCancel ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




    oBtnCancel := TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| StartPrint( cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oBtnOk, oBtnCancel ), oDlg:end( 1 ) } )

   oDlg:bStart := { || oSerIni:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( dbfExtAgeT )->( dbGoTo( nRecNo ) )
   ( dbfExtAgeT )->( ordSetFocus( nOrdAnt ) )


    oWndBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cDocIni, cDocFin, oBtnOk, oBtnCancel )

    oBtnOk:disable()
    oBtnCancel:disable()

   ( dbfExtAgeT )->( dbSeek( cDocIni, .T. ) )


   while ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt >= cDocIni .AND. ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt <= cDocFin

      GenExtAge( .T., "Imprimiendo documento : " + ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt )
      ( dbfExtAgeT )->(DbSkip(1))

   end

    oBtnOk:enable()
    oBtnCancel:enable()

RETURN NIL






FUNCTION nTotExtAge( nNumExt, dbfMaster, dbfLine, cDbfIva, cDbfDivisa, aTmp, lEuro )

    local nRecno
    local bCondition
    local cCodDiv
   local aTotalDto      := { 0, 0, 0 }
   local aTotalDPP      := { 0, 0, 0 }
   local lRecargo
   local nDtoEsp
   local nDtoPP

   IIF( lEuro == nil, lEuro := .F., ) ;
   IIF( dbfMaster == nil, dbfMaster := dbfExtAgeT, ) ;
   IIF( dbfLine == nil, dbfLine := dbfExtAgeL, ) ;
   IIF( cDbfIva == nil, cDbfIva := dbfIva, ) ;
   IIF( cDbfDivisa == nil, cDbfDivisa := dbfDivisa, ) ;
   IIF( nNumExt == nil, nNumExt := ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt, ) ;

   public nTotNet       := 0
   public nTotBrt       := 0
   public nTotDto       := 0
   public nTotDpp       := 0
   public nTotIva       := 0
   public nTotReq       := 0
   public nTotExt       := 0
   public nTotEur       := 0
   public aTotIva       := { { 0,0,nil,0 }, { 0,0,nil,0 }, { 0,0,nil,0 } }
   public aIvaUno       := aTotIva[ 1 ]
   public aIvaDos       := aTotIva[ 2 ]
   public aIvaTre       := aTotIva[ 3 ]

   nTotalAge            := 0
   nRecno               := (dbfLine)->(RecNo())

   if aTmp <> NIL
        lRecargo            := aTmp[ (dbfExtAgeT)->( FieldPos( "LRECARGO") )]
        nDtoEsp            := aTmp[ (dbfExtAgeT)->( FieldPos( "NDTOESP" ) ) ]
        nDtoPP            := aTmp[ (dbfExtAgeT)->( FieldPos( "NDPP"    ) )    ]
      cCodDiv        := aTmp[ (dbfExtAgeT)->( FieldPos( "CDIVEXT" ) ) ]
      bCondition     := {|| !(dbfLine)->(eof() ) }
      ( dbfLine )->( dbGoTop() )
   else
        lRecargo            := (dbfMaster)->LRECARGO
        nDtoEsp            := (dbfMaster)->NDTOESP
        nDtoPP            := (dbfMaster)->NDPP
      cCodDiv        := (dbfMaster)->CDIVEXT
      bCondition     := {|| (dbfLine)->CSEREXT + Str( (dbfLine)->NNUMEXT ) + (dbfLine)->CSUFEXT == nNumExt .AND. !(dbfLine)->( eof() ) }
      ( dbfLine )->( dbSeek( nNumExt ) )
   end

   cPinDiv           := cPinDiv( cCodDiv, dbfDivisa )
   nDinDiv           := nDinDiv( cCodDiv, dbfDivisa )

   while Eval( bCondition )

      nTotalArt      := nTotLExtAge( dbfLine )





      do case
      case aTotIva[ 1, 3 ] == nil .OR. aTotIva[ 1, 3 ] == (dbfLine)->NIVA
         aTotIva[ 1, 3 ]   := (dbfLine)->nIva
            aTotIva[ 1, 1 ]     += nTotalArt
      case aTotIva[ 2, 3 ] == nil .OR. aTotIva[ 2, 3 ] == (dbfLine)->NIVA
         aTotIva[ 2, 3 ]   := (dbfLine)->NIVA
            aTotIva[ 2, 1 ]     += nTotalArt
      case aTotIva[ 3, 3 ] == nil .OR. aTotIva[ 3, 3 ] == (dbfLine)->NIVA
         aTotIva[ 3, 3 ]   := (dbfLine)->NIVA
         aTotIva[ 3, 1 ]   += nTotalArt
      end

        (dbfLine)->(DbSkip())

   end

   ( dbfLine )->( dbGoto( nRecno ) )



   aTotIva        := aSort( aTotIva,,, {|x,y| if( x[3] <> nil, x[3], -1 ) > if( y[3] <> nil, y[3], -1 )  } )

   aTotIva[ 1, 2 ]      := Round( aTotIva[ 1, 1 ], nDinDiv )
   aTotIva[ 2, 2 ]      := Round( aTotIva[ 2, 1 ], nDinDiv )
   aTotIva[ 3, 2 ]      := Round( aTotIva[ 3, 1 ], nDinDiv )





   nTotBrt        := aTotIva[ 1, 1 ] + aTotIva[ 2, 1 ] + aTotIva[ 3, 1 ]





   if nDtoEsp  <> 0

      aTotalDto[1]   := Round( aTotIva[ 1, 2 ] * nDtoEsp / 100, nDinDiv )
      aTotalDto[2]   := Round( aTotIva[ 2, 2 ] * nDtoEsp / 100, nDinDiv )
      aTotalDto[3]   := Round( aTotIva[ 3, 2 ] * nDtoEsp / 100, nDinDiv )

      nTotDto        := aTotalDto[1] + aTotalDto[2] + aTotalDto[3]

      aTotIva[ 1, 2 ]      -= aTotalDto[1]
      aTotIva[ 2, 2 ]      -= aTotalDto[2]
      aTotIva[ 3, 2 ]      -= aTotalDto[3]

   end





   if nDtoPP   <> 0

      aTotalDPP[1]   := Round( aTotIva[ 1, 2 ] * nDtoPP / 100, nDinDiv )
      aTotalDPP[2]   := Round( aTotIva[ 2, 2 ] * nDtoPP / 100, nDinDiv )
      aTotalDPP[3]   := Round( aTotIva[ 3, 2 ] * nDtoPP / 100, nDinDiv )

      nTotDPP        := aTotalDPP[1] + aTotalDPP[2] + aTotalDPP[3]

      aTotIva[ 1, 2 ]      -= aTotalDPP[1]
      aTotIva[ 2, 2 ]      -= aTotalDPP[2]
      aTotIva[ 3, 2 ]      -= aTotalDPP[3]

   end





   nTotNet           := aTotIva[ 1, 2 ] + aTotIva[ 2, 2 ] + aTotIva[ 3, 2 ]





   nTotIva           := if( aTotIva[ 1, 3 ] <> nil, Round( aTotIva[ 1, 2 ] * aTotIva[ 1, 3 ] / 100, nDinDiv ), 0 )
   nTotIva           += if( aTotIva[ 2, 3 ] <> nil, Round( aTotIva[ 2, 2 ] * aTotIva[ 2, 3 ] / 100, nDinDiv ), 0 )
   nTotIva           += if( aTotIva[ 3, 3 ] <> nil, Round( aTotIva[ 3, 2 ] * aTotIva[ 3, 3 ] / 100, nDinDiv ), 0 )





   nTotalImp         := nTotIva + nTotReq





   nTotExt           := nTotNet + nTotalImp





   nTotEur           := nTotExt / nChgDiv( cCodDiv, dbfDivisa )





   if lEuro
      nTotExt        := nCnv2Div( nTotExt, cCodDiv, cDivChg(), dbfDivisa )
   end

RETURN ( Trans( nTotExt, cPinDiv ) )



STATIC FUNCTION nRecTotal( dbfLine, aTmp )

   nTotExtAge( nil, nil, dbfLine, dbfIva, dbfDivisa, aTmp )

   if oBrwIva <> NIL
      oBrwIva:Refresh()
   end

   if oGetNet <> NIL
      oGetNet:SetText( nTotNet )
   end

   if oGetIva <> NIL
      oGetIva:SetText( nTotIva )
   end

   if oGetReq <> NIL
      oGetReq:SetText( nTotReq )
   end

   if oGetTotal <> NIL
      oGetTotal:SetText( nTotExt )
   end

   if oGetTotEur <> NIL
      oGetTotEur:SetText( nTotEur )
   end

RETURN ( .T. )







STATIC FUNCTION DelDetalle( cNumExt )

   CursorWait()

   oStock:ExtAge( cNumExt, ( dbfExtAgeT )->cCodAlm, .T., .F. )

   CursorWe()

RETURN NIL






STATIC FUNCTION lCalcDeta( aTmp, oTotal )

    local nCalculo := aTmp[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )] * aTmp[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )]

   IF lCalCaj()
        nCalculo *= If( aTmp[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )] <> 0, aTmp[(dbfExtAgeL)->( FieldPos( "NCANENT"  ) )], 1 )
    end

    IF aTmp[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )] <> 0
        nCalculo -= nCalculo * aTmp[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )] / 100
    end

    IF aTmp[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) )] <> 0
        nCalculo -= nCalculo * aTmp[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) )] / 100
    end

    IF oTotal <> NIL
        oTotal:varPut( nCalculo )
        oTotal:refresh()
    end

RETURN .T.



STATIC FUNCTION LoadAlm( aGet, aTmp, nMode )

    local cAreaAnt := Alias()
    local lValid     := .F.
    local xValor     := aGet[(dbfExtAgeT)->( FieldPos( "CCODALM" ) )]:varGet()

    IF Empty( Rtrim( xValor ) )
        RETURN .T.
    end

    xValor             := Rjust( xValor, "0" )

    IF (dbfAlmT)->( DbSeek( xValor ) )





        aGet[(dbfExtAgeT)->( FieldPos( "CCODALM" ) )]:cText( (dbfAlmT)->CCODALM )
        aGet[(dbfExtAgeT)->( FieldPos( "CNOMALM" ) )]:cText( (dbfAlmT)->CNOMALM )
      aGet[(dbfExtAgeT)->( FieldPos( "CDIRALM" ) )]:cText( (dbfAlmT)->CDIRALM )
      aGet[(dbfExtAgeT)->( FieldPos( "CPOBALM" ) )]:cText( (dbfAlmT)->CPOBALM )
      aGet[(dbfExtAgeT)->( FieldPos( "CPRVALM" ) )]:cText( (dbfAlmT)->CPROALM )
      aGet[(dbfExtAgeT)->( FieldPos( "CPOSALM" ) )]:cText( (dbfAlmT)->CPOSALM )

        lValid    := .T.

    ELSE

      msgStop( "Almacén no encontrado." )

    end

    IIF( cAreaAnt <> "", SELECT( cAreaAnt ), )

RETURN lValid



STATIC FUNCTION LoadArt( aGet, aTmpExt )

    local cAreaAnt := Alias()
    local lValid   := .F.
    local xValor   := aGet[(dbfExtAgeL)->( FieldPos( "CREF"     ) )]:varGet()

    IF Empty( xValor )

        aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:varPut( 0 )
        aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:bWhen        := {|| .T. }
        aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:refresh()

        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:varPut( Space( 50 ) )
        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:bWhen    := {|| .T. }
        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:refresh()

        RETURN .T.

    end

    IF (dbfArticulo)->( DbSeek( xValor ) )

        aGet[(dbfExtAgeL)->( FieldPos( "CREF"     ) )]:cText( (dbfArticulo)->CODIGO )
        aGet[(dbfExtAgeL)->( FieldPos( "NUNICAJA" ) )]:cText( (dbfArticulo)->NUNICAJA )
        aGet[(dbfExtAgeL)->( FieldPos( "CUNIDAD"  ) )]:cText( (dbfArticulo)->CUNIDAD )





      IF !Empty( aTmpExt[ (dbfExtAgeT)->( FieldPos( "CCODTAR" ) ) ] ) .AND. RetPrcTar( ( dbfArticulo )->Codigo, aTmpExt[ (dbfExtAgeT)->( FieldPos( "CCODTAR" ) ) ], Space(5), Space(5), Space(5), Space(5), dbfTarPreL ) <> 0
         aGet[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )]:cText( RetPrcTar( ( dbfArticulo )->Codigo, aTmpExt[(dbfExtAgeT)->( FieldPos( "CCODTAR" ) )], Space(5), Space(5), Space(5), Space(5), dbfTarPreL ) )
         aGet[(dbfExtAgeL)->( FieldPos( "NDTO"     ) )    ]:cText( RetPctTar( ( dbfArticulo )->Codigo, ( dbfArticulo )->Familia, aTmpExt[ (dbfExtAgeT)->( FieldPos( "CCODTAR" ) ) ], Space(5), Space(5), Space(5), Space(5), dbfTarPreL ) )
         aGet[(dbfExtAgeL)->( FieldPos( "NDTOPRM"  ) ) ]:cText( RetDtoPrm( xValor, aTmpExt[ (dbfExtAgeT)->( FieldPos( "CCODTAR" ) ) ], Space(5), Space(5), Space(5), Space(5), aTmpExt[ (dbfExtAgeT)->( FieldPos( "DFECEXT" ) ) ], dbfPromoT ) )
        ELSE
            aGet[(dbfExtAgeL)->( FieldPos( "NPREUNIT" ) )]:cText( (dbfArticulo)->PVENTA1 )
        end

        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:cText( (dbfArticulo)->NOMBRE )
        aGet[(dbfExtAgeL)->( FieldPos( "CDETALLE" ) )]:bWhen    := {|| .F. }

        IF aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )] <> NIL
            aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:cText( nIva( dbfIva, (dbfArticulo)->TIPOIVA ) )
            aGet[(dbfExtAgeL)->( FieldPos( "NIVA"     ) )]:bWhen    := {|| .F. }
        end

        lValid    := .T.

    ELSE

        MsgStop( "Articulo no encontrado" )
        lValid := .F.

    end

    IF cAreaAnt <> ""
        dbSelectArea( ( cAreaAnt ) )
    end

RETURN lValid



STATIC FUNCTION EPage( cCodDoc, oInf )

    private nPagina        := oInf:nPage
    private lEnd            := oInf:lFinish

   PrintItems( cCodDoc, oInf )

RETURN NIL



FUNCTION nTotLExtAge( dbfLine )

   local nCalculo

   IIF( dbfLine == nil, dbfLine := dbfExtAgeL, ) ;

   nCalculo          := (dbfLine)->NUNICAJA * (dbfLine)->NPREUNIT

   IF lCalCaj()
      nCalculo       *= If( (dbfLine)->NCANENT <> 0, (dbfLine)->NCANENT, 1 )
    end

    IF (dbfLine)->NDTO <> 0
      nCalculo       -= nCalculo * (dbfLine)->NDTO / 100
    end

    IF (dbfLine)->NDTOPRM <> 0
      nCalculo       -= nCalculo * (dbfLine)->NDTOPRM / 100
   end

RETURN ( nCalculo )



FUNCTION mkExtAge( cPath, lAppend, cPathOld, oMeter )

   local dbfExtAgeT

    IF oMeter <> NIL
        oMeter:cText    := "Generando Bases"
        sysrefresh()
    end

    CreateFiles( cPath )

   if lAppend .AND. lIsDir( cPathOld )

      dbUseArea( .T., cDriver(), cPath + "ExtAgeT.DBF", cCheckArea( "ExtAgeT", @dbfExtAgeT ), .F. )
      if !( dbfExtAget )->( neterr() )
         ( dbfExtAgeT )->( __dbApp( cPathOld + "ExtAgeT.DBF" ) )
         ( dbfExtAgeT )->( dbCloseArea() )

         dbUseArea( .T., cDriver(), cPath + "ExtAgeL.DBF", cCheckArea( "ExtAgeL", @dbfExtAgeT ), .F. )
         ( dbfExtAgeT )->( __dbApp( cPathOld + "ExtAgeL.DBF" ) )
         ( dbfExtAgeT )->( dbCloseArea() )
      end

   end

   rxExtAge( cPath, oMeter )

RETURN NIL



FUNCTION rxExtAge( cPath, oMeter )

   local dbfExtAgeT

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "EXTAGET.DBF" ) .OR. !lExistTable( cPath + "EXTAGEL.DBF" )
        CreateFiles( cPath )
   end

   fEraseIndex( cPath + "ExtAgeT.CDX" )
   fEraseIndex( cPath + "ExtAgeL.CDX" )

   dbUseArea( .T., cDriver(), cPath + "EXTAGET.DBF", cCheckArea( "EXTAGET", @dbfExtAgeT ), .F. )
   if !( dbfExtAgeT )->( neterr() )
      ( dbfExtAgeT)->( __dbPack() )

      ( dbfExtAgeT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfExtAgeT)->( ordCreate( cPath + "EXTAGET.CDX", "NNUMEXT", "CSEREXT + Str( NNUMEXT ) + CSUFEXT", {|| Field->CSEREXT + Str( Field->NNUMEXT ) + Field->CSUFEXT } ) )

      ( dbfExtAgeT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfExtAgeT)->( ordCreate( cPath + "EXTAGET.CDX", "DFECEXT", "DFECEXT", {|| Field->DFECEXT } ) )

      ( dbfExtAgeT)->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfExtAgeT)->( ordCreate( cPath + "EXTAGET.CDX", "CCODALM", "CCODALM", {|| Field->CCODALM } ) )

      ( dbfExtAgeT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de existencias" )
   end

   dbUseArea( .T., cDriver(), cPath + "EXTAGEL.DBF", cCheckArea( "EXTAGEL", @dbfExtAgeL ), .F. )
   if !( dbfExtAgeL )->( neterr() )
      ( dbfExtAgeL)->( __dbPack() )

      ( dbfExtAgeL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfExtAgeL )->( ordCreate( cPath + "EXTAGEL.CDX", "NNUMEXT", "CSEREXT + Str( NNUMEXT ) + CSUFEXT", {|| Field->CSEREXT + Str( Field->NNUMEXT ) + Field->CSUFEXT } ) )

      ( dbfExtAgeL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfExtAgeL )->( ordCreate( cPath + "EXTAGEL.CDX", "CREF", "CREF", {|| Field->CREF } ) )

      ( dbfExtAgeL )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de existencias" )
   end

RETURN NIL



STATIC FUNCTION BeginTrans( aTmp )

   local cDbf     := "EAgeL"
   local cExt     := aTmp[ (dbfExtAgeT)->( FieldPos( "CSEREXT" ) ) ] + Str( aTmp[ (dbfExtAgeT)->( FieldPos( "NNUMEXT" ) ) ] ) + aTmp[ (dbfExtAgeT)->( FieldPos( "CSUFEXT" ) ) ]

   cNewFile       := cGetNewFileName( cPatTmp() + cDbf )





   dbCreate( cNewFile, aSqlStruct( aColExtAge() ), cLocalDriver() )

   dbUseArea( .T., cLocalDriver(), cNewFile, cCheckArea( cDbf, @dbfTmp ), .F. )
   if !( dbfTmp )->( neterr() )

      ( dbfTmp )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmp )->( OrdCreate( cNewFile, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )





      if ( dbfExtAgeL )->( dbSeek( cExt ) )

         while ( ( dbfExtAgeL )->CSEREXT + Str( ( dbfExtAgeL )->NNUMEXT ) + ( dbfExtAgeL )->CSUFEXT == cExt .AND. !( dbfExtAgeL )->( Eof() ) )

            dbPass( dbfExtAgeL, dbfTmp, .T. )
            ( dbfExtAgeL )->( dbSkip() )

         end

      end

      ( dbfTmp )->( dbGoTop() )

   end

RETURN NIL



STATIC FUNCTION EndTrans( aTmp, oBrw, nMode )

   local oError
   local oBlock
   local aTabla
   local cExt     := aTmp[ (dbfExtAgeT)->( FieldPos( "CSEREXT" ) ) ] + Str( aTmp[ (dbfExtAgeT)->( FieldPos( "NNUMEXT" ) ) ] ) + aTmp[ (dbfExtAgeT)->( FieldPos( "CSUFEXT" ) ) ]





   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      BeginTransaction()

      oMsgProgress():SetRange( 0, ( dbfTmp )->( LastRec() ) )

      do case
      case nMode == 2 .AND. (dbfExtAgeL)->( DbSeek( cExt ) )





         oStock:ExtAge( cExt, ( dbfExtAgeT )->cCodAlm, .T., .F. )

      case nMode == 1 .OR. nMode == 4

         aTmp[ (dbfExtAgeT)->( FieldPos( "CSEREXT" ) ) ]  := "A"
         aTmp[ (dbfExtAgeT)->( FieldPos( "NNUMEXT" ) ) ]  := nNewDoc( "A", dbfExtAgeT, "NEXTAGE", , dbfCount )
         aTmp[ (dbfExtAgeT)->( FieldPos( "CSUFEXT" ) ) ]  := RetSufEmp()

      end

      ( dbfTmp )->( DbGoTop() )
      while ( dbfTmp )->( !Eof() )

         aTabla            := DBScatter( dbfTmp )
         aTabla[(dbfExtAgeT)->( FieldPos( "CSEREXT" ) )]  := aTmp[(dbfExtAgeT)->( FieldPos( "CSEREXT" ) )]
         aTabla[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )]  := aTmp[(dbfExtAgeT)->( FieldPos( "NNUMEXT" ) )]
         aTabla[(dbfExtAgeT)->( FieldPos( "CSUFEXT" ) )]  := aTmp[(dbfExtAgeT)->( FieldPos( "CSUFEXT" ) )]

         dbGather( aTabla, dbfExtAgeL, .T. )

         ( dbfTmp )->( dbSkip() )

         oMsgProgress():Deltapos(1)

      end





      oStock:ExtAge( cExt, ( dbfExtAgeT )->cCodAlm, .F., .T. )





      dbCommitAll()

      CommitTransaction()

   RECOVER USING oError

      RollBackTransaction()
      msgStop( "Imposible almacenar documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )





   dbfErase( cNewFile )

   EndProgress()

Return .T.



STATIC FUNCTION KillTrans()





    ( dbfTmp )->( dbCloseArea() )

   dbfErase( cNewFile )

RETURN NIL



STATIC FUNCTION CreateFiles( cPath )

   dbCreate( cPath + "EXTAGET.DBF", aSqlStruct( aItmExtAge() ), cDriver() )
   dbCreate( cPath + "EXTAGEL.DBF", aSqlStruct( aColExtAge() ), cDriver() )

RETURN NIL







STATIC FUNCTION nTotLNumArt( dbfDetalle )

    local nCalculo := 0

   if lCalCaj() .AND. ( dbfDetalle )->NCANENT <> 0 .AND. ( dbfDetalle )->NPREUNIT <> 0
      nCalculo    := ( dbfDetalle )->NCANENT
   end

RETURN ( nCalculo )



STATIC FUNCTION GenExtAge( lPrinter, cCaption, cCodDoc, nCopies )

   local nNumExt        := ( dbfExtAgeT )->CSEREXT + Str( ( dbfExtAgeT )->NNUMEXT ) + ( dbfExtAgeT )->CSUFEXT
   local nCodAlm        := ( dbfExtAgeT )->CCODALM
   local nOldRecno      := ( dbfExtAgeL )->( recno() )

   IIF( lPrinter == nil, lPrinter := .F., ) ;
   IIF( cCaption == nil, cCaption := "Imprimiendo existencias", ) ;
   IIF( cCodDoc == nil, cCodDoc := cFormatoDocumento( ( dbfExtAgeT )->cSerExt, "nExtAge", dbfCount ), ) ;
   IIF( nCopies == nil, nCopies := nCopiasDocumento( ( dbfExtAgeT )->cSerExt, "nExtAge", dbfCount ), ) ;

   private cDbf         := dbfExtAgeT
   private cDbfCol      := dbfExtAgeL
    private cIva            := dbfIva
    private cFPago            := dbfFPago
   private cPinDivExt   := cPinDiv
   private cPicEurExt   := cPicEur
   private nDinDivExt   := nDinDiv
   private cPouExtAge   := cPouDiv

   if Empty( cCodDoc )
      cCodDoc           := if( ( dbfExtAgeT )->cSerExt == "A", "EX1", "EX2" )
   end

   if !lExisteDocumento( cCodDoc, dbfDoc )
      return nil
   end

   if lVisualDocumento( cCodDoc, dbfDoc )

      PrintReportExtAge( if( lPrinter, 1, 2 ), nCopies, nil, dbfDoc )

   else

      ( dbfAlmT    )->( dbSeek( nCodAlm ) )
      ( dbfExtAgeL )->( dbSeek( nNumExt ) )

      if lPrinter
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,, .T., .F.,,, cCaption,,, )
      else
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .T.,,, cCaption,,, )
      end

      if !Empty( oInf ) .AND. oInf:lCreated

         oInf:lFinish            := .F.
         oInf:lNoCancel          := .T.
         oInf:bSkip              := {|| ( dbfExtAgeL )->( dbSkip() ) }

         oInf:oDevice:lPrvModal  := .T.

         SetMargin( cCodDoc, oInf )
         PrintColum( cCodDoc, oInf )

      end

      RptEnd()



      oInf:Activate(, {||       ( ( dbfExtAgeL )->cSerExt + Str( ( dbfExtAgeL )->nNumExt ) + ( dbfExtAgeL )->cSufExt == nNumExt )},,,, {||  Epage( cCodDoc, oInf )},,,,,,,, )

      ( dbfExtAgeL )->( dbGoto( nOldRecno ) )

   end

RETURN NIL



static function nGenExtAge( lImp, cTitle, cCodDoc, cPrinter, nCopy )

   local nImpYet  := 1

   IIF( lImp == nil, lImp := .T., ) ;

   nCopy          := Max( nCopy, 1 )

   while nImpYet <= nCopy
      GenExtAge( lImp, cTitle, cCodDoc )
      nImpYet++
   end

return nil



function lGenExtAge( oBrw, oBtn, lImp )

   local bAction

   IIF( lImp == nil, lImp := .F., ) ;

   if !( dbfDoc )->( dbSeek( "EX" ) )








      oWndBrw:NewAt( "DOCUMENT",,, {||( msgStop( "No hay documentos predefinidos" ) )}, "No hay documentos", "N",,, 4, oBtn, .F. )

   else

      while ( dbfDoc )->CTIPO == "EX" .AND. !( dbfDoc )->( eof() )

         bAction  := bGenExtAge( lImp, "Imprimiendo existencias", ( dbfDoc )->CODIGO )

         oWndBrw:NewAt( "Document", , , bAction, Rtrim( ( dbfDoc )->cDescrip ) , , , , , oBtn )

         ( dbfDoc )->( dbSkip() )

      end

   end

return nil



static function bGenExtAge( lImprimir, cTitle, cCodDoc )

   local bGen
   local lImp  := by( lImprimir )
   local cTit  := by( cTitle    )
   local cCod  := by( cCodDoc   )

   if lImp
      bGen     := {|| nGenExtAge( lImp, cTit, cCod ) }
   else
      bGen     := {|| GenExtAge( lImp, cTit, cCod ) }
   end

return ( bGen )



STATIC FUNCTION ChgState( oBrw )

   if dbLock( dbfExtAgeT )
      ( dbfExtAgeT )->lLiqExt := ! ( dbfExtAgeT )->lLiqExt
      ( dbfExtAgeT )->( dbUnlock() )
   end

   oBrw:DrawSelect()

RETURN NIL
#line 2204 ".\Prg\Extage.prg"
Static Function DataReport( oFr )





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Existencia", ( dbfExtAgeT )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Existencia", cItemsToReport( aItmExtAge() ) )

   oFr:SetWorkArea(     "Lineas de existencias", ( dbfExtAgeL )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de existencias", cItemsToReport( aColExtAge() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlmT )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Formas de pago", ( dbfFpago )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetMasterDetail( "Existencia", "Lineas de existencias",   {|| ( dbfExtAgeT )->cSerExt + Str( ( dbfExtAgeT )->nNumExt ) + ( dbfExtAgeT )->cSufExt } )
   oFr:SetMasterDetail( "Existencia", "Empresa",                 {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Existencia", "Almacenes",               {|| ( dbfExtAgeT )->cCodAlm } )
   oFr:SetMasterDetail( "Existencia", "Formas de pago",          {|| ( dbfExtAgeT )->cCodPgo } )

   oFr:SetResyncPair(   "Existencia", "Lineas de existencias" )
   oFr:SetResyncPair(   "Existencia", "Empresa" )
   oFr:SetResyncPair(   "Existencia", "Almacenes" )
   oFr:SetResyncPair(   "Existencia", "Formas de pago" )

Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Existencia" )
   oFr:DeleteCategory(  "Lineas de existencias" )





   oFr:AddVariable(     "Existencia",             "Total existencia",                     "GetHbVar('nTotExt')" )
   oFr:AddVariable(     "Existencia",             "Total descuento",                      "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Existencia",             "Total descuento pronto pago",          "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Existencia",             "Total bruto",                          "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Existencia",             "Total neto",                           "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Existencia",             "Total " + cImp(),                      "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Existencia",             "Total RE",                             "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Existencia",             "Bruto primer tipo de " + cImp(),       "GetHbArrayVar('aIvaUno',1)" )
   oFr:AddVariable(     "Existencia",             "Bruto segundo tipo de " + cImp(),      "GetHbArrayVar('aIvaDos',1)" )
   oFr:AddVariable(     "Existencia",             "Bruto tercer tipo de " + cImp(),       "GetHbArrayVar('aIvaTre',1)" )
   oFr:AddVariable(     "Existencia",             "Base primer tipo de " + cImp(),        "GetHbArrayVar('aIvaUno',2)" )
   oFr:AddVariable(     "Existencia",             "Base segundo tipo de " + cImp(),       "GetHbArrayVar('aIvaDos',2)" )
   oFr:AddVariable(     "Existencia",             "Base tercer tipo de " + cImp(),        "GetHbArrayVar('aIvaTre',2)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje primer tipo " + cImp(),     "GetHbArrayVar('aIvaUno',3)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje segundo tipo " + cImp(),    "GetHbArrayVar('aIvaDos',3)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje tercer tipo " + cImp(),     "GetHbArrayVar('aIvaTre',3)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje primer tipo RE",            "GetHbArrayVar('aIvaUno',4)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje segundo tipo RE",           "GetHbArrayVar('aIvaDos',4)" )
   oFr:AddVariable(     "Existencia",             "Porcentaje tercer tipo RE",            "GetHbArrayVar('aIvaTre',4)" )

   oFr:AddVariable(     "Lineas de existencias",  "Total linea existencia",               "CallHbFunc('nTotLExtAge')" )
   oFr:AddVariable(     "Lineas de existencias",  "Total unidades artículo",              "CallHbFunc('nTotNExtAge')" )

Return nil



Function DesignReportExtAge( oFr, dbfDoc )

   if OpenFiles()





      DataReport( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotExtAge');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "CabeceraColumnas",  "MainPage", 6 )
         oFr:SetProperty(     "CabeceraColumnas",  "Top", 200 )
         oFr:SetProperty(     "CabeceraColumnas",  "Height", 0 )
         oFr:SetProperty(     "CabeceraColumnas",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet", "Existencia" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de existencias" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      CloseFiles()

   else

      Return .F.

   end

Return .T.



Function PrintReportExtAge( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;
   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2
            oFr:ShowPreparedReport()

         case nDevice == 1
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.



FUNCTION nTotNExtAge( uDbf )

   local nTotUnd

   IIF( uDbf == nil, uDbf := dbfExtAgeL, ) ;

   do case
      case ValType( uDbf ) == "A"

      nTotUnd  := NotCaja( uDbf[ (dbfExtAgeL)->( FieldPos( "NCANENT"  ) ) ] )
      nTotUnd  *= uDbf[ (dbfExtAgeL)->( FieldPos( "NUNICAJA" ) ) ]

      case ValType( uDbf ) == "C"

      nTotUnd  := NotCaja( ( uDbf )->nCanEnt )
      nTotUnd  *=( uDbf )->nUniCaja

      otherwise

      nTotUnd  := NotCaja( uDbf:nCanEnt )
      nTotUnd  *= uDbf:nUniCaja

   end

Return ( nTotUnd )

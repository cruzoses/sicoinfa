#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 5 ".\Prg\InfoArticulo.prg"
Static oInfoArticulo



Function CreateInfoArticulo()

   CloseInfoArticulo()

   if Empty( oInfoArticulo )
      oInfoArticulo  := TInfoArticulo():New()
   end

Return nil



Function CloseInfoArticulo()

   if oInfoArticulo <> nil
      oInfoArticulo:CloseFiles()
   end

   oInfoArticulo     := nil

Return nil



_HB_CLASS TInfoArticulo ; UTILITY FUNCTION TInfoArticulo(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfoArticulo" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )

   _HB_MEMBER { oDbfArticulo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArticulo" }, .F., .F. ), )
   _HB_MEMBER { oDbfIva} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfIva" }, .F., .F. ), )
   _HB_MEMBER { oDbfKit} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfKit" }, .F., .F. ), )
   _HB_MEMBER { oDbfDivisa} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfDivisa" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtCode} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtCode" }, .F., .F. ), )

   _HB_MEMBER { oCodigoArticulo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCodigoArticulo" }, .F., .F. ), )
   _HB_MEMBER { oNombreArticulo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oNombreArticulo" }, .F., .F. ), )
   _HB_MEMBER { oPrecioArticulo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrecioArticulo" }, .F., .F. ), )

   _HB_MEMBER New(); IIF( .F., s_oClass:ModMethod( "New", @TInfoArticulo_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TInfoArticulo_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfoArticulo_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfoArticulo_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfoArticulo_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfoArticulo_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LoadArticulo(); IIF( .F., s_oClass:ModMethod( "LoadArticulo", @TInfoArticulo_LoadArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LoadArticulo", @TInfoArticulo_LoadArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfoArticulo ;



UTILITY STATIC function TInfoArticulo_OpenFiles( cPath) ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   BEGIN SEQUENCE

   if !File( cPatArt() + "Articulo.Dbf" )
      MsgAlert( "No existe fichero de articulos", cPatArt() + "Articulo.Dbf" )
   else
      ::oDbfArticulo := DbfServer( "Articulo.Dbf", "ARTICULO" ):NewOpen( "Articulo.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArticulo:AddBag( "Articulo.Cdx" ) ; ::oDbfArticulo:AddBag( ) ; ::oDbfArticulo:AutoIndex()
   end

   if !File( cPatArt() + "ArtCodebar.Dbf" )
      MsgAlert( "No existe fichero de codigos de barras", cPatArt() + "ArtCodebar.Dbf" )
   else
      ::oDbfArtCode := DbfServer( "ArtCodebar.Dbf", "ARTCODEBAR" ):NewOpen( "ArtCodebar.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArtCode:AddBag( "ArtCodebar.Cdx" ) ; ::oDbfArtCode:AddBag( ) ; ::oDbfArtCode:AutoIndex()
   end

   if !File( cPatDat() + "Tiva.Dbf" )
      MsgAlert( "No existe fichero de tipos de " + cImp(), cPath + "Tiva.Dbf" )
   else
      ::oDbfIva := DbfServer( "Tiva.Dbf", "TIVA" ):NewOpen( "Tiva.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "Tiva.Cdx" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()
   end

   if !File( cPatDat() + "Divisas.Dbf" )
      MsgAlert( "No existe fichero de divisas", cPath + "Divisas.Dbf" )
   else
      ::oDbfDivisa := DbfServer( "Divisas.Dbf", "DIVISAS" ):NewOpen( "Divisas.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDivisa:AddBag( "Divisas.Cdx" ) ; ::oDbfDivisa:AddBag( ) ; ::oDbfDivisa:AutoIndex()
   end

   if !File( cPatArt() + "ArtKit.Dbf" )
      MsgAlert( "No existe fichero de articulos", cPatArt() + "ArtKit.Dbf" )
   else
      ::oDbfKit := DbfServer( "ArtKit.Dbf", "ARTKIT" ):NewOpen( "ArtKit.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ArtKit.Cdx" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()
   end

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )







UTILITY STATIC function TInfoArticulo_CloseFiles() ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   if !Empty( ::oDbfArticulo )
      ::oDbfArticulo:End()
   end

   if !Empty( ::oDbfArtCode )
      ::oDbfArtCode:End()
   end

   if !Empty( ::oDbfIva )
      ::oDbfIva:End()
   end

   if !Empty( ::oDbfDivisa )
      ::oDbfDivisa:End()
   end

   if !Empty( ::oDbfKit )
      ::oDbfKit:End()
   end

   ::oDbfArticulo    := nil
   ::oDbfArtCode     := nil
   ::oDbfIva         := nil
   ::oDbfDivisa      := nil
   ::oDbfKit         := nil

   oInfoArticulo     := nil

Return .T.



UTILITY STATIC function TInfoArticulo_New() ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local cCodigoArticulo   := Space( 18 )
   local cNombreArticulo   := Space( 100 )
   local nPrecioArticulo   := 0

   if ::OpenFiles()

      ::oDlg = TDialog():New(,,,,, "SearchArticulo",, .F.,,,,,, .F.,,,,,, .F., )




      ::oCodigoArticulo := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodigoArticulo, cCodigoArticulo:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

         ::oCodigoArticulo:bValid   := {|| ::LoadArticulo() }
         ::oCodigoArticulo:bHelp    := {|| BrwArticulo( ::oCodigoArticulo, ::oNombreArticulo ) }



      ::oNombreArticulo := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cNombreArticulo, cNombreArticulo:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      ::oPrecioArticulo := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nPrecioArticulo, nPrecioArticulo:= u ) }, ::oDlg,, "@E 999,999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 130, {||( ::oDlg:end( 1 ) )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oCodigoArticulo:SetFocus() }

      ::oDlg:Activate( , , , .T., {|| ::CloseFiles() }, .F. )

   end

Return ( Self )



UTILITY STATIC function TInfoArticulo_LoadArticulo() ; local Self AS CLASS TInfoArticulo := QSelf() AS CLASS TInfoArticulo

   local cCodigoArticulo   := ::oCodigoArticulo:VarGet()





   cCodigoArticulo         := cSeekCodebar( cCodigoArticulo, ::oDbfArtCode:cAlias, ::oDbfArticulo:cAlias )





   if ::oDbfArticulo:Seek( cCodigoArticulo )

      ::oCodigoArticulo:cText( cCodigoArticulo )

      if !Empty( ::oDbfArticulo:cDesTik )
         ::oNombreArticulo:cText( ::oDbfArticulo:cDesTik )
      else
         ::oNombreArticulo:cText( ::oDbfArticulo:Nombre )
      end

      ::oPrecioArticulo:cText( nRetPreArt( 1, cDivEmp(), .T., ::oDbfArticulo:cAlias, ::oDbfDivisa:cAlias, ::oDbfKit:cAlias, ::oDbfIva:cAlias ) )

   else

      MsgStop( "Artículo no encontrado" )

   end

Return .T.

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 60 ".\Prg\Dlgtools.prg"
FUNCTION cGetExpression( cExpr, aBase, cAlias )

    local oDlg, oExpr, oFields, cTemp
    local oBtnDate, oBtnChar, oBtnNumber
    local aUnDo       := { "" }
    local nField      := 1
    local cTitle      := "Generador de Expresiones"
    local hOldRes     := GetResources()

    IIF( cExpr == nil, cExpr := Space( 200 ), ) ;
    IIF( aBase == nil, aBase := { {"Not passed"}, {"C"} }, ) ;
    IIF( cAlias == nil, cAlias := Alias(), ) ;

    cTemp = PadR( cExpr, 200 )

    SetResources( "FwTools.dll" )

   oDlg = TDialog():New(,,,, cTitle, "ExpBuilder",, .F.,,,,,, .F.,,,,,, .F., )

    oExpr := TGet():ReDefine( 110, { | u | If( PCount()==0, cTemp, cTemp:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cTemp", )




    oFields := TListBox():ReDefine( 130, { | u | If( PCount()==0, nField, nField:= u ) },, {||CheckBtn( aBase[nField,2] , oBtnDate, oBtnChar, oBtnNumber )}, oDlg,,,,,,, {|| ExprAdd( " " + cAlias + " > " + ( aBase[nField, 1] ),    @cTemp, oExpr, aUnDo )},, .F.,, )


   TButton():ReDefine( 150, {||ExprAdd( " = ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 160, {||ExprAdd( " <> ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 170, {||ExprAdd( " .and. ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 180, {||ExprAdd( " + ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 190, {||ExprAdd( " < ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 200, {||ExprAdd( " > ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


   TButton():ReDefine( 210, {||ExprAdd( " .or. ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 220, {||ExprAdd( " - ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 230, {||ExprAdd( " <= ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 240, {||ExprAdd( " >= ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 250, {||ExprAdd( " .not. ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 260, {||ExprAdd( " * ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 270, {||ExprAdd( " ( ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 280, {||ExprAdd( " ) ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 290, {||ExprAdd( " $ ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 300, {||ExprAdd( " / ", @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )


    oBtnDate := TButton():ReDefine( 310, {||( ExprAdd( GetValue("D"), @cTemp, oExpr, aUnDo ) )}, oDlg,,, .F.,,,, .F. )


    oBtnChar := TButton():ReDefine( 320, {||( ExprAdd( GetValue("C"), @cTemp, oExpr, aUnDo ) )}, oDlg,,, .F.,,,, .F. )


    oBtnNumber := TButton():ReDefine( 330, {||( ExprAdd( GetValue("N"), @cTemp, oExpr, aUnDo ) )}, oDlg,,, .F.,,,, .F. )







    TButton():ReDefine( 345, {||UnDo( @cTemp, oExpr, aUnDo )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 350, {||If( At( Type( cTemp ), "UIUE" ) == 0, MsgInfo( "Expresion Correcta" ), MsgAlert( "Expresion Invalida" ) )}, oDlg,,, .F.,,,, .F. )



    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( ShowFields( aBase, oFields ),    CheckBtn( aBase[nField,2], oBtnDate, oBtnChar, oBtnNumber ) )}, oDlg:bRClicked,,, )

   IF oDlg:nResult == 1
        cExpr = AllTrim( cTemp )
    ENDIF

    SetResources(hOldRes)

RETURN cExpr







STATIC FUNCTION UnDo( cTemp, oExpr, aUnDo )

   if Len( aUnDo ) > 0
      cTemp = PadR( ATail( aUnDo ), 100 )
      oExpr:Refresh()
      ASize( aUnDo, Len( aUnDo ) - 1 )
   else
      Tone( 900, 2 )
   endif

RETURN NIL







STATIC FUNCTION ExprAdd( cNew, cExpr, oExpr, aUnDo )

   AAdd( aUnDo, RTrim( cExpr ) )
   cExpr = PadR( RTrim( cExpr ) + cNew, 100 )
   oExpr:Refresh()

RETURN NIL







STATIC FUNCTION ShowFields( aBase, oLbx )

   local n

   oLbx:Reset()

    for n = 1 to Len( aBase )
        oLbx:Add( aBase[ n ][ 2 ]  )
   next

   oLbx:GoTop()

RETURN NIL



STATIC FUNCTION CheckBtn( cType, oBtnDate, oBtnChar, oBtnNumber )

    DO CASE
    CASE ( cType == "D" )
        oBtnDate:Enable()
        oBtnChar:Disable()
        oBtnNumber:Disable()

    CASE ( cType == "C" )
        oBtnDate:Disable()
        oBtnChar:Enable()
        oBtnNumber:Disable()

    CASE ( cType == "N" )
        oBtnDate:Disable()
        oBtnChar:Disable()
        oBtnNumber:Enable()

    end

RETURN ( .T. )



STATIC FUNCTION GetValue( cType )

    local oDlg
    local cTemp   := Space( 100 )

    IIF( cType == nil, cType := "C", ) ;

    oDlg = TDialog():New(,,,,, "GETVALUE",, .F.,,,,,, .F.,,,,,, .F., )



    TGet():ReDefine( 101, { | u | If( PCount()==0, cTemp, cTemp:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cTemp", )




    TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   IF oDlg:nResult == 1

        DO CASE
        CASE cType == "C"
            cTemp = '"' + AllTrim( cTemp ) + '"'
        CASE cType == "N"
            cTemp = AllTrim( cTemp )
        CASE cType == "D"
            cTemp = 'CTOD( "' + AllTrim( cTemp ) + '" )'
        end

    ELSE

        cTemp = ""

    end

RETURN ( cTemp )









FUNCTION Filtering( cAlias, aBase, oBrw )

    local cExpression := cGetExpression( cExpression, aBase, cAlias)

    IF At( Type( cExpression ), "UEUI" ) == 0
        (cAlias)->(dbSetFilter( &( "{|| " + cExpression + " }" ) ) )
    ELSE
        (cAlias)->(dbClearFilter(NIL))
    ENDIF

    (cAlias)->(DbGotop())

    IF oBrw <> NIL
        oBrw:refresh()
    end

RETURN NIL



FUNCTION ChangeIndx( aIndexes, cAlias, oBrw )

    local oDlg
    local nLbx

    IIF( cAlias == nil, cAlias := Alias(), ) ;

    nLbx := (cAlias)->(ORDNUMBER())

    oDlg = TDialog():New(,,,,, "ChangeIndx",, .F.,,,,,, .F.,,,,,, .F., )




    TListBox():ReDefine( 110, { | u | If( PCount()==0, nLbx, nLbx:= u ) }, aIndexes,, oDlg,,,,,,,,, .F.,, )


   TButton():ReDefine( 1, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )


    TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   IF oDlg:nResult == 1
        (cAlias)->(DBSETORDER( nLbx ) )
    end

    IF oBrw <> NIL
        oBrw:refresh()
        oBrw:setfocus()
    end


RETURN NIL



FUNCTION SetRep( cTitulo, cSubTitulo, nDevice )

    local oDlg

    IIF( cTitulo == nil, cTitulo := Space( 100 ), ) ;
    IIF( cSubTitulo == nil, cSubTitulo := Space( 100 ), ) ;
    IIF( nDevice == nil, nDevice := 1, ) ;

    oDlg = TDialog():New(,,,,, "SETREP",, .F.,,,,,, .F.,,,,,, .F., )



    TGet():ReDefine( 100, { | u | If( PCount()==0, cTitulo, cTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cTitulo", )



    TGet():ReDefine( 110, { | u | If( PCount()==0, cSubTitulo, cSubTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cSubTitulo", )




    TButton():ReDefine( 506, {||( nDevice := 1, oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 505, {||( nDevice := 2, oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )








FUNCTION DlgDateLimit()

    local oDlg
   local oFont1
    local hOldRes := GetResources()

    oFont1 := TFont():New( "Arial", 0, -14,, .T.,,,,,,,,,,,, )

    SetResources( "FwTools.dll" )

    oDlg = TDialog():New(,,,,, "REGISTER",, .F.,,,,,, .F.,,,,,, .F., )





    TSay():ReDefine( 10, {|| "La aplicación ha Excedido la fecha"}, oDlg,, "R/W",, .F., oFont1, .F., .F. )





    TSay():ReDefine( 11, {|| "programada para su uso."}, oDlg,, "R/W",, .F., oFont1, .F., .F. )




    TButton():ReDefine( 1, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

    oFont1:End() ; oFont1 := nil

    SetResources(hOldRes)

RETURN NIL



FUNCTION HelpBrowse( oGet, cAlias, cTitle, bAppend, bEdit )

    local oDlg
    local oGet1, cGet1
    local nRadio := 1
    local oBrw

    IIF( cAlias == nil, cAlias := Alias(), ) ;
    IIF( cTitle == nil, cTitle := "Ayuda a la Entrada", ) ;
    IIF( bAppend == nil, bAppend := MsgInfo( "Append !" ), ) ;
    IIF( bEdit == nil, bEdit := MsgInfo( "Edit !" ), ) ;

    (cAlias)->(DBGOTOP())



    oDlg = TDialog():New(,,,, cTitle, "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )






        oGet1 := TGet():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, cAlias ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, cAlias ) ) }, .F., .F.,,,,,, "FIND", "cGet1", )




        TRadMenu():Redefine( { | u | If( PCount()==0, nRadio, nRadio:= u ) }, oDlg,, { 102, 103 }, {|| ( (cAlias)->(ORDSETFOCUS(nRadio )), oBrw:refresh() )},,,, .F.,, )




        oBrw := TWBrowse():ReDefine( 105, {|| { (cAlias)->(FieldGet(1)), (cAlias)->(FieldGet(2)) } }, oDlg,,,,,,,,,,,,,, .F.,,,,, )




        TButton():ReDefine( 1, {||( oGet:varput( (cAlias)->(FieldGet(1)) ), oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 110, {||( Eval( bAppend, oBrw, cAlias ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 120, {||( Eval( bEdit, oBrw, cAlias ) )}, oDlg,,, .F.,,,, .F. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )







FUNCTION lRdDir( cPath, cMask )

   IIF( cMask == nil, cMask := "*.*", ) ;

   aEval( Directory( cPath + cMask ), {|aFile| fErase( cPath + aFile[ 1 ] ) } )



RETURN NIL







FUNCTION MsgTime( cMsg, cTitle, nSec )

   local oDlg, oMeter, oText, oBtn
    local nVal := 0
    local oTimer

    IIF( cMsg == nil, cMsg := "Processing...", ) ; IIF( cTitle == nil, cTitle := "Waiting...", ); IIF( nSec == nil, nSec := 4, );

   oDlg = TDialog():New( 5, 5, 10.4, 45, cTitle,,, .F.,,,,,, .F.,,,,,, .F., )


    oTimer := TTimer():New( 100, {||( nVal := nVal + 0.1, oMeter:set( nVal ), if( nVal == nSec, oDlg:end(), ) )}, )

   oText := TSay():New( 0.2, 0.5, {|| cMsg}, oDlg,,, .F., .F., .F., .F.,,, 130, 10, .F., .F., .F., .F., .F., .F., .F. )





    oMeter := TMeter():New( 1.2, 0.5, { | u | If( PCount()==0, nVal, nVal:= u ) }, nSec, oDlg, 150, 5, .F., .F.,, "", .T.,,,,, .F. )


    oBtn := TButton():New( 2.8, 18, "&Aceptar", oDlg, {|| ( oDlg:End() )}, 32, 11,,, .F., .F., .F.,, .F.,,, .F. )

    oDlg:bStart = { || oTimer:activate() }



    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( sysrefresh() )}, .T., {|Self|( oTimer:end(), .T. )},,, oDlg:bRClicked,,, )

RETURN NIL


















































































Function Calendario( dDate, cTitle )

   local oDlg
   local oCal

   IIF( dDate == nil, dDate := Date(), ) ;
   IIF( cTitle == nil, cTitle := "Calendario", ) ;

   oDlg = TDialog():New(,,,, cTitle, "Calendar",, .F.,,,,,, .F.,,,,,, .F., )

      oCal        := TCalendar():ReDefine( 100, { |u| if( pCount() == 0, dDate, dDate := u ) }, , oDlg, , , , , , , , , , , , {|| oDlg:End( 1 ) }, {|| oDlg:End( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if ( oDlg:nResult == 1 )
      dDate       := oCal:GetDate()
   end

RETURN ( dDate )




FUNCTION RowColDate(nDia,nMes,nAno,oBrowse,nSemana)

  LOCAL dFecha    := GetDate(nDia,nMes,nAno)
  LOCAL dFirstDay := dFecha - DAY(dFecha)

  oBrowse:GoTop()
  oBrowse:nColPos  = 1
  oBrowse:nColAct  = IF( DOW(dFecha) = 1 , 7 , DOW(dFecha) - 1 )
  nSemana = INT( ( DAY(dFecha) + DOW(dFirstDay) - 1 - oBrowse:nColAct + 7 ) / 7 )
  oBrowse:nRowPos = nSemana
  oBrowse:Refresh()

RETURN dFecha



FUNCTION GetDate(nDia,nMes,nAno)

  LOCAL dDate

  WHILE EMPTY( dDate := CTOD(STRZERO(nDia,2)+"/"+STRZERO(nMes,2)+"/"+STRZERO(nAno,4)) )
        --nDia
        nDia = MAX(nDia,1)
  END

RETURN dDate



FUNCTION aSemanas(nMes,nAno)

  LOCAL aSemana := {{"","","","","","",""}}
  LOCAL dFecha  := CTOD("01/"+STRZERO(nMes,2)+"/"+STRZERO(nAno,4))
  LOCAL nDia    := IF( DOW(dFecha) = 1 , 7 , DOW(dFecha) - 1 )
  LOCAL nSemana := 1

  WHILE MONTH(dFecha) = nMes
        IF nDia > 7
           nDia = 1
           ++nSemana
           AADD(aSemana,{"","","","","","",""})
        ENDIF
        aSemana[nSemana][nDia] = PADL( STR(DAY(dFecha)) , 4 )
        ++dFecha
        ++nDia
  END

RETURN aSemana



function aEvalValid( oDlg )

   local n
   local aControls := oDlg:aControls

   if aControls <> nil .AND. ! Empty( aControls )
      for n = 1 to Len( aControls )
          if aControls[ n ] <> nil .AND. aControls[ n ]:bValid <> nil
             if !Eval( aControls[ n ]:bValid )
                oDlg:aControls[ n ]:SetFocus()
             endif
         endif
      next
   endif

return nil



Function PrintPreview( oDevice )

   local nFor
   local hMeta
   local aFiles   := oDevice:aMeta

   CursorWait()

   StartDoc( oDevice:hDC, oDevice:cDocument )

   for nFor := 1 to len( aFiles )
      StartPage( oDevice:hDC )
      hMeta := GetEnhMetaFile( aFiles[nFor] )
      PlayEnhMetaFile( oDevice:hDC, hMeta,, .T. )
      DeleteEnhMetafile( hMeta )
      EndPage( oDevice:hDC )
   next

   EndDoc( oDevice:hDC )

   CursorArrow()

return nil



Function Week( dDate )

   local nMonth
   local nDay
   local nYear
   local nWeek
   local dDate2

   if valtype( dDate ) == "D" .AND. empty( dDate )
      return 0
   endif

   if empty( dDate )
      dDate    := date()
   endif

   nMonth      := month( dDate )
   nDay        := day( dDate )
   nYear       := year( dDate )

   dDate2      := dDate + 3 - ( ( dow( dDate ) + 5 ) % 7 )
   nWeek       := 1 + int( ( dDate2 - ctod( "01/01/" + str( year( dDate2 ) ) ) ) / 7 )

return nWeek































FUNCTION PrintPdf( oDevice )

   CursorWait()

   I2PDF_License_xH()

   aEval( oDevice:aMeta, {|cFile| I2PDF_AddImage_xH( cFile ) } )

   I2PDF_SetDPI_xH( 96 )

   I2PDF_MakePDF_xH( oDevice:cDocument )

   CursorArrow()

return nil












FUNCTION ExitNoSave( nMode, cAlias )

   IF ( cAlias ) <> nil .AND. ( cAlias )->( LastRec() ) == 0
      RETURN .T.
   end

    IF nMode == 1
      RETURN ApoloMsgNoYes("¿ Salir sin grabar ?" , "!! Atención!!" )
    end

RETURN .T.
#line 857 ".\Prg\Dlgtools.prg"
_HB_CLASS TWSayTimer ; UTILITY FUNCTION TWSayTimer(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TWSayTimer" , {TControl():classh} ) ) ; ;

   _HB_MEMBER {AS LOGICAL lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData("LOGICAL",, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )
   _HB_MEMBER {AS LOGICAL lFont} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lFont" }, .F., .F. ), )
   _HB_MEMBER {AS LOGICAL lPixel} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lPixel" }, .F., .F. ), )
   _HB_MEMBER {AS LOGICAL lTransparent} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lTransparent" }, .F., .F. ), )
   _HB_MEMBER {AS LOGICAL lNoBorder} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lNoBorder" }, .F., .F. ), )
   _HB_MEMBER {AS LOGICAL lAmPm} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lAmPm" }, .F., .F. ), )
   _HB_MEMBER {AS LOGICAL lShortTime} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lShortTime" }, .F., .F. ), )

   _HB_MEMBER {AS OBJECT oTmr} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT", NIL, nScope + IIF( .F., 32, 0 ), { "oTmr" }, .F., .F. ), )

   _HB_MEMBER {AS NUMERIC nClrPen} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 16711680, nScope + IIF( .F., 32, 0 ), { "nClrPen" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC nClrShadow} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 8421504, nScope + IIF( .F., 32, 0 ), { "nClrShadow" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC nInterval} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 1, nScope + IIF( .F., 32, 0 ), { "nInterval" }, .F., .F. ), )


   _HB_MEMBER new( nTop, nLeft, oWnd, oFont, nInterval, clrText, clrShadow,  clrBack, clrPen, lPixel, lTransparent, lAmPm, lShortTime) AS CLASS TWSayTimer; IIF( .F., s_oClass:ModMethod( "new", @TWSayTimer_new(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "new", @TWSayTimer_new(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Redefine( nId, oWnd, oFont, nInterval, clrText, clrShadow,  clrBack, clrPen, lTransparent, lAmPm, lShortTime) AS CLASS TWSayTimer; IIF( .F., s_oClass:ModMethod( "Redefine", @TWSayTimer_Redefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @TWSayTimer_Redefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER paint(); IIF( .F., s_oClass:ModMethod( "paint", @TWSayTimer_paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "paint", @TWSayTimer_paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Display(); IIF( .F., s_oClass:ModInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER settimer(); IIF( .F., s_oClass:ModMethod( "settimer", @TWSayTimer_settimer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "settimer", @TWSayTimer_settimer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER updatecoord(); IIF( .F., s_oClass:ModMethod( "updatecoord", @TWSayTimer_updatecoord(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "updatecoord", @TWSayTimer_updatecoord(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER activate(); IIF( .F., s_oClass:ModInline( "activate", {|Self | Self, ::oTmr:activate() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "activate", {|Self | Self, ::oTmr:activate() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER pause(); IIF( .F., s_oClass:ModInline( "pause", {|Self | Self, ::oTmr:deactivate() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "pause", {|Self | Self, ::oTmr:deactivate() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER END(); IIF( .F., s_oClass:ModMethod( "END", @TWSayTimer_END(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "END", @TWSayTimer_END(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Initiate( hDlg); IIF( .F., s_oClass:ModMethod( "Initiate", @TWSayTimer_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Initiate", @TWSayTimer_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER EraseBkGnd(hDC); IIF( .F., s_oClass:ModInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER convertime(); IIF( .F., s_oClass:ModMethod( "convertime", @TWSayTimer_convertime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "convertime", @TWSayTimer_convertime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TWSayTimer ;





UTILITY STATIC function TWSayTimer_new( nTop, nLeft, oWnd, oFont, nInterval, clrText, clrShadow,  clrBack, clrPen, lPixel, lTransparent, lNoBorder, lAmPm,  lShortTime) ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer

   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ;
   IIF( nTop == nil, nTop := ::nTop, ) ;
   IIF( nLeft == nil, nLeft := ::nLeft, ) ;
   IIF( nInterval == nil, nInterval := ::nInterval, ) ;
   IIF( clrPen == nil, clrPen := GetSysColor( 15 ), ) ;
   IIF( clrText == nil, clrText := oWnd:nClrText, ) ;
   IIF( clrBack == nil, clrBack := GetSysColor( 15 ), ) ;
   IIF( lPixel == nil, lPixel := .F., ) ;
   IIF( lTransparent == nil, lTransparent := ::lTransparent, ) ;
   IIF( ClrShadow == nil, ClrShadow := 8421504, ) ;
   IIF( lNoBorder == nil, lNoBorder := .F., ) ;
   IIF( lAmPm == nil, lAmPm := .F., ) ;

   IF ValType(oFont) == "U"
      ::oFont := TFont():New( "Tahoma", 18, 18,, .T.,,,,,,,,,,,, )
      ::lFont := .T.
   ELSE
      ::oFont := oFont
   ENDIF

   ::lShortTime   := lShortTime
   ::lAmPm        := lAmPm
   ::lTransparent := lTransparent
   ::oWnd         := oWnd
   ::nTop         := nTop * IF( !lPixel, 18, 1 )
   ::nLeft        := nLeft * IF( !lPixel, 6, 1 )
   ::updatecoord()
   ::nStyle       := nOR( 1073741824, 268435456, 33554432 )
   ::nId          := ::GetNewId()
   ::nInterval    := nInterval * 1000
   ::nClrPen      := clrPen
   ::nClrShadow   := clrShadow
   ::nClrText     := clrText
   ::nClrPane     := clrBack
   ::lDrag        := .F.
   ::lNoBorder    := lNoBorder

   ::setBrush( ::oWnd:oBrush )
   ::Register()

   IF !Empty( ::oWnd:hWnd )
      ::Create()
      ::oWnd:AddControl( Self )
   ELSE
      ::oWnd:DefControl( Self )
   ENDIF

   ::settimer()

   RETURN Self




UTILITY STATIC function TWSayTimer_Redefine( nId, oWnd, oFont, nInterval, clrText, clrShadow,  clrBack, clrPen, lTransparent, lAmPm,  lShortTime) ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer
   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ;
   IIF( nInterval == nil, nInterval := ::nInterval, ) ;
   IIF( clrPen == nil, clrPen := ::nClrPen, ) ;
   IIF( clrText == nil, clrText := oWnd:nClrText, ) ;
   IIF( clrBack == nil, clrBack := GetSysColor( 15 ), ) ;
   IIF( lTransparent == nil, lTransparent := ::lTransparent, ) ;
   IIF( lAmPm == nil, lAmPm := .F., ) ;

   IF ValType(oFont) == "U"
      ::oFont := TFont():New( "Tahoma", 18, 18,, .T.,,,,,,,,,,,, )
      ::lFont := .T.
   ELSE
      ::oFont := oFont
   ENDIF

   ::lShortTime := lShortTime
   ::lAmPm      := lAmPm
   ::nId        := nId
   ::oWnd       := oWnd
   ::nInterval  := nInterval * 1000
   ::nClrPen    := clrPen
   ::nClrShadow := clrShadow
   ::nClrText   := clrText
   ::nClrPane   := clrBack
   ::lDrag      := .F.

   ::Register( nOR( 1, 2 ) )

   oWnd:DefControl( Self )

   RETURN Self


UTILITY STATIC function TWSayTimer_paint() ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer
   LOCAL hPen       := 0
   LOCAL hBrush     := 0
   LOCAL nBkOld     := 0
   LOCAL hFontOld   := 0
   LOCAL cTime      := ::convertime(Time())
   LOCAL aInfo      := ::DispBegin()
   LOCAL hOldBrush  := 0
   LOCAL aRect      := GetClientRect( ::hWnd )
   LOCAL aRect1     := GetClientRect( ::hWnd )
   LOCAL aRect2     := GetClientRect( ::hWnd )

   hPen      := CreatePen( 1, 3, ::nClrPen )
   nBkOld    := SetBkMode( ::hDC, 1 )
   hFontOld  := SelectObject( ::hDC, ::oFont:hFont )
   IF ::lTransparent
      hBrush    := ::oBrush:hBrush
   ELSE
      hBrush    := CreateSolidBrush( ::nClrPane )
   ENDIF

   IF ::lNoBorder
      IF ::oWnd:ClassName() == "TMDIFRAME"
         SetBrushOrgEx( ::hDC, -(::nLeft+1), -(::nTop+1) )
      ELSE
         SetBrushOrgEx( ::hDC, -::nLeft, -::nTop )
      ENDIF
      FillRect( ::hDC, aRect, hBrush )
   ELSE
      hOldBrush := SelectObject( ::hDC, hBrush )
      SetBrushOrgEx( ::hDC, -::nLeft, -::nTop )
      Rectangle( ::hDC, 0, 0, ::nHeight, ::nWidth, hPen )
      SelectObject( ::hDC, hOldBrush )
   ENDIF
   SetBrushOrgEx( ::hDC, 0, 0 )

   IF ValType(::nClrShadow) # "U"
      SetTextColor( ::hDC, ::nClrShadow )
      aRect1[1] := aRect1[1] + 2
      aRect1[2] := aRect1[2] + 2
      DrawText( ::hDC, cTime, aRect1 )
   ENDIF

   SetTextColor( ::hDC, ::nClrText )
   aRect2[1] := aRect2[1] + 3
   aRect2[2] := aRect2[2] + 3
   DrawText( ::hDC, cTime, aRect2 )

   if ! ::lTransparent
      DeleteObject( hBrush )
   endif
   DeleteObject( hPen )
   SelectObject( ::hDC, hFontOld )
   SetBkMode( ::hDC, nBkOld )

   ::DispEnd( aInfo )

   RETURN NIL


UTILITY STATIC function TWSayTimer_settimer() ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer

   ::oTmr := TTimer():New( ::nInterval, {||If( IsWindowVisible( ::hWnd ), ::refresh(), )}, Self )
   ::oTmr:Activate()

   RETURN NIL


UTILITY STATIC function TWSayTimer_updatecoord() ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer
   LOCAL hFontOld  := 0
   LOCAL cTime     := ::convertime(Time())

   hFontOld  := SelectObject( ::GETDC, ::oFont:hFont )
   ::nBottom := ::nTop + GetTextHeight( ::oFont:hFont, ::hDC ) + 6
   ::nRight  := ::nLeft + GetTextWidth( ::hDC, cTime, ::oFont:hFont ) + 6

   SelectObject( ::hDC, hFontOld )
   ::ReleaseDC()

   RETURN NIL


UTILITY STATIC function TWSayTimer_END() ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer
   ::oTmr:END()

   IF ::lFont
      ::oFont:END()
   ENDIF

   RETURN NIL


UTILITY STATIC function TWSayTimer_Initiate( hDlg) ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer

   ::TControl:Initiate( hDlg )
   IF !IsAppThemed()
      IF ::lTransparent
         IF !Empty( ::oWnd:oBrush:hBitmap ) .AND. !Empty( ::oBrush )
            ::SetBrush( ::oWnd:oBrush )
         ENDIF
      ENDIF
   ENDIF

   :: settimer()

   RETURN NIL


UTILITY STATIC function TWSayTimer_convertime( cTime) ; local Self AS CLASS TWSayTimer := QSelf() AS CLASS TWSayTimer
   LOCAL nHora := Val(SubStr( cTime, 1, 2 ))
   LOCAL nNew  := 0

   IF ::lAmPm
      IF nHora >= 12
         nNew  := AScan( { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }, nHora )
         IF nNew == 0
            nNew := 12
         ENDIF
         IF ::lShortTime
            cTime := PadL( nNew, 2, "0" ) + SubStr( cTime, 3, 3 ) + " PM"
         ELSE
            cTime := PadL( nNew, 2, "0" ) + SubStr( cTime, 3 ) + " PM"
         ENDIF
      ELSE
         IF nHora == 0
            nHora := 12
         ENDIF
         IF ::lShortTime
            cTime := PadL( nHora, 2, "0" ) + SubStr( cTime, 3, 3 ) + " AM"
         ELSE
            cTime := PadL( nHora, 2, "0" ) + SubStr( cTime, 3 ) + " AM"
         ENDIF
      ENDIF
   ENDIF

   RETURN cTime

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\fivewin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 6 ".\Prg\Dotnetgr.prg"
_HB_CLASS TDotNetGroup ; UTILITY FUNCTION TDotNetGroup(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TDotNetGroup" , { HBObject():Classh } ) ) ;

      _HB_MEMBER {AS NUMERIC nInitId} ; IIF( !.F., s_oClass:AddMultiClsData("NUMERIC", 100, nScope + IIF( .F., 32, 0 ) + IIF( .T., 64, 0 ), { "nInitId" }, .F. ), )

      _HB_MEMBER {AS ARRAY aColumns} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aColumns" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aCoors} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {0,0,0,0}, nScope + IIF( .F., 32, 0 ), { "aCoors" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aItems} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aItems" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aSize} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {0,0}, nScope + IIF( .F., 32, 0 ), { "aSize" }, .F., .F. ), )
      _HB_MEMBER { bAction} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAction" }, .F., .F. ), )
      _HB_MEMBER { bSelected} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bSelected" }, .F., .F. ), )
      _HB_MEMBER {AS CHARACTER cBmpClosed} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", "", nScope + IIF( .F., 32, 0 ), { "cBmpClosed" }, .F., .F. ), )
      _HB_MEMBER {AS CHARACTER cName} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", "oGrupo", nScope + IIF( .F., 32, 0 ), { "cName" }, .F., .F. ), )
      _HB_MEMBER { cPrompt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrompt" }, .F., .F. ), )
      _HB_MEMBER {AS LOGICAL lByColumns} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lByColumns" }, .F., .F. ), )
      _HB_MEMBER {AS LOGICAL lByLines} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lByLines" }, .F., .F. ), )
      _HB_MEMBER { lVisible} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lVisible" }, .F., .F. ), )
      _HB_MEMBER { nID} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nID" }, .F., .F. ), )
      _HB_MEMBER {AS NUMERIC nLines} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 2, nScope + IIF( .F., 32, 0 ), { "nLines" }, .F., .F. ), )
      _HB_MEMBER { nStyle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nStyle" }, .F., .F. ), )
      _HB_MEMBER { oCarpeta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCarpeta" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY rcBtnAction} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {0,0,0,0}, nScope + IIF( .F., 32, 0 ), { "rcBtnAction" }, .F., .F. ), )
      _HB_MEMBER {AS NUMERIC nWAjustado} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 50, nScope + IIF( .F., 32, 0 ), { "nWAjustado" }, .F., .F. ), )
      _HB_MEMBER {AS LOGICAL lAgrupado} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lAgrupado" }, .F., .F. ), )

      _HB_MEMBER New( oCarpeta, nWidth, cPrompt, lByLines, bAction, cBmpClosed) AS CLASS TDotNetGroup; IIF( .F., s_oClass:ModMethod( "New", @TDotNetGroup_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TDotNetGroup_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

      _HB_MEMBER AddButton( oControl, nColumna, lGrouping, lHead, lEnd); IIF( .F., s_oClass:ModMethod( "AddButton", @TDotNetGroup_AddButton(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddButton", @TDotNetGroup_AddButton(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER ClonGrupo( nRow, nCol); IIF( .F., s_oClass:ModMethod( "ClonGrupo", @TDotNetGroup_ClonGrupo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ClonGrupo", @TDotNetGroup_ClonGrupo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Copy(); IIF( .F., s_oClass:ModMethod( "Copy", @TDotNetGroup_Copy(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Copy", @TDotNetGroup_Copy(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Delete(); IIF( .F., s_oClass:ModMethod( "Delete", @TDotNetGroup_Delete(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Delete", @TDotNetGroup_Delete(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Edit(); IIF( .F., s_oClass:ModMethod( "Edit", @TDotNetGroup_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Edit", @TDotNetGroup_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER GenPrg(); IIF( .F., s_oClass:ModMethod( "GenPrg", @TDotNetGroup_GenPrg(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GenPrg", @TDotNetGroup_GenPrg(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER GetNewId(); IIF( .F., s_oClass:ModInline( "GetNewId", {|Self | Self, If( ::nInitId == nil, ::nInitId := 100,), ++::nInitId }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetNewId", {|Self | Self, If( ::nInitId == nil, ::nInitId := 100,), ++::nInitId }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER GetText(); IIF( .F., s_oClass:ModInline( "GetText", {|Self | Self, ::cPrompt }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetText", {|Self | Self, ::cPrompt }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER Hide(); IIF( .F., s_oClass:ModMethod( "Hide", @TDotNetGroup_Hide(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Hide", @TDotNetGroup_Hide(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER IsOver(nRow, nCol); IIF( .F., s_oClass:ModInline( "IsOver", {|Self,nRow, nCol | Self, PtInRect( nRow, nCol, ::aCoors ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "IsOver", {|Self,nRow, nCol | Self, PtInRect( nRow, nCol, ::aCoors ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER IsOverAcc(nRow, nCol); IIF( .F., s_oClass:ModInline( "IsOverAcc", {|Self,nRow, nCol | Self, PtInRect( nRow, nCol, ::rcBtnAction ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "IsOverAcc", {|Self,nRow, nCol | Self, PtInRect( nRow, nCol, ::rcBtnAction ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER Paint( hDC, lFromPopup); IIF( .F., s_oClass:ModMethod( "Paint", @TDotNetGroup_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @TDotNetGroup_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER PaintSmall( hDC); IIF( .F., s_oClass:ModMethod( "PaintSmall", @TDotNetGroup_PaintSmall(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PaintSmall", @TDotNetGroup_PaintSmall(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER RButtonDown( nRow, nCol, nFlags); IIF( .F., s_oClass:ModMethod( "RButtonDown", @TDotNetGroup_RButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RButtonDown", @TDotNetGroup_RButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Refresh(); IIF( .F., s_oClass:ModInline( "Refresh", {|Self | Self, ::oParent:Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Refresh", {|Self | Self, ::oParent:Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER ResizeCols(); IIF( .F., s_oClass:ModMethod( "ResizeCols", @TDotNetGroup_ResizeCols(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ResizeCols", @TDotNetGroup_ResizeCols(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER ResizeItems(); IIF( .F., s_oClass:ModMethod( "ResizeItems", @TDotNetGroup_ResizeItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ResizeItems", @TDotNetGroup_ResizeItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER ResizeLines(); IIF( .F., s_oClass:ModMethod( "ResizeLines", @TDotNetGroup_ResizeLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ResizeLines", @TDotNetGroup_ResizeLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER SetText(cItem); IIF( .F., s_oClass:ModInline( "SetText", {|Self,cItem | Self, ::cPrompt := cItem }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetText", {|Self,cItem | Self, ::cPrompt := cItem }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER Show(); IIF( .F., s_oClass:ModMethod( "Show", @TDotNetGroup_Show(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Show", @TDotNetGroup_Show(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER SizeCapSm(); IIF( .F., s_oClass:ModMethod( "SizeCapSm", @TDotNetGroup_SizeCapSm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SizeCapSm", @TDotNetGroup_SizeCapSm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER lAjustado(); IIF( .F., s_oClass:ModMethod( "lAjustado", @TDotNetGroup_lAjustado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lAjustado", @TDotNetGroup_lAjustado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER nBottom(nNewVal); _HB_MEMBER _nBottom(nNewVal); IIF( .F., s_oClass:ModMethod( "nBottom", @TDotNetGroup_nBottom(), 1 + 32, .F. ), s_oClass:AddMethod( "nBottom", @TDotNetGroup_nBottom(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nBottom", @TDotNetGroup_nBottom() ), s_oClass:AddMethod( "_nBottom", @TDotNetGroup_nBottom() ) ) ;
      _HB_MEMBER nHeight(nNewVal); _HB_MEMBER _nHeight(nNewVal); IIF( .F., s_oClass:ModMethod( "nHeight", @TDotNetGroup_nHeight(), 1 + 32, .F. ), s_oClass:AddMethod( "nHeight", @TDotNetGroup_nHeight(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nHeight", @TDotNetGroup_nHeight() ), s_oClass:AddMethod( "_nHeight", @TDotNetGroup_nHeight() ) ) ;
      _HB_MEMBER nLeft(nNewVal); _HB_MEMBER _nLeft(nNewVal); IIF( .F., s_oClass:ModMethod( "nLeft", @TDotNetGroup_nLeft(), 1 + 32, .F. ), s_oClass:AddMethod( "nLeft", @TDotNetGroup_nLeft(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nLeft", @TDotNetGroup_nLeft() ), s_oClass:AddMethod( "_nLeft", @TDotNetGroup_nLeft() ) ) ;
      _HB_MEMBER nRight(nNewVal); _HB_MEMBER _nRight(nNewVal); IIF( .F., s_oClass:ModMethod( "nRight", @TDotNetGroup_nRight(), 1 + 32, .F. ), s_oClass:AddMethod( "nRight", @TDotNetGroup_nRight(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nRight", @TDotNetGroup_nRight() ), s_oClass:AddMethod( "_nRight", @TDotNetGroup_nRight() ) ) ;
      _HB_MEMBER nTop(nNewVal); _HB_MEMBER _nTop(nNewVal); IIF( .F., s_oClass:ModMethod( "nTop", @TDotNetGroup_nTop(), 1 + 32, .F. ), s_oClass:AddMethod( "nTop", @TDotNetGroup_nTop(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nTop", @TDotNetGroup_nTop() ), s_oClass:AddMethod( "_nTop", @TDotNetGroup_nTop() ) ) ;
      _HB_MEMBER nWidth(nNewVal); _HB_MEMBER _nWidth(nNewVal); IIF( .F., s_oClass:ModMethod( "nWidth", @TDotNetGroup_nWidth(), 1 + 32, .F. ), s_oClass:AddMethod( "nWidth", @TDotNetGroup_nWidth(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nWidth", @TDotNetGroup_nWidth() ), s_oClass:AddMethod( "_nWidth", @TDotNetGroup_nWidth() ) ) ;
      _HB_MEMBER oBtnOver( nRow, nCol); IIF( .F., s_oClass:ModMethod( "oBtnOver", @TDotNetGroup_oBtnOver(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "oBtnOver", @TDotNetGroup_oBtnOver(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER oParent(); IIF( .F., s_oClass:ModInline( "oParent", {|Self | Self, ::oCarpeta:oParent }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "oParent", {|Self | Self, ::oCarpeta:oParent }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER Paste(); IIF( .F., s_oClass:ModMethod( "Paste", @TDotNetGroup_Paste(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paste", @TDotNetGroup_Paste(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TDotNetGroup ;


  UTILITY STATIC function TDotNetGroup_New( oCarpeta, nWidth, cPrompt, lByLines, bAction, cBmpClosed) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


local nTop, nLeft, nBottom, nRight
local nLen

  if lByLines == nil; lByLines := .F.; endif

  IIF( cBmpClosed == nil, cBmpClosed := "", ) ;

  ::cPrompt    := cPrompt
  ::lByLines   := lByLines
  ::lByColumns := if( lByLines <> nil, !lByLines, nil )
  ::bAction    := bAction
  ::cBmpClosed := cBmpClosed

  ::oCarpeta   := oCarpeta
  ::nId        := ::GetNewId()

  nTop := ::oParent:nHTabs+3
  nLen := len( ::oCarpeta:aGrupos )

  if nLen == 0
     nLeft := 6
  else
     nLeft   := ::oCarpeta:aGrupos[nLen]:aCoors[4]+3
  endif

  nBottom := ::oParent:nHeight-3
  nRight  := nWidth + nLeft

  ::aCoors     := {nTop, nLeft, nBottom, nRight}
  ::aSize      := {nWidth, nBottom-nTop}

  aadd( ::oCarpeta:aGrupos, self )

return self


  UTILITY STATIC function TDotNetGroup_Paint( hDC, lFromPopup) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


local nTop, nBottom, nLeft, nRight
local oFont, hOldFont, hFont
local nColor, nMode
local hBmp
local n, nLen
local nClrBar1     := ::oParent:oColor:nClrBar1
local nClrBar20    := ::oParent:oColor:nClrBar20
local nClrBar200   := ::oParent:oColor:nClrBar200
local nClrBar21    := ::oParent:oColor:nClrBar21
local nClrBTitle   := ::oParent:oColor:nClrBTitle
local nClrBTitle2  := ::oParent:oColor:nClrBTitle2
local lSelected    := .F.
local hBmpBtn
local nHeight      := ::rcBtnAction[3]-::rcBtnAction[1]
local nH5          := nHeight/5
local n2H5         := nH5*2
local n3H5         := n2H5 + nH5
local rc
local lIsOver      := .F.
local aPoint := {::oParent:nRow, ::oParent:nCol }
local lAjustado    := .F.

if lFromPopup == nil; lFromPopup := .F. ; endif


if !lFromPopup

   ::lAgrupado     := ::lAjustado()


   lSelected :=  ::IsOver( aPoint[1], aPoint[2] )
   lIsOver   :=  ::IsOverAcc( aPoint[1], aPoint[2] )

   if lSelected
      nClrBar1     := ::oParent:oColor:nClrBar11
      nClrBar20    := ::oParent:oColor:nClrBar201
      nClrBar21    := ::oParent:oColor:nClrBar211
      nClrBTitle   := ::oParent:oColor:nClrBTitle1
   endif

endif

if ::oParent:oFont <> nil
   hFont := ::oParent:oFont:hFont
else
   oFont := TFont():New( "Ms Sans Serif", 0, -12.3,,,,,,,,,,,,,, )
   hFont := oFont:hFont
endif

hOldFont := SelectObject( hDC, hFont )
nColor := SetTextColor( hDC, ::oParent:oColor:_CLRTEXTBACK )
nMode := SetBkMode( hDC, 1 )


if ::lAgrupado

   ::PaintSmall( hDC, lSelected, lIsOver )

else

   nTop    := ::nTop()
   nLeft   := ::nLeft()
   nBottom := ::nBottom()
   nRight  := ::nRight()

   FillSolidRect   ( hDC, {nTop   ,nLeft,nTop+15   ,nRight}, nClrBar1 )

   VerticalGradient( hDC, {nTop+14,nLeft,nBottom-15,nRight}, nClrBar20, nClrBar200  )
   VerticalGradient( hDC, {nBottom-16, nLeft, nBottom-1,nRight  }, nClrBTitle, nClrBTitle2 )

   DrawText( hDC, ::cPrompt, {nBottom-15, nLeft, nBottom,nRight}, nOr( 32, 4, 1, 2048 ) )

endif

SetBkMode( hDC, nMode )
SetTextColor( hDC, nColor )
SelectObject( hDC, hOldFont )

if ::bAction <> nil .AND. !::lAgrupado

   ::rcBtnAction := { nBottom-12, nRight - 14, nBottom-2, nRight - 4}

   rc      := { nBottom-12-3, nRight - 14-3+2, nBottom-2, nRight - 4+2}

   if lIsOver

      Box( hDC,              {rc[1]             ,rc[2]+1,rc[3]              ,rc[4]-1}, ( 221 + ( 207 * 256 ) + ( 155 * 65536 ) ) )

         VerticalGradient( hDC, {rc[1]             ,rc[2]+1,rc[1]+n2H5         ,rc[4]  }, ::oParent:oColor:nGradientGrp1, ::oParent:oColor:nGradientGrp11 )
         VerticalGradient( hDC, {rc[1]+ n2H5 -1    ,rc[2]+1,rc[1]+n3H5         ,rc[4]  }, ::oParent:oColor:nGradientGrp2, ::oParent:oColor:nGradientGrp21 )
         VerticalGradient( hDC, {rc[1]+ n3H5 -1    ,rc[2]+1,rc[3]              ,rc[4]  }, ::oParent:oColor:nGradientGrp3, ::oParent:oColor:nGradientGrp31 )

   endif
   hBmpBtn := BmpBtnDBar()
   DrawMasked( hDC, hBmpBtn, nBottom-12, nRight - 14+2 )
   DeleteObject( hBmpBtn )

endif

if oFont <> nil
   oFont:End()
endif

nLen := len( ::aItems )

if !::lAgrupado

   if ::oParent:isPopup
      nLeft -= 5
      nBottom += 2
      nRight ++
   endif

   do case
      case ::oParent:oColor:nStyle == 1
           Line( hDC,  nTop+2, nRight-1, nBottom, nRight-1,::oParent:oColor:nClrSeparador1 )
           VerticalGradient( hDC, {nTop+2, nRight, nBottom+1, nRight+1}, ::oParent:oColor:nClrSeparador11, ::oParent:oColor:nClrSeparador21 )
      otherwise
           RoundBox( hDC, nLeft+1,nTop+1, nRight+1, nBottom, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:_GRISBOX2 )
           RoundBox( hDC, nLeft,nTop, nRight, nBottom, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:_GRISBOX1 )
   endcase

   for n := 1 to nLen
       if "TDOTNET" $ ::aItems[n]:ClassName()
          ::aItems[n]:Paint( hDC )
       endif
   next
endif

return 0



   UTILITY STATIC function TDotNetGroup_PaintSmall( hDC, lSelected, lIsOver) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local nTop, nLeft, nBottom, nRight
local nClrBar1     := ::oParent:oColor:nClrBar1
local nClrBar20    := ::oParent:oColor:nClrBar20
local nClrBar200   := ::oParent:oColor:nClrBar200
local nClrBar21    := ::oParent:oColor:nClrBar21
local nClrBTitle   := ::oParent:oColor:nClrBTitle
local nClrBTitle2  := ::oParent:oColor:nClrBTitle2

local n, nLen
local oItem, hBmp
local hBmp2
local nH := 0
local nW := 0
local nHeight

   if lSelected
      nClrBar1     := ::oParent:oColor:nClrBar11
      nClrBar20    := ::oParent:oColor:nClrBar201
      nClrBar21    := ::oParent:oColor:nClrBar211
      nClrBTitle   := ::oParent:oColor:nClrBTitle1
   endif

   nTop    := ::aCoors[1]; nLeft   := ::aCoors[2]; nBottom := ::aCoors[3]; nRight  := ::aCoors[4]

   do case
      case ::oParent:oColor:nStyle == 1
           FillSolidRect   ( hDC, {nTop   ,nLeft,nTop+15   ,nRight}, nClrBar1 )

           VerticalGradient( hDC, {nTop+14,nLeft,nBottom-15,nRight}, nClrBar20, nClrBar200  )
           VerticalGradient( hDC, {nBottom-16, nLeft, nBottom-1,nRight  }, nClrBTitle, nClrBTitle2 )

      otherwise
           FillSolidRect   ( hDC, {nTop   ,nLeft,nTop+15,nRight},nClrBar1 )
           VerticalGradient( hDC, {nTop+14,nLeft,nBottom,nRight},nClrBar20, nClrBar1  )
   endcase

   nTop    := nTop  + 6
   nLeft   := nLeft + (( nRight - nLeft )/2) - 16
   nBottom := nTop  + 32
   nRight  := nLeft + 32


   do case
      case ::oParent:oColor:nStyle == 1
           FillSolidRect   ( hDC, { nTop,   nLeft+2, nBottom, nRight }, if( lSelected, ::oParent:oColor:nClrBar1, ::oParent:oColor:nClrBar1 ))
      otherwise
           FillSolidRect   ( hDC, { nTop,   nLeft+2, nTop+2   , nRight-2 }, if( lSelected, ::oParent:oColor:nGradientGrp01, ::oParent:oColor:nGradientGrp011 ))
           FillSolidRect   ( hDC, { nTop+ 3,nLeft  , nBottom-8, nRight   }, if( lSelected, ::oParent:oColor:nGradientGrp02, ::oParent:oColor:nGradientGrp021 ))
           FillSolidRect   ( hDC, { nBottom-8,nLeft  , nBottom, nRight   }, nClrBTitle )
   endcase
   RoundBox     ( hDC, nLeft, nTop, nRight, nBottom, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:_GRISBOX1 )

   if ::cBmpClosed <> nil
      if valtype( ::cBmpClosed ) == "C" .AND. "." $ ::cBmpClosed
         hBmp := ReadBitmap( 0, ::cBmpClosed )
      else
         hBmp := LoadBitmap( GetResources(), ::cBmpClosed )
       endif
   else

   endif

   if hBmp <> 0
      nH := BmpHeight( hBmp )
      nW := BmpWidth ( hBmp )
      DrawMasked( hDC, hBmp, nTop + 16 - nH/2, nLeft + 16 - nW/2 )
      DeleteObject( hBmp )
   endif

   nTop    := ::aCoors[1]; nLeft   := ::aCoors[2]; nBottom := ::aCoors[3]; nRight  := ::aCoors[4]

   do case
      case ::oParent:oColor:nStyle == 1
      otherwise
           RoundBox( hDC, nLeft+1,nTop+1, nRight+1, nBottom, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:_GRISBOX2 )
           RoundBox( hDC, nLeft,nTop, nRight, nBottom, ::oParent:oColor:nCorner1, ::oParent:oColor:nCorner1, ::oParent:oColor:_GRISBOX1 )
   endcase

   do case
      case ::oParent:oColor:nStyle == 1
           Line( hDC,  nTop+2, nRight-1, nBottom, nRight-1,::oParent:oColor:nClrSeparador1 )
           VerticalGradient( hDC, {nTop+2, nRight, nBottom+1, nRight+1}, ::oParent:oColor:nClrSeparador11, ::oParent:oColor:nClrSeparador21 )
   endcase

   nTop    := ::aCoors[1]; nLeft   := ::aCoors[2]; nBottom := ::aCoors[3]; nRight  := ::aCoors[4]
   nTop += 42
   nLeft += 4
   nRight -= 4
   nBottom = nTop + 40

   nHeight := DrawText( hDC, ::cPrompt, { nTop, nLeft, nBottom,nRight}, nOr( 1, 16  ) )

   hBmp := BmpArrowDownNet()
   if hBmp <> 0
      nTop += nHeight + 8
      nLeft := nLeft + (( nRight-nLeft ) / 2) - 4
      Drawmasked( hDC, hBmp, nTop, nLeft )
      DeleteObject( hBmp )
   endif

return 0



   UTILITY STATIC function TDotNetGroup_Hide() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local n
local nLen := len(::aItems)
for n := 1 to nLen
    ::aItems[n]:Hide()
next


return 0


   UTILITY STATIC function TDotNetGroup_Show() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local n
local nLen := len(::aItems)
for n := 1 to nLen
    ::aItems[n]:Show()
next

return 0



  UTILITY STATIC function TDotNetGroup_nTop(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[1] := nNewVal
endif

return ::aCoors[1]



  UTILITY STATIC function TDotNetGroup_nLeft(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[2] := nNewVal
endif

return ::aCoors[2]


  UTILITY STATIC function TDotNetGroup_nBottom(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[3] := nNewVal
endif

return ::aCoors[3]


  UTILITY STATIC function TDotNetGroup_nRight(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[4] := nNewVal
endif

return ::aCoors[4]



  UTILITY STATIC function TDotNetGroup_nWidth(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[4] := ::aCoors[2] + nNewVal
endif

return ::aCoors[4]-::aCoors[2]


  UTILITY STATIC function TDotNetGroup_nHeight(nNewVal) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if nNewVal <> nil
   ::aCoors[3] := ::aCoors[1] + nNewVal
endif

return ::aCoors[3]-::aCoors[1]



  UTILITY STATIC function TDotNetGroup_SizeCapSm() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local oFont, hOldFont, hFont
local aRect := {::aCoors[1]+43, ::aCoors[2]+3, ::aCoors[3],::aCoors[2]+60-3}
local nWidth, nHeight, nHeight2

local hDC := ::oParent:GetDC()

if ::oParent:oFont <> nil
   hFont := ::oParent:oFont:hFont
else
   oFont := TFont():New( "Ms Sans Serif", 0, -12.3,,,,,,,,,,,,,, )
   hFont := oFont:hFont
endif

hOldFont := SelectObject( hDC, hFont )

nWidth   := GetTextWidth ( hDC, ::cPrompt, hFont )
nHeight  := nWndChrHeight( ::oParent:hWnd, hFont )
nHeight2 := C5DrawText   ( hDC, ::cPrompt, aRect , nOr( 1, 16, 1024 ) )



SelectObject( hDC, hOldFont )

::oParent:ReleaseDC()

if oFont <> nil
   oFont:End()
endif

return { if( nHeight <> nHeight2, (aRect[4]-aRect[2])+10, nWidth+10 ), nHeight }




UTILITY STATIC function TDotNetGroup_lAjustado() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


return ::nWidth <> ::aSize[1]


   UTILITY STATIC function TDotNetGroup_ClonGrupo( nRow, nCol) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local oWndPopup
local lValid := .F.
local aPoint
local nTop, nLeft, nBottom, nRight
local oBrush
local oThis := self
local oBar, oCarpeta, oGrp
local n, n2, nLen, nLen2
local oBtn, o
local bAction


if !::lAjustado
   return 0
endif

if ::lByColumns == nil
   return 0
endif


nRow := ::nBottom
nCol := ::nLeft

aPoint := {nRow, nCol}

oBrush := TBrush():New( Upper("NULL"),,,,, )

  ClientToScreen( ::oParent:hWnd, aPoint )

  nTop    := aPoint[1]
  nLeft   := aPoint[2]
  nBottom := nTop + ::nHeight()
  nRight  := nLeft + ::aSize[1]

  if nRight > GetSysMetrics(0)
     nLeft := GetSysMetrics(0) - ::aSize[1] - 20
     nRight  := nLeft + ::aSize[1]
  endif

  if othis:oParent:oWndPopup <> nil
     othis:oParent:oWPEnd()
  endif

   oWndPopup := TWindowExt1():New( nTop, nLeft, nBottom-1, nRight+7,, nOr( 2147483648 ),, oBrush,, ::oParent,,,,,,, !.F., !.F., !.F., !.F., .T. )





     oBar := TDotNetBar():New( 0, -3, nRight-nLeft, nBottom-nTop, oWndPopup )

     oBar:SetStyle( ::oParent:oColor:nStyle )

     oBar:SetFocus()

     oBar:isPopup := .T.

     oWndPopup:oTop := oBar
     oWndPopup:Resize()
     oBar:nOption := 1

     oBar:nHTabs := 0

     oCarpeta  := TCarpeta():New( oBar, ::oCarpeta:cPrompt  )

        oGrp := TDotNetGroup():New(oCarpeta, ::aSize[1], ::cPrompt, ::lByLines, ::bAction )

        if ::lByColumns

           nLen := len( ::aColumns )

           for n := 1 to nLen

               nLen2 := len( ::aColumns[n]:aItems )

               for n2 := 1 to nLen2

                   o             := ::aColumns[n]:aItems[n2]
                   bAction       := o:bAction
                   oBtn          := TDotNetButton():New(  o:nWidth, oGrp, o:cBmp, o:cPrompt,n,bAction, o:oPopup, o:bWhen, o:lGrouping ,o:lHead, o:lEnd )
                   oBtn:oPopup   := o:oPopup

               next

           next

        else

           nLen  := len( ::aItems )

           for n := 1 to nLen
               o           := ::aItems[n]
               bAction     := o:bAction
               oBtn        := TDotNetButton():New(   o:nWidth, oGrp, o:cBmp, o:cPrompt,, bAction, o:oPopup, o:bWhen, o:lGrouping ,o:lHead, o:lEnd  )
               oBtn:oPopup := o:oPopup
           next

        endif

     oBar:nOption := 1

  oBar:bKeyDown      := {|nKey| if( nKey == 27, (othis:oParent:oWndPopup:bValid := {||.T.},othis:oParent:oWPEnd()),.F.)}
  oWndPopup:bLostFocus := {|| msgAlert( "endpopup" ) , oWndPopup:End() }

  oWndPopup:Show()

return 0


      UTILITY STATIC function TDotNetGroup_oBtnOver( nRow, nCol) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local n
local nLen := len( ::aItems )
local o := nil

for n := 1 to nLen
    o := ::aItems[n]


    if "TDOTNET" $ o:ClassName() .AND. o:IsOver( nRow, nCol )
       return o
    endif
next

return nil



  UTILITY STATIC function TDotNetGroup_RButtonDown( nRow, nCol, nFlags) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local oPopup
local o := self
local nSize, n, nLen
local oClp
local lPaste := .F.
local cInfo := ""

  oClp := TClipBoard():New( Upper("TEXT"), )

  if oClp:Open()
     cInfo := oClp:GetText()
     oClp:End()
  endif

  lPaste := at("tdotnetgroup",lower(cInfo) ) == 0 .AND. at("tdotnetbutton",lower(cInfo) ) <> 0

  oPopup := MenuBegin( .T.,,, .F., .F. )

     if !::lByLines .AND. len(::aItems) == 0
        MenuAddItem( "Define group by lines",, .F.,, {|oMenuItem|( o:lByLines := .T., o:lByColumns := .F. )},,,,,,, .F.,,, .F. )
     endif
        if ::lByLines
           if !::lAjustado
              MenuAddItem( "Add button",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"item",,,,,.T.) ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
           endif
        else

               n := len( ::aColumns )
               if n >= 0
                  MenuAddItem( "Add button in column  1 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  1)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 1
                  MenuAddItem( "Add button in column  2 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  2)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 2
                  MenuAddItem( "Add button in column  3 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  3)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 3
                  MenuAddItem( "Add button in column  4 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  4)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 4
                  MenuAddItem( "Add button in column  5 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  5)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 5
                  MenuAddItem( "Add button in column  6 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  6)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 6
                  MenuAddItem( "Add button in column  7 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  7)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 7
                  MenuAddItem( "Add button in column  8 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  8)  ,o:oParent:Refresh())},,,,,,, .F.,,, .T. )
               endif
               if n >= 8
                  MenuAddItem( "Add button in column  9 ",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item",  9)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 9
                  MenuAddItem( "Add button in column  10",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item", 10)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 10
                  MenuAddItem( "Add button in column  11",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item", 11)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 11
                  MenuAddItem( "Add button in column  12",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item", 12)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 12
                  MenuAddItem( "Add button in column  13",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item", 13)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
               if n >= 13
                  MenuAddItem( "Add button in column  14",, .F.,, {|oMenuItem|( TDotNetButton():New( 60, o,,"New item", 14)  ,o:oParent:Refresh())},,,,,,, .F.,,, .F. )
               endif
        endif

     if ::lAjustado
        MenuAddItem( "Selecct image",, .F.,, {|oMenuItem|( o:cBmpClosed := cGetFile("*.bmp", "Selecct image" ), o:oParent:Refresh())},,,,,,, .F.,,, .F. )
     else
        MenuAddItem()
        MenuAddItem( "Change size",, .F.,, {|oMenuItem|( nSize := o:aSize[1], DlgChangeSize( @nSize, .T.  ), o:aSize[1] := nSize, o:ResizeItems(),o:oParent:Resize() )},,,,,,, .F.,,, .F. )
        MenuAddItem( "Delete Group",, .F.,, {|oMenuItem|(::oParent:lWorking := .T.,o:Delete())},,,,,,, .F.,,, .F. )
        MenuAddItem( if( o:bAction <> nil, "Reset action","Add action" ),, .F.,, {|oMenuItem|( if( o:bAction == nil, o:bAction := __MiAccion(), o:bAction := nil ), o:oParent:Refresh())},,,,,,, .F.,,, .F. )
        MenuAddItem()
        MenuAddItem( "Copy",, .F.,, {|oMenuItem|o:Copy()},,,,,,, .F.,,, .F. )
        if lPaste
           MenuAddItem( "Paste",, .F.,,,,,,,,, .F.,,, .F. )
           MenuBegin( .F.,,, .F., .F. )
               n := len( ::aColumns )
               if n >= 0
                  MenuAddItem( "Add button in column  1 ",, .F.,, {|oMenuItem|o:Paste( 1 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 1
                  MenuAddItem( "Add button in column  2 ",, .F.,, {|oMenuItem|o:Paste( 2 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 2
                  MenuAddItem( "Add button in column  3 ",, .F.,, {|oMenuItem|o:Paste( 3 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 3
                  MenuAddItem( "Add button in column  4 ",, .F.,, {|oMenuItem|o:Paste( 4 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 4
                  MenuAddItem( "Add button in column  5 ",, .F.,, {|oMenuItem|o:Paste( 5 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 5
                  MenuAddItem( "Add button in column  6 ",, .F.,, {|oMenuItem|o:Paste( 6 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 6
                  MenuAddItem( "Add button in column  7 ",, .F.,, {|oMenuItem|o:Paste( 7 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 7
                  MenuAddItem( "Add button in column  8 ",, .F.,, {|oMenuItem|o:Paste( 8 )},,,,,,, .F.,,, .T. )
               endif
               if n >= 8
                  MenuAddItem( "Add button in column  9 ",, .F.,, {|oMenuItem|o:Paste( 9 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 9
                  MenuAddItem( "Add button in column  10",, .F.,, {|oMenuItem|o:Paste( 10 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 10
                  MenuAddItem( "Add button in column  11",, .F.,, {|oMenuItem|o:Paste( 11 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 11
                  MenuAddItem( "Add button in column  12",, .F.,, {|oMenuItem|o:Paste( 12 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 12
                  MenuAddItem( "Add button in column  13",, .F.,, {|oMenuItem|o:Paste( 13 )},,,,,,, .F.,,, .F. )
               endif
               if n >= 13
                  MenuAddItem( "Add button in column  14",, .F.,, {|oMenuItem|o:Paste( 14 )},,,,,,, .F.,,, .F. )
               endif

           MenuEnd()
        endif
     endif

  MenuEnd()
  oPopup:Activate( nRow, nCol, ::oParent, ! .F., )

return 0

function __MiAccion()

return {|| MsgInfo( "Action's group" ) }



      UTILITY STATIC function TDotNetGroup_ResizeItems() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


if empty( ::aItems )
   return 0
endif

if ::lByLines
   ::ResizeLines()
else
   ::ResizeCols()
endif

return 0



      UTILITY STATIC function TDotNetGroup_ResizeLines() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup


local nHLine := 28
local oLast := nil
local n
local nLen := len( ::aItems )
local oBtn
local nTop
local nLeft
local nBottom
local nRight
local lDotNet
local nWidth

for n := 1 to nLen

    oBtn := ::aItems[n]
    nWidth := oBtn:nWidth

    lDotNet := "TDOTNET" $ oBtn:ClassName()

   if oLast == nil
      nTop     := ::aCoors[1] + 13
      nLeft    := ::aCoors[2] + 5
   else
      if oLast:nRight + 3 + oBtn:nHorizWidth() > ::aCoors[4]
         nTop     := oLast:nTop + nHLine + 3
         nLeft    := ::aCoors[2] + 5
      else
         nTop     := oLast:nTop
         nLeft    := oLast:nRight + if( lDotNet .AND. oBtn:lGrouping, if( oBtn:lHead, 3, 0), 3 )
      endif
   endif

   nBottom  := nTop + nHLine - 6

   if lDotNet
      nRight   := nLeft + if( oBtn:lGrouping, oBtn:nHorizWidth(), nWidth )
   else
      nRight   := nLeft + oBtn:nWidth
   endif

   oBtn:nTop    := nTop
   oBtn:nLeft   := nLeft
   oBtn:nBottom := nBottom
   oBtn:nRight  := nRight

   oLast := oBtn

next

if !::oParent:lWorking
   ::oParent:Refresh()
endif

return 0





      UTILITY STATIC function TDotNetGroup_ResizeCols() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local n
local nColumna
local nLen := len( ::aColumns )
local nWidth := 0
local nTop
local nLeft := 0
local nBottom
local nRight
local nH
local nHeight := ::nHeight
local oControl

   for nColumna := 1 to len( ::aColumns )

       nLen := len( ::aColumns[nColumna]:aItems )



       nH := (nHeight-18) / nLen


       for n := 1 to nLen

           oControl := ::aColumns[nColumna]:aItems[n]
           nWidth := oControl:nWidth

           if n == 1
              nTop := ::aCoors[1] + 3
           else
              nTop := nBottom
           endif

           nBottom := nTop + nH

           if nColumna == 1
              nLeft   := ::aCoors[2] + 3
           else
              nLeft   := ::aColumns[nColumna-1]:aItems[1]:nLeft + ::aColumns[nColumna-1]:MaxWidthOfCol()
           endif

           nRight  := nLeft + nWidth

           if "TDOTNET" $ oControl:ClassName()

              oControl:nTop        := nTop
              oControl:nLeft       := nLeft
              oControl:nBottom     := nBottom
              oControl:nRight      := nRight

              oControl:lHorizontal := nLen > 1

           else


              SetWindowPos( oControl:hWnd, 0, nTop, nLeft, oControl:nWidth,oControl:nHeight, 0x0040 )

           endif

        next

   next

return 0



   UTILITY STATIC function TDotNetGroup_Edit() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local oFont
local bValid := {||.T.}
local o := self
local uVar
local nTop, nLeft, nWidth, nHeight
local nClrBTitle   := ( 200 + ( 224 * 256 ) + ( 255 * 65536 ) )
uVar := padr(::cPrompt, 100)

nTop    := ::nBottom - 14
nLeft   := ::nLeft + 5
nWidth  := ::nWidth -8
nHeight := ::nBottom - 5

oFont := TFont():New( "Ms Sans Serif", 0, -10,,,,,,,,,,,,,, )

   ::oParent:oGet := TGet():New(nTop,nLeft,{ | u | If( PCount()==0, uVar, uVar:= u ) },o:oParent,nWidth,nHeight,,,0,nClrBTitle,oFont,.F.,,.T.,,.F.,,.F.,.F.,,.F.,.F.,.T.,)

   ::oParent:nLastKey := 0
   ::oParent:oGet:SetFocus()
   ::oParent:oGet:bValid := {|| .T. }




   ::oParent:oGet:bLostFocus := {||  o:oParent:oGet:Assign(), o:oParent:oGet:VarPut( o:oParent:oGet:oGet:VarGet() ), o:cPrompt := if( o:oParent:nLastKey <> 27, alltrim(o:oParent:oGet:oGet:VarGet()), o:cPrompt ) , o:oParent:GetCoords(), o:oParent:Refresh() }

   ::oParent:oGet:bKeyDown := { | nKey | If( nKey == 13 .OR. nKey == 27, ( o:oParent:nLastKey := nKey, o:oParent:oGet:End()), ) }



return nil




   UTILITY STATIC function TDotNetGroup_Delete() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local n
local nLen := len( ::oCarpeta:aGrupos )
local oGrupo
local lDel := .F.

::oParent:lWorking := .T.

for n := 1 to nLen
    oGrupo := ::oCarpeta:aGrupos[n]
    if oGrupo:nId == ::nId
       aeval( ::aItems, {|x| x:End() }   )
       adel ( ::oCarpeta:aGrupos,  n     )
       asize( ::oCarpeta:aGrupos, nLen-1 )
       ::oCarpeta:CalcSizes()
       aeval( ::oCarpeta:aGrupos, {|x| x:ResizeItems() } )
       exit
    endif
next

::oParent:lWorking := .F.
::oParent:Refresh()

return 0


  UTILITY STATIC function TDotNetGroup_AddButton( oControl, nColumna, lGrouping, lHead, lEnd) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local nTop, nLeft, nBottom, nRight, nHeight, nWidth
local oLast
local nHLine
local n, nLen
local oCtrl
local nH
local nMax := 0
local lDotNet := "TDOTNET" $ oControl:ClassName()
local oCol

IIF( lHead == nil, lHead := .F., ) ;
IIF( lEnd == nil, lEnd := .F., ) ;
IIF( lGrouping == nil, lGrouping := .F., ) ;

if valtype( nColumna ) == "C"
   nColumna := val( nColumna )
endif

if nColumna == nil; nColumna := 1 ; endif

nHeight  := ::aCoors[3]-::aCoors[1]
nWidth   := ::aCoors[4]-::aCoors[2]

nHLine   := (nHeight-18) / ::nLines

if !::lByLines .AND. nColumna > len( ::aColumns )
   nLen := ( nColumna - len( ::aColumns ))
   for n := 1 to nLen
       oCol := TDotNetColumn():New( self )
   next
endif


oLast := atail(::aItems )
aadd( ::aItems, oControl )





if !::lByLines
   ::aColumns[nColumna]:AddItem( oControl )
endif

if lDotNet
   lHead             := oControl:lHead
   lEnd              := oControl:lEnd
   lGrouping         := oControl:lGrouping
   oControl:oGrupo   := self
   oControl:nColumna := nColumna
endif






if ::lByLines

   ::ResizeLines()

else

   ::ResizeCols()

endif

if "TDOTNET" $ oControl:ClassName()
else


endif

return 0




  UTILITY STATIC function TDotNetGroup_GenPrg() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local cPrg := ""
local n
local nBtns
local aBtns
local cBtn := ""

::cName := "oGrp" +  alltrim(str(::nId-100))



::oParent:cVars += "local " + ::cName + Chr(13)+Chr(10)






cPrg := space( 12 ) + ::cName + " := "  + "TDotNetGroup():New( " + ::oCarpeta:cName  + ", " + alltrim(str(::aSize[1])) + ', "' + alltrim(::cPrompt) + '", ' + if ( ::lByLines <> nil, if( ::lByLines, ".t.",".f." ),".f.") + ",, " + '"' + ::cBmpClosed + '"' + " )" + Chr(13)+Chr(10)

nBtns := len( ::aItems )
aBtns := array(nBtns)

for n := 1 to nBtns
    aBtns[n] := ::aItems[n]:GenPrg()
next

for n := 1 to nBtns
    cBtn += aBtns[n]
next


cPrg += cBtn  + Chr(13)+Chr(10) + Chr(13)+Chr(10)

return cPrg


  UTILITY STATIC function TDotNetGroup_Copy() ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local cInfo := ::GenPrg()
local oClp


   oClp := TClipBoard():New( Upper("TEXT"), )

   if oClp:Open()
      oClp:Clear()
      oClp:SetText( cInfo )
      oClp:End()
   else
      MsgAlert( "The clipboard is not available now!" )
   endif

return nil


   UTILITY STATIC function TDotNetGroup_Paste( nEnColumna) ; local Self AS CLASS TDotNetGroup := QSelf() AS CLASS TDotNetGroup

local cInfo
local aLines := {}
local nLines
local n := 1
local n2
local nEstado := 0
local cLinea
local aParams := {}
local cWord
local cObject
local aWords := {{"tdotnetbutton():new(",4 } }
local cBar
local aCarpetas := {}
local aGrupos   := {}
local o
local lDefinida := .F.
local oError
local oClp
local lResize := nEnColumna > len( ::aColumns )

   oClp := TClipBoard():New( Upper("TEXT"), )

   if oClp:Open()
      cInfo := oClp:GetText()
      oClp:End()
   else
      MsgAlert( "The clipboard is not available now!" )
   endif


if empty( cInfo )
   MsgInfo("Proceso cancelado")
   return 0
endif

nLines := strcount( cInfo, Chr(13)+Chr(10) )

for n := 1 to nLines
    aadd( aLines, memoline( cInfo,255,n) )
next

n := 1

while n < nLines .AND. nEstado <> 100

    cLinea := alltrim(aLines[n])
    cLinea := strtran(cLinea,'"',"")

    if left( lower(cLinea), len( "local "   )) == "local "   ; cLinea := substr( cLinea, len( "local "   )+1); endif
    if left( lower(cLinea), len( "private " )) == "private " ; cLinea := substr( cLinea, len( "private " )+1); endif
    if left( lower(cLinea), len( "public "  )) == "public "  ; cLinea := substr( cLinea, len( "public "  )+1); endif


    nEstado := 0

    cWord := ""

    for n2 := 1 to len( aWords )
        cWord := lower(aWords[n2,1])
        if at( cWord, lower(cLinea) ) <> 0
           nEstado := aWords[n2,2]
           exit
        endif
    next

       if nEstado <> 0

          asize( aParams, 0 )

          cObject := left  ( cLinea, at(":=",cLinea)-1 )
          cLinea  := substr( cLinea, at( lower(cWord), lower(cLinea) )+len(cWord)+1 )
          cLinea  := left  ( cLinea, len( cLinea ) - 1 )
          aParams := aSplit( cLinea, "," )


          do case
             case nEstado == 4












                     o := TDotNetButton():New( val( aParams[1]), self, alltrim(aParams[3]), alltrim(aParams[4]), nEnColumna, , , , lower(aParams[9])==".t.", lower(aParams[10])==".t.", lower(aParams[11])==".t." )
          endcase

       endif


    n++


enddo

if lResize
   ::aSize[1] += o:nWidth + 3
endif

::oCarpeta:CalcSizes()
::oParent:Resize()

for n := 1 to len( ::oCarpeta:aGrupos )
    ::oCarpeta:aGrupos[n]:ResizeItems()
next
::oParent:Resize()


return 0







_HB_CLASS TWindowExt1 ; UTILITY FUNCTION TWindowExt1(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TWindowExt1" , {TWindow():classh} ) ) ; ;

      _HB_MEMBER {AS LOGICAL lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData("LOGICAL",, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )

      _HB_MEMBER Create( clsName); IIF( .F., s_oClass:ModMethod( "Create", @TWindowExt1_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TWindowExt1_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); IIF( .F., s_oClass:ModMethod( "HandleEvent", @TWindowExt1_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "HandleEvent", @TWindowExt1_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TWindowExt1 ;


UTILITY STATIC function TWindowExt1_Create( cClsName) ; local Self AS CLASS TWindowExt1 := QSelf() AS CLASS TWindowExt1





   IIF( cClsName == nil, cClsName := ::ClassName(), ) ; IIF( ::cCaption == nil, ::cCaption := "", ); IIF( ::nStyle == nil, ::nStyle := (0 + 12582912 + 524288 + 262144 + 131072 + 65536), ); IIF( ::nTop == nil, ::nTop := 0, ); IIF( ::nLeft == nil, ::nLeft := 0, ); IIF( ::nBottom == nil, ::nBottom := 10, ); IIF( ::nRight == nil, ::nRight := 10, ); IIF( ::nId == nil, ::nId := 0, );

   if ::oWnd <> nil
      ::nStyle = nOR( ::nStyle, 1073741824 )
   endif

   if ::nBottom <> 32768




      ::hWnd = CreateWindow( "#32768", ::cCaption,  2147483648 , ::nLeft, ::nTop, ::nRight - ::nLeft + 1,  ::nBottom - ::nTop + 1,  If( ::oWnd <> nil, ::oWnd:hWnd, 0 ),  ::nId )
   else



      ::hWnd = CreateWindow( "#32768", ::cCaption, 2147483648,  ::nLeft, ::nTop, ::nRight, ::nBottom,  If( ::oWnd <> nil, ::oWnd:hWnd, 0 ),  ::nId )
   endif

   if ::hWnd == 0
      WndCreateError( Self )
   else
      ::Link()
   endif
   ::bKeydown   := {|nKey| if( nKey == 27,::End(),)}

return nil


UTILITY STATIC function TWindowExt1_HandleEvent( nMsg, nWParam, nLParam) ; local Self AS CLASS TWindowExt1 := QSelf() AS CLASS TWindowExt1


  if nMsg == 6 .AND. nWParam == 0
     ::End()
  endif







return ::TWindow:HandleEvent( nMsg, nWParam, nLParam )

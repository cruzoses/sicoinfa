#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\IMovAlm.prg"
_HB_CLASS IMovAlm ; UTILITY FUNCTION IMovAlm(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "IMovAlm" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfArt} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfArt" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cAlmOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", "", nScope + IIF( .F., 32, 0 ), { "cAlmOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cAlmDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", "", nScope + IIF( .F., 32, 0 ), { "cAlmDes" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oHisMov} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oHisMov" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @IMovAlm_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @IMovAlm_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @IMovAlm_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @IMovAlm_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @IMovAlm_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @IMovAlm_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @IMovAlm_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @IMovAlm_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @IMovAlm_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @IMovAlm_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS IMovAlm ;



UTILITY STATIC function IMovAlm_Create() ; local Self AS CLASS IMovAlm := QSelf() AS CLASS IMovAlm

   ::AddField( "dFecMov",   "D",  8, 0, {|| "" },     "Fecha",      .T.,"Fecha del movimiento",  12, .F.  )
   ::AddField( "cAliMov",   "C",  3, 0, {|| "" },     "Alm. Org.",  .T.,"Almacen origen",        10, .F.  )
   ::AddField( "cAloMov",   "C",  3, 0, {|| "" },     "Alm. Des.",  .T.,"Almacen destino",       10, .F.  )
   ::AddField( "cCodArt",   "C", 18, 0, {|| "" },     "Cod. Art.",  .T.,"Código de artículo",    15, .F.  )
   ::AddField( "cNomArt",   "C",100, 0, {|| "" },     "Nom. Art",   .T.,"Nombre de artículo",    30, .F.  )
   ::AddField( "nUndMov",   "N", 16, 3, {|| "" },     "Unidades",   .T.,"Unidades movidas",      10, .T.  )
   ::AddField( "nImpMov",   "N", 16, 3, {|| "" },     "Importe",    .T.,"Importe",               10, .F.  )
   ::AddField( "nTotMov",   "N", 16, 3, {|| "" },     "Total",      .T.,"Total",                 10, .T.  )

   ::AddTmpIndex ( "dFecMov", "dFecMov" )

   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function IMovAlm_OpenFiles() ; local Self AS CLASS IMovAlm := QSelf() AS CLASS IMovAlm

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oHisMov := DbfServer( "HISMOV.DBF", ):NewOpen( "HISMOV.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHisMov:AddBag( "HISMOV.CDX" ) ; ::oHisMov:AddBag( ) ; ::oHisMov:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function IMovAlm_CloseFiles() ; local Self AS CLASS IMovAlm := QSelf() AS CLASS IMovAlm

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end
   if !Empty( ::oHisMov ) .AND. ::oHisMov:Used()
      ::oHisMov:End()
   end

   ::oDbfArt := nil
   ::oHisMov := nil

RETURN ( Self )



UTILITY STATIC function IMovAlm_lResource( cFld) ; local Self AS CLASS IMovAlm := QSelf() AS CLASS IMovAlm

   local oAlmOrg
   local oAlmDes
   local oSayOrg
   local cSayOrg
   local oSayDes
   local cSayDes

   if !::StdResource( "INF_MOVALM" )
      return .F.
   end






   oAlmOrg := TGetHlp():ReDefine( 70, { | u | If( PCount()==0, ::cAlmOrg, ::cAlmOrg:= u ) }, ::oFld:aDialogs[1],,, {||    cAlmacen( oAlmOrg, , oSayOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oAlmOrg, oSayOrg )}, nil, "LUPA",, )




   oSayOrg := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, cSayOrg, cSayOrg:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( if( empty( ::cAlmOrg ), ( oSayOrg:cText( "Todos los almacenes" ), .F. ), .F. ) )},, .F., .F.,,,,,, nil,,, )






   oAlmDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, ::cAlmDes, ::cAlmDes:= u ) }, ::oFld:aDialogs[1],,, {||    cAlmacen( oAlmDes, , oSayDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oAlmDes, oSayDes )}, nil, "LUPA",, )




   oSayDes := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSayDes, cSayDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     ( if( empty( ::cAlmDes ), ( oSayDes:cText( "Todos los almacenes" ), .F. ), .F. ) )},, .F., .F.,,,,,, nil,,, )

   ::oMtrInf:SetTotal( ::oHisMov:Lastrec() )

   ::CreateFilter( , ::oHisMov )

RETURN .T.







UTILITY STATIC function IMovAlm_lGenerate() ; local Self AS CLASS IMovAlm := QSelf() AS CLASS IMovAlm

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader      := {  {|| "Fecha           : " + Dtoc( Date() ) }, {|| "Periodo         : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Almacén origen  : " + if( Empty( ::cAlmOrg ), "Todos los almacenes", AllTrim( ::cAlmOrg ) ) }, {|| "Almacén destino : " + if( Empty( ::cAlmDes ), "Todos los almacenes", AllTrim( ::cAlmDes ) ) } }

   ::oHisMov:OrdSetFocus( "dFecMov" )

   ::oHisMov:GoTop()
   while !::oHisMov:Eof()




      if ::EvalFilter()                                                                                     .AND. ::oHisMov:dFecMov >= ::dIniInf .AND. ::oHisMov:dFecMov <= ::dFinInf                                .AND. ( ( ::oHisMov:cAloMov >= ::cAlmOrg .OR. ::oHisMov:cAloMov <= ::cAlmOrg .OR. empty( ::cAlmOrg ) )   .OR. ( ::oHisMov:cAliMov >= ::cAlmDes .OR. ::oHisMov:cAliMov <= ::cAlmDes .OR. empty( ::cAlmDes ) ) )

         ::oDbf:Append()

         ::oDbf:dFecMov  := ::oHisMov:dFecMov
         ::oDbf:cAliMov  := ::oHisMov:cAliMov
         ::oDbf:cAloMov  := ::oHisMov:cAloMov
         ::oDbf:cCodArt  := ::oHisMov:cRefMov
         ::oDbf:cNomArt  := RetArticulo( ::oHisMov:cRefMov, ::oDbfArt:cAlias )
         ::oDbf:nUndMov  := nTotNMovAlm( ::oHisMov:cAlias )
         ::oDbf:nImpMov  := ::oHisMov:nPreDiv
         ::oDbf:nTotMov  := nTotLMovAlm( ::oHisMov:cAlias )

         ::oDbf:Save()

      end

      ::oHisMov:Skip()

      ::oMtrInf:AutoInc( ::oHisMov:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oHisMov:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

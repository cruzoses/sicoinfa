#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Agenda.prg"
_HB_CLASS TAgenda ; UTILITY FUNCTION TAgenda(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TAgenda" , {TMANT():classh} ) ) ; ;

   _HB_MEMBER Create( cPath); IIF( .F., s_oClass:ModMethod( "Create", @TAgenda_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TAgenda_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TAgenda_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TAgenda_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(); IIF( .F., s_oClass:ModMethod( "OpenService", @TAgenda_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TAgenda_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TAgenda_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TAgenda_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));



   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TAgenda_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TAgenda_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TAgenda ;



UTILITY STATIC function TAgenda_Create( cPath) ; local Self AS CLASS TAgenda := QSelf() AS CLASS TAgenda

   IIF( cPath == nil, cPath := cPatDat(), ) ;

   ::cPath           := cPath
   ::oDbf            := nil

RETURN ( Self )



UTILITY STATIC function TAgenda_OpenFiles(lExclusive) ; local Self AS CLASS TAgenda := QSelf() AS CLASS TAgenda

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ), .F., .F. )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen             := .F.

   end
   ErrorBlock( oBlock )

RETURN lOpen



UTILITY STATIC function TAgenda_DefineFiles( cPath, cDriver) ; local Self AS CLASS TAgenda := QSelf() AS CLASS TAgenda

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "Agenda.Dbf", "Agenda" ):New( "Agenda.Dbf", "Agenda", ( cDriver ), "Listín telefónico", ( cPath ) )

      ::oDbf:AddField( "CAPELLIDOS", "C", 200, 0,, "Nombre completo",,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "CNIF", "C", 15, 0,, "NIF",,, "Nif", .F., 80, .F., {} )
      ::oDbf:AddField( "CDOMICILIO", "C", 200, 0,, "Domicilio",,, "Domicilio", .F., 200, .F., {} )
      ::oDbf:AddField( "CCODPOSTAL", "C", 5, 0,,,,, "Código postal", .F., 50, .F., {} )
      ::oDbf:AddField( "CPOBLACION", "C", 100, 0,, "Población",,, "Población", .F., 100, .F., {} )
      ::oDbf:AddField( "CPROVINCIA", "C", 60, 0,, "Provincia",,, "Provincia", .F., 60, .F., {} )
      ::oDbf:AddField( "CTEL", "C", 12, 0,,,,, "Teléfono", .F., 60, .F., {} )
      ::oDbf:AddField( "CDESTEL", "C", 20, 0,,,,, "Nombre teléfono", .F., 100, .F., {} )
      ::oDbf:AddField( "CMOV", "C", 12, 0,,,,, "Móvil", .F., 60, .F., {} )
      ::oDbf:AddField( "CDESMOV", "C", 20, 0,,,,, "Nombre móvil", .F., 100, .F., {} )
      ::oDbf:AddField( "CFAX", "C", 12, 0,,,,, "Fax", .F., 60, .F., {} )
      ::oDbf:AddField( "CDESFAX", "C", 20, 0,,,,, "Nombre fax", .F., 100, .F., {} )
      ::oDbf:AddField( "MOBSERVA", "M", 10, 0,, "Observaciones",,, "Observaciones", .F.,, .T., {} )
      ::oDbf:AddField( "LSELECT", "L", 1, 0,,,,, "", .F.,, .T., {} )

      ::oDbf:AddIndex( "CAPELLIDOS", "AGENDA.CDX", "UPPER( CAPELLIDOS )",,, .F., .F., "Nombre",,, .T., .F. )
      ::oDbf:AddIndex( "CNIF", "AGENDA.CDX", "CNIF",,, .F., .F., "Nif",,, .T., .F. )
      ::oDbf:AddIndex( "CCODPOSTAL", "AGENDA.CDX", "CCODPOSTAL",,, .F., .F., "Código postal",,, .T., .F. )
      ::oDbf:AddIndex( "CPOBLACION", "AGENDA.CDX", "CPOBLACION",,, .F., .F., "Población",,, .T., .F. )
      ::oDbf:AddIndex( "CPROVINCIA", "AGENDA.CDX", "CPROVINCIA",,, .F., .F., "Provincia",,, .T., .F. )
      ::oDbf:AddIndex( "CTEL", "AGENDA.CDX", "CTEL",,, .F., .F., "Teléfono",,, .T., .F. )
      ::oDbf:AddIndex( "CMOV", "AGENDA.CDX", "CMOV",,, .F., .F., "Móvil",,, .T., .F. )
      ::oDbf:AddIndex( "CFAX", "AGENDA.CDX", "CFAX",,, .F., .F., "Fax",,, .T., .F. )



RETURN ( ::oDbf )






























































UTILITY STATIC function TAgenda_Resource( nMode) ; local Self AS CLASS TAgenda := QSelf() AS CLASS TAgenda

    local oDlg

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Ficha", "AGENDA",, .F.,,,,,, .F.,,,,,, .F., )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cNif, ::oDbf:cNif:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cApellidos, ::oDbf:cApellidos:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:cDomicilio, ::oDbf:cDomicilio:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:cPoblacion, ::oDbf:cPoblacion:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbf:cProvincia, ::oDbf:cProvincia:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oDbf:cCodPostal, ::oDbf:cCodPostal:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:cTel, ::oDbf:cTel:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 171, { | u | If( PCount()==0, ::oDbf:cDesTel, ::oDbf:cDesTel:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oDbf:cMov, ::oDbf:cMov:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 181, { | u | If( PCount()==0, ::oDbf:cDesMov, ::oDbf:cDesMov:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbf:cFax, ::oDbf:cFax:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 191, { | u | If( PCount()==0, ::oDbf:cDesFax, ::oDbf:cDesFax:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TMultiGet():ReDefine( 210, { | u | If( PCount()==0, ::oDbf:mObserva, ::oDbf:mObserva:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )





        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   end

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )

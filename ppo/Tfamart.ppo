#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tfamart.prg"
FUNCTION TFamArticulo()

   local oInf
   local aCol  := {}
   local aIdx  := {}

   aAdd( aCol, { "CCODFAM", "C", 16, 0, {|| "@!" },          "Cod. família",  .F., "Cod. família"    ,  5, .F. } )
   aAdd( aCol, { "CNOMFAM", "C", 50, 0, {|| "@!" },          "Família",       .F., "Família"         , 25, .F. } )
   aAdd( aCol, { "CCODART", "C", 18, 0, {|| "@!" },          "Cod. artículo", .T., "Codigo artículo" , 14, .F. } )
   aAdd( aCol, { "CNOMART", "C",100, 0, {|| "@!" },          "Descripción",   .T., "Descripción"     , 25, .F. } )
   aAdd( aCol, { "NUNTENT", "N", 16, 6, {|| MasUnd() },      "Unidades",      .T., "Unidades"        , 10, .T. } )
   aAdd( aCol, { "NPREDIV", "N", 16, 6, {|| oInf:cPicOut },  "Precio",        .T., "Precio artículo" , 10, .F. } )
   aAdd( aCol, { "NIVATIL", "N", 16, 6, {|| oInf:cPicOut },  "%" + cImp(),    .T., "%" + cImp()      ,  8, .F. } )
   aAdd( aCol, { "NTOTUNI", "N", 16, 6, {|| oInf:cPicOut },  "Total",         .T., "Total vendido"   , 10, .T. } )

   aAdd( aIdx, { "CCODFAM", "CCODFAM + CCODART" } )

   oInf        := TFamArt():New( "Informe resumido de ventas de artículos en tikets agrupados por familias", aCol, aIdx, "01047" )

   oInf:AddGroup( {|| oInf:oDbf:cCodFam }, {|| "Família : " + Rtrim( oInf:oDbf:cCodFam ) + "-" + oRetFld( oInf:oDbf:cCodFam, oInf:oDbfFam ) }, {||"Total família..."} )

   oInf:Resource()
   oInf:Activate()

   oInf:End()

RETURN NIL



_HB_CLASS TFamArt ; UTILITY FUNCTION TFamArt(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFamArt" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS LOGIC lResumen} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lResumen" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lExcCero} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lExcCero" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikeT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikeT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikeL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikeL" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TFamArt_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TFamArt_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TFamArt_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TFamArt_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( cFld); IIF( .F., s_oClass:ModMethod( "Resource", @TFamArt_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TFamArt_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TFamArt_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TFamArt_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFamArt ;



UTILITY STATIC function TFamArt_OpenFiles() ; local Self AS CLASS TFamArt := QSelf() AS CLASS TFamArt

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oTikeT := DbfServer( "TIKET.DBF", "TIKETT" ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikeT:AddBag( "TIKET.CDX" ) ; ::oTikeT:AddBag( ) ; ::oTikeT:AutoIndex()

   ::oTikeL := DbfServer( "TIKEL.DBF", "TIKETL" ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikeL:AddBag( "TIKEL.CDX" ) ; ::oTikeL:AddBag( ) ; ::oTikeL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", "ARTICULO" ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TFamArt_CloseFiles() ; local Self AS CLASS TFamArt := QSelf() AS CLASS TFamArt

   if !Empty( ::oTikeT ) .AND. ::oTikeT:Used()
      ::oTikeT:End()
   end

  if !Empty( ::oTikeL ) .AND. ::oTikeL:Used()
      ::oTikeL:End()
   end

RETURN ( Self )



UTILITY STATIC function TFamArt_Resource( cFld) ; local Self AS CLASS TFamArt := QSelf() AS CLASS TFamArt

   if !::StdResource( "INF_GEN18" )
      return .F.
   end





   ::lDefFamInf( 110, 120, 130, 140 )





   ::oDefExcInf()

   ::oDefResInf()

RETURN ( Self )






UTILITY STATIC function TFamArt_lGenerate() ; local Self AS CLASS TFamArt := QSelf() AS CLASS TFamArt

   local cCodFam
   local nLasTik  := ::oTikeT:Lastrec()
   ::oDlg:Disable()

   ::oDbf:Zap()
   ::oTikeT:GoTop()

   ::oMtrInf:SetTotal( nLasTik )



   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Família : " + ::cFamOrg       + " > " + ::cFamDes       } }

   while !::oTikeT:Eof()

      if ::oTikeT:dFecTik >= ::dIniInf .AND. ::oTikeT:dFecTik <= ::dFinInf

         if ::oTikeL:Seek( ::oTikeT:cSerTik + ::oTikeT:cNumTik + ::oTikeT:cSufTik )


            while ::oTikeL:cSerTil + ::oTikeL:cNumTil + ::oTikeL:cSufTil == ::oTikeT:cSerTik + ::oTikeT:cNumTik + ::oTikeT:cSufTik .AND. !::oTikeL:eof()

               cCodFam := cCodFam( ::oTikeL:cCbaTil, ::oDbfArt )




               if cCodFam >= ::cFamOrg                             .AND. cCodFam <= ::cFamDes                             .AND. ::oTikeL:nCtlStk == 1                              .AND. if( ::lExcCero, ::oTikeL:nUntTil <> 0, .T. )

                  if ::oDbf:Seek( cCodFam + ::oTikeL:cCbaTil )

                     ::oDbf:Load()
                     ::oDbf:NUNTENT += if( ::oTikeT:cTipTik == "4", - ::oTikeL:nUntTil, ::oTikeL:nUntTil )
                     ::oDbf:NTOTUNI += if( ::oTikeT:cTipTik == "4", - ::oTikeL:nUntTil, ::oTikeL:nUntTil ) * ::oTikeL:nPvpTil
                     ::oDbf:NPREDIV := ::oDbf:nTotUni / ::oDbf:nUntEnt
                     ::oDbf:nIvaTil := ::oTikeL:nIvaTil
                     ::oDbf:Save()

                  else

                     ::oDbf:Append()
                     ::oDbf:CCODFAM := cCodFam
                     ::oDbf:CNOMFAM := cNomFam( cCodFam, ::oDbfFam )
                     ::oDbf:CCODART := ::oTikeL:cCbaTil
                     ::oDbf:CNOMART := ::oTikeL:cNomTil
                     ::oDbf:NUNTENT := if( ::oTikeT:cTipTik == "4", - ::oTikeL:nUntTil, ::oTikeL:nUntTil )
                     ::oDbf:NTOTUNI := if( ::oTikeT:cTipTik == "4", - ::oTikeL:nUntTil, ::oTikeL:nUntTil ) * ::oTikeL:nPvpTil
                     ::oDbf:NPREDIV := ::oTikeL:nPvpTil
                     ::oDbf:nIvaTil := ::oTikeL:nIvaTil
                     ::oDbf:Save()

                   end

               end

               ::oTikeL:Skip()

            end

         end

      end

      ::oTikeT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

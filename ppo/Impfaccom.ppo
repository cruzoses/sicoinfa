#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Impfaccom.prg"
_HB_CLASS TImpFacCom ; UTILITY FUNCTION TImpFacCom(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TImpFacCom" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )

   _HB_MEMBER { aLgcIndices} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aLgcIndices" }, .F., .F. ), )
   _HB_MEMBER { aChkIndices} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aChkIndices" }, .F., .F. ), )
   _HB_MEMBER { aMtrIndices} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aMtrIndices" }, .F., .F. ), )
   _HB_MEMBER { aNumIndices} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aNumIndices" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfCliGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfCliGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfCliFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfCliFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfFamGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfFamGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfPrvGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfPrvGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfPrvFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfPrvFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtPrv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtPrv" }, .F., .F. ), )
   _HB_MEMBER { oDbfCliBnc} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfCliBnc" }, .F., .F. ), )
   _HB_MEMBER { oDbfAlbTGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAlbTGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfAlbLGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAlbLGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfAlbTFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAlbTFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfAlbLFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAlbLFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfFacTGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfFacTGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfFacLGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfFacLGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfFacPGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfFacPGst" }, .F., .F. ), )
   _HB_MEMBER { oDbfFacTFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfFacTFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfAntTGst} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAntTGst" }, .F., .F. ), )
   _HB_MEMBER { cPathFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPathFac" }, .F., .F. ), )
   _HB_MEMBER { oDbfIva} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfIva" }, .F., .F. ), )
   _HB_MEMBER { oDbfPgo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfPgo" }, .F., .F. ), )
   _HB_MEMBER { oDbfDiv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfDiv" }, .F., .F. ), )

   _HB_MEMBER New(); IIF( .F., s_oClass:ModMethod( "New", @TImpFacCom_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TImpFacCom_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TImpFacCom_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TImpFacCom_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TImpFacCom_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TImpFacCom_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource(); IIF( .F., s_oClass:ModMethod( "Resource", @TImpFacCom_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TImpFacCom_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Importar(); IIF( .F., s_oClass:ModMethod( "Importar", @TImpFacCom_Importar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Importar", @TImpFacCom_Importar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectChk( lSet); IIF( .F., s_oClass:ModMethod( "SelectChk", @TImpFacCom_SelectChk(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectChk", @TImpFacCom_SelectChk(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TImpFacCom ;




UTILITY STATIC function TImpFacCom_OpenFiles() ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   if Empty( ::cPathFac )
      MsgStop( "Ruta de factucont ® está vacía" )
      return .F.
   end

   if Right( ::cPathFac, 1 ) <> "\"
      ::cPathFac  += "\"
   end

   BEGIN SEQUENCE

   ::oDbfIva := DbfServer( "TIVA.DBF", "cImp()" ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .F., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()
   ::oDbfDiv := DbfServer( "DIVISAS.DBF", "cImp()" ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .F., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()
   ::oDbfPgo := DbfServer( "FPAGO.DBF", "cImp()" ):NewOpen( "FPAGO.DBF",, ( cDriver() ),, ( cPatGrp() ), .F., .F., .F., .F. ) ; ::oDbfPgo:AddBag( "FPAGO.CDX" ) ; ::oDbfPgo:AddBag( ) ; ::oDbfPgo:AutoIndex()

   if !File( ::cPathFac + "PROVEEDO.DBF" )
      ::aChkIndices[ 1 ]:Click( .F. ):Refresh()
      MsgAlert( "No existe fichero de proveedores", ::cPathFac + "PROVEEDO.DBF" )
   else
      ::oDbfPrvGst := DbfServer( "PROVEE.DBF", "PRVGST" ):NewOpen( "PROVEE.DBF",, ( cDriver() ),, ( cPatPrv() ), .F., .F., .F., .F. ) ; ::oDbfPrvGst:AddBag( "PROVEE.CDX" ) ; ::oDbfPrvGst:AddBag( ) ; ::oDbfPrvGst:AutoIndex()
      ::oDbfPrvFac := DbfServer( "PROVEEDO.DBF", "PRVFAC" ):NewOpen( "PROVEEDO.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfPrvFac:AddBag( ) ; ::oDbfPrvFac:AddBag( ) ; ::oDbfPrvFac:AutoIndex()
   end

   if !File( ::cPathFac + "CLIENTE.DBF" )
      ::aChkIndices[ 2 ]:Click( .F. ):Refresh()
      MsgAlert( "No existen ficheros de clientes", ::cPathFac + "CLIENTES.DBF" )
   else
      ::oDbfCliBnc := DbfServer( "CLIBNC.DBF", "CLIBNCGST" ):NewOpen( "CLIBNC.DBF",, ( cDriver() ),, ( cPatCli() ), .F., .F., .F., .F. ) ; ::oDbfCliBnc:AddBag( "CLIBNC.CDX" ) ; ::oDbfCliBnc:AddBag( ) ; ::oDbfCliBnc:AutoIndex()
      ::oDbfCliGst := DbfServer( "CLIENT.DBF", "CLIGST" ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatCli() ), .F., .F., .F., .F. ) ; ::oDbfCliGst:AddBag( "CLIENT.CDX" ) ; ::oDbfCliGst:AddBag( ) ; ::oDbfCliGst:AutoIndex()
      ::oDbfCliFac := DbfServer( "CLIENTE.DBF", "CLIFAC" ):NewOpen( "CLIENTE.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfCliFac:AddBag( ) ; ::oDbfCliFac:AddBag( ) ; ::oDbfCliFac:AutoIndex()
   end

   if !File( ::cPathFac + "Articulo.DBF" )
      ::aChkIndices[ 3 ]:Click( .F. ):Refresh()
      MsgAlert( "No existe fichero de artículos", ::cPathFac + "ARTICULO.DBF" )
   else
      ::oDbfArtPrv := DbfServer( "PROVART.DBF", "ARTPRVGST" ):NewOpen( "PROVART.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .F., .F., .F. ) ; ::oDbfArtPrv:AddBag( "PROVART.CDX" ) ; ::oDbfArtPrv:AddBag( ) ; ::oDbfArtPrv:AutoIndex()
      ::oDbfFamGst := DbfServer( "FAMILIAS.DBF", "FAMGST" ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .F., .F., .F. ) ; ::oDbfFamGst:AddBag( "FAMILIAS.CDX" ) ; ::oDbfFamGst:AddBag( ) ; ::oDbfFamGst:AutoIndex()
      ::oDbfFamGst:OrdSetFocus( "CNOMFAM" )
      ::oDbfArtGst := DbfServer( "ARTICULO.DBF", "ARTGST" ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .F., .F., .F. ) ; ::oDbfArtGst:AddBag( "ARTICULO.CDX" ) ; ::oDbfArtGst:AddBag( ) ; ::oDbfArtGst:AutoIndex()
      ::oDbfArtFac := DbfServer( "ARTICULO.DBF", "ARTFAC" ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfArtFac:AddBag( ) ; ::oDbfArtFac:AddBag( ) ; ::oDbfArtFac:AutoIndex()
   end

   if !File( ::cPathFac + "ALBARAN1.DBF" ) .OR. !File( ::cPathFac + "INGRESO1.DBF" ) .OR. !File( ::cPathFac + "CONTENI1.DBF" )
      ::aChkIndices[ 4 ]:Click( .F. ):Refresh()
      ::aChkIndices[ 5 ]:Click( .F. ):Refresh()
      MsgAlert( "No existe fichero de albaranes", ::cPathFac + "ALBARAN1.DBF, ni" + ::cPathFac + "CONTENI1.DBF" )
   else
      ::oDbfAlbTGst := DbfServer( "ALBCLIT.DBF", "ALBTGST" ):NewOpen( "ALBCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfAlbTGst:AddBag( "ALBCLIT.CDX" ) ; ::oDbfAlbTGst:AddBag( ) ; ::oDbfAlbTGst:AutoIndex()
      ::oDbfAlbTFac := DbfServer( "ALBARAN1.DBF", "ALBTFAC" ):NewOpen( "ALBARAN1.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfAlbTFac:AddBag( ) ; ::oDbfAlbTFac:AddBag( ) ; ::oDbfAlbTFac:AutoIndex()
      ::oDbfAlbLGst := DbfServer( "ALBCLIL.DBF", "ALBLGST" ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfAlbLGst:AddBag( "ALBCLIL.CDX" ) ; ::oDbfAlbLGst:AddBag( ) ; ::oDbfAlbLGst:AutoIndex()
      ::oDbfAlbLFac := DbfServer( "CONTENI1.DBF", "ALBLFAC" ):NewOpen( "CONTENI1.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfAlbLFac:AddBag( ) ; ::oDbfAlbLFac:AddBag( ) ; ::oDbfAlbLFac:AutoIndex()
      ::oDbfFacTGst := DbfServer( "FACCLIT.DBF", "FACTGST" ):NewOpen( "FACCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfFacTGst:AddBag( "FACCLIT.CDX" ) ; ::oDbfFacTGst:AddBag( ) ; ::oDbfFacTGst:AutoIndex()
      ::oDbfFacTFac := DbfServer( "INGRESO1.DBF", "FACTFAC" ):NewOpen( "INGRESO1.DBF",, ( cDriver() ),, ( ::cPathFac ), .F., .F., .F., .F. ) ; ::oDbfFacTFac:AddBag( ) ; ::oDbfFacTFac:AddBag( ) ; ::oDbfFacTFac:AutoIndex()
      ::oDbfFacLGst := DbfServer( "FACCLIL.DBF", "FACLGST" ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfFacLGst:AddBag( "FACCLIL.CDX" ) ; ::oDbfFacLGst:AddBag( ) ; ::oDbfFacLGst:AutoIndex()
      ::oDbfFacPGst := DbfServer( "FACCLIP.DBF", "FACPGST" ):NewOpen( "FACCLIP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfFacPGst:AddBag( "FACCLIP.CDX" ) ; ::oDbfFacPGst:AddBag( ) ; ::oDbfFacPGst:AutoIndex()
      ::oDbfAntTGst := DbfServer( "ANTCLIT.DBF", "ANTTGST" ):NewOpen( "ANTCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .F., .F., .F. ) ; ::oDbfAntTGst:AddBag( "ANTCLIT.CDX" ) ; ::oDbfAntTGst:AddBag( ) ; ::oDbfAntTGst:AutoIndex()
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )




UTILITY STATIC function TImpFacCom_CloseFiles() ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   if !Empty( ::oDbfIva )
      ::oDbfIva:End()
   else
      ::oDbfIva := nil
   end

   if !Empty( ::oDbfArtGst )
      ::oDbfArtGst:End()
   else
      ::oDbfArtGst := nil
   end

   if !Empty( ::oDbfArtFac )
      ::oDbfArtFac:End()
   else
      ::oDbfArtFac := nil
   end

   if !Empty( ::oDbfCliGst )
      ::oDbfCliGst:End()
   else
      ::oDbfCliGst := nil
   end

   if !Empty( ::oDbfCliFac )
      ::oDbfCliFac:End()
   else
      ::oDbfCliFac := nil
   end

   if !Empty( ::oDbfFamGst )
      ::oDbfFamGst:End()
   else
      ::oDbfFamGst := nil
   end

   if !Empty( ::oDbfPrvGst )
      ::oDbfPrvGst:End()
   else
      ::oDbfPrvGst := nil
   end

   if !Empty( ::oDbfPrvFac )
      ::oDbfPrvFac:End()
   else
      ::oDbfPrvFac := nil
   end

   if !Empty( ::oDbfArtPrv )
      ::oDbfArtPrv:End()
   else
      ::oDbfArtPrv := nil
   end

   if !Empty( ::oDbfCliBnc )
      ::oDbfCliBnc:End()
   else
      ::oDbfCliBnc := nil
   end

   if !Empty( ::oDbfAlbTGst )
      ::oDbfAlbTGst:End()
   else
      ::oDbfAlbTGst := nil
   end

   if !Empty( ::oDbfAlbTFac )
      ::oDbfAlbTFac:End()
   else
      ::oDbfAlbTFac := nil
   end

   if !Empty( ::oDbfAlbLGst )
      ::oDbfAlbLGst:End()
   else
      ::oDbfAlbLGst := nil
   end

   if !Empty( ::oDbfAlbLFac )
      ::oDbfAlbLFac:End()
   else
      ::oDbfAlbLFac := nil
   end

   if !Empty( ::oDbfFacTGst )
      ::oDbfFacTGst:End()
   else
      ::oDbfFacTGst := nil
   end

   if !Empty( ::oDbfFacLGst )
      ::oDbfFacLGst:End()
   else
      ::oDbfFacLGst := nil
   end

   if !Empty( ::oDbfFacTFac )
      ::oDbfFacTFac:End()
   else
      ::oDbfFacTFac := nil
   end

   if !Empty( ::oDbfFacPGst )
      ::oDbfFacPGst:End()
   else
      ::oDbfFacPGst := nil
   end

   if !Empty( ::oDbfAntTGst )
      ::oDbfAntTGst:End()
   else
      ::oDbfAntTGst := nil
   end

   if !Empty( ::oDbfPgo )
      ::oDbfPgo:End()
   else
      ::oDbfPgo := nil
   end

   if !Empty( ::oDbfDiv )
      ::oDbfDiv:End()
   else
      ::oDbfDiv := nil
   end

RETURN .T.




UTILITY STATIC function TImpFacCom_New() ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   ::cPathFac     := Space( 100 )

   ::aLgcIndices  := Afill( Array( 5 ), .T. )
   ::aChkIndices  := Array( 5 )
   ::aMtrIndices  := Array( 5 )
   ::aNumIndices  := Afill( Array( 5 ), 0 )

RETURN ( Self )




UTILITY STATIC function TImpFacCom_Resource() ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   local oBmp
   local oGet

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return nil
   end

   if oWnd() <> nil
      oWnd():CloseAll()
   end

   ::oDlg = TDialog():New(,,,, "Importación desde factucont ®", "IMPFACCOM",, .F.,,,,, oWnd(), .F.,,,,,, .F., )

      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cPathFac, ::cPathFac:= u ) }, ::oDlg,,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oGet:cText( cGetDir32( "Seleccione destino" ) ) )}, nil, "FOLDER",, )

      oBmp := TBitmap():ReDefine( 600, "ImportarFactucont",, ::oDlg,,, .F., .F.,,, .F.,,, .F. )

      ::aChkIndices[ 1 ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, ::aLgcIndices[ 1 ], ::aLgcIndices[ 1 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 2 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, ::aLgcIndices[ 2 ], ::aLgcIndices[ 2 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 3 ] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, ::aLgcIndices[ 3 ], ::aLgcIndices[ 3 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 4 ] := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, ::aLgcIndices[ 4 ], ::aLgcIndices[ 4 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )
      ::aChkIndices[ 5 ] := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, ::aLgcIndices[ 5 ], ::aLgcIndices[ 5 ]:= u ) }, ::oDlg,,,,,,, .F.,, .F. )

      ::aMtrIndices[ 1 ] := TMeter():ReDefine( 111, { | u | If( PCount()==0, ::aNumIndices[ 1 ], ::aNumIndices[ 1 ]:= u ) },, ::oDlg, .F.,,, .F.,,,, )
      ::aMtrIndices[ 2 ] := TMeter():ReDefine( 121, { | u | If( PCount()==0, ::aNumIndices[ 2 ], ::aNumIndices[ 2 ]:= u ) },, ::oDlg, .F.,,, .F.,,,, )
      ::aMtrIndices[ 3 ] := TMeter():ReDefine( 131, { | u | If( PCount()==0, ::aNumIndices[ 3 ], ::aNumIndices[ 3 ]:= u ) },, ::oDlg, .F.,,, .F.,,,, )
      ::aMtrIndices[ 4 ] := TMeter():ReDefine( 151, { | u | If( PCount()==0, ::aNumIndices[ 4 ], ::aNumIndices[ 4 ]:= u ) },, ::oDlg, .F.,,, .F.,,,, )
      ::aMtrIndices[ 5 ] := TMeter():ReDefine( 161, { | u | If( PCount()==0, ::aNumIndices[ 5 ], ::aNumIndices[ 5 ]:= u ) },, ::oDlg, .F.,,, .F.,,,, )

      TButton():ReDefine( 500, {||( ::SelectChk( .T. ) )}, ::oDlg,,, .F.,,,, .F. )
      TButton():ReDefine( 501, {||( ::SelectChk( .F. ) )}, ::oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 1, {||( ::Importar() )}, ::oDlg,,, .F.,,,, .F. )
      TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .F. )
      TButton():ReDefine( 998, {||( msginfo( "Ayuda no definida", "Información" ) )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:AddFastKey( 112, {|| msginfo( "Ayuda no definida", "Información" ) } )
   ::oDlg:AddFastKey( 116, {|| ::Importar() } )

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   oBmp:End()

RETURN ( Self )




UTILITY STATIC function TImpFacCom_SelectChk( lSet) ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   local n

   for n := 1 to len( ::aLgcIndices )
      ::aLgcIndices[n] := lSet
      ::aChkIndices[n]:Refresh()
   next

RETURN ( Self )




UTILITY STATIC function TImpFacCom_Importar() ; local Self AS CLASS TImpFacCom := QSelf() AS CLASS TImpFacCom

   local nCount  := 0
   local nOrdAnt

   if ::OpenFiles()

      ::oDlg:Disable()



      if ::aLgcIndices[ 1 ]





         ::aMtrIndices[ 1 ]:SetTotal( ::oDbfPrvFac:LastRec() )

         ::oDbfPrvFac:GoTop()
         while !( ::oDbfPrvFac:eof() )

            while ::oDbfPrvGst:Seek( ::oDbfPrvFac:Codigo )
               ::oDbfPrvGst:Delete( .F. )
            end

            ::oDbfPrvGst:Append()

            ::oDbfPrvGst:Cod         := ::oDbfPrvFac:Codigo
            ::oDbfPrvGst:Titulo      := ::oDbfPrvFac:Nombre
            ::oDbfPrvGst:Nif         := ::oDbfPrvFac:Cif
            ::oDbfPrvGst:Domicilio   := ::oDbfPrvFac:Direccion
            ::oDbfPrvGst:Poblacion   := ::oDbfPrvFac:Ciudad
            ::oDbfPrvGst:cPerCto     := ::oDbfPrvFac:Contacto
            ::oDbfPrvGst:Telefono    := ::oDbfPrvFac:Telefono
            ::oDbfPrvGst:Fax         := ::oDbfPrvFac:Fax
            ::oDbfPrvGst:Movil       := ::oDbfPrvFac:Movil
            ::oDbfPrvGst:cMeiInt     := ::oDbfPrvFac:Correoe
            ::oDbfPrvGst:cWebInt     := ::oDbfPrvFac:Url
            ::oDbfPrvGst:nCopiasf    := 1
            ::oDbfPrvGst:cCodUsr     := cCurUsr()
            ::oDbfPrvGst:dFecChg     := GetSysDate()
            ::oDbfPrvGst:cTimChg     := Time()
            ::oDbfPrvGst:lBlqPrv     := .F.

            ::oDbfPrvGst:Save()

            ::aMtrIndices[ 1 ]:Set( ::oDbfPrvFac:Recno() )

            ::oDbfPrvFac:Skip()

         end

      end



      if ::aLgcIndices[ 2 ]





         ::aMtrIndices[ 2 ]:SetTotal( ::oDbfCliFac:LastRec() )

         ::oDbfCliFac:GoTop()
         while !( ::oDbfCliFac:eof() )

            while ::oDbfCliGst:Seek( ::oDbfCliFac:Codigo )
               ::oDbfCliGst:Delete( .F. )
            end

            ::oDbfCliGst:Append()
            ::oDbfCliGst:Blank()

            ::oDbfCliGst:Cod        := ::oDbfCliFac:Codigo
            ::oDbfCliGst:Titulo     := ::oDbfCliFac:Nombre
            ::oDbfCliGst:Nif        := ::oDbfCliFac:Cif
            ::oDbfCliGst:Domicilio  := ::oDbfCliFac:Direccion
            ::oDbfCliGst:Poblacion  := ::oDbfCliFac:Ciudad
            ::oDbfCliGst:Telefono   := ::oDbfCliFac:Telefono
            ::oDbfCliGst:Fax        := ::oDbfCliFac:Fax
            ::oDbfCliGst:Movil      := ::oDbfCliFac:Movil
            ::oDbfCliGst:nTipCli    := 1
            ::oDbfCliGst:CopiasF    := 1
            if ::oDbfCliFac:Exento
               ::oDbfCliGst:nRegIva := 3
            else
               ::oDbfCliGst:nRegIva := 1
            end
            ::oDbfCliGst:lReq       := ::oDbfCliFac:Recargo
            ::oDbfCliGst:nTarifa    := ::oDbfCliFac:Tarifa
            ::oDbfCliGst:cMeiInt    := ::oDbfCliFac:Correoe
            ::oDbfCliGst:cWebInt    := ::oDbfCliFac:Url
            ::oDbfCliGst:cPerCto    := ::oDbfCliFac:Contacto
            ::oDbfCliGst:cCodAlm    := oUser():cAlmacen()
            ::oDbfCliGst:cCodUsr    := cCurUsr()
            ::oDbfCliGst:dFecChg    := GetSysDate()
            ::oDbfCliGst:cTimChg    := Time()
            ::oDbfCliGst:cDtoEsp    := Padr( "General", 50 )
            ::oDbfCliGst:cDpp       := Padr( "Pronto pago", 50 )
            ::oDbfCliGst:cDtoAtp    := Padr( "Atipico", 50 )
            ::oDbfCliGst:nDtoEsp    := ::oDbfCliFac:Descuento
            ::oDbfCliGst:lChgPre    := .T.



            if !Empty( ::oDbfCliFac:Ccc )


               ::oDbfCliGst:Banco   := ::oDbfCliFac:Domicilia
               ::oDbfCliGst:Cuenta  := ::oDbfCliFac:Ccc

               ::oDbfCliBnc:Append()

               ::oDbfCliBnc:cCodCli := ::oDbfCliFac:Codigo
               ::oDbfCliBnc:cCtaBnc := ::oDbfCliFac:Ccc
               ::oDbfCliBnc:lBncDef := .T.
               ::oDbfCliBnc:cCodBnc := ::oDbfCliFac:Domicilia

               ::oDbfCliBnc:Save()

            end

            ::oDbfCliGst:Save()

            ::aMtrIndices[ 2 ]:Set( ::oDbfCliFac:Recno() )

            ::oDbfCliFac:Skip()

         end

      end



      if ::aLgcIndices[ 3 ]



         ::aMtrIndices[ 3 ]:SetTotal( ::oDbfArtFac:LastRec() )

         ::oDbfArtFac:GoTop()

         nCount := 1

         while !::oDbfArtFac:eof()

            if !Empty( ::oDbfArtFac:Familia ) .AND. !::oDbfFamGst:Seek( UPPER( ::oDbfArtFac:Familia ) )

               ::oDbfFamGst:Append()

               ::oDbfFamGst:cCodFam    := StrZero( nCount, 3 )
               ::oDbfFamGst:cNomFam    := UPPER( ::oDbfArtFac:Familia )

               ::oDbfFamGst:Save()

               nCount ++

            end

            ::aMtrIndices[ 3 ]:Set( ::oDbfArtFac:Recno() )

            ::oDbfArtFac:Skip()

         end





         ::aMtrIndices[ 3 ]:SetTotal( ::oDbfArtFac:LastRec() )

         ::oDbfFamGst:GoTop()
         ::oDbfArtFac:GoTop()
         while !( ::oDbfArtFac:eof() )

            while ::oDbfArtGst:Seek( ::oDbfArtFac:Codigo )
               ::oDbfArtGst:Delete( .F. )
            end

            ::oDbfArtGst:Append()
            ::oDbfArtGst:Blank()

            ::oDbfArtGst:Codigo           := ::oDbfArtFac:Codigo
            ::oDbfArtGst:Nombre           := ::oDbfArtFac:Descripcio
            ::oDbfArtGst:pCosto           := ::oDbfArtFac:Compra
            ::oDbfArtGst:lBnf1            := .F.
            ::oDbfArtGst:lBnf2            := .F.
            ::oDbfArtGst:lBnf3            := .F.
            ::oDbfArtGst:Benef1           := ::oDbfArtFac:Margen1
            ::oDbfArtGst:Benef2           := ::oDbfArtFac:Margen2
            ::oDbfArtGst:Benef3           := ::oDbfArtFac:Margen3
            ::oDbfArtGst:nBnfSbr1         := 1
            ::oDbfArtGst:nBnfSbr2         := 1
            ::oDbfArtGst:nBnfSbr3         := 1
            ::oDbfArtGst:pVenta1          := ::oDbfArtFac:Venta1
            ::oDbfArtGst:pVenta2          := ::oDbfArtFac:Venta2
            ::oDbfArtGst:pVenta3          := ::oDbfArtFac:Venta3
            ::oDbfArtGst:lIvaInc          := ::oDbfArtFac:IvaIncl
            ::oDbfArtGst:nMinimo          := ::oDbfArtFac:StockMin
            ::oDbfArtGst:nMaximo          := ::oDbfArtFac:StockMin
            ::oDbfArtGst:nCajEnt          := 1
            ::oDbfArtGst:nUniCaja         := 1
            ::oDbfArtGst:LastChg          := GetSysDate()
            ::oDbfArtGst:cCodUsr          := cCurUsr()
            ::oDbfArtGst:cTimChg          := Time()
            ::oDbfArtGst:nCtlStock        := 1

            do case
               case ::oDbfArtFac:Iva  == 0
                  ::oDbfArtGst:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, 0 )
                  ::oDbfArtGst:pVtaIva1   := ::oDbfArtFac:Venta1 + ( ( ::oDbfArtFac:Venta1 * 0 ) / 100 )
                  ::oDbfArtGst:pVtaIva2   := ::oDbfArtFac:Venta2 + ( ( ::oDbfArtFac:Venta2 * 0 ) / 100 )
                  ::oDbfArtGst:pVtaIva3   := ::oDbfArtFac:Venta3 + ( ( ::oDbfArtFac:Venta3 * 0 ) / 100 )
               case ::oDbfArtFac:Iva  == 1
                  ::oDbfArtGst:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, 4 )
                  ::oDbfArtGst:pVtaIva1   := ::oDbfArtFac:Venta1 + ( ( ::oDbfArtFac:Venta1 * 4 ) / 100 )
                  ::oDbfArtGst:pVtaIva2   := ::oDbfArtFac:Venta2 + ( ( ::oDbfArtFac:Venta2 * 4 ) / 100 )
                  ::oDbfArtGst:pVtaIva3   := ::oDbfArtFac:Venta3 + ( ( ::oDbfArtFac:Venta3 * 4 ) / 100 )
               case ::oDbfArtFac:Iva  == 2
                  ::oDbfArtGst:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, 7 )
                  ::oDbfArtGst:pVtaIva1   := ::oDbfArtFac:Venta1 + ( ( ::oDbfArtFac:Venta1 * 7 ) / 100 )
                  ::oDbfArtGst:pVtaIva2   := ::oDbfArtFac:Venta2 + ( ( ::oDbfArtFac:Venta2 * 7 ) / 100 )
                  ::oDbfArtGst:pVtaIva3   := ::oDbfArtFac:Venta3 + ( ( ::oDbfArtFac:Venta3 * 7 ) / 100 )
               case ::oDbfArtFac:Iva  == 3
                  ::oDbfArtGst:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, 16 )
                  ::oDbfArtGst:pVtaIva1   := ::oDbfArtFac:Venta1 + ( ( ::oDbfArtFac:Venta1 * 16 ) / 100 )
                  ::oDbfArtGst:pVtaIva2   := ::oDbfArtFac:Venta2 + ( ( ::oDbfArtFac:Venta2 * 16 ) / 100 )
                  ::oDbfArtGst:pVtaIva3   := ::oDbfArtFac:Venta3 + ( ( ::oDbfArtFac:Venta3 * 16 ) / 100 )
            end

            if ::oDbfFamGst:Seek( UPPER( ::oDbfArtFac:Familia ) )
               ::oDbfArtGst:Familia       := ::oDbfFamGst:cCodFam
            end



            nOrdAnt := ::oDbfPrvGst:OrdSetFocus( "TITULO" )

            if !Empty( ::oDbfArtFac:Proveedor ) .AND. ::oDbfPrvGst:Seek( UPPER( ::oDbfArtFac:Proveedor ) )

               ::oDbfArtGst:cPrvHab       := ::oDbfPrvGst:Cod

               ::oDbfArtPrv:Append()

               ::oDbfArtPrv:cCodArt       := ::oDbfArtFac:Codigo
               ::oDbfArtPrv:cCodPrv       := ::oDbfPrvGst:Cod
               ::oDbfArtPrv:cRefPrv       := ::oDbfArtFac:RfaProv
               ::oDbfArtPrv:lDefPrv       := .T.

               ::oDbfArtPrv:Save()

            end

            ::oDbfPrvGst:OrdSetFocus( nOrdAnt )

            ::oDbfArtGst:Save()

            ::aMtrIndices[ 3 ]:Set( ::oDbfArtFac:Recno() )

            ::oDbfArtFac:Skip()

         end

      end



      if ::aLgcIndices[ 4 ]

         ::aMtrIndices[ 4 ]:SetTotal( ::oDbfAlbTFac:LastRec() )

         ::oDbfAlbTFac:GoTop()
         while !( ::oDbfAlbTFac:eof() )

            while ::oDbfAlbTGst:Seek( "A" + Str( Val( ::oDbfAlbTFac:Numero ), 9 ) + Space(2) )
               ::oDbfAlbTGst:Delete( .F. )
            end

            while ::oDbfAlbLGst:Seek( "A" + Str( Val( ::oDbfAlbTFac:Numero), 9 ) + Space(2) )
               ::oDbfAlbLGst:Delete( .F. )
            end

            ::oDbfAlbTGst:Append()
            ::oDbfAlbTGst:Blank()

            ::oDbfAlbTGst:cSerAlb        := "A"
            ::oDbfAlbTGst:nNumAlb        := Val( ::oDbfAlbTFac:Numero )
            ::oDbfAlbTGst:cSufAlb        := Space( 2 )
            ::oDbfAlbTGst:cTurAlb        := cCurSesion()
            ::oDbfAlbTGst:dFecAlb        := ::oDbfAlbTFac:Fecha
            ::oDbfAlbTGst:cCodAlm        := oUser():cAlmacen()
            ::oDbfAlbTGst:cCodCaj        := cDefCaj()
            ::oDbfAlbTGst:lFacturado     := .F.
            ::oDbfAlbTGst:lEntregado     := .F.
            ::oDbfAlbTGst:dFecEnt        := ::oDbfAlbTFac:Fecha
            ::oDbfAlbTGst:cCodPago       := cDefFpg()
            ::oDbfAlbTGst:nTarifa        := 1
            ::oDbfAlbTGst:cDivAlb        := cDivEmp()
            ::oDbfAlbTGst:lIvaInc        := ::oDbfAlbTFac:IvaIncl
            ::oDbfAlbTGst:cCodUsr        := cCurUsr()
            ::oDbfAlbTGst:dFecCre        := GetSysDate()
            ::oDbfAlbTGst:cTimCre        := Time()
            ::oDbfAlbTGst:dFecEnv        := Ctod( "" )

            nOrdAnt := ::oDbfCliGst:OrdSetFocus( "TITULO" )
            ::oDbfCliGst:GoTop()
            if !Empty( ::oDbfAlbTFac:NombreF ) .AND. ::oDbfCliGst:Seek( UPPER( ::oDbfAlbTFac:NombreF ) )

               ::oDbfAlbTGst:cCodCli        := ::oDbfCliGst:Cod
               ::oDbfAlbTGst:cNomCli        := UPPER( ::oDbfAlbTFac:NombreF )
               if !Empty( ::oDbfAlbTFac:DireccionF )
                  ::oDbfAlbTGst:cDirCli     := ::oDbfAlbTFac:DireccionF
               else
                  ::oDbfAlbTGst:cDirCli     := ::oDbfCliGst:Domicilio
               end
               if !Empty( ::oDbfAlbTFac:CiudadF )
                  ::oDbfAlbTGst:cPobCli     := ::oDbfAlbTFac:CiudadF
               else
                  ::oDbfAlbTGst:cPobCli     := ::oDbfCliGst:Poblacion
               end
               if !Empty( ::oDbfAlbTFac:Cif )
                  ::oDbfAlbTGst:cDniCli     := ::oDbfAlbTFac:cif
               else
                  ::oDbfAlbTGst:cDniCli     := ::oDbfCliGst:Nif
               end

               ::oDbfAlbTGst:cPrvCli        := ::oDbfCliGst:Provincia
               ::oDbfAlbTGst:cPosCli        := ::oDbfCliGst:CodPostal

               if !Empty( ::oDbfCliGst:cDtoEsp )
                  ::oDbfAlbTGst:cDtoEsp     := ::oDbfCliGst:cDtoEsp
               else
                  ::oDbfAlbTGst:cDtoEsp     := Padr( "General", 50 )
               end

               if !Empty( ::oDbfCliGst:cDpp )
                  ::oDbfAlbTGst:cDpp        := ::oDbfCliGst:cDpp
               else
                  ::oDbfAlbTGst:cDpp        := Padr( "Pronto pago", 50 )
               end

               ::oDbfAlbTGst:lRecargo       := ::oDbfCliGst:lReq
               ::oDbfAlbTGst:nRegIva        := ::oDbfCliGst:nRegIva

            else
               ::oDbfAlbTGst:cNomCli        := UPPER( ::oDbfAlbTFac:NombreF )
               ::oDbfAlbTGst:cDirCli        := ::oDbfAlbTFac:DireccionF
               ::oDbfAlbTGst:cPobCli        := ::oDbfAlbTFac:CiudadF
               ::oDbfAlbTGst:cDniCli        := ::oDbfAlbTFac:cif
            end

            ::oDbfCliGst:OrdSetFocus( nOrdAnt )

            ::oDbfAlbTGst:Save()

            ::aMtrIndices[ 4 ]:Set( ::oDbfAlbTFac:Recno() )

            ::oDbfAlbTFac:Skip()

         end

         ::aMtrIndices[ 4 ]:SetTotal( ::oDbfAlbLFac:LastRec() )

         ::oDbfAlbLFac:GoTop()
         while !( ::oDbfAlbLFac:eof() )



            if Left( ::oDbfAlbLFac:RfaLin, 1 ) == "A"

               WQout( { "entro a hacer un append" } )

               WQout( { ::oDbfAlbLFac:RfaLin } )

               ::oDbfAlbLGst:Append()

               ::oDbfAlbLGst:cSerAlb     := "A"
               ::oDbfAlbLGst:nNumAlb     := Val( SubStr( ::oDbfAlbLFac:RfaLin, 5, 7 ) )
               ::oDbfAlbLGst:cSufAlb     := Space( 2 )
               ::oDbfAlbLGst:cRef        := ::oDbfAlbLFac:Codigo
               ::oDbfAlbLGst:cDetalle    := ::oDbfAlbLFac:Concepto
               ::oDbfAlbLGst:nPreUnit    := ::oDbfAlbLFac:Precio
               ::oDbfAlbLGst:nDto        := ::oDbfAlbLFac:Descuento
               ::oDbfAlbLGst:nIva        := ::oDbfAlbLFac:Iva
               ::oDbfAlbLGst:nCanEnt     := 1
               ::oDbfAlbLGst:nUniCaja    := ::oDbfAlbLFac:Cantidad
               ::oDbfAlbLGst:dFecha      := ::oDbfAlbLFac:Fecha
               ::oDbfAlbLGst:cAlmLin     := oUser():cAlmacen()

               ::oDbfArtGst:GoTop()
               if ::oDbfArtGst:Seek( ::oDbfAlbLFac:Codigo )
                  ::oDbfAlbLGst:nCtlStk  := ::oDbfArtGst:nCtlStock
                  ::oDbfAlbLGst:nCosDiv  := ::oDbfArtGst:pCosto
                  ::oDbfAlbLGst:lIvaLin  := ::oDbfArtGst:lIvaInc
               end

               ::oDbfAlbLGst:Save()

            end

            ::aMtrIndices[ 4 ]:Set( ::oDbfAlbLFac:Recno() )

            ::oDbfAlbLFac:Skip()

         end

      end



      if ::aLgcIndices[ 5 ]

         ::aMtrIndices[ 5 ]:SetTotal( ::oDbfFacTFac:LastRec() )

         ::oDbfFacTFac:GoTop()
         while !( ::oDbfFacTFac:eof() )

               while ::oDbfFacTGst:Seek( "A" + Str( Val( ::oDbfFacTFac:Numero ), 9 ) + Space(2) )
                  ::oDbfFacTGst:Delete( .F. )
               end

               while ::oDbfFacLGst:Seek( "A" + Str( Val( ::oDbfFacTFac:Numero), 9 ) + Space(2) )
                  ::oDbfFacLGst:Delete( .F. )
               end

               while ::oDbfFacPGst:Seek( "A" + Str( Val( ::oDbfFacTFac:Numero), 9 ) + Space(2) )
                  ::oDbfFacPGst:Delete( .F. )
               end

               ::oDbfFacTGst:Append()
               ::oDbfFacTGst:Blank()

               ::oDbfFacTGst:cSerie      := "A"
               ::oDbfFacTGst:nNumFac     := Val( ::oDbfFacTFac:Numero )
               ::oDbfFacTGst:cSufFac     := Space( 2 )
               ::oDbfFacTGst:cTurFac     := cCurSesion()
               ::oDbfFacTGst:dFecFac     := ::oDbfFacTFac:Fecha
               ::oDbfFacTGst:cCodAlm     := oUser():cAlmacen()
               ::oDbfFacTGst:cCodCaj     := cDefCaj()
               ::oDbfFacTGst:dFecEnt     := ::oDbfFacTFac:Fecha
               ::oDbfFacTGst:nTarifa     := 1
               ::oDbfFacTGst:lLiquidada  := .T.
               ::oDbfFacTGst:lContab     := .F.
               ::oDbfFacTGst:cCodPago    := cDefFpg()
               ::oDbfFacTGst:lIvaInc     := ::oDbfFacTFac:IvaIncl
               ::oDbfFacTGst:cDivFac     := cDivEmp()
               ::oDbfFacTGst:cCodUsr     := cCurUsr()
               ::oDbfFacTGst:dFecCre     := GetSysDate()
               ::oDbfFacTGst:cTimCre     := Time()

               nOrdAnt := ::oDbfCliGst:OrdSetFocus( "TITULO" )
               ::oDbfCliGst:GoTop()
               if !Empty( ::oDbfFacTFac:NombreF ) .AND. ::oDbfCliGst:Seek( UPPER( ::oDbfFacTFac:NombreF ) )

                  ::oDbfFacTGst:cCodCli        := ::oDbfCliGst:Cod
                  ::oDbfFacTGst:cNomCli        := UPPER( ::oDbfFacTFac:NombreF )
                  if !Empty( ::oDbfFacTFac:DireccionF )
                     ::oDbfFacTGst:cDirCli     := ::oDbfFacTFac:DireccionF
                  else
                     ::oDbfFacTGst:cDirCli     := ::oDbfCliGst:Domicilio
                  end
                  if !Empty( ::oDbfFacTFac:CiudadF )
                     ::oDbfFacTGst:cPobCli     := ::oDbfFacTFac:CiudadF
                  else
                     ::oDbfFacTGst:cPobCli     := ::oDbfCliGst:Poblacion
                  end
                  if !Empty( ::oDbfFacTFac:Cif )
                     ::oDbfFacTGst:cDniCli     := ::oDbfFacTFac:cif
                  else
                     ::oDbfFacTGst:cDniCli     := ::oDbfCliGst:Nif
                  end

                  ::oDbfFacTGst:cPrvCli        := ::oDbfCliGst:Provincia
                  ::oDbfFacTGst:cPosCli        := ::oDbfCliGst:CodPostal

                  if !Empty( ::oDbfCliGst:cDtoEsp )
                     ::oDbfFacTGst:cDtoEsp     := ::oDbfCliGst:cDtoEsp
                  else
                     ::oDbfFacTGst:cDtoEsp     := Padr( "General", 50 )
                  end

                  if !Empty( ::oDbfCliGst:cDpp )
                     ::oDbfFacTGst:cDpp        := ::oDbfCliGst:cDpp
                  else
                     ::oDbfFacTGst:cDpp        := Padr( "Pronto pago", 50 )
                  end

                  ::oDbfFacTGst:lRecargo       := ::oDbfCliGst:lReq
                  ::oDbfFacTGst:nRegIva        := ::oDbfCliGst:nRegIva

               else
                  ::oDbfFacTGst:cNomCli        := UPPER( ::oDbfFacTFac:NombreF )
                  ::oDbfFacTGst:cDirCli        := ::oDbfFacTFac:DireccionF
                  ::oDbfFacTGst:cPobCli        := ::oDbfFacTFac:CiudadF
                  ::oDbfFacTGst:cDniCli        := ::oDbfFacTFac:cif
                  ::oDbfFacTGst:cDtoEsp        := Padr( "General", 50 )
                  ::oDbfFacTGst:cDpp           := Padr( "Pronto pago", 50 )
            end

            ::oDbfCliGst:OrdSetFocus( nOrdAnt )

            ::oDbfFacTGst:Save()

            ::aMtrIndices[ 5 ]:Set( ::oDbfFacTFac:Recno() )

            ::oDbfFacTFac:Skip()

         end

         ::aMtrIndices[ 5 ]:SetTotal( ::oDbfAlbLFac:LastRec() )

         ::oDbfAlbLFac:GoTop()
         while !( ::oDbfAlbLFac:eof() )

            if Left( ::oDbfAlbLFac:RfaLin, 1 ) == "F"

               ::oDbfFacLGst:Append()

               ::oDbfFacLGst:cSerie      := "A"
               ::oDbfFacLGst:nNumFac     := Val( SubStr( ::oDbfAlbLFac:RfaLin, 5, 7 ) )
               ::oDbfFacLGst:cSufFac     := Space( 2 )
               ::oDbfFacLGst:cRef        := ::oDbfAlbLFac:Codigo
               ::oDbfFacLGst:cDetalle    := ::oDbfAlbLFac:Concepto
               ::oDbfFacLGst:nPreUnit    := ::oDbfAlbLFac:Precio
               ::oDbfFacLGst:nDto        := ::oDbfAlbLFac:Descuento
               ::oDbfFacLGst:nIva        := ::oDbfAlbLFac:Iva
               ::oDbfFacLGst:nCanEnt     := 1
               ::oDbfFacLGst:nUniCaja    := ::oDbfAlbLFac:Cantidad
               ::oDbfFacLGst:dFecha      := ::oDbfAlbLFac:Fecha
               ::oDbfFacLGst:cAlmLin     := oUser():cAlmacen()

               ::oDbfArtGst:GoTop()
               if ::oDbfArtGst:Seek( ::oDbfAlbLFac:Codigo )
                  ::oDbfFacLGst:nCtlStk  := ::oDbfArtGst:nCtlStock
                  ::oDbfFacLGst:nCosDiv  := ::oDbfArtGst:pCosto
                  ::oDbfFacLGst:lIvaLin  := ::oDbfArtGst:lIvaInc
               end

               ::oDbfFacLGst:Save()

            end

            ::aMtrIndices[ 5 ]:Set( ::oDbfAlbLFac:Recno() )

            ::oDbfAlbLFac:Skip()

         end

         ::aMtrIndices[ 5 ]:SetTotal( ::oDbfFacTGst:LastRec() )

         ::oDbfFacTGst:GoTop()
         while !( ::oDbfFacTGst:eof() )

            GenPgoFacCli( ::oDbfFacTGst:cSerie + Str( ::oDbfFacTGst:nNumFac ) + ::oDbfFacTGst:cSufFac, ::oDbfFacTGst:cAlias, ::oDbfFacLGst:cAlias, ::oDbfFacPGst:cAlias, ::oDbfAntTGst:cAlias, ::oDbfCliGst:cAlias, ::oDbfPgo:cAlias, ::oDbfDiv:cAlias, ::oDbfIva:cAlias, ,.F. )

            ::aMtrIndices[ 5 ]:Set( ::oDbfFacTGst:Recno() )

            ::oDbfFacTGst:Skip()

         end

      end

      ::CloseFiles()

      msgInfo( "Traspaso realizado con éxito.", "Bienvenido a " + "Gestool" + Space( 1 ) + "2K13" )

      ::oDlg:Enable()
      ::oDlg:end()

   else
      MsgStop( "Error al abrir los ficheros" )
   end

RETURN ( Self )




FUNCTION ImpFacCom( oMenuItem, oWnd )

   local oImpFacCom
   local nLevel   := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return ( nil )
   end

   oImpFacCom     := TImpFacCom():New():Resource()

RETURN nil

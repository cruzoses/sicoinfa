#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TPrvPgo.prg"
_HB_CLASS TPrvPgo ; UTILITY FUNCTION TPrvPgo(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TPrvPgo" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER CreateFields(); IIF( .F., s_oClass:ModMethod( "CreateFields", @TPrvPgo_CreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateFields", @TPrvPgo_CreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AnuPgoFields(); IIF( .F., s_oClass:ModMethod( "AnuPgoFields", @TPrvPgo_AnuPgoFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AnuPgoFields", @TPrvPgo_AnuPgoFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AcuCreate(); IIF( .F., s_oClass:ModMethod( "AcuCreate", @TPrvPgo_AcuCreate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AcuCreate", @TPrvPgo_AcuCreate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPed( lAcumula); IIF( .F., s_oClass:ModMethod( "AddPed", @TPrvPgo_AddPed(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPed", @TPrvPgo_AddPed(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddAlb( lAcumula); IIF( .F., s_oClass:ModMethod( "AddAlb", @TPrvPgo_AddAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlb", @TPrvPgo_AddAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddFac( lAcumula); IIF( .F., s_oClass:ModMethod( "AddFac", @TPrvPgo_AddFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFac", @TPrvPgo_AddFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER IncluyeCero(); IIF( .F., s_oClass:ModMethod( "IncluyeCero", @TPrvPgo_IncluyeCero(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "IncluyeCero", @TPrvPgo_IncluyeCero(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TPrvPgo ;



UTILITY STATIC function TPrvPgo_CreateFields() ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo


   ::AddField ( "cCodPgo", "C",  2, 0, {|| "" },         "Pgo.",          .F., "Pgo.",                3, .F. )
   ::AddField ( "cNomPgo", "C", 40, 0, {|| "@!" },       "Forma de pago", .F., "Formas de pago",     40, .F. )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },       "Art.",          .F., "Cod. artículo",      14, .F. )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },       "Artículo",      .F., "Artículo",           40, .F. )
   ::FldPropiedades()
   ::FldProveedor()
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },   cNombreCajas(),  .F., cNombreCajas(),       12, .T. )
   ::AddField ( "nUniDad", "N", 16, 6, {|| MasUnd() },   cNombreUnidades(),.F., cNombreUnidades(),   12, .T. )
   ::AddField ( "nNumUni", "N", 16, 6, {|| MasUnd() },   "Tot. " + cNombreUnidades(),     .T., "Total " + cNombreUnidades(),     12, .T. )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicImp },  "Precio",        .T., "Precio",             12, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },  "Base",          .T., "Base",               12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },   "Tot. peso",     .F., "Total peso",         12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicImp },  "Pre. Kg.",      .F., "Precio kilo",        12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },   "Tot. volumen",  .F., "Total volumen",      12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },  "Pre. vol.",     .F., "Precio volumen",     12, .F. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },  cImp(),        .T., cImp(),             12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },  "Total",         .T., "Total",              12, .T. )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },       "Doc.",          .T., "Documento",           8, .F. )
   ::AddField ( "cTipDoc", "C", 20, 0, {|| "@!" },       "Tipo",          .F., "Tipo de documento",  10, .F. )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },       "Fecha",         .T., "Fecha",              10, .F. )

RETURN ( Self )



UTILITY STATIC function TPrvPgo_AnuPgoFields() ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo


   ::AddField ( "cCodPgo", "C",  2, 0, {|| "" },           "Pgo.",            .T., "Pgo.",                        3 )
   ::AddField ( "cNomPgo", "C", 40, 0, {|| "@!" },         "Forma de pago",   .T., "Formas de pago",             40 )
   ::AddField ( "nImpEne", "N", 16, 6, {|| ::cPicOut },    "Ene",             .T., "Enero",                      12 )
   ::AddField ( "nImpFeb", "N", 16, 6, {|| ::cPicOut },    "Feb",             .T., "Febrero",                    12 )
   ::AddField ( "nImpMar", "N", 16, 6, {|| ::cPicOut },    "Mar",             .T., "Marzo",                      12 )
   ::AddField ( "nImpAbr", "N", 16, 6, {|| ::cPicOut },    "Abr",             .T., "Abril",                      12 )
   ::AddField ( "nImpMay", "N", 16, 6, {|| ::cPicOut },    "May",             .T., "Mayo",                       12 )
   ::AddField ( "nImpJun", "N", 16, 6, {|| ::cPicOut },    "Jun",             .T., "Junio",                      12 )
   ::AddField ( "nImpJul", "N", 16, 6, {|| ::cPicOut },    "Jul",             .T., "Julio",                      12 )
   ::AddField ( "nImpAgo", "N", 16, 6, {|| ::cPicOut },    "Ago",             .T., "Agosto",                     12 )
   ::AddField ( "nImpSep", "N", 16, 6, {|| ::cPicOut },    "Sep",             .T., "Septiembre",                 12 )
   ::AddField ( "nImpOct", "N", 16, 6, {|| ::cPicOut },    "Oct",             .T., "Octubre",                    12 )
   ::AddField ( "nImpNov", "N", 16, 6, {|| ::cPicOut },    "Nov",             .T., "Noviembre",                  12 )
   ::AddField ( "nImpDic", "N", 16, 6, {|| ::cPicOut },    "Dic",             .T., "Diciembre",                  12 )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },    "Tot",             .T., "Total",                      12 )

RETURN ( self )



UTILITY STATIC function TPrvPgo_AcuCreate() ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo

   ::AddField( "cCodPgo", "C",  2, 0, {|| "" },             "Pgo.",           .T., "Pgo."                 ,  3, .F. )
   ::AddField( "cNomPgo", "C", 40, 0, {|| "@!" },           "Forma de pago",  .T., "Formas de pago"       , 40, .F. )
   ::AddField( "nNumUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),.T., cNombreUnidades()      , 12, .T. )
   ::AddField( "nImpArt", "N", 16, 6, {|| ::cPicImp },      "Precio",         .F., "Precio"               , 12, .F. )
   ::AddField( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",           .T., "Base"                 , 12, .T. )
   ::AddField( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",      .F., "Total peso"           , 12, .T. )
   ::AddField( "nPreKgr", "N", 16, 6, {|| ::cPicImp },      "Pre. Kg.",       .F., "Precio kilo"          , 12, .F. )
   ::AddField( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",   .F., "Total volumen"        , 12, .T. )
   ::AddField( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",      .F., "Precio volumen"       , 12, .F. )
   ::AddField( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Pre. Med.",      .T., "Precio medio"         , 12, .F. )
   ::AddField( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      "Tot. " + cImp(),    .T., "Total " + cImp()         , 12, .T. )
   ::AddField( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",          .T., "Total"                , 12, .T. )

RETURN ( self )



UTILITY STATIC function TPrvPgo_AddPed( lAcumula) ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPedPrvT:cCodPgo )

      ::oDbf:Append()

      ::oDbf:cCodPgo    := ::oPedPrvT:cCodPgo
      ::oDbf:cNomPgo    := cNbrFPago( ::oPedPrvT:cCodPgo, ::oDbfFpg )
      ::oDbf:nNumUni    := nTotNPedPrv( ::oPedPrvL )
      ::oDbf:nImpArt    := nTotUPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPedPrvL:cRef, nTotNPedPrv( ::oPedPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula

         ::AddProveedor( ::oPedPrvT:cCodPrv )
         ::oDbf:cCodArt := ::oPedPrvL:cRef
         ::oDbf:cNomArt := ::oPedPrvL:cDetalle
         ::oDbf:cCodPr1 := ::oPedPrvL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oPedPrvL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oPedPrvL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oPedPrvL:cCodPr2 )
         ::oDbf:cValPr1 := ::oPedPrvL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oPedPrvL:cCodPr1 + ::oPedPrvL:cValPr1 )
         ::oDbf:cValPr2 := ::oPedPrvL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oPedPrvL:cCodPr2 + ::oPedPrvL:cValPr2 )
         ::oDbf:nNumCaj := ::oPedPrvL:nCanPed
         ::oDbf:nUniDad := ::oPedPrvL:nUniCaja
         ::oDbf:cDocMov := lTrim( ::oPedPrvL:cSerPed ) + "/" + lTrim ( Str( ::oPedPrvL:nNumPed ) ) + "/" + lTrim ( ::oPedPrvL:cSufPed )
         ::oDbf:dFecMov := ::oPedPrvT:dFecPed

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPedPrv( ::oPedPrvL )
      ::oDbf:nImpArt    += nTotUPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPedPrvL:cRef, nTotNPedPrv( ::oPedPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TPrvPgo_AddAlb( lAcumula) ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oAlbPrvT:cCodPgo )

      ::oDbf:Append()

      ::oDbf:cCodPgo    := ::oAlbPrvT:cCodPgo
      ::oDbf:cNomPgo    := cNbrFPago( ::oAlbPrvT:cCodPgo, ::oDbfFpg )
      ::oDbf:nNumUni    := nTotNAlbPrv( ::oAlbPrvL )
      ::oDbf:nImpArt    := nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula

         ::AddProveedor( ::oAlbPrvT:cCodPrv )
         ::oDbf:cCodArt := ::oAlbPrvL:cRef
         ::oDbf:cNomArt := ::oAlbPrvL:cDetalle
         ::oDbf:cCodPr1 := ::oAlbPrvL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oAlbPrvL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oAlbPrvL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oAlbPrvL:cCodPr2 )
         ::oDbf:cValPr1 := ::oAlbPrvL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oAlbPrvL:cCodPr1 + ::oAlbPrvL:cValPr1 )
         ::oDbf:cValPr2 := ::oAlbPrvL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oAlbPrvL:cCodPr2 + ::oAlbPrvL:cValPr2 )
         ::oDbf:nNumCaj := ::oAlbPrvL:nCanEnt
         ::oDbf:nUniDad := ::oAlbPrvL:nUniCaja
         ::oDbf:cDocMov := ::oAlbPrvL:cSerAlb + "/" + lTrim ( Str( ::oAlbPrvL:nNumAlb ) ) + "/" + lTrim ( ::oAlbPrvL:cSufAlb )
         ::oDbf:dFecMov := ::oAlbPrvT:dFecAlb

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNAlbPrv( ::oAlbPrvL )
      ::oDbf:nImpArt    += nTotUAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oAlbPrvL:cRef, nTotNAlbPrv( ::oAlbPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TPrvPgo_AddFac( lAcumula) ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacPrvT:cCodPago )

      ::oDbf:Append()

      ::oDbf:cCodPgo    := ::oFacPrvT:cCodPago
      ::oDbf:cNomPgo    := cNbrFPago( ::oFacPrvT:cCodPago, ::oDbfFpg )
      ::oDbf:nNumUni    := nTotNFacPrv( ::oFacPrvL )
      ::oDbf:nImpArt    := nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nIvaTot    := nIvaLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .F. )

      if !lAcumula

         ::AddProveedor( ::oFacPrvT:cCodPrv )
         ::oDbf:cCodArt := ::oFacPrvL:cRef
         ::oDbf:cNomArt := ::oFacPrvL:cDetalle
         ::oDbf:cCodPr1 := ::oFacPrvL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacPrvL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacPrvL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacPrvL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacPrvL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacPrvL:cCodPr1 + ::oFacPrvL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacPrvL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacPrvL:cCodPr2 + ::oFacPrvL:cValPr2 )
         ::oDbf:nNumCaj := ::oFacPrvL:nCanEnt
         ::oDbf:nUniDad := ::oFacPrvL:nUniCaja
         ::oDbf:cDocMov := ::oFacPrvL:cSerFac + "/" + lTrim ( Str( ::oFacPrvL:nNumFac ) ) + "/" + lTrim ( ::oFacPrvL:cSufFac )
         ::oDbf:dFecMov := ::oFacPrvT:dFecFac

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacPrv( ::oFacPrvL )
      ::oDbf:nImpArt    += nTotUFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nIvaLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacPrvL:cRef, nTotNFacPrv( ::oFacPrvL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



 UTILITY STATIC function TPrvPgo_IncluyeCero() ; local Self AS CLASS TPrvPgo := QSelf() AS CLASS TPrvPgo





   ::oDbfFpg:GoTop()
   while !::oDbfFpg:Eof()


      if ( ::lAllFpg .OR. ( ::oDbfFpg:cCodPago >= ::cFpgDes .AND. ::oDbfFpg:cCodPago <= ::cFpgHas ) ) .AND. !::oDbf:Seek( ::oDbfFpg:cCodPago )

         ::oDbf:Append()
         ::oDbf:Blank()
         ::oDbf:cCodPgo    := ::oDbfFpg:cCodPago
         ::oDbf:cNomPgo    := ::oDbfFpg:cDesPago
         ::oDbf:Save()

      end

      ::oDbfFpg:Skip()

   end

RETURN ( self )

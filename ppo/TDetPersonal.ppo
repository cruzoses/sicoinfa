#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TDetPersonal.prg"
_HB_CLASS TDetPersonal ; UTILITY FUNCTION TDetPersonal(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TDetPersonal" , {TDet():classh} ) ) ; ;

   _HB_MEMBER { oGetTotalTime} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetTotalTime" }, .F., .F. ), )
   _HB_MEMBER { cGetTotalTime} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cGetTotalTime" }, .F., .F. ), )
   _HB_MEMBER { cTiempoEmpleado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cTiempoEmpleado" }, .F., .F. ), )
   _HB_MEMBER { cTmpEmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cTmpEmp" }, .F., .F. ), )
   _HB_MEMBER { oTmpEmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTmpEmp" }, .F., .F. ), )

   _HB_MEMBER { oBrwHorasTrabajador} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwHorasTrabajador" }, .F., .F. ), )

   _HB_MEMBER { lAppendTrabajador} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lAppendTrabajador" }, .F., .F. ), )

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TDetPersonal_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TDetPersonal_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TDetPersonal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TDetPersonal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TDetPersonal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TDetPersonal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TDetPersonal_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TDetPersonal_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode, lLiteral); IIF( .F., s_oClass:ModMethod( "Resource", @TDetPersonal_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TDetPersonal_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SaveDetails(); IIF( .F., s_oClass:ModMethod( "SaveDetails", @TDetPersonal_SaveDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SaveDetails", @TDetPersonal_SaveDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER DeleteDetails(); IIF( .F., s_oClass:ModMethod( "DeleteDetails", @TDetPersonal_DeleteDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DeleteDetails", @TDetPersonal_DeleteDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SaveLines(); IIF( .F., s_oClass:ModMethod( "SaveLines", @TDetPersonal_SaveLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SaveLines", @TDetPersonal_SaveLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lValidTrabajador( oGetTra, oGetSec, oGetOpe, nMode); IIF( .F., s_oClass:ModMethod( "lValidTrabajador", @TDetPersonal_lValidTrabajador(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValidTrabajador", @TDetPersonal_lValidTrabajador(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cTotTime( oDbf); IIF( .F., s_oClass:ModMethod( "cTotTime", @TDetPersonal_cTotTime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cTotTime", @TDetPersonal_cTotTime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER lTotTime( oDbf); IIF( .F., s_oClass:ModMethod( "lTotTime", @TDetPersonal_lTotTime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lTotTime", @TDetPersonal_lTotTime(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotal( oDbf); IIF( .F., s_oClass:ModMethod( "nTotal", @TDetPersonal_nTotal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotal", @TDetPersonal_nTotal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER cTotal( oDbf); IIF( .F., s_oClass:ModMethod( "cTotal", @TDetPersonal_cTotal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cTotal", @TDetPersonal_cTotal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotalTra( oDbf, oDbfHor); IIF( .F., s_oClass:ModMethod( "nTotalTra", @TDetPersonal_nTotalTra(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotalTra", @TDetPersonal_nTotalTra(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lTiempoEmpleado(); IIF( .F., s_oClass:ModMethod( "lTiempoEmpleado", @TDetPersonal_lTiempoEmpleado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lTiempoEmpleado", @TDetPersonal_lTiempoEmpleado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TDetPersonal ;



UTILITY STATIC function TDetPersonal_DefineFiles( cPath, cVia, lUniqueName, cFileName) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local oDbf

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( lUniqueName == nil, lUniqueName := .F., ) ;
   IIF( cFileName == nil, cFileName := "ProPer", ) ;
   IIF( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "personal", ( cPath ) )

      oDbf:AddField( "cSerOrd", "C", 01, 0,,,,, "Código", .F.,, .F., {} )
      oDbf:AddField( "nNumOrd", "N", 09, 0,,,,, "Número", .F.,, .F., {} )
      oDbf:AddField( "cSufOrd", "C", 02, 0,,,,, "Sufijo", .F.,, .F., {} )
      oDbf:AddField( "cCodTra", "C", 05, 0,,,,, "Trabajador", .F.,, .F., {} )
      oDbf:AddField( "cCodSec", "C", 03, 0,,,,, "Sección", .F.,, .F., {} )
      oDbf:AddField( "cCodOpe", "C", 03, 0,,,,, "Operación", .F.,, .F., {} )
      oDbf:AddField( "dFecIni", "D", 08, 0,,,,, "Fecha inicio", .F.,, .F., {} )
      oDbf:AddField( "dFecFin", "D", 08, 0,,,,, "Fecha fin", .F.,, .F., {} )
      oDbf:AddField( "cHorIni", "C", 05, 0,,,,, "Hora inicio", .F.,, .F., {} )
      oDbf:AddField( "cHorFin", "C", 05, 0,,,,, "Hora fin", .F.,, .F., {} )

      oDbf:AddIndex( "cNumOrd", ( cFileName ), "cSerOrd + Str( nNumOrd, 9 ) + cSufOrd",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodTra", ( cFileName ), "cCodTra",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodSec", ( cFileName ), "cCodSec",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodOpe", ( cFileName ), "cCodOpe",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



UTILITY STATIC function TDetPersonal_OpenFiles(lExclusive) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local lOpen          := .T.
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::oDbf            := ::DefineFiles()
   end

   ::oDbf:Activate( .F., !lExclusive )

   ::bOnPreSaveDetail   := {|| ::SaveDetails() }
   ::bOnPreDelete       := {|| ::DeleteDetails() }

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TDetPersonal_CloseFiles() ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
      ::oDbf      := nil
   end

RETURN .T.



UTILITY STATIC function TDetPersonal_Resource( nMode) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local oDlg
   local oGetTra
   local oSayTra
   local cSayTra
   local oGetSec
   local oSaySec
   local cSaySec
   local oGetOpe
   local oSayOpe
   local cSayOpe
   local nOrdAnt
   local oFecIni
   local oFecFin
   local oHorIni
   local oHorFin

   nOrdAnt                 := ::oParent:oDetHorasPersonal:oDbfVir:OrdSetFocus( "cCodTra" )

   if nMode == 1

      ::oDbfVir:dFecIni    := ::oParent:oDbf:dFecOrd
      ::oDbfVir:dFecFin    := ::oParent:oDbf:dFecFin
      ::oDbfVir:cHorIni    := ::oParent:oDbf:cHorIni
      ::oDbfVir:cHorFin    := ::oParent:oDbf:cHorFin
      ::oDbfVir:cCodOpe    := ::oParent:oDbf:cCodOpe

      while ::oParent:oDetHorasPersonal:oDbfVir:Seek( Space( 5 ) ) .AND. !::oParent:oDetHorasPersonal:oDbfVir:Eof()
         ::oParent:oDetHorasPersonal:oDbfVir:Delete()
      end

      ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( Space( 5 ) )

      ::lAppendTrabajador  := .F.

   else

      ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( ::oDbfVir:cCodTra )

   end

   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()

   ::lTiempoEmpleado()





   cSayTra                 := oRetFld( ::oDbfVir:cCodTra, ::oParent:oOperario:oDbf )
   cSaySec                 := oRetFld( ::oDbfVir:cCodSec, ::oParent:oSeccion:oDbf )
   cSayOpe                 := oRetFld( ::oDbfVir:cCodOpe, ::oParent:oOperacion:oDbf )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "partes de personal", "LPersonal",, .F.,,,,,, .F.,,,,,, .F., )









      oGetTra := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodTra, ::oDbfVir:cCodTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetTra:bHelp  := {|| ::oParent:oOperario:Buscar( oGetTra ) }
      oGetTra:bValid := {|| ::lValidTrabajador( oGetTra, oGetSec, oGetOpe, oSayTra, nMode ) }




      oSayTra := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayTra, cSayTra:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oGetSec := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:cCodSec, ::oDbfVir:cCodSec:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetSec:bHelp  := {|| ::oParent:oSeccion:Buscar( oGetSec ) }
      oGetSec:bValid := {|| ::oParent:oSeccion:Existe( oGetSec, oSaySec, "cDesSec", .T., .T., "0" ) }




      oSaySec := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSaySec, cSaySec:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oGetOpe := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:cCodOpe, ::oDbfVir:cCodOpe:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

      oGetOpe:bHelp  := {|| ::oParent:oOperacion:Buscar( oGetOpe ) }
      oGetOpe:bValid := {|| ::oParent:oOperacion:Existe( oGetOpe, oSayOpe, "cDesOpe", .T., .T., "0" ) }




      oSayOpe := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSayOpe, cSayOpe:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oFecIni := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:dFecIni, ::oDbfVir:dFecIni:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecIni:bValid    := {|| ::lTiempoEmpleado() }
         oFecIni:bChange   := {|| ::lTiempoEmpleado() }





      oFecFin := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbfVir:dFecFin, ::oDbfVir:dFecFin:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

         oFecFin:bValid    := {|| ::lTiempoEmpleado() }
         oFecFin:bChange   := {|| ::lTiempoEmpleado() }









      oHorIni := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, ::oDbfVir:cHorIni, ::oDbfVir:cHorIni:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorIni ) )}, {||  ( DwTime( oHorIni ) )},,,, nil,,, )

         oHorIni:bValid    := {|| if( ValidTime( oHorIni ), ::lTiempoEmpleado(), .F. ) }
         oHorIni:bChange   := {|| ::lTiempoEmpleado() }









      oHorFin := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, ::oDbfVir:cHorFin, ::oDbfVir:cHorFin:= u ) }, oDlg,, "@R 99:99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpTime( oHorFin ) )}, {||  ( DwTime( oHorFin ) )},,,, nil,,, )

         oHorFin:bValid    := {|| if( ValidTime( oHorFin ), ::lTiempoEmpleado(), .F. ) }
         oHorFin:bChange   := {|| ::lTiempoEmpleado() }





      ::oTmpEmp := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cTmpEmp, ::cTmpEmp:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









        TButton():ReDefine( 500, {||( ::oParent:oDetHorasPersonal:Append( ::oBrwHorasTrabajador ), ::oBrwHorasTrabajador:Refresh() )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 501, {||( ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 502, {||( ::oParent:oDetHorasPersonal:Zoom() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 503, {||( ::oParent:oDetHorasPersonal:Del( ::oBrwHorasTrabajador ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )

      ::oBrwHorasTrabajador                 := TXBrowse():New( oDlg )

      ::oBrwHorasTrabajador:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwHorasTrabajador:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrwHorasTrabajador:SetoDbf( ::oParent:oDetHorasPersonal:oDbfVir )

      ::oBrwHorasTrabajador:nMarqueeStyle   := 6

      ::oBrwHorasTrabajador:CreateFromResource( 200 )

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| ::oParent:oDetHorasPersonal:oDbfVir:cCodHra }
         :nWidth           := 60
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Tipo de hora"
         :bStrData         := {|| oRetFld( ::oParent:oDetHorasPersonal:oDbfVir:cCodHra, ::oParent:oHoras:oDbf, , "cCodHra" ) }
         :nWidth           := 200
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Horas"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:nNumHra, "99.99" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Precio"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:nCosHra, ::oParent:cPouDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrwHorasTrabajador:AddCol() )
         :cHeader          := "Total"
         :bStrData         := {|| Trans( ::oParent:oDetHorasPersonal:oDbfVir:nNumHra * ::oParent:oDetHorasPersonal:oDbfVir:nCosHra, ::oParent:cPorDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if nMode <> 3
         ::oBrwHorasTrabajador:bLDblClick   := {|| ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) }
      else
         ::oBrwHorasTrabajador:bLDblClick   := {|| ::oParent:oDetHorasPersonal:Zoom() }
      end





      TButton():ReDefine( 1, {||( if( ::SaveLines( oGetTra, oSayTra, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 113, {|| ::oParent:oDetHorasPersonal:Append( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 114, {|| ::oParent:oDetHorasPersonal:Edit( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 115, {|| ::oParent:oDetHorasPersonal:Del( ::oBrwHorasTrabajador ) } )
         oDlg:AddFastKey( 116, {|| if( ::SaveLines( oGetTra, oSayTra, nMode ), oDlg:end( 1 ), ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   ::oParent:oDetHorasPersonal:oDbfVir:OrdClearScope()
   ::oParent:oDetHorasPersonal:oDbfVir:OrdSetFocus( nOrdAnt )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TDetPersonal_SaveLines( oGetTra, oSayTra, nMode) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal






   if nMode == 1

      if !::oParent:oOperario:Existe( oGetTra, oSayTra, "cNomTra", .F., .T., "0" )
         msgStop( "El trabajador " + oGetTra:VarGet() + " no existe en la base de datos." )
         Return .F.
      end

      if ::oDbfVir:SeekBack( oGetTra:VarGet(), "cCodTra" )
         msgStop( "Ya existe un parte para el trabajador " + oGetTra:VarGet() + "." )
         oGetTra:SetFocus()
         Return .F.
      end

   end

RETURN ( .T. )



UTILITY STATIC function TDetPersonal_lValidTrabajador( oGetTra, oGetSec, oGetOpe, oSayTra, nMode) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nOrdAnt
   local cCodTra









   if Empty( oGetTra:VarGet() )
      Return .T.
   end

   if !::oParent:oOperario:Existe( oGetTra, oSayTra, "cNomTra", .F., .T., "0" )
      msgStop( "El trabajador " + oGetTra:VarGet() + " no existe en la base de datos." )
      Return .F.
   end

   cCodTra              := oGetTra:VarGet()

   if ::oDbfVir:SeekBack( cCodTra, "cCodTra" )
      msgStop( "Ya existe un parte para el trabajador " + cCodTra + "." )
      Return .F.
   end





   oGetTra:Disable()

   ::oParent:oDetHorasPersonal:oDbfVir:OrdClearScope()
   ::oParent:oDetHorasPersonal:oDbfVir:OrdScope( cCodTra )

   nOrdAnt              := ::oParent:oDetHoras:oDbf:OrdSetFocus( "cCodTra" )

   if nMode == 1





      if ::oParent:oOperario:oDbf:Seek( cCodTra )

         oGetSec:cText( ::oParent:oOperario:oDbf:cCodSec )
         oGetSec:lValid()

      end

      if ::oParent:oDetHoras:oDbf:Seek( cCodTra )

         while ::oParent:oDetHoras:oDbf:cCodTra == cCodTra .AND. !::oParent:oDetHoras:oDbf:Eof()

            if ::oParent:oDetHoras:oDbf:lDefHor

               ::oParent:oDetHorasPersonal:oDbfVir:Append()

               ::oParent:oDetHorasPersonal:oDbfVir:cCodTra := cCodTra
               ::oParent:oDetHorasPersonal:oDbfVir:cCodHra := ::oParent:oDetHoras:oDbf:cCodHra
               ::oParent:oDetHorasPersonal:oDbfVir:nNumHra := ::cTiempoEmpleado
               ::oParent:oDetHorasPersonal:oDbfVir:nCosHra := ::oParent:oDetHoras:oDbf:nCosHra

               ::oParent:oDetHorasPersonal:oDbfVir:Save()

            end

            ::oParent:oDetHoras:oDbf:Skip()

         end

      end

   end

   ::oParent:oDetHoras:oDbf:OrdSetFocus( nOrdAnt )

   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()
   ::oParent:oDetHorasPersonal:oDbfVir:GoTop()

   ::oBrwHorasTrabajador:Refresh()

RETURN ( .T. )



UTILITY STATIC function TDetPersonal_cTotTime( oDbf) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nHoras
   local nMinutos
   local nTotalMinutos

   IIF( oDbf == nil, oDbf := ::oDbf, ) ;

   nTotalMinutos     := nElapTime( oDbf:cIniOpe, oDbf:cFinOpe )

   nHoras            := Int( nTotalMinutos / 60 )
   nMinutos          := Mod( nTotalMinutos, 60 )

RETURN ( StrZero( nHoras, 2 ) + StrZero( nMinutos, 2 ) )



UTILITY STATIC function TDetPersonal_lTotTime( oDbf) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   IIF( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( ::oGetTotalTime:cText( ::cTotTime( oDbf ) ), .T. )



UTILITY STATIC function TDetPersonal_nTotal( cCodTra, oDbf) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nTotal   := 0

   IIF( oDbf == nil, oDbf := ::oDbf, ) ;

   oDbf:GetStatus()

   oDbf:OrdSetFocus( "cCodTra" )

   if oDbf:Seek( cCodTra )
      while cCodTra == oDbf:cCodTra .AND. !oDbf:Eof()
         nTotal      += oDbf:nNumHra * oDbf:nCosHra
         oDbf:Skip()
      end
   end

   oDbf:SetStatus()

RETURN ( nTotal )



UTILITY STATIC function TDetPersonal_cTotal( cCodTra, oDbf) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   IIF( oDbf == nil, oDbf := ::oDbf, ) ;

RETURN ( Trans( ::nTotal( cCodTra, oDbf ), ::oParent:cPorDiv ) )



UTILITY STATIC function TDetPersonal_SaveDetails() ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   ::oDbfVir:cSerOrd := ::oParent:oDbf:cSerOrd
   ::oDbfVir:nNumOrd := ::oParent:oDbf:nNumOrd
   ::oDbfVir:cSufOrd := ::oParent:oDbf:cSufOrd

RETURN ( Self )



UTILITY STATIC function TDetPersonal_DeleteDetails() ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   while ::oParent:oDetHorasPersonal:oDbfVir:Seek( Space( 5 ) )
      ::oParent:oDetHorasPersonal:oDbfVir:Delete()
   end

RETURN ( Self )



UTILITY STATIC function TDetPersonal_lTiempoEmpleado() ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   ::cTiempoEmpleado    := nTiempoEntreFechas( ::oDbfVir:dFecIni, ::oDbfVir:dFecFin, ::oDbfVir:cHorIni, ::oDbfVir:cHorFin )
   ::cTmpEmp            := cFormatoDDHHMM( ::cTiempoEmpleado )

   if ::oTmpEmp <> nil
      ::oTmpEmp:cText( ::cTmpEmp )
      ::oTmpEmp:Refresh()
   end

RETURN .T.



UTILITY STATIC function TDetPersonal_nTotalTra( oDbf, oDbfHor, lRound) ; local Self AS CLASS TDetPersonal := QSelf() AS CLASS TDetPersonal

   local nTotal   := 0

   IIF( oDbf == nil, oDbf := ::oDbf, ) ;
   IIF( lRound == nil, lRound := .T., ) ;

   oDbf:GetStatus()

   oDbf:GoTop()

   while !oDbf:Eof()
      nTotal      += ::nTotal( oDbf:cCodTra, oDbfHor )
      oDbf:Skip()
   end

   oDbf:SetStatus()

RETURN ( Trans( if( lRound, Round( nTotal, ::oParent:nDorDiv ), nTotal ), ::oParent:cPorDiv ) )

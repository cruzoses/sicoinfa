#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfCaj.prg"
_HB_CLASS InfCaj ; UTILITY FUNCTION InfCaj(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfCaj" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfCaj} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfCaj" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cCajOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cCajOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cCajDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cCajDes" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lAllCaj} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lAllCaj" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfCaj_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfCaj_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @InfCaj_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @InfCaj_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @InfCaj_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @InfCaj_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfCaj_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfCaj_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfCaj_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfCaj_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfCaj ;



UTILITY STATIC function InfCaj_Create() ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   ::AddField( "CCODCAJ",      "C",  3, 0, {|| "" },   "Cod. Caj.",      .T., "Código de caja",          10, .F. )
   ::AddField( "CNOMCAJ",      "C", 30, 0, {|| "" },   "Nom. Caj.",      .T., "Nombre de la caja",       30, .F. )
   ::AddField( "CCAPCAJ",      "C",  3, 0, {|| "" },   "Captura",        .F., "Código de captura",       10, .F. )

   ::AddTmpIndex ( "CCODCAJ", "CCODCAJ" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function InfCaj_OpenFiles() ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfCaj := DbfServer( "CAJAS.DBF", ):NewOpen( "CAJAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfCaj:AddBag( "CAJAS.CDX" ) ; ::oDbfCaj:AddBag( ) ; ::oDbfCaj:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function InfCaj_CloseFiles() ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   if !Empty( ::oDbfCaj ) .AND. ::oDbfCaj:Used()
      ::oDbfCaj:End()
   end

   ::oDbfCaj  := nil


RETURN ( Self )



UTILITY STATIC function InfCaj_lResource( cFld) ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   local cSayCajOrg
   local cSayCajDes
   local oSayCajOrg
   local oSayCajDes
   local oCajOrg
   local oCajDes

   if !::StdResource( "INF_CAJ01" )
      return .F.
   end





   ::cCajOrg   := dbFirst( ::oDbfCaj, 1 )
   ::cCajDes   := dbLast(  ::oDbfCaj, 1 )
   cSayCajOrg  := dbFirst( ::oDbfCaj, 2 )
   cSayCajDes  := dbLast(  ::oDbfCaj, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllCaj, ::lAllCaj:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oCajOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cCajOrg, ::cCajOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllCaj )},, .F., .F.,,,,,, nil, "LUPA",, )

      oCajOrg:bValid   := {|| cCajas( oCajOrg, ::oDbfCaj:cAlias, oSayCajOrg ) }
      oCajOrg:bHelp    := {|| BrwCaj( oCajOrg, ::oDbfCaj:cAlias, oSayCajOrg ) }





   oSayCajOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayCajOrg, cSayCajOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oCajDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cCajDes, ::cCajDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllCaj )},, .F., .F.,,,,,, nil, "LUPA",, )

      oCajDes:bValid   := {|| cCajas( oCajDes, ::oDbfCaj:cAlias, oSayCajOrg ) }
      oCajDes:bHelp    := {|| BrwCaj( oCajDes, ::oDbfCaj:cAlias, oSayCajOrg ) }




   oSayCajDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayCajDes, cSayCajDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfCaj:Lastrec() )

   ::CreateFilter( aItmCaja(), ::oDbfCaj:cAlias )

RETURN .T.






UTILITY STATIC function InfCaj_lGenerate() ; local Self AS CLASS InfCaj := QSelf() AS CLASS InfCaj

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha : " + Dtoc( Date() ) }, {|| "Cajas : " + if( ::lAllCaj, "Todos", AllTrim( ::cCajOrg ) + " > " + AllTrim( ::cCajDes ) ) } }

   ::oDbfCaj:OrdSetFocus( "CCODCAJ" )

   ::oDbfCaj:GoTop()
   while !::lBreak .AND. !::oDbfCaj:Eof()

      if ( ::lAllCaj .OR. ( ::oDbfCaj:cCodCaj >= ::cCajOrg .AND. ::oDbfCaj:cCodCaj <= ::cCajDes ) )

         ::oDbf:Append()

         ::oDbf:cCodCaj   := ::oDbfCaj:cCodCaj
         ::oDbf:cNomCaj   := ::oDbfCaj:cNomCaj
         ::oDbf:cCapCaj   := ::oDbfCaj:cCapCaj

         ::oDbf:Save()

      end

      ::oDbfCaj:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfCaj:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tartalb.prg"
_HB_CLASS TInfArtAlb ; UTILITY FUNCTION TInfArtAlb(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfArtAlb" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS LOGIC lExcMov} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lExcMov" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oEstado} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oEstado" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oDbfTvta} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfTvta" }, .F., .F. ), )
   _HB_MEMBER {AS ARRAY aEstado} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", { "No facturado", "Facturado", "Todos" }, nScope + IIF( .F., 32, 0 ), { "aEstado" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfArtAlb_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfArtAlb_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfArtAlb_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfArtAlb_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfArtAlb_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfArtAlb_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfArtAlb_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfArtAlb_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfArtAlb_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfArtAlb_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfArtAlb ;



UTILITY STATIC function TInfArtAlb_Create() ; local Self AS CLASS TInfArtAlb := QSelf() AS CLASS TInfArtAlb

   ::AddField(  "CCODART", "C", 18, 0, {|| "@!" },            "Cod. Art.",    .F., "Código artículo" , 14 )
   ::AddField(  "CNOMART", "C",100, 0, {|| "@!" },            "Nom. Art.",    .F., "Nombre artículo" , 35 )
   ::AddField(  "CDOCMOV", "C", 18, 0, {|| "@!" },            "Albaran",      .T., "Albaran"         , 10 )
   ::AddField(  "DFECMOV", "D",  8, 0, {|| "@!" },            "Fecha",        .T., "Fecha"           ,  8 )
   ::AddField(  "NNUMCAJ", "N", 13, 6, {|| MasUnd() },        "Caj.",         .T., "Cajas"           , 12 )
   ::AddField(  "NUNIDAD", "N", 16, 6, {|| MasUnd() },        "Und.",         .T., "Unidades"        , 12 )
   ::AddField(  "NNUMUNI", "N", 13, 6, {|| MasUnd() },        "Tot. Und.",    .T., "Total unidades"  , 12 )
   ::AddField(  "NIMPART", "N", 13, 6, {|| ::cPicOut },       "Importe",      .T., "Importe"         , 12 )
   ::AddField(  "CTIPVEN", "C", 20, 0, {|| "@!" },            "Venta",        .T., "Tipo de venta"   , 10 )

   ::AddTmpIndex( "cCodArt", "cCodArt" )

   ::AddGroup( {|| ::oDbf:cCodArt }, {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( ::oDbf:cNomArt ) }, {||""} )

RETURN ( Self )



UTILITY STATIC function TInfArtAlb_OpenFiles() ; local Self AS CLASS TInfArtAlb := QSelf() AS CLASS TInfArtAlb

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oAlbCliT := DbfServer( "ALBCLIT.DBF", ):NewOpen( "ALBCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.CDX" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()
   ::oAlbCliL:SetOrder( "CREF" )

   ::oDbfTvta := DbfServer( "TVTA.DBF", ):NewOpen( "TVTA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfTvta:AddBag( "TVTA.CDX" ) ; ::oDbfTvta:AddBag( ) ; ::oDbfTvta:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TInfArtAlb_CloseFiles() ; local Self AS CLASS TInfArtAlb := QSelf() AS CLASS TInfArtAlb

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end

   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   if !Empty( ::oDbfTvta ) .AND. ::oDbfTvta:Used()
      ::oDbfTvta:End()
   end

RETURN ( Self )



UTILITY STATIC function TInfArtAlb_lResource( cFld) ; local Self AS CLASS TInfArtAlb := QSelf() AS CLASS TInfArtAlb

   local cEstado := "Todos"

   if !::StdResource( "INF_GEN10A" )
      return .F.
   end





   ::lDefArtInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   ::oDefExcInf( 204 )

   ::oDefExcImp( 205 )





   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, ::aEstado, ::oFld:aDialogs[1],,,,,,, .F.,,,,,, )

   ::CreateFilter( aItmArt(), ::oDbfArt )

RETURN ( Self )






UTILITY STATIC function TInfArtAlb_lGenerate() ; local Self AS CLASS TInfArtAlb := QSelf() AS CLASS TInfArtAlb

   local bValid   := {|| .T. }

   ::oDlg:Disable()

   ::oDbf:Zap()

   ::oDbfArt:GoTop()

   do case
      case ::oEstado:nAt == 1
         bValid   := {|| !::oAlbCliT:lFacturado }
      case ::oEstado:nAt == 2
         bValid   := {|| ::oAlbCliT:lFacturado }
   end




   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Artículo: " + ::cArtOrg         + " > " + ::cArtDes }, {|| "Estado  : " + ::aEstado[ ::oEstado:nAt ] } }

   WHILE !::oDbfArt:Eof()

      IF ::oDbfArt:Codigo >= ::cArtOrg .AND. ::oDbfArt:Codigo <= ::cArtDes

         IF ::oAlbCliL:Seek( ::oDbfArt:Codigo )

         WHILE ::oAlbCliL:cRef == ::oDbfArt:Codigo .AND. !::oAlbCliL:Eof()

            if ::oAlbCliT:Seek( ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb )







               if Eval ( bValid )                                                         .AND. ::oAlbCliT:dFecAlb >= ::dIniInf                                         .AND. ::oAlbCliT:dFecAlb <= ::dFinInf                                         .AND. ::oDbfArt:CODIGO >= ::cArtOrg                                           .AND. ::oDbfArt:CODIGO <= ::cArtDes                                           .AND. lChkSer( ::oAlbCliT:cSerAlb, ::aSer )                                   .AND. !( ::lExcCero .AND. ::oAlbCliL:NPREDIV == 0 )





                  ::oDbf:Append()

                  ::oDbf:CCODART    := ::oDbfArt:CODIGO
                  ::oDbf:CNOMART    := ::oDbfArt:NOMBRE
                  ::oDbf:NNUMCAJ    := ::oAlbCliL:nCanEnt
                  ::oDbf:NUNIDAD    := ::oAlbCliL:NUNICAJA
                  ::oDbf:NNUMUNI    := nTotNAlbCli( ::oAlbCliL )
                  ::oDbf:NIMPART    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:CDOCMOV    := Alltrim( ::oAlbCliL:CSERALB + "/" + Str( ::oAlbCliL:NNUMALB ) + "/" + ::oAlbCliL:CSUFALB )
                  ::oDbf:DFECMOV    := ::oAlbCliT:DFECALB

                  if ::oDbfTvta:Seek( ::oAlbCliL:cTipMov )
                     ::oDbf:cTipVen := ::oDbfTvta:cDesMov
                  end

                  ::oDbf:Save()

               end

            end

            ::oAlbCliL:Skip()

         end

         end

      end

      ::oDbfArt:Skip()
      ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )
   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

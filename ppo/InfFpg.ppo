#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfFpg.prg"
_HB_CLASS InfFpg ; UTILITY FUNCTION InfFpg(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfFpg" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfBnc} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfBnc" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfFpg_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfFpg_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @InfFpg_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @InfFpg_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @InfFpg_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @InfFpg_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfFpg_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfFpg_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfFpg_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfFpg_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfFpg ;



UTILITY STATIC function InfFpg_Create() ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   ::AddField( "CCODPAGO", "C", 2, 0, {|| "" },   "Cod.",        .T., "Código de la forma de pago",                    5, .F. )
   ::AddField( "CDESPAGO", "C",30, 0, {|| "" },   "Divisa",      .T., "Descripción de forma de pago",                 30, .F. )
   ::AddField( "CCODBNC",  "C", 4, 2, {|| "" },   "Cod. banco",  .F., "Código del banco de la forma de pago",         10, .F. )
   ::AddField( "CNOMBNC",  "C",50, 2, {|| "" },   "Banco",       .T., "Nombre del banco de la forma de pago",         35, .F. )
   ::AddField( "CTIPPGO",  "C",10, 0, {|| "" },   "Tip. Pgo.",   .T., "Tipo de la forma de pago",                     10, .F. )
   ::AddField( "NPCTCOM",  "N", 6, 2, {|| "" },   "% Comisión",  .F., "Porcentaje de comisión de la forma de pago",   10, .F. )
   ::AddField( "NPLAZOS",  "N", 3, 0, {|| "999" },"Plazos",      .T., "Números de plazos del aplazamiento",           10, .F. )
   ::AddField( "NPLAUNO",  "N", 3, 0, {|| "999" },"Día pago 1",  .T., "Días hasta el primer pago",                    10, .F. )
   ::AddField( "NDIAPLA",  "N", 3, 0, {|| "999" },"Días aplaz.", .T., "Días entre plazos",                            12, .F. )

   ::AddTmpIndex ( "CCODPAGO", "CCODPAGO" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function InfFpg_OpenFiles() ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfBnc := DbfServer( "BANCOS.DBF", ):NewOpen( "BANCOS.DBF",, ( cDriver() ),, ( cPatGrp() ), .F., .T., .F., .F. ) ; ::oDbfBnc:AddBag( "BANCOS.CDX" ) ; ::oDbfBnc:AddBag( ) ; ::oDbfBnc:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function InfFpg_CloseFiles() ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   if !Empty( ::oDbfBnc ) .AND. ::oDbfBnc:Used()
      ::oDbfBnc:End()
   end

   ::oDbfBnc := nil

RETURN ( Self )



UTILITY STATIC function InfFpg_lResource( cFld) ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   if !::StdResource( "INF_FPG01" )
      return .F.
   end

   ::oDefFpgInf( 70, 80, 90, 100, 60 )

   ::oMtrInf:SetTotal( ::oDbfFpg:Lastrec() )

   ::CreateFilter( aItmFPago(), ::oDbfFpg:cAlias )

RETURN .T.






UTILITY STATIC function InfFpg_lGenerate() ; local Self AS CLASS InfFpg := QSelf() AS CLASS InfFpg

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha         : " + Dtoc( Date() ) }, {|| "Forma de pago : " + if( ::lAllFpg, "Todas", AllTrim( ::cFpgDes ) + " > " + AllTrim( ::cFpgHas ) ) } }

   ::oDbfFpg:OrdSetFocus( "CCODPAGO" )

   ::oDbfFpg:GoTop()
   while !::lBreak .AND. !::oDbfFpg:Eof()

      if ( ::lAllFpg .OR. ( ::oDbfFpg:cCodPago >= ::cFpgDes .AND. ::oDbfFpg:cCodPago <= ::cFpgHas ) )

         ::oDbf:Append()

         ::oDbf:cCodPago  := ::oDbfFpg:cCodPago
         ::oDbf:cDesPago  := ::oDbfFpg:cDesPago
         ::oDbf:cCodBnc   := ::oDbfFpg:cCodBnc
         ::oDbf:cNomBnc   := oRetFld( ::oDbfFpg:cCodBnc, ::oDbfBnc, "cNomBnc" )

         if ::oDbfFpg:nTipPgo <= 1
            ::oDbf:cTipPgo   := "Efectivo"
         else
            ::oDbf:cTipPgo   := "Tarjeta"
         end

         ::oDbf:nPctCom   := ::oDbfFpg:nPctCom
         ::oDbf:nPlazos   := ::oDbfFpg:nPlazos
         ::oDbf:nPlaUno   := ::oDbfFpg:nPlaUno
         ::oDbf:nDiaPla   := ::oDbfFpg:nDiaPla

         ::oDbf:Save()

      end

      ::oDbfFpg:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfFpg:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

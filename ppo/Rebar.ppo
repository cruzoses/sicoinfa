#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 32 ".\Prg\Rebar.prg"
_HB_CLASS TReBar ; UTILITY FUNCTION TReBar(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TReBar" , {TControl():classh} ) ) ; ;

   _HB_MEMBER New( oWnd) AS CLASS TReBar; IIF( .F., s_oClass:ModMethod( "New", @TReBar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TReBar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Command( nWParam, nLParam); IIF( .F., s_oClass:ModMethod( "Command", @TReBar_Command(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Command", @TReBar_Command(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER InsertBand(oControl, cText); IIF( .F., s_oClass:ModInline( "InsertBand", {|Self,oControl, cText | Self, RBInsertBand( ::hWnd, oControl:hWnd, cText ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "InsertBand", {|Self,oControl, cText | Self, RBInsertBand( ::hWnd, oControl:hWnd, cText ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER DeleteBand(oControl, cText); IIF( .F., s_oClass:ModInline( "DeleteBand", {|Self,oControl, cText | Self, SendMessage( ::hWnd, (1024 +  2), 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "DeleteBand", {|Self,oControl, cText | Self, SendMessage( ::hWnd, (1024 +  2), 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER MinimizeBand(nBand); IIF( .F., s_oClass:ModInline( "MinimizeBand", {|Self,nBand | Self, SendMessage( ::hWnd, (1024 + 30), nBand - 1, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "MinimizeBand", {|Self,nBand | Self, SendMessage( ::hWnd, (1024 + 30), nBand - 1, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetBkColor(nColor); IIF( .F., s_oClass:ModInline( "SetBkColor", {|Self,nColor | Self, SendMessage( ::hWnd, (1024 + 19), 0, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetBkColor", {|Self,nColor | Self, SendMessage( ::hWnd, (1024 + 19), 0, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetColorMaximizeBand(nBand, nIdeal); IIF( .F., s_oClass:ModInline( "SetColorMaximizeBand", {|Self,nBand, nIdeal | Self, SendMessage( ::hWnd, (1024 + 31), nBand - 1, nIdeal ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetColorMaximizeBand", {|Self,nBand, nIdeal | Self, SendMessage( ::hWnd, (1024 + 31), nBand - 1, nIdeal ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER MouseMove( ); IIF( !.F., s_oClass:AddVirtual( "MouseMove" ), )

   _HB_MEMBER Notify( nIdCtrl, nPtrNMHDR); IIF( .F., s_oClass:ModMethod( "Notify", @TReBar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Notify", @TReBar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TReBar ;



UTILITY STATIC function TReBar_New( oWnd) ; local Self AS CLASS TReBar := QSelf() AS CLASS TReBar

   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ;

   ::oWnd   = oWnd
   ::nId    = ::GetNewId()







   ::nStyle = nOR(   1073741824, 268435456, 512, 1024, 16384, 33554432, 8, 2 )
   ::lDrag = .F.

   ::oWnd:oTop = Self

   InitCommonControlsEx( 1024 )

   if ! Empty( oWnd:hWnd )
      ::Create( "ReBarWindow32" )
      SetReBarInfo( ::hWnd )
      oWnd:AddControl( Self )
      ::nWidth = ::oWnd:nWidth
   else
      oWnd:DefControl( Self )
   endif

return Self



UTILITY STATIC function TReBar_Command( nWParam, nLParam) ; local Self AS CLASS TReBar := QSelf() AS CLASS TReBar

   local hWndCtl := nLParam

   if GetClassName( hWndCtl ) <> "ToolbarWindow32"
      ::TControl:Command( nWParam, nLParam )
   endif

return nil



UTILITY STATIC function TReBar_Notify( nIdCtrl, nPtrNMHDR) ; local Self AS CLASS TReBar := QSelf() AS CLASS TReBar

   local nCode := GetNMHDRCode( nPtrNMHDR )

      do case
         case nCode == (-831 - 4)
            ::oWnd:Resize()
            if ::oWnd:oWndClient:GetActive() <> nil
               ::oWnd:oWndClient:GetActive():Maximize()
            end

         case nCode == (-831 - 5)
            ::oWnd:Resize()
            if ::oWnd:oWndClient:GetActive() <> nil
               ::oWnd:oWndClient:GetActive():Maximize()
            end

      end

return ( nil )

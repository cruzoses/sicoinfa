#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Fabricantes.prg"
_HB_CLASS TFabricantes ; UTILITY FUNCTION TFabricantes(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFabricantes" , {TMANT():classh} ) ) ; ;

   _HB_MEMBER Create( cPath) AS CLASS TFabricantes; IIF( .F., s_oClass:ModMethod( "Create", @TFabricantes_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TFabricantes_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TFabricantes; IIF( .F., s_oClass:ModMethod( "New", @TFabricantes_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TFabricantes_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @TFabricantes_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TFabricantes_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TFabricantes_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TFabricantes_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TFabricantes_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TFabricantes_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TFabricantes_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TFabricantes_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TFabricantes_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TFabricantes_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lValid( oGet, oSay); IIF( .F., s_oClass:ModMethod( "lValid", @TFabricantes_lValid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValid", @TFabricantes_lValid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cNombre( cCodArt); IIF( .F., s_oClass:ModMethod( "cNombre", @TFabricantes_cNombre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cNombre", @TFabricantes_cNombre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Publicar(); IIF( .F., s_oClass:ModMethod( "Publicar", @TFabricantes_Publicar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Publicar", @TFabricantes_Publicar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Envio(); IIF( .F., s_oClass:ModMethod( "Envio", @TFabricantes_Envio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Envio", @TFabricantes_Envio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cCodigoWeb( cCodArt); IIF( .F., s_oClass:ModMethod( "cCodigoWeb", @TFabricantes_cCodigoWeb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cCodigoWeb", @TFabricantes_cCodigoWeb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( oGet, oGet2, oDlg, nMode); IIF( .F., s_oClass:ModMethod( "lPreSave", @TFabricantes_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TFabricantes_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFabricantes ;



UTILITY STATIC function TFabricantes_Create( cPath) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   IIF( cPath == nil, cPath := cPatArt(), ) ;

   ::cPath           := cPath
   ::oDbf            := nil

RETURN ( Self )



UTILITY STATIC function TFabricantes_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   IIF( cPath == nil, cPath := cPatArt(), ) ;
   IIF( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   else
      ::nLevel          := nLevelUsr( "01013" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent

   ::oDbf               := nil

   ::cMru               := "Nut_and_bolt_16"

   ::cBitmap            := ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) )

   ::lCreateShell       := .F.

RETURN ( Self )



UTILITY STATIC function TFabricantes_Activate() ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   if nAnd( ::nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      if !::lCreateShell
         ::CreateShell( ::nLevel )
      end

      ::oWndBrw:GralButtons( Self )






      ::oWndBrw:NewAt( "Lbl",,, {||( ::Envio() )}, "En(v)iar", "V",,, 4,, .F. )






      ::oWndBrw:NewAt( "SNDINT",,, {||( ::Publicar( .T. ) )}, "(P)ublicar", "P",,, 4,, .F. )

      ::oWndBrw:EndButtons( Self )

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate(  nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, {|| ::CloseFiles() }, nil, nil )

   end

RETURN ( Self )



UTILITY STATIC function TFabricantes_OpenFiles(lExclusive) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   local lOpen          := .T.
   local oBlock

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER

      msgStop( "Imposible abrir las bases de datos fabricantes" )
      ::CloseFiles()
      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TFabricantes_DefineFiles( cPath, cDriver) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "Fabricantes.Dbf", "Fabricantes" ):New( "Fabricantes.Dbf", "Fabrican", ( cDriver ), "Fabricantes o marcas", ( cPath ) )

      ::oDbf:AddField( "bSndDoc", "B", 14, 0,,,, {|| ::oDbf:lSndDoc }, { "Envio", "Lbl16", 3 }, .F., 20, .F., {"Sel16", "Nil16"} )
      ::oDbf:AddField( "bPubInt", "B", 14, 0,,,, {|| ::oDbf:lPubInt}, { "Publicar", "SndInt16", 3 }, .F., 20, .F., {"Sel16", "Nil16"} )
      ::oDbf:AddField( "cCodFab", "C", 3, 0, "@!",,,, "Código", .F., 60, .F., {} )
      ::oDbf:AddField( "cNomFab", "C", 35, 0,,,,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "lPubInt", "L", 1, 0,,,,, "Publicar", .F.,, .T., {} )
      ::oDbf:AddField( "cImgLogo", "C", 254, 0,,,,, "Imagen logo", .F.,, .T., {} )
      ::oDbf:AddField( "cCodWeb", "N", 11, 0,,,,, "Código Web", .F.,, .T., {} )
      ::oDbf:AddField( "cUrlFab", "C", 250, 0,,,,, "Url", .F., 200, .F., {} )
      ::oDbf:AddField( "lSndDoc", "L", 1, 0,,,,, "Envio", .F.,, .T., {} )

      ::oDbf:AddIndex( "cCodFab", "Fabricantes.CDX", "cCodFab",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomFab", "Fabricantes.CDX", "cNomFab",,, .F., .F., "Nombre",,, .T., .F. )
      ::oDbf:AddIndex( "cCodWeb", "Fabricantes.CDX", "Str( cCodWeb, 11 )",,, .F., .F., "Código web",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TFabricantes_Resource( nMode) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

    local oDlg
   local oGet
   local oGet2
   local oGetImg
   local bmpImage

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "fabricantes", "Fabricante",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodFab, ::oDbf:cCodFab:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      oGet2 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomFab, ::oDbf:cNomFab:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      oGetImg := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cImgLogo, ::oDbf:cImgLogo:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( oGetImg, bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oGetImg, bmpImage ) )}, nil, "LUPA",, )




      oGet2 := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:cUrlFab, ::oDbf:cUrlFab:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:lPubInt, ::oDbf:lPubInt:= u ) }, oDlg,, {||( ::Publicar() )},,,,, .F., {||     ( nMode <> 3 )}, .F. )




      bmpImage := TImage():ReDefine( 500,, cFileBmpName( ::oDbf:cImgLogo ), oDlg,,, .F., .F.,,, .F.,,, .F. )

      bmpImage:SetColor( , GetSysColor( 15 ) )
      bmpImage:bLClicked   := {|| ShowImage( bmpImage ) }
      bmpImage:bRClicked   := {|| ShowImage( bmpImage ) }





      TButton():ReDefine( 1, {||( ::lPreSave( oGet, oGet2, oDlg, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




   TButton():ReDefine( 9, {||( ChmHelp( "Tipos_de_fabricantes" ) )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGet, oGet2, oDlg, nMode ) } )
   end

   oDlg:AddFastKey ( 112, {|| ChmHelp( "Tipos_de_fabricantes" ) } )

      oDlg:bStart := {|| oGet:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TFabricantes_lPreSave( oGet, oGet2, oDlg, nMode) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   if nMode == 1 .OR. nMode == 4

      if Empty( ::oDbf:cCodFab )
         MsgStop( "Código de tipo de fabricante no puede estar vacío." )
         oGet:SetFocus()
         Return .F.
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodFab, "cCodFab" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodFab ) )
         return nil
      end

   end

   if Empty( ::oDbf:cNomFab )
      MsgStop( "Nombre de tipo de fabricante no puede estar vacío." )
      oGet2:SetFocus()
      Return .F.
   end

   ::oDbf:lSndDoc := .T.

RETURN ( oDlg:end( 1 ) )



UTILITY STATIC function TFabricantes_lValid( oGet, oSay) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   local cCodArt

   if Empty( oGet:VarGet() )
      return .T.
   end

   cCodArt        := RJustObj( oGet, "0" )

   if ::oDbf:Seek( cCodArt )
      oGet:cText( cCodArt )
      if oSay <> nil
         oSay:cText( ::oDbf:cNomFab )
      end
   else
      msgStop( "Código no encontrado" )
      return .F.
   end

RETURN .T.



UTILITY STATIC function TFabricantes_cNombre( cCodArt) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   local cNombre  := ""

   if ::oDbf:Seek( cCodArt )
      cNombre     := ::oDbf:cNomFab
   end

RETURN ( cNombre )



UTILITY STATIC function TFabricantes_cCodigoWeb( cCodArt) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   local cCodigoWeb  := ""

   if ::oDbf:Seek( cCodArt )
      cCodigoWeb     := ::oDbf:cCodWeb
   end

RETURN ( cCodigoWeb )



UTILITY STATIC function TFabricantes_Publicar( lLoad) ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   IIF( lLoad == nil, lLoad := .F., ) ;

   if lLoad
      ::oDbf:Load()
      ::oDbf:lPubInt := !::oDbf:lPubInt
      ::oDbf:lSndDoc := ::oDbf:lPubInt
   end

      ::oDbf:cCodWeb := 0

   if lLoad
      ::oDbf:Save()
      ::oWndBrw:Refresh()
   end

   if !Empty( ::oWndBrw )
      ::oWndBrw:Refresh()
   end

RETURN ( Self )



UTILITY STATIC function TFabricantes_Envio() ; local Self AS CLASS TFabricantes := QSelf() AS CLASS TFabricantes

   ::oDbf:Load()
   ::oDbf:lSndDoc := !::oDbf:lSndDoc
   ::oDbf:Save()

   ::oWndBrw:Refresh()

RETURN ( Self )

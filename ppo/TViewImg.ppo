#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\fivewin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 43 ".\Prg\TViewImg.prg"
_HB_CLASS C5ImageView ; UTILITY FUNCTION C5ImageView(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "C5ImageView" , {TControl():classh} ) ) ; ;

    _HB_MEMBER {AS LOGICAL lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData("LOGICAL",, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )

    _HB_MEMBER { aItems} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aItems" }, .F., .F. ), )
    _HB_MEMBER { aCoors} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aCoors" }, .F., .F. ), )
    _HB_MEMBER { aGrid} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aGrid" }, .F., .F. ), )

    _HB_MEMBER { nOption} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nOption" }, .F., .F. ), )
    _HB_MEMBER { nFirstItem} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nFirstItem" }, .F., .F. ), )

    _HB_MEMBER { nClrPaneTile} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nClrPaneTile" }, .F., .F. ), )
    _HB_MEMBER { nClrPaneSel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nClrPaneSel" }, .F., .F. ), )
    _HB_MEMBER { nClrTextSel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nClrTextSel" }, .F., .F. ), )

    _HB_MEMBER { nRows} ; IIF( !.F., s_oClass:AddMultiData(,, 8 + IIF( .F., 32, 0 ), { "nRows" }, .F., .F. ), )
    _HB_MEMBER { nCols} ; IIF( !.F., s_oClass:AddMultiData(,, 8 + IIF( .F., 32, 0 ), { "nCols" }, .F., .F. ), )

    _HB_MEMBER { nxWItem} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nxWItem" }, .F., .F. ), )
    _HB_MEMBER { nxHItem} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nxHItem" }, .F., .F. ), )
    _HB_MEMBER { nAlignText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nAlignText" }, .F., .F. ), )

    _HB_MEMBER { bChanged} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bChanged" }, .F., .F. ), )
    _HB_MEMBER { bAction} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAction" }, .F., .F. ), )

    _HB_MEMBER { lShowOption} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lShowOption" }, .F., .F. ), )
    _HB_MEMBER { bOwnerDraw} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bOwnerDraw" }, .F., .F. ), )

    _HB_MEMBER { lxVScroll} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lxVScroll" }, .F., .F. ), )
    _HB_MEMBER { lxHScroll} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lxHScroll" }, .F., .F. ), )
    _HB_MEMBER { lxBorder} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lxBorder" }, .F., .F. ), )

    _HB_MEMBER { lTitle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lTitle" }, .F., .F. ), )
    _HB_MEMBER { lBoxSelection} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lBoxSelection" }, .F., .F. ), )
    _HB_MEMBER { aTextMargin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aTextMargin" }, .F., .F. ), )
    _HB_MEMBER { nHTitle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nHTitle" }, .F., .F. ), )
    _HB_MEMBER { lAdjust} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lAdjust" }, .F., .F. ), )

    _HB_MEMBER { nSideTitle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nSideTitle" }, .F., .F. ), )

    _HB_MEMBER { nVSep} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nVSep" }, .F., .F. ), )
    _HB_MEMBER { nHSep} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nHSep" }, .F., .F. ), )

    _HB_MEMBER { cAlphaBmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cAlphaBmp" }, .F., .F. ), )
    _HB_MEMBER { nAlphaLevel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nAlphaLevel" }, .F., .F. ), )

    _HB_MEMBER New( nTop, nLeft, nWidth, nHeight, oWnd) AS CLASS C5ImageView; IIF( .F., s_oClass:ModMethod( "New", @C5ImageView_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @C5ImageView_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

    _HB_MEMBER Redefine( nID, oWnd) AS CLASS C5ImageView; IIF( .F., s_oClass:ModMethod( "Redefine", @C5ImageView_Redefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Redefine", @C5ImageView_Redefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

    _HB_MEMBER Display(); IIF( .F., s_oClass:ModInline( "Display", {|Self | Self, ::BeginPaint(),::Paint(),::EndPaint(),0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Display", {|Self | Self, ::BeginPaint(),::Paint(),::EndPaint(),0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER Default(); IIF( .F., s_oClass:ModMethod( "Default", @C5ImageView_Default(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Default", @C5ImageView_Default(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER Initiate( hDlg); IIF( .F., s_oClass:ModMethod( "Initiate", @C5ImageView_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Initiate", @C5ImageView_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @C5ImageView_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @C5ImageView_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER EraseBkGnd(hDC); IIF( .F., s_oClass:ModInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER Resize( nType, nWidth, nHeight); IIF( .F., s_oClass:ModMethod( "Resize", @C5ImageView_Resize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resize", @C5ImageView_Resize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER KeyDown( nKey, nFlags); IIF( .F., s_oClass:ModMethod( "KeyDown", @C5ImageView_KeyDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "KeyDown", @C5ImageView_KeyDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoHome(); IIF( .F., s_oClass:ModMethod( "GoHome", @C5ImageView_GoHome(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoHome", @C5ImageView_GoHome(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoEnd(); IIF( .F., s_oClass:ModMethod( "GoEnd", @C5ImageView_GoEnd(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoEnd", @C5ImageView_GoEnd(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoUp(); IIF( .F., s_oClass:ModMethod( "GoUp", @C5ImageView_GoUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoUp", @C5ImageView_GoUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoDown(); IIF( .F., s_oClass:ModMethod( "GoDown", @C5ImageView_GoDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoDown", @C5ImageView_GoDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoLeft(); IIF( .F., s_oClass:ModMethod( "GoLeft", @C5ImageView_GoLeft(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoLeft", @C5ImageView_GoLeft(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GoRight(); IIF( .F., s_oClass:ModMethod( "GoRight", @C5ImageView_GoRight(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GoRight", @C5ImageView_GoRight(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER PageUp(); IIF( .F., s_oClass:ModMethod( "PageUp", @C5ImageView_PageUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PageUp", @C5ImageView_PageUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER PageDown(); IIF( .F., s_oClass:ModMethod( "PageDown", @C5ImageView_PageDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PageDown", @C5ImageView_PageDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER Page(); IIF( .F., s_oClass:ModMethod( "Page", @C5ImageView_Page(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Page", @C5ImageView_Page(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER LButtonDown( nRow, nCol); IIF( .F., s_oClass:ModMethod( "LButtonDown", @C5ImageView_LButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LButtonDown", @C5ImageView_LButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER LButtonUp( nRow, nCol); IIF( .F., s_oClass:ModMethod( "LButtonUp", @C5ImageView_LButtonUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LButtonUp", @C5ImageView_LButtonUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER MouseWheel( nKey, nDelta, nXPos, nYPos); IIF( .F., s_oClass:ModMethod( "MouseWheel", @C5ImageView_MouseWheel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MouseWheel", @C5ImageView_MouseWheel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GetOption( nRow, nCol); IIF( .F., s_oClass:ModMethod( "GetOption", @C5ImageView_GetOption(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetOption", @C5ImageView_GetOption(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GetDlgCode( nLastKey); IIF( .F., s_oClass:ModMethod( "GetDlgCode", @C5ImageView_GetDlgCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetDlgCode", @C5ImageView_GetDlgCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER AddItem( oItem); IIF( .F., s_oClass:ModMethod( "AddItem", @C5ImageView_AddItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddItem", @C5ImageView_AddItem(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER VScrAdjust(); IIF( .F., s_oClass:ModMethod( "VScrAdjust", @C5ImageView_VScrAdjust(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "VScrAdjust", @C5ImageView_VScrAdjust(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER nLineCount(); IIF( .F., s_oClass:ModMethod( "nLineCount", @C5ImageView_nLineCount(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nLineCount", @C5ImageView_nLineCount(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER nLineVisib(); IIF( .F., s_oClass:ModInline( "nLineVisib", {|Self | Self, ::nRows }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nLineVisib", {|Self | Self, ::nRows }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER nCurLine(); IIF( .F., s_oClass:ModInline( "nCurLine", {|Self | Self, if( ::nOption <> 0, int( ::nOption / ::nCols ), 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nCurLine", {|Self | Self, if( ::nOption <> 0, int( ::nOption / ::nCols ), 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER SetItems( aItems); IIF( .F., s_oClass:ModMethod( "SetItems", @C5ImageView_SetItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetItems", @C5ImageView_SetItems(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GetSelection(); IIF( .F., s_oClass:ModInline( "GetSelection", {|Self | Self, if(::nOption <> 0, ::aItems[::nOption], nil) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetSelection", {|Self | Self, if(::nOption <> 0, ::aItems[::nOption], nil) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER nFactor( hBmp, rc); IIF( .F., s_oClass:ModMethod( "nFactor", @C5ImageView_nFactor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nFactor", @C5ImageView_nFactor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER lVScroll(lNewValue); _HB_MEMBER _lVScroll(lNewValue); IIF( .F., s_oClass:ModMethod( "lVScroll", @C5ImageView_lVScroll(), 1 + 32, .F. ), s_oClass:AddMethod( "lVScroll", @C5ImageView_lVScroll(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_lVScroll", @C5ImageView_lVScroll() ), s_oClass:AddMethod( "_lVScroll", @C5ImageView_lVScroll() ) ) ;
    _HB_MEMBER lBorder(lNewValue); _HB_MEMBER _lBorder(lNewValue); IIF( .F., s_oClass:ModMethod( "lBorder", @C5ImageView_lBorder(), 1 + 32, .F. ), s_oClass:AddMethod( "lBorder", @C5ImageView_lBorder(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_lBorder", @C5ImageView_lBorder() ), s_oClass:AddMethod( "_lBorder", @C5ImageView_lBorder() ) ) ;
    _HB_MEMBER nHItem(nNewValue); _HB_MEMBER _nHItem(nNewValue); IIF( .F., s_oClass:ModMethod( "nHItem", @C5ImageView_nHItem(), 1 + 32, .F. ), s_oClass:AddMethod( "nHItem", @C5ImageView_nHItem(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nHItem", @C5ImageView_nHItem() ), s_oClass:AddMethod( "_nHItem", @C5ImageView_nHItem() ) ) ;
    _HB_MEMBER nWItem(nNewValue); _HB_MEMBER _nWItem(nNewValue); IIF( .F., s_oClass:ModMethod( "nWItem", @C5ImageView_nWItem(), 1 + 32, .F. ), s_oClass:AddMethod( "nWItem", @C5ImageView_nWItem(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nWItem", @C5ImageView_nWItem() ), s_oClass:AddMethod( "_nWItem", @C5ImageView_nWItem() ) ) ;
    _HB_MEMBER Goto( nLine); IIF( .F., s_oClass:ModMethod( "Goto", @C5ImageView_Goto(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Goto", @C5ImageView_Goto(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS C5ImageView ;


  UTILITY STATIC function C5ImageView_New( nTop, nLeft, nWidth, nHeight, oWnd) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::nTop          := nTop
  ::nLeft         := nLeft
  ::nBottom       := nTop + nHeight
  ::nRight        := nLeft + nWidth
  ::oWnd          := oWnd

  ::aItems        := {}
  ::aCoors        := {}
  ::aGrid         := {}
  ::nFirstItem    := 1
  ::nOption       := 1
  ::nClrPane      := 16777215
  ::nClrText      := 0
  ::nClrTextSel   := 16777215
  ::nClrPaneSel   := ( 105 + ( 105 * 256 ) + ( 105 * 65536 ) )
  ::nxWItem       := 120
  ::nxHItem       := 150
  ::lShowOption   := .T.
  ::lTitle        := .T.
  ::aTextMargin   := {3,3,3,3}
  ::lAdjust       := .T.
  ::nHTitle       := 30
  ::lxVScroll     := .T.
  ::lxHScroll     := .F.
  ::lxBorder      := .F.
  ::nAlignText    := nOr( 0x00000008, 0x00000001, 0x00000020 )
  ::lBoxSelection := .F.
  ::nSideTitle    := 2

  ::nVSep         := 0
  ::nHSep         := 0

  ::cAlphaBmp     := ""
  ::nAlphaLevel   := 150

  ::nStyle        := nOr( 1073741824, 65536, 268435456, 2097152 )
  ::nId           := ::GetNewId()

  ::Register( nOR( 1, 2 ) )

  if ! Empty( oWnd:hWnd )
     ::Create()
     ::Default()
     oWnd:AddControl( Self )
  else
     oWnd:DefControl( Self )
  endif

return self


  UTILITY STATIC function C5ImageView_Redefine( nID, oWnd) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::oWnd          := oWnd
  ::nId           := nID

  ::aItems        := {}
  ::aCoors        := {}
  ::aGrid         := {}
  ::nFirstItem    := 1
  ::nOption       := 1
  ::nClrPane      := 16777215
  ::nClrText      := 0
  ::nClrTextSel   := 16777215
  ::nClrPaneSel   := ( 105 + ( 105 * 256 ) + ( 105 * 65536 ) )
  ::nxWItem       := 120
  ::nxHItem       := 150
  ::lShowOption   := .T.
  ::lTitle        := .T.
  ::aTextMargin   := {3,3,3,3}
  ::lAdjust       := .T.
  ::nHTitle       := 30
  ::lxVScroll     := .T.
  ::lxHScroll     := .F.
  ::lxBorder      := .F.
  ::nAlignText    := nOr( 0x00000000, 0x00000001, 0x00000020 )
  ::lBoxSelection := .F.
  ::nSideTitle    := 2

  ::nVSep         := 0
  ::nHSep         := 0

  ::cAlphaBmp     := ""
  ::nAlphaLevel   := 150

  ::Register( nOR( 1, 2 ) )

  if oWnd <> nil
     oWnd:DefControl( Self )
  endif

return Self


  UTILITY STATIC function C5ImageView_Default() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  if !lAnd( GetWindowLong( ::hWnd, -16 ), 2097152 )
     SumarEstilo(::hWnd,2097152)
     ShowScrollBar(::hWnd, 1, ::lVScroll )
  endif













  ::Resize()

return 0


  UTILITY STATIC function C5ImageView_Initiate( hDlg) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


   local uValue

   uValue = ::TControl:Initiate( hDlg )
   ::Default()


return uValue


    UTILITY STATIC function C5ImageView_lVScroll(lNewValue) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if pcount() > 0

   if lNewValue
      if !lAnd( GetWindowLong( ::hWnd, -16 ), 2097152 )
         SumarEstilo(::hWnd, 2097152)
      endif
      ::lxVScroll := .F.
      ShowScrollBar(::hWnd, 1, .F. )
   else
      ::lxVScroll := .F.
      ShowScrollBar(::hWnd, 1, .F. )
   endif
   ::Resize()
endif

return ::lxVScroll




    UTILITY STATIC function C5ImageView_lBorder(lNewValue) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if pcount() > 0
   if lNewValue
      ::lxBorder := .T.
      SumarEstilo(::hWnd, 8388608)
   else
      ::lxBorder := .F.
      QuitarEstilo(::hWnd, 8388608)
   endif
   ::Resize()
endif

return ::lxBorder



    UTILITY STATIC function C5ImageView_nHItem(nNewValue) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if pcount() > 0
   ::nxHItem := nNewValue
   ::Resize()
endif

return ::nxHItem


    UTILITY STATIC function C5ImageView_nWItem(nNewValue) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if pcount() > 0
   ::nxWItem := nNewValue
   ::Resize()
endif

return ::nxWItem


    UTILITY STATIC function C5ImageView_SetItems( aItems) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if empty(aItems)
   return 0
endif

::aItems    := {}

if valtype(aItems[1]) == "A"
   aeval( aItems, {|a| ::AddItem( a[1], if(len(a) >= 2,a[2],""), if(len(a) == 3,a[3],"") ) } )
else
   aeval( aItems, {|oItem| ::AddItem( oItem ) } )
endif

::nFirstItem := 1
::nOption    := 1
::VScrAdjust()
::Refresh()

return nil


  UTILITY STATIC function C5ImageView_AddItem( p1, p2, p3, p4) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if valtype( p1 ) == "C"
   p1 := C5ImageViewItem():New( p1, p2, p3, p4 )
endif

aadd(::aItems, p1 )

::Resize()

return p1


  UTILITY STATIC function C5ImageView_GetDlgCode( nLastKey) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


   if ! ::oWnd:lValidating
      if nLastKey == 13 .OR. nLastKey == 9
         ::oWnd:nLastKey = nLastKey
      endif
   endif

return 4


  UTILITY STATIC function C5ImageView_Paint() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView

local aInfo
local hBmp
local hBmp2
local hOldFont
local lDraw
local n
local nClrPane
local nColor
local nCount
local nFactor
local nHImage
local nHeight
local nLeft
local nLen
local nMode
local nTop
local nWImage
local nWidth
local oItem
local rc
local rc2
local cText

local hBmpAlpha
local hBmpAlpha2

aInfo    := ::DispBegin()
nLen     := len(::aItems)
nCount   := 1

::aGrid  := aFill( Array( ::nRows * ::nCols ), 0 )

hOldFont := SelectObject(::hDC, if(::oFont == nil, GetStockObject( 17 ), ::oFont:hFont ))
nMode    := SetBkMode(::hDC, 1 )
nColor   := SetTextColor(::hDC, ::nClrText )

FillSolidRect( ::hDC, GetClientRect( ::hWnd ), ::nClrPane )

if nLen > 0

   if !Empty( ::cAlphaBmp )

      if At( ".", ::cAlphaBmp ) <> 0
         hBmpAlpha   := FILoadImg( AllTrim( ::cAlphaBmp ) )
      else
         hBmpAlpha   := PalBmpLoad( ::cAlphaBmp )[1]
      endif

   endif



   for n := ::nFirstItem to nLen

       lDraw               := .T.

       ::aGrid[ nCount ]   := n

       if ::bOwnerDraw <> nil
          lDraw            := Eval( ::bOwnerDraw, self, n )
       endif

       if lDraw

          oItem            := ::aItems[ n ]

          rc               := { ::aCoors[ nCount, 1 ], ::aCoors[ nCount, 2 ], ::aCoors[ nCount, 3 ], ::aCoors[ nCount, 4 ] }

          rc[ 1 ]          += ::nVSep / 2
          rc[ 2 ]          += ::nHSep / 2

          rc[ 3 ]          -= ::nVSep / 2





          rc[ 4 ]          -= ::nHSep / 2

          if .T.

             nClrPane := nil

             if .F.
                nClrPane         := ::nClrPaneSel
             else
                if oItem:nClrPane <> nil
                   nClrPane      := oItem:nClrPane
                else
                   if ::nClrPaneTile <> nil
                      nClrPane   := ::nClrPaneTile
                   endif
                endif
             endif

             if nClrPane <> nil
                if !::lBoxSelection
                   FillSolidRect( ::hDC, rc, nClrPane )
                endif
             endif

          endif





          rc2           := { rc[ 1 ], rc[ 2 ], rc[ 3 ], rc[ 4 ] }

          if ::lTitle
             rc2[ 3 ]   -= ::nHTitle
          endif

          if !Empty( oItem:cImage )

             if At( ".", oItem:cImage ) <> 0
                hBmp    := FILoadImg( AllTrim( oItem:cImage ) )
             else
                hBmp    := PalBmpLoad( oItem:cImage )[1]
             endif

          else

             hBmp       := 0

          end

          if hBmp <> 0

             nHImage    := nBmpHeight( hBmp )
             nWImage    := nBmpWidth ( hBmp )



             if ::lAdjust

                nFactor    := ::nFactor( hBmp, rc2 )

                nHeight    := min( nHImage  * nFactor, ( rc2[ 3 ] - rc2[ 1 ] ) )
                nWidth     := min( nWImage  * nFactor, ( rc2[ 4 ] - rc2[ 2 ] ) )

                nTop       := rc2[ 1 ] + max( ( rc2[ 3 ] - rc2[ 1 ] ) / 2 - ( nHeight / 2 ), 0 )
                nLeft      := rc2[ 2 ] + max( ( rc2[ 4 ] - rc2[ 2 ] ) / 2 - ( nWidth  / 2 ), 0 )

                rc2        := { nTop, nLeft, nTop + nHeight, nLeft + nWidth }

             else

                nTop       := rc2[ 1 ] + max( ( rc2[ 3 ] - rc2[ 1 ] ) / 2 - ( nHImage / 2 ), 0 ) + 1
                nLeft      := rc2[ 2 ] + max( ( rc2[ 4 ] - rc2[ 2 ] ) / 2 - ( nWImage / 2 ), 0 ) + 1

                nHeight    := nHImage
                nWidth     := nWImage

             endif

             if HasAlpha( hBmp )

                if ::lAdjust
                   hBmp2   := Resizebmp( hBmp, rc2[ 4 ] - rc2[ 2 ], rc2[ 3 ] - rc2[ 1 ] )
                   DeleteObject( hBmp )
                   hBmp    := hBmp2
                endif

                ABPaint( ::hDC, nLeft, nTop, hBmp, 255 )

             else

                DrawBitmapEx( ::hDC, hBmp, nTop, nLeft, nWidth, nHeight, 13369376 )

             endif

             DeleteObject( hBmp )

          endif

          if ( n == ::nOption ) .AND. ::lShowOption .AND. ::lBoxSelection
            Box( ::hDC, rc, nClrPane )
          endif

          cText      := oItem:cText

          if Empty( cText )
            cText    := cFileName( oItem:cImage )
          endif

          if !Empty( cText )




             rc      := {  ::aCoors[ nCount, 1 ] + ::aTextMargin[ 1 ], ::aCoors[ nCount, 2 ] + ::aTextMargin[ 2 ], ::aCoors[ nCount, 3 ] - ::aTextMargin[ 3 ], ::aCoors[ nCount, 4 ] - ::aTextMargin[ 4 ]}

             if ::nSideTitle == 1
                rc[3] := rc[1] + ::nHTitle
             elseif ::nSideTitle == 2
                rc[1] := rc[3] - ::nHTitle
             endif

             if .T.
                SetTextColor( ::hDC, nColor )
                nColor  := SetTextColor(::hDC, ::nClrTextSel )
             endif



             if !Empty( hBmpAlpha ) .AND. HasAlpha( hBmpAlpha )

                hBmpAlpha2 := Resizebmp( hBmpAlpha, rc[ 4 ] - rc[ 2 ], rc[ 3 ] - rc[ 1 ] )
                DeleteObject( hBmpAlpha )
                hBmpAlpha  := hBmpAlpha2

                ABPaint( ::hDC, rc[ 2 ], rc[ 1 ], hBmpAlpha, ::nAlphaLevel )

             endif





             DrawText( ::hDC, cText, rc, ::nAlignText )

             if .T.
                SetTextColor( ::hDC, nColor )
                nColor  := SetTextColor(::hDC, ::nClrText )
             endif

          endif

       endif

       nCount++

       if nCount > len(::aCoors)
          exit
       endif

   next

   if !Empty( hBmpAlpha )
      DeleteObject( hBmpAlpha )
   end

endif

SetTextColor(::hDC, nColor )
SetBkMode(::hDC, nMode )
SelectObject(::hDC, hOldFont )

::DispEnd( aInfo )

return 0


  UTILITY STATIC function C5ImageView_Resize( nType, nWidth, nHeight) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView

local rc
local nHRow
local nWCol
local nTop, nLeft, nBottom, nRight
local nCount := 1
local nR, nC

rc := GetClientRect(::hWnd)
rc := {rc[1],rc[2],rc[3],rc[4]}



::nRows := max(int((rc[3]-rc[1])/ (::nHItem)),1)
::nCols := max(int((rc[4]-rc[2])/ (::nWItem)),1)

::aCoors := array( ::nRows*::nCols )

for nR := 1 to ::nRows

    nTop     := (nR-1)*::nHItem + rc[1]
    nBottom  := nTop+::nHItem

    for nC := 1 to ::nCols
        nLeft  := (nC-1)*::nWItem+ rc[2]
        nRight := nLeft+::nWItem
        ::aCoors[nCount] := {nTop,nLeft,nBottom,nRight}
        nCount++
    next

next

::VScrAdjust()

return ::TControl:Resize( nType, nWidth, nHeight )


  UTILITY STATIC function C5ImageView_KeyDown( nKey, nFlags) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


      do case
         case nKey == 13 .OR. nKey == 32
              if ::nOption <> 0
                 if ::bAction <> nil
                    eval(::bAction, self )
                 endif
              endif

         case nKey == 36
              ::GoHome()

         case nKey == 35
              ::GoEnd()

         case nKey == 38

              ::oVScroll:GoUp()

         case nKey == 40

              ::oVScroll:GoDown()

         case nKey == 37
              ::GoLeft()

         case nKey == 39
              ::GoRight()

         case nKey == 33

              ::oVScroll:PageUp()

         case nKey == 34

              ::oVScroll:PageDown()

         otherwise
              return ::TControl:KeyDown( nKey, nFlags )
      endcase

return 0


    UTILITY STATIC function C5ImageView_GoHome() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::nOption    := 1
  ::nFirstItem := 1

  if ::bChanged <> nil
     eval( ::bChanged, ::GetSelection() )
  endif

  ::Refresh(.T.)

return 0


    UTILITY STATIC function C5ImageView_GoEnd() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::nOption    := len(::aItems)
  ::nFirstItem := max(1, len(::aItems)- (::nCols*::nRows)+1)

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif

  ::Refresh(.T.)

return 0




    UTILITY STATIC function C5ImageView_PageUp() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::nOption    := max(1, ::nOption    - (::nCols*::nRows))
  ::nFirstItem := max(1, ::nFirstItem - (::nCols*::nRows))

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif

  ::Refresh(.T.)

return 0


    UTILITY STATIC function C5ImageView_PageDown() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


  ::nOption    := min(len(::aItems), ::nOption    + (::nCols*::nRows))
  ::nFirstItem := min(len(::aItems), ::nFirstItem + (::nCols*::nRows))

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif

  ::Refresh(.T.)

return 0



   UTILITY STATIC function C5ImageView_Page( nLine) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


   ::oVScroll:SetPos( nLine )
   ::Goto( nLine )

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif


return nil



    UTILITY STATIC function C5ImageView_Goto( nLine) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


::nFirstItem := (nLine-1)*::nCols + 1

::Refresh()



return nil



    UTILITY STATIC function C5ImageView_GoLeft() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if !::lShowOption
   return ::PageUp()
endif

::nOption := max( 1, ::nOption-1)

if ::nOption < ::nFirstItem
   ::nFirstItem := max( 1, ::nFirstItem - ::nCols )
endif

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif


::Refresh()

return 0


    UTILITY STATIC function C5ImageView_GoRight() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if !::lShowOption
   return ::PageDown()
endif

::nOption := min( len(::aItems), ::nOption+1)
if ::nOption - ::nFirstItem >= ::nRows*::nCols
   ::nFirstItem := min( len(::aItems), ::nFirstItem+::nCols)
endif

   if ::bChanged <> nil
      eval( ::bChanged, ::GetSelection() )
   endif


::Refresh()


return 0



    UTILITY STATIC function C5ImageView_GoUp() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if !::lShowOption
   return ::PageUp()
endif

if ::nLineCount == 1
   return 0
endif

::nOption := max( 1, ::nOption-::nCols)

if ::nOption < ::nFirstItem
   ::nFirstItem := max( 1, ::nFirstItem - ::nCols )
endif

if ::bChanged <> nil
   eval( ::bChanged, ::GetSelection() )
endif

::Refresh()


return 0


    UTILITY STATIC function C5ImageView_GoDown() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if !::lShowOption
   return ::PageDown()
endif

if ::nLineCount == 1
   return 0
endif

::nOption := min( len(::aItems), ::nOption+::nCols)

if ::nOption - ::nFirstItem >= ::nRows*::nCols
   ::nFirstItem := min( len(::aItems), ::nFirstItem+::nCols)
endif

if ::bChanged <> nil
   eval( ::bChanged, ::GetSelection() )
endif
::Refresh()

return 0


   UTILITY STATIC function C5ImageView_LButtonDown( nRow, nCol) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView





















return 0


UTILITY STATIC function C5ImageView_LButtonUp( nRow, nCol) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


local nOldOption  := ::nOption

::nOption         := ::GetOption( nRow, nCol )

if ::nOption <> 0

   if !Empty( ::oVScroll )
      ::oVScroll:SetPos( ::nCurLine() )
   end

   if !Empty( ::bChanged ) .AND. ( ::nOption <> nOldOption )
      eval( ::bChanged, ::GetSelection() )
   endif

   if ::bAction <> nil
      eval(::bAction, self )
   endif

   ::nOption := 0

endif

return 0


 UTILITY STATIC function C5ImageView_MouseWheel( nKey, nDelta, nXPos, nYPos) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


if !Empty( ::oVScroll )
   if nDelta > 0
      ::oVScroll:GoUp()
   else
      ::oVScroll:GoDown()
   endif
end

return nil


return 0



  UTILITY STATIC function C5ImageView_GetOption( nRow, nCol) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView

local n
local nCell := 0



for n := 1 to len(::aCoors)

    if PtInRect( nRow, nCol, ::aCoors[n] )
       nCell := n
       exit
    endif
next

if nCell == 0
   return 0
endif

nCell := ::nFirstItem + nCell -1

if nCell <= 0 .OR. nCell > len(::aItems)
   return 0
endif

return nCell




   UTILITY STATIC function C5ImageView_VScrAdjust() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView


local nRes

   if !Empty( ::oVScroll )

   if ::lVScroll

      if ::nLineCount == 1
         ::oVScroll:SetRange( 0, 1 )
         SetScrollInfo( ::hWnd, 1, -1, .T. )
         ShowScrollBar(::hWnd, 1, .F. )
      else
         ShowScrollBar(::hWnd, 1, .F. )
         nRes := ::nLineCount + ::nLineVisib - 1
         ::oVScroll:SetRange( 1, nRes )
         SetScrollInfo( ::hWnd, 1, ::nLineVisib, .T. )
      endif

   endif

   end

return nil


   UTILITY STATIC function C5ImageView_nLineCount() ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView

local nLines
local nLen := len(::aItems)


if nLen == 0
   return 0
endif

if ::lShowOption
   nLines := int(nLen / ::nCols ) + if( nLen % ::nCols > 0, 1, 0)
else
   nLines := int(nLen / (::nRows*::nCols)) + if( nLen % (::nRows*::nCols) > 0, 1, 0)
endif

return nLines


  UTILITY STATIC function C5ImageView_nFactor( hImage, rc) ; local Self AS CLASS C5ImageView := QSelf() AS CLASS C5ImageView

Local nHImage
Local nWImage
local nFactor

nHImage := nBmpHeight( hImage )
nWImage := nBmpWidth( hImage )

if nHImage > nWImage
   nFactor := (rc[3]-rc[1]) / nHImage
else
   nFactor := (rc[4]-rc[2]) / nWImage
endif



return nFactor








_HB_CLASS C5ImageViewItem ; UTILITY FUNCTION C5ImageViewItem(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "C5ImageViewItem" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { cImage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cImage" }, .F., .F. ), )
   _HB_MEMBER { cText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cText" }, .F., .F. ), )
   _HB_MEMBER { Cargo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "Cargo" }, .F., .F. ), )
   _HB_MEMBER { nClrPane} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nClrPane" }, .F., .F. ), )

   _HB_MEMBER New( cImage, cText, nClrPane, Cargo) AS CLASS C5ImageViewItem; IIF( .F., s_oClass:ModMethod( "New", @C5ImageViewItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @C5ImageViewItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER cFileName(); IIF( .F., s_oClass:ModMethod( "cFileName", @C5ImageViewItem_cFileName(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cFileName", @C5ImageViewItem_cFileName(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Add(aItems); IIF( .F., s_oClass:ModInline( "Add", {|Self,aItems | Self, ( aAdd( aItems, Self ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Add", {|Self,aItems | Self, ( aAdd( aItems, Self ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS C5ImageViewItem ;


   UTILITY STATIC function C5ImageViewItem_New( cImage, cText, nClrPane, Cargo) ; local Self AS CLASS C5ImageViewItem := QSelf() AS CLASS C5ImageViewItem


   ::cImage   := cImage
   ::cText    := cText
   ::nClrPane := nClrPane
   ::Cargo    := Cargo

return self


   UTILITY STATIC function C5ImageViewItem_cFileName() ; local Self AS CLASS C5ImageViewItem := QSelf() AS CLASS C5ImageViewItem


local n := RAt( "\", ::cImage )

return if( n > 0, substr( ::cImage, n+1 ), ::cImage )



Function SaveImage( cFileIn, cFileOut, nWidth, nHeight )

   local hDib
   local cTempFile
   local lSaved
   local hBitmap
   local hBmp
   local cExt     := cFileExt(cFileOut)
   local nFormat  := 0




   if Upper(cExt) == "JPG"
      nFormat := 2
   elseif Upper(cExt) == "PNG"
      nFormat := 13
   endif

   hBmp        := FiLoadImg( cFileIn )
   hBitmap     := ResizeBmpEx( hBmp, nWidth, nHeight )

   hDib        := DibFromBitmap( hBitmap )
   cTempFile   := cTempFile()

   DibWrite( cTempFile, hDib )
   GloBalFree( hDib )
   DeleteObject( hBmp )
   DeleteObject( hBitmap )

   lSaved      := FIConvertImageFile( cTempFile, cFileOut, nFormat, 100 )

   FErase( cTempFile )

return lSaved



Function ResizeBmpEx( hBmp, nWidth, nHeight  )

   local hBmpMem
   local hOldBmp
   local hDCMem
   local hDCMem2
   local hDC

   IIF( nWidth == nil, nWidth := nBmpWidth( hBmp ), ) ;
   IIF( nHeight == nil, nHeight := nBmpHeight( hBmp ), ) ;

   hDc               := CreateDC( "DISPLAY",0,0,0)
   hDCMem            := CreateCompatibleDC( hDC )
   hDCMem2           := CreateCompatibleDC( hDC )
   hOldBmp           := SelectObject( hDCMem2, hBmp )
   hBmpMem           := CreateCompatibleBitmap( hDC, nWidth, nHeight )
   hOldBmp           := SelectObject( hDCMem, hBmpMem )

   SetStretchBltMode( hDCMem, 3 )
   StretchBlt( hDCMem, 0, 0, nWidth, nHeight, hDCMem2, 0, 0, nBmpWidth( hBmp ), nBmpHeight( hBmp ), 13369376 )

   SelectObject( hDCMem, hOldBmp )
   SelectObject( hDCMem2, hBmp )

   DeleteDC( hDCMem )
   DeleteDC( hDCMem2 )
   DeleteDC( hDC )

return hBmpMem



#pragma BEGINDUMP

#include <windows.h>
#include "hbapi.h"

void DrawBitmapEx( HDC hdc, HBITMAP hbm, WORD wCol, WORD wRow, WORD wWidth,
                 WORD wHeight, DWORD dwRaster )
{
    HDC       hDcMem, hDcMemX;
    BITMAP    bm, bmx;
    HBITMAP   hBmpOld, hbmx, hBmpOldX;

    if( !hdc || !hbm )
       return;

    hDcMem  = CreateCompatibleDC( hdc );
    hBmpOld = ( HBITMAP ) SelectObject( hDcMem, hbm );

    if( ! dwRaster )
       dwRaster = SRCCOPY;

    GetObject( hbm, sizeof( BITMAP ), ( LPSTR ) &bm );

    if( ! wWidth || ! wHeight )
       BitBlt( hdc, wRow, wCol, bm.bmWidth, bm.bmHeight, hDcMem, 0, 0, dwRaster );
    else
    {
       hDcMemX          = CreateCompatibleDC( hdc );
       bmx              = bm;
       bmx.bmWidth      = wWidth;
       bmx.bmHeight     = wHeight;

       bmx.bmWidthBytes = ( bmx.bmWidth * bmx.bmBitsPixel + 15 ) / 16 * 2;

       hbmx = CreateBitmapIndirect( &bmx );

       SetStretchBltMode (hDcMemX, COLORONCOLOR);
       hBmpOldX = ( HBITMAP ) SelectObject( hDcMemX, hbmx );
       StretchBlt( hDcMemX, 0, 0, wWidth, wHeight, hDcMem, 0, 0,
                   bm.bmWidth, bm.bmHeight, dwRaster );
       BitBlt( hdc, wRow, wCol, wWidth, wHeight, hDcMemX, 0, 0, dwRaster );
       SelectObject( hDcMemX, hBmpOldX );
       DeleteDC( hDcMemX );
       DeleteObject( hbmx );
    }

    SelectObject( hDcMem, hBmpOld );
    DeleteDC( hDcMem );
}
HB_FUNC_STATIC( DRAWBITMAPEX ) //  hDC, hBitmap, nRow, nCol, nWidth, nHeight, nRaster
{
   DrawBitmapEx( ( HDC ) hb_parnl( 1 ), ( HBITMAP ) hb_parnl( 2 ),
               hb_parni( 3 ), hb_parni( 4 ),
               hb_parni( 5 ), hb_parni( 6 ), hb_parnl( 7 ) );
}

HB_FUNC_STATIC( FILLSOLIDRECT )
{
    RECT rct;
    COLORREF nColor;
    HPEN hPen, hOldPen;
    HDC hDC = ( HDC ) hb_parnl( 1 );
    rct.top    = hb_parvni( 2, 1 );
    rct.left   = hb_parvni( 2, 2 );
    rct.bottom = hb_parvni( 2, 3 );
    rct.right  = hb_parvni( 2, 4 );

    nColor = SetBkColor( hDC, hb_parnl( 3 ) );
    ExtTextOut( hDC, 0, 0, ETO_OPAQUE, &rct, NULL, 0, NULL);
    SetBkColor( hDC, nColor );

    if( hb_pcount()  > 3 )
    {
       hPen = CreatePen( PS_SOLID, 1,(COLORREF)hb_parnl( 4 ));
       hOldPen = (HPEN) SelectObject( hDC, hPen );
       MoveToEx( hDC, rct.left, rct.top, NULL );
       LineTo( hDC, rct.right-3, rct.top );
       LineTo( hDC, rct.right-3, rct.bottom );
       LineTo( hDC, rct.left, rct.bottom );
       LineTo( hDC, rct.left, rct.top );
       SelectObject( hDC, hOldPen );
       DeleteObject( hPen );
    }
}

HB_FUNC_STATIC( PTINRECT )
{
   POINT pt;
   RECT  rct;

   pt.y = hb_parnl( 1 );
   pt.x = hb_parnl( 2 );

   rct.top    = hb_parvni( 3, 1 );
   rct.left   = hb_parvni( 3, 2 );
   rct.bottom = hb_parvni( 3, 3 );
   rct.right  = hb_parvni( 3, 4 );

   hb_retl( PtInRect( &rct, pt ) );
}

HB_FUNC_STATIC( SHOWSCROLLBAR )
{
   hb_retl( ShowScrollBar( (HWND)hb_parnl(1), hb_parni(2), hb_parl( 3 ) ) );
}

//#define SB_HORZ             0
//#define SB_VERT             1
//#define SB_CTL              2
//#define SB_BOTH             3

HB_FUNC_STATIC( SETSTRETCHBLTMODE )
{
    hb_retni( SetStretchBltMode( ( HDC ) hb_parnl( 1 ), 4 ));
}

HB_FUNC_STATIC( QUITARESTILO )
{
   HWND hWnd = (HWND) hb_parnl( 1 );
   DWORD dwStyle = GetWindowLong( hWnd, GWL_STYLE );
   dwStyle &= ~ ((DWORD)hb_parnl(2));
   SetWindowLong( hWnd, GWL_STYLE, dwStyle );
   SetWindowPos( hWnd,0,0,0,0,0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED | SWP_DRAWFRAME);
}

HB_FUNC_STATIC( SUMARESTILO )
{
   HWND hWnd = (HWND) hb_parnl( 1 );
   DWORD dwStyle = GetWindowLong( hWnd, GWL_STYLE );
   dwStyle |= ((DWORD)hb_parnl(2));
   SetWindowLong( hWnd, GWL_STYLE, dwStyle );
   SetWindowPos( hWnd,0,0,0,0,0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER | SWP_FRAMECHANGED | SWP_DRAWFRAME);
}


HB_FUNC_STATIC( BOX )
{
      HDC hDC = (HDC) hb_parnl( 1 );
      HPEN hPen;
      HPEN hOldPen;
      RECT rc;

      if( hb_pcount() > 3 )
      {
         hPen = CreatePen( hb_parni(4),1, (COLORREF)hb_parnl( 3 ));
      }
      else
      {
         hPen = CreatePen( PS_SOLID,1, (COLORREF)hb_parnl( 3 ));
      }
      rc.top    = hb_parvni( 2, 1);
      rc.left   = hb_parvni( 2, 2);
      rc.bottom = hb_parvni( 2, 3);
      rc.right  = hb_parvni( 2, 4);
      hOldPen = (HPEN) SelectObject( hDC, hPen );
      MoveToEx( hDC, rc.left, rc.top, NULL );
      LineTo( hDC, rc.right, rc.top );
      LineTo( hDC, rc.right, rc.bottom );
      LineTo( hDC, rc.left, rc.bottom );
      LineTo( hDC, rc.left, rc.top );
      SelectObject( hDC, hOldPen );
      DeleteObject( hPen );
}


#pragma ENDDUMP

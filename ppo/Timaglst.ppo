#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Timaglst.prg"
_HB_CLASS TImageList ; UTILITY FUNCTION TImageList(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TImageList" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { hImageList} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hImageList" }, .F., .F. ), )
   _HB_MEMBER { aBitmaps} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aBitmaps" }, .F., .F. ), )

   _HB_MEMBER New( nWidth, nHeight); IIF( .F., s_oClass:ModMethod( "New", @TImageList_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TImageList_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));




   _HB_MEMBER Add(oBmpImage, oBmpMask); IIF( .F., s_oClass:ModInline( "Add", {|Self,oBmpImage, oBmpMask | Self, AAdd( ::aBitmaps, oBmpImage ), AAdd( ::aBitmaps, oBmpMask ), ILAdd( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), If( oBmpMask <> nil, oBmpMask:hBitmap, 0 ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Add", {|Self,oBmpImage, oBmpMask | Self, AAdd( ::aBitmaps, oBmpImage ), AAdd( ::aBitmaps, oBmpMask ), ILAdd( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), If( oBmpMask <> nil, oBmpMask:hBitmap, 0 ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER AddIcon( oIcon); IIF( .F., s_oClass:ModMethod( "AddIcon", @TImageList_AddIcon(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddIcon", @TImageList_AddIcon(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));




   _HB_MEMBER AddMasked(oBmpImage, nClrMask); IIF( .F., s_oClass:ModInline( "AddMasked", {|Self,oBmpImage, nClrMask | Self, AAdd( ::aBitmaps, oBmpImage ), ILAddMasked( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), nClrMask ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "AddMasked", {|Self,oBmpImage, nClrMask | Self, AAdd( ::aBitmaps, oBmpImage ), ILAddMasked( ::hImageList, If( oBmpImage <> nil, oBmpImage:hBitmap, 0 ), nClrMask ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TImageList_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TImageList_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetBkColor(nColor); IIF( .F., s_oClass:ModInline( "SetBkColor", {|Self,nColor | Self, ILSetBkColor( ::hImageList, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetBkColor", {|Self,nColor | Self, ILSetBkColor( ::hImageList, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TImageList ;



UTILITY STATIC function TImageList_New( nWidth, nHeight) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   IIF( nWidth == nil, nWidth := 16, ) ; IIF( nHeight == nil, nHeight := 16, );

   ::hImageList = ILCreate( nWidth, nHeight )
   ::aBitmaps   = {}

return Self



UTILITY STATIC function TImageList_AddIcon( oIcon) ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local oIco

   if ValType( oIcon ) == "C"
      if File( "oIcon" )
         oIco := TIcon():New( ,,, oIcon, )
      else
         oIco := TIcon():New( ,, oIcon,, )
      endif
   else
      oIco = oIcon
   endif

return ILAddIcon( ::hImageList, oIco:hIcon )



UTILITY STATIC function TImageList_End() ; local Self AS CLASS TImageList := QSelf() AS CLASS TImageList

   local n

   ILDestroy( ::hImageList )

   for n = 1 to Len( ::aBitmaps )
      ::aBitmaps[ n ]:End()
   next

   ::aBitmaps = {}

return nil

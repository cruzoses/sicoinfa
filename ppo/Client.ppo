#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 195 ".\Prg\Client.prg"
memvar dbfCli
memvar cDbfCli
memvar dbfObr
memvar cDbfObr
memvar dbfCon
memvar cDbfCon

static oWndBrw
static dbfConfig
static dbfClient
static filClient
static tmpClient
static dbfClientD
static dbfCliAtp
static dbfAlbCliT
static dbfAlbCliL
static dbfFacCliT
static dbfFacCliL
static dbfFacCliP
static dbfAntCliT
static dbfPro
static dbfCliInc
static dbfProL
static dbfTikT
static dbfTikL
static dbfTikP
static dbfArticulo
static dbfArtKit
static dbfFPago
static dbfIva
static dbfDoc
static cFpago
static dbfDiv
static dbfFamilia
static oBandera
static dbfObrasT
static dbfContactos
static dbfBanco
static dbfAlmT
static dbfTmpDoc
static dbfTmpObr
static dbfTmpBnc
static dbfTmpAtp
static dbfTmpInc
static dbfTmpCon
static dbfTmpSubCta
static dbfArtDiv
static dbfInci
static dbfFlt
static dbfOfe
static oTrans
static cTmpDoc
static cTmpObr
static cTmpBnc
static cTmpAtp
static cTmpCta
static cTmpInc
static cTmpCon
static oFacAut
static oGrpCli
static oPais
static oCtaRem
static cAgente
static oNewImp
static cPinDiv
static cPouDiv
static cPorDiv
static aRgbColor
static oMenu
static oStock
static oBanco
static aFacAut          := {}

static oRTF
static cRTF
static lBold
static lItalic
static lUnderline
static lBullet

static aRentabilidad    := { { "", "", 0, .T., .F. } }
static aStrClients      := { "Clientes", "Potenciales", "Web" }

static lExpandida       := .F.

static lExternal        := .F.
static lOpenFiles       := .F.

static nLabels          := 1



static aIniCli          := Array( 11 )

static bEdtRec          := { | aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode ) }
static bEdtBig          := { | aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode | EdtBig( aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode ) }
static bEdtAtp          := { | aTmp, aGet, dbfCliAtp, oBrw, bWhen, bValid, nMode | EdtAtp( aTmp, aGet, dbfCliAtp, oBrw, bWhen, bValid, nMode ) }
static bEdtDoc          := { | aTmp, aGet, dbfClientD, oBrw, bWhen, bValid, nMode, cCodCli | EdtDoc( aTmp, aGet, dbfClientD, oBrw, bWhen, bValid, nMode, cCodCli ) }
static bEdtBnc          := { | aTmp, aGet, dbfBanco, oBrw, bWhen, bValid, nMode, cCodCli | EdtBnc( aTmp, aGet, dbfBanco, oBrw, bWhen, bValid, nMode, cCodCli ) }
static bEdtInc          := { | aTmp, aGet, dbfCliInc, oBrw, bWhen, bValid, nMode | EdtInc( aTmp, aGet, dbfCliInc, oBrw, bWhen, bValid, nMode ) }











static oReporting







FUNCTION Client( oMenuItem, oWnd, cCodCli )

   local oSnd
   local oRpl
   local oDel
   local nLevel
   local oRotor

   IIF( oMenuItem == nil, oMenuItem := "01032", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

   if Empty( oWndBrw )





      nLevel            := nLevelUsr( oMenuItem )

      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles( .F. )
         return nil
      end





      DisableAcceso()
























      oWndBrw := TShell():New( 0, 0, 22, 80, "Clientes",, oWnd,,, .F.,,, ( dbfClient ),,,,, {"Código", "Nombre", if( uFieldEmpresa( "nCifRut" ) == 1, "NIF/CIF", "RUT" ), "Población", "Provincia", "Código postal", "Teléfono", "Establecimiento", "Correo electrónico", "Cliente web" , if( Empty( AllTrim( aIniCli[1] ) ), "Campo definido 1", AllTrim( aIniCli[1] ) ) , if( Empty( AllTrim( aIniCli[2] ) ), "Campo definido 2", AllTrim( aIniCli[2] ) ) , if( Empty( AllTrim( aIniCli[3] ) ), "Campo definido 3", AllTrim( aIniCli[3] ) )}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, dbfClient ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, dbfClient ) )}, {||( WinDelRec( oWndBrw:oBrw, dbfClient ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, dbfClient ) )}, nil, nLevel, "User1_16",,,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Bloqueado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->lBlqCli }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "stop_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->lSndInt }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "LBl16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Internet"
         :cSortOrder       := "lPubInt"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->lPubInt }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "SNDINT16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tarifas atipicas"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfCliAtp )->( dbSeek( ( dbfClient )->Cod ) ) }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "PERCENT_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Potencial"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->nTipCli == 2 }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "CLIPOT" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Cod"
         :bEditValue       := {|| ( dbfClient )->Cod }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Titulo"
         :bEditValue       := {|| ( dbfClient )->Titulo }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end


      with object ( oWndBrw:AddXCol() )
         if uFieldEmpresa( "nCifRut" ) == 1
         :cHeader          := "NIF/CIF"
         else
         :cHeader          := "RUT"
         :cEditPicture     := "@R 999999999-9"
         end
         :cSortOrder       := "Nif"
         :bEditValue       := {|| ( dbfClient )->Nif }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Teléfono"
         :cSortOrder       := "Telefono"
         :bEditValue       := {|| ( dbfClient )->Telefono }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfClient )->Fax }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfClient )->Domicilio }
         :nWidth           := 300
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Población"
         :cSortOrder       := "Poblacion"
         :bEditValue       := {|| ( dbfClient )->Poblacion }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código postal"
         :cSortOrder       := "CodPostal"
         :bEditValue       := {|| ( dbfClient )->CodPostal }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Provincia"
         :cSortOrder       := "Provincia"
         :bEditValue       := {|| ( dbfClient )->Provincia }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Establecimiento"
         :cSortOrder       := "NbrEst"
         :bEditValue       := {|| ( dbfClient )->NbrEst }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Correo electrónico"
         :cSortOrder       := "cMeiInt"
         :bEditValue       := {|| ( dbfClient )->cMeiInt }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Riesgo"
         :bEditValue       := {|| Trans( ( dbfClient )->Riesgo, PicOut() ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfClient )->cPerCto }
         :nWidth           := 200
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Observaciones"
         :bEditValue       := {|| ( dbfClient )->mComent }
         :nWidth           := 200
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cliente web"
         :cSortOrder       := "cCliWeb"
         :bEditValue       := {|| aStrClients[ Min( Max( ( dbfClient )->nTipCli, 1 ), len( aStrClients ) ) ] }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := if( Empty( AllTrim( aIniCli[1] ) ), "Campo definido 1", AllTrim( aIniCli[1] ) )
         :cSortOrder       := "cUsrDef01"
         :bEditValue       := {|| ( dbfClient )->cUsrDef01 }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := if( Empty( AllTrim( aIniCli[2] ) ), "Campo definido 2", AllTrim( aIniCli[2] ) )
         :cSortOrder       := "cUsrDef02"
         :bEditValue       := {|| ( dbfClient )->cUsrDef02 }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := if( Empty( AllTrim( aIniCli[3] ) ), "Campo definido 3", AllTrim( aIniCli[3] ) )
         :cSortOrder       := "cUsrDef03"
         :bEditValue       := {|| ( dbfClient )->cUsrDef03 }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      oWndBrw:cHtmlHelp    := "Clientes"

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








        oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )





        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, dbfClient ) )}, "(Z)oom", "Z",,,,, .F. )






      oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )







         oWndBrw:NewAt( "DEL",,, {||( TDelTarifasClientes():New() )}, "Eliminar tarifas",,,, 16, oDel, .F. )








      oWndBrw:NewAt( "INFO",,, {||( BrwVtaCli( ( dbfClient )->Cod, ( dbfClient )->Titulo ) )}, "(I)nforme cliente", "I",,, 8,, .F. )





        oWndBrw:NewAt( "IMP",,, {||( TInfCliGrp():New( "Listado de clientes" ):Play() )}, "Lis(t)ado", "T",,,,, .F. )





      oWndBrw:NewAt( "IMP",,, {||( TarCli():New( "Tarifas personalizadas por clientes" ):Play() )}, "Listad(o) de tarifas", "O",,,,, .F. )






      oWndBrw:NewAt( "Document_Chart_",,, {||( ReportingClient() )}, "Rep(o)rting", "O",,, 32,, .F. )







      oWndBrw:NewAt( "RemoteControl_",,, {||( TClienteLabelGenerator():Create() )}, "Eti(q)uetas", "Q",,,,, .F. )






      oWndBrw:NewAt( "Mail",,, {||( TGenMailing():ClientResource( dbfClient, aItmCli(), oWndBrw ) )}, "Enviar correos", "V",,, 32,, .F. )








      oSnd := oWndBrw:NewAt( "Lbl",, "Seleccionar clientes para ser enviados", {||lSndCli( oWndBrw, dbfClient )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "Lbl",,, {||lSndCli( oWndBrw, dbfClient, .T. )}, "Seleccionar para envio",,,, 4, oSnd, .F. )







         oWndBrw:NewAt( "Lbl",,, {||lSndCli( oWndBrw, dbfClient, .F. )}, "Deseleccionar para envio",,,, 4, oSnd, .F. )






      oWndBrw:NewAt( "BMPCONTA",,, {||( ChkAllSubCta() )}, "Com(p)robar subcuentas", "P",,, 4,, .F. )

      if oUser():lAdministrador()






         oWndBrw:NewAt( "CHGPRE",,, {||( ChgPrc( dbfCliAtp, oWndBrw ) )}, "(C)ambiar precios", "C",,, 2,, .F. )






         oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmCli(), dbfClient ):ChgFields() )}, "Cambiar campos",,, {|This|This:Toggle()}, 2,, .F. )







            oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmAtp(), dbfCliAtp ):ChgFields() )}, "Tarifa",,,, 4, oRpl, .F. )

      end






        oWndBrw:NewAt( "CNFCLI",,, {||( CnfCli( dbfClient ) )}, "Confi(g)urar", "G",,, 2,, .F. )





      oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,, 4,, .F. )






         oWndBrw:NewAt( "Notebook_user1_",,, {||( PreCli( nil, oWnd, ( dbfClient )->Cod, nil ) )}, "Añadir presupuesto de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Clipboard_empty_user1_",,, {||( PedCli( nil, oWnd, ( dbfClient )->Cod, nil ) )}, "Añadir pedido de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Document_plain_user1_",,, {||( AlbCli( nil, oWnd, ( dbfClient )->Cod, nil ) )}, "Añadir albarán de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Document_user1_",,, {||( FactCli( nil, oWnd, ( dbfClient )->Cod, nil ) )}, "Añadir factura de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Cashier_user1_",,, {||( FrontTpv( nil, oWnd, ( dbfClient )->Cod, nil ) )}, "Añadir tiket de cliente",,,, 4, oRotor, .T. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )





      oWndBrw:oActiveFilter:aTField       := aItmCli()
      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt
      oWndBrw:oActiveFilter:cTipFilter    := "21"





      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles( .T. ) )},, oWndBrw:bLButtonUp )

      EnableAcceso()

   else

        oWndBrw:SetFocus()

   end

Return ( .T. )







STATIC FUNCTION EdtBig( aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oBmpGeneral
   local cResource      := "BigEdtCliente"

   if ( nMode == 1 .OR. nMode == 4 )
      aTmp[ 1     ]  := NextKey( aTmp[ 1 ], dbfClient, "0", RetNumCodCliEmp() )
      aTmp[ 86 ]  := .T.
      aTmp[ 106 ]  := .T.
      aTmp[ 52 ]  := .T.
      aTmp[ 32 ]  := 0
      aTmp[ 42  ]  := 1
      aTmp[ 40 ]  := 1
   end

   if GetSysMetrics( 1 ) == 560

      oDlg = TDialog():New(,,,, ( LblTitle( nMode ) + "cliente" ), "BigEdtCliente_1024x576",, .F.,,,,,, .F.,,,,,, .F., )

   else

      oDlg = TDialog():New(,,,, ( LblTitle( nMode ) + "cliente" ), cResource,, .F.,,,,,, .F.,,,,,, .F., )

   end





      oBmpGeneral := TBitmap():ReDefine( 500, "Businessman2_Alpha_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )






      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oDlg,, ( Replicate( "X", RetNumCodCliEmp() ) ), {||    ( NotValid( aGet[ 1 ], dbfClient, .T., "0", 1, RetNumCodCliEmp() ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oDlg,, "@!", {||    ( if( nMode == 1, lValidNombre( aGet[2] ), .T. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ActTitle( nKey, nFlags, Self, nMode, oDlg ) ) }, .F., .F.,,,,,, nil,,, )





      aGet[ 4 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 4 ], Rtrim( aTmp[ 5 ] ) + Space( 1 ) + Rtrim( aTmp[ 6 ] ) )}, nil,,, )





      aGet[ 5 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      aGet[ 7 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 8 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oDlg,,, {||    ( if( nMode == 1, lValidTlf( aGet[8] ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      if uFieldEmpresa( "nCifRut" ) <= 1






      aGet[ 3 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oDlg,, "@!", {||    ( CheckCif( aGet[ 3 ] ), if( nMode == 1, lValidCif( aGet[ 3 ] ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      else






      aGet[ 3 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oDlg,, "@R 999999999-9", {||    ( CheckRut( aGet[ 3 ] ), if( nMode == 1, lValidCif( aGet[ 3 ] ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      end







      aGet[ 50 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oDlg,,,, "N/W*",,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ShellExecute( oDlg:hWnd, "open", "mailto:" + Rtrim( aGet[ 50 ]:cText() ) ) )}, nil,,, )






      aGet[ 44 ] := TMultiGet():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oDlg,, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, .F.,, )









      TButton():ReDefine( 1, {||( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmpGeneral:End()

RETURN ( oDlg:nResult == 1 )






STATIC FUNCTION EdtRec( aTmp, aGet, dbfClient, oBrw, bWhen, bValid, nMode )

    local oDlg
    local oFld
   local oGetSubCta
   local oGetSubDto
   local oBrwCta
    local oBrwObr
   local oBrwAtp
   local oBrwDoc
   local oBrwBnc
   local oBrwInc
   local oBrwCon
   local oBrwFacAut
   local oBmpDiv
   local oGet
   local cColor
   local nImpRie        := 0
   local cTipCli
   local cTipRetencion
   local nSeaColor
   local oGetSalDto
   local nGetSalDto     := 0
   local oSay           := Array( 9 )
   local cSay           := Array( 9 )
   local oGetCta
    local cGetSubCta        := Space( 30 )
   local cGetSubDto     := Space( 30 )
    local cGetCta            := Space( 30 )
   local nGetDebe       := 0
   local nGetHaber      := 0
   local oGetSaldo
   local nGetSaldo      := 0
   local aStrColor      := { "Ninguno", "Verde", "Naranja", "Rojo" }
   local aResColor      := { "COLOR_00", "COLOR_01", "COLOR_02", "COLOR_03" }
   local aStrRetencion  := { "Ret. S/Base", "Ret. S/Total" }
   local aResClients    := { "Cli", "CliPot", "CliPot" }
   local aMes           := { "Ninguno", "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }
   local oFiltroAtp
   local cFiltroAtp     := aIniCli[ 11 ]
   local aFiltroAtp     := { "Todas", "Activas" }
   local oZoom
   local cZoom          := "100%"
   local aZoom          := { "500%", "200%", "150%", "100%", "75%", "50%", "25%", "10%" }
   local oFuente
   local cFuente        := "Arial"
   local aFuente        := aGetFont( oWnd() )
   local oSize
   local cSize          := "10"
   local aSize          := { " 6", " 7", " 8", " 9", "10", "11", "12", "13", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" }
   local oClp
   local oBtn           := Array( 17 )
   local aRatio         := { { 5, 1 }, { 2, 1 }, { 3, 2 }, { 1, 1 }, { 3, 4 }, { 1, 2 }, { 1, 4 }, { 1, 10 } }
   local oBmpGeneral
   local oBmpComercial
   local oBmpDirecciones
   local oBmpContactos
   local oBmpBancos
   local oBmpContabilidad
   local oBmpComentario
   local oBmpTarifa
   local oBmpDocumentos
   local oBmpIncidencias
   local oBmpObservaciones
   local oBmpAutomaticas

   aFacAut              := hb_aTokens( aTmp[ 118 ], "," )

   aRgbColor            := { ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), ( 102 + ( 204 * 256 ) + ( 51 * 65536 ) ), ( 255 + ( 204 * 256 ) + ( 102 * 65536 ) ), ( 255 + ( 51 * 256 ) + ( 0 * 65536 ) ) }

   nSeaColor            := aScan( aRgbColor, aTmp[ 91 ] )
   if nSeaColor <> 0
      cColor            := aStrColor[ nSeaColor ]
   end

   do case
      case nMode == 1
         aTmp[ 86 ]  := .T.
         aTmp[ 106 ]  := .T.
         aTmp[ 52 ]  := .T.
         aTmp[ 32 ]  := 0
         aTmp[ 42  ]  := 1
         aTmp[ 40 ]  := 1

      case nMode == 4
         aTmp[ 1 ]      := NextKey( aTmp[ 1 ], dbfClient, "0", RetNumCodCliEmp() )

      otherwise
         nImpRie           := oStock:nRiesgo( aTmp[ 1 ] )

   end

   aTmp[ 89 ]        := aMes[ Min( Max( aTmp[ 89 ], 1 ), len( aMes ) ) ]

   cTipCli                 := aStrClients[ Min( Max( aTmp[ 20 ], 1 ), len( aStrClients ) ) ]

   cTipRetencion           := aStrRetencion[ Min( Max( aTmp[ 102 ], 1 ), len( aStrRetencion ) ) ]

   if Empty( aTmp[ 22 ] )
      aTmp[ 22 ]     := Padr( "General", 50 )
   end

   if Empty( aTmp[ 24 ] )
      aTmp[ 24 ]        := Padr( "Pronto pago", 50 )
   end

   if Empty( aTmp[ 96 ] )
      aTmp[ 96 ]     := Padr( "Atipico", 50 )
   end





   if BeginTrans( aTmp, nMode )
      Return .F.
   end







   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Cliente : " + Rtrim( aTmp[ 2 ] ), "CLIENT",, .F.,,,,,, .F.,,,,,, .F., )



























        oFld := TFolder():ReDefine( 500, {"&General", "C&omercial", "Au&tomáticas", "&Direcciones", "C&ontactos", "&Bancos", "Co&ntabilidad", "Definidos", "&Tarifa", "Doc&umentos", "&Incidencias", "Ob&servaciones"}, { "CLIENT_0","CLIENT_1","CLIENT_17","CLIENT_15","CLIENT_16","CLIENT_2","CLIENT_3","CLIENT_4","CLIENT_5","CLIENT_10","CLIENT_12","CLIENT_14" }, oDlg,,,,, .F., )








      oBmpGeneral := TBitmap():ReDefine( 500, "Businessman2_Alpha_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )









      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[1],, ( Replicate( "X", RetNumCodCliEmp() ) ), {||    ( NotValid( oGet, dbfClient, .T., "0", 1, RetNumCodCliEmp() ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( oGet:cText( NextKey( aTmp[ 1 ], dbfClient, "0", RetNumCodCliEmp() ) ) )}, nil, "BOT",, )






      aGet[ 20 ] := TComboBox():ReDefine( 105, { | u | If( PCount()==0, cTipCli, cTipCli:= u ) }, aStrClients, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, aResClients,,,, )








      aGet[2] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[2], aTmp[2]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( if( nMode == 1, lValidNombre( aGet[2] ), .T. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ActTitle( nKey, nFlags, Self, nMode, oDlg ) ) }, .F., .F.,,,,,, nil,,, )

      if uFieldEmpresa( "nCifRut" ) <= 1






      aGet[ 3 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( CheckCif( aGet[ 3 ] ), if( nMode == 1, lValidCif( aGet[ 3 ] ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      else






      aGet[ 3 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],, "@R 999999999-9", {||    ( CheckRut( aGet[ 3 ] ), if( nMode == 1, lValidCif( aGet[ 3 ] ), .T. ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      end






      aGet[ 4 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 4 ], Rtrim( aTmp[ 5 ] ) + Space( 1 ) + Rtrim( aTmp[ 6 ] ) )}, nil, "Environnment_View_16",, )




      aGet[ 113 ] := TGetHlp():ReDefine( 145, { | u | If( PCount()==0, aTmp[ 113 ], aTmp[ 113 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 5 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 7 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 6 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 47 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oPais:GetPais( aTmp[ 47 ], oSay[6], oBmpDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oPais:Buscar( aGet[ 47 ] ) )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 301, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )





      oSay[6] := TGetHlp():ReDefine( 302, { | u | If( PCount()==0, cSay[6], cSay[6]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )






      aGet[ 87 ] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[ 87 ], aTmp[ 87 ]:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 91 ] := TComboBox():ReDefine( 95, { | u | If( PCount()==0, cColor, cColor:= u ) }, aStrColor, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, aResColor,,,, )






      aGet[8] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oFld:aDialogs[1],,, {||    ( if( nMode == 1, lValidTlf( aGet[8] ), .T. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[9] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[10] := TGetHlp():ReDefine( 195, { | u | If( PCount()==0, aTmp[10], aTmp[10]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ 40 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 40 ] >= 1 .AND. aTmp[ 40 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( lUsrMaster() .OR. oUser():lCambiarPrecio() ) )},, .F., .T.,,, {||      1}, {||      6},, nil,,, )









      aGet[ 116 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 116 ] >= 0 .AND. aTmp[ 116 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( lUsrMaster() .OR. oUser():lCambiarPrecio() ) )},, .F., .T.,,, {||      0}, {||      6},, nil,,, )








      aGet[43] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[43], aTmp[43]:= u ) }, oFld:aDialogs[1],,, {||    ( cTarifa( aGet[43], oSay[3] ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[43], oSay[3] ) )}, nil, "LUPA",, )





      oSay[3] := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, cSay[3], cSay[3]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )









      aGet[21] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cFPago( aGet[21], dbfFPago, oSay[1] ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[21 ], oSay[1] ) )}, nil, "LUPA",, )





      oSay[1] := TGetHlp():ReDefine( 211, { | u | If( PCount()==0, cSay[1], cSay[1]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )







      aGet[13] := TGetHlp():ReDefine( 232, { | u | If( PCount()==0, aTmp[13], aTmp[13]:= u ) }, oFld:aDialogs[1],, "99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )










      aGet[14] := TGetHlp():ReDefine( 233, { | u | If( PCount()==0, aTmp[14], aTmp[14]:= u ) }, oFld:aDialogs[1],, "99", {||    ( if( ( aTmp[14] <> 0 .AND. aTmp[14] <= aTmp[13] ), ( msgStop( "Segundo día de pago debe ser mayor que el primero" ), .F. ), .T. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      aGet[ 50 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ShellExecute( oDlg:hWnd, "open", "mailto:" + Rtrim( aGet[ 50 ]:cText() ) ) )}, nil, "MAIL16",, )












      aGet[49] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[49], aTmp[49]:= u ) }, oFld:aDialogs[1],,, {||    ( oCtaRem:lGetCtaRem( aGet[49], oSay[8] ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oCtaRem:Buscar( aGet[49] ) )}, nil, "LUPA",, )




      oSay[8] := TGetHlp():ReDefine( 321, { | u | If( PCount()==0, cSay[8], cSay[8]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )








      aGet[45] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[45], aTmp[45]:= u ) }, oFld:aDialogs[1],,, {||    ( cRuta( aGet[45], nil, oSay[4] ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[45], nil, oSay[4] ) )}, nil, "LUPA",, )





      oSay[4] := TGetHlp():ReDefine( 221, { | u | If( PCount()==0, cSay[4], cSay[4]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 38 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAgentes( aGet[ 38 ], , oSay[2] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 38 ], oSay[2] ) )}, nil, "LUPA",, )





      oSay[2] := TGetHlp():ReDefine( 231, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 48 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oGrpCli:Existe( aGet[ 48 ], oSay[ 5 ], "cNomGrp", .T., .T., "0" ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpCli:Buscar( aGet[ 48 ] ) )}, nil, "LUPA",, )






      oSay[5] := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, cSay[5], cSay[5]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )












      aGet[ 88 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 88 ], aTmp[ 88 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 88 ], dbfAlmT, oSay[7] ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 88 ], oSay[7] ) )}, nil, "LUPA",, )




      oSay[ 7 ] := TGetHlp():ReDefine( 311, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )













      aGet[ 33 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( Empty( aTmp[ 33 ] ) .OR. ( aTmp[ 33 ] >= "A" .AND. aTmp[ 33 ] <= "Z" ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T., {||    ( UpSerie( aGet[ 33 ] ) )}, {||  ( DwSerie( aGet[ 33 ] ) )},,,, nil,,, )









      TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "9",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      9},, nil,,, )




      TCheckBox():ReDefine( 157, { | u | If( PCount()==0, aTmp[ 54 ], aTmp[ 54 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 158, { | u | If( PCount()==0, aTmp[ 106 ], aTmp[ 106 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 159, { | u | If( PCount()==0, aTmp[ 107 ], aTmp[ 107 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )










      aGet[ 108 ] := TGetHlp():ReDefine( 315, { | u | If( PCount()==0, aTmp[ 108 ], aTmp[ 108 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, 316 )

      aGet[ 108 ]:bValid := {|| oTrans:Existe( aGet[ 108 ], aGet[ 108 ]:oHelpText ) }
      aGet[ 108 ]:bHelp  := {|| oTrans:Buscar( aGet[ 108 ] ) }










      oBmpComercial := TBitmap():ReDefine( 500, "Address_book2_Alpha_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )








      aGet[11] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[2],, "@!",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[12] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[12], aTmp[12]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ 51 ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 110 ], aTmp[ 110 ]:= u ) }, oFld:aDialogs[2],, {||( lPubInt( nMode, aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[ 111 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 111 ], aTmp[ 111 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )












      aGet[ 34 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[2],, { 240, 241, 242, 243 },,,,, .F., {||     ( nMode <> 3 )}, )




      TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[35], aTmp[35]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( aTmp[34] == 1 .AND. nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 52 ], aTmp[ 52 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( oUser():lAdministrador() .AND. nMode <> 3 .AND. !aTmp[ 93 ] )}, .F. )




      TCheckBox():ReDefine( 145, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( oUser():lAdministrador() .AND. aTmp[ 52 ] .AND. nMode <> 3 .AND. !aTmp[ 93 ] )}, .F. )





      TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[2],, cPorDiv,,,,,,, .F., {||     ( oUser():lAdministrador() .AND. aTmp[ 52 ] .AND. nMode <> 3 .AND. !aTmp[ 93 ] )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 251, { | u | If( PCount()==0, nImpRie, nImpRie:= u ) }, oFld:aDialogs[2],, cPorDiv,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )










      aGet[ 22 ] := TGetHlp():ReDefine( 159, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[2],,, {||    ( lRecargaArray( aGet, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[23] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[23], aTmp[23]:= u ) }, oFld:aDialogs[2],, "@E 999.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 24 ] := TGetHlp():ReDefine( 169, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[2],,, {||    ( lRecargaArray( aGet, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[25] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[25], aTmp[25]:= u ) }, oFld:aDialogs[2],, "@E 999.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 28 ] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[2],,, {||    ( lRecargaArray( aGet, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 26 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 26 ], aTmp[ 26 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[ 29 ] := TGetHlp():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[2],,, {||    ( lRecargaArray( aGet, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 96 ] := TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 27 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 97 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 97 ], aTmp[ 97 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[ 98 ] := TComboBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 98 ], aTmp[ 98 ]:= u ) },, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )},,,,, )





      aGet[ 93 ] := TCheckBox():ReDefine( 155, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[2],, {||( if( aTmp[ 93 ], aGet[ 104 ]:cText( GetSysDate() ), ( aGet[ 104 ]:cText( Ctod("") ), aGet[ 105 ]:cText( Space(50) ) ) ) )},,,,, .F., {||     ( oUser():lAdministrador() .AND. nMode <> 3 )}, .F. )





      aGet[ 104 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( oUser():lAdministrador() .AND. nMode <> 3 .AND. aTmp[ 93 ] )},, .F., .T.,,,,,, nil,,, )




      aGet[ 105 ] := TGetHlp():ReDefine( 157, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( oUser():lAdministrador() .AND. nMode <> 3 .AND. aTmp[ 93 ] )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[65], aTmp[65]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 231, { | u | If( PCount()==0, aTmp[66], aTmp[66]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 232, { | u | If( PCount()==0, aTmp[67], aTmp[67]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 233, { | u | If( PCount()==0, aTmp[68], aTmp[68]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 234, { | u | If( PCount()==0, aTmp[69], aTmp[69]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 235, { | u | If( PCount()==0, aTmp[70], aTmp[70]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 236, { | u | If( PCount()==0, aTmp[71], aTmp[71]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )









      aGet[ 72 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 72 ], aTmp[ 72 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 65 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 73 ] := TGetHlp():ReDefine( 331, { | u | If( PCount()==0, aTmp[ 73 ], aTmp[ 73 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 66 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 74 ] := TGetHlp():ReDefine( 332, { | u | If( PCount()==0, aTmp[ 74 ], aTmp[ 74 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 67 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 75 ] := TGetHlp():ReDefine( 333, { | u | If( PCount()==0, aTmp[ 75 ], aTmp[ 75 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 68 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 76 ] := TGetHlp():ReDefine( 334, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 69 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 77 ] := TGetHlp():ReDefine( 335, { | u | If( PCount()==0, aTmp[ 77 ], aTmp[ 77 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 70 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )









      aGet[ 78 ] := TGetHlp():ReDefine( 336, { | u | If( PCount()==0, aTmp[ 78 ], aTmp[ 78 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 71 ] )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )







      aGet[ 79 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 79 ], aTmp[ 79 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 79 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 65 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 79 ] ) )}, nil, "LUPA",, )







      aGet[ 80 ] := TGetHlp():ReDefine( 431, { | u | If( PCount()==0, aTmp[ 80 ], aTmp[ 80 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 80 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 66 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 80 ] ) )}, nil, "LUPA",, )







      aGet[ 81 ] := TGetHlp():ReDefine( 432, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 81 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 67 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 81 ] ) )}, nil, "LUPA",, )







      aGet[ 82 ] := TGetHlp():ReDefine( 433, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 82 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 68 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 82 ] ) )}, nil, "LUPA",, )







      aGet[ 83 ] := TGetHlp():ReDefine( 434, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 83 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 69 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 83 ] ) )}, nil, "LUPA",, )







      aGet[ 84 ] := TGetHlp():ReDefine( 435, { | u | If( PCount()==0, aTmp[ 84 ], aTmp[ 84 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 84 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 70 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 84 ] ) )}, nil, "LUPA",, )







      aGet[ 85 ] := TGetHlp():ReDefine( 436, { | u | If( PCount()==0, aTmp[ 85 ], aTmp[ 85 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cAgentes( aGet[ 85 ] ) )},,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 71 ] )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 85 ] ) )}, nil, "LUPA",, )






      aGet[ 89 ] := TComboBox():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 89 ], aTmp[ 89 ]:= u ) }, aMes, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )},,,,, )






      aGet[ 102 ] := TComboBox():ReDefine( 310, { | u | If( PCount()==0, cTipRetencion, cTipRetencion:= u ) }, aStrRetencion, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )},,,,, )







      aGet[ 103 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 103 ], aTmp[ 103 ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 158, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )









      oBmpAutomaticas := TBitmap():ReDefine( 500, "Document_Gear_48_alpha",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 501, {||( AddFacAut( oBrwFacAut ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( oFacAut:ExternalEdit( if( Len( aFacAut ) > 0, aFacAut[ oBrwFacAut:nArrayAt ], "" ) ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( DelFacAut( oBrwFacAut ) )}, oFld:aDialogs[3],,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwFacAut                        := IXBrowse():New( oFld:aDialogs[3] )

      oBrwFacAut:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFacAut:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFacAut:SetArray( aFacAut, , , .F. )

      oBrwFacAut:nMarqueeStyle          := 5

      oBrwFacAut:CreateFromResource( 400 )

      with object ( oBrwFacAut:AddCol() )
         :cHeader          := "Código"
         :bStrData         := {|| if( Len( aFacAut ) > 0, aFacAut[ oBrwFacAut:nArrayAt ], "" ) }
         :nWidth           := 75
      end

      with object ( oBrwFacAut:AddCol() )
         :cHeader          := "Nombre"
         :bStrData         := {|| if( Len( aFacAut ) > 0, RetFld( aFacAut[ oBrwFacAut:nArrayAt ], oFacAut:oDbf:cAlias, "cNomFac" ), "" ) }
         :nWidth           := 565
      end









      oBmpDirecciones := TBitmap():ReDefine( 600, "Signpost_Alpha_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 500, {||( AppObras( aTmp[ 1 ], dbfTmpObr, oBrwObr ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( EdtObras( aTmp[ 1 ], nil, dbfTmpObr, oBrwObr, .T. ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DelObras( dbfTmpObr, oBrwObr ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( ZoomObras( dbfTmpObr, oBrwObr ) )}, oFld:aDialogs[4],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( PredObras( dbfTmpObr, oBrwObr ) )}, oFld:aDialogs[4],,, .F.,,,, .F. )

      oBrwObr                 := IXBrowse():New( oFld:aDialogs[4] )

      oBrwObr:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwObr:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwObr:cAlias          := dbfTmpObr
      oBrwObr:nMarqueeStyle   := 5
      oBrwObr:cName           := "Clientes.Obras"

       with object ( oBrwObr:AddCol() )
         :cHeader          := "Defecto"
         :bEditValue       := {|| ( dbfTmpObr )->lDefObr }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpObr )->cCodObr }
         :nWidth           := 60
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Nombre domicilio"
         :bEditValue       := {|| ( dbfTmpObr )->cNomObr }
         :nWidth           := 120
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfTmpObr )->cDirObr }
         :nWidth           := 120
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| ( dbfTmpObr )->cPobObr }
         :nWidth           := 100
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| ( dbfTmpObr )->cPosObr }
         :nWidth           := 60
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| ( dbfTmpObr )->cPrvObr }
         :nWidth           := 80
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Teléfono"
         :bEditValue       := {|| ( dbfTmpObr )->cTelObr }
         :nWidth           := 80
      end

      with object ( oBrwObr:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfTmpObr )->cFaxObr }
         :nWidth           := 80
      end

      oBrwObr:bRClicked       := {| nRow, nCol, nFlags | oBrwObr:RButtonDown( nRow, nCol, nFlags ) }
      if nMode <> 3
         oBrwObr:bLDblClick   := {|| EdtObras( aTmp[ 1 ], nil, dbfTmpObr, oBrwObr, .T. ) }
      end

      oBrwObr:CreateFromResource( 400 )









      oBmpContactos := TBitmap():ReDefine( 600, "User_mobilephone_Alpha_48",, oFld:aDialogs[5],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 500, {||( AppContactos( aTmp[ 1 ], dbfTmpCon, oBrwCon ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( EdtContactos( dbfTmpCon, oBrwCon ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DelContactos( dbfTmpCon, oBrwCon ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( ZoomContactos( dbfTmpCon, oBrwCon ) )}, oFld:aDialogs[5],,, .F.,,,, .F. )

      oBrwCon                 := IXBrowse():New( oFld:aDialogs[5] )

      oBrwCon:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwCon:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwCon:cAlias          := dbfTmpCon
      oBrwCon:nMarqueeStyle   := 5
      oBrwCon:cName           := "Clientes.Contactos"

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Nombre"
         :cSortOrder          := "cNomCon"
         :bEditValue          := {|| ( dbfTmpCon )->cNomCon }
         :nWidth              := 120
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Domicilio"
         :bEditValue          := {|| ( dbfTmpCon )->cDirCon }
         :nWidth              := 120
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Población"
         :bEditValue          := {|| ( dbfTmpCon )->cPobCon }
         :nWidth              := 80
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Código postal"
         :bEditValue          := {|| ( dbfTmpCon )->cPosCon }
         :nWidth              := 60
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Provincia"
         :bEditValue          := {|| ( dbfTmpCon )->cPrvCon }
         :nWidth              := 80
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Teléfono"
         :bEditValue          := {|| ( dbfTmpCon )->cTelCon }
         :nWidth              := 80
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Movil"
         :bEditValue          := {|| ( dbfTmpCon )->cMovCon }
         :nWidth              := 80
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Fax"
         :lHide               := .T.
         :bEditValue          := {|| ( dbfTmpCon )->cFaxCon }
         :nWidth              := 80
      end

      with object ( oBrwCon:AddCol() )
         :cHeader             := "Email"
         :bEditValue          := {|| ( dbfTmpCon )->cMaiCon }
         :nWidth              := 120
      end

      oBrwCon:bRClicked       := {| nRow, nCol, nFlags | oBrwCon:RButtonDown( nRow, nCol, nFlags ) }
      if nMode <> 3
         oBrwCon:bLDblClick   := {|| EdtContactos( dbfTmpCon, oBrwCon ) }
      end

      oBrwCon:CreateFromResource( 400 )









      oBmpBancos := TBitmap():ReDefine( 500, "Money_Alpha_48",, oFld:aDialogs[6],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 101, {||( WinAppRec( oBrwBnc, bEdtBnc, dbfTmpBnc, aTmp, , aTmp[ 1 ] ) )}, oFld:aDialogs[6],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 102, {||( WinEdtRec( oBrwBnc, bEdtBnc, dbfTmpBnc, aTmp, , aTmp[ 1 ] ) )}, oFld:aDialogs[6],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 103, {||( WinZooRec( oBrwBnc, bEdtBnc, dbfTmpBnc ) )}, oFld:aDialogs[6],,, .F.,,,, .F. )





      TButton():ReDefine( 104, {||( DelBnc( aTmp, oBrwBnc, dbfTmpBnc ) )}, oFld:aDialogs[6],,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwBnc                 := IXBrowse():New( oFld:aDialogs[6] )

      oBrwBnc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwBnc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwBnc:cAlias          := dbfTmpBnc
      oBrwBnc:nMarqueeStyle   := 5
      oBrwBnc:cName           := "Clientes.Bancos"

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "D. Banco por defecto"
         :bEditValue       := {|| ( dbfTmpBnc )->lBncDef }
         :nWidth           := 16
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Nombre banco"
         :bEditValue       := {|| ( dbfTmpBnc )->cCodBnc }
         :nWidth           := 180
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Cuenta"
         :bEditValue       := {|| ( dbfTmpBnc )->cEntBnc + "-" + ( dbfTmpBnc )->cSucBnc + "-" + ( dbfTmpBnc )->cDigBnc + "-" + ( dbfTmpBnc )->cCtaBnc }
         :nWidth           := 150
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfTmpBnc )->cDirBnc }
         :nWidth           := 120
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| ( dbfTmpBnc )->cPobBnc }
         :nWidth           := 100
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| ( dbfTmpBnc )->cCPBnc }
         :nWidth           := 40
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| ( dbfTmpBnc )->cProBnc }
         :nWidth           := 80
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Teléfono"
         :bEditValue       := {|| ( dbfTmpBnc )->cTlfBnc }
         :nWidth           := 80
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfTmpBnc )->cFaxBnc }
         :nWidth           := 80
      end

      with object ( oBrwBnc:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfTmpBnc )->cPContBnc }
         :nWidth           := 140
      end

      oBrwBnc:bRClicked       := {| nRow, nCol, nFlags | oBrwBnc:RButtonDown( nRow, nCol, nFlags ) }
      if nMode <> 3
         oBrwBnc:bLDblClick   := {|| WinEdtRec( oBrwBnc, bEdtBnc, dbfTmpBnc, aTmp, , aTmp[1] ) }
      end

      oBrwBnc:CreateFromResource( 100 )









      oBmpContabilidad := TBitmap():ReDefine( 500, "Folder2_red_Alpha_48",, oFld:aDialogs[7],,, .F., .F.,,, .F.,,, .T. )
























      aGet[ 36 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[7],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta(  aGet[ 36 ], {  aTmp[ 36    ], aTmp[ 2    ], aTmp[ 3       ], aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8  ], aTmp[ 9       ], aTmp[ 50   ] }, oGetSubCta, nil, nil, @nGetDebe, @nGetHaber, oGetSaldo ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[36], oGetSubCta ) )}, nil, "Lupa",, )




        oGetSubCta := TGetHlp():ReDefine( 351, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oFld:aDialogs[7],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      oGetSaldo := TGetHlp():ReDefine( 352, { | u | If( PCount()==0, nGetSaldo, nGetSaldo:= u ) }, oFld:aDialogs[7],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[37] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[37], aTmp[37]:= u ) }, oFld:aDialogs[7],,, {||    ( ChkCta( aTmp[37], oGetCta ) )}, "N/W*",,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[37], oGetCta ) )}, nil, "LUPA",, )




        oGetCta := TGetHlp():ReDefine( 361, { | u | If( PCount()==0, cGetCta, cGetCta:= u ) }, oFld:aDialogs[7],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





























      aGet[92] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[92], aTmp[92]:= u ) }, oFld:aDialogs[7],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 92 ], {  aTmp[ 92 ], aTmp[ 2    ], aTmp[ 3       ], aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8  ], aTmp[ 9       ], aTmp[ 50   ] }, oGetSubDto, nil, nil, nil, nil, oGetSalDto ) )}, "N/W*",,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[92], oGetSubDto ) )}, nil, "LUPA",, )





      oGetSubDto := TGetHlp():ReDefine( 371, { | u | If( PCount()==0, cGetSubDto, cGetSubDto:= u ) }, oFld:aDialogs[7],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      oGetSalDto := TGetHlp():ReDefine( 372, { | u | If( PCount()==0, nGetSalDto, nGetSalDto:= u ) }, oFld:aDialogs[7],, cPorDiv,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      oBrwCta                 := IXBrowse():New( oFld:aDialogs[7] )

      oBrwCta:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwCta:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwCta:cAlias          := dbfTmpSubCta
      oBrwCta:nMarqueeStyle   := 5
      oBrwCta:cName           := "Clientes.Contabilidad"
      oBrwCta:lFooter         := .T.

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Asiento"
         :bEditValue       := {|| Trans( ( dbfTmpSubCta )->nAsiento, "9999999" ) }
         :nWidth           := 80
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| Dtoc( ( dbfTmpSubCta )->dFecha ) }
         :nWidth           := 80
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Concepto"
         :bEditValue       := {|| ( dbfTmpSubCta )->cConcepto }
         :nWidth           := 180
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Debe"
         :bEditValue       := {|| ( dbfTmpSubCta )->nDebe }
         :bFooter          := {|| nGetDebe }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Haber"
         :bEditValue       := {|| ( dbfTmpSubCta )->nHaber }
         :bFooter          := {|| nGetHaber }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Departamento"
         :bEditValue       := {|| ( dbfTmpSubCta )->cDeparta }
         :nWidth           := 80
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Factura"
         :bEditValue       := {|| Trans( ( dbfTmpSubCta )->nFactura, "99999999" ) }
         :nWidth           := 80
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( dbfTmpSubCta )->nBase }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwCta:AddCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( dbfTmpSubCta )->nIva }
         :cEditPicture     := cPorDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      oBrwCta:bRClicked       := {| nRow, nCol, nFlags | oBrwCta:RButtonDown( nRow, nCol, nFlags ) }

      oBrwCta:CreateFromResource( 400 )









      oBmpComentario := TBitmap():ReDefine( 500, "Message_Alpha_48",, oFld:aDialogs[8],,, .F., .F.,,, .F.,,, .T. )






      aGet[ 44 ] := TMultiGet():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[8],, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 380, { | u | If( PCount()==0, aTmp[ 94 ], aTmp[ 94 ]:= u ) }, oFld:aDialogs[8],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )



      TSay():ReDefine( 105, {|| aIniCli[1]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 55 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 115, {|| aIniCli[2]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 56 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 125, {|| aIniCli[3]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 57 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 57 ], aTmp[ 57 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 135, {|| aIniCli[4]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 58 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TSay():ReDefine( 145, {|| aIniCli[5]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 59 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 155, {|| aIniCli[6]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 60 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 60 ], aTmp[ 60 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 165, {|| aIniCli[7]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 61 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 175, {|| aIniCli[8]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 62 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 62 ], aTmp[ 62 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 185, {|| aIniCli[9]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 63 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 63 ], aTmp[ 63 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



        TSay():ReDefine( 195, {|| aIniCli[10]}, oFld:aDialogs[8],,,, .F.,, .F., .F. )



      aGet[ 64 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 64 ], aTmp[ 64 ]:= u ) }, oFld:aDialogs[8],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )









      oBmpTarifa := TBitmap():ReDefine( 600, "Symbol_euro_Alpha_48",, oFld:aDialogs[9],,, .F., .F.,,, .F.,,, .T. )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) )}, oFld:aDialogs[9],,, .F., {||     ( oUser():lCambiarPrecio() .AND. nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) )}, oFld:aDialogs[9],,, .F., {||     ( oUser():lCambiarPrecio() .AND. nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( WinZooRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) )}, oFld:aDialogs[9],,, .F., {||     ( oUser():lCambiarPrecio() .AND. nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinDelRec( oBrwAtp, dbfTmpAtp ) )}, oFld:aDialogs[9],,, .F., {||     ( oUser():lCambiarPrecio() .AND. nMode <> 3 )},,, .F. )





      TButton():ReDefine( 504, {||( AddFamilia( oBrwAtp, dbfTmpAtp, aTmp[1] ) )}, oFld:aDialogs[9],,, .F., {||     ( oUser():lCambiarPrecio() .AND. nMode <> 3 )},,, .F. )




      TButton():ReDefine( 505, {||( Searching( dbfTmpAtp, { "Artículo", "Familia" }, oBrwAtp ) )}, oFld:aDialogs[9],,, .F.,,,, .F. )






      TButton():ReDefine( 506, {||( TInfAtp():New( "Plantilla de condiciones especificas", , , , , , { dbfTmpAtp, aGet, aTmp } ):Play() )}, oFld:aDialogs[9],,, .F.,,,, .F. )







      oFiltroAtp := TComboBox():ReDefine( 507, { | u | If( PCount()==0, cFiltroAtp, cFiltroAtp:= u ) }, aFiltroAtp, oFld:aDialogs[9],,, {|Self|( FiltroAtipica( oFiltroAtp, dbfTmpAtp, oBrwAtp ) )},,,, .F.,,,,,, )





      oBrwAtp                 := IXBrowse():New( oFld:aDialogs[9] )

      oBrwAtp:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAtp:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAtp:cAlias          := dbfTmpAtp
      oBrwAtp:nMarqueeStyle   := 6
      oBrwAtp:cName           := "Clientes.Atipicas"

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| if( ( dbfTmpAtp )->nTipAtp <= 1, "Artículo", "Familia" ) }
         :nWidth           := 60
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Of. Artículo en oferta"
         :bEditValue       := {|| ( dbfTmpAtp )->nTipAtp <= 1 .AND. lArticuloEnOferta( ( dbfTmpAtp )->cCodArt, ( dbfClient )->Cod, ( dbfClient )->cCodGrp ) }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| if( ( dbfTmpAtp )->nTipAtp <= 1, ( dbfTmpAtp )->cCodArt, ( dbfTmpAtp )->cCodFam ) }
         :nWidth           := 80
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Nombre"
         :bEditValue       := {|| if( ( dbfTmpAtp )->nTipAtp <= 1, RetArticulo( ( dbfTmpAtp )->cCodArt, dbfArticulo ), RetFamilia( ( dbfTmpAtp )->cCodFam, dbfFamilia ) ) }
         :nWidth           := 160
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Prop.1"
         :bEditValue       := {|| ( dbfTmpAtp )->cValPr1 }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Prop.2"
         :bEditValue       := {|| ( dbfTmpAtp )->cValPr2 }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt2 }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt3 }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt4 }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt5 }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bEditValue       := {|| ( dbfTmpAtp )->nPrcArt6 }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "% Descuento"
         :bEditValue       := {|| ( dbfTmpAtp )->nDtoArt }
         :cEditPicture     := "@E 999.99"
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Descuento lineal"
         :bEditValue       := {|| ( dbfTmpAtp )->nDtoDiv }
         :cEditPicture     := cPouDiv
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "% Agente"
         :bEditValue       := {|| ( dbfTmpAtp )->nComAge }
         :cEditPicture     := "@E 999.99"
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Inicio"
         :bEditValue       := {|| ( dbfTmpAtp )->dFecIni }
         :nWidth           := 80
      end

      with object ( oBrwAtp:AddCol() )
         :cHeader          := "Fin"
         :bEditValue       := {|| ( dbfTmpAtp )->dFecFin }
         :nWidth           := 80
      end

      if oUser():lCambiarPrecio() .AND. nMode <> 3
         oBrwAtp:bLDblClick   := {|| WinEdtRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) }
      end
      oBrwAtp:bRClicked       := {| nRow, nCol, nFlags | oBrwAtp:RButtonDown( nRow, nCol, nFlags ) }

      oBrwAtp:CreateFromResource( 400 )









      oBmpDocumentos := TBitmap():ReDefine( 600, "Books_blue_Alpha_48",, oFld:aDialogs[10],,, .F., .F.,,, .F.,,, .T. )

      oBrwDoc                 := IXBrowse():New( oFld:aDialogs[10] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc
      oBrwDoc:nMarqueeStyle   := 5
      oBrwDoc:cName           := "Clientes.Documentos"
      oBrwDoc:nRowHeight      := 38
      oBrwDoc:nDataLines      := 2

      with object ( oBrwDoc:AddCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + lTrim( ( dbfTmpDoc )->cRuta ) }
         :nWidth           := 480
      end

      if ( nMode <> 3 )
         oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) }
      end
      oBrwDoc:bRClicked       := {| nRow, nCol, nFlags | oBrwDoc:RButtonDown( nRow, nCol, nFlags ) }

      oBrwDoc:CreateFromResource( 400 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DbDelRec( oBrwDoc, dbfTmpDoc, nil, nil, .T. ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[10],,, .F.,,,, .F. )





      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", rTrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 )},,, .F. )









      oBmpIncidencias := TBitmap():ReDefine( 600, "Sign_warning_Alpha_48",, oFld:aDialogs[11],,, .F., .F.,,, .F.,,, .T. )

      oBrwInc                 := IXBrowse():New( oFld:aDialogs[11] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc
      oBrwInc:nMarqueeStyle   := 5
      oBrwInc:cName           := "Clientes.Incidencias"

      with object ( oBrwInc:AddCol() )
         :cHeader          := "Rs. Resuelta"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTmpInc )->lListo }
         :nWidth           := 18
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwInc:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodTip"
         :bEditValue       := {|| ( dbfTmpInc )->cCodTip }
         :nWidth           := 80
      end

      with object ( oBrwInc:AddCol() )
         :cHeader          := "Incidencia"
         :bEditValue       := {|| cNomInci( ( dbfTmpInc )->cCodTip, dbfInci ) }
         :nWidth           := 180
      end

      with object ( oBrwInc:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
         :nWidth           := 80
      end

      with object ( oBrwInc:AddCol() )
         :cHeader          := "Descripción"
         :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
         :nWidth           := 300
      end

      if nMode <> 3
         oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
      end
      oBrwInc:bRClicked       := {| nRow, nCol, nFlags | oBrwInc:RButtonDown( nRow, nCol, nFlags ) }

      oBrwInc:CreateFromResource( 400 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[11],,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[11],,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 502, {||( DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) )}, oFld:aDialogs[11],,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc ) )}, oFld:aDialogs[11],,, .F.,,,, .F. )









      oBmpObservaciones := TBitmap():ReDefine( 600, "Information2_Alpha_48",, oFld:aDialogs[12],,, .F., .F.,,, .F.,,, .T. )

      oClp := TClipBoard():New( Upper("TEXT"), oFld:aDialogs[12] )








      oBtn[ 1 ] := TBtnBmp():ReDefine( 100, "IMP16",,,,, {|Self|( oRTF:Print(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( .T. )}, .F., "Imprimir",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 2 ] := TBtnBmp():ReDefine( 110, "PREV116",,,,, {|Self|( oRTF:Preview( "Class TRichEdit" ) )}, oFld:aDialogs[12], .F., {||     ( .T. )}, .F., "Previsualizar",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 3 ] := TBtnBmp():ReDefine( 120, "Bus16",,,,, {|Self|( FindRich( oRTF ) )}, oFld:aDialogs[12], .F., {||     ( .T. )}, .F., "Buscar",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 4 ] := TBtnBmp():ReDefine( 130, "Cut_16",,,,, {|Self|( oRTF:Cut(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! Empty( oRTF:GetSel() ) .AND. ! oRTF:lReadOnly )}, .F., "Cortar",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 5 ] := TBtnBmp():ReDefine( 140, "Copy16",,,,, {|Self|( oRTF:Copy(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! Empty( oRTF:GetSel() ) )}, .F., "Copiar",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 6 ] := TBtnBmp():ReDefine( 150, "Paste_16",,,,, {|Self|( oRTF:Paste(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! Empty( oClp:GetText() ) .AND. ! oRTF:lReadOnly )}, .F., "Pegar",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 7 ] := TBtnBmp():ReDefine( 160, "Undo1_16",,,,, {|Self|( oRTF:Undo(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( oRTF:SendMsg( 198 ) <> 0 )}, .F., "Deshacer",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 8 ] := TBtnBmp():ReDefine( 170, "Redo_16",,,,, {|Self|( oRTF:Redo(), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( oRTF:SendMsg( ( 1024 + 85 ) ) <> 0 )}, .F., "Rehacer",,,,, !.T.,, .F.,,, .F., !.F. )




      oZoom := TComboBox():ReDefine( 180, { | u | If( PCount()==0, cZoom, cZoom:= u ) }, aZoom, oFld:aDialogs[12],,,,,,, .F.,,,,,, )

      oZoom:bChange     := {|| oRTF:SetZoom( aRatio[ oZoom:nAt, 1 ], aRatio[ oZoom:nAt, 2 ] ), oRTF:SetFocus()  }




      oFuente := TComboBox():ReDefine( 190, { | u | If( PCount()==0, cFuente, cFuente:= u ) }, aFuente, oFld:aDialogs[12],,,,,,, .F.,,,,,, )

      oFuente:bChange   := {|| oRTF:SetFontName( oFuente:VarGet() ), oRTF:SetFocus() }




      oSize := TComboBox():ReDefine( 200, { | u | If( PCount()==0, cSize, cSize:= u ) }, aSize, oFld:aDialogs[12],,,,,,, .F.,,,,,, )

      oSize:bChange     := {|| oRTF:SetFontSize( Val( oSize:VarGet() ) ), oRTF:SetFocus() }








      oBtn[10] := TBtnBmp():ReDefine( 210, "Text_Bold",,,,, {|Self|( lBold  := !lBold, oRTF:SetBold( lBold ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Negrita",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 10 ] := TBtnBmp():ReDefine( 220, "Text_Italics_16",,,,, {|Self|( lItalic := !lItalic, oRTF:SetItalic( lItalic ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Cursiva",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 11 ] := TBtnBmp():ReDefine( 230, "Text_Underlined_16",,,,, {|Self|( lUnderline := !lUnderline, oRTF:SetUnderline( lUnderline ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Subrayado",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 12 ] := TBtnBmp():ReDefine( 240, "Text_Align_Left_16",,,,, {|Self|( oRTF:SetAlign( 1 ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Izquierda",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 13 ] := TBtnBmp():ReDefine( 250, "Text_Center",,,,, {|Self|( oRTF:SetAlign( 3 ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Centro",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 14 ] := TBtnBmp():ReDefine( 260, "Text_Align_Right_16",,,,, {|Self|( oRTF:SetAlign( 2 ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Derecha",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 15 ] := TBtnBmp():ReDefine( 270, "Text_Justified_16",,,,, {|Self|( oRTF:SetAlign( 4 ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly )}, .F., "Justificado",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 16 ] := TBtnBmp():ReDefine( 280, "Pin_Blue_16",,,,, {|Self|( lBullet := !lBullet, oRTF:SetBullet( lBullet ), oRTF:SetFocus() )}, oFld:aDialogs[12], .F., {||     ( ! oRTF:lReadOnly .AND. !oRTF:GetNumbering() )}, .F., "Viñetas",,,,, !.T.,, .F.,,, .F., !.F. )








      oBtn[ 17 ] := TBtnBmp():ReDefine( 290, "Calendar_16",,,,, {|Self|( DateTimeRich( oRTF ) )}, oFld:aDialogs[12], .F., {||     ( .T. )}, .F., "Fecha/Hora",,,,, !.T.,, .F.,,, .F., !.F. )



      oRTF := TRichEdit():ReDefine( 300, { | u | If( PCount()==0, cRTF, cRTF:= u ) }, oFld:aDialogs[12],,,, .F., .F.,,, .F.,,, )

      oRTF:bChange:= { || RTFRefreshButtons( oRtf, oBtn ) }









      TButton():ReDefine( 1, {||( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3

         oFld:aDialogs[4]:AddFastKey( 113, {|| AppObras( aTmp[ 1 ], dbfTmpObr, oBrwObr ) } )
         oFld:aDialogs[4]:AddFastKey( 114, {|| EdtObras( aTmp[ 1 ], nil, dbfTmpObr, oBrwObr, .T. ) } )
         oFld:aDialogs[4]:AddFastKey( 115, {|| DelObras( dbfTmpObr, oBrwObr ) } )

         oFld:aDialogs[5]:AddFastKey( 113, {|| AppContactos( aTmp[ 1 ], dbfTmpCon, oBrwCon ) } )
         oFld:aDialogs[5]:AddFastKey( 114, {|| EdtContactos( dbfTmpCon, oBrwCon ) } )
         oFld:aDialogs[5]:AddFastKey( 115, {|| DelContactos( dbfTmpCon, oBrwCon ) } )

         oFld:aDialogs[6]:AddFastKey( 113, {|| WinAppRec( oBrwBnc, bEdtBnc, dbfTmpBnc, aTmp, , aTmp[ 1 ] ) } )
         oFld:aDialogs[6]:AddFastKey( 114, {|| WinEdtRec( oBrwBnc, bEdtBnc, dbfTmpBnc, aTmp, , aTmp[ 1 ] ) } )
         oFld:aDialogs[6]:AddFastKey( 115, {|| DelBnc( aTmp, oBrwBnc, dbfTmpBnc ) } )

         oFld:aDialogs[9]:AddFastKey( 113, {|| WinAppRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) } )
         oFld:aDialogs[9]:AddFastKey( 114, {|| WinEdtRec( oBrwAtp, bEdtAtp, dbfTmpAtp, aTmp, aGet ) } )
         oFld:aDialogs[9]:AddFastKey( 115, {|| WinDelRec(  oBrwAtp, dbfTmpAtp ), oBrwAtp:Refresh() } )

         oFld:aDialogs[10]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[10]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
         oFld:aDialogs[10]:AddFastKey( 115, {|| DbDelRec(  oBrwDoc, dbfTmpDoc, nil, nil, .T. ) } )

         oFld:aDialogs[11]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[11]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
         oFld:aDialogs[11]:AddFastKey( 115, {|| DbDelRec( oBrwInc, dbfTmpInc, nil, nil, .T. ) } )

         oDlg:AddFastKey(             116, {|| SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ) } )

      end

   oDlg:bStart := { || ShowComentario( aTmp ), ShowInciCliente( aTmp[ 1 ], dbfCliInc ), ShowFld( aTmp, aGet ), FiltroAtipica( oFiltroAtp, dbfTmpAtp, oBrwAtp ), oGet:SetFocus(), oBrwBnc:Load(), oBrwObr:Load(), oBrwCta:Load(), oBrwAtp:Load() }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( KillTrans( oBmpDiv, oBrwBnc, oBrwObr, oBrwCta, oBrwAtp, oBrwInc, oBrwCon ) )},, {|Self|( EdtRotorMenu( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ) )}, oDlg:bRClicked,,, )

   EndEdtRotorMenu()

   oBmpGeneral:End()
   oBmpComercial:End()
   oBmpDirecciones:End()
   oBmpContactos:End()
   oBmpBancos:End()
   oBmpContabilidad:End()
   oBmpComentario:End()
   oBmpTarifa:End()
   oBmpDocumentos:End()
   oBmpIncidencias:End()
   oBmpObservaciones:End()
   oBmpAutomaticas:End()

RETURN ( oDlg:nResult == 1 )



function AddFacAut( oBrwFacAut )

   local cResultado  := ""

   cResultado := oFacAut:Buscar()

   if !Empty( cResultado )

      if aScan( aFacAut, cResultado ) == 0
         aAdd( aFacAut, cResultado )
      else
         MsgStop( "La plantilla automática ya se encuentra introducida." )
      end

   end

   if !Empty( oBrwFacAut )
      oBrwFacAut:Refresh()
   end

Return ( .T. )



function DelFacAut( oBrwFacAut )

   if ApoloMsgNoYes()
      aDel( aFacAut, oBrwFacAut:nArrayAt, .T. )
   end

   if !Empty( oBrwFacAut )
      oBrwFacAut:Refresh()
   end

Return ( .T. )



function ShowInciCliente( cCodCli, dbfInci )

   local nRec  := ( dbfInci )->( Recno() )

   if dbSeekInOrd( cCodCli, "CCODCLI", dbfInci )

      while ( dbfInci )->cCodCli == cCodCli .AND. !( dbfInci )->( Eof() )

         if ( dbfInci )->lAviso .AND. !( dbfInci )->lListo

            MsgInfo( AllTrim( ( dbfInci )->mDesInc ), "Incidencia de cliente" )

         end

         ( dbfInci )->( dbSkip() )

      end

   end

   ( dbfInci )->( dbGoTo( nRec ) )

Return ( .T. )



static function ShowComentario( aTmp, nMode )



   if nMode <> 1         .AND. aTmp[ 94 ]           .AND. !Empty( aTmp[ 44 ] )

      MsgInfo( AllTrim( aTmp[ 44 ] ), "Comentario" )

   end

Return ( .T. )



Static Function lRecargaArray( aGet, aTmp )

   local aSbrAtp  := {}
   local nPosAtp  := aGet[ 98 ]:nAt

   aAdd( aSbrAtp, "Base" )
   aAdd( aSbrAtp, if( !Empty( aTmp[ 22 ] ), aTmp[ 22 ], "General" )      )
   aAdd( aSbrAtp, if( !Empty( aTmp[ 24    ] ), aTmp[ 24    ], "Pronto pago" )  )
   aAdd( aSbrAtp, if( !Empty( aTmp[ 28 ] ), aTmp[ 28 ], "Definido 1" )   )
   aAdd( aSbrAtp, if( !Empty( aTmp[ 29 ] ), aTmp[ 29 ], "Definido 2" )   )

   aGet[ 98 ]:SetItems( aSbrAtp )
   aGet[ 98 ]:Set( aSbrAtp[ Min( Max( nPosAtp, 1 ), len( aSbrAtp ) ) ] )

Return ( .T. )



Static Function EdtDoc( aTmp, aGet, dbfClientD, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de pedidos de clientes", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F., )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116,       {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function ShowFld( aTmp, aGet )

    local n

   for n := 1 TO 10
      if Empty( Rtrim( aIniCli[ n ] ) )
         aGet[ ( dbfClient )->( fieldpos( "cUsrDef" + Rjust( str( n ), "0", 2 ) ) ) ]:hide()
      end
   next

   lRecargaArray( aGet, aTmp )





   oRTF:LoadAsRTF( aTmp[ 109 ] )





   EvalGet( aGet )

Return nil



STATIC FUNCTION EdtAtp( aTmp, aGet, dbfTmpAtp, oBrw, aTmpCli, aGetCli, nMode )

   local oDlg
   local oFld
   local oGetArticulo
   local cGetArticulo
   local oGetFamilia
   local cGetFamilia
   local oSayPr1
   local oSayPr2
   local oSayVp1
   local oSayVp2
   local cSayPr1
   local cSayPr2
   local cSayVp1
   local cSayVp2
   local oCosto
   local cCosto
   local oSobre
   local cSobre         := "Precio 1"
   local aSobre         := { "Precio 1", "Precio 2", "Precio 3", "Precio 4", "Precio 5", "Precio 6" }
   local cNaturaleza    := "Artículo"
   local aNaturaleza    := { "Artículo", "Familia" }
   local oBrwRen
   local cPouEmp        := cPouDiv( cDivEmp(), dbfDiv )
   local cPouChg        := cPouDiv( cDivChg(), dbfDiv )
   local oBtnRen
   local oSayLabels     := Array( 16 )

   if nMode == 1

      cCosto            := 0
      aTmp[ 1 ] := aTmpCli[ 1 ]
      aTmp[ 9 ] := Ctod( "" )
      aTmp[ 10 ] := Ctod( "" )
      aTmp[ 30 ] := .T.
      aTmp[ 31 ] := .T.
      aTmp[ 32 ] := .T.
      aTmp[ 33 ] := .T.
      aTmp[ 36 ] := 2
      aTmp[ 34 ] := 1
      aTmp[ 35 ] := 1

      if !Empty( aTmpCli[ 38 ] )
         if ( cAgente )->( dbSeek( aTmpCli[ 38 ] ) )
            aTmp[ 28 ]    := ( cAgente )->nCom1
            if ( cAgente )->nCom1 <> 0
               aTmp[ 27 ] := .T.
            end
         end
      end

   else

      cNaturaleza       := Max( Min( aTmp[ 4 ], len( aNaturaleza ) ), 1 )

      cGetArticulo      := RetArticulo( aTmp[ 2 ] )

      if !Empty( aTmp[ 5 ] )
         cSayPr1        := retProp( aTmp[ 5 ], dbfPro )
         cSayVp1        := retValProp( aTmp[ 5 ] + aTmp[ 6 ], dbfProL )
      end

      if !Empty( aTmp[ 7 ] )
         cSayPr2        := retProp( aTmp[ 7 ], dbfPro )
         cSayVp2        := retValProp( aTmp[ 7 ] + aTmp[ 8 ], dbfProL )
      end

      cGetFamilia       := retFld( aTmp[ 3 ], dbfFamilia )

   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tarifas de clientes", "CLIATP",, .F.,,,,,, .F.,,,,,, .F., )








      oFld := TFolder():ReDefine( 100, {"&General"  , "A&mbito"}, { "CLIATP_0","CLIATP_1" }, oDlg,,,,, .F., )





      aGet[ 4 ] := TComboBox():ReDefine( 90, { | u | If( PCount()==0, cNaturaleza, cNaturaleza:= u ) }, aNaturaleza, oFld:aDialogs[1],,, {|Self|( ChangeNaturaleza( aGet, aTmp, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetArticulo, oGetFamilia, oCosto, nMode, oSayLabels ) )},,,, .F., {||     ( nMode == 1 )},,,,, )








      aGet[ 2 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],,, {||    ( IsCliAtp( aGet, aTmp, oGetArticulo, dbfCliAtp, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oCosto ) )},,,,,, .F., {||     ( nMode == 1 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 2 ], oGetArticulo ) )}, nil, "LUPA",, )




      oGetArticulo := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cGetArticulo, cGetArticulo:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 3 ] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],,, {||    cFamilia( aGet[ 3 ], dbfFamilia, oGetFamilia )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|BrwFamilia( aGet[ 3 ], oGetFamilia )}, nil, "LUPA",, )




      oGetFamilia := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, cGetFamilia, cGetFamilia:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )



      oSayPr1 := TSay():ReDefine( 888, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F. )









      aGet[ 6 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 6 ], oSayVp1, aTmp[ 5 ], dbfProL ), IsCliAtp( aGet, aTmp, oGetArticulo, dbfCliAtp, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oCosto ), .F. ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[ 6 ], oSayVp1, aTmp[ 5 ] ) )}, nil, "LUPA",, )




      oSayVp1 := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      oSayPr2 := TSay():ReDefine( 999, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F. )









      aGet[ 8 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aGet[ 8 ], oSayVp2, aTmp[ 7 ], dbfProL ), IsCliAtp( aGet, aTmp, oGetArticulo, dbfCliAtp, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oCosto ), .F. ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[ 8 ], oSayVp2, aTmp[ 7 ] ) )}, nil, "LUPA",, )




      oSayVp2 := TGetHlp():ReDefine( 261, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      aGet[ 12 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],, cPinDiv, {||    ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )





      aGet[ 11 ] := TCheckBox():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oFld:aDialogs[ 1 ],, {||( lChangeCostoParticular( aGet, aTmp, oCosto, nMode ) )},,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 )}, .F. )






      oCosto := TGetHlp():ReDefine( 123, { | u | If( PCount()==0, cCosto, cCosto:= u ) }, oFld:aDialogs[ 1 ],, cPinDiv,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )








      aGet[ 13 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 13 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 19 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 14 ] := TGetHlp():ReDefine( 124, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 14 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 20 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 15 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 15 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 21 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 16 ] := TGetHlp():ReDefine( 126, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 16 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 22 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 17 ] := TGetHlp():ReDefine( 127, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 17 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 23 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 18 ] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalIva( aTmp[ 18 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 24 ] ),lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. !( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )












      aGet[ 19 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 19 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 13 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 20 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 20 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 14 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 21 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 21 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 15 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 22 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 22 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 16 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 23 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 23 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 17 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 24 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( CalBas( aTmp[ 24 ], ( dbfArticulo )->lIvaInc, ( dbfArticulo )->TipoIva, ( dbfArticulo )->cCodImp, aGet[ 18 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 .AND. ( dbfArticulo )->lIvaInc )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 25 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[25] >= 0 .AND. aTmp[25] <= 100 ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ))},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 29 ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[26] := TGetHlp():ReDefine( 601, { | u | If( PCount()==0, aTmp[26], aTmp[26]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[26] >= 0 .AND. aTmp[26] <= 100 ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )





      TCheckBox():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[1],, {||( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )








      aGet[ 28 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[28] >= 0 .AND. aTmp[28] <= 100 ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 2 ] := TGroup():ReDefine( 701,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 3 ] := TGroup():ReDefine( 702,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 4 ] := TSay():ReDefine( 703,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 5 ] := TSay():ReDefine( 704,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 6 ] := TSay():ReDefine( 705,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 7 ] := TSay():ReDefine( 706,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 8 ] := TSay():ReDefine( 707,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 9 ] := TSay():ReDefine( 708,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 10] := TSay():ReDefine( 709,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 11] := TSay():ReDefine( 710,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 12] := TSay():ReDefine( 711,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 13] := TSay():ReDefine( 712,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 14] := TSay():ReDefine( 713,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 15] := TSay():ReDefine( 714,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 16] := TGroup():ReDefine( 715,, oFld:aDialogs[ 1 ],,,, .T. )







      aGet[ 37 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 37 ] >= 0 .AND. aTmp[ 37 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 38 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 38 ] >= 0 .AND. aTmp[ 38 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 39 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 39 ] >= 0 .AND. aTmp[ 39 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 40 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 40 ] >= 0 .AND. aTmp[ 40 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 41 ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 41 ] >= 0 .AND. aTmp[ 41 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







      aGet[ 42 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( ( aTmp[ 42 ] >= 0 .AND. aTmp[ 42 ] <= 100 ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )









      aGet[ 9 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 10 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )









      aGet[ 36 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[2],, { 220, 221 }, {||( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 )}, )








      aGet[ 34 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[2],, "@E 999", {||    ( isBig( aTmp[ 34 ], aTmp[ 35 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )








      aGet[ 35 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[2],, "@E 999", {||    ( isBig( aTmp[ 34 ], aTmp[ 35 ] ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )},,,,,, .F., {||     ( aTmp[ 4 ] <= 1 .AND.  nMode <> 3 )}, {|nKey,nFlags,Self| ( lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) ) }, .F., .T.,,,,,, nil,,, )










      oSobre := TComboBox():ReDefine( 400, { | u | If( PCount()==0, cSobre, cSobre:= u ) }, aSobre, oDlg,,,, "N/W*",,, .F., {||     ( nMode <> 3 )},,,,, )

      oSobre:bChange := {|| lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) }
























      oBrwRen := TWBrowse():ReDefine( 450, {|| { if( aRentabilidad[ oBrwRen:nAt, 5 ], LoadBitmap( GetResources(), "BALERT" ), "" ) , aRentabilidad[ oBrwRen:nAt, 1 ], aRentabilidad[ oBrwRen:nAt, 2 ], if( !aRentabilidad[ oBrwRen:nAt, 4 ], Trans( aRentabilidad[ oBrwRen:nAt, 3 ], cPouEmp ), Trans( aRentabilidad[ oBrwRen:nAt, 3 ], "999.99" ) + " %" ), if( !aRentabilidad[ oBrwRen:nAt, 4 ], Trans( nCnv2Div( aRentabilidad[ oBrwRen:nAt, 3 ], cDivEmp(), cDivChg(), dbfDiv ), cPouChg ), "" ), "" } }, oDlg, {"", "Naturaleza", "Tipo", "Importe " + cDivEmp(), "Importe " + cDivChg(), ""}, {16, 97, 48, 70, 70, 10},,,,,,,,,,,, .F.,,,,, )

         oBrwRen:SetArray( aRentabilidad )
         oBrwRen:nClrText       := { || if( aRentabilidad[ oBrwRen:nAt, 3 ] < 0 , 255, 0 ) }
         oBrwRen:aJustify       := { .F., .F., .T., .T., .T., .F. }









      oBtnRen := TButton():ReDefine( 600, {||( lExpandir( oDlg, oBtnRen ), lArrayRen( oSobre:nAt, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 500, {||( SaveEdtAtp( aGet, aTmp, dbfTmpAtp, oBrw, oDlg, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
   oDlg:AddFastKey( 116, {|| SaveEdtAtp( aGet, aTmp, dbfTmpAtp, oBrw, oDlg, nMode ) } )
   end

   oDlg:bStart    := {|| StartEdtAtp( aTmp, aGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetArticulo, oGetFamilia, oSayLabels, oCosto, oBtnRen ) }


   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( lExpandir( oDlg, oBtnRen, .F. ), if( nMode <> 1, aGet[ 2 ]:lValid(), ), EdtDetMenu( aGet[ 2 ], oDlg, lArticuloEnOferta( aTmp[ 2 ], aTmpCli[ 1 ], aTmpCli[ 48 ] ) ) )}, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function StartEdtAtp( aTmp, aGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetArticulo, oGetFamilia, oSayLabels, oCosto, oBtnRen )

   cValoresProp( aTmp, aGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 )

   if !lUsrMaster()
      oBtnRen:Hide()
   else
      oBtnRen:Show()
   end

   lChangeCostoParticular( aGet, aTmp, oCosto, nMode )

   if aGet[ 4 ]:nAt == 1
      aGet[ 2 ]:SetFocus()
   else
      aGet[ 3 ]:SetFocus()
   end

   ChangeNaturaleza( aGet, aTmp, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetArticulo, oGetFamilia, oCosto, nMode, oSayLabels, .T. )

Return nil



Static Function lExpandir( oDlg, oBtn, lSet )

   local oRect    := oDlg:GetRect()

   if lSet <> nil
      lExpandida  := lSet
   end

   if lExpandida
      SetWindowText( oBtn:hWnd, "Retabilidad <" )
      oDlg:Move( oRect:nTop, oRect:nLeft, 800, 522, .T. )
   else
      SetWindowText( oBtn:hWnd, "Retabilidad >" )
      oDlg:Move( oRect:nTop, oRect:nLeft, 463, 522, .T. )
   end

   lExpandida  := !lExpandida

return .T.



Static Function cValoresProp( aTmp, aGet, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2 )

   if nMode == 1

      oSayPr1:Hide()
      oSayPr2:Hide()
      oSayVp1:Hide()
      oSayVp2:Hide()
      aGet[ 6 ]:Hide()
      aGet[ 8 ]:Hide()

   else

      if aTmp[ 4 ] == 2

         oSayPr1:Hide()
         oSayVp1:Hide()
         aGet[ 6 ]:Hide()
         oSayPr2:Hide()
         oSayVp2:Hide()
         aGet[ 8 ]:Hide()

      else

         if Empty( aTmp[ 5 ] )
            oSayPr1:Hide()
            oSayVp1:Hide()
            aGet[ 6 ]:Hide()
         else
            oSayPr1:Show()
            oSayVp1:Show()
            aGet[ 6 ]:Show()
            oSayPr1:Disable()
         end

         if Empty( aTmp[ 7 ] )
            oSayPr2:Hide()
            oSayVp2:Hide()
            aGet[ 8 ]:Hide()
         else
            oSayPr2:Disable()
            oSayPr2:Show()
            oSayVp2:Show()
            aGet[ 8 ]:Show()
         end

      end

   end

Return nil



STATIC FUNCTION GenReport( dbfClient, oWndBrw )

    local oDlg
    local oSayDesde
    local cSayDesde
    local oSayHasta
    local cSayHasta
    local oCliDesde
   local oCliHasta
   local oFlt
   local nFont       := 12
   local nOrden      := 1
    local cPostal        := Space( 7 )
    local nRecno          := ( dbfClient )->( RecNo() )
    local cTag            := ( dbfClient )->( OrdSetFocus() )
    local cCliDesde    := dbFirst( dbfClient, 1 )
    local cCliHasta    := dbLast(  dbfClient, 1 )
   local cTitulo     := Padr( cCodEmp() + " - " + cNbrEmp(), 100 )
    local cSubTitulo    := Padr( "Listado de Clientes", 100 )
   local alOption    := { .F., .T., .F., .T. }





    oDlg = TDialog():New(,,,,, "REP_CLIENT",, .F.,,,,,, .F.,,,,,, .F., )








    TRadMenu():Redefine( { | u | If( PCount()==0, nOrden, nOrden:= u ) }, oDlg,, { 100, 101 }, {||( ( dbfClient )->( OrdSetFocus( nOrden ) ),    oSayDesde:cText( dbFirst( dbfClient, 2 ) ),    oSayHasta:cText( dbLast(  dbfClient, 2 ) ),    oCliDesde:cText( dbFirst( dbfClient, 1 ) ),    oCliHasta:cText( dbLast(  dbfClient, 1 ) ) )},,,, .F.,, )








    oCliDesde := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cCliDesde, cCliDesde:= u ) }, oDlg,,, {||     ( cClient( oCliDesde, dbfClient, oSayDesde ) )}, "N/W*",,,,, .F., {||        ( nOrden == 1 )},, .F., .F.,,,,, {|Self|( BrwCli( oCliDesde, oSayDesde, dbfClient ) )}, nil, "LUPA",, )







    oSayDesde := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cSayDesde, cSayDesde:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( nOrden == 2 )},, .F., .F.,,,,, {|Self|( BrwCli( oCliDesde, oSayDesde, dbfClient ) )}, nil, "LUPA",, )








    oCliHasta := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cCliHasta, cCliHasta:= u ) }, oDlg,,, {||     ( cClient( oCliHasta, dbfClient, oSayHasta ) )}, "N/W*",,,,, .F., {||        ( nOrden == 1 )},, .F., .F.,,,,, {|Self|( BrwCli( oCliHasta, oSayHasta, dbfClient ) )}, nil, "LUPA",, )







    oSayHasta := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSayHasta, cSayHasta:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        ( nOrden == 2 )},, .F., .F.,,,,, {|Self|( BrwCli( oCliHasta, oSayHasta, dbfClient ) )}, nil, "LUPA",, )



    TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cPostal, cPostal:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 155, { | u | If( PCount()==0, nFont, nFont:= u ) }, oDlg,, "@E 99", {||        nFont >= 6 .AND. nFont <= 72},,,,,, .F.,,, .F., .T.,,, {|| 6}, {|| 72},, nil,,, )



   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, alOption[1], alOption[1]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 161, { | u | If( PCount()==0, alOption[2], alOption[2]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 162, { | u | If( PCount()==0, alOption[3], alOption[3]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 163, { | u | If( PCount()==0, alOption[4], alOption[4]:= u ) }, oDlg,,,,,,, .F.,, .F. )



    TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cTitulo, cTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



    TGetHlp():ReDefine( 180, { | u | If( PCount()==0, cSubTitulo, cSubTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




    TButton():ReDefine( 531, {||( oFlt   := TDlgFlt():New( aItmCli(), dbfClient ):Resource() )}, oDlg,,, .F.,,,, .F. )







    TButton():ReDefine( 508, {||(     IF ( nOrden == 1, PrnReport( cCliDesde, cCliHasta, cPostal, oFlt, cTitulo, cSubTitulo, 1, alOption, nFont ), PrnReport( cSayDesde, cSayHasta, cPostal, oFlt, cTitulo, cSubTitulo, 1, alOption, nFont ) )    )}, oDlg,,, .F.,,,, .F. )







    TButton():ReDefine( 505, {||(     IF ( nOrden == 1, PrnReport( cCliDesde, cCliHasta, cPostal, oFlt, cTitulo, cSubTitulo, 2, alOption, nFont ), PrnReport( cSayDesde, cSayHasta, cPostal, oFlt, cTitulo, cSubTitulo, 2, alOption, nFont ) )    )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )


    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( oCliDesde:lValid(), oCliHasta:lValid() )}, .T.,,,, oDlg:bRClicked,,, )

    ( dbfClient )->( OrdSetFocus( cTag ) )
    ( dbfClient )->( dbGoto( nRecno ) )

    IF oWndBrw <> NIL
        oWndBrw:refresh()
    end

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION PrnReport( cCliDesde, cCliHasta, cPostal, oFlt, cTitulo, cSubTitulo, nDevice, alOption, nFont )

   local oReport
   local oFont1   := TFont():New( "Courier New", 0, - ( nFont ), .F., .T. )
   local oFont2   := TFont():New( "Courier New", 0, - ( nFont ), .F., .F. )





    ( dbfClient )->( DbSeek( cCliDesde ) )

    IF nDevice == 1








        oReport := RptBegin({{||      Rtrim( cTitulo )}, {||    Rtrim( cSubTitulo )}}, {{||     "Fecha: " + dtoc(date())}}, {{||   "Página : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2}, {}, .F.,,,, .T.,,, "Listado de clientes",, UPPER("RIGHT"), UPPER("CENTERED") )

    ELSE








        oReport := RptBegin({{||      Rtrim( cTitulo )}, {||    Rtrim( cSubTitulo )}}, {{||   "Fecha: " + dtoc( date() )}}, {{||   "Página : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2}, {}, .F.,,, .T., .F.,,, "Listado de clientes",, UPPER("RIGHT"), UPPER("CENTERED") )

    end




        RptAddColumn( {{|| "Codg."}}, , {{|| (dbfClient)->COD}}, 10, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )






      RptAddColumn( {{|| "Nombre"}, {|| "Contacto"}, {|| If( alOption[1], "D.N.I. / C.I.F.", "" )}}, , {{||  (dbfClient)->Titulo}, {|| (dbfClient)->cPerCto}, {|| If( alOption[1], (dbfClient)->NIF, "" )}}, 44, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )






      RptAddColumn( {{|| "Domicilio"}, {|| "Población"}, {|| "Cod.Pos. - Provincia"}}, , {{||  (dbfClient)->DOMICILIO}, {|| (dbfClient)->POBLACION}, {|| (dbfClient)->CODPOSTAL + " - " + (dbfClient)->PROVINCIA}}, 60, {} , {||  2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )

      IF alOption[2]






         RptAddColumn( {{|| "Teléfono"}, {|| "Móvil"}, {|| "Fax"}}, , {{||  ( dbfClient)->Telefono}, {|| ( dbfClient)->Movil}   , {|| ( dbfClient)->Fax}}, 18, {} , {||  2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )

      end

      IF alOption[3]




         RptAddColumn( {{|| "Riesgo"}}, , {{||  Trans( ( dbfClient )->Riesgo, cPorDiv )}}, 18, {} , {||  2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )

      end

      IF alOption[4]




         RptAddColumn( {{|| "Cuenta"}}, , {{||  Trans( cClientCuenta( dbfClient ), "@R ####-####-##-##########" )}}, 20, {} , {||  2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )

      end

        RptEnd()

      IF !Empty( oReport ) .AND. oReport:lCreated
            oReport:Margin(0, 2, 2)
         oReport:bSkip        := {|| (dbfClient)->(DbSkip()) }
         oReport:lSeparator   := .T.
        end






      oReport:Activate({||            ( dbfClient )->( OrdKeyVal() ) >= cCliDesde                 .AND. ( dbfClient )->( OrdKeyVal() ) <= cCliHasta                 .AND. IF( !empty( oFlt ) .AND. !empty( oFlt:bExpFilter ), ( dbfClient )->( eval( oFlt:bExpFilter ) ), .T. )  .AND. IF( empty( cPostal ), .T., ( dbfClient )->CodPostal == cPostal )}, {||          !( dbfClient )->( eof() )},,,,,,,,,,,, )

    oFont1:end()
    oFont2:end()

   if !Empty( oReport )
      oReport:End()
   end

RETURN NIL



FUNCTION BrwCli( oGet, oGet2, dbfClient )

   local oDlg
    local oBrw
   local hBmp
    local oGet1
    local cGet1
   local nOrd     := GetBrwOpt( "BrwCli" )
    local oCbxOrd
   local aCbxOrd  := { "Código", "Nombre", "NIF/CIF", "Población", "Provincia", "Código postal", "Teléfono", "Establecimiento", "Correo electrónico" }
   local cCbxOrd
   local cReturn  := Space( 12 )

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   nOrd           := ( dbfClient )->( OrdSetFocus( nOrd ) )

   ( dbfClient )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Seleccionar clientes", "HelpEntry",, .F.,,,,,, .F.,,,,,, .F., )





        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| AutoSeek( nKey, nFlags, Self, oBrw, dbfClient ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfClient )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfClient
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Clientes.Report"

      with object ( oBrw:AddCol() )
         :cHeader          := "Bl. Bloqueado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->lBlqCli }
         :nWidth           := 20
         :SetCheck( { "Cnt16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Cod"
         :bEditValue       := {|| ( dbfClient )->Cod }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Titulo"
         :bEditValue       := {|| ( dbfClient )->Titulo }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "NIF/CIF"
         :cSortOrder       := "Nif"
         :bEditValue       := {|| ( dbfClient )->Nif }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :cSortOrder       := "Telefono"
         :bEditValue       := {|| ( dbfClient )->Telefono }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfClient )->Fax }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfClient )->Domicilio }
         :nWidth           := 300
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Población"
         :cSortOrder       := "Poblacion"
         :bEditValue       := {|| ( dbfClient )->Poblacion }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código postal"
         :cSortOrder       := "CodPostal"
         :bEditValue       := {|| ( dbfClient )->CodPostal }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Provincia"
         :cSortOrder       := "Provincia"
         :bEditValue       := {|| ( dbfClient )->Provincia }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Establecimiento"
         :cSortOrder       := "NbrEst"
         :bEditValue       := {|| ( dbfClient )->NbrEst }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Correo electrónico"
         :cSortOrder       := "cMeiInt"
         :bEditValue       := {|| ( dbfClient )->cMeiInt }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Riesgo"
         :bEditValue       := {|| Trans( ( dbfClient )->Riesgo, PicOut() ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfClient )->cPerCto }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Observaciones"
         :bEditValue       := {|| ( dbfClient )->mComent }
         :nWidth           := 200
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )

   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

   oDlg:bStart                := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   CursorWait()

   if oDlg:nResult == 1

      cReturn  := ( dbfClient )->Cod

      if !Empty( oGet )
         oGet:cText( ( dbfClient )->Cod )
         oGet:lValid()
      end

      if ValType( oGet2 ) == "O"
         oGet2:cText( ( dbfClient )->Titulo )
         if ( dbfClient )->nColor <> 0
            oGet2:SetColor( , ( dbfClient )->nColor )
         end
      end

   end

   SetBrwOpt( "BrwCli", ( dbfClient )->( OrdNumber() ) )

   ( dbfClient )->( OrdSetFocus( nOrd ) )

   if !Empty( oBrw )
      oBrw:end()
   end

   CursorWE()

   if !Empty( oGet )
      oGet:SetFocus()
   end

RETURN cReturn







FUNCTION cCtaBanCli( cCodCli, dbfBanco )

   local nRec
   local oBlock
   local oError
   local nOrdAnt
   local cText    := ""
   local lClose   := .F.

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfBanco )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfBanco ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CCODDEF" )
      lClose      := .T.
   else
      nRec        := ( dbfBanco )->( Recno() )
      nOrdAnt     := ( dbfBanco )->( OrdSetFocus( "cCodDef" ) )
   end

   if ( dbfBanco )->( dbSeek( cCodCli ) )
      cText       := ( dbfBanco )->cCtaBnc
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de bancos" )

   end
   ErrorBlock( oBlock )

   if lClose
      ( dbfBanco )->( dbCloseArea() )
   else
      ( dbfBanco )->( OrdSetFocus( nOrdAnt ) )
      ( dbfBanco )->( dbGoTo( nRec ) )
   end

Return ( cText )







FUNCTION cCliCta( cCodCli, dbfClient )

   local oBlock
   local oError
   local cText    := ""
   local lClose   := .F.

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfClient )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      cText       := Rtrim( ( dbfClient )->SubCta )
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de clientes" )

   end
   ErrorBlock( oBlock )

    IF lClose
        ( dbfClient )->( dbCloseArea() )
    end

RETURN cText







FUNCTION cCliCtaVta( cCodCli, dbfClient )

   local oBlock
   local oError
   local lClose      := .F.
   local cCliCtaVta  := ""

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfClient )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      cCliCtaVta     := ( dbfClient )->CtaVenta
   end

   if Empty( cCliCtaVta )
      cCliCtaVta     := cCtaCli()
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de clientes" )

   end
   ErrorBlock( oBlock )

   if lClose
        ( dbfClient )->( dbCloseArea() )
   end

RETURN ( cCliCtaVta )



FUNCTION cBanco( cCodCli, dbfClient )

   local oBlock
   local oError
   local cText    := ""
   local lClose   := .F.

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfClient )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   IF ( dbfClient )->( dbSeek( Rjust( cCodCli, "0" ) ) )
      cText       := ( dbfClient )->Banco
    end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de clientes" )

   end
   ErrorBlock( oBlock )

    IF lClose
        ( dbfClient )->( dbCloseArea() )
    end

RETURN cText



FUNCTION lCliCreditoSolicitado( cCodCli, dbfClient )

   local lRet     := .F.

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      lRet        := ( dbfClient )->lCreSol
   end

RETURN lRet







STATIC FUNCTION ChkAllSubCta()

   local oDlg
   local cArea
   local nRecno      := ( dbfClient )->( RecNo() )
   local cTag        := ( dbfClient )->( OrdSetFocus( 1 ) )
   local cRuta       := cRutCnt()
   local cCodEmp     := cEmpCnt( "A" )
   local oChkCreate
   local lChkCreate  := .F.
   local oChkCuenta
   local lChkCuenta  := .F.
   local aMsg        := {}
   local oTree
   local cCliOrg
   local cCliDes
   local oCliOrg
   local oCliDes
   local oSayCliOrg
   local oSayCliDes
   local cSayCliOrg
   local cSayCliDes
   local oImageList

   if Empty( cRuta ) .OR. Empty( cCodEmp )
      msgStop( "No existe enlace a contaplus ®" )
      return .F.
   end

   if !OpenSubCuenta( cRuta, cCodEmp, @cArea, .F. )
      msgStop( "Imposible acceder a ficheros de contaplus ®" )
      return .T.
   end





   cCliOrg           := dbFirst( dbfClient, 1 )
   cCliDes           := dbLast(  dbfClient, 1 )
   cSayCliOrg        := dbFirst( dbfClient, 2 )
   cSayCliDes        := dbLast(  dbfClient, 2 )

   oImageList        := TImageList():New( 16, 16 )
   oImageList:AddMasked( TBitmap():Define( "bRed" ),     ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oImageList:AddMasked( TBitmap():Define( "bGreen" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )





   oDlg = TDialog():New(,,,,, "ChkAllSubCta",, .F.,,,,,, .F.,,,,,, .F., )










   oCliOrg := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, cCliOrg, cCliOrg:= u ) }, oDlg,,, {||    cClient( oCliOrg, dbfClient, oSayCliOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwCli( oCliOrg, oSayCliOrg, dbfClient )}, nil, "LUPA",, )




   oSayCliOrg := TGetHlp():ReDefine( 81, { | u | If( PCount()==0, cSayCliOrg, cSayCliOrg:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oCliDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cCliDes, cCliDes:= u ) }, oDlg,,, {||    cClient( oCliDes, dbfClient, oSayCliDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwCli( oCliDes, oSayCliDes, dbfClient )}, nil, "LUPA",, )




   oSayCliDes := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayCliDes, cSayCliDes:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



   oChkCreate := TCheckBox():ReDefine( 100, { | u | If( PCount()==0, lChkCreate, lChkCreate:= u ) }, oDlg,,,,,,, .F.,, .F. )



   oChkCuenta := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, lChkCuenta, lChkCuenta:= u ) }, oDlg,,,,,,, .F.,, .F. )

   oTree       := TTreeView():Redefine( 170, oDlg )




   TButton():ReDefine( 1, {||( MakAllSubCta( cCliOrg, cCliDes, lChkCuenta, lChkCreate, cArea, aMsg, oTree, oDlg ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oTree:SetImageList( oImageList ) )}, oDlg:bRClicked,,, )

    ( dbfClient )->( dbGoTo( nRecno ) )
    ( dbfClient )->( OrdSetFocus( cTag ) )

   ( cArea )->( dbCloseArea() )

   oImageList:End()

   oTree:Destroy()

   oWndBrw:oBrw:SetFocus()
   oWndBrw:oBrw:Refresh()

return .T.



Static Function MakAllSubCta( cCliOrg, cCliDes, lChkCuenta, lChkCreate, cArea, aMsg, oTree, oDlg )

   local nLen
   local oItem

   oDlg:Disable()

   oTree:DeleteAll()

   nLen              := nLenCuentaContaplus()

   if ( dbfClient )->( dbSeek( cCliOrg ) )

      while ( dbfClient )->Cod <= cCliDes .AND. !( dbfClient )->( Eof() )

         if Empty( AllTrim( ( dbfClient )->SubCta ) ) .AND. lChkCuenta
            if dbLock( dbfClient )
               ( dbfClient )->SubCta      := "430" + Right( Rtrim( ( dbfClient )->Cod ), nLen )
               ( dbfClient )->( dbUnLock() )
            end
         end

         if !Empty( AllTrim( ( dbfClient )->SubCta ) )

            if !( cArea )->( dbSeek( ( dbfClient )->SubCta, .T. ) )



               if lChkCreate .OR. ApoloMsgNoYes(   "Subcuenta : " + Rtrim( ( dbfClient )->SubCta ) + " no existe" + Chr(13)+Chr(10) +  "¿ Desea crearla ?", "Enlace con contaplus ®" )

                  ( cArea )->( dbAppend() )
                  ( cArea )->Cod         := ( dbfClient )->Subcta
                  ( cArea )->Titulo      := ( dbfClient )->Titulo
                  ( cArea )->Nif         := ( dbfClient )->Nif
                  ( cArea )->Domicilio   := ( dbfClient )->Domicilio
                  ( cArea )->Poblacion   := ( dbfClient )->Poblacion
                  ( cArea )->Provincia   := ( dbfClient )->Provincia
                  ( cArea )->CodPostal   := ( dbfClient )->CodPostal
                  ( cArea )->( dbCommit() )

                  oItem := oTree:Add( "Cuenta " + Rtrim( ( dbfClient )->Subcta ) + " del cliente " + Rtrim( ( dbfClient )->Cod ) + ", " + Rtrim( ( dbfClient )->Titulo ) + " creada", 1 )

               else

                  oItem := oTree:Add( "Cuenta " + Rtrim( ( dbfClient )->Subcta ) + " del cliente " + Rtrim( ( dbfClient )->Cod ) + ", " + Rtrim( ( dbfClient )->Titulo ) + " creación cancelada", 1 )

               end

            else

               oItem    := oTree:Add( "Cuenta " + Rtrim( ( dbfClient )->Subcta ) + " del cliente " + Rtrim( ( dbfClient )->Cod ) + ", " + Rtrim( ( dbfClient )->Titulo ) + " ya existe", 0 )

            end

         else

            oItem       := oTree:Add( "El Cliente : " + Rtrim( ( dbfClient )->Cod ) + ", " + Rtrim( ( dbfClient )->Titulo ) + " no tiene codificada cuenta en Contaplus", 0 )

         end

         oTree:Select( oItem )

         SysRefresh()

         ( dbfClient )->( dbSkip() )

      end

   end

   MsgInfo( "Proceso finalizado" )

   oDlg:Enable()

Return nil







STATIC FUNCTION CnfCli( dbfClient )

    local oDlg
   local cIniCli  := cPatEmp() + "Client.Ini"

   oDlg = TDialog():New(,,,, "Configurar clientes", "CNF_DEF_CLI",, .F.,,,,,, .F.,,,,,, .F., )

      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aIniCli[ 1 ], aIniCli[ 1 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aIniCli[ 2 ], aIniCli[ 2 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aIniCli[ 3 ], aIniCli[ 3 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aIniCli[ 4 ], aIniCli[ 4 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aIniCli[ 5 ], aIniCli[ 5 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aIniCli[ 6 ], aIniCli[ 6 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aIniCli[ 7 ], aIniCli[ 7 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aIniCli[ 8 ], aIniCli[ 8 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aIniCli[ 9 ], aIniCli[ 9 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aIniCli[ 10 ], aIniCli[ 10 ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

      TComboBox():ReDefine( 210, { | u | If( PCount()==0, aIniCli[ 11 ], aIniCli[ 11 ]:= u ) }, { "Todas", "Activas" }, oDlg,,,,,,, .T.,,,,,, )




      TButton():ReDefine( 1, {||( WrtIniCli( cIniCli, ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| WrtIniCli( cIniCli, ), oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN NIL



STATIC FUNCTION WrtIniCli( cIniCli )

    WritePProString( "campos", "1", aIniCli[ 1 ], cIniCli )
    WritePProString( "campos", "2", aIniCli[ 2 ], cIniCli )
    WritePProString( "campos", "3", aIniCli[ 3 ], cIniCli )
    WritePProString( "campos", "4", aIniCli[ 4 ], cIniCli )
    WritePProString( "campos", "5", aIniCli[ 5 ], cIniCli )
    WritePProString( "campos", "6", aIniCli[ 6 ], cIniCli )
    WritePProString( "campos", "7", aIniCli[ 7 ], cIniCli )
    WritePProString( "campos", "8", aIniCli[ 8 ], cIniCli )
    WritePProString( "campos", "9", aIniCli[ 9 ], cIniCli )
    WritePProString( "campos", "10",aIniCli[ 10], cIniCli )
   WritePProString( "filtro", "ft",aIniCli[ 11], cIniCli )

RETURN NIL






FUNCTION EdmCli( cCodRut, cPathTo, oStru )

   local n           := 0
   local cChr
   local fTar
   local cFilEdm
   local cFilOdb
   local nWrote
   local nRead
   local oError
   local oBlock
   local dbfClient

   IIF( cCodRut == nil, cCodRut := "001", ) ;
   IIF( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "ECLIE" + cCodRut + ".TXT"
   cFilOdb           := cPathTo + "ECLIE" + cCodRut + ".ODB"





   IF file( cFilEdm )
      fErase( cFilEdm )
   end

   fTar              := fCreate( cFilEdm )





   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oStru:oMetUno:cText   := "Clientes"
   oStru:oMetUno:SetTotal( ( dbfClient )->( LastRec() ) )

   WHILE !(dbfClient)->( eof() )

      cChr  := "+"
      cChr  += Rjust( (dbfClient)->COD, "0", 7 ) + ","

      if !empty( (dbfClient)->NBREST )
      cChr  += EdmSubStr( (dbfClient)->NBREST, 1, 35 )
      else
      cChr  += EdmSubStr( (dbfClient)->TITULO, 1, 35 )
      end

      cChr  += EdmSubStr( (dbfClient)->TITULO, 1, 35 )
      cChr  += EdmSubStr( (dbfClient)->DOMICILIO, 1, 35 )
      cChr  += EdmSubStr( (dbfClient)->POBLACION, 1, 25 )
      cChr  += EdmSubStr( (dbfClient)->NIF, 1, 14 )
      cChr  += EdmLogicSN( (dbfClient)->LREQ )
      cChr  += EdmLocig12( (dbfClient)->LMAYORISTA )
      cChr  += EdmSubStr( "S" )
      cChr  += EdmSubStr( Trans( (dbfClient)->NDTOESP, "@ 99.99" ), 1, 5 )
      cChr  += EdmSubStr( "0" )
      cChr  += EdmSubStr( Trans( (dbfClient)->RIESGO, "@ 9999.99" ), 1, 7 )
      cChr  += EdmSubStr( Trans( (dbfClient)->NDPP, "@ 99.99" ), 1, 5 )
      cChr  += EdmSubStr( "S", 1, 1, .F. )

      cChr  += Chr(13)+Chr(10)

      nWrote:= fwrite( fTar, cChr, nRead )

      oStru:oMetUno:Set( ++n )







      (dbfClient)->( dbSkip() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end
   ErrorBlock( oBlock )

   ( dbfClient )->( dbCloseArea() )
   fClose( fTar )





   if file( FullCurDir() + "CONVER.EXE" )
      WinExec( FullCurDir() + "CONVER.EXE " + cFilEdm + " " + cFilOdb + " 44 -x", 6 )
   end

RETURN NIL







FUNCTION EdmRutCli( cCodRut, cPathTo, oStru )

   local n           := 0
   local cChr
   local fTar
   local nWrote
   local nRead
   local cFilEdm
   local cFilOdb
   local cRutCli
   local dbfClient

   IIF( cCodRut == nil, cCodRut := "001", ) ;
   IIF( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cRutCli           := cCodRut

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "ERUTA" + cCodRut + ".TXT"
   cFilOdb           := cPathTo + "ERUTA" + cCodRut + ".ODB"





   if file( cFilEdm )
      fErase( cFilEdm )
   end

   fTar              := fCreate( cFilEdm )





   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oStru:oMetUno:cText   := "Rutas"
   oStru:oMetUno:SetTotal( ( dbfClient )->( LastRec() ) )

   WHILE !(dbfClient)->( eof() )

      if ( dbfClient )->cCodRut == cRutCli

         cChr  := Right( cCodRut, 1 )
         cChr  += Rjust( (dbfClient)->COD, "0", 7 )
         cChr  += Chr(13)+Chr(10)

         nWrote:= fwrite( fTar, cChr, nRead )

      end

      oStru:oMetUno:Set( ++n )







      ( dbfClient )->( dbSkip() )

   end

   ( dbfClient )->( dbCloseArea() )
   fClose( fTar )

   if file( FullCurDir() + "CONVER.EXE" )
      WinExec( FullCurDir() + "CONVER.EXE " + cFilEdm + " " + cFilOdb + " 44 -x", 6 )
   end

RETURN NIL






STATIC FUNCTION lSelAll( oBrw, dbf, lSel )

   local nRecAct  := ( dbf )->( Recno() )

   IIF( lSel == nil, lSel := .T., ) ;

   CursorWait()

   ( dbf )->( dbGoTop() )

   while !( dbf )->( eof() )

      if dbLock( dbf )
         ( dbf )->lSndInt := lSel
         ( dbf )->( dbUnlock() )
      end

      ( dbf )->( dbSkip() )

   end

   ( dbf )->( dbGoTo( nRecAct ) )

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

   CursorWe()

RETURN NIL



FUNCTION lSndCli( oWndBrw, dbf, lVal )

   local nRecAct
   local nRecOld           := ( dbf )->( Recno() )

   for each nRecAct in ( oWndBrw:oBrw:aSelected )
      ( dbf )->( dbGoTo( nRecAct ) )

      if dbDialogLock( dbf )

         if Empty( lVal )
            ( dbf )->lSndInt  := !( dbf )->lSndInt
         else
            ( dbf )->lSndInt  := lVal
         end

         ( dbf )->( dbUnlock() )

      end

   next

   ( dbf )->( dbGoTo( nRecOld ) )

    oWndBrw:Refresh()

    oWndBrw:oBrw:Select()

Return nil







FUNCTION RetGrpCli( cCodCli, dbfClient )

   local cGrpCli  := ""

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      cGrpCli     := ( dbfClient )->cCodGrp
   end

RETURN ( cGrpCli )












































































































function CalRiesgo( cPatEmp, cCodCli, oMeter, oMessage, lMessage )

return ( 0 )



function SetRiesgo( cCodCli, dbfClient, oRieCli )

return ( 0 )



static function AddFamilia( oBrwAtp, dbfTmpAtp, cCodCli )

   local oDlg
   local nPre        := aFill( Array( 6 ), 0 )
   local aPre        := aFill( Array( 6 ), .F. )
   local nDto        := aFill( Array( 6 ), 0 )
   local nDtoArt     := 0
   local nDtoDiv     := 0
   local nDprArt     := 0
   local nComAge     := 0
   local dFecIni     := Ctod( "" )
   local dFecFin     := Ctod( "" )
   local lAplPre     := .T.
   local lAplPed     := .T.
   local lAplAlb     := .T.
   local lAplFac     := .T.
   local oFamIni
   local cFamIni     := dbFirst( dbfFamilia, 1 )
   local oFamIniTxt
   local cFamIniTxt  := ""
   local oFamFin
   local cFamFin     := dbLast( dbfFamilia, 1 )
   local oFamFinTxt
   local cFamFinTxt  := ""
   local oBtnOk

   oDlg = TDialog():New(,,,,, "AddFamilia",, .F.,,,,,, .F.,,,,,, .F., )







   oFamIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFamIni, cFamIni:= u ) }, oDlg,,, {||    cFamilia( oFamIni, dbfFamilia, oFamIniTxt )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwFamilia( oFamIni, oFamIniTxt )}, nil, "LUPA",, )





   oFamIniTxt := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cFamIniTxt, cFamIniTxt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   oFamFin := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cFamFin, cFamFin:= u ) }, oDlg,,, {||    cFamilia( oFamFin, dbfFamilia, oFamFinTxt )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwFamilia( oFamFin, oFamFinTxt )}, nil, "LUPA",, )





   oFamFinTxt := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cFamFinTxt, cFamFinTxt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aPre[ 1 ], aPre[ 1 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 141, { | u | If( PCount()==0, aPre[ 2 ], aPre[ 2 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 142, { | u | If( PCount()==0, aPre[ 3 ], aPre[ 3 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 143, { | u | If( PCount()==0, aPre[ 4 ], aPre[ 4 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 144, { | u | If( PCount()==0, aPre[ 5 ], aPre[ 5 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 145, { | u | If( PCount()==0, aPre[ 6 ], aPre[ 6 ]:= u ) }, oDlg,,,,,,, .F.,, .F. )






   TGetHlp():ReDefine( 250, { | u | If( PCount()==0, nPre[ 1 ], nPre[ 1 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 1 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 251, { | u | If( PCount()==0, nPre[ 2 ], nPre[ 2 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 2 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 252, { | u | If( PCount()==0, nPre[ 3 ], nPre[ 3 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 3 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 253, { | u | If( PCount()==0, nPre[ 4 ], nPre[ 4 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 4 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 254, { | u | If( PCount()==0, nPre[ 5 ], nPre[ 5 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 5 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 255, { | u | If( PCount()==0, nPre[ 6 ], nPre[ 6 ]:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( !aPre[ 6 ] )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 400, { | u | If( PCount()==0, nDto[ 1 ], nDto[ 1 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 1 ] >= 0 .AND. nDto[ 1 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 410, { | u | If( PCount()==0, nDto[ 2 ], nDto[ 2 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 2 ] >= 0 .AND. nDto[ 2 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 420, { | u | If( PCount()==0, nDto[ 3 ], nDto[ 3 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 3 ] >= 0 .AND. nDto[ 3 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 430, { | u | If( PCount()==0, nDto[ 4 ], nDto[ 4 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 4 ] >= 0 .AND. nDto[ 4 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 440, { | u | If( PCount()==0, nDto[ 5 ], nDto[ 5 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 5 ] >= 0 .AND. nDto[ 5 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 450, { | u | If( PCount()==0, nDto[ 6 ], nDto[ 6 ]:= u ) }, oDlg,, "@E 999.99", {||    nDto[ 6 ] >= 0 .AND. nDto[ 6 ] <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, nDtoArt, nDtoArt:= u ) }, oDlg,, "@E 999.99", {||    nDtoArt >= 0 .AND. nDtoArt <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, nDtoDiv, nDtoDiv:= u ) }, oDlg,, cPouDiv,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, nDprArt, nDprArt:= u ) }, oDlg,, "@E 999.99", {||    nDprArt >= 0 .AND. nDprArt <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nComAge, nComAge:= u ) }, oDlg,, "@E 999.99", {||    nComAge >= 0 .AND. nComAge <= 100},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, dFecIni, dFecIni:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, dFecFin, dFecFin:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 210, { | u | If( PCount()==0, lAplPre, lAplPre:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 220, { | u | If( PCount()==0, lAplPed, lAplPed:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 230, { | u | If( PCount()==0, lAplAlb, lAplAlb:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 240, { | u | If( PCount()==0, lAplFac, lAplFac:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oBtnOk := TButton():ReDefine( 1, {||(  AddArtFam( cCodCli, cFamIni, cFamFin, aPre, nPre, nDto, nDtoArt, nDtoDiv, nDprArt, nComAge, dFecIni, dFecFin, lAplPre, lAplPed, lAplAlb, lAplFac, oDlg ), oBrwAtp:Refresh() )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oFamIni:lValid(), oFamFin:lValid() )}, oDlg:bRClicked,,, )

return nil



static function AddArtFam( cCodCli, cFamIni, cFamFin, aPre, nPre, nDto, nDtoArt, nDtoDiv, nDprArt, nComAge, dFecIni, dFecFin, lAplPre, lAplPed, lAplAlb, lAplFac, oDlg )

   local nIvaPct  := 0
   local nOrdArt  := ( dbfArticulo )->( OrdSetFocus( "cFamCod" ) )
   local nRecAtp  := ( dbfTmpAtp )->( RecNo() )
   local nOrdAnt  := ( dbfTmpAtp )->( OrdSetFocus( "cCodArt" ) )

   oDlg:Disable()

   if ( dbfFamilia )->( dbSeek( cFamIni ) )

      while ( dbfFamilia )->cCodFam <= cFamFin .AND. !( dbfFamilia )->( eof() )

         if ( dbfArticulo )->( dbSeek( ( dbfFamilia )->cCodFam ) )

            while ( dbfArticulo )->Familia == ( dbfFamilia )->cCodFam .AND. !( dbfArticulo )->( eof() )





               if !( dbfTmpAtp )->( dbSeek( ( dbfArticulo )->Codigo ) )

                  nIvaPct                    := nIva( dbfIva, ( dbfArticulo )->TipoIva )

                  ( dbfTmpAtp )->( dbAppend() )

                  ( dbfTmpAtp )->cCodCli     := cCodCli
                  ( dbfTmpAtp )->cCodArt     := ( dbfArticulo )->Codigo

                  if aPre[ 1 ]
                     ( dbfTmpAtp )->nPrcArt  := ( dbfArticulo )->pVenta1
                  else
                     ( dbfTmpAtp )->nPrcArt  := nPre[ 1 ]
                  end

                  if aPre[ 2 ]
                     ( dbfTmpAtp )->nPrcArt2 := ( dbfArticulo )->pVenta2
                  else
                     ( dbfTmpAtp )->nPrcArt2 := nPre[ 2 ]
                  end

                  if aPre[ 3 ]
                     ( dbfTmpAtp )->nPrcArt3 := ( dbfArticulo )->pVenta3
                  else
                     ( dbfTmpAtp )->nPrcArt3 := nPre[ 3 ]
                  end

                  if aPre[ 4 ]
                     ( dbfTmpAtp )->nPrcArt4 := ( dbfArticulo )->pVenta4
                  else
                     ( dbfTmpAtp )->nPrcArt4 := nPre[ 4 ]
                  end

                  if aPre[ 5 ]
                     ( dbfTmpAtp )->nPrcArt5 := ( dbfArticulo )->pVenta5
                  else
                     ( dbfTmpAtp )->nPrcArt5 := nPre[ 5 ]
                  end

                  if aPre[ 6 ]
                     ( dbfTmpAtp )->nPrcArt6 := ( dbfArticulo )->pVenta6
                  else
                     ( dbfTmpAtp )->nPrcArt6 := nPre[ 6 ]
                  end

                  ( dbfTmpAtp )->nPreIva1    := ( dbfTmpAtp )->nPrcArt  + ( ( dbfTmpAtp )->nPrcArt  * nIvaPct / 100 )
                  ( dbfTmpAtp )->nPreIva2    := ( dbfTmpAtp )->nPrcArt2 + ( ( dbfTmpAtp )->nPrcArt2 * nIvaPct / 100 )
                  ( dbfTmpAtp )->nPreIva3    := ( dbfTmpAtp )->nPrcArt3 + ( ( dbfTmpAtp )->nPrcArt3 * nIvaPct / 100 )
                  ( dbfTmpAtp )->nPreIva4    := ( dbfTmpAtp )->nPrcArt4 + ( ( dbfTmpAtp )->nPrcArt4 * nIvaPct / 100 )
                  ( dbfTmpAtp )->nPreIva5    := ( dbfTmpAtp )->nPrcArt5 + ( ( dbfTmpAtp )->nPrcArt5 * nIvaPct / 100 )
                  ( dbfTmpAtp )->nPreIva6    := ( dbfTmpAtp )->nPrcArt6 + ( ( dbfTmpAtp )->nPrcArt6 * nIvaPct / 100 )

                  ( dbfTmpAtp )->nDtoArt     := nDtoArt
                  ( dbfTmpAtp )->nDtoDiv     := nDtoDiv
                  ( dbfTmpAtp )->nComAge     := nComAge
                  ( dbfTmpAtp )->dFecIni     := dFecIni
                  ( dbfTmpAtp )->dFecFin     := dFecFin
                  ( dbfTmpAtp )->lAplPre     := lAplPre
                  ( dbfTmpAtp )->lAplPed     := lAplPed
                  ( dbfTmpAtp )->lAplAlb     := lAplAlb
                  ( dbfTmpAtp )->lAplFac     := lAplFac

                  ( dbfTmpAtp )->nDto1       := nDto[ 1 ]
                  ( dbfTmpAtp )->nDto2       := nDto[ 2 ]
                  ( dbfTmpAtp )->nDto3       := nDto[ 3 ]
                  ( dbfTmpAtp )->nDto4       := nDto[ 4 ]
                  ( dbfTmpAtp )->nDto5       := nDto[ 5 ]
                  ( dbfTmpAtp )->nDto6       := nDto[ 6 ]

               end

               ( dbfArticulo )->( dbSkip() )

            end

         end

         ( dbfFamilia )->( dbSkip() )

      end

   end

   oDlg:Enable()
   oDlg:End()

   ( dbfArticulo )->( OrdSetFocus( nOrdArt ) )
   ( dbfTmpAtp   )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTmpAtp   )->( dbGoTo( nRecAtp ) )

return nil



function RefBrwCta( oBrwCta, cSubCta, dbfDiario )

   if dbfDiario <> nil

      if !Empty( cSubCta )
         ( dbfDiario )->( OrdScope( 0, cSubCta ) )
         ( dbfDiario )->( OrdScope( 1, cSubCta ) )
      else
         ( dbfDiario )->( OrdScope( 0, Replicate( "9", 12 ) ) )
         ( dbfDiario )->( OrdScope( 1, Replicate( "9", 12 ) ) )
      end

      ( dbfDiario )->( dbGoTop() )

      if oBrwCta <> nil
         oBrwCta:Refresh()
      end

   end

return .T.



STATIC FUNCTION ChgPrc( dbfCliAtp, oWndBrw )

    local oDlg
   local cFam              := Space( 5 )
    local oFam
   local cTxtFam           := "Todas"
    local oTxtFam
   local cTipIva           := Space( 1 )
    local oTipIva
   local cTxtIva           := "Todos"
   local oTxtIva
   local lTarifa1          := .F.
   local lTarifa2          := .F.
   local lTarifa3          := .F.
   local lTarifa4          := .F.
   local lTarifa5          := .F.
   local lTarifa6          := .F.
   local cCliOrg
   local cCliDes
   local oCliOrg
   local oCliDes
   local oSayCliOrg
   local oSayCliDes
   local cSayCliOrg
   local cSayCliDes
   local oRad
   local nRad              := 1
   local nPctInc           := 0
   local nUndInc           := 0
   local aComBox           :=  { "Precio actual", "Precio 1", "Precio 2", "Precio 3", "Precio 4", "Precio 5", "Precio 6" }
   local oComBox
   local cComBox           := "Precio actual"
   local oMtr
   local nMtr              := 0
   local lRnd              := .F.
   local lGenerateTarifa   := .F.
   local lAppTarifaFecha   := .F.
   local nDec              := nRouDiv( cDivEmp(), dbfDiv )
   local cArtOrg
   local cArtDes
   local oArtOrg
   local oArtDes
   local oSayArtOrg
   local oSayArtDes
   local cSayArtOrg
   local cSayArtDes
   local dIniPrc           := Date()
   local dFinPrc           := Ctod( "31/12/" + Str( Year( Date() ), 4 ) )
   local aStaCli           := aGetStatus( dbfClient, .T. )





   oDlg = TDialog():New(,,,,, "CHGPRECLI",, .F.,,,,,, .F.,,,,,, .F., )





   cCliOrg        := dbFirst( dbfClient, 1 )
   cCliDes        := dbLast ( dbfClient, 1 )
   cSayCliOrg     := dbFirst( dbfClient, 2 )
   cSayCliDes     := dbLast ( dbfClient, 2 )

   cArtOrg        := dbFirst( dbfArticulo, 1 )
   cArtDes        := dbLast ( dbfArticulo, 1 )
   cSayArtOrg     := dbFirst( dbfArticulo, 2 )
   cSayArtDes     := dbLast ( dbfArticulo, 2 )










   oCliOrg := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, cCliOrg, cCliOrg:= u ) }, oDlg,,, {||    cClient( oCliOrg, dbfClient, oSayCliOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwCli( oCliOrg, oSayCliOrg, dbfClient )}, nil, "LUPA",, )




   oSayCliOrg := TGetHlp():ReDefine( 81, { | u | If( PCount()==0, cSayCliOrg, cSayCliOrg:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oCliDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cCliDes, cCliDes:= u ) }, oDlg,,, {||    cClient( oCliDes, dbfClient, oSayCliDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwCli( oCliDes, oSayCliDes, dbfClient )}, nil, "LUPA",, )




   oSayCliDes := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayCliDes, cSayCliDes:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










   oArtOrg := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cArtOrg, cArtOrg:= u ) }, oDlg,,, {||    cArticulo( oArtOrg, dbfArticulo, oSayArtOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwArticulo( oArtOrg, oSayArtOrg )}, nil, "LUPA",, )




   oSayArtOrg := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, cSayArtOrg, cSayArtOrg:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )






   oArtDes := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, cArtDes, cArtDes:= u ) }, oDlg,,, {||    cArticulo( oArtDes, dbfArticulo, oSayArtDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwArticulo( oArtDes, oSayArtDes )}, nil, "LUPA",, )




   oSayArtDes := TGetHlp():ReDefine( 211, { | u | If( PCount()==0, cSayArtDes, cSayArtDes:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )











   oFam := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFam, cFam:= u ) }, oDlg,,, {||     ( cFamilia( oFam, , oTxtFam ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFamilia( oFam, oTxtFam ) )}, nil, "LUPA",, )





    oTxtFam := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cTxtFam, cTxtFam:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )












   oTipIva := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cTipIva, cTipIva:= u ) }, oDlg,, "@!", {||    ( cTiva( oTipIva, dbfIva, oTxtIva ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( oTipIva, nil, oTxtIva ) )}, nil, "LUPA",, )





    oTxtIva := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cTxtIva, cTxtIva:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )







   TCheckBox():ReDefine( 300, { | u | If( PCount()==0, lGenerateTarifa, lGenerateTarifa:= u ) }, oDlg,,,,,,, .F.,, .F. )





   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, dIniPrc, dIniPrc:= u ) }, oDlg,,,,,,,,, .F., {||     lGenerateTarifa},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 240, { | u | If( PCount()==0, dFinPrc, dFinPrc:= u ) }, oDlg,,,,,,,,, .F., {||     lGenerateTarifa},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 310, { | u | If( PCount()==0, lAppTarifaFecha, lAppTarifaFecha:= u ) }, oDlg,,,,,,, .F.,, .F. )







   TCheckBox():ReDefine( 161, { | u | If( PCount()==0, lTarifa1, lTarifa1:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 162, { | u | If( PCount()==0, lTarifa2, lTarifa2:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 163, { | u | If( PCount()==0, lTarifa3, lTarifa3:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 164, { | u | If( PCount()==0, lTarifa4, lTarifa4:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 165, { | u | If( PCount()==0, lTarifa5, lTarifa5:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 166, { | u | If( PCount()==0, lTarifa6, lTarifa6:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oComBox := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cComBox, cComBox:= u ) }, aComBox, oDlg,,,,,,, .F.,,,,,, )





   oRad := TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 170, 172 },,,,, .F.,, )







   TGetHlp():ReDefine( 171, { | u | If( PCount()==0, nPctInc, nPctInc:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||        ( nRad == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 173, { | u | If( PCount()==0, nUndInc, nUndInc:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||        ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )




   TCheckBox():ReDefine( 180, { | u | If( PCount()==0, lRnd, lRnd:= u ) }, oDlg,,,,,,, .F.,, .F. )





    TGetHlp():ReDefine( 190, { | u | If( PCount()==0, nDec, nDec:= u ) }, oDlg,, "@E 9",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   oMtr := TMeter():ReDefine( 220, { | u | If( PCount()==0, nMtr, nMtr:= u ) }, ( dbfCliAtp )->( lastrec() ), oDlg, .F.,, "Procesando", .F.,,,, )




   TButton():ReDefine( 1, {||(  mkChgPrc( cFam, cTipIva, cCliOrg, cCliDes, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, nRad, nPctInc, nUndInc, lRnd, nDec, dbfCliAtp, oComBox, oMtr, oDlg, oWndBrw, cArtOrg, cArtDes, lGenerateTarifa, dIniPrc, dFinPrc, lAppTarifaFecha ) )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| mkChgPrc( cFam, cTipIva, cCliOrg, cCliDes, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, nRad, nPctInc, nUndInc, lRnd, nDec, dbfCliAtp, oComBox, oMtr, oDlg, oWndBrw, cArtOrg, cArtDes, lGenerateTarifa, dIniPrc, dFinPrc, lAppTarifaFecha ) } )

   oDlg:bStart := {|| oCliOrg:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   SetStatus( dbfClient, aStaCli )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION mkChgPrc( cFam, cIva, cCliOrg, cCliDes, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, nRad, nPctInc, nUndInc, lRnd, nDec, dbfCliAtp, oComBox, oMtr, oDlg, oWndBrw, cArtOrg, cArtDes, lGenerateTarifa, dIniPre, dFinPre, lAppTarifaFecha )

   local nOrdAct
   local nRecAct
   local nPrecio        := oComBox:nAt
   local aTmpAtp        := {}
   local aTmpGenerate   := {}
   local x              := 0

   if ApoloMsgNoYes( "¿Desea actualizar los datos de las tarifas de clientes?", "ATENCION" )

      if !lTarifa1 .AND. !lTarifa2 .AND. !lTarifa3 .AND. !lTarifa4 .AND. !lTarifa5 .AND. !lTarifa6
         msgStop( "No ha elegido ningúna tarifa a cambiar." )
         Return .F.
      end

      if lGenerateTarifa

         if Empty( dIniPre )
            msgStop( "Al generar una nueva tarifa la fecha de inicio debe de estar rellena." )
            Return .F.
         end

         if Empty( dFinPre )
            msgStop( "Al generar una nueva tarifa la fecha de fin debe de estar rellena." )
            Return .F.
         end

         if dIniPre > dFinPre
            msgStop( "Fecha de inicio debe ser anterior a la fecha de finalización." )
            Return .F.
         end

      end

      oDlg:Disable()

      nRecAct           := ( dbfCliAtp )->( RecNo() )
      nOrdAct           := ( dbfCliAtp )->( OrdSetFocus( "cCodCli" ) )

      if ( dbfCliAtp )->( dbSeek( cCliOrg ) )

      while ( dbfCliAtp )->cCodCli <= cCliDes .AND. !( dbfCliAtp )->( eof() )




         if ( ( dbfCliAtp )->cCodArt >= cArtOrg .AND. ( dbfCliAtp )->cCodArt <= cArtDes )             .AND. ( empty( cFam ) .OR. RetFld( ( dbfCliAtp )->cCodArt, dbfArticulo, "Familia" ) == cFam )   .AND. ( empty( cIva ) .OR. RetFld( ( dbfCliAtp )->cCodArt, dbfArticulo, "TipoIva" ) == cIva )   .AND. ( !lAppTarifaFecha  .OR. ( dbfCliAtp )->dFecFin >= GetSysDate() )

            aTmpAtp  := dbScatter( dbfCliAtp )





            if lGenerateTarifa

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "dFecIni" ) ) ]   := dIniPre
               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "dFecFin" ) ) ]   := dFinPre

               if Empty( ( dbfCliAtp )->dFecFin ) .OR. ( dbfCliAtp )->dFecFin >= dIniPre

                  if( dbfCliAtp )->( dbRLock() )
                     if Empty( ( dbfCliAtp )->dFecIni )
                        ( dbfCliAtp )->dFecIni                       := CtoD( "01/01/" + Str( Year( Date() ) ) )
                     end
                     ( dbfCliAtp )->dFecFin                          := dIniPre - 1
                     ( dbfCliAtp )->( dbUnLock() )
                  end

               end

            end





            if lTarifa1

                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt )

                  if nRad == 1
                     aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ] ) * nPctInc / 100
                  else
                     aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ]  += nUndInc
                  end

                  if lRnd
                     aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt" ) ) ], nDec )
                  end

            end

            if lTarifa2

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt2 )

               if nRad == 1
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ] ) * nPctInc / 100
               else
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ]  += nUndInc
               end

               if lRnd
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt2" ) ) ], nDec )
               end

            end

            if lTarifa3

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt3 )

               if nRad == 1
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ] ) * nPctInc / 100
               else
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ]  += nUndInc
               end

               if lRnd
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt3" ) ) ], nDec )
               end

            end

            if lTarifa4

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt4 )

               if nRad == 1
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ] ) * nPctInc / 100
               else
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ]  += nUndInc
               end

               if lRnd
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt4" ) ) ], nDec )
               end

            end

            if lTarifa5

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt5 )

               if nRad == 1
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ] ) * nPctInc / 100
               else
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ]  += nUndInc
               end

               if lRnd
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt5" ) ) ], nDec )
               end

            end

            if lTarifa6

               aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ]     := nVal2Change( nPrecio, ( dbfCliAtp )->nPrcArt6 )

               if nRad == 1
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ]  += nVal2Change( nPrecio, aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ] ) * nPctInc / 100
               else
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ]  += nUndInc
               end

               if lRnd
                  aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ]  := Round( aTmpAtp[ ( dbfCliAtp )->( Fieldpos( "nPrcArt6" ) ) ], nDec )
               end

            end

            if lGenerateTarifa
               aAdd( aTmpGenerate, aTmpAtp )
            else
               DBGather( aTmpAtp, dbfCliAtp )
            end

         end

         ( dbfCliAtp )->( dbSkip() )

         oMtr:Set( ( dbfCliAtp )->( OrdKeyNo() ) )

      end

      end

      if lGenerateTarifa

         for x := 1 to Len( aTmpGenerate )
            DBGather( aTmpGenerate[ x ], dbfCliAtp, .T. )
         next

      end

      oMtr:Set( ( dbfCliAtp )->( LastRec() ) )

      ( dbfCliAtp )->( OrdSetFocus( nOrdAct ) )
      ( dbfCliAtp )->( dbGoto( nRecAct ) )

      oDlg:Enable()

   end

   oDlg:End()

   oWndBrw:Refresh()

RETURN NIL



Static Function nVal2Change( nPrecio, nImporte )

   local nVal2Change := 0

   do case
      case nPrecio == 1
         nVal2Change := nImporte
      case nPrecio == 2
         nVal2Change := ( dbfCliAtp )->nPrcArt
      case nPrecio == 3
         nVal2Change := ( dbfCliAtp )->nPrcArt2
      case nPrecio == 4
         nVal2Change := ( dbfCliAtp )->nPrcArt3
      case nPrecio == 5
         nVal2Change := ( dbfCliAtp )->nPrcArt4
      case nPrecio == 6
         nVal2Change := ( dbfCliAtp )->nPrcArt5
      case nPrecio == 7
         nVal2Change := ( dbfCliAtp )->nPrcArt6
   end

RETURN nVal2Change



FUNCTION AppCli( lOpenBrowse )

   local nLevel         := nLevelUsr( "01032" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if Client()
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )

         WinAppRec( nil, bEdtRec, dbfClient )
         CloseFiles()

      end

   end

RETURN .T.



FUNCTION EdtCli( cCodCli, lOpenBrowse )

   local nLevel         := nLevelUsr( "01032" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if Client()
         if dbSeekInOrd( cCodCli, "Cod", dbfClient )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra cliente" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cCodCli, "Cod", dbfClient )
            WinEdtRec( nil, bEdtRec, dbfClient )
         end

         CloseFiles()

      end

   end

RETURN .T.



Function InfCliente( cCodCli, oBrw )

   local nLevel   := nLevelUsr( "01032" )

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if !OpenFiles( .T. )
      CloseFiles()
      return nil
   end



   if ( dbfClient )->( dbSeek( cCodCli ) )
      BrwVtaCli( cCodCli, ( dbfClient )->Titulo )
   else
      MsgStop( "No se encuentra cliente" )
   end



   if oBrw <> nil
      oBrw:Refresh()
   end

   CloseFiles()

RETURN .T.



Static Function EdtRotorMenu( aTmp, aGet, oDlg, dbfClient, oBrw, nMode )

   oMenu := MenuBegin( .F.,,, .F., .F. )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F. )

      MenuBegin( .F.,,, .F., .F. )






         MenuAddItem( "&1. Informe del cliente", "Muestra el informe del Cliente", .F.,, {|oMenuItem|( BrwVtaCli( ( dbfClient )->Cod, ( dbfClient )->Titulo ) )},, "info16",,,,, .F.,,, .F. )



         if !lExternal

            MenuAddItem()




            MenuAddItem( "&1. Añadir presupuesto de cliente", "Añade un presupuesto de cliente", .F.,, {|oMenuItem|( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ), PreCli( nil, nil, ( dbfClient )->Cod, nil ) )},, "Notebook_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&2. Añadir pedido de cliente", "Añade un pedido de cliente", .F.,, {|oMenuItem|( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ), PedCli( nil, nil, ( dbfClient )->Cod, nil ) )},, "Clipboard_empty_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&3. Añadir albarán de cliente", "Añade un albarán de cliente", .F.,, {|oMenuItem|( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ), AlbCli( nil, nil, ( dbfClient )->Cod, nil ) )},, "Document_plain_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&4. Añadir factura de cliente", "Añade una factura de cliente", .F.,, {|oMenuItem|( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ), FactCli( nil, nil, ( dbfClient )->Cod, nil ) )},, "Document_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&5. Añadir tiket de cliente", "Añade un tiket de cliente", .F.,, {|oMenuItem|( SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode ), FrontTpv( nil, nil, ( dbfClient )->Cod, nil ) )},, "Cashier_user1_16",,,,, .F.,,, .F. )

         end

      MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )



Static Function EndEdtRotorMenu()

Return ( oMenu:End() )






Static Function  lChangeCostoParticular( aGet, aTmp, oCosto, nMode )

   if aTmp[ 11 ]
      oCosto:Hide()
      aGet[ 12 ]:Show()
   else
      oCosto:Show()
      aGet[ 12 ]:Hide()
      if nMode <> 1
         oCosto:cText( nCosto( nil, dbfArticulo, dbfArtKit ) )
      end
   end

Return ( .T. )







Static Function EdtBnc( aTmp, aGet, dbfTmpBnc, oBrw, aTmpCli, bValid, nMode, cCodCli )

   local oDlg
   local oBmpDiv
   local oSayPai
   local cSayPai
   local lDis        := .F.
   local lOldCtaBnc  := aTmp[ ( dbfTmpBnc )->( Fieldpos( "cEntBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( Fieldpos( "cSucBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( Fieldpos( "cDigBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( Fieldpos( "cCtaBnc" ) ) ]





   if nMode == 1
      ( dbfTmpBnc )->( dbGoTop() )
      if ( dbfTmpBnc )->( Eof() )
         aTmp[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ] := .T.
         lDis        := .T.
      end
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "banco de cliente", "Banco",, .F.,,,,,, .F.,,,,,, .F., )







      aGet[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( lCargaBanco( aGet, aTmp, nMode ) )}, nil, "LUPA",, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cDirBnc" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cDirBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDirBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cPobBnc" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cPobBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cPobBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cCPBnc" ) ) ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cCPBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCPBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cProBnc" ) ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cProBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cProBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ ( dbfTmpBnc )->( FieldPos( "cPaiBnc" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cPaiBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cPaiBnc" ) ) ]:= u ) }, oDlg,,, {||    ( oPais:GetPais( aTmp[ ( dbfTmpBnc )->( FieldPos( "cPaiBnc" ) ) ], oSayPai, oBmpDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oPais:Buscar( aGet[ ( dbfTmpBnc )->( FieldPos( "cPaiBnc" ) ) ] ) )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 301, "BAN_EURO",, oDlg,,, .F., .F.,,, .F.,,, .F. )






      oSayPai := TGetHlp():ReDefine( 302, { | u | If( PCount()==0, cSayPai, cSayPai:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cTlfBnc" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cTlfBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cTlfBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cFaxBnc" ) ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cFaxBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cFaxBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "cPContBnc" ) ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cPContBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cPContBnc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ], aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ], aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) )  ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) )  ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ], aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ]:= u ) }, oDlg,, "9999999999", {||    ( lCalcDC( aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ], aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ] := TCheckBox():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. !lDis )}, .F. )






      aGet[ ( dbfTmpBnc )->( FieldPos( "nSalIni" ) ) ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfTmpBnc )->( FieldPos( "nSalIni" ) ) ], aTmp[ ( dbfTmpBnc )->( FieldPos( "nSalIni" ) ) ]:= u ) }, oDlg,, cPorDiv( cDivEmp(), dbfDiv ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      TButton():ReDefine( 500, {||( EndEdtBnc( aTmp, aGet, dbfTmpBnc, oBrw, nMode, oDlg, cCodCli, aTmpCli, lOldCtaBnc ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .T. )





   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndEdtBnc( aTmp, aGet, dbfTmpBnc, oBrw, nMode, oDlg, cCodCli, aTmpCli, lOldCtaBnc ) } )
   end

   oDlg:bStart := {|| if( aTmp[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ], aGet[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ]:Disable(), aGet[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ]:Enable() ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmpDiv )
      oBmpDiv:end()
   end

Return ( oDlg:nResult == 1 )






Static Function EndEdtBnc( aTmp, aGet, dbfTmpBnc, oBrw, nMode, oDlg, cCodCli, aTmpCli, lOldCtaBnc )

   local nRec

   aTmp[ ( dbfTmpBnc )->( FieldPos( "cCodCli" ) ) ]   := cCodCli

   if lOldCtaBnc <> aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ]

















      nRec     := ( dbfTmpBnc )->( Recno() )

      if ( dbfTmpBnc )->( dbSeek( cCodCli + aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ] ) )

         msgStop( "La cuenta bancaria ya existe" )

         aGet[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ]:SetFocus()

         ( dbfTmpBnc )->( dbGoTo( nRec ) )

         return .F.

      end

      ( dbfTmpBnc )->( dbGoTo( nRec ) )

   end





   WinGather( aTmp, aGet, dbfTmpBnc, oBrw, nMode, , .F. )





   if aTmp[ ( dbfTmpBnc )->( FieldPos( "lBncDef" ) ) ]
      lSelDefBnc( aTmp, dbfTmpBnc )
   end

Return ( oDlg:end( 1 ) )






Static Function lSelDefBnc( aTmp, dbfTmpBnc, oBrw )

   local nRec  := ( dbfTmpBnc )->( RecNo() )

   ( dbfTmpBnc )->( dbGoTop() )
   while !( dbfTmpBnc )->( Eof() )

      if ( dbfTmpBnc )->cEntBnc + ( dbfTmpBnc )->cSucBnc + ( dbfTmpBnc )->cDigBnc + ( dbfTmpBnc )->cCtaBnc <> aTmp[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ] + aTmp[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ]
         ( dbfTmpBnc )->lBncDef := .F.
      else
         ( dbfTmpBnc )->lBncDef := .T.
      end

      ( dbfTmpBnc )->( dbSkip() )

   end

   ( dbfTmpBnc )->( dbGoto( nRec ) )

   if !Empty( oBrw )
      oBrw:Refresh()
   end

Return .T.






Static Function lCargaBanco( aGet, aTmp, nMode )

   local cBanco   := ""

   oBanco:Buscar( aGet[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ], "cCodBnc" )

   cBanco         := aTmp[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ]

   aGet[ ( dbfTmpBnc )->( FieldPos( "cCodBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cNomBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cDirBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cDirBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cPobBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cPobBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cProBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cProBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cCPBnc"  ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cPosBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cTlfBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cTlfBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cFaxBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cFaxBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cPContBnc")) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cPcoBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cEntBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cEntBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cSucBnc" ) ) ]:cText( oRetFld( cBanco, oBanco:oDbf, "cOfiBnc" ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cDigBnc" ) ) ]:cText( Space( 2 ) )
   aGet[ ( dbfTmpBnc )->( FieldPos( "cCtaBnc" ) ) ]:cText( Space( 10 ) )

Return .T.






Static Function DelBnc( aTmp, oBrwBnc, dbfTmpBnc )





   if !( dbfTmpBnc )->lBncDef

      dbDelRec( oBrwBnc, dbfTmpBnc )

   else

      if dbDelRec( oBrwBnc, dbfTmpBnc )





         ( dbfTmpBnc )->( dbGoTop() )

         if !( dbfTmpBnc )->( Eof() )
            ( dbfTmpBnc )->lBncDef  := .T.
         end

      end

   end

   oBrwBnc:Refresh()

Return ( .T. )



Function lBancoDefecto( cCodigoCliente, dbfBanco )

   local lBanco      := .F.

   if ( dbfBanco )->( dbSeekInOrd( cCodigoCliente, "cCodDef", dbfBanco ) )
      lBanco         := .T.
   end

Return ( lBanco )



Function SynClient( cPath )

   IIF( cPath == nil, cPath := cPatCli(), ) ;





   if OpenFiles( .F. )

      while !( dbfBanco )->( eof() )
         if Len( Rtrim( ( dbfBanco )->cCtaBnc ) ) >= 20
            if dbLock( dbfBanco )
               ( dbfBanco )->cEntBnc   := SubStr( ( dbfBanco )->cCtaBnc,  1,  4 )
               ( dbfBanco )->cSucBnc   := SubStr( ( dbfBanco )->cCtaBnc,  5,  4 )
               ( dbfBanco )->cDigBnc   := SubStr( ( dbfBanco )->cCtaBnc,  9,  2 )
               ( dbfBanco )->cCtaBnc   := SubStr( ( dbfBanco )->cCtaBnc, 11, 10 )
               ( dbfBanco )->( dbUnLock() )
            end
         end


         if Empty( ( dbfBanco )->cDigBnc )

            if dbLock( dbfBanco )
               ( dbfBanco )->cDigBnc   := cDgtControl( ( dbfBanco )->cEntBnc, ( dbfBanco )->cSucBnc, ( dbfBanco )->cDigBnc, ( dbfBanco )->cCtaBnc )
               ( dbfBanco )->( dbUnLock() )
            end

         end

         ( dbfBanco )->( dbSkip() )

      end
























































      while !( dbfClient )->( Eof() )

         if Empty( ( dbfClient )->mFacAut ) .AND. !Empty( ( dbfClient )->cFacAut )

            if dbLock( dbfClient )

               ( dbfClient )->mFacAut  := AllTrim( ( dbfClient )->cFacAut ) + ","
               ( dbfClient )->cFacAut  := ""

               ( dbfClient )->( dbUnLock() )

            end

         end

         ( dbfClient )->( dbSkip() )

      end

      CloseFiles()

   end

Return ( nil )


Function BrwCliTactil( oGet, dbfCli, oGet2, lReturnCliente, cText, cBitmap )

   local oDlg
   local oBrw
   local nRec
   local nOrdAnt
   local cCliente          := ""
   local lClose            := .F.
   local oGetUnidades
   local cGetUnidades      := Space( 100 )
   local oBmpGeneral
   local oSayGeneral
   local cResource         := "HelpEntryTactilCli"
   local oFntBrw

   IIF( lReturnCliente == nil, lReturnCliente := .F., ) ;
   IIF( cText == nil, cText := "Selecione un cliente", ) ;
   IIF( cBitmap == nil, cBitmap := "Businessman2_Alpha_48", ) ;

   if Empty( dbfCli )

      if !OpenFiles( .T. )
         Return nil
      end

      dbfCli               := dbfClient
      lClose               := .T.

   end

   oFntBrw                 := TFont():New( "Segoe UI",  0, 20, .F., .T. )

   nRec                    := ( dbfCli )->( Recno() )
   nOrdAnt                 := ( dbfCli )->( OrdSetFocus( "Telefono" ) )

   ( dbfCli )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Seleccionar cliente ordenado por: Teléfono", cResource,, .F.,,,,,, .F.,,,,,, .F., )





      TButtonBmp():ReDefine( 100, {||( VirtualKey( .F., oGetUnidades ), if( lBigSeek( nil, cGetUnidades, dbfCli ), oBrw:Refresh(), ) )}, oDlg,,, .F.,,,, .F., "Keyboard2_32",, )





      oSayGeneral := TSay():ReDefine( 200, {||   cText}, oDlg,,,, .F., oFntBrw, .F., .F. )





      oBmpGeneral := TBitmap():ReDefine( 500, cBitmap,, oDlg,,, .F., .F.,,, .F.,,, .T. )




      oGetUnidades := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, cGetUnidades, cGetUnidades:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfCli ) ) }, .F., .F.,,,,,, nil,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfCli
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse cliente tactil"
      oBrw:nHeaderHeight   := 40
      oBrw:nRowHeight      := 60
      oBrw:nDataLines      := 2
      oBrw:lHScroll        := .F.
      oBrw:oFont           := oFntBrw

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodBig"
         :bEditValue       := {|| AllTrim( ( dbfCli )->Cod ) }
         :nWidth           := 110
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre y domicilio"
         :cSortOrder       := "Titulo"
         :bEditValue       := {|| AllTrim( ( dbfCli )->Titulo ) + Chr(13)+Chr(10) + AllTrim( ( dbfCli )->Domicilio ) }
         :nWidth           := 440
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :cSortOrder       := "Telefono"
         :bEditValue       := {|| AllTrim( ( dbfCli )->Telefono ) }
         :nWidth           := 140
      end





      TButtonBmp():ReDefine( 160, {||( WinAppRec( oBrw, bEdtBig, dbfCli ) )}, oDlg,,, .F.,,,, .F., "User1_Add_32",, )





      TButtonBmp():ReDefine( 170, {||( WinEdtRec( oBrw, bEdtBig, dbfCli ) )}, oDlg,,, .F.,,,, .F., "User1_Edit_32",, )





      TButtonBmp():ReDefine( 140, {||( oBrw:GoUp() )}, oDlg,,, .F.,,,, .F., "UP32",, )





      TButtonBmp():ReDefine( 150, {||( oBrw:GoDown() )}, oDlg,,, .F.,,,, .F., "DOWN32",, )





      TButtonBmp():ReDefine( 1, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F., "Check_32",, )





      TButtonBmp():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F., "Delete_32",, )

      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      cCliente    := ( dbfCli )->Cod

      if !Empty( oGet )
         oGet:cText( cCliente )
      end

      if !Empty( oGet2 )
         oGet2:cText( Rtrim( ( dbfCli )->Titulo ) )
      end

   end

   if lClose

      CloseFiles()

   else

      ( dbfCli )->( OrdSetFocus( nOrdAnt ) )
      ( dbfCli )->( dbGoTo( nRec ) )

   end

   if !Empty( oFntBrw )
      oFntBrw:End()
   end

Return ( if( !lReturnCliente, oDlg:nResult == 1, cCliente ) )



Static Function EdtInc( aTmp, aGet, dbfFacCliI, oBrw, bWhen, bValid, nMode )

   local oDlg
   local oNomInci
   local cNomInci

   if nMode == 1
      if IsMuebles()
         aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]  := .T.
      end
   end

   if !Empty( aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ] )
      cNomInci    := cNomInci( aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], dbfInci )
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de clientes", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F., )







      aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ]:= u ) }, oDlg,,, {||    ( cTipInci( aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], dbfInci, oNomInci ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIncidencia( dbfInci, aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], oNomInci ) )}, nil, "LUPA",, )




      oNomInci := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cNomInci, cNomInci:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )




_HB_CLASS TClienteLabelGenerator ; UTILITY FUNCTION TClienteLabelGenerator(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TClienteLabelGenerator" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )
   _HB_MEMBER { oFld} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFld" }, .F., .F. ), )

   _HB_MEMBER { oCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCriterio" }, .F., .F. ), )
   _HB_MEMBER { cCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCriterio" }, .F., .F. ), )
   _HB_MEMBER { aCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aCriterio" }, .F., .F. ), )

   _HB_MEMBER { oGrupoInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGrupoInicio" }, .F., .F. ), )
   _HB_MEMBER { cGrupoInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cGrupoInicio" }, .F., .F. ), )

   _HB_MEMBER { oGrupoFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGrupoFin" }, .F., .F. ), )
   _HB_MEMBER { cGrupoFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cGrupoFin" }, .F., .F. ), )

   _HB_MEMBER { oFechaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFechaInicio" }, .F., .F. ), )
   _HB_MEMBER { dFechaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dFechaInicio" }, .F., .F. ), )

   _HB_MEMBER { oFechaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFechaFin" }, .F., .F. ), )
   _HB_MEMBER { dFechaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dFechaFin" }, .F., .F. ), )

   _HB_MEMBER { oInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oInicio" }, .F., .F. ), )
   _HB_MEMBER { oFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFin" }, .F., .F. ), )

   _HB_MEMBER { oFormatoLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFormatoLabel" }, .F., .F. ), )
   _HB_MEMBER { cFormatoLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFormatoLabel" }, .F., .F. ), )

   _HB_MEMBER { nFilaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nFilaInicio" }, .F., .F. ), )
   _HB_MEMBER { nColumnaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColumnaInicio" }, .F., .F. ), )

   _HB_MEMBER { cFileTmpLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFileTmpLabel" }, .F., .F. ), )
   _HB_MEMBER { cAreaTmpLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cAreaTmpLabel" }, .F., .F. ), )

   _HB_MEMBER { oBrwLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwLabel" }, .F., .F. ), )

   _HB_MEMBER { nCantidadLabels} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCantidadLabels" }, .F., .F. ), )
   _HB_MEMBER { nUnidadesLabels} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nUnidadesLabels" }, .F., .F. ), )

   _HB_MEMBER { oMtrLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMtrLabel" }, .F., .F. ), )
   _HB_MEMBER { nMtrLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMtrLabel" }, .F., .F. ), )

   _HB_MEMBER { oFilter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFilter" }, .F., .F. ), )

   _HB_MEMBER { hBmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hBmp" }, .F., .F. ), )

   _HB_MEMBER { oBtnListado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnListado" }, .F., .F. ), )

   _HB_MEMBER { oBtnFilter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnFilter" }, .F., .F. ), )
   _HB_MEMBER { oBtnSiguiente} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnSiguiente" }, .F., .F. ), )
   _HB_MEMBER { oBtnAnterior} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnAnterior" }, .F., .F. ), )
   _HB_MEMBER { oBtnCancel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnCancel" }, .F., .F. ), )

   _HB_MEMBER { aSearch} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aSearch" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TClienteLabelGenerator_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TClienteLabelGenerator_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TClienteLabelGenerator_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TClienteLabelGenerator_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lDefault(); IIF( .F., s_oClass:ModMethod( "lDefault", @TClienteLabelGenerator_lDefault(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lDefault", @TClienteLabelGenerator_lDefault(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER BotonAnterior(); IIF( .F., s_oClass:ModMethod( "BotonAnterior", @TClienteLabelGenerator_BotonAnterior(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BotonAnterior", @TClienteLabelGenerator_BotonAnterior(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER BotonSiguiente(); IIF( .F., s_oClass:ModMethod( "BotonSiguiente", @TClienteLabelGenerator_BotonSiguiente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BotonSiguiente", @TClienteLabelGenerator_BotonSiguiente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER PutLabel(); IIF( .F., s_oClass:ModMethod( "PutLabel", @TClienteLabelGenerator_PutLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PutLabel", @TClienteLabelGenerator_PutLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectAllLabels(); IIF( .F., s_oClass:ModMethod( "SelectAllLabels", @TClienteLabelGenerator_SelectAllLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectAllLabels", @TClienteLabelGenerator_SelectAllLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectCriterioLabels(); IIF( .F., s_oClass:ModMethod( "SelectCriterioLabels", @TClienteLabelGenerator_SelectCriterioLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectCriterioLabels", @TClienteLabelGenerator_SelectCriterioLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddLabel(); IIF( .F., s_oClass:ModMethod( "AddLabel", @TClienteLabelGenerator_AddLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddLabel", @TClienteLabelGenerator_AddLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DelLabel(); IIF( .F., s_oClass:ModMethod( "DelLabel", @TClienteLabelGenerator_DelLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DelLabel", @TClienteLabelGenerator_DelLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER EditLabel(); IIF( .F., s_oClass:ModMethod( "EditLabel", @TClienteLabelGenerator_EditLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EditLabel", @TClienteLabelGenerator_EditLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER FilterLabel(); IIF( .F., s_oClass:ModMethod( "FilterLabel", @TClienteLabelGenerator_FilterLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "FilterLabel", @TClienteLabelGenerator_FilterLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ChangeCriterio(); IIF( .F., s_oClass:ModMethod( "ChangeCriterio", @TClienteLabelGenerator_ChangeCriterio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ChangeCriterio", @TClienteLabelGenerator_ChangeCriterio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPrintLabels(); IIF( .F., s_oClass:ModMethod( "lPrintLabels", @TClienteLabelGenerator_lPrintLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPrintLabels", @TClienteLabelGenerator_lPrintLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER InitLabel( oLabel); IIF( .F., s_oClass:ModMethod( "InitLabel", @TClienteLabelGenerator_InitLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitLabel", @TClienteLabelGenerator_InitLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lCreateTemporal(); IIF( .F., s_oClass:ModMethod( "lCreateTemporal", @TClienteLabelGenerator_lCreateTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lCreateTemporal", @TClienteLabelGenerator_lCreateTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER PrepareTemporal( oFr); IIF( .F., s_oClass:ModMethod( "PrepareTemporal", @TClienteLabelGenerator_PrepareTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PrepareTemporal", @TClienteLabelGenerator_PrepareTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DestroyTemporal(); IIF( .F., s_oClass:ModMethod( "DestroyTemporal", @TClienteLabelGenerator_DestroyTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DestroyTemporal", @TClienteLabelGenerator_DestroyTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectColumn( oCombo); IIF( .F., s_oClass:ModMethod( "SelectColumn", @TClienteLabelGenerator_SelectColumn(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectColumn", @TClienteLabelGenerator_SelectColumn(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TClienteLabelGenerator ;



UTILITY STATIC function TClienteLabelGenerator_lDefault() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local oError
   local oBlock
   local lError            := .F.

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::cCriterio          := "Ningún criterio"
      ::aCriterio          := { "Ningún criterio", "Grupo clientes", "Fecha modificación" }

      ::cGrupoInicio       := ( dbfClient )->cCodGrp
      ::cGrupoFin          := ( dbfClient )->cCodGrp

      ::dFechaInicio       := Ctod( "01/" + Str( Month( Date() ), 2 ) + "/" + Str( Year( Date() ), 4 ) )
      ::dFechaFin          := GetSysDate()

      ::cFormatoLabel      := GetPvProfString( "Etiquetas", "Cliente", Space( 3 ), cPatEmp() + "Empresa.Ini" )
      if len( ::cFormatoLabel ) < 3
         ::cFormatoLabel   := Space( 3 )
      end

      ::nMtrLabel          := 0

      ::nFilaInicio        := 1
      ::nColumnaInicio     := 1

      ::nCantidadLabels    := 1
      ::nUnidadesLabels    := 1

      ::aSearch            := { "Código", "Nombre", "NIF/CIF", "Población", "Provincia", "Código postal", "Teléfono" }

   RECOVER USING oError

      lError               := .T.

      msgStop( "Error en la creación de generador de etiquetas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return ( !lError )



UTILITY STATIC function TClienteLabelGenerator_Create() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local oBtnPrp
   local oGetOrd
   local oCbxOrd
   local cGetOrd     := Space( 100 )
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }

   if ::lDefault()

      ::oDlg = TDialog():New(,,,,, "SelectLabels_0",, .F.,,,,,, .F.,,,,,, .F., )





         ::oFld := TPages():Redefine( 10, ::oDlg, {"SelectLabels_4", "SelectLabels_2"},,,, )









         TBitmap():ReDefine( 500, "EnvioEtiquetas",, ::oDlg,,, .F., .F.,,, .F.,,, .F. )



         ::oCriterio := TComboBox():ReDefine( 90, { | u | If( PCount()==0, ::cCriterio, ::cCriterio:= u ) }, ::aCriterio, ::oFld:aDialogs[ 1 ],,,,,,, .F.,,,,,, )

         ::oCriterio:bChange        := {|| ::ChangeCriterio() }





         ::oGrupoInicio := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cGrupoInicio, ::cGrupoInicio:= u ) }, ::oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 101 )

         ::oGrupoInicio:bValid    := {|| oGrpCli:Existe( ::cGrupoInicio, ::oGrupoInicio:oHelpText, "cNomGrp", .T., .T., "0" ) }
         ::oGrupoInicio:bHelp     := {|| oGrpCli:Buscar( ::oGrupoInicio ) }



         ::oInicio := TSay():ReDefine( 102,, ::oFld:aDialogs[1],,,, .F.,, .F., .F. )





         ::oGrupoFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cGrupoFin, ::cGrupoFin:= u ) }, ::oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )

         ::oGrupoFin:bValid       := {|| oGrpCli:Existe( ::cGrupoFin, ::oGrupoFin:oHelpText, "cNomGrp", .T., .T., "0" ) }
         ::oGrupoFin:bHelp        := {|| oGrpCli:Buscar( ::oGrupoFin ) }



         ::oFin := TSay():ReDefine( 112,, ::oFld:aDialogs[1],,,, .F.,, .F., .F. )




         ::oFechaInicio := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::dFechaInicio, ::dFechaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




         ::oFechaFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::dFechaFin, ::dFechaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         ::oFormatoLabel := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFormatoLabel, ::cFormatoLabel:= u ) }, ::oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 161 )

            ::oFormatoLabel:bValid  := {|| cDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, dbfDoc, "CL" ) }
            ::oFormatoLabel:bHelp   := {|| BrwDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, "CL" ) }

         TBtnBmp():ReDefine( 220, "Printer_pencil_16",,,,,{|| EdtDocumento( ::cFormatoLabel ) }, ::oFld:aDialogs[ 1 ], .F., , .F., "Modificar formato de etiquetas" )





         TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nFilaInicio, ::nFilaInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::nColumnaInicio, ::nColumnaInicio:= u ) }, ::oFld:aDialogs[ 1 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )







         TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nUnidadesLabels, ::nUnidadesLabels:= u ) }, ::oFld:aDialogs[ 1 ],, "99999",,,,,,, .F.,,, .F., .T.,,, {||      1}, {||      99999},, nil,,, )









         oGetOrd := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, ::oFld:aDialogs[ 2 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

         oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwLabel, dbfClient ) }
         oGetOrd:bValid    := {|| ( dbfClient )->( OrdScope( 0, nil ) ), ( dbfClient )->( OrdScope( 1, nil ) ), ::oBrwLabel:Refresh(), .T. }





         oCbxOrd := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, ::oFld:aDialogs[ 2 ],,,,,,, .F.,,,,,, )

         oCbxOrd:bChange   := {|| ::SelectColumn( oCbxOrd ) }




         TButton():ReDefine( 100, {||( ::PutLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 110, {||( ::SelectAllLabels( .T. ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 120, {||( ::SelectAllLabels( .F. ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 130, {||( ::AddLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 140, {||( ::DelLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 150, {||( ::EditLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 160, {||( WinEdtRec( ::oBrwLabel, bEdtRec, dbfClient ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         TButton():ReDefine( 165, {||( WinZooRec( ::oBrwLabel, bEdtRec, dbfClient ) )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         ::oBtnFilter := TButton():ReDefine( 170, {||( ::FilterLabel() )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )




         oBtnPrp := TButton():ReDefine( 220, {||( nil )}, ::oFld:aDialogs[ 2 ],,, .F.,,,, .F. )

         ::oBrwLabel                 := TXBrowse():New( ::oFld:aDialogs[ 2 ] )

         ::oBrwLabel:nMarqueeStyle   := 5
         ::oBrwLabel:nColSel         := 2

         ::oBrwLabel:lHScroll        := .F.
         ::oBrwLabel:cAlias          := dbfClient

         ::oBrwLabel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         ::oBrwLabel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
         ::oBrwLabel:bLDblClick      := {|| ::PutLabel() }

         ::oBrwLabel:CreateFromResource( 180 )

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Sl. Seleccionado"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfClient )->lLabel }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Código"
            :cSortOrder       := "Cod"
            :bEditValue       := {|| ( dbfClient )->Cod }
            :nWidth           := 80
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Nombre"
            :cSortOrder       := "Titulo"
            :bEditValue       := {|| ( dbfClient )->Titulo }
            :nWidth           := 280
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "N. etiquetas"
            :bEditValue       := {|| ( dbfClient )->nLabel }
            :cEditPicture     := "@E 99,999"
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nEditType        := 1
            :bOnPostEdit      := {|o,x| if( dbDialogLock( dbfClient ), ( ( dbfClient )->nLabel := x, ( dbfClient )->( dbUnlock() ) ), ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "NIF/CIF"
            :cSortOrder       := "Nif"
            :bEditValue       := {|| ( dbfClient )->Nif }
            :nWidth           := 80
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Teléfono"
            :cSortOrder       := "Telefono"
            :bEditValue       := {|| ( dbfClient )->Telefono }
            :nWidth           := 80
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Fax"
            :bEditValue       := {|| ( dbfClient )->Fax }
            :nWidth           := 80
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Domicilio"
            :bEditValue       := {|| ( dbfClient )->Domicilio }
            :nWidth           := 300
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Población"
            :cSortOrder       := "Poblacion"
            :bEditValue       := {|| ( dbfClient )->Poblacion }
            :nWidth           := 200
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Código postal"
            :cSortOrder       := "CodPostal"
            :bEditValue       := {|| ( dbfClient )->CodPostal }
            :nWidth           := 60
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Provincia"
            :cSortOrder       := "Provincia"
            :bEditValue       := {|| ( dbfClient )->Provincia }
            :nWidth           := 100
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Establecimiento"
            :cSortOrder       := "NbrEst"
            :bEditValue       := {|| ( dbfClient )->NbrEst }
            :nWidth           := 100
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Correo electrónico"
            :cSortOrder       := "cMeiInt"
            :bEditValue       := {|| ( dbfClient )->cMeiInt }
            :nWidth           := 100
         end






         ::oMtrLabel := TMeter():ReDefine( 190, { | u | If( PCount()==0, ::nMtrLabel, ::nMtrLabel:= u ) }, ( dbfClient )->( lastrec() ), ::oFld:aDialogs[ 2 ], .F.,, "", .F.,,,, )

         ::oMtrLabel:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








         ::oBtnListado := TButton():ReDefine( 40, {||( TInfCliGrp():New( "Listado de clientes seleccionados para etiquetas" ):Play( .T. ) )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnAnterior := TButton():ReDefine( 20, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnSiguiente := TButton():ReDefine( 30, {||( ::BotonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnCancel := TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oBtnAnterior:Hide(), ::ChangeCriterio(), ::oFormatoLabel:lValid(), oBtnPrp:Hide() }

      ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

      ::End()

   end

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_BotonAnterior() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   ::oFld:GoPrev()

   ::oBtnAnterior:Hide()

   SetWindowText( ::oBtnSiguiente:hWnd, "Siguien&te >" )

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_BotonSiguiente() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   do case
      case ::oFld:nOption == 1

         if Empty( ::cFormatoLabel )

            MsgStop( "Debe cumplimentar un formato de etiquetas" )

         else

            ::oFld:GoNext()
            ::oBtnAnterior:Show()

            if ::oCriterio:nAt <> 1
               ::SelectCriterioLabels()
            end

            SetWindowText( ::oBtnSiguiente:hWnd, "&Terminar" )

         end

      case ::oFld:nOption == 2

         if ::lPrintLabels()

            SetWindowText( ::oBtnCancel:hWnd, "&Cerrar" )

         end

         ::oBrwLabel:Refresh()

   end

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_End() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   WritePProString( "Etiquetas", "Cliente", ::cFormatoLabel, cPatEmp() + "Empresa.Ini" )

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_PutLabel() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   if dbLock( dbfClient )
      ( dbfClient )->lLabel      := !( dbfClient )->lLabel
      if ( dbfClient )->lLabel .AND. Empty( ( dbfClient )->nLabel )
         ( dbfClient )->nLabel   := 1
      end
      ( dbfClient )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_SelectAllLabels( lSelect) ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

    local n            := 0
   local nRecno   := ( dbfClient )->( Recno() )

    CursorWait()

   ( dbfClient )->( dbGoTop() )
   while !( dbfClient )->( eof() )

      if dbLock( dbfClient )
         ( dbfClient )->lLabel := lSelect
         ( dbfClient )->( dbUnLock() )
      end

      ( dbfClient )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( dbfClient )->( dbGoTo( nRecno ) )

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

    CursorArrow()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_SelectCriterioLabels() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

    local n            := 0
   local nRecno   := ( dbfClient )->( Recno() )

    CursorWait()

   ( dbfClient )->( dbGoTop() )
   while !( dbfClient )->( eof() )

      if dbLock( dbfClient )

         do case
            case ::oCriterio:nAt == 2 .AND. ( dbfClient )->cCodGrp >= ::cGrupoInicio .AND. ( dbfClient )->cCodGrp <= ::cGrupoFin
               ( dbfClient )->lLabel := .T.
               ( dbfClient )->nLabel := ::nUnidadesLabels

            case ::oCriterio:nAt == 3 .AND. ( dbfClient )->dFecChg >= ::dFechaInicio .AND. ( dbfClient )->dFecChg <= ::dFechaFin
               ( dbfClient )->lLabel := .T.
               ( dbfClient )->nLabel := ::nUnidadesLabels

            otherwise
               ( dbfClient )->lLabel := .F.
               ( dbfClient )->nLabel := 1

         end

         ( dbfClient )->( dbUnLock() )

      end

      ( dbfClient )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( dbfClient )->( dbGoTo( nRecno ) )

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

    CursorArrow()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_AddLabel() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   if dbLock( dbfClient )
      ( dbfClient )->nLabel++
      ( dbfClient )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_DelLabel() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   if ( dbfClient )->nLabel > 1
      if dbLock( dbfClient )
         ( dbfClient )->nLabel--
         ( dbfClient )->( dbUnLock() )
      end
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_EditLabel() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   ::oBrwLabel:aCols[ 4 ]:Edit()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_FilterLabel() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   if Empty( ::oFilter )
      ::oFilter      := TDlgFlt():New( aItmCli(), dbfClient )
   end

   if !Empty( ::oFilter )

      ::oFilter:Resource()

      if ::oFilter:cExpFilter <> nil
         SetWindowText( ::oBtnFilter:hWnd, "Filtro activo" )
      else
         SetWindowText( ::oBtnFilter:hWnd, "Filtrar" )
      end

   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_ChangeCriterio() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   ::oGrupoInicio:Hide()
   ::oGrupoFin:Hide()

   ::oInicio:Hide()
   ::oFin:Hide()

   ::oFechaInicio:Hide()
   ::oFechaFin:Hide()

   do case
      case ::oCriterio:nAt == 2

         ::oGrupoInicio:Show()
         ::oGrupoFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

      case ::oCriterio:nAt == 3

         ::oFechaInicio:Show()
         ::oFechaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

   end

Return ( Self )





UTILITY STATIC function TClienteLabelGenerator_lPrintLabels() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local oFr

   if !::lCreateTemporal()
      Return .F.
   end

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      ::PrepareTemporal( oFr )





      oFr:PrepareReport()





      oFr:ShowPreparedReport()

   end





   oFr:DestroyFr()





   ::DestroyTemporal()

Return ( .T. )



UTILITY STATIC function TClienteLabelGenerator_InitLabel( oLabel) ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local nStartRow

   if ::nFilaInicio > 1
      nStartRow            := oLabel:nStartRow
      nStartRow            += ( ::nFilaInicio - 1 ) * ( oLabel:nLblHeight + oLabel:nVSeparator )

      if nStartRow < oLabel:nBottomRow
         oLabel:nStartRow  := nStartRow
      end
   end

   if ::nColumnaInicio > 1 .AND. ::nColumnaInicio <= oLabel:nLblOnLine
      oLabel:nLblCurrent   := ::nColumnaInicio
   end

Return ( Self )



UTILITY STATIC function TClienteLabelGenerator_lCreateTemporal() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local n
   local nRec
   local oBlock
   local oError
   local nBlancos
   local lCreateTemporal   := .T.
   local lClose            := .F.

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      tmpClient            := "LblCli"
      filClient            := cGetNewFileName( cPatTmp() + "LblCli" )

      dbCreate( filClient, aSqlStruct( aItmCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), filClient, tmpClient, .F. )

      ( tmpClient )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpClient )->( OrdCreate( filClient, "Cod", "Cod", {|| Field->Cod } ) )





      nRec                 := ( dbfClient )->( Recno() )

      ( dbfClient )->( dbGoTop() )
      while !( dbfClient )->( eof() )

         if ( dbfClient )->lLabel
            for n := 1 to ( dbfClient )->nLabel
               dbPass( dbfClient, tmpClient, .T. )
            next
         end

         ( dbfClient )->( dbSkip() )

      end
      ( tmpClient )->( dbGoTop() )

      ( dbfClient )->( dbGoTo( nRec ) )

   RECOVER USING oError

      lCreateTemporal      := .F.

      MsgStop( "Imposible crear tablas temporales" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lCreateTemporal )



UTILITY STATIC function TClienteLabelGenerator_PrepareTemporal( oFr) ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local n
   local nBlancos       := 0
   local nPaperHeight   := oFr:GetProperty( "MainPage", "PaperHeight" ) * 3.77953
   local nHeight        := oFr:GetProperty( "CabeceraColumnas", "Height" )
   local nColumns       := oFr:GetProperty( "MainPage", "Columns" )
   local nItemsInColumn := int( nPaperHeight / nHeight )

   nBlancos             := ( ::nColumnaInicio - 1 ) * nItemsInColumn
   nBlancos             += ( ::nFilaInicio - 1 )

   for n := 1 to nBlancos
      dbPass( dbBlankRec( dbfClient ), tmpClient, .T. )
   next

   ( tmpClient )->( dbGoTop() )

Return ( .T. )



UTILITY STATIC function TClienteLabelGenerator_DestroyTemporal() ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   if ( tmpClient )->( Used() )
      ( tmpClient )->( dbCloseArea() )
   end

   dbfErase( filClient )

Return ( .T. )



UTILITY STATIC function TClienteLabelGenerator_SelectColumn( oCombo) ; local Self AS CLASS TClienteLabelGenerator := QSelf() AS CLASS TClienteLabelGenerator

   local oCol
   local cOrd                    := oCombo:VarGet()

   if ::oBrwLabel <> nil

      with object ::oBrwLabel

         for each oCol in :aCols

            if Eq( cOrd, oCol:cHeader )
               oCol:cOrder       := "A"
               oCol:SetOrder()
            else
               oCol:cOrder       := " "
            end

         next

      end

      ::oBrwLabel:Refresh()

   end

Return ( Self )











Function RtfRefreshButtons( oRtf, oBtn )

   local aChar := REGetCharFormat( oRTF:hWnd )

   lBold       := aChar[ 5 ] == 700
   lItalic     := aChar[ 6 ]
   lUnderline  := aChar[ 7 ]
   lBullet     := REGetBullet( oRTF:hWnd )

   if oBtn[ 4 ]:lWhen()
      oBtn[ 4 ]:Enable()
      oBtn[ 4 ]:Refresh()
   else
      oBtn[ 4 ]:Disable()
      oBtn[ 4 ]:Refresh()
   end

   if oBtn[ 5 ]:lWhen()
      oBtn[ 5 ]:Enable()
      oBtn[ 5 ]:Refresh()
   else
      oBtn[ 5 ]:Disable()
      oBtn[ 5 ]:Refresh()
   end

Return ( nil )







FUNCTION BrwClient( uGet, uGetName, lBigStyle )

    local oDlg
   local hBmp
    local oBrw
   local uGet1
    local cGet1
   local cTxtOrigen  := uGet:VarGet()
   local nOrdAnt     := GetBrwOpt( "BrwClient" )
    local oCbxOrd
   local aCbxOrd     := { "Código", "Nombre", "NIF/CIF", "Población", "Provincia", "Código postal", "Teléfono", "Establecimiento", "Correo electrónico" }
   local cCbxOrd
   local nLevel      := nLevelUsr( "01032" )
   local oSayText
   local cSayText    := "Listado de clientes"

   nOrdAnt           := Min( Max( nOrdAnt, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrdAnt ]

   IIF( lBigStyle == nil, lBigStyle := .F., ) ;

   if !OpenFiles( .T. )
      Return nil
   end





   if !Empty( cTxtOrigen ) .AND. !( dbfClient )->( dbSeek( cTxtOrigen ) )
      ( dbfClient )->( OrdSetFocus( nOrdAnt ) )
      ( dbfClient )->( dbGoTop() )
   else
      ( dbfClient )->( OrdSetFocus( nOrdAnt ) )
   end





   do case
   case lBigStyle
      oDlg = TDialog():New(,,,, "Seleccionar clientes", "BIGHELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   case ( "PDA" $ cParamsMain() )
      oDlg = TDialog():New(,,,, "Seleccionar clientes", "HELPENTRY_PDA",, .F.,,,,,, .F.,,,,,, .F., )
   otherwise
      oDlg = TDialog():New(,,,, "Seleccionar clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   end






      uGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfClient ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfClient, .T. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfClient )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), uGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfClient
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Clientes"

      with object ( oBrw:AddCol() )
         :cHeader          := "Bl. Bloqueado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfClient )->lBlqCli }
         :nWidth           := 20
         :SetCheck( { "Cnt16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Cod"
         :bEditValue       := {|| ( dbfClient )->Cod }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Titulo"
         :bEditValue       := {|| ( dbfClient )->Titulo }
         :nWidth           := 280
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "NIF/CIF"
         :cSortOrder       := "Nif"
         :bEditValue       := {|| ( dbfClient )->Nif }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :cSortOrder       := "Telefono"
         :bEditValue       := {|| ( dbfClient )->Telefono }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfClient )->Fax }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfClient )->Domicilio }
         :nWidth           := 300
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Población"
         :cSortOrder       := "Poblacion"
         :bEditValue       := {|| ( dbfClient )->Poblacion }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código postal"
         :cSortOrder       := "CodPostal"
         :bEditValue       := {|| ( dbfClient )->CodPostal }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Provincia"
         :cSortOrder       := "Provincia"
         :bEditValue       := {|| ( dbfClient )->Provincia }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Establecimiento"
         :cSortOrder       := "NbrEst"
         :bEditValue       := {|| ( dbfClient )->NbrEst }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Correo electrónico"
         :cSortOrder       := "cMeiInt"
         :bEditValue       := {|| ( dbfClient )->cMeiInt }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Riesgo"
         :bEditValue       := {|| Trans( ( dbfClient )->nImpRie, PicOut() ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfClient )->cPerCto }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Observaciones"
         :bEditValue       := {|| ( dbfClient )->mComent }
         :nWidth           := 200
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )

      if lBigStyle
         oBrw:nHeaderHeight   := 36
         oBrw:nFooterHeight   := 36
         oBrw:nLineHeight     := 36
      end

      if ( "PDA" $ cParamsMain() )



         oSayText := TSay():ReDefine( 100, {|| cSayText}, oDlg,,,, .F.,, .F., .F. )

      end




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if !( "PDA" $ cParamsMain() )





      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdtRec, dbfClient ) )}, oDlg,,, .F., {||     nAnd( nLevel, 2 ) <> 0},,, .F. )





        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdtRec, dbfClient ) )}, oDlg,,, .F., {||     nAnd( nLevel, 4 ) <> 0},,, .F. )

      oDlg:AddFastKey( 113,    {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdtRec, dbfClient ), ) } )
      oDlg:AddFastKey( 114,    {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdtRec, dbfClient ), ) } )

   end

   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

   oDlg:bStart                := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if ValType( uGet ) == "O"
         uGet:cText( (dbfClient)->Cod )
         uGet:lValid()
      else
         uGet  := ( dbfClient )->Cod
      end

      if ValType( uGetName ) == "O"
         uGetName:cText( ( dbfClient )->Titulo )
      end

   end

   DestroyFastFilter( dbfClient )

   SetBrwOpt( "BrwClient", ( dbfClient )->( OrdNumber() ) )

   CloseFiles()

   if Valtype( uGet ) == "O"
      uGet:setFocus()
   end

   DeleteObject( hBmp )

RETURN oDlg:nResult == 1



STATIC FUNCTION OpenFiles( lExt )

   local oBlock
   local oError

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de clientes" )
      Return ( .F. )
   end

   IIF( lExt == nil, lExt := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()

      lOpenFiles           := .T.

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ClientD.Dbf" ), ( cCheckArea( "CLIENTD", @dbfClientD ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "ClientD.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliContactos.Dbf" ), ( cCheckArea( "CliConta", @dbfContactos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliContactos.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfBanco ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliInc.Dbf" ), ( cCheckArea( "CliInc", @dbfCliInc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliInc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @cAgente ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfProL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIPINCI.DBF" ), ( cCheckArea( "TIPINCI", @dbfInci ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIPINCI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CNFFLT.DBF" ), ( cCheckArea( "CNFFLT", @dbfFlt ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CNFFLT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CTIPO" )

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIT.DBF" ), ( cCheckArea( "FACCLIT", @dbfFacCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIP.DBF" ), ( cCheckArea( "FACCLIP", @dbfFacCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIT", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      oBandera             := TBandera():New()

      oStock               := TStock():Create( cPatGrp() )
      if !oStock:lOpenFiles()
         lOpenFiles        := .F.
      else
         oStock:cTikT      := dbfTikT
         oStock:cFacCliP   := dbfFacCliP
         oStock:cFacCliT   := dbfFacCliT
         oStock:cAlbCliT   := dbfAlbCliT
         oStock:cAntCliT   := dbfAntCliT
      end

      oGrpCli              := TGrpCli():Create( cPatCli() )
      if !oGrpCli:OpenFiles()
         lOpenFiles        := .F.
      end

      oPais                := TPais():Create( cPatDat() )
      if !oPais:OpenFiles()
         lOpenFiles        := .F.
      end

      oCtaRem              := TCtaRem():Create( cPatCli() )
      if !oCtaRem:OpenFiles()
         lOpenFiles        := .F.
      end

      oNewImp              := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles        := .F.
      end

      oTrans               := TTrans():Create( cPatCli() )
      if !oTrans:OpenFiles()
         lOpenFiles        := .F.
      end

      oFacAut              := TFacAutomatica():Create( cPatEmp() )
      if !oFacAut:Openfiles()
         lOpenfiles        := .F.
      end

      oBanco            := TBancos():Create()
      oBanco:OpenFiles()

      cPinDiv              := cPinDiv( cDivEmp(), dbfDiv )
      cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
      cPorDiv              := cPorDiv( cDivEmp(), dbfDiv )

      LoaIniCli( cPatEmp() )

      EnableAcceso()

   RECOVER USING oError

      lOpenFiles        := .F.

      EnableAcceso()

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de clientes" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles( lDestroy )

    IIF( lDestroy == nil, lDestroy := .F., ) ;

   DisableAcceso()

   ( dbfClient    )->( dbCloseArea() )
   ( dbfClientD   )->( dbCloseArea() )
   ( dbfCliAtp    )->( dbCloseArea() )
   ( dbfArticulo  )->( dbCloseArea() )
   ( dbfArtKit    )->( dbCloseArea() )
   ( dbfCliInc    )->( dbCloseArea() )
   ( cFPago       )->( dbCloseArea() )
   ( cAgente      )->( dbCloseArea() )
   ( dbfObrasT    )->( dbCloseArea() )
   ( dbfContactos )->( dbCloseArea() )
   ( dbfFPago     )->( dbCloseArea() )
   ( dbfIva       )->( dbCloseArea() )
   ( dbfDiv       )->( dbCloseArea() )
   ( dbfAlmT      )->( dbCloseArea() )
   ( dbfFamilia   )->( dbCloseArea() )
   ( dbfPro       )->( dbCloseArea() )
   ( dbfProL      )->( dbCloseArea() )
   ( dbfDoc       )->( dbCloseArea() )
   ( dbfBanco     )->( dbCloseArea() )
   ( dbfInci      )->( dbCloseArea() )
   ( dbfFlt       )->( dbCloseArea() )
   ( dbfOfe       )->( dbCloseArea() )
   ( dbfArtDiv    )->( dbCloseArea() )
   ( dbfAntCliT   )->( dbCloseArea() )
   ( dbfFacCliT   )->( dbCloseArea() )
   ( dbfFacCliP   )->( dbCloseArea() )
   ( dbfAlbCliT   )->( dbCloseArea() )
   ( dbfAntCliT   )->( dbCloseArea() )
   ( dbfTikT      )->( dbCloseArea() )
   ( dbfTikL      )->( dbCloseArea() )

   dbfClientD     := nil
   dbfCliAtp      := nil
   dbfArticulo    := nil
   dbfArtKit      := nil
   dbfCliInc      := nil
   cFPago         := nil
   cAgente        := nil
   dbfObrasT      := nil
   dbfContactos   := nil
   dbfFPago       := nil
   dbfIva         := nil
   dbfDiv         := nil
   dbfAlmT        := nil
   dbfFamilia     := nil
   dbfPro         := nil
   dbfProL        := nil
   dbfDoc         := nil
   dbfBanco       := nil
   dbfInci        := nil
   dbfFlt         := nil
   dbfOfe         := nil
   dbfArtDiv      := nil
   dbfAntCliT     := nil
   dbfAlbCliT     := nil
   dbfAntCliT     := nil
   dbfTikT        := nil
   dbfTikL        := nil

   if !Empty( oStock )
      oStock:end()
   end

   if oPais <> nil
      oPais:end()
   end

   if oGrpCli <> nil
      oGrpCli:end()
   end

   if oCtaRem <> nil
      oCtaRem:end()
   end

   if oNewImp <> nil
      oNewImp:end()
   end

   if !Empty( oTrans )
      oTrans:End()
   end

   if !Empty( oFacAut )
      oFacAut:End()
   end

   if !Empty( oBanco )
      oBanco:End()
   end

   oPais          := nil
   oGrpCli        := nil
   oCtaRem        := nil
   oNewImp        := nil
   oTrans         := nil
   oFacAut        := nil
   oBanco         := nil

   if lDestroy
      oWndBrw     := nil
   end

   lOpenFiles     := .F.

   EnableAcceso()

Return .T.



FUNCTION LoaIniCli( cPath, cIniCli )

    local n
   local oIniCli

   IIF( cPath == nil, cPath := cPatEmp(), ) ;
   IIF( cIniCli == nil, cIniCli := cPath + "Client.Ini", ) ;






    oIniCli := TIni():New( cIniCli )

      aIniCli[ 1 ] := oIniCli:Get( "campos", "1", Space( 50 ), aIniCli[ 1 ] )

      aIniCli[ 2 ] := oIniCli:Get( "campos", "2", Space( 50 ), aIniCli[ 2 ] )

      aIniCli[ 3 ] := oIniCli:Get( "campos", "3", Space( 50 ), aIniCli[ 3 ] )

      aIniCli[ 4 ] := oIniCli:Get( "campos", "4", Space( 50 ), aIniCli[ 4 ] )

      aIniCli[ 5 ] := oIniCli:Get( "campos", "5", Space( 50 ), aIniCli[ 5 ] )

      aIniCli[ 6 ] := oIniCli:Get( "campos", "6", Space( 50 ), aIniCli[ 6 ] )

      aIniCli[ 7 ] := oIniCli:Get( "campos", "7", Space( 50 ), aIniCli[ 7 ] )

      aIniCli[ 8 ] := oIniCli:Get( "campos", "8", Space( 50 ), aIniCli[ 8 ] )

      aIniCli[ 9 ] := oIniCli:Get( "campos", "9", Space( 50 ), aIniCli[ 9 ] )

      aIniCli[ 10 ] := oIniCli:Get( "campos", "10", Space( 50 ), aIniCli[ 10 ] )

      aIniCli[ 11 ] := oIniCli:Get( "filtro", "ft", "Activas", aIniCli[ 11 ] )



   for n := 1 TO 10
      aIniCli[ n ]   := padr( aIniCli[ n ], 50 )
   next

   aIniCli[ 11 ]     := Rtrim( aIniCli[ 11 ] )


RETURN ( aIniCli )









_HB_CLASS TClienteSenderReciver ; UTILITY FUNCTION TClienteSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TClienteSenderReciver" , {TSenderReciverItem():classh} ) ) ; ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @TClienteSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @TClienteSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER RestoreData(); IIF( .F., s_oClass:ModMethod( "RestoreData", @TClienteSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RestoreData", @TClienteSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SendData(); IIF( .F., s_oClass:ModMethod( "SendData", @TClienteSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SendData", @TClienteSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ReciveData(); IIF( .F., s_oClass:ModMethod( "ReciveData", @TClienteSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReciveData", @TClienteSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Process(); IIF( .F., s_oClass:ModMethod( "Process", @TClienteSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Process", @TClienteSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CleanRelation( cCodCli); IIF( .F., s_oClass:ModMethod( "CleanRelation", @TClienteSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CleanRelation", @TClienteSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TClienteSenderReciver ;



UTILITY STATIC function TClienteSenderReciver_CreateData() ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   local lSnd        := .F.
   local tmpCli
   local tmpAtp
   local tmpObr
   local tmpCon
   local oError
   local oBlock
   local cFileName

   if ::oSender:lServer
      cFileName      := "Cli" + StrZero( ::nGetNumberToSend(), 6 ) + ".All"
   else
      cFileName      := "Cli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()
   end

   ::oSender:SetText( "Enviando clientes" )

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfClient )->( OrdSetFocus( "lSndInt" ) )

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliContactos.Dbf" ), ( cCheckArea( "CLICONTA", @dbfContactos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CliContactos.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





   mkClient( cPatSnd() )

   dbUseArea( .T., cDriver(), cPatSnd() + "Client.Dbf", cCheckArea( "Client", @tmpCli ), .F. )
   ( tmpCli )->( ordListAdd( cPatSnd() + "Client.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatSnd() + "CliAtp.Dbf", cCheckArea( "CliAtp", @tmpAtp ), .F. )
   ( tmpAtp )->( ordListAdd( cPatSnd() + "CliAtp.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatSnd() + "ObrasT.Dbf", cCheckArea( "ObrasT", @tmpObr ), .F. )
   ( tmpObr )->( ordListAdd( cPatSnd() + "ObrasT.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatSnd() + "CliContactos.Dbf", cCheckArea( "CLICONTA", @tmpCon ), .F. )
   ( tmpCon )->( ordListAdd( cPatSnd() + "CliContactos.Cdx" ) )

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfClient )->( lastrec() )
   end

   ( dbfClient )->( dbGoTop() )
   while !( dbfClient )->( eof() )





      if ( dbfClient )->lSndInt .AND. ( dbfClient )->nTipCli <> 2

         lSnd  := .T.

         dbPass( dbfClient, tmpCli, .T. )
         ::oSender:SetText( AllTrim( ( dbfClient )->Cod ) + "; " + ( dbfClient )->Titulo )

         if ( dbfObrasT )->( dbSeek( ( dbfClient )->Cod ) )
            while ( dbfObrasT )->cCodCli == ( dbfClient )->Cod
               dbPass( dbfObrasT, tmpObr, .T. )
               ( dbfObrasT )->( dbSkip() )
            end
         end

         if ( dbfContactos )->( dbSeek( ( dbfClient )->Cod ) )
            while ( dbfContactos )->cCodCli == ( dbfClient )->Cod
               dbPass( dbfContactos, tmpCon, .T. )
               ( dbfContactos )->( dbSkip() )
            end
         end

         if ( dbfCliAtp )->( dbSeek( ( dbfClient )->Cod ) )
            while ( dbfCliAtp )->cCodCli == ( dbfClient )->Cod
               dbPass( dbfCliAtp, tmpAtp, .T. )
               ( dbfCliAtp )->( dbSkip() )
            end
         end

      end

      SysRefresh()

      ( dbfClient )->( dbSkip() )

      if !Empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfClient )->( OrdKeyNo() ) )
      end

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end
   ErrorBlock( oBlock )

   ( tmpCli       )->( dbCloseArea() )
   ( tmpAtp       )->( dbCloseArea() )
   ( tmpObr       )->( dbCloseArea() )
   ( tmpCon       )->( dbCloseArea() )
   ( dbfClient    )->( dbCloseArea() )
   ( dbfCliAtp    )->( dbCloseArea() )
   ( dbfObrasT    )->( dbCloseArea() )
   ( dbfContactos )->( dbCloseArea() )





   if lSnd

      ::oSender:SetText( "Comprimiendo clientes" )

      if ::oSender:lZipData( cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay clientes para enviar" )

   end

Return ( Self )



UTILITY STATIC function TClienteSenderReciver_RestoreData() ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   local oError
   local oBlock
   local dbfClient

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ::lSuccesfullSend

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      while !( dbfClient )->( eof() )

         if ( dbfClient )->lSndInt .AND. dbLock( dbfClient )
            ( dbfClient )->lSndInt := .F.
            ( dbfClient )->( dbUnlock() )
         end

         ( dbfClient )->( dbSkip() )

      end

      ( dbfClient )->( dbCloseArea() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end
   ErrorBlock( oBlock )

Return ( Self )



UTILITY STATIC function TClienteSenderReciver_SendData() ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   local cFileName

   if ::oSender:lServer
      cFileName      := "Cli" + StrZero( ::nGetNumberToSend(), 6 ) + ".All"
   else
      cFileName      := "Cli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()
   end





   if file( cPatOut() + cFileName )

      if FtpSndFile( cPatOut() + cFileName, cFileName, 2000, ::oSender )
         ::IncNumberToSend()
         ::lSuccesfullSend := .T.
         ::oSender:SetText( "Ficheros de clientes enviados " + cFileName )
      else
         ::oSender:SetText( "ERROR fichero de clientes no enviado" )
      end

   end

Return Self



UTILITY STATIC function TClienteSenderReciver_ReciveData() ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   local n
   local aExt





   if ::oSender:lServer
      aExt              := aRetDlgEmp()
   else
      aExt              := { "All" }
   end

   ::oSender:SetText( "Recibiendo clientes" )

   for n := 1 to len( aExt )
      FtpGetFiles( "Cli*." + aExt[ n ], cPatIn(), 2000, ::oSender )
   next

   ::oSender:SetText( "Clientes recibidos" )

Return Self



UTILITY STATIC function TClienteSenderReciver_Process() ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   local m
   local tmpCli
   local tmpAtp
   local tmpObr
   local tmpCon
   local aFiles               := Directory( cPatIn() + "Cli*.*" )
   local oBlock
   local oError





   for m := 1 to len( aFiles )

      oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      if fSize( cPatIn() + aFiles[ m, 1 ] ) > 0





         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )




            if lExistTable( cPatSnd() + "Client.Dbf" ) .AND. lExistTable( cPatSnd() + "CliAtp.Dbf" ) .AND. lExistTable( cPatSnd() + "ObrasT.Dbf" ) .AND. lExistTable( cPatSnd() + "CliContactos.Dbf" )

               dbUseArea( .T., cDriver(), cPatSnd() + "Client.Dbf", cCheckArea( "Client", @tmpCli ), .F. )

               dbUseArea( .T., cDriver(), cPatSnd() + "CliAtp.Dbf", cCheckArea( "CliAtp", @tmpAtp ), .F. )

               dbUseArea( .T., cDriver(), cPatSnd() + "ObrasT.Dbf", cCheckArea( "ObrasT", @tmpObr ), .F. )

               dbUseArea( .T., cDriver(), cPatSnd() + "CliContactos.Dbf", cCheckArea( "CLICONTA", @tmpCon ), .F. )

               dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
               ordSetFocus( "cCliArt" )

               dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliContactos.Dbf" ), ( cCheckArea( "CLICONTA", @dbfContactos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatCli() + "CliContactos.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:nTotal := ( tmpCli )->( lastrec() )
               end

               ( tmpCli )->( dbGoTop() )
               while !( tmpCli )->( eof() )

                  if ( dbfClient )->( dbSeek( ( tmpCli )->Cod ) )
                     if !::oSender:lServer
                        dbPass( tmpCli, dbfClient, .F. )
                        ::oSender:SetText( "Reemplazado : " + AllTrim( ( dbfClient )->Cod ) + "; " + ( dbfClient )->Titulo )
                        ::CleanRelation( ( tmpCli )->Cod )
                     else
                        ::oSender:SetText( "Desestimado : " + AllTrim( ( dbfClient )->Cod ) + "; " + ( dbfClient )->Titulo )
                     end
                  else
                        dbPass( tmpCli, dbfClient, .T. )
                        ::oSender:SetText( "Añadido     : " + AllTrim( ( dbfClient )->Cod ) + "; " + ( dbfClient )->Titulo )
                        ::CleanRelation( ( tmpCli )->Cod )
                  end

                  ( tmpCli )->( dbSkip() )

                  if !Empty( ::oSender:oMtr )
                     ::oSender:oMtr:Set( ( tmpCli )->( recno() ) )
                  end

                  SysRefresh()

               end

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:nTotal := ( tmpAtp )->( lastrec() )
               end

               ( tmpAtp )->( dbGoTop() )
               while !( tmpAtp )->( eof() )

                  if ( dbfCliAtp )->( dbSeek( ( tmpAtp )->cCodCli + ( tmpAtp )->cCodArt ) )
                     if !::oSender:lServer
                        dbPass( tmpAtp, dbfCliAtp, .F. )
                        ::oSender:SetText( "Reemplazado : " + Rtrim( ( tmpAtp )->cCodCli ) + "; " + Rtrim( ( tmpAtp )->cCodArt + "; " + Rtrim( ( tmpAtp )->cCodFam ) ) )
                     else
                        ::oSender:SetText( "Desestimado : " + Rtrim( ( tmpAtp )->cCodCli ) + "; " + Rtrim( ( tmpAtp )->cCodArt + "; " + Rtrim( ( tmpAtp )->cCodFam ) ) )
                     end
                  else
                        dbPass( tmpAtp, dbfCliAtp, .T. )
                        ::oSender:SetText( "Añadido     : " + Rtrim( ( tmpAtp )->cCodCli ) + "; " + Rtrim( ( tmpAtp )->cCodArt + "; " + Rtrim( ( tmpAtp )->cCodFam ) ) )
                  end

                  ( tmpAtp )->( dbSkip() )

                  if !Empty( ::oSender:oMtr )
                     ::oSender:oMtr:Set( ( tmpAtp )->( recno() ) )
                  end

                  SysRefresh()

               end

               ( tmpObr )->( dbGoTop() )
               while !( tmpObr )->( eof() )

                  if ( dbfObrasT )->( dbSeek( ( tmpObr )->cCodCli + ( tmpObr )->cCodObr ) )
                     if !::oSender:lServer
                        dbPass( tmpObr, dbfObrasT, .F. )
                     end
                  else
                        dbPass( tmpObr, dbfObrasT, .T. )
                  end

                  ( tmpObr )->( dbSkip() )

                  if !Empty( ::oSender:oMtr )
                     ::oSender:oMtr:Set( ( tmpObr )->( recno() ) )
                  end

                  SysRefresh()

               end

               ( tmpCon )->( dbGoTop() )
               while !( tmpCon )->( eof() )

                  if ( dbfObrasT )->( dbSeek( ( tmpCon )->cCodCli ) )
                     if !::oSender:lServer
                        dbPass( tmpCon, dbfContactos, .F. )
                     end
                  else
                        dbPass( tmpCon, dbfContactos, .T. )
                  end

                  ( tmpCon )->( dbSkip() )

                  if !Empty( ::oSender:oMtr )
                     ::oSender:oMtr:Set( ( tmpCon )->( recno() ) )
                  end

                  SysRefresh()

               end

               ( tmpCli    )->( dbCloseArea() )
               ( tmpAtp    )->( dbCloseArea() )
               ( tmpObr    )->( dbCloseArea() )
               ( tmpCon    )->( dbCloseArea() )
               ( dbfClient )->( dbCloseArea() )
               ( dbfCliAtp )->( dbCloseArea() )
               ( dbfObrasT )->( dbCloseArea() )
               ( dbfContactos )->( dbCloseArea() )

               ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

            else

               ::oSender:SetText( "Faltan ficheros" )

               if !lExistTable( cPatSnd() + "Client.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "Client.Dbf" )
               end

               if !lExistTable( cPatSnd() + "CliAtp.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "CliAtp.Dbf" )
               end

               if !lExistTable( cPatSnd() + "ObrasT.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "ObrasT.Dbf" )
               end

               if !lExistTable( cPatSnd() + "CliContactos.Dbf" )
                  ::oSender:SetText( "Falta" + cPatSnd() + "CliContactos.Dbf" )
               end

            end

         else

            ::oSender:SetText( "Error en ficheros comprimidos" )

         end

      else

         ::oSender:SetText( "Fichero vacio" )

      end

      RECOVER USING oError

         ( tmpCli       )->( dbCloseArea() )
         ( tmpAtp       )->( dbCloseArea() )
         ( tmpObr       )->( dbCloseArea() )
         ( tmpCon       )->( dbCloseArea() )
         ( dbfClient    )->( dbCloseArea() )
         ( dbfCliAtp    )->( dbCloseArea() )
         ( dbfObrasT    )->( dbCloseArea() )
         ( dbfContactos )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end
      ErrorBlock( oBlock )

   next

Return Self



UTILITY STATIC function TClienteSenderReciver_CleanRelation( cCodCli) ; local Self AS CLASS TClienteSenderReciver := QSelf() AS CLASS TClienteSenderReciver

   while ( dbfCliAtp )->( dbSeek( cCodCli ) )
      dbDel( dbfCliAtp )
   end

   SysRefresh()

   while ( dbfObrasT )->( dbSeek( cCodCli ) )
      dbDel( dbfObrasT )
   end

   SysRefresh()

   while ( dbfContactos )->( dbSeek( cCodCli ) )
      dbDel( dbfContactos )
   end

   SysRefresh()

Return Self






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































_HB_CLASS pdaClienteSenderReciver ; UTILITY FUNCTION pdaClienteSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "pdaClienteSenderReciver" , { HBObject():Classh } ) ) ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @pdaClienteSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @pdaClienteSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CleanRelation(); IIF( .F., s_oClass:ModMethod( "CleanRelation", @pdaClienteSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CleanRelation", @pdaClienteSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS pdaClienteSenderReciver ;



UTILITY STATIC function pdaClienteSenderReciver_CreateData( oPgrActual, oSayStatus, cPatPreVenta) ; local Self AS CLASS pdaClienteSenderReciver := QSelf() AS CLASS pdaClienteSenderReciver

   local lExist      := .F.
   local pdaCliAtp
   local pdaClient
   local pdaObrasT
   local pdaContactos
   local dbfClient
   local dbfCliAtp
   local dbfObrasT
   local dbfContactos
   local cPatPc      := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @pdaClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @pdaCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @pdaObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliContactos.Dbf" ), ( cCheckArea( "CLICONTA", @pdaContactos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CliContactos.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





   dbUseArea( .T., cDriver(), cPatPc + "Client.Dbf", cCheckArea( "Client", @dbfClient ), .T. )
   ( dbfClient )->( ordListAdd( cPatPc + "Client.Cdx" ) )
   ( dbfClient )->( OrdSetFocus( "lSndEnviar" ) )

   dbUseArea( .T., cDriver(), cPatPc + "CliAtp.Dbf", cCheckArea( "CliAtp", @dbfCliAtp ), .T. )
   ( dbfCliAtp )->( ordListAdd( cPatPc + "CliAtp.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ObrasT.Dbf", cCheckArea( "ObrasT", @dbfObrasT ), .T. )
   ( dbfObrasT )->( ordListAdd( cPatPc + "ObrasT.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "CliContactos.Dbf", cCheckArea( "CLICONTA", @dbfContactos ), .T. )
   ( dbfContactos )->( ordListAdd( cPatPc + "CliContactos.Cdx" ) )

   if !Empty( oPgrActual )
      oPgrActual:SetRange( 0, ( dbfClient )->( OrdKeyCount() ) )
   end

   ( dbfClient )->( dbGoTop() )
   while !( dbfClient )->( eof() )

      ::CleanRelation( ( dbfClient )->Cod, pdaCliAtp, pdaObrasT, pdaContactos )

      if ( pdaClient )->( dbSeek( ( dbfClient )->Cod ) )
         dbPass( dbfClient, pdaClient, .F. )
      else
         dbPass( dbfClient, pdaClient, .T. )
      end





      if ( dbfCliAtp )->( dbSeek( ( dbfClient )->Cod ) )
         while ( dbfCliAtp )->cCodCli == ( dbfClient )->Cod .AND. !( dbfCliAtp )->( eof() )
            dbPass( dbfCliAtp, pdaCliAtp, .T. )
            ( dbfCliAtp )->( dbSkip() )
         end
      end





      if ( dbfObrasT )->( dbSeek( ( dbfClient )->Cod ) )
         while ( dbfObrasT )->cCodCli == ( dbfClient )->Cod .AND. !( dbfObrasT )->( eof() )
            dbPass( dbfObrasT, pdaObrasT, .T. )
            ( dbfObrasT )->( dbSkip() )
         end
      end





      if ( dbfContactos )->( dbSeek( ( dbfClient )->Cod ) )
         while ( dbfContactos )->cCodCli == ( dbfClient )->Cod .AND. !( dbfContactos )->( eof() )
            dbPass( dbfContactos, pdaContactos, .T. )
            ( dbfContactos )->( dbSkip() )
         end
      end





      if dbLock( dbfClient )
         ( dbfClient )->lSndInt        := .F.
         ( dbfClient )->( dbUnLock() )
      end





      ( dbfClient )->( dbSkip() )

      if !Empty( oSayStatus )
         oSayStatus:SetText( "Sincronizando clientes " + Alltrim( Str( ( dbfClient )->( OrdKeyNo() ) ) ) + " de " + Alltrim( Str( ( dbfClient )->( OrdKeyCount() ) ) ) )
      end

      SysRefresh()

      if !Empty( oPgrActual )
         oPgrActual:SetPos( ( dbfClient )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   ( dbfClient    )->( dbCloseArea() )
   ( dbfCliAtp    )->( dbCloseArea() )
   ( dbfObrasT    )->( dbCloseArea() )
   ( dbfContactos )->( dbCloseArea() )
   ( pdaClient    )->( dbCloseArea() )
   ( pdaCliAtp    )->( dbCloseArea() )
   ( pdaObrasT    )->( dbCloseArea() )
   ( pdaContactos )->( dbCloseArea() )

Return ( Self )



UTILITY STATIC function pdaClienteSenderReciver_CleanRelation( cCodCli, dbfCliAtp, dbfObrasT, dbfContactos) ; local Self AS CLASS pdaClienteSenderReciver := QSelf() AS CLASS pdaClienteSenderReciver

   while ( dbfCliAtp )->( dbSeek( cCodCli ) )
      dbDel( dbfCliAtp )
   end

   while ( dbfObrasT )->( dbSeek( cCodCli ) )
      dbDel( dbfObrasT )
   end

   while ( dbfContactos )->( dbSeek( cCodCli ) )
      dbDel( dbfContactos )
   end

   SysRefresh()

Return Self





Function IsClient( cPath )

   IIF( cPath == nil, cPath := cPatCli(), ) ;

   if !lExistTable( cPath + "Client.Dbf" )
      dbCreate( cPath + "Client.Dbf", aSqlStruct( aItmCli() ), cDriver() )
   end

   if !lExistTable( cPath + "CliAtp.Dbf" )
      dbCreate( cPath + "CliAtp.Dbf", aSqlStruct( aItmAtp() ), cDriver() )
   end

   if !lExistTable( cPath + "ObrasT.Dbf" )
      dbCreate( cPath + "ObrasT.Dbf", aSqlStruct( aItmObr() ), cDriver() )
   end

   if !lExistTable( cPath + "ClientD.Dbf" )
      dbCreate( cPath + "ClientD.Dbf", aSqlStruct( aCliDoc() ), cDriver() )
   end

   if !lExistTable( cPath + "CliBnc.Dbf" )
      dbCreate( cPath + "CliBnc.Dbf", aSqlStruct( aCliBnc() ), cDriver() )
   end

   if !lExistTable( cPath + "CliInc.Dbf" )
      dbCreate( cPath + "CliInc.Dbf", aSqlStruct( aCliInc() ), cDriver() )
   end






   if !lExistIndex( cPath + "Client.Cdx"  ) .OR.  !lExistIndex( cPath + "CliAtp.Cdx"  ) .OR.  !lExistIndex( cPath + "ObrasT.Cdx"  ) .OR.  !lExistTable( cPath + "ClientD.Dbf" ) .OR.  !lExistTable( cPath + "CliBnc.Cdx"  ) .OR.  !lExistTable( cPath + "CliInc.Cdx"  )

      rxClient( cPath )

   end

Return ( .T. )







FUNCTION mkClient( cPath, lAppend, cPathOld, oMeter )

   IIF( lAppend == nil, lAppend := .F., ) ;

   IF oMeter <> NIL
        oMeter:cText        := "Generando Bases"
      sysRefresh()
    end

   CreateFiles( cPath )
   rxClient( cPath, oMeter )

   if lAppend .AND. lIsDir( cPathOld )
      AppDbf( cPathOld, cPath, "Client"         )
      AppDbf( cPathOld, cPath, "CliAtp"         )
      AppDbf( cPathOld, cPath, "ObrasT"         )
      AppDbf( cPathOld, cPath, "CliBnc"         )
      AppDbf( cPathOld, cPath, "CliInc"         )
      AppDbf( cPathOld, cPath, "CliContactos"   )
   end

RETURN NIL



FUNCTION rxClient( cPath, oMeter )

   local dbfClient

   IIF( cPath == nil, cPath := cPatCli(), ) ;







   if !lExistTable( cPath + "Client.Dbf"  )     .OR. !lExistTable( cPath + "CliAtp.Dbf"  )     .OR. !lExistTable( cPath + "ObrasT.Dbf"  )     .OR. !lExistTable( cPath + "CliBnc.Dbf"  )     .OR. !lExistTable( cPath + "CliInc.Dbf"  )     .OR. !lExistTable( cPath + "ClientD.Dbf" )     .OR. !lExistTable( cPath + "CliContactos.Dbf" )

      CreateFiles( cPath )

   end

   fEraseIndex( cPath + "CLIENT.CDX" )

   dbUseArea( .T., cDriver(), cPath + "CLIENT.DBF", cCheckArea( "CLIENT", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "COD", "Field->COD", {|| Field->COD } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "TITULO", "UPPER( Field->TITULO )", {|| UPPER( Field->TITULO ) }, ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "NIF", "Field->NIF", {|| Field->NIF }, ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "POBLACION", "UPPER( Field->POBLACION )", {|| UPPER( Field->POBLACION ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "PROVINCIA", "UPPER( Field->PROVINCIA )", {|| UPPER( Field->PROVINCIA ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "CodPostal", "Field->CodPostal", {|| Field->CodPostal } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "Telefono", "Field->Telefono", {|| Field->Telefono } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "NbrEst", "Field->NbrEst", {|| Field->NbrEst } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cMeiInt", "Upper( Field->cMeiInt )", {|| Upper( Field->cMeiInt ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted() .and. nTipCli == 3", {||!Deleted() .AND. Field->nTipCli == 3 } ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cCliWeb", "COD", {|| Field->COD } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "CCODRUT", "UPPER( Field->CCODRUT )", {|| UPPER( Field->CCODRUT ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "lSndInt", "Field->lSndInt", {|| Field->lSndInt } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "Client.Cdx", "cCodUsr", "Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg", {|| Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "CODBIG", "UPPER( Field->COD )", {|| UPPER( Field->COD ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cCodWeb", "Str( Field->cCodWeb, 11 )", {|| Str( Field->cCodWeb, 11 ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted() .and. Field->lSndInt" , {||!Deleted() .AND. Field->lSndInt }  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "lSndEnviar", "Field->Cod", {|| Field->Cod } ) )

      ( dbfClient )->( ordCondSet("!Deleted() .and. Field->lSndInt .and. Field->lPubInt" , {||!Deleted() .AND. Field->lSndInt .AND. Field->lPubInt }  ) )
      ( dbfClient )->( ordCreate( cPath + "Client.CDX", "lPubInt", "Field->Cod", {|| Field->Cod } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cUsrDef01", "UPPER( Field->cUsrDef01 )", {|| UPPER( Field->cUsrDef01 ) } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cUsrDef02", "UPPER( Field->cUsrDef02 )", {|| UPPER( Field->cUsrDef02 ) } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "cUsrDef03", "UPPER( Field->cUsrDef03 )", {|| UPPER( Field->cUsrDef03 ) } ) )

      ( dbfClient )->( ordCondSet( "!Deleted() .and. !Field->lBlqCli", {|| !Deleted() .AND. !Field->lBlqCli }  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIENT.CDX", "lBlqCli", "Field->Cod", {|| Field->Cod } ) )

      ( dbfClient )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de clientes" )

   end

   fEraseIndex( cPath + "CliAtp.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "CliAtp.Dbf", cCheckArea( "CLIATP", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )

      while !( dbfClient )->( eof() )
         if ( dbfClient )->nTipAtp == 0
            ( dbfClient )->nTipAtp  := 1
         end
         ( dbfClient )->( dbSkip() )
      end

      ( dbfClient )->( dbGoTop() )

      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "CliAtp.Cdx", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliAtp.Cdx", "cCliArt", "cCodCli + cCodArt", {|| Field->cCodCli + Field->cCodArt } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliAtp.Cdx", "cCodArt", "cCodCli + cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2", {|| Field->CCODCLI + Field->CCODART + Field->CCODPR1 + Field->CCODPR2 + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CLIATP.CDX", "CCODFAM", "CCODCLI + CCODFAM", {|| Field->CCODCLI + Field->CCODFAM } ) )

      ( dbfClient )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de atipicas" )
   end

   fEraseIndex( cPath + "ObrasT.CDX" )

   dbUseArea( .T., cDriver(), cPath + "OBRAST.DBF", cCheckArea( "OBRAST", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "OBRAST.CDX", "CCODCLI", "cCodCli + cCodObr", {|| Field->cCodCli + Field->cCodObr } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "ObrasT.Cdx", "CNOMOBR", "cCodCli + cNomObr", {|| Field->cCodCli + Field->cNomObr } ) )

      ( dbfClient )->( ordCondSet("lDefObr .and. !Deleted()", {|| Field->lDefObr .AND. !Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "OBRAST.CDX", "LDEFOBR", "cCodCli + cCodObr", {|| Field->cCodCli + Field->cCodObr } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "OBRAST.CDX", "CCODIGO", "cCodObr", {|| Field->cCodObr } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "ObrasT.Cdx", "CNOMBRE", "cNomObr", {|| Field->cNomObr } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "ObrasT.Cdx", "CCODWEB", "Str( cCodWeb, 11 )", {|| Str( Field->cCodWeb, 11 ) } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "ObrasT.Cdx", "CDIROBR", "Upper( cDirObr )", {|| Upper( Field->cDirObr ) } ) )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "OBRAST.CDX", "cCodPos", "cCodPos", {|| Field->cCodPos } ) )

      ( dbfClient )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de obras" )
   end

   fEraseIndex( cPath + "CliBnc.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "CliBnc.DBF", cCheckArea( "CliBnc", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliBnc.CDX", "cCodCli", "cCodCli + cCodBnc", {|| Field->cCodCli + Field->cCodBnc } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfClient )->( ordCreate( cPath + "CliBnc.CDX", "cCtaBnc", "cCodCli + cEntBnc + cSucBnc + cDigBnc + cCtaBnc", {|| Field->cCodCli + Field->cEntBnc + Field->cSucBnc + Field->cDigBnc + Field->cCtaBnc } ) )

      ( dbfClient )->( ordCondSet("!Deleted() .and. lBncDef", {|| !Deleted() .AND. Field->lBncDef } ) )
      ( dbfClient )->( ordCreate( cPath + "CliBnc.CDX", "cBncDef", "cCodCli + cCodBnc", {|| Field->cCodCli + Field->cCodBnc } ) )

      ( dbfClient )->( ordCondSet("!Deleted() .and. lBncDef", {|| !Deleted() .AND. Field->lBncDef } ) )
      ( dbfClient )->( ordCreate( cPath + "CliBnc.CDX", "cCodDef", "cCodCli + cEntBnc + cSucBnc + cDigBnc + cCtaBnc", {|| Field->CCODCLI + Field->CENTBNC + Field->CSUCBNC + Field->CDIGBNC + Field->CCTABNC } ) )

      ( dbfClient )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de bancos de clientes" )

   end

   fEraseIndex( cPath + "ClientD.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "ClientD.DBF", cCheckArea( "ClientD", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "ClientD.CDX", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( dbfClient )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de documentos" )
   end

   fEraseIndex( cPath + "CliInc.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "CliInc.Dbf", cCheckArea( "CliInc", @dbfClient ), .F. )
   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliInc.Cdx", "CCODCLI", "CCODCLI", {|| Field->CCODCLI } ) )

      ( dbfClient )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de incidencias" )
   end




   fEraseIndex( cPath + "CliContactos.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "CliContactos.Dbf", cCheckArea( "CLICONTA", @dbfClient ), .F. )

   if !( dbfClient )->( neterr() )
      ( dbfClient )->( __dbPack() )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cNomCon", "cNomCon", {|| Field->cNomCon } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cPosCon", "cPosCon", {|| Field->cPosCon } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cTelCon", "cTelCon", {|| Field->cTelCon } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cMovCon", "cMovCon", {|| Field->cMovCon } ) )

      ( dbfClient )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfClient )->( ordCreate( cPath + "CliContactos.Cdx", "cMaiCon", "cMaiCon", {|| Field->cMaiCon } ) )

      ( dbfClient )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de contactos de clientes." )
   end

RETURN NIL



STATIC FUNCTION CreateFiles( cPath )

   IF !lExistTable( cPath + "CLIENT.DBF" )
      dbCreate( cPath + "CLIENT.DBF", aSqlStruct( aItmCli() ), cDriver() )
    end

   IF !lExistTable( cPath + "CLIATP.DBF" )
      dbCreate( cPath + "CLIATP.DBF", aSqlStruct( aItmAtp() ), cDriver() )
    end

   IF !lExistTable( cPath + "OBRAST.DBF" )
      dbCreate( cPath + "OBRAST.DBF", aSqlStruct( aItmObr() ), cDriver() )
    end

   IF !lExistTable( cPath + "CLIENTD.DBF" )
      dbCreate( cPath + "CLIENTD.DBF", aSqlStruct( aCliDoc() ), cDriver() )
   end

   IF !lExistTable( cPath + "CLIBNC.DBF" )
      dbCreate( cPath + "CLIBNC.DBF", aSqlStruct( aCliBnc() ), cDriver() )
   end

   if !lExistTable( cPath + "CLIINC.DBF" )
      dbCreate( cPath + "CLIINC.DBF", aSqlStruct( aCliInc() ), cDriver() )
   end

   if !lExistTable( cPath + "CLICONTACTOS.Dbf" )
      dbCreate( cPath + "CLICONTACTOS.Dbf", aSqlStruct( aItmContacto() ), cDriver() )
   end

RETURN NIL



function aCliInc()

   local aBase := {}

   aAdd( aBase, { "cCodCli",     "C", 12, 0, "Código del cliente",               "",                   "", "( cDbfInc )" } )
   aAdd( aBase, { "cCodTip",     "C",  3, 0, "Tipo de incidencia" ,              "",                   "", "( cDbfInc )" } )
   aAdd( aBase, { "dFecInc",     "D",  8, 0, "Fecha de la incidencia" ,          "",                   "", "( cDbfInc )" } )
   aAdd( aBase, { "mDesInc",     "M", 10, 0, "Descripción de la incidencia" ,    "",                   "", "( cDbfInc )" } )
   aAdd( aBase, { "lListo",      "L",  1, 0, "Lógico de listo" ,                 "",                   "", "( cDbfInc )" } )
   aAdd( aBase, { "lAviso",      "L",  1, 0, "Lógico de aviso" ,                 "",                   "", "( cDbfInc )" } )

return ( aBase )



FUNCTION aCliBnc()

   local aBase := {}

   aAdd( aBase, { "cCodCli",     "C", 12, 0, "Código del cliente",                        "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "lBncDef",     "L",  1, 0, "Lógico banco por defecto",                  "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCodBnc",     "C", 50, 0, "Nombre del banco",                          "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDirBnc",     "C", 35, 0, "Domicilio del banco",                       "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPobBnc",     "C", 25, 0, "Población del banco",                       "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cProBnc",     "C", 20, 0, "Provincia del banco",                       "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCPBnc",      "C", 15, 0, "Código postal",                             "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cTlfBnc",     "C", 20, 0, "Teléfono",                                  "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cFaxBnc",     "C", 20, 0, "Fax",                                       "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPContBnc",   "C", 35, 0, "Persona de contacto",                       "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPaiBnc",     "C",  4, 0, "Pais",                                      "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cEntBnc",     "C",  4, 0, "Entidad de la cuenta bancaria",             "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cSucBnc",     "C",  4, 0, "Sucursal de la cuenta bancaria",            "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDigBnc",     "C",  2, 0, "Dígito de control de la cuenta bancaria",   "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCtaBnc",     "C", 20, 0, "Cuenta bancaria",                           "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "nSalIni",     "N", 16, 6, "Saldo inicial",                             "",                   "", "( cDbfBnc )" } )

RETURN ( aBase )



function aCliDoc()

   local aCliDoc  := {}

   aAdd( aCliDoc, { "cCodCli", "C",   12,  0, "Código del cliente" ,             "",                   "", "( cDbfCol )" } )
   aAdd( aCliDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,           "",                   "", "( cDbfCol )" } )
   aAdd( aCliDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,             "",                   "", "( cDbfCol )" } )
   aAdd( aCliDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento" ,    "",                   "", "( cDbfCol )" } )

return ( aCliDoc )



FUNCTION aItmAtp()

   local aBase := {}

   aAdd( aBase,  { "cCodCli",   "C", 12, 0, "Código del cliente"}                      )
   aAdd( aBase,  { "cCodArt",   "C", 18, 0, "Código de artículo en atipicas" }         )
   aAdd( aBase,  { "cCodFam",   "C", 16, 0, "Código de familias en atipicas" }         )
   aAdd( aBase,  { "nTipAtp",   "N",  1, 0, "Tipo de atípicas" }                       )
   aAdd( aBase,  { "cCodPr1",   "C", 10, 0, "Código propiedad 1" }                     )
   aAdd( aBase,  { "cValPr1",   "C", 10, 0, "Valor propiedad 1" }                      )
   aAdd( aBase,  { "cCodPr2",   "C", 10, 0, "Código propiedad 2" }                     )
   aAdd( aBase,  { "cValPr2",   "C", 10, 0, "Valor propiedad 2" }                      )
   aAdd( aBase,  { "dFecIni",   "D",  8, 0, "Fecha inicio de la situación atipica" }   )
   aAdd( aBase,  { "dFecFin",   "D",  8, 0, "Fecha fin de la situación atipica" }      )
   aAdd( aBase,  { "lPrcCom",   "L",  1, 0, "Lógico para precio de compras personal" } )
   aAdd( aBase,  { "nPrcCom",   "N", 16, 6, "Precio de coste" }                        )
   aAdd( aBase,  { "nPrcArt",   "N", 16, 6, "Precio de venta 1 del artículo" }         )
   aAdd( aBase,  { "nPrcArt2",  "N", 16, 6, "Precio de venta 2 del artículo" }         )
   aAdd( aBase,  { "nPrcArt3",  "N", 16, 6, "Precio de venta 3 del artículo" }         )
   aAdd( aBase,  { "nPrcArt4",  "N", 16, 6, "Precio de venta 4 del artículo" }         )
   aAdd( aBase,  { "nPrcArt5",  "N", 16, 6, "Precio de venta 5 del artículo" }         )
   aAdd( aBase,  { "nPrcArt6",  "N", 16, 6, "Precio de venta 6 del artículo" }         )
   aAdd( aBase,  { "nPreIva1",  "N", 16, 6, "Precio de venta 1 con " + cImp() }              )
   aAdd( aBase,  { "nPreIva2",  "N", 16, 6, "Precio de venta 2 con " + cImp() }              )
   aAdd( aBase,  { "nPreIva3",  "N", 16, 6, "Precio de venta 3 con " + cImp() }              )
   aAdd( aBase,  { "nPreIva4",  "N", 16, 6, "Precio de venta 4 con " + cImp() }              )
   aAdd( aBase,  { "nPreIva5",  "N", 16, 6, "Precio de venta 5 con " + cImp() }              )
   aAdd( aBase,  { "nPreIva6",  "N", 16, 6, "Precio de venta 6 con " + cImp() }              )
   aAdd( aBase,  { "nDtoArt",   "N",  6, 2, "Descuento del articulo" }                 )
   aAdd( aBase,  { "nDprArt",   "N",  6, 2, "Descuento promocional del articulo" }     )
   aAdd( aBase,  { "lComAge",   "L",  1, 0, "Lógico para tener en cuenta el porcentaje o no" } )
   aAdd( aBase,  { "nComAge",   "N",  6, 2, "Comisión del agente" }                    )
   aAdd( aBase,  { "nDtoDiv",   "N", 16, 6, "Descuento lineal" }                       )
   aAdd( aBase,  { "lAplPre",   "L",  1, 0, "Aplicar en presupuestos" }                )
   aAdd( aBase,  { "lAplPed",   "L",  1, 0, "Aplicar en pedidos" }                     )
   aAdd( aBase,  { "lAplAlb",   "L",  1, 0, "Aplicar en albaranes" }                   )
   aAdd( aBase,  { "lAplFac",   "L",  1, 0, "Aplicar en facturas" }                    )
   aAdd( aBase,  { "nUnvOfe",   "N",  3, 0, "Unidades a vender en la oferta" }         )
   aAdd( aBase,  { "nUncOfe",   "N",  3, 0, "Unidades a cobrar en la oferta" }         )
   aAdd( aBase,  { "nTipXby",   "N",  1, 0, "Tipo de oferta" }                         )
   aAdd( aBase,  { "nDto1",     "N",  6, 2, "Descuento de tarifa de venta 1" }         )
   aAdd( aBase,  { "nDto2",     "N",  6, 2, "Descuento de tarifa de venta 2" }         )
   aAdd( aBase,  { "nDto3",     "N",  6, 2, "Descuento de tarifa de venta 3" }         )
   aAdd( aBase,  { "nDto4",     "N",  6, 2, "Descuento de tarifa de venta 4" }         )
   aAdd( aBase,  { "nDto5",     "N",  6, 2, "Descuento de tarifa de venta 5" }         )
   aAdd( aBase,  { "nDto6",     "N",  6, 2, "Descuento de tarifa de venta 6" }         )

RETURN ( aBase )



FUNCTION aItmCli()

   local aBase := {}

   aAdd( aBase, { "Cod",       "C", 12, 0, "Código",                                        "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Titulo",    "C", 80, 0, "Nombre",                                        "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Nif",       "C", 15, 0, "NIF",                                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Domicilio", "C",100, 0, "Domicilio",                                     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Poblacion", "C", 35, 0, "Población",                                     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Provincia", "C", 20, 0, "Provincia",                                     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CodPostal", "C", 15, 0, "Código postal",                                 "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Telefono",  "C", 20, 0, "Teléfono",                                      "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Fax",       "C", 20, 0, "Fax",                                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Movil",     "C", 20, 0, "Móvil",                                         "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NbrEst",    "C", 35, 0, "Nombre del establecimiento" ,                   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Direst",    "C", 35, 0, "Domicilio del servicio" ,                       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "DiaPago",   "N",  2, 0, "Primer día de pago",                            "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "DiaPago2",  "N",  2, 0, "Segundo día de pago",                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Banco",     "C", 50, 0, "Nombre del banco",                              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "DirBanco",  "C", 35, 0, "Domicilio del banco",                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "PobBanco",  "C", 25, 0, "Población del banco",                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cProBanco", "C", 20, 0, "Provincia del banco",                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Cuenta",    "C", 20, 0, "",                                              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nTipCli",   "N",  1, 0, "Tipo",                                          "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CodPago",   "C",  2, 0, "Código del tipo de pago",                       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cDtoEsp",   "C", 50, 0, "Descripción del descuento por factura" ,        "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoEsp",   "N",  6, 2, "Porcentaje de descuento por factura" ,          "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cDpp",      "C", 50, 0, "Descripción del descuento por pronto pago" ,    "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDpp",      "N",  6, 2, "Porcentaje de descuento por pronto pago" ,      "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoCnt",   "N",  6, 2, "Porcentaje del primer dto personalizado" ,      "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoRap",   "N",  6, 2, "Porcentaje del segundo dto personalizado" ,     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cDtoUno",   "C", 50, 0, "Descripción del primer dto personalizado" ,     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cDtoDos",   "C", 50, 0, "Descripción del segundo dto personalizado" ,    "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoPtf",   "N",  6, 2, "Importe de descuento plataforma" ,              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Riesgo",    "N", 16, 6, "Importe maximo autorizado para operaciones",    "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CopiasF",   "N",  1, 0, "Número de facturas a imprimir",                 "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "Serie",     "C",  1, 0, "Código de la serie de facturas",                "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nRegIva",   "N",  1, 0, "Regimen de " + cImp(),                                "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LREQ",      "L",  1, 0, "Lógico para recargo de equivalencia (S/N)",     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "SUBCTA",    "C", 12, 0, "Subcuenta cliente enlace contaplus",            "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CTAVENTA",  "C",  3, 0, "Cuenta venta cliente contaplus",                "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGENTE",   "C",  3, 0, "Código agente comercial",                       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LMAYORISTA","L",  1, 0, "Utilizar precio de mayorista (S/N)" ,           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NTARIFA",   "N",  1, 0, "Tarifa a aplicar" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LLABEL",    "L",  1, 0, "Lógico para etiquetado (S/N)" ,                 "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NLABEL",    "N",  5, 0, "Número de etiquetas a imprimir" ,               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODTAR",   "C",  5, 0, "Código de tarifa" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "MCOMENT",   "M", 10, 0, "Memo para comentarios" ,                        "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODRUT",   "C",  4, 0, "Código de ruta" ,                               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODRUT2",  "C",  4, 0, "Código de ruta alternativa" ,                   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODPAI",   "C",  4, 0, "Código de país" ,                               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODGRP",   "C",  4, 0, "Código de grupo de cliente" ,                   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODREM",   "C",  3, 0, "Código de remesa" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CMEIINT",   "C", 65, 0, "Correo electrónico" ,                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CWEBINT",   "C", 65, 0, "Página web" ,                                   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LCHGPRE",   "L",  1, 0, "Lógico para autorizacion de venta de crédito" , "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LCRESOL",   "L",  1, 0, "Lógico para credito solicitado" ,               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LPNTVER",   "L",  1, 0, "Lógico para operar con punto verde" ,           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF01", "C",100, 0, "Campo definido 1" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF02", "C",100, 0, "Campo definido 2" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF03", "C",100, 0, "Campo definido 3" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF04", "C",100, 0, "Campo definido 4" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF05", "C",100, 0, "Campo definido 5" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF06", "C",100, 0, "Campo definido 6" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF07", "C",100, 0, "Campo definido 7" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF08", "C",100, 0, "Campo definido 8" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF09", "C",100, 0, "Campo definido 9" ,                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CUSRDEF10", "C",100, 0, "Campo definido 10" ,                            "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISLUN",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISMAR",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISMIE",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISJUE",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISVIE",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISSAB",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LVISDOM",   "L",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISLUN",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISMAR",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISMIE",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISJUE",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISVIE",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISSAB",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NVISDOM",   "N",  4, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGELUN",   "C",  3, 0, "Código agente para visita lunes",               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGEMAR",   "C",  3, 0, "Código agente para visita martes",              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGEMIE",   "C",  3, 0, "Código agente para visita miercoles",           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGEJUE",   "C",  3, 0, "Código agente para visita jueves",              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGEVIE",   "C",  3, 0, "Código agente para visita viernes",             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGESAB",   "C",  3, 0, "Código agente para visita sabado",              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CAGEDOM",   "C",  3, 0, "Código agente para visita domingo",             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "LSNDINT",   "L",  1, 0, "Lógico para envio por internet" ,               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CPERCTO",   "C",200, 0, "Persona de contacto" ,                          "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "CCODALM",   "C",  3, 0, "Código de almacén",                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NMESVAC",   "N",  2, 0, "Mes de vacaciones",                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NIMPRIE",   "N", 16, 6, "Riesgo alcanzado",                              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "NCOLOR",    "N", 10, 0, "",                                              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "SubCtaDto", "C", 12, 0, "Código subcuenta descuento",                    "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lBlqCli",   "L",  1, 0, "Cliente bloqueado" ,                            "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lMosCom",   "L",  1, 0, "Mostrar comentario" ,                           "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lTotAlb",   "L",  1, 0, "Totalizar albaranes" ,                          "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cDtoAtp",   "C", 50, 0, "Descripción del descuento atipico" ,            "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoAtp",   "N",  6, 2, "Porcentaje de descuento atípico" ,              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nSbrAtp",   "N",  1, 0, "" ,                                             "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cCodUsr",   "C",  3, 0, "Código de usuario que realiza el cambio" ,      "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "dFecChg",   "D",  8, 0, "Fecha de cambio" ,                              "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cTimChg",   "C",  5, 0, "Hora de cambio" ,                               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nTipRet",   "N",  1, 0, "Tipo de retención ( 1-Base / 2-Base+IVA )",     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nPctRet",   "N",  6, 2, "Porcentaje de retención",                       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "dFecBlq",   "D",  8, 0, "Fecha de bloqueo del cliente",                  "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cMotBlq",   "C",250, 0, "Motivo del bloqueo del cliente",                "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lModDat",   "L",  1, 0, "Lógico para no modificar datos en la venta" ,   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lMail",     "L",  1, 0, "Lógico para enviar mail" ,                      "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cCodTrn",   "C",  9, 0, "Código del transportista" ,                     "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "mObserv",   "M", 10, 0, "Observaciones",                                 "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lPubInt",   "L",  4, 0, "Lógico para publicar en internet (S/N)",        "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cClave",    "C", 40, 0, "Contraseña cliente para Web",                   "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cCodWeb",   "N", 11, 0, "Código del cliente en la web",                  "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cCodEdi",   "C", 17, 0, "Código del cliente en EDI (EAN)",               "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "cFacAut",   "C",  3, 0, "Código de factura automática",                  "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lWeb",      "L",  4, 0, "Lógico para creado desde internet (S/N)",       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "nDtoArt",   "N",  1, 0, "Descuento de artículo",                         "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "lExcFid",   "L",  1, 0, "Lógico para creado desde internet (S/N)",       "",                   "", "( cDbfCli )" } )
   aAdd( aBase, { "mFacAut",   "M", 10, 0, "Plantillas de facturas automáticas",            "",                   "", "( cDbfCli )" } )

RETURN ( aBase )






FUNCTION lCliBlq( cCodCli, dbfClient )

   local lRet     := .F.

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      lRet        := ( dbfClient )->lBlqCli
   end

RETURN lRet



function GetRiesgo( cCodCli, dbfCli, oRieCli )

   local nImpRiesgo := 0
   local aCliStatus

   if Empty( cCodCli )
      oRieCli:SetColor( ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) )
      oRieCli:cText( nImpRiesgo )
      Return ( nImpRiesgo )
   end

   aCliStatus  := aGetStatus( dbfCli, .T. )

   if ( dbfCli )->( dbSeek( cCodCli ) )

      nImpRiesgo     := ( dbfCli )->nImpRie

      if oRieCli <> nil

         if nImpRiesgo <> 0 .AND. nImpRiesgo >= ( dbfCli )->Riesgo
            oRieCli:SetColor( ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) )
         else
            oRieCli:SetColor( ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) )
         end

         oRieCli:cText( nImpRiesgo )

      end

   end

   SetStatus( dbfCli, aCliStatus )

return ( nImpRiesgo )



Function nXbYAtipica( cCodArt, cCodCli, nCajVen, nUndVen, dFecOfe, dbfAtpCli )

   local nModOfe  := 0
   local nTipXbY  := 0
   local nUndGrt  := 0
   local aXbYRet  := { 0, 0 }
   local nOrd     := ( dbfAtpCli )->( OrdSetFocus( "cCodArt" ) )





   if ( dbfAtpCli )->( dbSeek( cCodCli + cCodArt ) )

      while ( dbfAtpCli )->cCodCli + ( dbfAtpCli )->cCodArt == cCodCli + cCodArt .AND. !( dbfAtpCli )->( eof() )








         if ( dFecOfe >= ( dbfAtpCli )->dFecIni .OR. Empty( ( dbfAtpCli )->dFecIni ) ) .AND.  ( dFecOfe <= ( dbfAtpCli )->dFecFin .OR. Empty( ( dbfAtpCli )->dFecFin ) ) .AND.  ( dbfAtpCli )->nUnvOfe <> 0                                                .AND.  ( dbfAtpCli )->nUncOfe <> 0





            nTipXbY  := ( dbfAtpCli )->nTipXbY

            if nTipXbY == 1

               if mod( nCajVen, ( dbfAtpCli )->nUnvOfe ) == 0





                  nModOfe     := Int( Div( nCajVen, ( dbfAtpCli )->nUnvOfe ) )
                  nUndGrt     := ( ( dbfAtpCli )->nUnvOfe - ( dbfAtpCli )->nUncOfe ) * nModOfe
                  aXbYRet     := { nTipXbY, nUndGrt }

                  exit

               end

            else







               if mod( nCajVen * nUndVen, ( dbfAtpCli )->nUnvOfe ) == 0





                  nModOfe     := Int( Div( ( nCajVen * nUndVen ), ( dbfAtpCli )->nUnvOfe ) )
                  nUndGrt     := ( ( dbfAtpCli )->nUnvOfe - ( dbfAtpCli )->nUncOfe ) * nModOfe
                  aXbYRet     := { nTipXbY, nUndGrt }

                  exit

               end

            end

         end

         ( dbfAtpCli )->( dbSkip() )

      end

   end

   ( dbfAtpCli )->( OrdSetFocus( nOrd ) )

Return ( aXbYRet )



function lSeekAtpFam( cCadSea, dFecDoc, dbfCliAtp )

   local lSea     := .F.
   local nOrd     := ( dbfCliAtp )->( OrdSetFocus( "cCodFam" ) )

   if ( dbfCliAtp )->( dbSeek( cCadSea ) )


      while ( dbfCliAtp )->cCodCli + ( dbfCliAtp )->cCodFam == cCadSea .AND. !( dbfCliAtp )->( eof() )



         if ( ( dbfCliAtp )->dFecIni <= dFecDoc .OR. Empty( ( dbfCliAtp )->dFecIni ) ) .AND.  ( ( dbfCliAtp )->dFecFin >= dFecDoc .OR. Empty( ( dbfCliAtp )->dFecFin ) ) .AND.  ( dbfCliAtp )->nTipAtp == 2

            lSea  := .T.
            exit

         else

            ( dbfCliAtp )->( dbSkip() )

         end

      end

   end

   ( dbfCliAtp )->( OrdSetFocus( nOrd ) )

return ( lSea )



function nDtoAtp( nTarifa, dbfCliAtp, oDto, oTarifa )

   local nDto        := 0

   IIF( nTarifa == nil, nTarifa := 1, ) ;

   if nTarifa == 0
      nTarifa        := 1
   end

   while .T.

      do case
         case nTarifa == 1
            nDto     := ( dbfCliAtp )->nDto1
         case nTarifa == 2
            nDto     := ( dbfCliAtp )->nDto2
         case nTarifa == 3
            nDto     := ( dbfCliAtp )->nDto3
         case nTarifa == 4
            nDto     := ( dbfCliAtp )->nDto4
         case nTarifa == 5
            nDto     := ( dbfCliAtp )->nDto5
         case nTarifa == 6
            nDto     := ( dbfCliAtp )->nDto6
      end

      if nDto == 0 .AND. nTarifa > 1 .AND. lBuscaImportes()
         nTarifa--
         loop
      else
         exit
      end

   end





   if nDto == 0
      nDto           := ( dbfCliAtp )->nDtoArt
   end





   if nDto <> 0 .AND. oDto <> nil
      oDto:cText( nDto )
   end





   if oTarifa <> nil
      oTarifa:cText( nTarifa )
   end

return ( nDto )



function nImpAtp( nTarifa, dbfCliAtp, uPreUnt, nIva, oTarifa )

   local nPre        := 0

   IIF( nTarifa == nil, nTarifa := 1, ) ;
   IIF( nIva == nil, nIva := 0, ) ;

   if nTarifa == 0
      nTarifa        := 1
   end

   while .T.

      do case
         case nTarifa == 1
            nPre     := ( dbfCliAtp )->nPrcArt
         case nTarifa == 2
            nPre     := ( dbfCliAtp )->nPrcArt2
         case nTarifa == 3
            nPre     := ( dbfCliAtp )->nPrcArt3
         case nTarifa == 4
            nPre     := ( dbfCliAtp )->nPrcArt4
         case nTarifa == 5
            nPre     := ( dbfCliAtp )->nPrcArt5
         case nTarifa == 6
            nPre     := ( dbfCliAtp )->nPrcArt6
      end

      if nPre == 0 .AND. nTarifa > 1 .AND. lBuscaImportes()
         nTarifa--
         loop
      else
         exit
      end

   end

   if nIva <> 0
      nPre           += nPre * nIva / 100
   end

   if nPre <> 0 .AND. uPreUnt <> nil
      uPreUnt:cText( nPre )
   end

   if oTarifa <> nil
      oTarifa:cText( nTarifa )
   end

return ( nPre )



function lSeekAtpArt( cCadSea, cCodPrp, cValPrp, dFecDoc, dbfCliAtp )

   local lSea        := .F.
   local nOrd        := ( dbfCliAtp )->( OrdSetFocus( "CCODART" ) )

   IIF( cCodPrp == nil, cCodPrp := Space(10), ) ;
   IIF( cValPrp == nil, cValPrp := Space(10), ) ;

   if ( dbfCliAtp )->( dbSeek( cCadSea + cCodPrp + cValPrp ) )


      while ( ( dbfCliAtp )->cCodCli + ( dbfCliAtp )->cCodArt + ( dbfCliAtp )->cCodPr1 + ( dbfCliAtp )->cCodPr2 + ( dbfCliAtp )->cValPr1 + ( dbfCliAtp )->cValPr2 == cCadSea + cCodPrp + cValPrp ) .AND. (!( dbfCliAtp )->( eof() ) )

         if ( dbfCliAtp )->dFecIni <= dFecDoc .AND. ( dbfCliAtp )->dFecFin >= dFecDoc .AND. ( dbfCliAtp )->nTipAtp <= 1

            lSea     := .T.
            exit

         else

            ( dbfCliAtp )->( dbSkip() )

         end

      end

   end

   if !lSea .AND. ( dbfCliAtp )->( dbSeek( cCadSea + Space( 20 ) ) )


      while ( ( dbfCliAtp )->cCodCli + ( dbfCliAtp )->cCodArt == cCadSea ) .AND. (!( dbfCliAtp )->( eof() ) )

         if ( dbfCliAtp )->dFecIni <= dFecDoc .AND. ( dbfCliAtp )->dFecFin >= dFecDoc .AND. ( dbfCliAtp )->nTipAtp <= 1

            lSea     := .T.
            exit

         else

            ( dbfCliAtp )->( dbSkip() )

         end

      end

   end





   if !lSea .AND. ( dbfCliAtp )->( dbSeek( cCadSea + cCodPrp + cValPrp ) )


      while ( ( dbfCliAtp )->cCodCli + ( dbfCliAtp )->cCodArt + ( dbfCliAtp )->cCodPr1 + ( dbfCliAtp )->cCodPr2 + ( dbfCliAtp )->cValPr1 + ( dbfCliAtp )->cValPr2 == cCadSea + cCodPrp + cValPrp ) .AND. (!( dbfCliAtp )->( eof() ) )

         if Empty( ( dbfCliAtp )->dFecIni ) .AND. Empty( ( dbfCliAtp )->dFecFin ) .AND. ( dbfCliAtp )->nTipAtp <= 1

            lSea     := .T.
            exit

         else

            ( dbfCliAtp )->( dbSkip() )

         end

      end

   end

   if !lSea .AND. ( dbfCliAtp )->( dbSeek( cCadSea + Space( 20 ) ) )


      while ( ( dbfCliAtp )->cCodCli + ( dbfCliAtp )->cCodArt == cCadSea ) .AND. (!( dbfCliAtp )->( eof() ) )

         if Empty( ( dbfCliAtp )->dFecIni ) .AND. Empty( ( dbfCliAtp )->dFecFin )

            lSea     := .T.
            exit

         else

            ( dbfCliAtp )->( dbSkip() )

         end

      end

   end

   ( dbfCliAtp )->( OrdSetFocus( nOrd ) )

return ( lSea )







FUNCTION lCliChg( cCodCli, dbfClient )

   local lRet     := .F.

   if dbSeekInOrd( cCodCli, "Cod", dbfClient )
      lRet        := ( dbfClient )->lChgPre
   end

RETURN lRet



function AddRiesgo( nImpRie, cCodCli, dbfClient )

   local aCliStatus  := aGetStatus( dbfClient, .T. )

   if ( dbfClient )->( DbSeek( cCodCli ) ) .AND. dbDialogLock( dbfClient )
      ( dbfClient )->nImpRie  += nImpRie
      ( dbfClient )->nTipCli  := 1
      ( dbfClient )->( dbUnlock() )
   end

   SetStatus( dbfClient, aCliStatus )

return ( nil )



function DelRiesgo( nImpRie, cCodCli, dbfClient )

   local aCliStatus  := aGetStatus( dbfClient, .T. )

   if ( dbfClient )->( dbSeek( cCodCli ) )
      if dbDialogLock( dbfClient )
         ( dbfClient )->nImpRie  -= nImpRie
         ( dbfClient )->nTipCli  := 1
         ( dbfClient )->( dbCommit() )
         ( dbfClient )->( dbUnlock() )
      end
   end

   SetStatus( dbfClient, aCliStatus )

return ( nil )



FUNCTION RetClient( cCodCli, dbfClient )

   local oBlock
   local oError
   local lClose   := .F.
    local cText        := Space( 30 )

   cCodCli        := RJust( cCodCli, "0", RetNumCodCliEmp() )

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfClient )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ValType( dbfClient ) == "O"
      if dbfClient:Seek( cCodCli )
         cText    := dbfClient:Titulo
      end
   else
      if ( dbfClient )->( dbSeek( cCodCli ) )
         cText    := ( dbfClient )->Titulo
      end
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de clientes" )

   end
   ErrorBlock( oBlock )

   if lClose
      ( dbfClient )->( dbCloseArea() )
   end

RETURN cText



FUNCTION cClient( oGet, dbfClient, oGet2 )

   local oBlock
   local oError
   local lClose   := .F.
   local lValid   := .F.
    local xValor    := oGet:varGet()

   if Empty( xValor )
      if IsObject( oGet2 )
            oGet2:cText( "" )
         oGet2:SetColor( 0, 16777215 )
      end
      return .T.
   elseif at( ".", xValor ) <> 0
      xValor      := PntReplace( oGet, "0", RetNumCodCliEmp() )
   else
      xValor      := RJustObj( oGet, "0", RetNumCodCliEmp() )
   end

   if ( Alltrim( xValor ) == Replicate( "Z", len( Alltrim( xValor ) ) ) )
      return .T.
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfClient )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if dbSeekInOrd( xValor, "Cod", dbfClient )

      if IsObject( oGet )
         oGet:cText( ( dbfClient )->Cod )
      end

      if IsObject( oGet2 )
         oGet2:cText( ( dbfClient )->Titulo )
         if ( dbfClient )->nColor <> 0
            oGet2:SetColor( , ( dbfClient )->nColor )
         end
      end

      lValid      := .T.

   else

      msgStop( "Cliente no encontrado", "Código buscado : " + xValor )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfClient )->( dbCloseArea() )
   end

RETURN lValid



STATIC FUNCTION ActTitle( nKey, nFlags, oGet, nMode, oDlg )

   oGet:Assign()
   oDlg:cTitle( LblTitle( nMode ) + " Cliente : " + Rtrim( oGet:varGet() ) )

RETURN NIL



Static Function lValidNombre( oGet )

   local cNombre  := oGet:VarGet()
   local nRec     := ( dbfClient )->( Recno() )
   local nOrd     := ( dbfClient )->( OrdSetFocus( "Titulo" ) )

   if !Empty( cNombre ) .AND. ( dbfClient )->( dbSeek( cNombre ) )
      msgAlert( "El nombre introducido ya existe en la base de datos" )
   end

   ( dbfClient )->( dbGoTo( nRec ) )
   ( dbfClient )->( OrdSetFocus( nOrd ) )

Return .T.



Static Function lValidCif( oGet )

   local cCif     := oGet:VarGet()
   local nRec     := ( dbfClient )->( Recno() )
   local nOrd     := ( dbfClient )->( OrdSetFocus( "Nif" ) )

   if !Empty( cCif ) .AND. ( dbfClient )->( dbSeek( cCif ) )
      msgAlert( "C.I.F / N.I.F. ya existe" )
   end

   ( dbfClient )->( dbGoTo( nRec ) )
   ( dbfClient )->( OrdSetFocus( nOrd ) )

Return .T.



Static Function lValidTlf( oGet )

   local cTlf     := oGet:VarGet()
   local nRec     := ( dbfClient )->( Recno() )
   local nOrd     := ( dbfClient )->( OrdSetFocus( "Telefono" ) )

   if !Empty( cTlf ) .AND. ( dbfClient )->( dbSeek( cTlf ) )
      msgAlert( "El télefono introducido ya existe en la base de datos" )
   end

   ( dbfClient )->( dbGoTo( nRec ) )
   ( dbfClient )->( OrdSetFocus( nOrd ) )

Return .T.



static function BeginTrans( aTmp, nMode )

   local oError
   local oBlock
   local lErrors     := .F.
   local cCodCli     := aTmp[ ( dbfClient )->( fieldpos( "Cod" ) ) ]
   local cCodSubCta  := aTmp[ ( dbfClient )->( fieldpos( "SubCta" ) ) ]

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   cTmpObr           := cGetNewFileName( cPatTmp() + "TmpObr" )
   cTmpBnc           := cGetNewFileName( cPatTmp() + "TmpBnc" )
   cTmpDoc           := cGetNewFileName( cPatTmp() + "TmpDoc" )
   cTmpAtp           := cGetNewFileName( cPatTmp() + "TmpAtp" )
   cTmpCta           := cGetNewFileName( cPatTmp() + "TmpCta" )
   cTmpInc           := cGetNewFileName( cPatTmp() + "TmpInc" )
   cTmpCon           := cGetNewFileName( cPatTmp() + "TmpCon" )

   dbCreate( cTmpCta, aSqlStruct( aItmSubcuenta() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpCta, cCheckArea( "TmpCta", @dbfTmpSubCta ), .F. )

   ( dbfTmpSubCta )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpSubCta )->( OrdCreate( cTmpCta, "dFecha", "dFecha", {|| Field->dFecha } ) )


   if nMode <> 1
      LoadSubCta( cCodSubCta, cRutCnt(), dbfTmpSubCta )
   end


   dbCreate( cTmpDoc, aSqlStruct( aCliDoc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( "TmpDoc", @dbfTmpDoc ), .F. )

   ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )

   dbCreate( cTmpObr, aSqlStruct( aItmObr() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpObr, cCheckArea( "TmpObr", @dbfTmpObr ), .F. )

   ( dbfTmpObr )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpObr )->( ordCreate( cTmpObr, "Recno", "Recno()", {|| Recno() } ) )

   dbCreate( cTmpBnc, aSqlStruct( aCliBnc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpBnc, cCheckArea( "TmpBnc", @dbfTmpBnc ), .F. )

   ( dbfTmpBnc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpBnc )->( OrdCreate( cTmpBnc, "CCODCLI", "CCODCLI + CENTBNC + CSUCBNC + CDIGBNC + CCTABNC", {|| Field->CCODCLI + Field->CENTBNC + Field->CSUCBNC + Field->CDIGBNC +  Field->CCTABNC } ) )

   dbCreate( cTmpAtp, aSqlStruct( aItmAtp() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpAtp, cCheckArea( "TmpAtp", @dbfTmpAtp ), .F. )

   ( dbfTmpAtp )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
   ( dbfTmpAtp )->( OrdCreate( cTmpAtp, "cCodArt", "CCODART + CCODPR1 + CCODPR2 + CVALPR1 + CVALPR2", {|| Field->CCODART + Field->CCODPR1 + Field->CCODPR2 + Field->CVALPR1 + Field->CVALPR2 } ) )

   ( dbfTmpAtp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpAtp )->( OrdCreate( cTmpAtp, "cCodFam", "cCodFam", {|| Field->cCodFam } ) )

   ( dbfTmpAtp )->( OrdSetFocus( "cCodArt" ) )

   dbCreate( cTmpInc, aSqlStruct( aCliInc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( "TmpInc", @dbfTmpInc ), .F. )

   ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpInc )->( OrdCreate( cTmpInc, "cCodCli", "cCodCli + Dtos( dFecInc )", {|| Field->cCodCli + Dtos( Field->dFecInc ) } ) )

   ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpInc )->( OrdCreate( cTmpInc, "cCodTip", "cCodCli + cCodTip", {|| Field->cCodCli + Field->cCodTip } ) )

   ( dbfTmpInc )->( OrdSetFocus( "cCodCli" ) )





   dbCreate( cTmpCon, aSqlStruct( aItmContacto() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpCon, cCheckArea( "TmpCon", @dbfTmpCon ), .F. )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cNomCon", "cNomCon", {|| Field->cNomCon } ) )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cPosCon", "cPosCon", {|| Field->cPosCon } ) )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cTelCon", "cTelCon", {|| Field->cTelCon } ) )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cMovCon", "cMovCon", {|| Field->cMovCon } ) )

   ( dbfTmpCon )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpCon )->( OrdCreate( cTmpCon, "cMaiCon", "cMaiCon", {|| Field->cMaiCon } ) )

   ( dbfTmpCon )->( ordSetFocus( "cCodCli" ) )





   if nMode <> 1

      ( dbfCliAtp )->( dbGoTop() )

      if ( dbfCliAtp )->( dbSeek( cCodCli ) )
         while ( ( dbfCliAtp )->cCodCli == cCodCli ) .AND. ( dbfCliAtp )->( !eof() )
            dbPass( dbfCliAtp, dbfTmpAtp, .T. )
            ( dbfCliAtp )->( dbSkip() )
         end
      end

      ( dbfTmpAtp )->( dbGoTop() )





      if ( dbfClientD )->( dbSeek( cCodCli ) )
         while ( ( dbfClientD )->cCodCli == cCodCli ) .AND. ( dbfClientD )->( !eof() )
            dbPass( dbfClientD, dbfTmpDoc, .T. )
            ( dbfClientD )->( dbSkip() )
         end
      end

      ( dbfTmpDoc )->( dbGoTop() )





      if ( dbfObrasT )->( dbSeek( cCodCli ) )
         while ( ( dbfObrasT )->cCodCli == cCodCli ) .AND. ( dbfObrasT )->( !eof() )
            dbPass( dbfObrasT, dbfTmpObr, .T. )
            ( dbfObrasT )->( dbSkip() )
         end
      end

      ( dbfTmpObr )->( dbGoTop() )





      if ( dbfContactos )->( dbSeek( cCodCli ) )
         while ( ( dbfContactos )->cCodCli == cCodCli ) .AND. ( dbfContactos )->( !eof() )
            dbPass( dbfContactos, dbfTmpCon, .T. )
            ( dbfContactos )->( dbSkip() )
         end
      end

      ( dbfTmpCon )->( dbGoTop() )





      if ( dbfBanco )->( dbSeek( cCodCli ) )
         while ( ( dbfBanco )->cCodCli == cCodCli ) .AND. ( dbfBanco )->( !eof() )
            dbPass( dbfBanco, dbfTmpBnc, .T. )
            ( dbfBanco )->( dbSkip() )
         end
      end

      ( dbfTmpBnc )->( dbGoTop() )





      if ( dbfCliInc )->( dbSeek( cCodCli ) )
         while ( ( dbfCliInc )->cCodCli == cCodCli ) .AND. ( dbfCliInc )->( !eof() )
            dbPass( dbfCliInc, dbfTmpInc, .T. )
            ( dbfCliInc )->( dbSkip() )
         end
      end

      ( dbfTmpInc )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors        := .T.

   end

   ErrorBlock( oBlock )

return ( lErrors )



Static Function KillTrans( oBmpDiv, oBrwBnc, oBrwObr, oBrwCta, oBrwAtp, oBrwInc, oBrwCon )

   if !Empty( oBmpDiv )
      oBmpDiv:end()
   end

   if !Empty( dbfTmpSubCta ) .AND. ( dbfTmpSubCta )->( Used() )
      ( dbfTmpSubCta )->( dbCloseArea() )
   end
   if !Empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end
   if !Empty( dbfTmpObr ) .AND. ( dbfTmpObr )->( Used() )
      ( dbfTmpObr )->( dbCloseArea() )
   end
   if !Empty( dbfTmpBnc ) .AND. ( dbfTmpBnc )->( Used() )
      ( dbfTmpBnc )->( dbCloseArea() )
   end
   if !Empty( dbfTmpCon ) .AND. ( dbfTmpCon )->( Used() )
      ( dbfTmpCon )->( dbCloseArea() )
   end
   if !Empty( dbfTmpAtp ) .AND. ( dbfTmpAtp )->( Used() )
      ( dbfTmpAtp )->( dbCloseArea() )
   end
   if !Empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   dbfTmpSubCta   := nil
   dbfTmpDoc      := nil
   dbfTmpObr      := nil
   dbfTmpBnc      := nil
   dbfTmpAtp      := nil
   dbfTmpInc      := nil
   dbfTmpCon      := nil

   dbfErase( cTmpCta )
   dbfErase( cTmpDoc )
   dbfErase( cTmpObr )
   dbfErase( cTmpBnc )
   dbfErase( cTmpAtp )
   dbfErase( cTmpInc )
   dbfErase( cTmpCon )

   if oBrwBnc <> nil
      oBrwBnc:CloseData()
   end

   if oBrwObr <> nil
      oBrwObr:CloseData()
   end

   if oBrwCta <> nil
      oBrwCta:CloseData()
   end

   if oBrwAtp <> nil
      oBrwAtp:CloseData()
   end

   if oBrwInc <> nil
      oBrwInc:CloseData()
   end

   if oBrwCon <> nil
      oBrwCon:CloseData()
   end

Return .T.



Static Function aItmSubcuenta()

   local aBase := {}

   aAdd( aBase, { "nAsiento",  "N",  6, 0, "Asiento"    } )
   aAdd( aBase, { "dFecha",    "D",  8, 0, "Fecha"      } )
   aAdd( aBase, { "cConcepto", "C", 25, 0, "Concepto"   } )
   aAdd( aBase, { "nDebe",     "N", 16, 2, "Debe"       } )
   aAdd( aBase, { "nHaber",    "N", 16, 2, "Haber"      } )
   aAdd( aBase, { "cDeparta",  "C",  6, 0, "Departa"    } )
   aAdd( aBase, { "nFactura",  "N",  8, 0, "Factura"    } )
   aAdd( aBase, { "nBase",     "N", 16, 2, "Base"       } )
   aAdd( aBase, { "nIva",      "N",  5, 2, "I.V.A"      } )

Return ( aBase )



static function SavClient( aTmp, aGet, oDlg, dbfClient, oBrw, nMode )

   local cText       := ""
   local cFacAut
   local nVisLun     := ( dbfClient )->nVisLun
   local nVisMar     := ( dbfClient )->nVisMar
   local nVisMie     := ( dbfClient )->nVisMie
   local nVisJue     := ( dbfClient )->nVisJue
   local nVisVie     := ( dbfClient )->nVisVie
   local nVisSab     := ( dbfClient )->nVisSab
   local nVisDom     := ( dbfClient )->nVisDom

   if ( nMode == 1 .OR. nMode == 4 )

      if Empty( aTmp[ 1 ] )
         MsgStop( "Código no puede estar vacio" )
         return nil
      end

      if Existe( aTmp[ 1 ], dbfClient, "Cod" )
         MsgStop( "Código ya existe " + Rtrim( aTmp[ 1 ] ) )
         return nil
      end

   end

   if aTmp[ 110 ]

      if Empty( aTmp[ 50 ] )
         MsgStop( "Email no pueden estar vacios" )
         aGet[ 50 ]:SetFocus()
         return nil
      end

      if Empty( aTmp[ 111 ] ) .OR. Len( AllTrim( aTmp[ 111 ] ) ) < 5
         MsgStop( "La contraseña debe tener al menos 5 caracteres" )
         aGet[ 111 ]:SetFocus()
         return nil
      end

   end

   if !Empty( aTmp[ 49 ] ) .AND. ( dbfTmpBnc )->( LastRec() ) == 0
      MsgStop( "Necesita una cuenta bancaria para su cuenta de remesa" )
      return nil
   end





   if aTmp[ 40 ] < 1
      aTmp[ 40 ]  := 1
   end

   if aTmp[ 40 ] < 1 .OR. aTmp[ 40 ] > 6

      MsgStop( "La tarifa a seleccionar debe de estar entre 1 y 6" )

      if !Empty( aGet[ 40 ] )
         aGet[ 40 ]:SetFocus()
      end

      return nil

   end





   if aTmp[ 116 ] < 0 .OR. aTmp[ 116 ] > 6

      MsgStop( "El descuento de artículo a seleccionar debe de estar entre 0 y 6" )

      if !Empty( aGet[ 116 ] )
         aGet[ 116 ]:SetFocus()
      end

      return nil

   end

   if Empty( aTmp[ 2 ] )
      cText := Space( 6 ) + "* Nombre" + Chr(13)+Chr(10)
   end

   if !Empty( cText )
      msginfo( "Los siguientes campo(s) son obligatorios: " + Chr(13)+Chr(10) + cText )
      return nil
   end

   if Empty( aTmp[ 4 ] )
      cText += Space( 6 ) + "* Domicilio" + Chr(13)+Chr(10)
   end

   if Empty( aTmp[ 5 ] )
      cText += Space( 6 ) + "* Población" + Chr(13)+Chr(10)
   end

   if Empty( aTmp[ 7 ] )
      cText += Space( 6 ) + "* Codigo Postal" + Chr(13)+Chr(10)
   end

   if Empty( aTmp[ 50 ] )
      cText += Space( 6 ) + "* Email" + Chr(13)+Chr(10)
   end

   if Empty( aTmp[ 3 ] )
      cText += Space( 6 ) + "* N.I.F" + Chr(13)+Chr(10)
   end

   if Empty( aTmp[ 8 ] )
      cText += Space( 6 ) + "* Teléfono" + Chr(13)+Chr(10)
   end

   if !Empty( cText )
      if !ApoloMsgNoYes( "Son recomendables introducir los siguientes campo(s): " + Chr(13)+Chr(10) + cText + Chr(13)+Chr(10) + " ¿Desea continuar sin introducirlos?", "Seleccione una opción" )
         return nil
      end
   end





   CursorWait()

   oDlg:Disable()


   oMsgText( "Archivando" )

   oMsgProgress()






   aTmp[ 118 ]     := ""

   for each cFacAut in aFacAut
      aTmp[ 118 ]  += AllTrim( cFacAut ) + ","
   next





   aTmp[ 86 ]     := .T.

   if !Empty( cUsrTik() )
      aTmp[ 99 ]  := cUsrTik()
   else
      aTmp[ 99 ]  := cCurUsr()
   end

   aTmp[ 100 ]     := GetSysDate()
   aTmp[ 101 ]     := Time()

   if !Empty( aGet[ 91 ] )
      aTmp[ 91  ]  := aRgbColor[ Min( Max( aGet[ 91 ]:nAt, 1 ), len( aRgbColor ) ) ]
   end

   if !Empty( aGet[ 89 ] )
      aTmp[ 89 ]  := aGet[ 89 ]:nAt
   end

   if !Empty( aGet[ 20 ] )
      aTmp[ 20 ]  := aGet[ 20 ]:nAt
   end

   if !Empty( aGet[ 98 ] )
      aTmp[ 98 ]  := aGet[ 98 ]:nAt
   end

   if !Empty( aGet[ 102 ] )
      aTmp[ 102 ]  := aGet[ 102 ]:nAt
   end

   if !Empty( oRTF )
      aTmp[ 109 ]  := oRTF:SaveAsRTF()
   end





   if !Empty( dbfTmpAtp )
      ( dbfTmpAtp )->( dbClearFilter() )
   end





if !Empty( dbfTmpAtp )


   oMsgText( "Eliminando tarifas anteriores cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpAtp )->( LastRec() ) )


   while ( dbfCliAtp )->( dbSeek( aTmp[ 1 ] ) ) .AND. !( dbfCliAtp )->( eof() )
      dbDel( dbfCliAtp )
   end


   oMsgText( "Archivando tarifas cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpAtp )->( LastRec() ) )


   ( dbfTmpAtp )->( dbGoTop() )
   while ( dbfTmpAtp )->( !eof() )
      dbPass( dbfTmpAtp, dbfCliAtp, .T., aTmp[ 1 ] )
      ( dbfTmpAtp )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end





if !Empty( dbfTmpDoc )


   oMsgText( "Eliminando documentos anteriores cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpDoc )->( LastRec() ) )


   while ( dbfClientD )->( dbSeek( aTmp[ 1 ] ) )
      dbDel( dbfClientD )

      oMsgProgress():DeltaPos( 1 )

   end


   oMsgText( "Archivando documentos cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpDoc )->( LastRec() ) )


   ( dbfTmpDoc )->( dbGoTop() )
   while ( dbfTmpDoc )->( !eof() )
      dbPass( dbfTmpDoc, dbfClientD, .T., aTmp[ 1 ] )
      ( dbfTmpDoc )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end





if !Empty( dbfTmpObr )


   oMsgText( "Eliminando direcciones anteriores cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpObr )->( LastRec() ) )


   while ( dbfObrasT )->( dbSeek( aTmp[ 1 ] ) )
      dbDel( dbfObrasT )

      oMsgProgress():DeltaPos( 1 )

   end


   oMsgText( "Archivando direcciones cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpObr )->( LastRec() ) )


   ( dbfTmpObr )->( dbGoTop() )
   while ( dbfTmpObr )->( !eof() )
      dbPass( dbfTmpObr, dbfObrasT, .T., aTmp[ 1 ] )
      ( dbfTmpObr )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end





if !Empty( dbfTmpCon )


   oMsgText( "Eliminando contactos anteriores cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpCon )->( LastRec() ) )


   while ( dbfContactos )->( dbSeek( aTmp[ 1 ] ) )
      dbDel( dbfContactos )

      oMsgProgress():DeltaPos( 1 )

   end


   oMsgText( "Archivando contactos cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpCon )->( LastRec() ) )


   ( dbfTmpCon )->( dbGoTop() )
   while ( dbfTmpCon )->( !eof() )
      dbPass( dbfTmpCon, dbfContactos, .T., aTmp[ 1 ] )
      ( dbfTmpCon )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end





if !Empty( dbfTmpBnc )


   oMsgText( "Eliminanado bancos anteriores cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpBnc )->( LastRec() ) )


   while ( dbfBanco )->( dbSeek( aTmp[ 1 ] ) )
      dbDel( dbfBanco )

      oMsgProgress():DeltaPos( 1 )

   end


   oMsgText( "Archivando bancos cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpBnc )->( LastRec() ) )


   ( dbfTmpBnc )->( dbGoTop() )
   while !( dbfTmpBnc )->( eof() )
      dbPass( dbfTmpBnc, dbfBanco, .T., aTmp[ 1 ] )
      ( dbfTmpBnc )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end





if !Empty( dbfTmpInc )


   oMsgText( "Eliminando incidencias cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpInc )->( LastRec() ) )


   while ( dbfCliInc )->( dbSeek( aTmp[ 1 ] ) )
      dbDel( dbfCliInc )

      oMsgProgress():DeltaPos( 1 )

   end


   oMsgText( "Archivando incidencias cliente" )
   oMsgProgress():SetRange( 0, ( dbfTmpInc )->( LastRec() ) )


   ( dbfTmpInc )->( dbGoTop() )
   while !( dbfTmpInc )->( eof() )
      dbPass( dbfTmpInc, dbfCliInc, .T., aTmp[ 1 ] )
      ( dbfTmpInc )->( dbSkip() )

      oMsgProgress():DeltaPos( 1 )

   end

end



   WinGather( aTmp, aGet, dbfClient, oBrw, nMode )

   if oWndBrw <> nil
      oWndBrw:KillProcess()
   end


   oMsgText()

   EndProgress()






   oDlg:Enable()
   oDlg:End( 1 )

   CursorWE()

Return ( .T. )



Static Function FiltroAtipica( oFiltroAtp, dbfTmpAtp, oBrwAtp )

   if Select( dbfTmpAtp ) <> 0

      if oFiltroAtp:nAt <= 1
         ( dbfTmpAtp )->( dbClearFilter() )
      else
         ( dbfTmpAtp )->( dbSetFilter( {|| ( Empty( Field->dFecIni ) .AND. Empty( Field->dFecFin ) ) .OR. ( Field->dFecIni <= GetSysDate() .AND. Field->dFecFin >= GetSysDate() ) }, "( Empty( dFecIni ) .and. Empty( dFecFin ) ) .or. ( dFecIni <= GetSysDate() .and. dFecFin >= GetSysDate() )" ) )

      end

      ( dbfTmpAtp )->( dbGoTop() )

      oBrwAtp:Refresh()

   end

Return ( .T. )



Static Function IsCliAtp( aGet, aTmp, oGet, dbfCliAtp, nMode, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oCosto )

    local lReturn    := .T.
   local cCodArt  := aGet[ 2 ]:VarGet()
   local nPreCom  := 0
   local nPreVta  := 0

   if Empty( cCodArt )
      oGet:cText( "" )
      Return ( .T. )
   end

   if nMode == 1

      if ( dbfArticulo )->( dbSeek( cCodArt ) )

         if !Empty( oGet )
            oGet:cText( ( dbfArticulo )->Nombre )
         end

         aTmp[ 5 ] := ( dbfArticulo )->cCodPrp1
         aTmp[ 7 ] := ( dbfArticulo )->cCodPrp2

         if !Empty( aTmp[ 5 ] )
            if !Empty( oSayPr1 )
               oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )
            end
            if !Empty( oSayPr1 )
               oSayPr1:Show()
            end
            if !Empty( aGet[ 6 ] )
               aGet[ 6 ]:Show()
            end
            if !Empty( oSayVp1 )
               oSayVp1:Show()
            end
         else
            if !Empty( oSayPr1 )
               oSayPr1:Hide()
            end
            if !Empty( aGet[ 6 ] )
               aGet[ 6 ]:Hide()
            end
            if !Empty( oSayVp1 )
               oSayVp1:Hide()
            end
         end

         if !Empty( aTmp[ 7 ] )
            if !Empty( oSayPr2 )
               oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )
            end
            if !Empty( oSayPr2 )
               oSayPr2:Show()
            end
            if !Empty( aGet[ 8 ] )
               aGet[ 8 ]:show()
            end
            if !Empty( oSayVp2 )
               oSayVp2:show()
            end
         else
            if !Empty( oSayPr2 )
               oSayPr2:hide()
            end
            if !Empty( aGet[ 8 ] )
               aGet[ 8 ]:hide()
            end
            if !Empty( oSayVp2 )
               oSayVp2:hide()
            end
         end





         nPreCom           := nComPro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], dbfArtDiv )

         if nPreCom == 0
            nPreCom        := nCosto( nil, dbfArticulo, dbfArtKit )
         end

         if !Empty( oCosto )
            oCosto:cText( nPreCom )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 1, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta1
         end

         if !Empty( aGet[13 ] )
            aGet[13 ]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 2, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta2
         end

         if !Empty( aGet[14] )
            aGet[14]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 3, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta3
         end

         if !Empty( aGet[15] )
            aGet[15]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 4, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta4
         end

         if !Empty( aGet[16] )
            aGet[16]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 5, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta5
         end

         if !Empty( aGet[17] )
            aGet[17]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 6, .F., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVenta6
         end

         if !Empty( aGet[18] )
            aGet[18]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 1, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva1
         end

         if !Empty( aGet[19] )
            aGet[19]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 2, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva2
         end

         if !Empty( aGet[20] )
            aGet[20]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 3, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva3
         end

         if !Empty( aGet[21] )
            aGet[21]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 4, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva4
         end

         if !Empty( aGet[22] )
            aGet[22]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 5, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva5
         end

         if !Empty( aGet[23] )
            aGet[23]:cText( nPreVta )
         end





         nPreVta           := nPrePro( cCodArt, aTmp[ 5 ], aTmp[ 6 ], aTmp[ 7 ], aTmp[ 8 ], 6, .T., dbfArtDiv )

         if nPreVta == 0
            nPreVta        := ( dbfArticulo )->pVtaIva6
         end

         if !Empty( aGet[24] )
            aGet[24]:cText( nPreVta )
         end

      else
         MsgStop( "Código de artículo no encontrado" )
         return .F.
      end

   else

      if ( dbfArticulo )->( dbSeek( cCodArt ) )

         if !Empty( aTmp[ 5 ] )
            aTmp[ 5 ] := ( dbfArticulo )->cCodPrp1
         end
         if !Empty( aTmp[ 7 ] )
            aTmp[ 7 ] := ( dbfArticulo )->cCodPrp2
         end

         if !empty( aTmp[ 5 ] )
            if !Empty( oSayPr1 )
               oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )
            end
            if !Empty( oSayPr1 )
               oSayPr1:show()
            end
            if !Empty( aGet[ 6 ] )
               aGet[ 6 ]:show()
            end
            if !Empty( oSayVp1 )
               oSayVp1:show()
            end
         else
            if !Empty( oSayPr1 )
               oSayPr1:hide()
            end
            if !Empty( aGet[ 6 ] )
               aGet[ 6 ]:hide()
            end
            if !Empty( oSayVp1 )
               oSayVp1:hide()
            end
         end

         if !empty( aTmp[ 7 ] )
            if !Empty( oSayPr2 )
               oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )
            end
            if !Empty( oSayPr2 )
               oSayPr2:show()
            end
            if !Empty( aGet[ 8 ] )
               aGet[ 8 ]:show()
            end
            if !Empty( oSayVp2 )
               oSayVp2:show()
            end
         else
            if !Empty( oSayPr2 )
               oSayPr2:hide()
            end
            if !Empty( aGet[ 8 ] )
               aGet[ 8 ]:hide()
            end
            if !Empty( oSayVp2 )
               oSayVp2:hide()
            end
         end

      end

   end

RETURN lReturn



Static Function lArrayRen( nTipPre, oBrwRen, aTmp, aTmpCli, aGetCli, cCosto )

   local nNetoBase
   local nResultado
   local nCosto
   local nDtoAtpico
   local nSbrAtipico := aGetCli[ 98 ]:nAt

   aRentabilidad     := {}





   do case
      case nTipPre == 1
         nNetoBase   := aTmp[ 13 ]
      case nTipPre == 2
         nNetoBase   := aTmp[ 14 ]
      case nTipPre == 3
         nNetoBase   := aTmp[ 15 ]
      case nTipPre == 4
         nNetoBase   := aTmp[ 16 ]
      case nTipPre == 5
         nNetoBase   := aTmp[ 17 ]
      case nTipPre == 6
         nNetoBase   := aTmp[ 18 ]
   end





   if aTmp[ 11 ]
      nCosto         := aTmp[ 12 ]
   else
      nCosto         := cCosto
   end



   aAdd( aRentabilidad, { "Costo", "", nCosto, .F., .F. } )



   aAdd( aRentabilidad, { "Neto base", "", nNetoBase, .F., .F. } )



   if aTmp[ 35 ] <> 0 .AND. aTmp[ 34 ] <> 0

      if ( aTmp[ 35 ] <> 1 .OR. aTmp[ 34 ] <> 1 )

         nResultado := nNetoBase - ( Div( ( nNetoBase * aTmp[ 35 ] ), aTmp[ 34 ] ) )

         aAdd( aRentabilidad, { Space(3) + "Dto. X*Y", AllTrim( Str( aTmp[ 34 ] ) ) + " * " + AllTrim( Str( aTmp[ 35 ] ) ), - ( nResultado ), .F., .F. } )

         nNetoBase -= nResultado

      end

   end



   if aTmp[ 25 ] <> 0

      nResultado := ( ( nNetoBase * aTmp[ 25 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + "Dto. art.", AllTrim( Str( aTmp[ 25 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if aTmp[ 29 ] <> 0

      aAdd( aRentabilidad, { Space(3) + "Dto. lineal", Trans( aTmp[ 29 ], cPouDiv( cDivEmp(), dbfDiv ) ), - ( aTmp[ 29 ] ), .F., .F. } )

      nNetoBase -= aTmp[ 29 ]

   end



   if aTmp[ 26 ] <> 0

      nResultado := ( ( nNetoBase * aTmp[ 26 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + "Dto. promo.", AllTrim( Str( aTmp[ 26 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if aTmp[ 28 ] <> 0

      nResultado := ( ( nNetoBase * aTmp[ 28 ] ) / 100 )

      if aTmp[ 27 ]
         aAdd( aRentabilidad, { Space(3) + "Com. agente", AllTrim( Str( aTmp[ 28 ] ) ) + " %", - ( nResultado ), .F., .F. } )
         nNetoBase -= nResultado
      else
         aAdd( aRentabilidad, { Space(3) + "Com. agente", AllTrim( Str( aTmp[ 28 ] ) ) + " %", nResultado, .F., .F. } )
      end

   end



   if nSbrAtipico == 1 .AND. aTmpCli[ 97 ] <> 0

      nDtoAtpico := ( ( nNetoBase * aTmpCli[ 97 ] ) / 100 )

   end



   if aTmpCli[ 23 ] <> 0

      nResultado := ( ( nNetoBase * aTmpCli[ 23 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + AllTrim( aTmpCli[ 22 ] ), AllTrim( Str( aTmpCli[ 23 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if nSbrAtipico == 2 .AND. aTmpCli[ 97 ] <> 0

      nDtoAtpico := ( ( nNetoBase * aTmpCli[ 97 ] ) / 100 )

   end



   if aTmpCli[ 25 ] <> 0

      nResultado := ( ( nNetoBase * aTmpCli[ 25 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + AllTRim( aTmpCli[ 24 ] ), AllTrim( Str( aTmpCli[ 25 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if nSbrAtipico == 3 .AND. aTmpCli[ 97 ] <> 0

      nDtoAtpico := ( ( nNetoBase * aTmpCli[ 97 ] ) / 100 )

   end



   if !Empty( aTmpCli[ 28 ] ) .OR. aTmpCli[ 26 ] <> 0

      nResultado := ( ( nNetoBase * aTmpCli[ 26 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + aTmpCli[ 28 ], AllTrim( Str( aTmpCli[ 26 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if nSbrAtipico == 4 .AND. aTmpCli[ 97 ] <> 0

      nDtoAtpico := ( ( nNetoBase * aTmpCli[ 97 ] ) / 100 )

   end



   if !Empty( aTmpCli[ 29 ] ) .OR. aTmpCli[ 27 ] <> 0

      nResultado := ( ( nNetoBase * aTmpCli[ 27 ] ) / 100 )

      aAdd( aRentabilidad, { Space(3) + aTmpCli[ 29 ], AllTrim( Str( aTmpCli[ 27 ] ) ) + " %", - ( nResultado ), .F., .F. } )

      nNetoBase -= nResultado

   end



   if nSbrAtipico == 5 .AND. aTmpCli[ 97 ] <> 0

      nDtoAtpico := ( ( nNetoBase * aTmpCli[ 97 ] ) / 100 )

   end

   if aTmpCli[ 97 ] <> 0



      aAdd( aRentabilidad, { "Neto sin " + aTmpCli[ 96 ] , "", nNetoBase, .F., .F. } )



      aAdd( aRentabilidad, { Space(3) + aTmpCli[ 96 ], AllTrim( Str( aTmpCli[ 97 ] ) ) + " %", - ( nDtoAtpico ), .F., .F. } )

      nNetoBase   -= nDtoAtpico

   end



   aAdd( aRentabilidad, { "Tarifa neta", "", nNetoBase, .F., .F. } )



   nResultado := nNetoBase - nCosto

   aAdd( aRentabilidad, { "Margen unidades", "", nResultado, .F., .F. } )



   nResultado := ( nNetoBase - nCosto ) * ( dbfArticulo )->nUniCaja

   aAdd( aRentabilidad, { "Margen cajas", Trans( ( dbfArticulo )->nUniCaja, MasUnd() ), nResultado, .F., .F. } )



   nResultado :=  ( Div( nNetoBase, nCosto ) - 1 ) * 100

   aAdd( aRentabilidad, { "Rent. costo", "", nResultado, .T., .F. } )



   aAdd( aRentabilidad, { "Rent. mínima", "", ( dbfArticulo )->nRenMin, .T., if( ( dbfArticulo )->nRenMin > nResultado, .T., .F. ) } )



   aAdd( aRentabilidad, { "Ratio maniobra", "", nResultado - ( dbfArticulo )->nRenMin, .T., .F. } )



   nResultado :=  Div( ( nNetoBase - nCosto ), nNetoBase ) * 100

   aAdd( aRentabilidad, { "% Margen venta", "", nResultado, .T., .F. } )





   oBrwRen:nAt       := 1
   oBrwRen:SetArray( aRentabilidad )
   oBrwRen:Refresh()

Return .T.



Static Function ChangeNaturaleza( aGet, aTmp, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGetArticulo, oGetFamilia, oCosto, nMode, oSayLabels, lInit )

   IIF( lInit == nil, lInit := .F., ) ;

   if nMode == 1

      if !Empty( oGetArticulo )
         oGetArticulo:cText( "" )
      end
      if !Empty( oGetFamilia )
         oGetFamilia:cText( "" )
      end

      if !Empty( oCosto )
         oCosto:cText( 0 )
      end

      if !Empty( aGet[ 2  ] )
         aGet[ 2  ]:cText( Space( 18 ) )
      end
      if !Empty( aGet[ 3  ] )
         aGet[ 3  ]:cText( Space( 5 ) )
      end
      if !Empty( aGet[ 12  ] )
         aGet[ 12  ]:cText( 0 )
      end
      if !Empty( aGet[ 13  ] )
            aGet[ 13  ]:cText( 0 )
      end
      if !Empty( aGet[ 14 ] )
            aGet[ 14 ]:cText( 0 )
      end
      if !Empty( aGet[ 15 ] )
            aGet[ 15 ]:cText( 0 )
      end
      if !Empty( aGet[ 16 ] )
            aGet[ 16 ]:cText( 0 )
      end
      if !Empty( aGet[ 17 ] )
            aGet[ 17 ]:cText( 0 )
      end
      if !Empty( aGet[ 18 ] )
            aGet[ 18 ]:cText( 0 )
      end
      if !Empty( aGet[ 19 ] )
            aGet[ 19 ]:cText( 0 )
      end
      if !Empty( aGet[ 20 ] )
            aGet[ 20 ]:cText( 0 )
      end
      if !Empty( aGet[ 21 ] )
            aGet[ 21 ]:cText( 0 )
      end
      if !Empty( aGet[ 22 ] )
            aGet[ 22 ]:cText( 0 )
      end
      if !Empty( aGet[ 23 ] )
            aGet[ 23 ]:cText( 0 )
      end
      if !Empty( aGet[ 24 ] )
            aGet[ 24 ]:cText( 0 )
      end

   end

   if aGet[ 4 ]:nAt == 1

      if !Empty( aGet[ 2 ] )
         aGet[ 2 ]:Show()
      end
      if !Empty( oGetArticulo )
         oGetArticulo:Show()
      end

      if !Empty( aGet[ 3 ] )
         aGet[ 3 ]:Hide()
      end
      if !Empty( oGetFamilia )
         oGetFamilia:Hide()
      end

      if !lInit

         if !Empty( oSayPr1 )
            oSayPr1:Hide()
         end

         if !Empty( oSayPr2 )
            oSayPr2:Hide()
         end

         if !Empty( oSayVp1 )
            oSayVp1:SetText( Space(10) )
         end

         if !Empty( oSayVp2 )
            oSayVp2:SetText( Space(10) )
         end

         if !Empty( oSayVp1 )
            oSayVp1:Hide()
         end

         if !Empty( oSayVp2 )
            oSayVp2:Hide()
         end

         if !Empty( aGet[ 6 ] )
            aGet[ 6 ]:cText( Space(10) )
         end

         if !Empty( aGet[ 8 ] )
            aGet[ 8 ]:cText( Space(10) )
         end

         if !Empty( aGet[ 6 ] )
            aGet[ 6 ]:Hide()
         end

         if !Empty( aGet[ 8 ] )
            aGet[ 8 ]:Hide()
         end

      end

      if !Empty( oCosto )
         oCosto:Show()
      end

      if !Empty( aGet[ 11  ] )
         aGet[ 11  ]:Show()
      end

      if !Empty( aGet[ 12  ] )
         aGet[ 12  ]:Show()
      end

      if !Empty( aGet[ 13  ] )
          aGet[ 13  ]:Show()
      end

      if !Empty( aGet[ 14 ] )
         aGet[ 14 ]:Show()
      end

      if !Empty( aGet[ 15 ] )
         aGet[ 15 ]:Show()
      end

      if !Empty( aGet[ 16 ] )
         aGet[ 16 ]:Show()
      end

      if !Empty( aGet[ 17 ] )
         aGet[ 17 ]:Show()
      end

      if !Empty( aGet[ 18 ] )
         aGet[ 18 ]:Show()
      end

      if !Empty( aGet[ 19 ] )
         aGet[ 19 ]:Show()
      end

      if !Empty( aGet[ 20 ] )
         aGet[ 20 ]:Show()
      end

      if !Empty( aGet[ 21 ] )
         aGet[ 21 ]:Show()
      end

      if !Empty( aGet[ 22 ] )
         aGet[ 22 ]:Show()
      end

      if !Empty( aGet[ 23 ] )
         aGet[ 23 ]:Show()
      end

      if !Empty( aGet[ 24 ] )
         aGet[ 24 ]:Show()
      end

      if !Empty( aGet[ 37    ] )
         aGet[ 37    ]:Show()
      end

      if !Empty( aGet[ 38    ] )
         aGet[ 38    ]:Show()
      end

      if !Empty( aGet[ 39    ] )
         aGet[ 39    ]:Show()
      end

      if !Empty( aGet[ 40    ] )
         aGet[ 40    ]:Show()
      end

      if !Empty( aGet[ 41    ] )
         aGet[ 41    ]:Show()
      end

      if !Empty( aGet[ 42    ] )
         aGet[ 42    ]:Show()
      end


      if !Empty( oSayLabels )
         aEval( oSayLabels, {|o| o:Show() } )
      end


   else

      if !Empty( aGet[ 2 ] )
         aGet[ 2 ]:Hide()
      end
      if !Empty( oGetArticulo )
         oGetArticulo:Hide()
      end

      if !Empty( aGet[ 3 ] )
         aGet[ 3 ]:Show()
      end
      if !Empty( oGetFamilia )
         oGetFamilia:Show()
      end

      if !Empty( oSayPr1 )
         oSayPr1:Hide()
      end
      if !Empty( oSayPr2 )
         oSayPr2:Hide()
      end

      if !Empty( oSayVp1 )
         oSayVp1:SetText( Space(10) )
      end
      if !Empty( oSayVp2 )
         oSayVp2:SetText( Space(10) )
      end

      if !Empty( oSayVp1 )
         oSayVp1:Hide()
      end
      if !Empty( oSayVp2 )
         oSayVp2:Hide()
      end

      if !Empty( aGet[ 6 ] )
         aGet[ 6 ]:cText( Space(10) )
      end
      if !Empty( aGet[ 8 ] )
         aGet[ 8 ]:cText( Space(10) )
      end

      if !Empty( aGet[ 6 ] )
         aGet[ 6 ]:Hide()
      end
      if !Empty( aGet[ 8 ] )
         aGet[ 8 ]:Hide()
      end

      if !Empty( oCosto )
         oCosto:Hide()
      end

      if !Empty( aGet[ 11  ] )
         aGet[ 11  ]:Hide()
      end

      if !Empty( aGet[ 12  ] )
         aGet[ 12  ]:Hide()
      end
      if !Empty( aGet[ 13  ] )
         aGet[ 13  ]:Hide()
      end
      if !Empty( aGet[ 14 ] )
         aGet[ 14 ]:Hide()
      end
      if !Empty( aGet[ 15 ] )
         aGet[ 15 ]:Hide()
      end
      if !Empty( aGet[ 16 ] )
         aGet[ 16 ]:Hide()
      end
      if !Empty( aGet[ 17 ] )
         aGet[ 17 ]:Hide()
      end
      if !Empty( aGet[ 18 ] )
         aGet[ 18 ]:Hide()
      end

      if !Empty( aGet[ 19 ] )
         aGet[ 19 ]:Hide()
      end
      if !Empty( aGet[ 20 ] )
         aGet[ 20 ]:Hide()
      end
      if !Empty( aGet[ 21 ] )
         aGet[ 21 ]:Hide()
      end
      if !Empty( aGet[ 22 ] )
         aGet[ 22 ]:Hide()
      end
      if !Empty( aGet[ 23 ] )
         aGet[ 23 ]:Hide()
      end
      if !Empty( aGet[ 24 ] )
         aGet[ 24 ]:Hide()
      end

      if !Empty( aGet[ 37    ] )
         aGet[ 37    ]:Hide()
      end
      if !Empty( aGet[ 38    ] )
         aGet[ 38    ]:Hide()
      end
      if !Empty( aGet[ 39    ] )
         aGet[ 39    ]:Hide()
      end
      if !Empty( aGet[ 40    ] )
         aGet[ 40    ]:Hide()
      end
      if !Empty( aGet[ 41    ] )
         aGet[ 41    ]:Hide()
      end
      if !Empty( aGet[ 42    ] )
         aGet[ 42    ]:Hide()
      end


      if !Empty( oSayLabels )
         aEval( oSayLabels, {|o| o:Hide() } )
      end


   end

Return nil



static function SaveEdtAtp( aGet, aTmp, dbfTmpAtp, oBrw, oDlg, nMode )

   if aTmp[ 9 ] > aTmp[ 10 ]
      MsgStop( "Fechas no validas" )
      return .F.
   end

   if nMode == 1

      if Empty( aTmp[ 2 ] ) .AND. aGet[ 4 ]:nAt <= 1
         MsgStop( "Código de artículo no puede estar vacío" )
         aGet[ 2 ]:SetFocus()
         return .F.
      end

      if dbSeekAtp( aTmp, dbfTmpAtp, .F. ) .AND. aGet[ 4 ]:nAt <= 1
         msgStop( "Código de artículo ya en tarifa para el rango de fechas" )
         return nil
      end

      if Empty( aTmp[ 3 ] ) .AND. aGet[ 4 ]:nAt == 2
         MsgStop( "Código de família no puede estar vacío" )
         aGet[ 3 ]:SetFocus()
         return .F.
      end

      if dbSeekAtp( aTmp, dbfTmpAtp, .T. ) .AND. aGet[ 4 ]:nAt == 2
         msgStop( "Código de familia ya en tarifa para el rango de fechas" )
         return .F.
      end

   end





   CursorWait()

   oDlg:Disable()

   aTmp[ 4 ]    := aGet[ 4 ]:nAt

   WinGather( aTmp, aGet, dbfTmpAtp, oBrw, nMode )

   oDlg:Enable()

   CursorWE()

RETURN ( oDlg:end( 1 ) )



Static Function dbSeekAtp( aTmp, dbfTmpAtp, lFam )

   local lSeek := .F.
   local nOrdAnt

   if lFam
      nOrdAnt  := ( dbfTmpAtp )->( OrdSetFocus( "cCodFam" ) )
      if ( dbfTmpAtp )->( dbSeek( aTmp[ 3 ] ) )
         if ( dbfTmpAtp )->dFecFin >= aTmp[ 9 ] .AND. !Empty( aTmp[ 9 ] )
            lSeek := .T.
         end
      end
      ( dbfTmpAtp )->( OrdSetFocus( nOrdAnt ) )
   else
      nOrdAnt  := ( dbfTmpAtp )->( OrdSetFocus( "cCodArt" ) )
      if ( dbfTmpAtp )->( dbSeek( aTmp[ 2 ] + aTmp[ 5 ] + aTmp[ 7 ] + aTmp[ 6 ] + aTmp[ 8 ] ) )
         if ( dbfTmpAtp )->dFecFin >= aTmp[ 9 ] .AND. !Empty( aTmp[ 9 ] )
            lSeek := .T.
         end
      end
      ( dbfTmpAtp )->( OrdSetFocus( nOrdAnt ) )
   end

Return ( lSeek )



Static Function CalIva( nPrecio, lIvaInc, cTipIva, cCodImp, oGetIva )

   local nIvaPct  := nIva( dbfIva, cTipIva )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nPrecio     += oNewImp:nValImp( cCodImp, .T., nIvaPct )
   end





   nPrecio        += ( nPrecio * nIvaPct / 100 )

   if oGetIva <> NIL
      oGetIva:cText( nPrecio )
   end

Return .T.



Static Function CalBas( nPrecio, lIvaInc, cTipIva, cCodImp, oGetBas )

    local nNewPre
   local nIvaPct  := nIva( dbfIva, cTipIva )





   nNewPre        := Div( nPrecio, ( 1 + nIvaPct / 100 ) )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nNewPre     -= oNewImp:nValImp( cCodImp, lIvaInc , nIvaPct )
   end





   oGetBas:cText( nNewPre )

Return .T.



Function nCalIva( nPrecio, lIvaInc, cTipIva, cCodImp )

   local nIvaPct  := nIva( dbfIva, cTipIva )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nPrecio     += oNewImp:nValImp( cCodImp, .T., nIvaPct )
   end





   nPrecio        += ( nPrecio * nIvaPct / 100 )

Return nPrecio



Function nCalBas( nPrecio, lIvaInc, cTipIva, cCodImp )

    local nNewPre
   local nIvaPct  := nIva( dbfIva, cTipIva )





   nNewPre        := Div( nPrecio, ( 1 + nIvaPct / 100 ) )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nNewPre     -= oNewImp:nValImp( cCodImp, lIvaInc , nIvaPct )
   end

Return nNewPre
#line 14211 ".\Prg\Client.prg"
Static Function DataReport( oFr, lTemporal )





   oFr:ClearDataSets()

   if lTemporal
      oFr:SetWorkArea(  "Clientes",          ( tmpClient )->( Select() ), .F., { 0, 0, 0 } )
   else
      oFr:SetWorkArea(  "Clientes",          ( dbfClient )->( Select() ), .F., { 0, 0, 0 } )
   end
   oFr:SetFieldAliases( "Clientes",          cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Documetos",         ( dbfClientD )->( Select() ) )
   oFr:SetFieldAliases( "Documetos",         cItemsToReport( aCliDoc() ) )

   oFr:SetWorkArea(     "Tarifas clientes",  ( dbfCliAtp )->( Select() ) )
   oFr:SetFieldAliases( "Tarifas clientes",  cItemsToReport( aItmAtp() ) )

   oFr:SetWorkArea(     "Direcciones",       ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Direcciones",       cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Contactos",         ( dbfContactos )->( Select() ) )
   oFr:SetFieldAliases( "Contactos",         cItemsToReport( aItmContacto() ) )

   oFr:SetWorkArea(     "Bancos",            ( dbfBanco )->( Select() ) )
   oFr:SetFieldAliases( "Bancos",            cItemsToReport( aCliBnc() ) )

   oFr:SetWorkArea(     "Incidencias",       ( dbfCliInc )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias",       cItemsToReport( aCliInc() ) )

   if lTemporal
      oFr:SetMasterDetail( "Clientes",       "Documentos",        {|| ( tmpClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Tarifas clientes",  {|| ( tmpClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Direcciones",       {|| ( tmpClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Contactos",         {|| ( tmpClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Bancos",            {|| ( tmpClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Incidencias",       {|| ( tmpClient )->Cod } )
   else
      oFr:SetMasterDetail( "Clientes",       "Documentos",        {|| ( dbfClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Tarifas clientes",  {|| ( dbfClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Direcciones",       {|| ( dbfClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Contactos",         {|| ( dbfClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Bancos",            {|| ( dbfClient )->Cod } )
      oFr:SetMasterDetail( "Clientes",       "Incidencias",       {|| ( dbfClient )->Cod } )
   end

   oFr:SetResyncPair(      "Clientes",       "Documentos" )
   oFr:SetResyncPair(      "Clientes",       "Tarifas clientes" )
   oFr:SetResyncPair(      "Clientes",       "Direcciones" )
   oFr:SetResyncPair(      "Clientes",       "Contactos" )
   oFr:SetResyncPair(      "Clientes",       "Bancos" )
   oFr:SetResyncPair(      "Clientes",       "Incidencias" )

Return nil



Function DesignReportClient( oFr, dbfDoc )

   local oLabel
   local nRec
   local nOrd
   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
      nRec        := ( dbfClient )->( Recno() )
      nOrd        := ( dbfClient )->( OrdSetFocus( "Cod" ) )
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag

      oLabel      := TClienteLabelGenerator()

      if oLabel:lCreateTemporal()





         DataReport( oFr, .T. )





         if !Empty( ( dbfDoc )->mReport )

            oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

         else

            oFr:AddPage(         "MainPage" )

            oFr:AddBand(         "CabeceraColumnas",  "MainPage",       6 )
            oFr:SetProperty(     "CabeceraColumnas",  "Top",            200 )
            oFr:SetProperty(     "CabeceraColumnas",  "Height",         100 )
            oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet",        "Clientes" )

         end





         oFr:DesignReport()





         oFr:DestroyFr()





         oLabel:DestroyTemporal()

      else

         Return .F.

      end

   end

   if !Empty( nRec )
      ( dbfClient )->( dbGoTo( nRec ) )
   end

   if !Empty( nOrd )
      ( dbfClient )->( OrdSetFocus( nOrd ) )
   end

   if lOpen
      CloseFiles()
   end

Return .T.



Function PrintReportCliente( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;

   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.



Static Function lPubInt( nMode, aTmp )

   if nMode <> 1
      aTmp[ 112 ]  := 0
   end

Return ( nil )




Static Function lArticuloEnOferta( cCodigoArticulo, cCodigoCliente, cCodigoGrupo )

   local lOferta     := .F.

   if ( dbfOfe )->( dbSeek( cCodigoArticulo ) )

      while ( dbfOfe )->cArtOfe == cCodigoArticulo .AND. !( dbfOfe )->( eof() )







         if ( GetSysDate() >= ( dbfOfe )->dIniOfe .OR. Empty( ( dbfOfe )->dIniOfe ) ) .AND.  ( GetSysDate() <= ( dbfOfe )->dFinOfe .OR. Empty( ( dbfOfe )->dFinOfe ) ) .AND.  ( ( dbfOfe )->nCliOfe == 1 .OR. ( ( dbfOfe )->nCliOfe == 2 .AND. cCodigoCliente == ( dbfOfe )->cCliOfe ) .OR. ( ( dbfOfe )->nCliOfe == 3 .AND. cCodigoGrupo == ( dbfOfe )->cGrpOfe ) )

            lOferta  := .T.

            exit

         end

         ( dbfOfe )->( dbSkip() )

      end

   end

Return ( lOferta )



Function nTotalValesCliente( cCodCli, dDesde, dHasta, cTikT, cTikL, cDiv, nYear )

   local nTotal

   IIF( cCodCli == nil, cCodCli := ( dbfClient )->Cod, ) ;
   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;

   nTotal            := nValTik( cCodCli, dDesde, dHasta, cTikT, cTikL, dbfDiv, nYear )

Return ( nTotal )



static Function ReportingClient()

   oReporting  := TFastVentasClientes():New()
   oReporting:Play()

Return( oReporting )



FUNCTION BrwBncCli( oGet, oEntBnc, oSucBnc, oDigBnc, oCtaBnc, cCodCli, dbfBancos )

    local oDlg
    local oBrw
   local oFont
   local oBtn
    local oGet1
    local cGet1
   local nOrd        := GetBrwOpt( "BrwBancos" )
    local oCbxOrd
   local aCbxOrd     := { "Nombre", "Cuenta" }
   local cCbxOrd     := "Nombre"
   local nLevel      := nLevelUsr( "01032" )
   local lClose      := .F.

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   if Empty( cCodCli )
        MsgStop( "Es necesario codificar un cliente" )
      return .T.
   end

   if !lExistTable( cPatCli() + "CliBnc.Dbf" )
      MsgStop( "No existe el fichero de bancos" )
      Return .F.
   end

   if Empty( dbfBancos )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfBancos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   ( dbfBancos )->( ordSetFocus( nOrd ) )

   ( dbfBancos )->( OrdScope( 0, cCodCli ) )
   ( dbfBancos )->( OrdScope( 1, cCodCli ) )
   ( dbfBancos )->( dbGoTop() )



   oDlg = TDialog():New(,,,, "Seleccionar banco", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )





      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfBancos, nil, cCodCli ) ) }, .F., .F.,,,,,, nil, "Find",, )










        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|(  ( dbfBancos )->( OrdSetFocus( oCbxOrd:nAt ) ), ( dbfBancos )->( OrdScope( 0, cCodCli ) ), ( dbfBancos )->( OrdScope( 1, cCodCli ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := TXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfBancos
      oBrw:nMarqueeStyle   := 5

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| ( dbfBancos )->cCodBnc }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cuenta"
         :cSortOrder       := "cCtaBnc"
         :bEditValue       := {|| ( dbfBancos )->cEntBnc + "-" + ( dbfBancos )->cSucBnc + "-" + ( dbfBancos )->cDigBnc + "-" + ( dbfBancos )->cCtaBnc }
         :nWidth           := 150
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfBancos )->cDirBnc }
         :nWidth           := 120
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| ( dbfBancos )->cPobBnc }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| ( dbfBancos )->cCPBnc }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| ( dbfBancos )->cProBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :bEditValue       := {|| ( dbfBancos )->cTlfBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfBancos )->cFaxBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfBancos )->cPContBnc }
         :nWidth           := 140
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfBancos )->CCODBNC )

      if oEntBnc <> NIL
         oEntBnc:cText( ( dbfBancos )->CENTBNC )
      end

      if oSucBnc <> NIL
         oSucBnc:cText( ( dbfBancos )->CSUCBNC )
      end

      if oDigBnc <> NIL
         oDigBnc:cText( ( dbfBancos )->CDIGBNC )
      end

      if oCtaBnc <> NIL
         oCtaBnc:cText( ( dbfBancos )->CCTABNC )
      end

   end

   DestroyFastFilter( dbfBancos )

   SetBrwOpt( "BrwBancos", ( dbfBancos )->( OrdNumber() ) )

   if lClose
      ( dbfBancos )->( dbCloseArea() )
   else
      ( dbfBancos )->( OrdSetFocus( nOrd ) )
      ( dbfBancos )->( OrdScope( 0, nil ) )
      ( dbfBancos )->( OrdScope( 1, nil ) )
   end

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



Function cClientCuenta( cCliente, dbfBncCli )

   local lCloseBnc   := .F.
   local cCuenta     := ""

   if Empty( dbfBncCli )
      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfBncCli ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      lCloseBnc      := .T.
   end

   if dbSeekInOrd( cCliente, "cBncDef", dbfBncCli )
      cCuenta        := ( dbfBncCli )->cEntBnc + ( dbfBncCli )->cSucBnc + ( dbfBncCli )->cDigBnc + ( dbfBncCli )->cCtaBnc
   end

   if Empty( cCuenta )
      if dbSeekInOrd( cCliente, "cCodCli", dbfBncCli )
         cCuenta     := ( dbfBncCli )->cEntBnc + ( dbfBncCli )->cSucBnc + ( dbfBncCli )->cDigBnc + ( dbfBncCli )->cCtaBnc
      end
   end

   cCuenta           := Alltrim( cCuenta )

   if lCloseBnc
      ( dbfBncCli )->( dbCloseArea() )
   end

Return cCuenta

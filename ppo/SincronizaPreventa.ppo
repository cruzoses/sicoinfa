#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\SincronizaPreventa.prg"
_HB_CLASS SincronizaPreventa ; UTILITY FUNCTION SincronizaPreventa(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "SincronizaPreventa" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oMetMsg} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oMetMsg" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oRuta} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oRuta" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cRuta} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", Space( 250 ), nScope + IIF( .F., 32, 0 ), { "cRuta" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oCodEmpresa} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oCodEmpresa" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cCodEmpresa} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", Space( 250 ), nScope + IIF( .F., 32, 0 ), { "cCodEmpresa" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oMessage} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oMessage" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cMessage} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER", "", nScope + IIF( .F., 32, 0 ), { "cMessage" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @SincronizaPreventa_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @SincronizaPreventa_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @SincronizaPreventa_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @SincronizaPreventa_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate( oMenuItem, oWnd); IIF( .F., s_oClass:ModMethod( "Activate", @SincronizaPreventa_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @SincronizaPreventa_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Search(); IIF( .F., s_oClass:ModMethod( "Search", @SincronizaPreventa_Search(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Search", @SincronizaPreventa_Search(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS SincronizaPreventa ;



UTILITY STATIC function SincronizaPreventa_OpenFiles() ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos.", "Atención" )

      ::CloseFiles()

      lOpen := .F.

   end

   ErrorBlock( oBlock )

RETURN( lOpen )



UTILITY STATIC function SincronizaPreventa_CloseFiles() ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   if !Empty( ::oDbfArt )
      ::oDbfArt:End()
   end

   ::oDbfArt   := nil

RETURN ( Self )



UTILITY STATIC function SincronizaPreventa_Activate( oMenuItem, oWnd) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local oDlg
   local nLevel
   local nMetMsg        := 0
   local oCodArt
   local cCodArt        := ""
   local oSayArt
   local cSayArt        := ""
   local oBmp

   IIF( oMenuItem == nil, oMenuItem := "04016", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;



   nLevel               := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return nil
   end



   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !::OpenFiles()
      Return ( Self )
   end





   ::cRuta              :=  Padr( GetPvProfString( "Preventa", "Ruta",     Space( 250 ), cPatEmp() + "Empresa.Ini" ), 250 )
   ::cCodEmpresa        :=  Padr( GetPvProfString( "Preventa", "Empresa",  Space( 250 ), cPatEmp() + "Empresa.Ini" ), 250 )

   oDlg = TDialog():New(,,,,, "SINCRONIZAPC",, .F.,,,,, oWnd(), .F.,,,,,, .F., )





   oBmp := TBitmap():ReDefine( 600, "Pda2_write_alpha_48",, oDlg,,, .F., .F.,,, .F.,,, .T. )




   ::oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cRuta, ::cRuta:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




   ::oCodEmpresa := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::cCodEmpresa, ::cCodEmpresa:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




   ::oMessage := TSay():ReDefine( 110, {||   ::cMessage}, oDlg,,,, .F.,, .F., .F. )




   TButton():ReDefine( 500, {||( ::Search( oDlg ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ::CloseFiles()

   oBmp:End()





   WritePProString( "Preventa", "Ruta",      ::cRuta,       cPatEmp() + "Empresa.Ini" )
   WritePProString( "Preventa", "Empresa",   ::cCodEmpresa, cPatEmp() + "Empresa.Ini" )

RETURN ( Self )



UTILITY STATIC function SincronizaPreventa_Search( oDlg) ; local Self AS CLASS SincronizaPreventa := QSelf() AS CLASS SincronizaPreventa

   local oBlock
   local oError
   local cPatServidor   := AllTrim( ::cRuta ) + "EMP" + AllTrim( ::cCodEmpresa ) + "\"

   if Empty( ::cRuta ) .AND. Empty( ::cCodEmpresa )
      msgStop( "La ruta del servidor no puede estar vacia." )
      return .F.
   end

   oDlg:Disable()

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   pdaClienteSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaFamiliaSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaAgentesSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaArticuloSenderReciver():CreateData( , ::oMessage, cPatServidor )






   pdaRutaSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaFPagoSenderReciver():CreateData( ,::oMessage, cPatServidor )





   pdaAlmacenSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaTIvaSenderReciver():CreateData( , ::oMessage, AllTrim( ::cRuta ) )





   pdaPedCliSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaAlbCliSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaFacCliSenderReciver():CreateData( , ::oMessage, cPatServidor )





   pdaRecCliSenderReciver():CreateDataPdaToPc( , ::oMessage, cPatServidor )

   pdaRecCliSenderReciver():CreateDataPcToPda( , ::oMessage, cPatServidor )





   pdaTransSenderReciver():CreateData( , ::oMessage, cPatServidor )







   RECOVER USING oError

      msgStop( "Ocurrió un error al sincronizar los ficheros" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   oDlg:Enable()

   msginfo( "Proceso finalizado correctamente" )

RETURN ( oDlg:End() )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 9 ".\Prg\TDetTipoExpediente.prg"
_HB_CLASS TDetTipoExpediente ; UTILITY FUNCTION TDetTipoExpediente(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TDetTipoExpediente" , {TDet():classh} ) ) ; ;

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TDetTipoExpediente_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TDetTipoExpediente_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TDetTipoExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TDetTipoExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TDetTipoExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TDetTipoExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER Resource( nMode, lLiteral); IIF( .F., s_oClass:ModMethod( "Resource", @TDetTipoExpediente_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TDetTipoExpediente_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SaveLines(); IIF( .F., s_oClass:ModMethod( "SaveLines", @TDetTipoExpediente_SaveLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SaveLines", @TDetTipoExpediente_SaveLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave(); IIF( .F., s_oClass:ModMethod( "lPreSave", @TDetTipoExpediente_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TDetTipoExpediente_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TDetTipoExpediente ;



UTILITY STATIC function TDetTipoExpediente_DefineFiles( cPath, cVia, lUniqueName, cFileName) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local oDbf

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cVia == nil, cVia := cDriver(), ) ;
   IIF( lUniqueName == nil, lUniqueName := .F., ) ;
   IIF( cFileName == nil, cFileName := "TipExpL", ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPatTmp() )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "Subtipo de expedientes", ( cPath ) )

      oDbf:AddField( "cCodTip", "C", 3, 0,,,,, "Tipo expediente", .F.,, .F., {} )
      oDbf:AddField( "cCodSub", "C", 3, 0,,,,, "Código subtipo", .F.,, .F., {} )
      oDbf:AddField( "cNomSub", "C", 50, 0,,,,, "Nombre subtipo", .F.,, .F., {} )

      oDbf:AddIndex( "cCodTip", ( cFileName ), "cCodTip",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodSub", ( cFileName ), "cCodTip + cCodSub",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cNomSub", ( cFileName ), "cCodTip + Upper( cNomSub )",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



UTILITY STATIC function TDetTipoExpediente_OpenFiles(lExclusive) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local lOpen             := .T.
   local oError
   local oBlock

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

      ::bOnPreSaveDetail   := {|| ::SaveLines() }

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen                := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TDetTipoExpediente_Resource( nMode) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local oDlg
   local oGetSub
   local oGetNom





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "subtipo de expedientes", "LSubTipoExpediente",, .F.,,,,,, .F.,,,,,, .F., )









      oGetSub := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbfVir:cCodSub, ::oDbfVir:cCodSub:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )








      oGetNom := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cNomSub, ::oDbfVir:cNomSub:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      TButton():ReDefine( 1, {||( if( ::lPresave( oGetSub, oGetNom, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 9, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| if( ::lPresave( oGetSub, oGetNom, nMode ), oDlg:end( 1 ), ) } )
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TDetTipoExpediente_SaveLines() ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   ::oDbfVir:cCodTip  := ::oParent:oDbf:cCodTip

RETURN ( Self )



UTILITY STATIC function TDetTipoExpediente_lPreSave( oGetCod, oGetNom, nMode) ; local Self AS CLASS TDetTipoExpediente := QSelf() AS CLASS TDetTipoExpediente

   local lPreSave := .T.
   local nOrdAnt  := ::oDbfVir:OrdSetFocus( "cCodSub" )

   if nMode == 1

      if ::oDbfVir:Seek( ::oDbfVir:cCodTip + ::oDbfVir:cCodSub )

         msgStop( "Código existente" )
         oGetCod:SetFocus()

         lPreSave := .F.

      end

   end

   ::oDbfVir:OrdSetFocus( nOrdAnt )

   if Empty( oGetNom:VarGet() )
      MsgStop( "El nombre del subtipo no puede estar vacio." )
      lPreSave    := .F.
   end

RETURN ( lPreSave )

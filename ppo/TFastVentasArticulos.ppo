#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 10 ".\Prg\TFastVentasArticulos.prg"
_HB_CLASS TFastVentasArticulos ; UTILITY FUNCTION TFastVentasArticulos(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFastVentasArticulos" , {TFastReportInfGen():classh} ) ) ; ;

   _HB_MEMBER { cResource} ; IIF( !.F., s_oClass:AddMultiData(, "FastReportArticulos", nScope + IIF( .F., 32, 0 ), { "cResource" }, .F., .F. ), )
   _HB_MEMBER { lUnidadesNegativo} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lUnidadesNegativo" }, .F., .F. ), )

   _HB_MEMBER { oProLin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProLin" }, .F., .F. ), )
   _HB_MEMBER { oProMat} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProMat" }, .F., .F. ), )
   _HB_MEMBER { oHisMov} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oHisMov" }, .F., .F. ), )

   _HB_MEMBER { oStock} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oStock" }, .F., .F. ), )

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TFastVentasArticulos_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TFastVentasArticulos_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TFastVentasArticulos_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TFastVentasArticulos_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TFastVentasArticulos_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TFastVentasArticulos_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER lValidRegister(); IIF( .F., s_oClass:ModMethod( "lValidRegister", @TFastVentasArticulos_lValidRegister(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValidRegister", @TFastVentasArticulos_lValidRegister(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TFastVentasArticulos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TFastVentasArticulos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TFastVentasArticulos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TFastVentasArticulos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DataReport(); IIF( .F., s_oClass:ModMethod( "DataReport", @TFastVentasArticulos_DataReport(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DataReport", @TFastVentasArticulos_DataReport(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddVariable(); IIF( .F., s_oClass:ModMethod( "AddVariable", @TFastVentasArticulos_AddVariable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddVariable", @TFastVentasArticulos_AddVariable(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER StartDialog(); IIF( .F., s_oClass:ModMethod( "StartDialog", @TFastVentasArticulos_StartDialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "StartDialog", @TFastVentasArticulos_StartDialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER BuildTree( oTree, lSubNode); IIF( .F., s_oClass:ModMethod( "BuildTree", @TFastVentasArticulos_BuildTree(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BuildTree", @TFastVentasArticulos_BuildTree(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPresupuestoClientes(); IIF( .F., s_oClass:ModMethod( "AddPresupuestoClientes", @TFastVentasArticulos_AddPresupuestoClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPresupuestoClientes", @TFastVentasArticulos_AddPresupuestoClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddPedidoClientes(); IIF( .F., s_oClass:ModMethod( "AddPedidoClientes", @TFastVentasArticulos_AddPedidoClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPedidoClientes", @TFastVentasArticulos_AddPedidoClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddAlbaranCliente(); IIF( .F., s_oClass:ModMethod( "AddAlbaranCliente", @TFastVentasArticulos_AddAlbaranCliente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlbaranCliente", @TFastVentasArticulos_AddAlbaranCliente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacturaCliente(); IIF( .F., s_oClass:ModMethod( "AddFacturaCliente", @TFastVentasArticulos_AddFacturaCliente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacturaCliente", @TFastVentasArticulos_AddFacturaCliente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacturaRectificativa(); IIF( .F., s_oClass:ModMethod( "AddFacturaRectificativa", @TFastVentasArticulos_AddFacturaRectificativa(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacturaRectificativa", @TFastVentasArticulos_AddFacturaRectificativa(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddTicket(); IIF( .F., s_oClass:ModMethod( "AddTicket", @TFastVentasArticulos_AddTicket(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddTicket", @TFastVentasArticulos_AddTicket(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddArticulo(); IIF( .F., s_oClass:ModMethod( "AddArticulo", @TFastVentasArticulos_AddArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddArticulo", @TFastVentasArticulos_AddArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPedidoProveedor(); IIF( .F., s_oClass:ModMethod( "AddPedidoProveedor", @TFastVentasArticulos_AddPedidoProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPedidoProveedor", @TFastVentasArticulos_AddPedidoProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddAlbaranProveedor(); IIF( .F., s_oClass:ModMethod( "AddAlbaranProveedor", @TFastVentasArticulos_AddAlbaranProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlbaranProveedor", @TFastVentasArticulos_AddAlbaranProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacturaProveedor(); IIF( .F., s_oClass:ModMethod( "AddFacturaProveedor", @TFastVentasArticulos_AddFacturaProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacturaProveedor", @TFastVentasArticulos_AddFacturaProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddRectificativaProveedor(); IIF( .F., s_oClass:ModMethod( "AddRectificativaProveedor", @TFastVentasArticulos_AddRectificativaProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRectificativaProveedor", @TFastVentasArticulos_AddRectificativaProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER TreeReportingChanged(); IIF( .F., s_oClass:ModMethod( "TreeReportingChanged", @TFastVentasArticulos_TreeReportingChanged(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "TreeReportingChanged", @TFastVentasArticulos_TreeReportingChanged(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFastVentasArticulos ;



UTILITY STATIC function TFastVentasArticulos_lResource( cFld) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   ::lNewInforme     := .T.
   ::lDefCondiciones := .F.

   if !::NewResource()
      return .F.
   end





   if !::lGrupoArticulo( .T. )
      return .F.
   end

   if !::lGrupoFamilia( .T. )
      return .F.
   end

   if !::lGrupoIva( .T. )
      return .F.
   end

   if !::lGrupoTipoArticulo( .T. )
      return .F.
   end

   if !::lGrupoCategoria( .T. )
      return .F.
   end

   if !::lGrupoTemporada( .T. )
      return .F.
   end

   if !::lGrupoFabricante( .T. )
      return .F.
   end

   if !::lGrupoCliente( .T. )
      return .F.
   end

   if !::lGrupoGCliente( .T. )
      return .F.
   end

   if !::lGrupoProveedor( .T. )
      return .F.
   end

   if !::lGrupoAlmacen( .T. )
      return .F.
   end

   if !::lGrupoFpago( .T. )
      return .F.
   end

   if !::lGrupoRuta( .T. )
      return .F.
   end

   if !::lGrupoAgente( .T. )
      return .F.
   end

   if !::lGrupoTransportista( .T. )
      return .F.
   end

   if !::lGrupoUsuario( .T. )
      return .F.
   end

   if !::lGrupoSerie( .T. )
      return .F.
   end

   ::CreateFilter( , ::oDbf )

RETURN .T.



UTILITY STATIC function TFastVentasArticulos_OpenFiles() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oArtImg := DbfServer( "ArtImg.Dbf", "ArtImg" ):NewOpen( "ArtImg.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oArtImg:AddBag( "ArtImg.Cdx" ) ; ::oArtImg:AddBag( ) ; ::oArtImg:AutoIndex()

      ::oArtKit := DbfServer( "ArtKit.Dbf", "ArtKit" ):NewOpen( "ArtKit.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oArtKit:AddBag( "ArtKit.Cdx" ) ; ::oArtKit:AddBag( ) ; ::oArtKit:AutoIndex()

      ::oArtCod := DbfServer( "ArtCodebar.Dbf", "ArtCodebar" ):NewOpen( "ArtCodebar.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oArtCod:AddBag( "ArtCodebar.Cdx" ) ; ::oArtCod:AddBag( ) ; ::oArtCod:AutoIndex()

      ::oPreCliT := DbfServer( "PreCliT.Dbf", "PreCliT" ):NewOpen( "PreCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliT:AddBag( "PreCliT.Cdx" ) ; ::oPreCliT:AddBag( ) ; ::oPreCliT:AutoIndex()

      ::oPreCliL := DbfServer( "PreCliL.Dbf", "PreCliL" ):NewOpen( "PreCliL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliL:AddBag( "PreCliL.Cdx" ) ; ::oPreCliL:AddBag( ) ; ::oPreCliL:AutoIndex()

      ::oPedCliT := DbfServer( "PedCliT.Dbf", "PedCliT" ):NewOpen( "PedCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliT:AddBag( "PedCliT.Cdx" ) ; ::oPedCliT:AddBag( ) ; ::oPedCliT:AutoIndex()

      ::oPedCliL := DbfServer( "PedCliL.Dbf", "PedCliL" ):NewOpen( "PedCliL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PedCliL.Cdx" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

      ::oAlbCliT := DbfServer( "ALBCLIT.Dbf", "ALBCLIT" ):NewOpen( "ALBCLIT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.Cdx" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

      ::oAlbCliL := DbfServer( "ALBCLIL.Dbf", "ALBCLIL" ):NewOpen( "ALBCLIL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.Cdx" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

      ::oFacCliT := DbfServer( "FACCLIT.Dbf", "FACCLIT" ):NewOpen( "FACCLIT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliT:AddBag( "FACCLIT.Cdx" ) ; ::oFacCliT:AddBag( ) ; ::oFacCliT:AutoIndex()

      ::oFacCliL := DbfServer( "FACCLIL.Dbf", "FACCLIL" ):NewOpen( "FACCLIL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.Cdx" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

      ::oFacRecT := DbfServer( "FACRECT.Dbf", "FACRECT" ):NewOpen( "FACRECT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FACRECT.Cdx" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

      ::oFacRecL := DbfServer( "FACRECL.Dbf", "FACRECL" ):NewOpen( "FACRECL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FACRECL.Cdx" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()

      ::oTikCliT := DbfServer( "TIKET.Dbf", "TIKET" ):NewOpen( "TIKET.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.Cdx" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

      ::oTikCliL := DbfServer( "TIKEL.Dbf", "TIKEL" ):NewOpen( "TIKEL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.Cdx" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

      ::oPedPrvT := DbfServer( "PedProvT.Dbf", "PedPrvT" ):NewOpen( "PedProvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedPrvT:AddBag( "PedProvT.Cdx" ) ; ::oPedPrvT:AddBag( ) ; ::oPedPrvT:AutoIndex()

      ::oPedPrvL := DbfServer( "PedProvL.Dbf", "PedPrvL" ):NewOpen( "PedProvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedPrvL:AddBag( "PedProvL.Cdx" ) ; ::oPedPrvL:AddBag( ) ; ::oPedPrvL:AutoIndex()

      ::oAlbPrvT := DbfServer( "AlbProvT.Dbf", "AlbPrvT" ):NewOpen( "AlbProvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "AlbProvT.Cdx" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

      ::oAlbPrvL := DbfServer( "AlbProvL.Dbf", "AlbPrvL" ):NewOpen( "AlbProvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "AlbProvL.Cdx" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

      ::oFacPrvT := DbfServer( "FacPrvT.Dbf", "FacPrvT" ):NewOpen( "FacPrvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FacPrvT.Cdx" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

      ::oFacPrvL := DbfServer( "FacPrvL.Dbf", "FacPrvL" ):NewOpen( "FacPrvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FacPrvL.Cdx" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

      ::oRctPrvT := DbfServer( "RctPrvT.Dbf", "RctPrvT" ):NewOpen( "RctPrvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvT:AddBag( "RctPrvT.Cdx" ) ; ::oRctPrvT:AddBag( ) ; ::oRctPrvT:AutoIndex()

      ::oRctPrvL := DbfServer( "RctPrvL.Dbf", "RctPrvL" ):NewOpen( "RctPrvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvL:AddBag( "RctPrvL.Cdx" ) ; ::oRctPrvL:AddBag( ) ; ::oRctPrvL:AutoIndex()

      ::oProLin := DbfServer( "ProLin.Dbf", "ProLin" ):NewOpen( "ProLin.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProLin:AddBag( "ProLin.Cdx" ) ; ::oProLin:AddBag( ) ; ::oProLin:AutoIndex()

      ::oProMat := DbfServer( "ProMat.Dbf", "ProMat" ):NewOpen( "ProMat.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProMat:AddBag( "ProMat.Cdx" ) ; ::oProMat:AddBag( ) ; ::oProMat:AutoIndex()

      ::oHisMov := DbfServer( "HisMov.Dbf", "HisMov" ):NewOpen( "HisMov.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHisMov:AddBag( "HisMov.Cdx" ) ; ::oHisMov:AddBag( ) ; ::oHisMov:AutoIndex()





      ::oStock                := TStock():Create( cPatGrp() )

      if !::oStock:lOpenFiles()

         lOpen                := .F.

      else

         ::oStock:cKit        := ::oArtKit:cAlias

         ::oStock:cPedCliL    := ::oPedCliL:cAlias
         ::oStock:cAlbCliT    := ::oAlbCliT:cAlias
         ::oStock:cAlbCliL    := ::oAlbCliL:cAlias
         ::oStock:cFacCliL    := ::oFacCliL:cAlias
         ::oStock:cFacRecL    := ::oFacRecL:cAlias
         ::oStock:cTikL       := ::oTikCliL:cAlias

         ::oStock:cPedPrvL    := ::oPedPrvL:cAlias
         ::oStock:cAlbPrvT    := ::oAlbPrvT:cAlias
         ::oStock:cAlbPrvL    := ::oAlbPrvL:cAlias
         ::oStock:cFacPrvL    := ::oFacPrvL:cAlias
         ::oStock:cRctPrvL    := ::oRctPrvL:cAlias

         ::oStock:cProducL    := ::oProLin:cAlias
         ::oStock:cProducM    := ::oProMat:cAlias
         ::oStock:cHisMov     := ::oHisMov:cAlias

      end


   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de artículos" )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TFastVentasArticulos_CloseFiles() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      if !Empty( ::oArtImg ) .AND. ( ::oArtImg:Used() )
         ::oArtImg:end()
      end

      if !Empty( ::oArtKit ) .AND. ( ::oArtKit:Used() )
         ::oArtKit:end()
      end

      if !Empty( ::oArtCod ) .AND. ( ::oArtCod:Used() )
         ::oArtCod:end()
      end

      if !Empty( ::oPreCliL ) .AND. ( ::oPreCliL:Used() )
         ::oPreCliL:end()
      end

      if !Empty( ::oPreCliT ) .AND. ( ::oPreCliT:Used() )
         ::oPreCliT:end()
      end

      if !Empty( ::oPedCliL ) .AND. ( ::oPedCliL:Used() )
         ::oPedCliL:end()
      end

      if !Empty( ::oPedCliT ) .AND. ( ::oPedCliT:Used() )
         ::oPedCliT:end()
      end

      if !Empty( ::oAlbCliL ) .AND. ( ::oAlbCliL:Used() )
         ::oAlbCliL:end()
      end

      if !Empty( ::oAlbCliT ) .AND. ( ::oAlbCliT:Used() )
         ::oAlbCliT:end()
      end

      if !Empty( ::oFacCliL ) .AND. ( ::oFacCliL:Used() )
         ::oFacCliL:end()
      end

      if !Empty( ::oFacCliT ) .AND. ( ::oFacCliT:Used() )
         ::oFacCliT:end()
      end

      if !Empty( ::oFacRecL ) .AND. ( ::oFacRecL:Used() )
         ::oFacRecL:end()
      end

      if !Empty( ::oFacRecT ) .AND. ( ::oFacRecT:Used() )
         ::oFacRecT:end()
      end

      if !Empty( ::oTikCliT ) .AND. ( ::oTikCliT:Used() )
         ::oTikCliT:End()
      end

      if !Empty( ::oTikCliL ) .AND. ( ::oTikCliL:Used() )
         ::oTikCliL:End()
      end

      if !Empty( ::oPedPrvL ) .AND. ( ::oPedPrvL:Used() )
         ::oPedPrvL:end()
      end

      if !Empty( ::oPedPrvT ) .AND. ( ::oPedPrvT:Used() )
         ::oPedPrvT:end()
      end

      if !Empty( ::oAlbPrvL ) .AND. ( ::oAlbPrvL:Used() )
         ::oAlbPrvL:end()
      end

      if !Empty( ::oAlbPrvT ) .AND. ( ::oAlbPrvT:Used() )
         ::oAlbPrvT:end()
      end

      if !Empty( ::oFacPrvL ) .AND. ( ::oFacPrvL:Used() )
         ::oFacPrvL:end()
      end

      if !Empty( ::oFacPrvT ) .AND. ( ::oFacPrvT:Used() )
         ::oFacPrvT:end()
      end

      if !Empty( ::oRctPrvL ) .AND. ( ::oRctPrvL:Used() )
         ::oRctPrvL:end()
      end

      if !Empty( ::oRctPrvT ) .AND. ( ::oRctPrvT:Used() )
         ::oRctPrvT:end()
      end

      if !Empty( ::oProLin ) .AND. ( ::oProLin:Used() )
         ::oProLin:end()
      end

      if !Empty( ::oProMat ) .AND. ( ::oProMat:Used() )
         ::oProMat:end()
      end

      if !Empty( ::oHisMov ) .AND. ( ::oHisMov:Used() )
         ::oHisMov:end()
      end

   RECOVER

      msgStop( "Imposible cerrar todas las bases de datos" )

   end

   ErrorBlock( oBlock )

RETURN .T.



UTILITY STATIC function TFastVentasArticulos_Create( uParam) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   ::AddField( "cCodArt",     "C", 18, 0, {|| "@!" }, "Código artículo"                         )
   ::AddField( "cNomArt",     "C",100, 0, {|| ""   }, "Nombre artículo"                         )

   ::AddField( "cCodFam",     "C", 16, 0, {|| "@!" }, "Código familia"                          )
   ::AddField( "TipoIva",     "C",  1, 0, {|| "@!" }, "Código del tipo de " + cImp()            )
   ::AddField( "cCodTip",     "C", 18, 0, {|| "@!" }, "Código del tipo de artículo"             )
   ::AddField( "cCodCate",    "C",  3, 0, {|| "@!" }, "Código categoría"                        )
   ::AddField( "cCodTemp",    "C",  3, 0, {|| "@!" }, "Código temporada"                        )
   ::AddField( "cCodFab",     "C",  3, 0, {|| "@!" }, "Código fabricante"                       )
   ::AddField( "cCodGrp",     "C", 12, 0, {|| "@!" }, "Código grupo de cliente"                 )
   ::AddField( "cCodAlm",     "C",  3, 0, {|| "@!" }, "Código del almacén"                      )
   ::AddField( "cCodPago",    "C",  2, 0, {|| "@!" }, "Código de la forma de pago"              )
   ::AddField( "cCodRut",     "C", 12, 0, {|| "@!" }, "Código de la ruta"                       )
   ::AddField( "cCodAge",     "C", 12, 0, {|| "@!" }, "Código del agente"                       )
   ::AddField( "cCodTrn",     "C", 12, 0, {|| "@!" }, "Código del transportista"                )
   ::AddField( "cCodUsr",     "C",  3, 0, {|| "@!" }, "Código usuario que realiza el cambio"    )

   ::AddField( "cCodCli",     "C", 12, 0, {|| "@!" }, "Código cliente/proveedor"                )
   ::AddField( "cNomCli",     "C", 80, 0, {|| "@!" }, "Nombre cliente/proveedor"                )
   ::AddField( "cPobCli",     "C", 35, 0, {|| "@!" }, "Población cliente/proveedor"             )
   ::AddField( "cPrvCli",     "C", 20, 0, {|| "@!" }, "Provincia cliente/proveedor"             )
   ::AddField( "cPosCli",     "C", 15, 0, {|| "@!" }, "Código postal cliente/proveedor"         )

   ::AddField( "nUniArt",     "N", 16, 6, {|| "" },   "Unidades artículo"                       )
   ::AddField( "nTrnArt",     "N", 16, 6, {|| "" },   "Transporte artículo"                     )
   ::AddField( "nPntArt",     "N", 16, 6, {|| "" },   "Punto verde artículo"                    )
   ::AddField( "nBrtArt",     "N", 16, 6, {|| "" },   "Importe bruto artículo"                  )
   ::AddField( "nImpArt",     "N", 16, 6, {|| "" },   "Importe artículo"                        )
   ::AddField( "nIvaArt",     "N", 16, 6, {|| "" },   cImp() + " artículo"                      )
   ::AddField( "nTotArt",     "N", 16, 6, {|| "" },   "Total artículo"                          )
   ::AddField( "nCosArt",     "N", 16, 6, {|| "" },   "Costo artículo"                          )

   ::AddField( "cCodPr1",     "C", 10, 0, {|| "" },   "Código de la primera propiedad"          )
   ::AddField( "cCodPr2",     "C", 10, 0, {|| "" },   "Código de la segunda propiedad"          )
   ::AddField( "cValPr1",     "C", 10, 0, {|| "" },   "Valor de la primera propiedad"           )
   ::AddField( "cValPr2",     "C", 10, 0, {|| "" },   "Valor de la segunda propiedad"           )

   ::AddField( "cLote",       "C", 12, 0, {|| "" },   "Número de lote"                          )
   ::AddField( "dFecCad",     "D",  8, 0, {|| "" },   "Fecha de caducidad"                      )

   ::AddField( "cClsDoc",     "C",  2, 0, {|| "" },   "Clase de documento"                      )
   ::AddField( "cTipDoc",     "C", 30, 0, {|| "" },   "Tipo de documento"                       )
   ::AddField( "cIdeDoc",     "C", 27, 0, {|| "" },   "Identificador del documento"             )
   ::AddField( "cSerDoc",     "C",  1, 0, {|| "" },   "Serie del documento"                     )
   ::AddField( "cNumDoc",     "C", 10, 0, {|| "" },   "Número del documento"                    )
   ::AddField( "cSufDoc",     "C",  2, 0, {|| "" },   "Delegación del documento"                )

   ::AddField( "nAnoDoc",     "N",  4, 0, {|| "" },   "Año del documento"                       )
   ::AddField( "nMesDoc",     "N",  2, 0, {|| "" },   "Mes del documento"                       )
   ::AddField( "dFecDoc",     "D",  8, 0, {|| "" },   "Fecha del documento"                     )
   ::AddField( "cHorDoc",     "C",  2, 0, {|| "" },   "Hora del documento"                      )
   ::AddField( "cMinDoc",     "C",  2, 0, {|| "" },   "Minutos del documento"                   )

   ::AddTmpIndex( "cCodArt", "cCodArt" )

RETURN ( self )



UTILITY STATIC function TFastVentasArticulos_lGenerate() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   ::oDbf:Zap()





   do case
      case ::cTypeName == "Informe de presupuestos"

         ::AddPresupuestoClientes()

      case ::cTypeName == "Informe de pedidos"

         ::AddPedidoClientes()

      case ::cTypeName == "Informe de albaranes"

         ::AddAlbaranCliente()

      case ::cTypeName == "Informe de facturas"

         ::AddFacturaCliente()

         ::AddFacturaRectificativa()

      case ::cTypeName == "Informe de facturas rectificativas"

         ::AddFacturaRectificativa( .T. )

      case ::cTypeName == "Informe de tickets"

         ::AddTicket( .T. )

      case ::cTypeName == "Informe de ventas"

         ::AddAlbaranCliente( .T. )

         ::AddFacturaCliente()

         ::AddFacturaRectificativa()

         ::AddTicket()

      case ::cTypeName == "Listado"

         ::AddArticulo()

      case ::cTypeName == "Informe de pedidos de proveedor"

         ::AddPedidoProveedor()

      case ::cTypeName == "Informe de albaranes de proveedor"

         ::AddAlbaranProveedor()

      case ::cTypeName == "Informe de facturas de proveedor"

         ::AddFacturaProveedor()

      case ::cTypeName == "Informe de facturas rectificativas de proveedor"

         ::AddRectificativaProveedor()

      case ::cTypeName == "Informe de compras"

         ::AddAlbaranProveedor( .T. )

         ::AddFacturaProveedor()

         ::AddRectificativaProveedor()

      case ::cTypeName == "Informe de compras y ventas"

         ::lUnidadesNegativo           := .T.

         ::AddAlbaranCliente( .T. )

         ::AddFacturaCliente()

         ::AddFacturaRectificativa()

         ::AddTicket()

         ::AddAlbaranProveedor( .T. )

         ::AddFacturaProveedor()

         ::AddRectificativaProveedor()

         ::lUnidadesNegativo           := .F.

   end

   ::nRemesaAgentes()

   if !Empty( ::oFilter:cExpFilter )
      ::oDbf:SetFilter( ::oFilter:cExpFilter )
   end

   ::oDbf:GoTop()

RETURN ( ::oDbf:LastRec() > 0 )



UTILITY STATIC function TFastVentasArticulos_lValidRegister() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos















   if ( ::oDbf:cCodArt     >= ::oGrupoArticulo:Cargo:Desde      .AND. ::oDbf:cCodArt   <= ::oGrupoArticulo:Cargo:Hasta )      .AND. ( ::oDbf:cCodFam     >= ::oGrupoFamilia:Cargo:Desde       .AND. ::oDbf:cCodFam   <= ::oGrupoFamilia:Cargo:Hasta )       .AND. ( ::oDbf:cCodTip     >= ::oGrupoTArticulo:Cargo:Desde     .AND. ::oDbf:cCodTip   <= ::oGrupoTArticulo:Cargo:Hasta )     .AND. ( ::oDbf:TipoIva     >= ::oGrupoIva:Cargo:Desde           .AND. ::oDbf:TipoIva   <= ::oGrupoIva:Cargo:Hasta )           .AND. ( ::oDbf:cCodCate    >= ::oGrupoCategoria:Cargo:Desde     .AND. ::oDbf:cCodCate  <= ::oGrupoCategoria:Cargo:Hasta )     .AND. ( ::oDbf:cCodTemp    >= ::oGrupoTemporada:Cargo:Desde     .AND. ::oDbf:cCodTemp  <= ::oGrupoTemporada:Cargo:Hasta )     .AND. ( ::oDbf:cCodFab     >= ::oGrupoFabricante:Cargo:Desde    .AND. ::oDbf:cCodFab   <= ::oGrupoFabricante:Cargo:Hasta )    .AND. ( ::oDbf:cCodCli     >= ::oGrupoCliente:Cargo:Desde       .AND. ::oDbf:cCodCli   <= ::oGrupoCliente:Cargo:Hasta )       .AND. ( ::oDbf:cCodGrp     >= ::oGrupoGCliente:Cargo:Desde      .AND. ::oDbf:cCodGrp   <= ::oGrupoGCliente:Cargo:Hasta )      .AND. ( ::oDbf:cCodAlm     >= ::oGrupoAlmacen:Cargo:Desde       .AND. ::oDbf:cCodAlm   <= ::oGrupoAlmacen:Cargo:Hasta )       .AND. ( ::oDbf:cCodPago    >= ::oGrupoFpago:Cargo:Desde         .AND. ::oDbf:cCodPago  <= ::oGrupoFpago:Cargo:Hasta )         .AND. ( ::oDbf:cCodRut     >= ::oGrupoRuta:Cargo:Desde          .AND. ::oDbf:cCodRut   <= ::oGrupoRuta:Cargo:Hasta )          .AND. ( ::oDbf:cCodAge     >= ::oGrupoAgente:Cargo:Desde        .AND. ::oDbf:cCodAge   <= ::oGrupoAgente:Cargo:Hasta )        .AND. ( ::oDbf:cCodTrn     >= ::oGrupoTransportista:Cargo:Desde .AND. ::oDbf:cCodTrn   <= ::oGrupoTransportista:Cargo:Hasta ) .AND. ( ::oDbf:cCodUsr     >= ::oGrupoUsuario:Cargo:Desde       .AND. ::oDbf:cCodUsr   <= ::oGrupoUsuario:Cargo:Hasta )

      return .T.

   end

RETURN ( .F. )



UTILITY STATIC function TFastVentasArticulos_AddPresupuestoClientes() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oPreCliT:OrdSetFocus( "dFecPre" )
   ::oPreCliL:OrdSetFocus( "nNumPre" )

   cExpHead          := 'dFecPre >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPre <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerPre >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )   + '" .and. cSerPre <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oPreCliT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPreCliT:cFile ), ::oPreCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando presupuestos"
   ::oMtrInf:SetTotal( ::oPreCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oPreCliL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPreCliL:cFile ), ::oPreCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oPreCliT:GoTop()
   while !::lBreak .AND. !::oPreCliT:Eof()

      if lChkSer( ::oPreCliT:cSerPre, ::aSer )

         if ::oPreCliL:Seek( ::oPreCliT:cSerPre + Str( ::oPreCliT:nNumPre ) + ::oPreCliT:cSufPre )

            while !::lBreak .AND. ( ::oPreCliT:cSerPre + Str( ::oPreCliT:nNumPre ) + ::oPreCliT:cSufPre == ::oPreCliL:cSerPre + Str( ::oPreCliL:nNumPre ) + ::oPreCliL:cSufPre )


               if !( ::lExcCero  .AND. nTotNPreCli( ::oPreCliL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )





                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oPreCliL:cRef
                  ::oDbf:cNomArt    := ::oPreCliL:cDetalle

                  ::oDbf:cCodPr1    := ::oPreCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oPreCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oPreCliL:cValPr1
                  ::oDbf:cValPr2    := ::oPreCliL:cValPr2

                  ::oDbf:cCodFam    := ::oPreCliL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oPreCliL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oPreCliL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oPreCliL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oPreCliL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oPreCliL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oPreCliL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oPreCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oPreCliT:cCodPgo
                  ::oDbf:cCodRut    := ::oPreCliT:cCodRut
                  ::oDbf:cCodAge    := ::oPreCliT:cCodAge
                  ::oDbf:cCodTrn    := ::oPreCliT:cCodTrn
                  ::oDbf:cCodUsr    := ::oPreCliT:cCodUsr

                  ::oDbf:cCodCli    := ::oPreCliT:cCodCli
                  ::oDbf:cNomCli    := ::oPreCliT:cNomCli
                  ::oDbf:cPobCli    := ::oPreCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oPreCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oPreCliT:cPosCli

                  ::oDbf:nUniArt    := nTotNPreCli( ::oPreCliL:cAlias )
                  ::oDbf:nBrtArt    := nBrtLPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := nTotCPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:cClsDoc    := "08"
                  ::oDbf:cTipDoc    := "Presupuesto clientes"
                  ::oDbf:cSerDoc    := ::oPreCliT:cSerPre
                  ::oDbf:cNumDoc    := Str( ::oPreCliT:nNumPre )
                  ::oDbf:cSufDoc    := ::oPreCliT:cSufPre
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oPreCliT:dFecPre )
                  ::oDbf:nMesDoc    := Month( ::oPreCliT:dFecPre )
                  ::oDbf:dFecDoc    := ::oPreCliT:dFecPre
                  ::oDbf:cHorDoc    := SubStr( ::oPreCliT:cTimCre, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oPreCliT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oPreCliL:Skip()

            end

         end

      end

      ::oPreCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oPreCliT:IdxDelete( cCurUsr(), GetFileNoExt( ::oPreCliT:cFile ) )
   ::oPreCliL:IdxDelete( cCurUsr(), GetFileNoExt( ::oPreCliL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddPedidoClientes() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oPedCliT:OrdSetFocus( "dFecPed" )
   ::oPedCliL:OrdSetFocus( "nNumPed" )

   cExpHead          := 'dFecPed >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPed <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerPed >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )   + '" .and. cSerPed <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oPedCliT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPedCliT:cFile ), ::oPedCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando pedidos"
   ::oMtrInf:SetTotal( ::oPedCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oPedCliL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPedCliL:cFile ), ::oPedCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oPedCliT:GoTop()
   while !::lBreak .AND. !::oPedCliT:Eof()

      if lChkSer( ::oPedCliT:cSerPed, ::aSer )

         if ::oPedCliL:Seek( ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed )

            while !::lBreak .AND. ( ::oPedCliT:cSerPed + Str( ::oPedCliT:nNumPed ) + ::oPedCliT:cSufPed == ::oPedCliL:cSerPed + Str( ::oPedCliL:nNumPed ) + ::oPedCliL:cSufPed )


               if !( ::lExcCero  .AND. nTotNPedCli( ::oPedCliL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )





                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oPedCliL:cRef
                  ::oDbf:cNomArt    := ::oPedCliL:cDetalle

                  ::oDbf:cCodFam    := ::oPedCliL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oPedCliL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oPedCliL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oPedCliL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oPedCliL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oPedCliL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oPedCliL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oPedCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oPedCliT:cCodPgo
                  ::oDbf:cCodRut    := ::oPedCliT:cCodRut
                  ::oDbf:cCodAge    := ::oPedCliT:cCodAge
                  ::oDbf:cCodTrn    := ::oPedCliT:cCodTrn
                  ::oDbf:cCodUsr    := ::oPedCliT:cCodUsr

                  ::oDbf:cCodCli    := ::oPedCliT:cCodCli
                  ::oDbf:cNomCli    := ::oPedCliT:cNomCli
                  ::oDbf:cPobCli    := ::oPedCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oPedCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oPedCliT:cPosCli

                  ::oDbf:nUniArt    := nTotNPedCli( ::oPedCliL:cAlias )
                  ::oDbf:nBrtArt    := nBrtLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := nTotCPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:cCodPr1    := ::oPedCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oPedCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oPedCliL:cValPr1
                  ::oDbf:cValPr2    := ::oPedCliL:cValPr2

                  ::oDbf:cClsDoc    := "09"
                  ::oDbf:cTipDoc    := "Pedido clientes"
                  ::oDbf:cSerDoc    := ::oPedCliT:cSerPed
                  ::oDbf:cNumDoc    := Str( ::oPedCliT:nNumPed )
                  ::oDbf:cSufDoc    := ::oPedCliT:cSufPed
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oPedCliT:dFecPed )
                  ::oDbf:nMesDoc    := Month( ::oPedCliT:dFecPed )
                  ::oDbf:dFecDoc    := ::oPedCliT:dFecPed
                  ::oDbf:cHorDoc    := SubStr( ::oPedCliT:cTimCre, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oPedCliT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oPedCliL:Skip()

            end

         end

      end

      ::oPedCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oPedCliT:IdxDelete( cCurUsr(), GetFileNoExt( ::oPedCliT:cFile ) )
   ::oPedCliL:IdxDelete( cCurUsr(), GetFileNoExt( ::oPedCliL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddAlbaranCliente( lFacturados) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   IIF( lFacturados == nil, lFacturados := .F., ) ;

   ::InitAlbaranesClientes()

   ::oAlbCliT:OrdSetFocus( "dFecAlb" )
   ::oAlbCliL:OrdSetFocus( "nNumAlb" )

   if lFacturados
      cExpHead          := '!lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   else
      cExpHead          := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   cExpHead             += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead             += ' .and. cSerAlb >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )   + '" .and. cSerAlb <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oAlbCliT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oAlbCliT:cFile ), ::oAlbCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando albaranes"
   ::oMtrInf:SetTotal( ::oAlbCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oAlbCliL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oAlbCliL:cFile ), ::oAlbCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbCliT:GoTop()

   while !::lBreak .AND. !::oAlbCliT:Eof()

      if lChkSer( ::oAlbCliT:cSerAlb, ::aSer )

         if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb )

            while !::lBreak .AND. ( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb == ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb ) + ::oAlbCliL:cSufAlb )


               if !( ::lExcCero  .AND. nTotNAlbCli( ::oAlbCliL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oAlbCliL:cRef
                  ::oDbf:cNomArt    := ::oAlbCliL:cDetalle

                  ::oDbf:cCodFam    := ::oAlbCliL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oAlbCliL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oAlbCliL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oAlbCliL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oAlbCliL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oAlbCliL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oAlbCliL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oAlbCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oAlbCliT:cCodPago
                  ::oDbf:cCodRut    := ::oAlbCliT:cCodRut
                  ::oDbf:cCodAge    := ::oAlbCliT:cCodAge
                  ::oDbf:cCodTrn    := ::oAlbCliT:cCodTrn
                  ::oDbf:cCodUsr    := ::oAlbCliT:cCodUsr

                  ::oDbf:cCodCli    := ::oAlbCliT:cCodCli
                  ::oDbf:cNomCli    := ::oAlbCliT:cNomCli
                  ::oDbf:cPobCli    := ::oAlbCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oAlbCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oAlbCliT:cPosCli

                  ::oDbf:nUniArt    := nTotNAlbCli( ::oAlbCliL:cAlias ) * if( ::lUnidadesNegativo, -1, 1 )

                  ::oDbf:nBrtArt    := nBrtLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := nCosLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:cCodPr1    := ::oAlbCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oAlbCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oAlbCliL:cValPr1
                  ::oDbf:cValPr2    := ::oAlbCliL:cValPr2

                  ::oDbf:cLote      := ::oAlbCliL:cLote
                  ::oDbf:dFecCad    := ::oAlbCliL:dFecCad

                  ::oDbf:cClsDoc    := "10"
                  ::oDbf:cTipDoc    := "Albaran clientes"
                  ::oDbf:cSerDoc    := ::oAlbCliT:cSerAlb
                  ::oDbf:cNumDoc    := Str( ::oAlbCliT:nNumAlb )
                  ::oDbf:cSufDoc    := ::oAlbCliT:cSufAlb
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oAlbCliT:dFecAlb )
                  ::oDbf:nMesDoc    := Month( ::oAlbCliT:dFecAlb )
                  ::oDbf:dFecDoc    := ::oAlbCliT:dFecAlb
                  ::oDbf:cHorDoc    := SubStr( ::oAlbCliT:cTimCre, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oAlbCliT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::addAlbaranesClientes()

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbCliT:IdxDelete( cCurUsr(), GetFileNoExt( ::oAlbCliT:cFile ) )
   ::oAlbCliL:IdxDelete( cCurUsr(), GetFileNoExt( ::oAlbCliL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddFacturaCliente() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::InitFacturasClientes()

   ::oFacCliT:OrdSetFocus( "dFecFac" )
   ::oFacCliL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde )   + '" .and. cCodCli <= "'   + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerie >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )      + '" .and. cSerie <= "'    + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'

   ::oFacCliT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacCliT:cFile ), ::oFacCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando facturas"
   ::oMtrInf:SetTotal( ::oFacCliT:OrdKeyCount() )





   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oFacCliL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacCliL:cFile ), ::oFacCliL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacCliT:GoTop()

   while !::lBreak .AND. !::oFacCliT:Eof()

      if lChkSer( ::oFacCliT:cSerie, ::aSer )

         if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac )

            while !::lBreak .AND. ( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac == ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac ) + ::oFacCliL:cSufFac )


               if !( ::lExcCero  .AND. nTotNFacCli( ::oFacCliL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()
                  ::oDbf:cCodArt    := ::oFacCliL:cRef
                  ::oDbf:cNomArt    := ::oFacCliL:cDetalle

                  ::oDbf:cCodFam    := ::oFacCliL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oFacCliL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oFacCliL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oFacCliL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oFacCliL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oFacCliL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oFacCliL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oFacCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oFacCliT:cCodPago
                  ::oDbf:cCodRut    := ::oFacCliT:cCodRut
                  ::oDbf:cCodAge    := ::oFacCliT:cCodAge
                  ::oDbf:cCodTrn    := ::oFacCliT:cCodTrn
                  ::oDbf:cCodUsr    := ::oFacCliT:cCodUsr

                  ::oDbf:cCodCli    := ::oFacCliT:cCodCli
                  ::oDbf:cNomCli    := ::oFacCliT:cNomCli
                  ::oDbf:cPobCli    := ::oFacCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oFacCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oFacCliT:cPosCli

                  ::oDbf:nUniArt    := nTotNFacCli( ::oFacCliL:cAlias ) * if( ::lUnidadesNegativo, -1, 1 )
                  ::oDbf:nBrtArt    := nBrtLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := nCosLFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:cCodPr1    := ::oFacCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oFacCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oFacCliL:cValPr1
                  ::oDbf:cValPr2    := ::oFacCliL:cValPr2

                  ::oDbf:cLote      := ::oFacCliL:cLote
                  ::oDbf:dFecCad    := ::oFacCliL:dFecCad

                  ::oDbf:cClsDoc    := "11"
                  ::oDbf:cTipDoc    := "Factura clientes"
                  ::oDbf:cSerDoc    := ::oFacCliT:cSerie
                  ::oDbf:cNumDoc    := Str( ::oFacCliT:nNumFac )
                  ::oDbf:cSufDoc    := ::oFacCliT:cSufFac
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oFacCliT:dFecFac )
                  ::oDbf:nMesDoc    := Month( ::oFacCliT:dFecFac )
                  ::oDbf:dFecDoc    := ::oFacCliT:dFecFac
                  ::oDbf:cHorDoc    := SubStr( ::oFacCliT:cTimCre, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oFacCliT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oFacCliL:Skip()

            end

         end

      end

      ::addFacturasClientes()

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliT:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacCliT:cFile ) )
   ::oFacCliL:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacCliL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddFacturaRectificativa( cCodigoArticulo) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oFacRecT:OrdSetFocus( "dFecFac" )
   ::oFacRecL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerie >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )   + '" .and. cSerie <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oFacRecT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacRecT:cFile ), ::oFacRecT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando facturas rectificativas"
   ::oMtrInf:SetTotal( ::oFacRecT:OrdKeyCount() )



   cExpLine          := "!lTotLin .and. !lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oFacRecL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacRecL:cFile ), ::oFacRecL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacRecT:GoTop()

   while !::lBreak .AND. !::oFacRecT:Eof()

      if lChkSer( ::oFacRecT:cSerie, ::aSer )

         if ::oFacRecL:Seek( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac )

            while !::lBreak .AND. ( ::oFacRecT:cSerie + Str( ::oFacRecT:nNumFac ) + ::oFacRecT:cSufFac == ::oFacRecL:cSerie + Str( ::oFacRecL:nNumFac ) + ::oFacRecL:cSufFac )


               if !( ::lExcCero  .AND. nTotNFacRec ( ::oFacRecL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLFacRec ( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oFacRecL:cRef
                  ::oDbf:cNomArt    := ::oFacRecL:cDetalle

                  ::oDbf:cCodFam    := ::oFacRecL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oFacRecL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oFacRecL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oFacRecL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oFacRecL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oFacRecL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oFacRecL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oFacRecL:cAlmLin
                  ::oDbf:cCodPago   := ::oFacRecT:cCodPago
                  ::oDbf:cCodRut    := ::oFacRecT:cCodRut
                  ::oDbf:cCodAge    := ::oFacRecT:cCodAge
                  ::oDbf:cCodTrn    := ::oFacRecT:cCodTrn
                  ::oDbf:cCodUsr    := ::oFacRecT:cCodUsr

                  ::oDbf:cCodCli    := ::oFacRecT:cCodCli
                  ::oDbf:cNomCli    := ::oFacRecT:cNomCli
                  ::oDbf:cPobCli    := ::oFacRecT:cPobCli
                  ::oDbf:cPrvCli    := ::oFacRecT:cPrvCli
                  ::oDbf:cPosCli    := ::oFacRecT:cPosCli

                  ::oDbf:nUniArt    := nTotNFacRec( ::oFacRecL:cAlias ) * if( ::lUnidadesNegativo, -1, 1 )

                  ::oDbf:nBrtArt    := nBrtLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := nCosLFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

                  ::oDbf:cCodPr1    := ::oFacRecL:cCodPr1
                  ::oDbf:cCodPr2    := ::oFacRecL:cCodPr2
                  ::oDbf:cValPr1    := ::oFacRecL:cValPr1
                  ::oDbf:cValPr2    := ::oFacRecL:cValPr2

                  ::oDbf:cLote      := ::oFacRecL:cLote
                  ::oDbf:dFecCad    := ::oFacRecL:dFecCad

                  ::oDbf:cClsDoc    := "14"
                  ::oDbf:cTipDoc    := "Rectificativa clientes"
                  ::oDbf:cSerDoc    := ::oFacRecT:cSerie
                  ::oDbf:cNumDoc    := Str( ::oFacRecT:nNumFac )
                  ::oDbf:cSufDoc    := ::oFacRecT:cSufFac
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oFacRecT:dFecFac )
                  ::oDbf:nMesDoc    := Month( ::oFacRecT:dFecFac )
                  ::oDbf:dFecDoc    := ::oFacRecT:dFecFac
                  ::oDbf:cHorDoc    := SubStr( ::oFacRecT:cTimCre, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oFacRecT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oFacRecL:Skip()

            end

         end

      end

      ::oFacRecT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacRecT:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacRecT:cFile ) )
   ::oFacRecL:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacRecL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddTicket() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oTikCliT:OrdSetFocus( "dFecTik" )
   ::oTikCliL:OrdSetFocus( "cNumTil" )

   cExpHead       := 'dFecTik >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecTik <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead       += ' .and. ( cTipTik == "1" .or. cTipTik == "4" )'
   cExpHead       += ' .and. cCliTik >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCliTik <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   cExpHead       += ' .and. cSerTik >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )   + '" .and. cSerTik <= "' + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oTikCliT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oTikCliT:cFile ), ::oTikCliT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText := "Procesando tikets"

   ::oMtrInf:SetTotal( ::oTikCliT:OrdKeyCount() )



   cExpLine       := 'cCbaTil >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cCbaTil <= "' + ::oGrupoArticulo:Cargo:Hasta + '" .or. '
   cExpLine       += 'cComTil >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cComTil <= "' + ::oGrupoArticulo:Cargo:Hasta + ' )"'

   ::oTikCliL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oTikCliL:cFile ), ::oTikCliL:OrdKey(), ( cExpLine ), , , , , , , , .T. )



   ::oTikCliT:GoTop()

   while !::lBreak .AND. !::oTikCliT:Eof()

      if lChkSer( ::oTikCliT:cSerTik, ::aSer ) .AND. ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )

         while ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik == ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil .AND. !::oTikCliL:Eof()

            if !Empty( ::oTikCliL:cCbaTil ) .AND. !( ::oTikCliL:lControl )

                  ::oDbf:Blank()
                  ::oDbf:cCodArt    := ::oTikCliL:cCbaTil
                  ::oDbf:cNomArt    := ::oTikCliL:cNomTil
                  ::oDbf:cCodCli    := ::oTikCliT:cCliTik
                  ::oDbf:cNomCli    := ::oTikCliT:cNomTik
                  ::oDbf:cPobCli    := ::oTikCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oTikCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oTikCliT:cPosCli

                  ::oDbf:cCodFam    := ::oTikCliL:cCodFam
                  ::oDbf:cCodTip    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oTikCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oTikCliT:cFpgTik
                  ::oDbf:cCodRut    := ::oTikCliT:cCodRut
                  ::oDbf:cCodAge    := ::oTikCliT:cCodAge
                  ::oDbf:cCodTrn    := ""
                  ::oDbf:cCodUsr    := ::oTikCliT:cCcjTik

                  if ::oTikCliT:cTipTik == "4"
                     ::oDbf:nUniArt := - ::oTikCliL:nUntTil * if( ::lUnidadesNegativo, -1, 1 )
                  else
                     ::oDbf:nUniArt := ::oTikCliL:nUntTil   * if( ::lUnidadesNegativo, -1, 1 )
                  end

                  ::oDbf:nBrtArt    := nBrtLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 1 )
                  ::oDbf:nImpArt    := nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 1 )
                  ::oDbf:nIvaArt    := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 1 )
                  ::oDbf:nTotArt    := nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 1 )
                  ::oDbf:nTotArt    += nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 1 )
                  ::oDbf:nCosArt    := nCosLTpv( ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 1 )

                  ::oDbf:cCodPr1    := ::oTikCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oTikCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oTikCliL:cValPr1
                  ::oDbf:cValPr2    := ::oTikCliL:cValPr2

                  ::oDbf:cLote      := ::oTikCliL:cLote

                  ::oDbf:cClsDoc    := "12"
                  ::oDbf:cTipDoc    := "Ticket"
                  ::oDbf:cSerDoc    := ::oTikCliT:cSerTik
                  ::oDbf:cNumDoc    := ::oTikCliT:cNumTik
                  ::oDbf:cSufDoc    := ::oTikCliT:cSufTik
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oTikCliT:dFecTik )
                  ::oDbf:nMesDoc    := Month( ::oTikCliT:dFecTik )
                  ::oDbf:dFecDoc    := ::oTikCliT:dFecTik
                  ::oDbf:cHorDoc    := SubStr( ::oTikCliT:cHorTik, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oTikCliT:cHorTik, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

            end

            if !Empty( ::oTikCliL:cComTil ) .AND. !( ::oTikCliL:lControl )

                  ::oDbf:Blank()
                  ::oDbf:cCodArt    := ::oTikCliL:cComTil
                  ::oDbf:cNomArt    := ::oTikCliL:cNcmTil

                  ::oDbf:cCodCli    := ::oTikCliT:cCliTik
                  ::oDbf:cNomCli    := ::oTikCliT:cNomCli
                  ::oDbf:cPobCli    := ::oTikCliT:cPobCli
                  ::oDbf:cPrvCli    := ::oTikCliT:cPrvCli
                  ::oDbf:cPosCli    := ::oTikCliT:cPosCli

                  ::oDbf:cCodFam    := ::oTikCliL:cCodFam
                  ::oDbf:cCodTip    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodGrp    := RetFld( ::oTikCliL:cCbaTil, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oTikCliL:cAlmLin
                  ::oDbf:cCodPago   := ::oTikCliT:cCodPago
                  ::oDbf:cCodRut    := ::oTikCliT:cCodRut
                  ::oDbf:cCodAge    := ::oTikCliT:cCodAge
                  ::oDbf:cCodTrn    := ""
                  ::oDbf:cCodUsr    := ::oTikCliT:cCcjTik

                  if ::oTikCliT:cTipTik == "4"
                     ::oDbf:nUniArt := - ::oTikCliL:nUntTil * if( ::lUnidadesNegativo, -1, 1 )
                  else
                     ::oDbf:nUniArt := ::oTikCliL:nUntTil   * if( ::lUnidadesNegativo, -1, 1 )
                  end

                  ::oDbf:nBrtArt    := nBrtLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 2 )
                  ::oDbf:nImpArt    := nImpUTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nValDiv, nil, 2 )
                  ::oDbf:nIvaArt    := nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 2 )
                  ::oDbf:nTotArt    := nImpLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, nil, 2 )
                  ::oDbf:nTotArt    += nIvaLTpv( ::oTikCliT, ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 2 )
                  ::oDbf:nCosArt    := nCosLTpv( ::oTikCliL, ::nDecOut, ::nDerOut, ::nValDiv, 2 )

                  ::oDbf:cCodPr1    := ::oTikCliL:cCodPr1
                  ::oDbf:cCodPr2    := ::oTikCliL:cCodPr2
                  ::oDbf:cValPr1    := ::oTikCliL:cValPr1
                  ::oDbf:cValPr2    := ::oTikCliL:cValPr2

                  ::oDbf:cClsDoc    := "12"
                  ::oDbf:cTipDoc    := "Ticket clientes"
                  ::oDbf:cSerDoc    := ::oTikCliT:cSerTik
                  ::oDbf:cNumDoc    := ::oTikCliT:cNumTik
                  ::oDbf:cSufDoc    := ::oTikCliT:cSufTik
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oTikCliT:dFecTik )
                  ::oDbf:nMesDoc    := Month( ::oTikCliT:dFecTik )
                  ::oDbf:dFecDoc    := ::oTikCliT:dFecTik
                  ::oDbf:cHorDoc    := SubStr( ::oTikCliT:cHorTik, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oTikCliT:cHorTik, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

            end

            ::oTikCliL:Skip()

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:Set( ::oTikCliT:OrdKeyCount() )

   ::oTikCliT:IdxDelete( cCurUsr(), GetFileNoExt( ::oTikCliT:cFile ) )
   ::oTikCliL:IdxDelete( cCurUsr(), GetFileNoExt( ::oTikCliL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddArticulo() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   ::oMtrInf:SetTotal( ::oDbfArt:OrdKeyCount() )

   ::oMtrInf:cText         := "Procesando artículos"





   ::oMtrInf:AutoInc( ::oDbfArt:LastRec() )

   ::oDbfArt:GoTop()
   while !::oDbfArt:Eof() .AND. !::lBreak

      ::oDbf:Blank()

      ::oDbf:cCodArt  := ::oDbfArt:Codigo
      ::oDbf:cNomArt  := ::oDbfArt:Nombre
      ::oDbf:cCodFam  := ::oDbfArt:Familia
      ::oDbf:TipoIva  := ::oDbfArt:TipoIva
      ::oDbf:cCodTip  := ::oDbfArt:cCodTip
      ::oDbf:cCodCate := ::oDbfArt:cCodCate
      ::oDbf:cCodTemp := ::oDbfArt:cCodTemp
      ::oDbf:cCodFab  := ::oDbfArt:cCodFab
      ::oDbf:cCodGrp  := ::oDbfArt:GrpVent
      ::oDbf:cCodCli  := ""
      ::oDbf:cNomCli  := ""
      ::oDbf:cPobCli  := ""
      ::oDbf:cPrvCli  := ""
      ::oDbf:cPosCli  := ""
      ::oDbf:cCodAlm  := ""
      ::oDbf:cCodPago := ""
      ::oDbf:cCodRut  := ""
      ::oDbf:cCodAge  := ""
      ::oDbf:cCodTrn  := ""
      ::oDbf:cCodUsr  := ""





      if ::lValidRegister()
         ::oDbf:Insert()
      else
         ::oDbf:Cancel()
      end

      ::oDbfArt:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyCount() )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddPedidoProveedor() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oPedPrvT:OrdSetFocus( "dFecPed" )
   ::oPedPrvL:OrdSetFocus( "nNumPed" )

   cExpHead          := 'dFecPed >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecPed <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodPrv >= "' + Rtrim( ::oGrupoProveedor:Cargo:Desde )    + '" .and. cCodPrv <= "'   + Rtrim( ::oGrupoProveedor:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerPed >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )        + '" .and. cSerPed <= "'   + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oPedPrvT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPedPrvT:cFile ), ::oPedPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando Pedaranes"
   ::oMtrInf:SetTotal( ::oPedPrvT:OrdKeyCount() )





   cExpLine          := "!lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oPedPrvL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPedPrvL:cFile ), ::oPedPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oPedPrvT:GoTop()

   while !::lBreak .AND. !::oPedPrvT:Eof()

      if lChkSer( ::oPedPrvT:cSerPed, ::aSer )

         if ::oPedPrvL:Seek( ::oPedPrvT:cSerPed + Str( ::oPedPrvT:nNumPed ) + ::oPedPrvT:cSufPed )

            while !::lBreak .AND. ( ::oPedPrvT:cSerPed + Str( ::oPedPrvT:nNumPed ) + ::oPedPrvT:cSufPed == ::oPedPrvL:cSerPed + Str( ::oPedPrvL:nNumPed ) + ::oPedPrvL:cSufPed ) .AND. !::oPedPrvL:Eof()


               if !( ::lExcCero  .AND. nTotNPedPrv( ::oPedPrvL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                     ::oDbf:Blank()

                     ::oDbf:cCodArt    := ::oPedPrvL:cRef
                     ::oDbf:cNomArt    := ::oPedPrvL:cDetalle

                     ::oDbf:cCodFam    := ::oPedPrvL:cCodFam
                     ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oPedPrvL:nIva )
                     ::oDbf:cCodTip    := RetFld( ::oPedPrvL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                     ::oDbf:cCodCate   := RetFld( ::oPedPrvL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                     ::oDbf:cCodTemp   := RetFld( ::oPedPrvL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                     ::oDbf:cCodFab    := RetFld( ::oPedPrvL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                     ::oDbf:cCodCli    := ::oPedPrvT:cCodPrv
                     ::oDbf:cNomCli    := ::oPedPrvT:cNomPrv
                     ::oDbf:cPobCli    := ::oPedPrvT:cPobPrv
                     ::oDbf:cPrvCli    := ::oPedPrvT:cProPrv
                     ::oDbf:cPosCli    := ::oPedPrvT:cPosPrv
                     ::oDbf:cCodGrp    := RetFld( ::oPedPrvL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                     ::oDbf:cCodAlm    := ::oPedPrvL:cAlmLin
                     ::oDbf:cCodPago   := ::oPedPrvT:cCodPgo
                     ::oDbf:cCodRut    := ""
                     ::oDbf:cCodAge    := ""
                     ::oDbf:cCodTrn    := ""
                     ::oDbf:cCodUsr    := ::oPedPrvT:cCodUsr

                     ::oDbf:nUniArt    := nTotNPedPrv( ::oPedPrvL:cAlias )
                     ::oDbf:nBrtArt    := nBrtLPedPrv( ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nImpArt    := nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                     ::oDbf:nIvaArt    := nIvaLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nTotArt    := nImpLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                     ::oDbf:nTotArt    += nIvaLPedPrv( ::oPedPrvT:cAlias, ::oPedPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                     ::oDbf:nCosArt    := 0

                     ::oDbf:cCodPr1    := ::oPedPrvL:cCodPr1
                     ::oDbf:cCodPr2    := ::oPedPrvL:cCodPr2
                     ::oDbf:cValPr1    := ::oPedPrvL:cValPr1
                     ::oDbf:cValPr2    := ::oPedPrvL:cValPr2

                     ::oDbf:cClsDoc    := "01"
                     ::oDbf:cTipDoc    := "Pedido proveedor"
                     ::oDbf:cSerDoc    := ::oPedPrvT:cSerPed
                     ::oDbf:cNumDoc    := Str( ::oPedPrvT:nNumPed )
                     ::oDbf:cSufDoc    := ::oPedPrvT:cSufPed
                     ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                     ::oDbf:nAnoDoc    := Year( ::oPedPrvT:dFecPed )
                     ::oDbf:nMesDoc    := Month( ::oPedPrvT:dFecPed )
                     ::oDbf:dFecDoc    := ::oPedPrvT:dFecPed
                     ::oDbf:cHorDoc    := SubStr( ::oPedPrvT:cTimCre, 1, 2 )
                     ::oDbf:cMinDoc    := SubStr( ::oPedPrvT:cTimCre, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oPedPrvL:Skip()

            end

         end

      end

      ::oPedPrvT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oPedPrvT:IdxDelete( cCurUsr(), GetFileNoExt( ::oPedPrvT:cFile ) )
   ::oPedPrvL:IdxDelete( cCurUsr(), GetFileNoExt( ::oPedPrvL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddAlbaranProveedor( lFacturados) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   IIF( lFacturados == nil, lFacturados := .F., ) ;

   ::oAlbPrvT:OrdSetFocus( "dFecAlb" )
   ::oAlbPrvL:OrdSetFocus( "nNumAlb" )

   if lFacturados
      cExpHead          := '!lFacturado .and. dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   else
      cExpHead          := 'dFecAlb >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecAlb <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   end

   cExpHead             += ' .and. cCodPrv >= "' + Rtrim( ::oGrupoProveedor:Cargo:Desde )    + '" .and. cCodPrv <= "'   + Rtrim( ::oGrupoProveedor:Cargo:Hasta ) + '"'
   cExpHead             += ' .and. cSerAlb >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )        + '" .and. cSerAlb <= "'   + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oAlbPrvT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oAlbPrvT:cFile ), ::oAlbPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando albaranes"
   ::oMtrInf:SetTotal( ::oAlbPrvT:OrdKeyCount() )





   cExpLine          := "!lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oAlbPrvL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oAlbPrvL:cFile ), ::oAlbPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oAlbPrvT:GoTop()

   while !::lBreak .AND. !::oAlbPrvT:Eof()

      if lChkSer( ::oAlbPrvT:cSerAlb, ::aSer )

         if ::oAlbPrvL:Seek( ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb )

            while !::lBreak .AND. ( ::oAlbPrvT:cSerAlb + Str( ::oAlbPrvT:nNumAlb ) + ::oAlbPrvT:cSufAlb == ::oAlbPrvL:cSerAlb + Str( ::oAlbPrvL:nNumAlb ) + ::oAlbPrvL:cSufAlb ) .AND. !::oAlbPrvL:Eof()


               if !( ::lExcCero  .AND. nTotNAlbPrv( ::oAlbPrvL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oAlbPrvL:cRef
                  ::oDbf:cNomArt    := ::oAlbPrvL:cDetalle

                  ::oDbf:cCodFam    := ::oAlbPrvL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oAlbPrvL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oAlbPrvL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oAlbPrvL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oAlbPrvL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oAlbPrvL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodCli    := ::oAlbPrvT:cCodPrv
                  ::oDbf:cNomCli    := ::oAlbPrvT:cNomPrv
                  ::oDbf:cPobCli    := ::oAlbPrvT:cPobPrv
                  ::oDbf:cPrvCli    := ::oAlbPrvT:cProPrv
                  ::oDbf:cPosCli    := ::oAlbPrvT:cPosPrv
                  ::oDbf:cCodGrp    := RetFld( ::oAlbPrvL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oAlbPrvL:cAlmLin
                  ::oDbf:cCodPago   := ::oAlbPrvT:cCodPgo
                  ::oDbf:cCodRut    := ""
                  ::oDbf:cCodAge    := ""
                  ::oDbf:cCodTrn    := ""
                  ::oDbf:cCodUsr    := ::oAlbPrvT:cCodUsr

                  ::oDbf:nUniArt    := nTotNAlbPrv( ::oAlbPrvL:cAlias )
                  ::oDbf:nBrtArt    := nBrtLAlbPrv( ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLAlbPrv( ::oAlbPrvT:cAlias, ::oAlbPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := 0

                  ::oDbf:cCodPr1    := ::oAlbPrvL:cCodPr1
                  ::oDbf:cCodPr2    := ::oAlbPrvL:cCodPr2
                  ::oDbf:cValPr1    := ::oAlbPrvL:cValPr1
                  ::oDbf:cValPr2    := ::oAlbPrvL:cValPr2

                  ::oDbf:cLote      := ::oAlbPrvL:cLote
                  ::oDbf:dFecCad    := ::oAlbPrvL:dFecCad

                  ::oDbf:cClsDoc    := "02"
                  ::oDbf:cTipDoc    := "Albaran proveedores"
                  ::oDbf:cSerDoc    := ::oAlbPrvT:cSerAlb
                  ::oDbf:cNumDoc    := Str( ::oAlbPrvT:nNumAlb )
                  ::oDbf:cSufDoc    := ::oAlbPrvT:cSufAlb
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oAlbPrvT:dFecAlb )
                  ::oDbf:nMesDoc    := Month( ::oAlbPrvT:dFecAlb )
                  ::oDbf:dFecDoc    := ::oAlbPrvT:dFecAlb
                  ::oDbf:cHorDoc    := SubStr( ::oAlbPrvT:cTimChg, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oAlbPrvT:cTimChg, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oAlbPrvL:Skip()

            end

         end

      end

      ::oAlbPrvT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbPrvT:IdxDelete( cCurUsr(), GetFileNoExt( ::oAlbPrvT:cFile ) )
   ::oAlbPrvL:IdxDelete( cCurUsr(), GetFileNoExt( ::oAlbPrvL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddFacturaProveedor( cCodigoArticulo) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oFacPrvT:OrdSetFocus( "dFecFac" )
   ::oFacPrvL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'
   cExpHead          += ' .and. cCodPrv >= "' + Rtrim( ::oGrupoProveedor:Cargo:Desde )   + '" .and. cCodPrv <= "'   + Rtrim( ::oGrupoProveedor:Cargo:Hasta ) + '"'
   cExpHead          += ' .and. cSerFac >= "' + Rtrim( ::oGrupoSerie:Cargo:Desde )     + '" .and. cSerFac <= "'   + Rtrim( ::oGrupoSerie:Cargo:Hasta ) + '"'







   ::oFacPrvT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacPrvT:cFile ), ::oFacPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando facturas"
   ::oMtrInf:SetTotal( ::oFacPrvT:OrdKeyCount() )





   cExpLine          := "!lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oFacPrvL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacPrvL:cFile ), ::oFacPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oFacPrvT:GoTop()

   while !::lBreak .AND. !::oFacPrvT:Eof()

      if lChkSer( ::oFacPrvT:cSerFac, ::aSer )

         if ::oFacPrvL:Seek( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac )

            while !::lBreak .AND. ( ::oFacPrvT:cSerFac + Str( ::oFacPrvT:nNumFac ) + ::oFacPrvT:cSufFac == ::oFacPrvL:cSerFac + Str( ::oFacPrvL:nNumFac ) + ::oFacPrvL:cSufFac )


               if !( ::lExcCero  .AND. nTotNFacPrv( ::oFacPrvL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oFacPrvL:cRef
                  ::oDbf:cNomArt    := ::oFacPrvL:cDetalle

                  ::oDbf:cCodFam    := ::oFacPrvL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oFacPrvL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oFacPrvL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oFacPrvL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oFacPrvL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oFacPrvL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodCli    := ::oFacPrvT:cCodPrv
                  ::oDbf:cNomCli    := ::oFacPrvT:cNomPrv
                  ::oDbf:cPobCli    := ::oFacPrvT:cPobPrv
                  ::oDbf:cPrvCli    := ::oFacPrvT:cProvProv
                  ::oDbf:cPosCli    := ::oFacPrvT:cPosPrv
                  ::oDbf:cCodGrp    := RetFld( ::oFacPrvL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oFacPrvL:cAlmLin
                  ::oDbf:cCodPago   := ::oFacPrvT:cCodPago
                  ::oDbf:cCodRut    := ""
                  ::oDbf:cCodAge    := ::oFacPrvT:cCodAge
                  ::oDbf:cCodTrn    := ""
                  ::oDbf:cCodUsr    := ::oFacPrvT:cCodUsr

                  ::oDbf:nUniArt    := nTotNFacPrv( ::oFacPrvL:cAlias )
                  ::oDbf:nBrtArt    := nBrtLFacPrv( ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLFacPrv( ::oFacPrvT:cAlias, ::oFacPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := 0

                  ::oDbf:cCodPr1    := ::oFacPrvL:cCodPr1
                  ::oDbf:cCodPr2    := ::oFacPrvL:cCodPr2
                  ::oDbf:cValPr1    := ::oFacPrvL:cValPr1
                  ::oDbf:cValPr2    := ::oFacPrvL:cValPr2

                  ::oDbf:cLote      := ::oFacPrvL:cLote
                  ::oDbf:dFecCad    := ::oFacPrvL:dFecCad

                  ::oDbf:cClsDoc    := "03"
                  ::oDbf:cTipDoc    := "Factura proveedores"
                  ::oDbf:cSerDoc    := ::oFacPrvT:cSerFac
                  ::oDbf:cNumDoc    := Str( ::oFacPrvT:nNumFac )
                  ::oDbf:cSufDoc    := ::oFacPrvT:cSufFac
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oFacPrvT:dFecFac )
                  ::oDbf:nMesDoc    := Month( ::oFacPrvT:dFecFac )
                  ::oDbf:dFecDoc    := ::oFacPrvT:dFecFac
                  ::oDbf:cHorDoc    := SubStr( ::oFacPrvT:cTimChg, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oFacPrvT:cTimChg, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oFacPrvL:Skip()

            end

         end

      end

      ::oFacPrvT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacPrvT:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacPrvT:cFile ) )
   ::oFacPrvL:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacPrvL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_AddRectificativaProveedor( cCodigoArticulo) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local cExpHead
   local cExpLine

   ::oRctPrvT:OrdSetFocus( "dFecFac" )
   ::oRctPrvL:OrdSetFocus( "nNumFac" )

   cExpHead          := 'dFecFac >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFac <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   ::oRctPrvT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oRctPrvT:cFile ), ::oRctPrvT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando rectificativas"
   ::oMtrInf:SetTotal( ::oRctPrvT:OrdKeyCount() )





   cExpLine          := "!lControl"

   if !::lAllArt
      cExpLine       += ' .and. cRef >= "' + ::oGrupoArticulo:Cargo:Desde + '" .and. cRef <= "' + ::oGrupoArticulo:Cargo:Hasta + '"'
   end

   ::oRctPrvL:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oRctPrvL:cFile ), ::oRctPrvL:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oRctPrvT:GoTop()

   while !::lBreak .AND. !::oRctPrvT:Eof()

      if lChkSer( ::oRctPrvT:cSerFac, ::aSer )

         if ::oRctPrvL:Seek( ::oRctPrvT:cSerFac + Str( ::oRctPrvT:nNumFac ) + ::oRctPrvT:cSufFac )

            while !::lBreak .AND. ( ::oRctPrvT:cSerFac + Str( ::oRctPrvT:nNumFac ) + ::oRctPrvT:cSufFac == ::oRctPrvL:cSerFac + Str( ::oRctPrvL:nNumFac ) + ::oRctPrvL:cSufFac )


               if !( ::lExcCero  .AND. nTotNRctPrv( ::oRctPrvL:cAlias ) == 0 )  .AND. !( ::lExcImp   .AND. nImpLRctPrv( ::oRctPrvT:cAlias, ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv ) == 0 )

                  ::oDbf:Blank()

                  ::oDbf:cCodArt    := ::oRctPrvL:cRef
                  ::oDbf:cNomArt    := ::oRctPrvL:cDetalle

                  ::oDbf:cCodFam    := ::oRctPrvL:cCodFam
                  ::oDbf:TipoIva    := cCodigoIva( ::oDbfIva:cAlias, ::oRctPrvL:nIva )
                  ::oDbf:cCodTip    := RetFld( ::oRctPrvL:cRef, ::oDbfArt:cAlias, "cCodTip", "Codigo" )
                  ::oDbf:cCodCate   := RetFld( ::oRctPrvL:cRef, ::oDbfArt:cAlias, "cCodCate", "Codigo" )
                  ::oDbf:cCodTemp   := RetFld( ::oRctPrvL:cRef, ::oDbfArt:cAlias, "cCodTemp", "Codigo" )
                  ::oDbf:cCodFab    := RetFld( ::oRctPrvL:cRef, ::oDbfArt:cAlias, "cCodFab", "Codigo" )
                  ::oDbf:cCodCli    := ::oRctPrvT:cCodPrv
                  ::oDbf:cNomCli    := ::oRctPrvT:cNomPrv
                  ::oDbf:cPobCli    := ::oRctPrvT:cPobPrv
                  ::oDbf:cPrvCli    := ::oRctPrvT:cProvProv
                  ::oDbf:cPosCli    := ::oRctPrvT:cPosPrv
                  ::oDbf:cCodGrp    := RetFld( ::oRctPrvL:cRef, ::oDbfArt:cAlias, "GrpVent", "Codigo" )
                  ::oDbf:cCodAlm    := ::oRctPrvL:cAlmLin
                  ::oDbf:cCodPago   := ::oRctPrvT:cCodPago
                  ::oDbf:cCodRut    := ""
                  ::oDbf:cCodAge    := ::oRctPrvT:cCodAge
                  ::oDbf:cCodTrn    := ""
                  ::oDbf:cCodUsr    := ::oRctPrvT:cCodUsr

                  ::oDbf:nUniArt    := nTotNRctPrv( ::oRctPrvL:cAlias )
                  ::oDbf:nBrtArt    := nBrtLRctPrv( ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nImpArt    := nImpLRctPrv( ::oRctPrvT:cAlias, ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T. )
                  ::oDbf:nIvaArt    := nIvaLRctPrv( ::oRctPrvT:cAlias, ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nTotArt    := nImpLRctPrv( ::oRctPrvT:cAlias, ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
                  ::oDbf:nTotArt    += nIvaLRctPrv( ::oRctPrvT:cAlias, ::oRctPrvL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
                  ::oDbf:nCosArt    := 0

                  ::oDbf:cCodPr1    := ::oRctPrvL:cCodPr1
                  ::oDbf:cCodPr2    := ::oRctPrvL:cCodPr2
                  ::oDbf:cValPr1    := ::oRctPrvL:cValPr1
                  ::oDbf:cValPr2    := ::oRctPrvL:cValPr2

                  ::oDbf:cLote      := ::oRctPrvL:cLote
                  ::oDbf:dFecCad    := ::oRctPrvL:dFecCad

                  ::oDbf:cClsDoc    := "04"
                  ::oDbf:cTipDoc    := "Rectificativa proveedores"
                  ::oDbf:cSerDoc    := ::oRctPrvT:cSerFac
                  ::oDbf:cNumDoc    := Str( ::oRctPrvT:nNumFac )
                  ::oDbf:cSufDoc    := ::oRctPrvT:cSufFac
                  ::oDbf:cIdeDoc    := Upper( ::oDbf:cTipDoc ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc

                  ::oDbf:nAnoDoc    := Year( ::oRctPrvT:dFecFac )
                  ::oDbf:nMesDoc    := Month( ::oRctPrvT:dFecFac )
                  ::oDbf:dFecDoc    := ::oRctPrvT:dFecFac
                  ::oDbf:cHorDoc    := SubStr( ::oRctPrvT:cTimChg, 1, 2 )
                  ::oDbf:cMinDoc    := SubStr( ::oRctPrvT:cTimChg, 3, 2 )





                  if ::lValidRegister()
                     ::oDbf:Insert()
                  else
                     ::oDbf:Cancel()
                  end

               end

               ::oRctPrvL:Skip()

            end

         end

      end

      ::oRctPrvT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oRctPrvT:IdxDelete( cCurUsr(), GetFileNoExt( ::oRctPrvT:cFile ) )
   ::oRctPrvL:IdxDelete( cCurUsr(), GetFileNoExt( ::oRctPrvL:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_StartDialog() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos





   ::CreateTreeImageList()

   ::BuildTree( ::oTreeReporting, .T. )

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_BuildTree( oTree, lSubNode) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   local oTreeVentas
   local oTreeCompras
   local oTreeExistencias

   IIF( lSubNode == nil, lSubNode := .T., ) ;

   oTree:Select( oTree:Add( "Listado", 0, "Listado" ) )

   oTreeVentas             := oTree:Add( "Ventas", 11  )
   oTreeVentas:Add( "Informe de presupuestos",  5 , "Informe de presupuestos" )
   oTreeVentas:Add( "Informe de pedidos",       6 , "Informe de pedidos" )
   oTreeVentas:Add( "Informe de albaranes",     7 , "Informe de albaranes" )
   oTreeVentas:Add( "Informe de facturas",      8 , "Informe de facturas" )
   oTreeVentas:Add( "Informe de tickets",       10, "Informe de tickets" )
   oTreeVentas:Add( "Informe de ventas",        11, "Informe de ventas" )

   oTreeCompras            := oTree:Add( "Compras", 12  )
   oTreeCompras:Add( "Informe de pedidos de proveedor",                 2 , "Informe de pedidos de proveedor" )
   oTreeCompras:Add( "Informe de albaranes de proveedor",               3 , "Informe de albaranes de proveedor" )
   oTreeCompras:Add( "Informe de facturas de proveedor",                4 , "Informe de facturas de proveedor" )
   oTreeCompras:Add( "Informe de facturas rectificativas de proveedor", 4 , "Informe de facturas rectificativas de proveedor" )
   oTreeCompras:Add( "Informe de compras",                              12, "Informe de compras" )

   oTreeExistencias        := oTree:Add( "Existencias", 16  )
   oTreeExistencias:Add( "Informe de compras y ventas",                 16, "Informe de compras y ventas" )

   oTreeVentas:Expand()
   oTreeCompras:Expand()
   oTreeExistencias:Expand()

RETURN ( Self )



UTILITY STATIC function TFastVentasArticulos_DataReport( oFr) ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos





   ::oFastReport:SetWorkArea(       "Informe", ::oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Informe", cObjectsToReport( ::oDbf ) )





   ::oFastReport:SetWorkArea(       "Empresa", ::oDbfEmp:nArea )
   ::oFastReport:SetFieldAliases(   "Empresa", cItemsToReport( aItmEmp() ) )

   ::oFastReport:SetWorkArea(       "Artículos.Informe", ::oDbfArt:nArea )
   ::oFastReport:SetFieldAliases(   "Artículos.Informe", cItemsToReport( aItmArt() ) )

   ::oFastReport:SetWorkArea(       "Imagenes", ::oArtImg:nArea )
   ::oFastReport:SetFieldAliases(   "Imagenes", cItemsToReport( aItmImg() ) )

   ::oFastReport:SetWorkArea(       "Códigos de barras", ::oArtCod:nArea )
   ::oFastReport:SetFieldAliases(   "Códigos de barras", cItemsToReport( aItmBar() ) )

   ::oFastReport:SetWorkArea(       "Escandallos", ::oArtKit:nArea )
   ::oFastReport:SetFieldAliases(   "Escandallos", cItemsToReport( aItmKit() ) )

   ::oFastReport:SetWorkArea(       "Artículos.Escandallos", ::oDbfArt:nArea )
   ::oFastReport:SetFieldAliases(   "Artículos.Escandallos", cItemsToReport( aItmArt() ) )

   ::oFastReport:SetWorkArea(       "Familias", ::oDbfFam:nArea )
   ::oFastReport:SetFieldAliases(   "Familias", cItemsToReport( aItmFam() ) )

   ::oFastReport:SetWorkArea(       "Tipo artículos", ::oTipArt:Select() )
   ::oFastReport:SetFieldAliases(   "Tipo artículos", cObjectsToReport( ::oTipArt:oDbf ) )

   ::oFastReport:SetWorkArea(       "Categorias", ::oDbfCat:nArea )
   ::oFastReport:SetFieldAliases(   "Categorias", cItemsToReport( aItmCategoria() ) )

   ::oFastReport:SetWorkArea(       "Temporadas", ::oDbfTmp:nArea )
   ::oFastReport:SetFieldAliases(   "Temporadas", cItemsToReport( aItmTemporada() ) )

   ::oFastReport:SetWorkArea(       "Fabricantes", ::oDbfFab:Select() )
   ::oFastReport:SetFieldAliases(   "Fabricantes", cObjectsToReport( ::oDbfFab:oDbf ) )

   ::oFastReport:SetWorkArea(       "Tipos de " + cImp(), ::oDbfIva:nArea )
   ::oFastReport:SetFieldAliases(   "Tipos de " + cImp(), cItemsToReport( aItmTIva() ) )

   ::oFastReport:SetWorkArea(       "Clientes", ::oDbfCli:nArea )
   ::oFastReport:SetFieldAliases(   "Clientes", cItemsToReport( aItmCli() ) )





   ::oPreCliT:OrdSetFocus( "iNumPre" )

   ::oFastReport:SetWorkArea(       "Presupuestos de clientes", ::oPreCliT:nArea )
   ::oFastReport:SetFieldAliases(   "Presupuestos de clientes", cItemsToReport( aItmPreCli() ) )

   ::oPreCliL:OrdSetFocus( "iNumPre" )

   ::oFastReport:SetWorkArea(       "Lineas presupuestos de clientes", ::oPreCliL:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas presupuestos de clientes", cItemsToReport( aColPreCli() ) )





   ::oPedCliT:OrdSetFocus( "iNumPed" )

   ::oFastReport:SetWorkArea(       "Pedidos de clientes", ::oPedCliT:nArea )
   ::oFastReport:SetFieldAliases(   "Pedidos de clientes", cItemsToReport( aItmPedCli() ) )

   ::oPedCliL:OrdSetFocus( "iNumPed" )

   ::oFastReport:SetWorkArea(       "Lineas pedidos de clientes", ::oPedCliL:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas pedidos de clientes", cItemsToReport( aColPedCli() ) )





   ::oAlbCliT:OrdSetFocus( "iNumAlb" )

   ::oFastReport:SetWorkArea(       "Albaranes de clientes", ::oAlbCliT:nArea )
   ::oFastReport:SetFieldAliases(   "Albaranes de clientes", cItemsToReport( aItmAlbCli() ) )

   ::oAlbCliL:OrdSetFocus( "iNumAlb" )

   ::oFastReport:SetWorkArea(       "Lineas albaranes de clientes", ::oAlbCliL:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas albaranes de clientes", cItemsToReport( aColAlbCli() ) )





   ::oFacCliT:OrdSetFocus( "iNumFac" )

   ::oFastReport:SetWorkArea(       "Facturas de clientes", ::oFacCliT:nArea )
   ::oFastReport:SetFieldAliases(   "Facturas de clientes", cItemsToReport( aItmFacCli() ) )

   ::oFacCliL:OrdSetFocus( "iNumFac" )

   ::oFastReport:SetWorkArea(       "Lineas facturas de clientes", ::oFacCliL:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas facturas de clientes", cItemsToReport( aColFacCli() ) )





   ::oFacRecT:OrdSetFocus( "iNumFac" )

   ::oFastReport:SetWorkArea(       "Facturas rectificativas de clientes", ::oFacRecT:nArea )
   ::oFastReport:SetFieldAliases(   "Facturas rectificativas de clientes", cItemsToReport( aItmFacRec() ) )

   ::oFacRecL:OrdSetFocus( "iNumFac" )

   ::oFastReport:SetWorkArea(       "Lineas facturas rectificativas de clientes", ::oFacRecL:nArea )
   ::oFastReport:SetFieldAliases(   "Lineas facturas rectificativas de clientes", cItemsToReport( aColFacRec() ) )





   ::oFastReport:SetMasterDetail(   "Informe", "Artículos.Informe",                 {|| ::oDbf:cCodArt } )
   ::oFastReport:SetMasterDetail(   "Informe", "Imagenes",                          {|| ::oDbf:cCodArt } )
   ::oFastReport:SetMasterDetail(   "Informe", "Escandallos",                       {|| ::oDbf:cCodArt } )
   ::oFastReport:SetMasterDetail(   "Informe", "Códigos de barras",                 {|| ::oDbf:cCodArt } )

   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Familias",                {|| ::oDbfArt:Familia } )
   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Tipo artículos",          {|| ::oDbfArt:cCodTip } )
   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Categorias",              {|| ::oDbfArt:cCodCate } )
   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Temporadas",              {|| ::oDbfArt:cCodTemp } )
   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Fabricantes",             {|| ::oDbfArt:cCodFab } )
   ::oFastReport:SetMasterDetail(   "Artículos.Informe", "Tipos de " + cImp(),      {|| ::oDbfArt:TipoIva } )

   ::oFastReport:SetMasterDetail(   "Escandallos", "Artículos.Escandallos",         {|| ::oArtKit:cRefKit } )

   ::oFastReport:SetMasterDetail(   "Informe", "Clientes",                          {|| ::oDbf:cCodCli } )
   ::oFastReport:SetMasterDetail(   "Informe", "Empresa",                           {|| cCodEmp() } )

   ::oFastReport:SetMasterDetail(   "Informe", "Presupuestos de clientes",          {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe", "Lineas presupuestos de clientes",   {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )

   ::oFastReport:SetMasterDetail(   "Informe", "Pedidos de clientes",               {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe", "Lineas pedidos de clientes",        {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )

   ::oFastReport:SetMasterDetail(   "Informe", "Albaranes de clientes",             {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe", "Lineas albaranes de clientes",      {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )

   ::oFastReport:SetMasterDetail(   "Informe", "Facturas de clientes",              {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe", "Lineas facturas de clientes",       {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )

   ::oFastReport:SetMasterDetail(   "Informe", "Facturas rectificativas de clientes",        {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )
   ::oFastReport:SetMasterDetail(   "Informe", "Lineas facturas rectificativas de clientes", {|| Padr( Upper( ::oDbf:cTipDoc ), 30 ) + ::oDbf:cSerDoc + ::oDbf:cNumDoc + ::oDbf:cSufDoc } )





   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Familias" )
   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Tipo artículos" )
   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Categorias" )
   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Temporadas" )
   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Fabricantes" )
   ::oFastReport:SetResyncPair(     "Artículos.Informe", "Tipos de " + cImp() )

   ::oFastReport:SetResyncPair(     "Informe", "Artículos.Informe" )
   ::oFastReport:SetResyncPair(     "Informe", "Imagenes" )
   ::oFastReport:SetResyncPair(     "Informe", "Escandallos" )
   ::oFastReport:SetresyncPair(     "Informe", "Códigos de barras" )

   ::oFastReport:SetResyncPair(     "Escandallos", "Artículos.Escandallos" )

   ::oFastReport:SetResyncPair(     "Informe", "Clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Empresa" )

   ::oFastReport:SetResyncPair(     "Informe", "Presupuestos de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Lineas presupuestos de clientes" )

   ::oFastReport:SetResyncPair(     "Informe", "Pedidos de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Lineas pedidos de clientes" )

   ::oFastReport:SetResyncPair(     "Informe", "Albaranes de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Lineas albaranes de clientes" )

   ::oFastReport:SetResyncPair(     "Informe", "Facturas de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Lineas facturas de clientes" )

   ::oFastReport:SetResyncPair(     "Informe", "Facturas rectificativas de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Lineas facturas rectificativas de clientes" )

Return ( Self )



UTILITY STATIC function TFastVentasArticulos_AddVariable() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

Return ( ::TFastReportInfGen:AddVariable() )



UTILITY STATIC function TFastVentasArticulos_TreeReportingChanged() ; local Self AS CLASS TFastVentasArticulos := QSelf() AS CLASS TFastVentasArticulos

   if ::oTreeReporting:GetSelText() == "Listado"
      ::lHideFecha()
   else
      ::lShowFecha()
   end

Return ( Self )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TInfLPrv.prg"
_HB_CLASS TInfLPrv ; UTILITY FUNCTION TInfLPrv(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfLPrv" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfPrv} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfPrv" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfLPrv_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfLPrv_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfLPrv_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfLPrv_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfLPrv_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfLPrv_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfLPrv_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfLPrv_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfLPrv_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfLPrv_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfLPrv ;



UTILITY STATIC function TInfLPrv_Create() ; local Self AS CLASS TInfLPrv := QSelf() AS CLASS TInfLPrv

   ::AddField( "cTypDoc",   "C", 25, 0, {|| "" },         "Tip. Doc.",     .T., "Tipo de documento",     25, .F. )
   ::AddField( "dFecDoc",   "D",  8, 0, {|| "" },         "Fecha",         .T., "Fecha",                 12, .F. )
   ::AddField( "cNumDoc",   "C", 12, 0, {|| "" },         "Num. Doc",      .T., "Número de documento",   12, .F. )
   ::AddField( "cCodPrv",   "C", 25, 0, {|| "" },         "Cod.Prv.",      .F., "Código proveedor",      15, .F. )
   ::AddField( "cNomPrv",   "C", 50, 0, {|| "" },         "Nombre",        .F., "Nombre proveedor",      40, .F. )
   ::AddField( "cAlmDoc",   "C",  3, 0, {|| "" },         "Alm.",          .T., "Almacén",                5, .F. )
   ::AddField( "nImpDoc",   "N", 16, 6, {|| ::cPicImp },  "Importe",       .T., "Importe",               16, .T. )
   ::AddField( "cDivisa",   "C", 10, 0, {|| "" },         "Div.",          .F., "Divisa",                 5, .F. )

   ::AddTmpIndex ( "dFecDoc", "dFecDoc" )

RETURN ( Self )



UTILITY STATIC function TInfLPrv_OpenFiles() ; local Self AS CLASS TInfLPrv := QSelf() AS CLASS TInfLPrv

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfPrv := DbfServer( "PROVEE.DBF", ):NewOpen( "PROVEE.DBF",, ( cDriver() ),, ( cPatPrv() ), .F., .T., .F., .F. ) ; ::oDbfPrv:AddBag( "PROVEE.CDX" ) ; ::oDbfPrv:AddBag( ) ; ::oDbfPrv:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TInfLPrv_CloseFiles() ; local Self AS CLASS TInfLPrv := QSelf() AS CLASS TInfLPrv

   if !Empty( ::oDbfPrv ) .AND. ::oDbfPrv:Used()
      ::oDbfPrv:End()
   end

RETURN ( Self )



UTILITY STATIC function TInfLPrv_lResource( cFld) ; local Self AS CLASS TInfLPrv := QSelf() AS CLASS TInfLPrv

   if !::StdResource( "INF_CLIL" )
      return .F.
   end

   ::oBtnFilter:Disable()

   do case
      case  ::xOthers[2] == "Todos"
         ::dIniInf   := CtoD( "01/01/2000" )
         ::dFinInf   := CtoD( "31/12/2020" )
      case  Val( ::xOthers[2]) == Year( GetSysDate() )
         ::dIniInf   := CtoD( "01/01/" + Str( Year( GetSysDate() ) ) )
         ::dFinInf   := GetSysDate()
      otherwise
         ::dIniInf   := CtoD( "01/01/" + ::xOthers[2] )
         ::dFinInf   := CtoD( "31/12/" + ::xOthers[2] )
   end





   ::oMtrInf:SetTotal( ::xOthers[1]:Lastrec() )

RETURN .T.






UTILITY STATIC function TInfLPrv_lGenerate() ; local Self AS CLASS TInfLPrv := QSelf() AS CLASS TInfLPrv

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Proveedor : " + AllTrim( ::xOthers[1]:Cargo ) + " - " + RetProvee( ::xOthers[1]:Cargo, ::oDbfPrv:cAlias ) } }

   ::xOthers[1]:GoTop()

   while !::xOthers[1]:Eof()



      if ::xOthers[1]:dFecDoc >= ::dIniInf                                                               .AND. ::xOthers[1]:dFecDoc <= ::dFinInf                                                               .AND. lChkSer( left( ::xOthers[1]:cNumDoc, 1 ) , ::aSer )

         ::oDbf:Append()

         ::oDbf:cTypDoc  := cTextoDocument( ::xOthers[1]:nTypDoc )
         ::oDbf:dFecDoc  := ::xOthers[1]:dFecDoc
         ::oDbf:cNumDoc  := cMaskNumDoc( ::xOthers[1] )
         ::oDbf:cCodPrv  := ::xOthers[1]:cCodPrv
         ::oDbf:cNomPrv  := ::xOthers[1]:cNomPrv
         ::oDbf:cAlmDoc  := ::xOthers[1]:cAlmDoc
         ::oDbf:nImpDoc  := ::xOthers[1]:nImpDoc
         ::oDbf:cDivisa  := ::xOthers[1]:cDivisa

         ::oDbf:Save()

      end

      ::xOthers[1]:Skip()

      ::oMtrInf:AutoInc( ::xOthers[1]:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::xOthers[1]:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )

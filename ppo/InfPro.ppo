#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfPro.prg"
_HB_CLASS InfPro ; UTILITY FUNCTION InfPro(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfPro" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfPro} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfPro" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cProOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cProOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cProDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cProDes" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lAllPro} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lAllPro" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfPro_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfPro_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @InfPro_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @InfPro_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @InfPro_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @InfPro_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfPro_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfPro_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfPro_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfPro_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfPro ;



UTILITY STATIC function InfPro_Create() ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   ::AddField( "cCodPro",   "C",  5, 0, {|| "" },           "Cód. prm.",      .T., "Código de la promoción",   5, .F. )
   ::AddField( "cNomPro",   "C", 25, 0, {|| "" },           "Nombre",         .F., "Nombre de la promoción",  20, .F. )
   ::AddField( "cCodArt",   "C", 18, 0, {|| "" },           "Cod. art.",      .T., "Código del artículo",     15, .F. )
   ::AddField( "cNomArt",   "C",100, 0, {|| "" },           "Artículo",       .T., "Nombre del artículo",     50, .F. )
   ::AddField( "dIniPro",   "D",  8, 0, {|| "" },           "Inicio",         .T., "Fecha inicio promoción",  10, .F. )
   ::AddField( "dFinPro",   "D",  8, 0, {|| "" },           "Fin",            .T., "Fecha fin promoción",     10, .F. )
   ::AddField( "nDtoPro",   "N",  5, 2, {|| "@E 99.99" },   "% Dto.",         .T., "Porcentaje de descuento",  5, .F. )
   ::AddField( "cCodTar",   "C",  5, 0, {|| "" },           "Tar.",           .F., "Código de la tarifa",      5, .F. )

   ::AddTmpIndex ( "cCodPro", "cCodPro" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function InfPro_OpenFiles() ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfPro := DbfServer( "PROMOT.DBF", ):NewOpen( "PROMOT.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfPro:AddBag( "PROMOT.CDX" ) ; ::oDbfPro:AddBag( ) ; ::oDbfPro:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function InfPro_CloseFiles() ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   if !Empty( ::oDbfPro ) .AND. ::oDbfPro:Used()
      ::oDbfPro:End()
   end

   ::oDbfPro  := nil

RETURN ( Self )



UTILITY STATIC function InfPro_lResource( cFld) ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   local cSayProOrg
   local cSayProDes
   local oSayProOrg
   local oSayProDes
   local oProOrg
   local oProDes

   if !::StdResource( "INF_PRO01" )
      return .F.
   end





   ::cProOrg   := dbFirst( ::oDbfPro, 1 )
   ::cProDes   := dbLast(  ::oDbfPro, 1 )
   cSayProOrg  := dbFirst( ::oDbfPro, 2 )
   cSayProDes  := dbLast(  ::oDbfPro, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllPro, ::lAllPro:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oProOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cProOrg, ::cProOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllPro )},, .F., .F.,,,,,, nil, "LUPA",, )

      oProOrg:bValid   := {|| cPromo( oProOrg, ::oDbfPro:cAlias, oSayProOrg ) }
      oProOrg:bHelp    := {|| BrwPromo( oProOrg, ::oDbfPro:cAlias, oSayProOrg ) }





   oSayProOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayProOrg, cSayProOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oProDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cProDes, ::cProDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllPro )},, .F., .F.,,,,,, nil, "LUPA",, )

      oProDes:bValid   := {|| cPromo( oProDes, ::oDbfPro:cAlias, oSayProDes ) }
      oProDes:bHelp    := {|| BrwPromo( oProDes, ::oDbfPro:cAlias, oSayProDes ) }




   oSayProDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayProDes, cSayProDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfPro:Lastrec() )

   ::CreateFilter( aItmPrm(), ::oDbfPro )

RETURN .T.






UTILITY STATIC function InfPro_lGenerate() ; local Self AS CLASS InfPro := QSelf() AS CLASS InfPro

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Promociones : " + if( ::lAllPro, "Todos", AllTrim( ::cProOrg ) + " > " + AllTrim( ::cProDes ) ) } }

   ::oDbfPro:OrdSetFocus( "CCODPRO" )

   ::oDbfPro:GoTop()

   while !::lBreak .AND. !::oDbfPro:Eof()


      if ( ::lAllPro .OR. ( ::oDbfPro:cCodPro >= ::cProOrg .AND. ::oDbfPro:cCodPro <= ::cProDes ) ) .AND.  ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodPro   := ::oDbfPro:cCodPro
         ::oDbf:cNomPro   := ::oDbfPro:cNomPro
         ::oDbf:cCodArt   := ::oDbfPro:cCodArt
         ::oDbf:cNomArt   := retArticulo( ::oDbf:cCodArt )
         ::oDbf:dIniPro   := ::oDbfPro:dIniPro
         ::oDbf:dFinPro   := ::oDbfPro:dFinPro
         ::oDbf:nDtoPro   := ::oDbfPro:nDtoPro
         ::oDbf:cCodTar   := ::oDbfPro:cCodTar

         ::oDbf:Save()

      end

      ::oDbfPro:Skip()

      ::oMtrInf:AutoInc( ::oDbfPro:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfPro:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\PInfMateriales.prg"
_HB_CLASS PInfMateriales ; UTILITY FUNCTION PInfMateriales(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "PInfMateriales" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oProduccT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oProduccT" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @PInfMateriales_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @PInfMateriales_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @PInfMateriales_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @PInfMateriales_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @PInfMateriales_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @PInfMateriales_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @PInfMateriales_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @PInfMateriales_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @PInfMateriales_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @PInfMateriales_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS PInfMateriales ;



UTILITY STATIC function PInfMateriales_Create() ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   ::AddField( "cCodOpe",  "C",  3, 0,  {|| "@!" },       "Ope",          .F., "Código de la operación"      ,  5, .F. )
   ::AddField( "cCodSec",  "C",  3, 0,  {|| "@!" },       "Sec",          .F., "Código de la sección"        ,  5, .F. )
   ::AddField( "cCodAlm",  "C",  3, 0,  {|| "@!" },       "Alm",          .F., "Código almacén"              ,  5, .F. )
   ::AddField( "dFecMov",  "D",  8, 0,  {|| "@!" },       "Fec. inicio",  .T., "Fecha de inicio"             , 12, .F. )
   ::AddField( "dFecFin",  "D",  8, 0,  {|| "@!" },       "Fec. fin",     .T., "Fecha de Fin"                , 12, .F. )
   ::AddField( "cHorIni",  "C",  5, 0,  {|| "@R 99:99"},  "Hora inicio",  .T., "Hora de inicio"              , 12, .F. )
   ::AddField( "cHorFin",  "C",  5, 0,  {|| "@R 99:99"},  "Hora fin",     .T., "Hora de fin"                 , 12, .F. )
   ::AddField( "cNumDoc",  "C", 12, 0,  {|| "@!" },       "Documento",    .T., "Número de documento"         , 20, .F. )
   ::AddField( "cCodArt",  "C", 18, 0,  {|| "@!" },       "Cod. art.",    .T., "Código artículo"             , 14, .F. )
   ::AddField( "cNomArt",  "C",100, 0,  {|| "@!" },       "Artículo",     .T., "Nombre artículo"             , 35, .F. )
   ::AddField( "nCajas",   "N", 16, 6,  {|| MasUnd()},    "Cajas",        .T., "Cajas"                       , 12, .T. )
   ::AddField( "nUniCaj",  "N", 16, 6,  {|| MasUnd()},    "Uni. cajas",   .T., "Uidades por cajas"           , 12, .T. )
   ::AddField( "nUnidades","N", 16, 6,  {|| MasUnd()},    "Unidades",     .T., "Total unidades"              , 12, .T. )
   ::AddField( "nImporte", "N", 16, 6,  {|| ::cPicOut },  "Importe",      .F., "Importe"                     , 12, .T. )
   ::AddField( "nPeso",    "N", 16, 6,  {|| MasUnd() },   "Peso",         .F., "Peso"                        , 12, .T. )
   ::AddField( "nVolumen", "N", 16, 6,  {|| MasUnd() },   "Volumen",      .F., "Volumen"                     , 12, .T. )

RETURN ( self )



UTILITY STATIC function PInfMateriales_OpenFiles() ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oProduccT    :=  TProduccion():Create( cPatEmp() )
      ::oProduccT:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function PInfMateriales_CloseFiles() ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   if !Empty( ::oProduccT )
      ::oProduccT:end()
   end

   ::oProduccT := nil

RETURN ( Self )



UTILITY STATIC function PInfMateriales_lResource( cFld) ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   ::lNewInforme  := .T.

   if !::StdResource( "PROINFMATERIALES" )
      return .F.
   end

   if !::oDefOpera( 100, 101, 110, 111, 120, .T. )
      return .F.
   end

   if !::oDefSeccion( 130, 131, 140, 141, 150, .T. )
      return .F.
   end

   if !::oDefAlmInf( 160, 161, 170, 171, 180 )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:Lastrec() )

   ::CreateFilter( , ::oProduccT:oDbf )

RETURN .T.



UTILITY STATIC function PInfMateriales_lGenerate() ; local Self AS CLASS PInfMateriales := QSelf() AS CLASS PInfMateriales

   local cExpHead := ""
   local cExpLine := ""

   ::oDlg:Disable()

   ::oBtnCancel:Enable()

   ::oDbf:Zap()





   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Periodo   : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Operación : " + if( ::lOperaAll, "Todos", AllTrim( ::cOperaOrg ) + " > " + AllTrim( ::cOperaDes ) ) }, {|| "Sección   : " + if( ::lSeccionAll, "Todas", AllTrim( ::cSeccionOrg ) + " > " + AllTrim( ::cSeccionDes ) ) }, {|| "Almacén   : " + if( ::lAllAlm, "Todos", AllTrim( ::cAlmOrg ) + " > " + AllTrim( ::cAlmDes ) ) } }

   ::oProduccT:oDbf:OrdSetFocus( "dFecOrd" )
   ::oProduccT:oDetProduccion:oDbf:OrdSetFocus( "cNumOrd" )

   cExpHead       := 'dFecOrd >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecFin <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::lOperaAll
      cExpHead    += ' .and. cCodOpe >= "' + Rtrim( ::cOperaOrg ) + '" .and. cCodOpe <= "' + Rtrim( ::cOperaDes ) + '"'
   end

   if !::lSeccionAll
      cExpHead    += ' .and. cCodSec >= "' + Rtrim( ::cSeccionOrg ) + '" .and. cCodSec <= "' + Rtrim( ::cSeccionDes ) + '"'
   end

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       += " .and. " + ::oFilter:cExpFilter
   end

   ::oProduccT:oDbf:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oProduccT:oDbf:cFile ), ::oProduccT:oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oProduccT:oDbf:OrdKeyCount() )

   if !::lAllAlm
      cExpLine    += ' .and. cAlmOrd >= "' + Rtrim( ::cAlmOrg ) + '" .and. cAlmOrd <= "' + Rtrim( ::cAlmDes ) + '"'
   end

   ::oProduccT:oDetProduccion:oDbf:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oProduccT:oDetProduccion:oDbf:cFile ), ::oProduccT:oDetProduccion:oDbf:OrdKey(), cAllTrimer( cExpLine ), , , , , , , , .T. )

   ::oProduccT:oDbf:GoTop()

   while !::lBreak .AND. !::oProduccT:oDbf:Eof()

      if lChkSer( ::oProduccT:oDbf:cSerOrd, ::aSer )

         if ::oProduccT:oDetProduccion:oDbf:Seek( ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd )

            while ::oProduccT:oDetProduccion:oDbf:cSerOrd + Str( ::oProduccT:oDetProduccion:oDbf:nNumOrd ) + ::oProduccT:oDetProduccion:oDbf:cSufOrd == ::oProduccT:oDbf:cSerOrd + Str( ::oProduccT:oDbf:nNumOrd ) + ::oProduccT:oDbf:cSufOrd .AND. !::oProduccT:oDetProduccion:oDbf:eof()

               ::oDbf:Append()

               ::oDbf:cCodOpe    := ::oProduccT:oDbf:cCodOpe
               ::oDbf:cCodSec    := ::oProduccT:oDbf:cCodSec
               ::oDbf:cCodAlm    := ::oProduccT:oDetProduccion:oDbf:cAlmOrd
               ::oDbf:dFecMov    := ::oProduccT:oDbf:dFecOrd
               ::oDbf:dFecFin    := ::oProduccT:oDbf:dFecFin
               ::oDbf:cHorIni    := ::oProduccT:oDbf:cHorIni
               ::oDbf:cHorFin    := ::oProduccT:oDbf:cHorFin
               ::oDbf:cNumDoc    := ::oProduccT:oDbf:cSerOrd + "/" + AllTrim( Str( ::oProduccT:oDbf:nNumOrd ) ) + "/" + ::oProduccT:oDbf:cSufOrd
               ::oDbf:cCodArt    := ::oProduccT:oDetProduccion:oDbf:cCodArt
               ::oDbf:cNomArt    := ::oProduccT:oDetProduccion:oDbf:cNomArt
               ::oDbf:nCajas     := ::oProduccT:oDetProduccion:oDbf:nCajOrd
               ::oDbf:nUniCaj    := ::oProduccT:oDetProduccion:oDbf:nUndOrd
               ::oDbf:nUnidades  := NotCaja( ::oProduccT:oDetProduccion:oDbf:nCajOrd ) * ::oProduccT:oDetPRoduccion:oDbf:nUndOrd
               ::oDbf:nImporte   := ::oProduccT:oDetProduccion:oDbf:nImpOrd   * ::oDbf:nUnidades
               ::oDbf:nPeso      := ::oProduccT:oDetProduccion:oDbf:nPeso     * ::oDbf:nUnidades
               ::oDbf:nVolumen   := ::oProduccT:oDetProduccion:oDbf:nVolumen  * ::oDbf:nUnidades

               ::oDbf:Save()

               ::oProduccT:oDetProduccion:oDbf:Skip()

            end

         end

      end

      ::oProduccT:oDbf:Skip()

      ::oMtrInf:AutoInc( ::oProduccT:oDbf:OrdKeyNo() )

   end

   ::oProduccT:oDbf:IdxDelete( cCurUsr(), GetFileNoExt( ::oProduccT:oDbf:cFile ) )
   ::oProduccT:oDetProduccion:oDbf:IdxDelete( cCurUsr(), GetFileNoExt( ::oProduccT:oDetProduccion:oDbf:cFile ) )

   ::oMtrInf:AutoInc( ::oProduccT:oDbf:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

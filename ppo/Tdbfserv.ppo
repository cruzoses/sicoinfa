#line 112 "\xHarbour\Include\HBClass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 18 ".\Prg\Tdbfserv.prg"
static __ahTDbf := {}





function DbAt( DbCls )

    local nRet := 0

    if ValType( DbCls ) == "C"
        DbCls := upper( DbCls )
        nRet := AScan( __ahTDbf, { | aClass | aClass[ 1 ] == DbCls } )
    endif

return( nRet )



function lDbClass( DbCls ) ; return( DbAt( DbCls ) > 0 )



function ADbClass() ; return( __ahTDbf )



function nInsDbClass( DbCls )

    local nAt  := DbAt( DbCls )

return( if( nAt > 0, __ahTDbf[ nAt, 3 ], 0 ) )



function InitDbClass()

    __ahTDbf := {}

return ( nil )





function DbfServer( cFile, DbClass )

    local __nClassH := 0
    local __oDb

    cFile   := if( ValType( cFile )   <> "C", Alias() + ".DBF", cFile )
    DbClass := if( ValType( DbClass ) <> "C", "T" + GetFileNoExt( cFile ), DbClass )
    DbClass := upper( DbClass )

    EXTERNAL TDbf
    _HB_CLASS DbClass

    __oDb := HbClass():New( DbClass, __CLS_PARAM ( "TDBF" ) )
    __oDb:Create()
    __nClassH := __oDb:hClass

return( __clsInst( __nClassH ) )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 27 ".\Prg\TDetFacAutomatica.prg"
static oMenu



_HB_CLASS TDetFacAutomatica ; UTILITY FUNCTION TDetFacAutomatica(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TDetFacAutomatica" , {TDet():classh} ) ) ; ;

   _HB_MEMBER { oDbfArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArt" }, .F., .F. ), )
   _HB_MEMBER { oDbfPro} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfPro" }, .F., .F. ), )
   _HB_MEMBER { oDbfTblPro} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfTblPro" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtDiv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtDiv" }, .F., .F. ), )
   _HB_MEMBER { oDbfDiv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfDiv" }, .F., .F. ), )
   _HB_MEMBER { oDbfKit} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfKit" }, .F., .F. ), )
   _HB_MEMBER { oDbfIva} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfIva" }, .F., .F. ), )
   _HB_MEMBER { oDbfArtPrv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArtPrv" }, .F., .F. ), )
   _HB_MEMBER { oDbfCodeBar} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfCodeBar" }, .F., .F. ), )

   _HB_MEMBER { cOldCodArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cOldCodArt" }, .F., .F. ), )
   _HB_MEMBER { cOldPrpArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cOldPrpArt" }, .F., .F. ), )

   _HB_MEMBER { oTotLin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTotLin" }, .F., .F. ), )
   _HB_MEMBER { nTotLin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTotLin" }, .F., .F. ), )

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TDetFacAutomatica_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TDetFacAutomatica_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TDetFacAutomatica_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TDetFacAutomatica_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenService( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TDetFacAutomatica_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenService", @TDetFacAutomatica_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TDetFacAutomatica_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TDetFacAutomatica_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseService(); IIF( .F., s_oClass:ModMethod( "CloseService", @TDetFacAutomatica_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseService", @TDetFacAutomatica_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode, lLiteral); IIF( .F., s_oClass:ModMethod( "Resource", @TDetFacAutomatica_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TDetFacAutomatica_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SaveDetails(); IIF( .F., s_oClass:ModMethod( "SaveDetails", @TDetFacAutomatica_SaveDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SaveDetails", @TDetFacAutomatica_SaveDetails(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( oDlg); IIF( .F., s_oClass:ModMethod( "lPreSave", @TDetFacAutomatica_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TDetFacAutomatica_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetDlgMode( aGet, nMode); IIF( .F., s_oClass:ModMethod( "SetDlgMode", @TDetFacAutomatica_SetDlgMode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetDlgMode", @TDetFacAutomatica_SetDlgMode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lLoaArt( aGet); IIF( .F., s_oClass:ModMethod( "lLoaArt", @TDetFacAutomatica_lLoaArt(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lLoaArt", @TDetFacAutomatica_lLoaArt(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lCalcDeta(); IIF( .F., s_oClass:ModMethod( "lCalcDeta", @TDetFacAutomatica_lCalcDeta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lCalcDeta", @TDetFacAutomatica_lCalcDeta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Descrip(); IIF( .F., s_oClass:ModMethod( "Descrip", @TDetFacAutomatica_Descrip(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Descrip", @TDetFacAutomatica_Descrip(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotLFacAut(); IIF( .F., s_oClass:ModMethod( "nTotLFacAut", @TDetFacAutomatica_nTotLFacAut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotLFacAut", @TDetFacAutomatica_nTotLFacAut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotNFacAut(); IIF( .F., s_oClass:ModMethod( "nTotNFacAut", @TDetFacAutomatica_nTotNFacAut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotNFacAut", @TDetFacAutomatica_nTotNFacAut(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AppendKit(); IIF( .F., s_oClass:ModMethod( "AppendKit", @TDetFacAutomatica_AppendKit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AppendKit", @TDetFacAutomatica_AppendKit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AppendDet( oBrw); IIF( .F., s_oClass:ModMethod( "AppendDet", @TDetFacAutomatica_AppendDet(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AppendDet", @TDetFacAutomatica_AppendDet(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lChangePrcAtp( aGet); IIF( .F., s_oClass:ModMethod( "lChangePrcAtp", @TDetFacAutomatica_lChangePrcAtp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lChangePrcAtp", @TDetFacAutomatica_lChangePrcAtp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TDetFacAutomatica ;



UTILITY STATIC function TDetFacAutomatica_DefineFiles( cPath, cVia, lUniqueName, cFileName) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local oDbf

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( lUniqueName == nil, lUniqueName := .F., ) ;
   IIF( cFileName == nil, cFileName := "FacAutL", ) ;
   IIF( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), ( cFileName ), ( cVia ), "líneas de plantillas de ventas automáticas", ( cPath ) )

      oDbf:AddField( "cCodFac", "C", 03, 0,,,,, "Código", .F.,, .F., {} )
      oDbf:AddField( "cCodArt", "C", 18, 0,,,,, "Código del artículo", .F.,, .F., {} )
      oDbf:AddField( "cDetalle", "C", 250, 0,,,,, "Detalle del artículo", .F.,, .F., {} )
      oDbf:AddField( "mLngDes", "M", 10, 0,,,,, "Descripción larga del artículo", .F.,, .F., {} )
      oDbf:AddField( "cCodPr1", "C", 10, 0,,,,, "Código de la primera propiedad", .F.,, .F., {} )
      oDbf:AddField( "cCodPr2", "C", 10, 0,,,,, "Código de la segunda propiedad", .F.,, .F., {} )
      oDbf:AddField( "cValPr1", "C", 10, 0,,,,, "Valor de la primera propiedad", .F.,, .F., {} )
      oDbf:AddField( "cValPr2", "C", 10, 0,,,,, "Valor de la segunda propiedad", .F.,, .F., {} )
      oDbf:AddField( "nCajas", "N", 16, 6,,,,, cNombreCajas(), .F.,, .F., {} )
      oDbf:AddField( "nUnidades", "N", 16, 6,,,,, cNombreUnidades(), .F.,, .F., {} )
      oDbf:AddField( "nPreUnit", "N", 16, 6,,,,, "Precio unitario", .F.,, .F., {} )
      oDbf:AddField( "lKitArt", "L", 01, 0,,,,, "Línea con escandallo", .F.,, .F., {} )
      oDbf:AddField( "lKitChl", "L", 01, 0,,,,, "Línea perteneciente a escandallo", .F.,, .F., {} )
      oDbf:AddField( "nIva", "N", 06, 2,,,,, "Porcentaje de " + cImp(), .F.,, .F., {} )
      oDbf:AddField( "nNumLin", "N", 04, 0,,,,, "Número de línea", .F.,, .F., {} )
      oDbf:AddField( "lKitPrc", "L", 01, 0,,,,, "Linea precios escandallo", .F.,, .F., {} )
      oDbf:AddField( "lPrcAtp", "L", 01, 0,,,,, "Buscar precios en las líneas", .F.,, .F., {} )

      oDbf:AddIndex( "cCodFac", ( cFileName ), "cCodFac",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "cCodArt", ( cFileName ), "cCodArt",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "nNumLin", ( cFileName ), "Str( nNumLin, 4 )",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



UTILITY STATIC function TDetFacAutomatica_OpenFiles( lExclusive) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local lOpen             := .T.
   local oError
   local oBlock

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

      ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

      ::oDbfPro := DbfServer( "PRO.DBF", ):NewOpen( "PRO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfPro:AddBag( "PRO.CDX" ) ; ::oDbfPro:AddBag( ) ; ::oDbfPro:AutoIndex()

      ::oDbfTblPro := DbfServer( "TBLPRO.DBF", ):NewOpen( "TBLPRO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfTblPro:AddBag( "TBLPRO.CDX" ) ; ::oDbfTblPro:AddBag( ) ; ::oDbfTblPro:AutoIndex()

      ::oDbfArtDiv := DbfServer( "ARTDIV.DBF", ):NewOpen( "ARTDIV.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArtDiv:AddBag( "ARTDIV.CDX" ) ; ::oDbfArtDiv:AddBag( ) ; ::oDbfArtDiv:AutoIndex()

      ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

      ::oDbfKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ARTKIT.CDX" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()

      ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

      ::oDbfArtPrv := DbfServer( "PROVART.DBF", ):NewOpen( "PROVART.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArtPrv:AddBag( "PROVART.CDX" ) ; ::oDbfArtPrv:AddBag( ) ; ::oDbfArtPrv:AutoIndex()

      ::oDbfCodeBar := DbfServer( "ARTCODEBAR.DBF", ):NewOpen( "ARTCODEBAR.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfCodeBar:AddBag( "ARTCODEBAR.CDX" ) ; ::oDbfCodeBar:AddBag( ) ; ::oDbfCodeBar:AutoIndex()

      ::bOnPreSaveDetail   := {|| ::SaveDetails() }

      ::bOnPreDelete       := {|| if( ::oDbfVir:lKitArt, ( ::oDbfVir:KillFilter(), DbDelKit( nil, ::oDbfVir:cAlias, ::oDbfVir:nNumLin ) ), ) }

   RECOVER USING oError

      msgStop( "Imposible abrir lineas de facturas automáticas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      lOpen                := .F.

   end

   ErrorBlock( oBlock )

   if !lOpen
      ::CloseFiles()
   end

RETURN ( lOpen )



UTILITY STATIC function TDetFacAutomatica_OpenService( lExclusive) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !lExclusive )

   RECOVER USING oError

      msgStop( "Imposible abrir lineas de facturas automáticas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      ::CloseService()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TDetFacAutomatica_CloseFiles() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   if ::oDbfArt <> nil .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if ::oDbfPro <> nil .AND. ::oDbfPro:Used()
      ::oDbfPro:End()
   end

   if ::oDbfTblPro <> nil .AND. ::oDbfTblPro:Used()
      ::oDbfTblPro:End()
   end


   if ::oDbfArtDiv <> nil .AND. ::oDbfArtDiv:Used()
      ::oDbfArtDiv:End()
   end

   if ::oDbfDiv <> nil .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end

   if ::oDbfKit <> nil .AND. ::oDbfKit:Used()
      ::oDbfKit:End()
   end

   if ::oDbfIva <> nil .AND. ::oDbfIva:Used()
      ::oDbfIva:End()
   end

   if ::oDbfArtPrv <> nil .AND. ::oDbfArtPrv:Used()
      ::oDbfArtPrv:End()
   end

   if ::oDbfCodeBar <> nil .AND. ::oDbfCodeBar:Used()
      ::oDbfCodeBar:End()
   end

   ::oDbf         := nil
   ::oDbfArt      := nil
   ::oDbfPro      := nil
   ::oDbfTblPro   := nil
   ::oDbfArtDiv   := nil
   ::oDbfDiv      := nil
   ::oDbfKit      := nil
   ::oDbfIva      := nil
   ::oDbfArtPrv   := nil
   ::oDbfCodeBar  := nil

RETURN ( .T. )



UTILITY STATIC function TDetFacAutomatica_CloseService() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   ::oDbf   := nil

RETURN ( .T. )



UTILITY STATIC function TDetFacAutomatica_SaveDetails() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   ::oDbfVir:cCodFac  := ::oParent:oDbf:cCodFac

RETURN ( Self )



UTILITY STATIC function TDetFacAutomatica_Resource( nMode) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local oDlg
   local aGet              := Array( 17 )

   if nMode == 1

      ::oDbfVir:nCajas     := 1
      ::oDbfVir:nUnidades  := 1
      ::oDbfVir:nPreUnit   := 0
      ::nTotLin            := 0
      ::oDbfVir:nNumLin    := nLastNum( ::oDbfVir:cAlias )

   end

   ::cOldCodArt            := ::oDbfVir:cCodArt
   ::cOldPrpArt            := ::oDbfVir:cCodPr1 + ::oDbfVir:cCodPr2 + ::oDbfVir:cValPr1 + ::oDbfVir:cValPr2



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "línea de plantilla de venta automática", "LFacAutomatica",, .F.,,,,,, .F.,,,,,, .F., )





      aGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:cCodArt, ::oDbfVir:cCodArt:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil, "LUPA",, )

      aGet[ 2 ]:bValid := {|| ::lLoaArt( aGet ), ::lCalcDeta() }
      aGet[ 2 ]:bHelp  := {|| BrwArticulo( aGet[ 2 ], aGet[ 3 ] ), ::lLoaArt( aGet ) }




      aGet[ 3 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, ::oDbfVir:cDetalle, ::oDbfVir:cDetalle:= u ) }, oDlg,,,,,,,,, .F., {||     ( ( lModDes() .OR. Empty( ::oDbfVir:cDetalle ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 4 ] := TMultiGet():ReDefine( 190, { | u | If( PCount()==0, ::oDbfVir:mLngDes, ::oDbfVir:mLngDes:= u ) }, oDlg,,,,,,, .F., {||     ( ( lModDes() .OR. Empty( ::oDbfVir:mLngDes ) ) .AND. nMode <> 3 )}, .F.,, )







      aGet[ 7 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:cValPr1, ::oDbfVir:cValPr1:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA", 122, 121 )

         aGet[ 7 ]:bHelp  := {|| brwPrpAct( aGet[ 7 ], aGet[ 7 ]:oHelpText, ::oDbfVir:cCodPr1 ) }
         aGet[ 7 ]:bValid := {|| if( lPrpAct( ::oDbfVir:cValPr1, aGet[ 7 ]:oHelpText, ::oDbfVir:cCodPr1, ::oDbfTblPro:cAlias ), ( ::lLoaArt( aGet ), ::lCalcDeta() ), .F. ) }







      aGet[ 8 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbfVir:cValPr2, ::oDbfVir:cValPr2:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA", 132, 131 )

         aGet[ 8 ]:bHelp  := {|| brwPrpAct( aGet[ 8 ], aGet[ 8 ]:oHelpText, ::oDbfVir:cCodPr2 ) }
         aGet[ 8 ]:bValid := {|| if( lPrpAct( ::oDbfVir:cValPr2, aGet[ 8 ]:oHelpText, ::oDbfVir:cCodPr2, ::oDbfTblPro:cAlias ), ( ::lLoaArt( aGet ), ::lCalcDeta() ), .F. ) }






      aGet[ 14 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oDbfVir:nIva, ::oDbfVir:nIva:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( lModIva() .AND. nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         aGet[ 14 ]:bValid    := {|| lTiva( ::oDbfIva:cAlias, ::oDbfVir:nIva ) }
         aGet[ 14 ]:bHelp     := {|| BrwIva( aGet[ 14 ], ::oDbfIva:cAlias, , .T. ) }
         aGet[ 14 ]:bChange   := {|| ::lCalcDeta() }







      aGet[ 9 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:nCajas, ::oDbfVir:nCajas:= u ) }, oDlg,, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 .AND. lUseCaj() )},, .F., .T.,,,,,, nil,, 141, )

         aGet[ 9 ]:bChange  := {|| ::lCalcDeta() }
         aGet[ 9 ]:bValid   := {|| ::lCalcDeta() }







      aGet[ 10 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbfVir:nUnidades, ::oDbfVir:nUnidades:= u ) }, oDlg,, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 151, )

         aGet[ 10 ]:bChange  := {|| ::lCalcDeta() }
         aGet[ 10 ]:bValid   := {|| ::lCalcDeta() }





      aGet[ 17 ] := TCheckBox():ReDefine( 411, { | u | If( PCount()==0, ::oDbfVir:lPrcAtp, ::oDbfVir:lPrcAtp:= u ) }, oDlg,, {|| ( ::lChangePrcAtp( aGet ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )







      aGet[ 11 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbfVir:nPreUnit, ::oDbfVir:nPreUnit:= u ) }, oDlg,, ::oParent:cPouDiv,,,,,,, .F., {||     ( !::oDbfVir:lPrcAtp .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,, 171, )

         aGet[ 11 ]:bChange  := {|| ::lCalcDeta() }
         aGet[ 11 ]:bValid   := {|| ::lCalcDeta() }






      ::oTotLin := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nTotLin, ::nTotLin:= u ) }, oDlg,, ::oParent:cPorDiv,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,, 181, )





      TButton():ReDefine( 1, {||( ::lPreSave( aGet, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| ::lPreSave( aGet, oDlg ) } )
      end

   oDlg:bStart := {|| ::SetDlgMode( aGet, nMode ), ::lCalcDeta() }

   oDlg:Activate( , , , .T., , , {|| EdtMenu( Self, oDlg ) } )

   oMenu:End()

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TDetFacAutomatica_lPreSave( aGet, oDlg) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local cCodArt  := aGet[ 2 ]:VarGet()

   if !Empty( cCodArt ) .AND. !::oDbfArt:SeekInOrd( cCodArt, "Codigo" )
      msgStop( "Artículo no encontrado" )
      Return .F.
   end

   ::cOldPrpArt   := ""
   ::cOldCodArt   := ""

   oDlg:End( 1 )

RETURN .T.



UTILITY STATIC function TDetFacAutomatica_SetDlgMode( aGet, nMode) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   if !lUseCaj()
      aGet[ 9 ]:Hide()
   else
      aGet[ 9 ]:oSay:SetText( cNombreCajas() )
   end

   aGet[ 10 ]:oSay:SetText( cNombreUnidades() )

   do case
      case nMode == 1

         aGet[ 3]:Show()
         aGet[ 4 ]:Hide()

      otherwise

         if !Empty( ::oDbfVir:cCodArt )

            aGet[ 3 ]:show()
            aGet[ 4  ]:hide()

         end

   end

   if !Empty( ::oDbfVir:cCodPr1 )

      if !Empty( aGet[ 7 ] )
         aGet[ 7 ]:Show()
         aGet[ 7 ]:lValid()
         aGet[ 7 ]:oSay:SetText( retProp( ::oDbfArt:cCodPrp1, ::oDbfPro ) )
      end

   else

      if !Empty( aGet[ 7 ] )
         aGet[7 ]:hide()
      end

   end

   if !Empty( ::oDbfVir:cCodPr2 )

      if !Empty( aGet[ 8 ] )
         aGet[ 8 ]:Show()
         aGet[ 8 ]:lValid()
         aGet[ 8 ]:oSay:SetText( retProp( ::oDbfArt:cCodPrp2, ::oDbfPro ) )
      end

   else

      if !Empty( aGet[ 8 ] )
         aGet[8 ]:hide()
      end

   end

   if ::oDbfVir:lPrcAtp
      aGet[ 11 ]:Hide()
      ::oTotLin:Hide()
   else
      aGet[ 11 ]:Show()
      ::oTotLin:Show()
   end

   aGet[ 11 ]:Refresh()
   ::oTotLin:Refresh()





   if ( Empty( ::oDbfVir:nPreUnit ) .OR. lUsrMaster() .OR. oUser():lCambiarPrecio() ) .AND. nMode <> 3
      aGet[ 11 ]:HardEnable()
   else
      aGet[ 11 ]:HardDisable()
   end

Return .T.



UTILITY STATIC function TDetFacAutomatica_lLoaArt( aGet) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   Local cCodArt        := aGet[ 2 ]:VarGet()
   local lChgCodArt
   local cPrpArt
   local nPrePro        := 0
   local nPosComa
   local cProveedor

   if Empty( cCodArt )

      if !Empty( aGet[ 3 ] )
         aGet[ 3 ]:cText( Space( 250 ) )
         aGet[ 3 ]:Hide()
      end

      if !Empty( aGet[ 4 ] )
         aGet[ 4 ]:Show()
         aGet[ 4 ]:SetFocus()
      end

      if !Empty( aGet[7 ] )
         aGet[7 ]:Hide()
      end

      if !Empty( aGet[8 ] )
         aGet[8 ]:Hide()
      end

   else





      if "," $ cCodArt
         nPosComa                := At( ",", cCodArt )
         cProveedor              := RJust( Left( cCodArt, nPosComa - 1 ), "0", RetNumCodPrvEmp() )
         cCodArt                 := cSeekProveedor( cCodArt, ::oDbfArtPrv:cAlias )
      else
         cCodArt                 := cSeekCodebar( cCodArt, ::oDbfCodebar:cAlias, ::oDbfArt:cAlias )
      end

      lChgCodArt     := ( Rtrim( ::cOldCodArt ) <> Rtrim( cCodArt ) )

      if ::oDbfArt:SeekInOrd( cCodArt, "Codigo" ) .OR. ::oDbfArt:SeekInOrd( Upper( cCodArt ), "Codigo" )

         if ( lChgCodArt )

            if ::oDbfArt:lObs
               MsgStop( "Artículo catalogado como obsoleto" )
               return .F.
            end

            ::oDbfVir:cCodArt := cCodArt
            aGet[ 2 ]:cText( cCodArt )

            if !Empty( aGet[ 3 ] )
               aGet[ 3 ]:show()
               aGet[ 3 ]:cText( ::oDbfArt:Nombre )
            end

            if !Empty( aGet[ 4 ] )
               aGet[ 4 ]:hide()
            end

            if ::oDbfArt:nCajEnt <> 0
               aGet[ 9 ]:cText( ::oDbfArt:nCajEnt )
            end

            if ::oDbfArt:nUniCaja <> 0
               aGet[ 10 ]:cText( ::oDbfArt:nUniCaja )
            end

            if !Empty( aGet[ 14 ] )
               aGet[ 14 ]:cText( nIva( ::oDbfIva:cAlias, ::oDbfArt:TipoIva ) )
            end

            ::oDbfVir:lKitArt    := ::oDbfArt:lKitArt

            if ::oDbfVir:lKitArt
               ::oDbfVir:lKitPrc := lPreciosCompuestos( cCodArt, ::oDbfArt:cAlias )
            end

         end

         cPrpArt                 := ::oDbfVir:cCodPr1 + ::oDbfVir:cCodPr2 + ::oDbfVir:cValPr1 + ::oDbfVir:cValPr2

         if ( lChgCodArt ) .OR. ( cPrpArt <> ::cOldPrpArt )

            ::oDbfVir:cCodPr1    := ::oDbfArt:cCodPrp1
            ::oDbfVir:cCodPr2    := ::oDbfArt:cCodPrp2

            if !Empty( ::oDbfVir:cCodPr1 )

               if aGet[ 7 ] <> nil
                  aGet[ 7 ]:show()
                  aGet[ 7 ]:SetFocus()
                  aGet[ 7 ]:oSay:SetText( retProp( ::oDbfArt:cCodPrp1, ::oDbfPro ) )
               end

            else

               if !Empty( aGet[ 7 ] )
                  aGet[ 7 ]:hide()
                  aGet[ 7 ]:oHelpText:cText( "" )
               end

            end

            if !Empty( ::oDbfVir:cCodPr2 )

               if aGet[ 8 ] <> nil
                  aGet[ 8 ]:show()
                  aGet[ 8 ]:SetFocus()
                  aGet[ 8 ]:oSay:SetText( retProp( ::oDbfArt:cCodPrp2, ::oDbfPro ) )
               end

            else

               if !Empty( aGet[ 8 ] )
                  aGet[ 8 ]:hide()
                  aGet[ 8 ]:oHelpText:cText( "" )
               end

            end



            nPrePro           := nPrePro( ::oDbfVir:cCodArt, ::oDbfVir:cCodPr1, ::oDbfVir:cValPr1, ::oDbfVir:cCodPr2, ::oDbfVir:cValPr2, 1, .F., ::oDbfArtDiv:cAlias )

            if nPrePro == 0
               aGet[ 11]:cText( nRetPreArt( 1, cDivEmp(), .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oDbfKit:cAlias, ::oDbfIva:cAlias, .F. ) )
            else
               aGet[ 11]:cText( nPrePro )
            end

         end

         ::cOldPrpArt  := cPrpArt
         ::cOldCodArt  := cCodArt

      else

         MsgStop( "Artículo no encontrado" )
         aGet[ 2 ]:SetFocus()
         Return .F.

      end

   end

Return .T.



UTILITY STATIC function TDetFacAutomatica_lCalcDeta() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local nCalculo
   local nUnidades

   nCalculo       := ::oDbfVir:nPreUnit

   nUnidades      := ::nTotNFacAut( ::oDbfVir )

   nCalculo       *= nUnidades

   ::oTotLin:cText( nCalculo )

RETURN .T.



UTILITY STATIC function TDetFacAutomatica_Descrip() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local cReturn     := ""

   if !Empty( ::oDbfVir:cDetalle )
      cReturn        := Rtrim( ::oDbfVir:FieldGetByName( "cDetalle" ) )
   else
      cReturn        := Rtrim( ::oDbfVir:FieldGetByName( "mLngDes" ) )
   end

RETURN ( cReturn )



UTILITY STATIC function TDetFacAutomatica_nTotLFacAut( oDbfDet) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

RETURN ( oDbfDet:nPreUnit * ::nTotNFacAut( oDbfDet ) )



UTILITY STATIC function TDetFacAutomatica_nTotNFacAut( oDbfDet) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local nTotUnd  := 0

      nTotUnd        := NotCaja( oDbfDet:nCajas )
      nTotUnd        *= oDbfDet:nUnidades

Return ( nTotUnd )



UTILITY STATIC function TDetFacAutomatica_AppendKit() ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   local nRec        := ::oDbfVir:Recno()
   local cCodFac     := ::oDbfVir:cCodFac
   local cCodArt     := ::oDbfVir:cCodArt
   local nCajas      := ::oDbfVir:nCajas
   local nUnidades   := ::oDbfVir:nUnidades
   local nNumLin     := ::oDbfVir:nNumLin

   if ::oDbfKit:SeekInOrd( cCodArt, "cCodKit" )

      while ::oDbfKit:cCodKit == cCodArt .AND. !( ::oDbfKit:Eof() )

         if ::oDbfArt:SeekInOrd( ::oDbfKit:cRefKit, "Codigo" )

            ::oDbfVir:Append()

            ::oDbfVir:cCodFac       := cCodFac
            ::oDbfVir:cCodArt       := ::oDbfKit:cRefKit
            ::oDbfVir:cDetalle      := ::oDbfArt:Nombre
            ::oDbfVir:cCodPr1       := Space(5)
            ::oDbfVir:cCodPr2       := Space(5)
            ::oDbfVir:cValPr1       := Space(10)
            ::oDbfVir:cValPr2       := Space(10)
            ::oDbfVir:nCajas        := nCajas
            ::oDbfVir:nUnidades     := nUnidades * ::oDbfKit:nUndKit
            ::oDbfVir:nPreUnit      := nRetPreArt( 1, cDivEmp(), .F., ::oDbfArt:cAlias, ::oDbfDiv:cAlias, ::oDbfKit:cAlias, ::oDbfIva:cAlias, .F. )
            ::oDbfVir:lKitArt       := .F.
            ::oDbfVir:lKitChl       := .T.
            ::oDbfVir:lKitPrc       := lPreciosComponentes( cCodArt, ::oDbfArt:cAlias )
            ::oDbfVir:nIva          := nIva( ::oDbfIva, ::oDbfArt:TipoIva )
            ::oDbfVir:nNumLin       := nNumLin

            ::oDbfVir:Save()

         end

         ::oDbfKit:Skip()

      end

   end





   ::oDbfVir:GoTo( nRec )

RETURN ( Self )



UTILITY STATIC function TDetFacAutomatica_AppendDet( oBrw) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   ::oDbfVir:Blank()

   if ::bOnPreAppend <> nil
      Eval( ::bOnPreAppend, Self )
   end

   if ::Resource( 1 )

      if ::bOnPreSave <> nil
         Eval( ::bOnPreSave, Self )
      end

      ::oDbfVir:Insert()

      ::AppendKit()

      if ::bOnPostSave <> nil
         Eval( ::bOnPostSave, Self )
      end

      if ::bOnPostAppend <> nil
         Eval( ::bOnPostAppend, Self )
      end

   end

   ::oDbfVir:Cancel()

   IIF( oBrw <> nil, oBrw:Refresh(), )

RETURN ( Self )



UTILITY STATIC function TDetFacAutomatica_lChangePrcAtp( aGet) ; local Self AS CLASS TDetFacAutomatica := QSelf() AS CLASS TDetFacAutomatica

   if ::oDbfVir:lPrcAtp
      aGet[ 11 ]:Hide()
      ::oTotLin:Hide()
   else
      aGet[ 11 ]:Show()
      ::oTotLin:Show()
   end


   if !Empty( aGet[ 11 ] )
      aGet[ 11 ]:Refresh()
   end

   if !Empty( ::oTotLin )
      ::oTotLin:Refresh()
   end

Return .T.



static function EdtMenu( oThis, oDlg )

   local cCodArt     := oThis:oDbfVir:cCodArt

   oMenu := MenuBegin( .F.,,, .F., .F. )

      MenuAddItem( "&1. Rotor  ",, .F.,,,,,,,,, .F.,,, .F. )

         MenuBegin( .F.,,, .F., .F. )





            MenuAddItem( "&1. Modificar de artículo", "Modificar la ficha del artículo", .F.,, {|oMenuItem|( EdtArticulo( cCodArt ) )},, "Cube_Yellow_16",,,,, .F.,,, .F. )




            MenuAddItem( "&2. Informe de artículo", "Abrir el informe del artículo", .F.,, {|oMenuItem|( if( oUser():lNotCostos(), msgStop( "No tiene permiso para ver los precios de costo" ), InfArticulo( cCodArt ) ) )},, "Info16",,,,, .F.,,, .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )

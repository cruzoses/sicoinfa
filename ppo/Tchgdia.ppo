#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tchgdia.prg"
function ChgDiario( oWnd )

   local oChgDia





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   oChgDia  := TChgDiario():OpenFiles()
   if oChgDia:lOpenFiles

      oChgDia:lGenerate()
      oChgDia:CloseFiles()

   end

return ( nil )



_HB_CLASS TChgDiario ; UTILITY FUNCTION TChgDiario(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TChgDiario" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { lOpenFiles} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lOpenFiles" }, .F., .F. ), )

   _HB_MEMBER {AS OBJECT oDiario} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDiario" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TChgDiario_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TChgDiario_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TChgDiario_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TChgDiario_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TChgDiario_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TChgDiario_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER IsDescuadrado( nAsiento); IIF( .F., s_oClass:ModMethod( "IsDescuadrado", @TChgDiario_IsDescuadrado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "IsDescuadrado", @TChgDiario_IsDescuadrado(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AjustaAsiento( nAsiento); IIF( .F., s_oClass:ModMethod( "AjustaAsiento", @TChgDiario_AjustaAsiento(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AjustaAsiento", @TChgDiario_AjustaAsiento(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER IsFactura( nAsiento); IIF( .F., s_oClass:ModMethod( "IsFactura", @TChgDiario_IsFactura(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "IsFactura", @TChgDiario_IsFactura(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CambiaIva( nAsiento, nDiferencia); IIF( .F., s_oClass:ModMethod( "CambiaIva", @TChgDiario_CambiaIva(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CambiaIva", @TChgDiario_CambiaIva(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TChgDiario ;



UTILITY STATIC function TChgDiario_OpenFiles() ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   if File( "C:\GrupoSp\DIARIO.DBF" )

      ::oDiario := DbfServer( "DIARIO.DBF", ):NewOpen( "DIARIO.DBF",, ( cDriver() ),, ( "C:\GrupoSp" ), .F., .T., .F., .F. ) ; ::oDiario:AddBag( "DIARIO.CDX" ) ; ::oDiario:AddBag( ) ; ::oDiario:AutoIndex()
      ::oDiario:OrdSetFocus( "NuAsi" )

   else

      MsgStop( "No existe C:\GrupoSp\DIARIO.DBF" )
      ::lOpenFiles         := .F.

   end

RETURN ( Self )



UTILITY STATIC function TChgDiario_CloseFiles() ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   ::oDiario:End()

RETURN ( Self )






UTILITY STATIC function TChgDiario_lGenerate() ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   local n  := 1

   while n <= 26647

      Titulo( Str( n ) )

      if ::IsDescuadrado( n ) .AND. ::IsFactura( n )
         ::AjustaAsiento( n )
      end

      n++

   end

   MsgInfo( "Porceso finalizado con exito." )

RETURN ( Self )



UTILITY STATIC function TChgDiario_IsDescuadrado( nAsiento) ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   local nDebe    := 0
   local nHaber   := 0

   if ::oDiario:Seek( nAsiento )
      while nAsiento == ( ::oDiario:cAlias )->Asien

         nDebe    += ( ::oDiario:cAlias )->EuroDebe
         nHaber   += ( ::oDiario:cAlias )->EuroHaber

         ::oDiario:Skip()

      end
   end

RETURN ( Round( nDebe, 2 ) <> Round( nHaber, 2 ) )



UTILITY STATIC function TChgDiario_IsFactura( nAsiento) ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   local l430  := .F.
   local l700  := .F.
   local l477  := .F.

   if ::oDiario:Seek( nAsiento )
      while nAsiento == ::oDiario:Asien

         do case
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "430"
               l430  := .T.
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "700"
               l700  := .T.
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "477"
               l477  := .T.
         end

         ::oDiario:Skip()

      end
   end

RETURN ( l430 .OR. l700 .OR. l477 )



UTILITY STATIC function TChgDiario_AjustaAsiento( nAsiento) ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   local nCliente := 0
   local nIva     := 0
   local nBase    := 0

   if ::oDiario:Seek( nAsiento )
      while nAsiento == ::oDiario:Asien

         do case
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "430"
               nCliente += ::oDiario:EuroDebe
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "700"
               nIva     += ::oDiario:EuroHaber
            case SubStr( ::oDiario:SubCta, 1, 3 ) == "477"
               nBase    += ::oDiario:EuroHaber
         end

      ::oDiario:Skip()

      end
   end

   ::CambiaIva( nAsiento, nCliente - nBase - nIva )

RETURN ( Self )



UTILITY STATIC function TChgDiario_CambiaIva( nAsiento, nDiferencia) ; local Self AS CLASS TChgDiario := QSelf() AS CLASS TChgDiario

   ::oDiario:Seek( nAsiento )
   while nAsiento == ::oDiario:Asien

      if SubStr( ::oDiario:SubCta, 1, 3 ) == "700"
         ::oDiario:Load()
         ::oDiario:EuroHaber  += nDiferencia
         ::oDiario:Save()
         exit
      end

      ::oDiario:Skip()

   end

   msgWait( "Proceso " + Str( nAsiento ) + " descuadrado " + Str( nDiferencia ), , 0.0001 )

RETURN ( Self )

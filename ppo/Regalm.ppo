#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 20 ".\Prg\Regalm.prg"
static oWndBrw
static dbfHisMov
static dbfMov
static dbfArticulo
static dbfCodebar
static dbfIva
static dbfTblPro
static dbfFamilia
static dbfAlmT
static oStock
static cPicUnd
static bEdit   := { |aTmp, aGet, dbfHisMov, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfHisMov, oBrw, bWhen, bValid, nMode ) }



FUNCTION RegMovAlm( oWnd )

   IF oWndBrw == NIL

   IF !OpenFiles()
      RETURN NIL
   end


































   oWndBrw := TShell():New( 0, 0, 22, 80, "Regularización de almacenes",, oWnd,,, .F.,, { {||     dtoc( (dbfHisMov)->DFECMOV )}, {|| (dbfHisMov)->CALIMOV + Space(1) + RetAlmacen( (dbfHisMov)->CALIMOV, dbfAlmT )}, {|| (dbfHisMov)->CREFMOV}, {|| (dbfHisMov)->CVALPR1} , {|| (dbfHisMov)->CVALPR2} , {|| retArticulo( (dbfHisMov)->CREFMOV, dbfArticulo )}, {|| Trans( (dbfHisMov)->NUNDMOV, cPicUnd )} }, ( dbfHisMov ), {"Fecha", "Almacén", "Codigo", "Prop. 1" , "Prop. 2" , "Artículo",    "Unidades"}, {80, 180, 80, 40 , 40 , 220,    80},, {.F., .F., .F., .F., .F., .F., .T.}, {"Fecha", "Articulo", "Almacen"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfHisMov ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfHisMov ) )}, {||( DelDet( oWndBrw:oBrw, dbfHisMov ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfHisMov ) )}, nil,,,,,, )






      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,,,, .F. )





      oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,,,, .F. )





      oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odifica", "M",,,,, .F. )





      oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfAlmT ) )}, "(Z)oom", "Z",,,,, .F. )





      oWndBrw:NewAt( "DEL",,, {||( delDet( oWndBrw:oBrw, dbfHisMov ) )}, "(E)liminar", "E",,,,, .F. )





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:search() )}, "(B)uscar", "B",,,,, .F. )





      oWndBrw:NewAt( "IMP",,, {||( GenReport( dbfHisMov ) )}, "(L)istado", "L",,,,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

    ELSE

      oWndBrw:SetFocus()

    end

RETURN NIL



STATIC FUNCTION OpenFiles()

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   IF dbfHisMov == NIL

      IF !File( cPatEmp() + "HISMOV.DBF" )
            mkHisMov()
        end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "HISMOV.DBF" ), ( cCheckArea( "HISMOV", @dbfHisMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "HISMOV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      dbSetFilter( {|| Empty( Field->CALOMOV )}, "Empty( Field->CALOMOV )" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "MOVALM.DBF" ), ( cCheckArea( "MOVALM", @dbfMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "MOVALM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      oStock   := TStock():Create( cPatGrp())
      if !oStock:lOpenFiles()
         lOpen := .F.
      end

      cPicUnd  := MasUnd()

   end

   RECOVER

      lOpen    := .F.
      msgStop( "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

   if !lOpen
      CloseFiles()
   end

RETURN ( lOpen )



STATIC FUNCTION CloseFiles()

    IF oWndBrw     <> NIL
        oWndBrw:oBrw:lCloseArea()
        oWndBrw     := NIL
    ELSE
      ( dbfHisMov )->( dbCloseArea() )
    end

   ( dbfMov      )->( dbCloseArea() )
   ( dbfArticulo )->( dbCloseArea() )
   ( dbfCodebar  )->( dbCloseArea() )
   ( dbfTblPro   )->( dbCloseArea() )
   ( dbfFamilia  )->( dbCloseArea() )
   ( dbfAlmT     )->( dbCloseArea() )
   ( dbfIva      )->( dbCloseArea() )

   if !Empty( oStock )
      oStock:end()
   end

    dbfHisMov     := NIL
    dbfMov         := NIL
   dbfArticulo := NIL
   dbfCodebar  := NIL
   dbfTblPro   := NIL
   dbfFamilia  := NIL
   dbfAlmT     := NIL
   oStock      := NIL
   dbfIva      := NIL

RETURN .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbfHisMov, oBrw, bWhen, bValid, nMode )

    local oDlg
    local oSayAli
    local cSayAli
    local oSayArt
    local cSayArt
   local oSayPr1
   local oSayPr2
   local cSayPr1  := ""
   local cSayPr2  := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1  := ""
   local cSayVp2  := ""
   local oGetStk
    local nGetStk    := 0
    local aOld        := aClone( aTmp )

    IF nMode == 1
        aTmp[ 1 ]     := date()
        aTmp[ 2 ]    := substr( time(), 1, 5 )
    end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "movimientos de almacen", "REGALM",, .F.,,,,,, .F.,,,,,, .F., )





      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )








        aGet[ 3 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oDlg,,, {||    ( cAlmacen( aGet[ 3 ], dbfAlmT, oSayAli ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 3 ], oSayAli ) )}, nil, "LUPA",, )




        oSayAli := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cSayAli, cSayAli:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )








        aGet[ 5 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oDlg,,, {||    ( LoaArt( aGet, aTmp, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayArt, oGetStk ) )}, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 5 ], oSayArt ) )}, nil, "LUPA",, )




        oSayArt := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSayArt, cSayArt:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )












      aGet[8] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oDlg,,, {||    ( lPrpAct(     aGet[ 8 ], oSayVp1, aTmp[ 6 ], dbfTblPro ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPrpAct(   aGet[ 8 ], oSayVp1, aTmp[ 6 ] ) )}, nil, "LUPA",, )



      oSayPr1 := TSay():ReDefine( 221, {|| cSayPr1}, oDlg,,,, .F.,, .F., .F. )





      oSayVp1 := TGetHlp():ReDefine( 222, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[9] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oDlg,,, {||    ( lPrpAct(     aGet[ 9 ], oSayVp2, aTmp[ 7 ], dbfTblPro ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPrpAct(   aGet[ 9 ], oSayVp2, aTmp[ 7 ] ) )}, nil, "LUPA",, )



      oSayPr2 := TSay():ReDefine( 231, {|| cSayPr2}, oDlg,,,, .F.,, .F., .F. )





      oSayVp2 := TGetHlp():ReDefine( 232, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      oGetStk := TSay():ReDefine( 130, {|| nGetStk}, oDlg, cPicUnd, "N/W*",, .F.,, .F., .F. )







        aGet[ 10 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





        TButton():ReDefine( 1, {||( ChkCodAlm( aTmp, aOld, aGet, nGetStk, dbfHisMov, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 1
         oDlg:bStart := {|| EvalGet( aGet ) }
      end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION ChkCodAlm( aTmp, aOld, aGet, nGetStk, dbfHisMov, oBrw, nMode, oDlg )

   IF empty( aTmp[ 3 ] )
      msgAlert( "El almacen no puede estar vacio." )
        RETURN .F.
    end

    IF empty( aTmp[ 5 ] )
        msgAlert( "Articulo no encontrado" )
        RETURN .F.
    end

   IF aTmp[ 10 ] == 0
        msgAlert( "Cantidad no valida" )
        RETURN .F.
    end





    IF nMode == 2
      oStock:lAppStock( aOld[ 5 ], aOld[ 3 ], aOld[ 8 ], aOld[ 9 ], - aOld[ 10 ] )
   end





   oStock:lAppStock( aTmp[ 5 ], aTmp[ 3 ], aTmp[ 8 ], aTmp[ 9 ], aTmp[ 10 ] )





    WinGather( aTmp, aGet, dbfHisMov, oBrw, nMode )

   oDlg:end( 1 )

RETURN .T.







STATIC FUNCTION delDet( oBrw, dbfHisMov )

   IF oUser():lNotConfirmDelete() .OR.  ApoloMsgNoYes( "¿ Desea eliminar definitivamente este registro ?" )

        putStock( ( dbfHisMov )->CREFMOV, ( dbfHisMov )->CALIMOV, - ( dbfHisMov )->NUNDMOV, dbfMov )

        delRecno( dbfHisMov, oBrw )

    end

RETURN NIL



STATIC FUNCTION GenReport( dbfHisMov )

   local oAlmOrg
   local cAlmOrg     := space( 3 )
   local oAlmDes
   local cAlmDes     := space( 3 )
   local oSayOrg
   local cSayOrg     := ""
   local oSayDes
   local cSayDes     := ""
   local dFecOrg     := date()
   local dFecDes     := date()
   local cTitulo     := Padr( cCodEmp() + " - " + cNbrEmp(), 100 )
   local cSubTitulo  := Padr( "Listado de regularización de almacenes", 100 )
   local oDlg





   oDlg = TDialog():New(,,,,, "REP_MOVALM",, .F.,,,,,, .F.,,,,,, .F., )







   oAlmOrg := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cAlmOrg, cAlmOrg:= u ) }, oDlg,,, {||    cAlmacen( oAlmOrg, , oSayOrg )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oAlmOrg, oSayOrg )}, nil, "LUPA",, )





   oSayOrg := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSayOrg, cSayOrg:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( if( empty( cAlmOrg ), ( oSayOrg:ctext( "TODOS LOS ALMACENES" ), .F. ), .F. ) )},, .F., .F.,,,,,, nil,,, )







   oAlmDes := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cAlmDes, cAlmDes:= u ) }, oDlg,,, {||    cAlmacen( oAlmDes, , oSayDes )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oAlmDes, oSayDes )}, nil, "LUPA",, )





   oSayDes := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cSayDes, cSayDes:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( if( empty( cAlmDes ), ( oSayDes:ctext( "TODOS LOS ALMACENES" ), .F. ), .F. ) )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, dFecOrg, dFecOrg:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, dFecDes, dFecDes:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



    TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cTitulo, cTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



    TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cSubTitulo, cSubTitulo:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




    TButton():ReDefine( 506, {||( PrnReport( cAlmOrg, cAlmDes, dFecOrg, dFecDes, cTitulo, cSubTitulo, 1 ) )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 505, {||( PrnReport( cAlmOrg, cAlmDes, dFecOrg, dFecDes, cTitulo, cSubTitulo, 2 ) )}, oDlg,,, .F.,,,, .F. )




    TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( oAlmOrg:lValid(), oAlmDes:lValid() )}, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION PrnReport( cAlmOrg, cAlmDes, dFecOrg, dFecDes, cTitulo, cSubTitulo, nDevice )

   local oReport
   local oFont1
   local oFont2
    local nRecno         := ( dbfHisMov )->( recno() )

   ( dbfHisMov )->( dbGoTop() )





   oFont1 := TFont():New( "Courier New", 0, -10,, .T.,,,,,,,,,,,, )
   oFont2 := TFont():New( "Courier New", 0, -10,,,,,,,,,,,,,, )

   IF nDevice == 1








      oReport := RptBegin({{||    Rtrim( cTitulo )}, {|| Rtrim( cSubTitulo )}}, {{||   "Fecha: " + dtoc( date() )}}, {{||   "Página : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2}, {}, .F.,,,, .T.,,, "Listado movimientos de almacen",, UPPER("RIGHT"), UPPER("CENTERED") )

   ELSE








      oReport := RptBegin({{||    Rtrim( cTitulo )}, {|| Rtrim( cSubTitulo )}}, {{||   "Fecha: " + dtoc(date())}}, {{||   "Página : " + str( oReport:nPage, 3)}}, {oFont1, oFont2}, {}, .F.,,, .T., .F.,,, "Listado movimientos de almacen",, UPPER("RIGHT"), UPPER("CENTERED") )

   end



      RptAddColumn( {{|| "Fecha"}}, , {{|| ( dbfHisMov )->DFECMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )



      RptAddColumn( {{|| "Hora"}}, , {{|| ( dbfHisMov )->CHORMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )



      RptAddColumn( {{|| "Alm. Org."}}, , {{|| ( dbfHisMov )->CALOMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )



      RptAddColumn( {{|| "Alm. Des."}}, , {{|| ( dbfHisMov )->CALIMOV}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )



      RptAddColumn( {{|| "Ref."}}, , {{|| ( dbfHisMov )->CREFMOV + retArticulo(  ( dbfHisMov )->CREFMOV, dbfArticulo )}},, {} , {|| 2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )





      RptAddColumn( {{|| "Und."}}, , {{|| ( dbfHisMov)->NUNDMOV}},, {cPicUnd} , {|| 2}, .T., ,, .F., .F.,, .F., .F.,,, .F., )

   RptEnd()

   IF !Empty( oReport ) .AND.  oReport:lCreated
      oReport:Margin(0, 2, 2)
      oReport:bSkip := {|| ( dbfHisMov )->( dbSkip() ) }
   end






   oReport:Activate({||   ( dbfHisMov )->DFECMOV >= dFecOrg .AND. ( dbfHisMov )->DFECMOV <= dFecDes .AND. ( ( dbfHisMov )->CALOMOV == cAlmOrg .OR. empty( cAlmOrg ) ) .AND. ( ( dbfHisMov )->CALIMOV == cAlmDes .OR. empty( cAlmDes ) )}, {|| !( dbfHisMov )->( eof() )},,,,,,,,,,,, )

   oFont1:end()
   oFont2:end()

   ( dbfHisMov )->( dbGoTo( nRecno ) )

RETURN NIL



static function lNotOpen()

   if NetErr()
      msgAlert( "Imposible abrir ficheros." )
      CloseFiles()
      return .T.
   end

return .F.



static function LoaArt( aGet, aTmp, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oSayArt, oGetStk )

   local lValid   := .F.
   local xValor   := aGet[5]:varGet()





   xValor         := cSeekCodebar( xValor, dbfCodebar, dbfArticulo )





   IF ( dbfArticulo )->( dbSeek( xValor ) )

      aGet[ 5 ]:cText( ( dbfArticulo )->Codigo )

      oSayArt:cText( ( dbfArticulo )->Nombre )





      aTmp[6 ] := ( dbfArticulo )->cCodPrp1
      aTmp[7 ] := ( dbfArticulo )->cCodPrp2

      IF !empty( aTmp[6 ] )
         aGet[8 ]:show()
         oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1 ) )
         oSayPr1:show()
         oSayVp1:Show()
      ELSE
         aGet[8 ]:hide()
         oSayPr1:hide()
         oSayVp1:hide()
      end

      IF !empty( aTmp[7 ] )
         aGet[9 ]:show()
         oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2 ) )
         oSayPr2:show()
         oSayVp2:Show()
      ELSE
         aGet[9 ]:hide()
         oSayPr2:hide()
         oSayVp2:hide()
      end





      oStock:nPutStockActual( aTmp[ 5 ], aTmp[ 3 ], aTmp[ 8 ], aTmp[ 9 ], nil, aTmp[ 12 ], aTmp[ 13 ], oGetStk )

      lValid   := .T.

   ELSE

      msgStop( "Artículo no encontrado" )
      lValid   := .F.

   end

return lValid

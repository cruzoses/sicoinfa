#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 5 ".\Prg\Toleexcel.prg"
_HB_CLASS TOleExcel ; UTILITY FUNCTION TOleExcel(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TOleExcel" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { cTitle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cTitle" }, .F., .F. ), )
   _HB_MEMBER { lMeter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lMeter" }, .F., .F. ), )
   _HB_MEMBER { cMessage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cMessage" }, .F., .F. ), )

   _HB_MEMBER { oExcel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oExcel" }, .F., .F. ), )
   _HB_MEMBER { oClipBoard} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oClipBoard" }, .F., .F. ), )

   _HB_MEMBER { oWaitMeter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oWaitMeter" }, .F., .F. ), )

   _HB_MEMBER { lError} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lError" }, .F., .F. ), )

   _HB_MEMBER New(); IIF( .F., s_oClass:ModMethod( "New", @TOleExcel_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TOleExcel_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ExportBrowse( oBrowse); IIF( .F., s_oClass:ModMethod( "ExportBrowse", @TOleExcel_ExportBrowse(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ExportBrowse", @TOleExcel_ExportBrowse(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TOleExcel_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TOleExcel_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TOleExcel ;



UTILITY STATIC function TOleExcel_New( cTitle, cMessage, lMeter) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   local oBlock

   IIF( cTitle == nil, cTitle := "Espere por favor", ) ;
   IIF( lMeter == nil, lMeter := .T., ) ;
   IIF( cMessage == nil, cMessage := "Conectando con Excel", ) ;

   ::cTitle          := cTitle
   ::lMeter          := lMeter
   ::cMessage        := cMessage

   if ::lMeter
      ::oWaitMeter   := TWaitMeter():New( ::cTitle, ::cMessage )
   end

   TRY
      ::oExcel       := GetActiveObject( "Excel.Application" )
   CATCH
      TRY
         ::oExcel    := CreateObject( "Excel.Application" )
      CATCH
         ::lError    := .T.
         MsgStop( "ERROR! Excel no disponible. [" + Ole2TxtError()+ "]" )
         RETURN ( Self )
      END
   END

   ::oClipBoard   := TClipBoard():New()
   ::oClipBoard:Clear()

Return ( Self )



UTILITY STATIC function TOleExcel_ExportBrowse( oBrowse) ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   local nRec
   local nRow
   local nCol
   local uData
   local oBook
   local oSheet
   local oRange
   local cCell
   local cRange
   local aText
   local nLine       := 1
   local nStart      := 1
   local cText       := ""
   local nBrowseLen
   local nBrowseHead
   local nBrowseAt
   local nEvery

   if ::lError
      Return ( Self )
   end

   nBrowseLen        := oBrowse:nLen
   nBrowseHead       := len( oBrowse:aHeaders )
   nBrowseAt         := oBrowse:nAt
   nEvery            := Max( 1, Int( nBrowseLen / 10 ) )


   if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
      nRec           := ( oBrowse:cAlias )->( Recno() )
   end

   if ::lMeter
      ::oWaitMeter:SetTotal( nBrowseLen )
      ::oWaitMeter:SetMessage( "Exportando datos a Excel" )
   end

   ::oExcel:WorkBooks:Add()

   oBook             := ::oExcel:Get( "ActiveWorkBook")
   oSheet            := ::oExcel:Get( "ActiveSheet" )

   oBrowse:GoTop()

   for nRow := 1 to nBrowseLen

      if nRow == 1

         oSheet:Cells( nLine++, 1 ):Value := "GST+ exportación a Excel"
         oSheet:Range( "A1:" + Chr( 64 + nBrowseHead ) + "1" ):HorizontalAlignment := 7
         ++nLine
         nStart      := nLine

         for nCol := 1 To nBrowseHead

            uData    := oBrowse:aHeaders[ nCol ]

            if ValType( uData ) <> "C"
               loop
            end

            cText    += StrTran( uData, Chr(13)+Chr(10), Chr( 10 ) ) + Chr( 9 )

         next

         cText       += Chr( 13 )

      end

      aText          := Eval( oBrowse:bLine )

      for nCol := 1 To Len( aText )

         if ValType( aText[ nCol ] ) <> "C"
            uData    := ""
         else
            uData    := StrTran( aText[ nCol ], Chr(13)+Chr(10), Chr( 10 ) )
         end

         cText       += AllTrim( uData ) + Chr( 9 )

      next

      oBrowse:Skip( 1 )

      SysRefresh()

      if ::lMeter .AND. Mod( nRow, nEvery ) == 0
         ::oWaitMeter:RefreshMeter( nRow )
      end

      cText          += Chr( 13 )

      ++nLine





      if Len( cText ) > 20000

         ::oClipBoard:Clear()
         ::oClipBoard:SetText( cText )

         cCell       := "A" + Alltrim( Str( nStart ) )
         oRange      := oSheet:Range( cCell )
         oRange:Select()
         oSheet:Paste()

         cText       := ""
         nStart      := nLine + 1

      end

   next

   if !Empty( oBrowse:cAlias ) .AND. Upper( oBrowse:cAlias ) <> "ARRAY" .AND. Upper( oBrowse:cAlias ) <> "_TXT_"
      ( oBrowse:cAlias )->( dbGoTo( nRec ) )
   end

   oBrowse:nAt          := nBrowseAt

   if Len( cText ) > 0
      ::oClipBoard:Clear()
      ::oClipBoard:SetText( cText )

      cCell             := "A" + Alltrim( Str( nStart ) )
      oRange            := oSheet:Range( cCell )
      oRange:Select()
      oSheet:Paste()

      cText             := ""
   end

   cRange               := "A3:" + Chr( 64 + nBrowseHead ) + Alltrim( Str( oSheet:UsedRange:Rows:Count() ) )
   oRange               := oSheet:Range( cRange )

   if oBrowse:oFont <> nil
      oRange:Font:Name  := oBrowse:oFont:cFaceName
      oRange:Font:Size  := Abs( oBrowse:oFont:nSize() )
      oRange:Font:Bold  := oBrowse:oFont:lBold
   end

   oRange:Borders():LineStyle  := 1

   oRange:Columns:AutoFit()

   oSheet:Range( "A1" ):Select()

   if ::lMeter
      ::oWaitMeter:RefreshMeter( nBrowseLen )
   end

   ::oExcel:Visible     := .T.

Return ( Self )



UTILITY STATIC function TOleExcel_End() ; local Self AS CLASS TOleExcel := QSelf() AS CLASS TOleExcel

   if !Empty( ::oExcel )
      ::oExcel := nil
   end

   if !Empty( ::oClipBoard )
      ::oClipBoard:End()
   end

   if ::lMeter
      ::oWaitMeter:End()
   end

Return ( Self )

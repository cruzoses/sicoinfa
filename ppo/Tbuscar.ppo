#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 12 ".\Prg\Tbuscar.prg"
_HB_CLASS TBuscar ; UTILITY FUNCTION TBuscar(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TBuscar" , {TDialog():classh} ) ) ; ;

      _HB_MEMBER {AS ARRAY aCampos} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aCampos" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aTitulos} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aTitulos" }, .F., .F. ), )
      _HB_MEMBER { aSizes} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aSizes" }, .F., .F. ), )
      _HB_MEMBER { cAlias} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cAlias" }, .F., .F. ), )
      _HB_MEMBER { cField} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cField" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aJustify} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aJustify" }, .F., .F. ), )
      _HB_MEMBER { nOrdenAnt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nOrdenAnt" }, .F., .F. ), )
      _HB_MEMBER { uOrden} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "uOrden" }, .F., .F. ), )
      _HB_MEMBER {AS ARRAY aOrd} ; IIF( !.F., s_oClass:AddMultiData( "ARRAY", {}, nScope + IIF( .F., 32, 0 ), { "aOrd" }, .F., .F. ), )
      _HB_MEMBER { bAlta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAlta" }, .F., .F. ), )
      _HB_MEMBER { bEdit} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bEdit" }, .F., .F. ), )
      _HB_MEMBER { bZoom} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bZoom" }, .F., .F. ), )

      _HB_MEMBER {AS OBJECT oBmp} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oBmp" }, .F., .F. ), )
      _HB_MEMBER {AS OBJECT oRdo} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oRdo" }, .F., .F. ), )
      _HB_MEMBER { uVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "uVal" }, .F., .F. ), )

      _HB_MEMBER { cCampo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCampo" }, .F., .F. ), )
      _HB_MEMBER { uVal1} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "uVal1" }, .F., .F. ), )
      _HB_MEMBER { uVal2} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "uVal2" }, .F., .F. ), )
      _HB_MEMBER {AS NUMERIC nRecno} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC",, nScope + IIF( .F., 32, 0 ), { "nRecno" }, .F., .F. ), )

      _HB_MEMBER {AS OBJECT oBrw} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oBrw" }, .F., .F. ), )

      _HB_MEMBER New( cCaption, cAlias, uOrden, cField, aOrd, aCampos, aTitulos, aSizes, bAlta, bEdit, bZoom, aJustify) AS CLASS TBuscar; IIF( .F., s_oClass:ModMethod( "New", @TBuscar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TBuscar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Create( oParent, cField); IIF( .F., s_oClass:ModMethod( "Create", @TBuscar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TBuscar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

      _HB_MEMBER Resources(); IIF( .F., s_oClass:ModMethod( "Resources", @TBuscar_Resources(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resources", @TBuscar_Resources(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER aFields(); IIF( .F., s_oClass:ModMethod( "aFields", @TBuscar_aFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "aFields", @TBuscar_aFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

      _HB_MEMBER SetFilter( cfield, uVal1, uVal2); IIF( .F., s_oClass:ModMethod( "SetFilter", @TBuscar_SetFilter(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetFilter", @TBuscar_SetFilter(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER ChangeGet( uBuffer); IIF( .F., s_oClass:ModMethod( "ChangeGet", @TBuscar_ChangeGet(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ChangeGet", @TBuscar_ChangeGet(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Append(); IIF( .F., s_oClass:ModMethod( "Append", @TBuscar_Append(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Append", @TBuscar_Append(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Edit(); IIF( .F., s_oClass:ModMethod( "Edit", @TBuscar_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Edit", @TBuscar_Edit(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Zoom(); IIF( .F., s_oClass:ModMethod( "Zoom", @TBuscar_Zoom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Zoom", @TBuscar_Zoom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

      _HB_MEMBER Getfield(); IIF( .F., s_oClass:ModMethod( "Getfield", @TBuscar_Getfield(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Getfield", @TBuscar_Getfield(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @TBuscar_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TBuscar_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
      _HB_MEMBER End( nResult); IIF( .F., s_oClass:ModMethod( "End", @TBuscar_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TBuscar_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TBuscar ;




UTILITY STATIC function TBuscar_New( cCaption, cAlias, uOrden, cField, aOrd, aCampos, aTitulos, aSizes, bAlta, bEdit, bZoom, aJustify) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   IIF( cAlias == nil, cAlias := Alias(), ) ;
   IIF( cCaption == nil, cCaption := "Busqueda incremental de " + cAlias, ) ;
   IIF( uOrden == nil, uOrden := ( cAlias )->( OrdSetFocus() ), ) ;
   IIF( cField == nil, cField := ( cAlias )->( FieldName( 1 ) ), ) ;
   IIF( aOrd == nil, aOrd := { ( cAlias )->( OrdName( 0 ) ) }, ) ;
   IIF( aCampos == nil, aCampos := { ( cAlias )->( FieldGet( 1 ) ), ( cAlias )->( FieldGet( 2 ) ) }, ) ;
   IIF( aTitulos == nil, aTitulos := { ( cAlias )->( FieldName( 1 ) ), ( cAlias )->( FieldName( 2 ) ) }, ) ;

   ::cAlias          := cAlias
   ::cField          := cField
   ::aOrd            := aOrd
   ::uOrden          := uOrden
   ::aCampos         := aCampos
   ::aTitulos        := aTitulos
   ::aSizes          := aSizes
   ::bAlta           := bAlta
   ::bEdit           := bEdit
   ::bZoom           := bZoom
   if aJustify  <> nil
      ::aJustify     := aJustify
   end

   ::nOrdenAnt       := ( ::cAlias )->( OrdSetFocus( uOrden ) )
   ::nRecno          := ( ::cAlias )->( Recno() )

   ( ::cAlias )->( dbGoTop() )

   ::TDialog:New( nil, nil, nil, nil, cCaption, "HELPENTRY", GetResources() )

   ::Resources()

Return ( Self )



UTILITY STATIC function TBuscar_Resources() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local oGet
   local cGet     := Space( 100 )
   local oCbxOrd
   local cCbxOrd
   local nOrdAnt  := GetBrwOpt( ::cCaption )

   nOrdAnt        := Min( Max( nOrdAnt, 1 ), len( ::aOrd ) )
   cCbxOrd        := ::aOrd[ nOrdAnt ]

   ( ::cAlias )->( OrdSetFocus( nOrdAnt ) )

   ( ::cAlias )->( dbGoTop() )





   oGet := TGet():ReDefine( 104, { | u | If( PCount()==0, cGet, cGet:= u ) }, Self,, "@!",,,,,,, .F.,,, .F., .F.,,,,,, "FIND", "cGet", )

   oGet:bChange         := {|nKey, nFlags| AutoSeek( nKey, nFlags, oGet, ::oBrw, ::cAlias, .T. ) }
   oGet:bValid          := {|| OrdClearScope( ::oBrw, ::cAlias ), ::oBrw:Refresh(), .T. }




   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, ::aOrd, Self,,,,,,, .F.,,,,,, )
   oCbxOrd:bChange      := {|| ( ::cAlias )->( OrdSetFocus( oCbxOrd:nAt ) ), ::oBrw:Refresh(), oGet:SetFocus() }






   ::oBrw               := TWBrowse():Redefine( 105, {|| ::aFields() }, Self, ::aTitulos, ::aSizes, , , , , , , , , , , , , ::cAlias  )
   ::oBrw:blDblClick    := {|| ::End( 1 ) }
   ::oBrw:aJustify      := ::aJustify





   TButton():ReDefine( 500, {||::Append()}, Self,,, .F., {||     ::bAlta <> nil .AND. !IsReport()},,, .F. )





   TButton():ReDefine( 501, {||::Edit()}, Self,,, .F., {||     ::bEdit <> nil .AND. !IsReport()},,, .F. )




   TButton():ReDefine( 1, {||( ::end( 1 ) )}, Self,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::end() )}, Self,,, .F.,,,, .F. )

   ::bStart             := {|| oGet:SetFocus()  }

return ( NIL )



UTILITY STATIC function TBuscar_aFields() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local i
   local nPos
   local aFields        := Array( len( ::aCampos ) )

   for i := 1 to len( ::aCampos )
      if ValType( ::aCampos[ i ] ) == "C"
         nPos           := ( ::cAlias )->( fieldPos( ::aCampos[ i ] ) )
         aFields[ i ]   := ( ::cAlias )->( fieldGet( nPos ) )
         aFields[ i ]   := cValToChar( aFields[ i ] )
      else
         aFields[ i ]   := cValToChar( eval( ::aCampos[ i ] ) )
      endif
   next

return ( aFields )



UTILITY STATIC function TBuscar_SetFilter( cField, uVal1, uVal2) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   ::cCampo := cField
   ::uVal1  := uVal1
   ::uVal2  := uVal2
   ::oBrw:SetFilter( ::cCampo, ::uVal1, ::uVal2 )
   ::oBrw:Refresh()

return nil



UTILITY STATIC function TBuscar_ChangeGet( uBuffer) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local xValor

   if ::cCampo <> NIL
      uBuffer := ::uVal1 + uBuffer
   end

   xValor   := ( ::cAlias )->( ordKeyVal() )

   if ValTYpe( xValor ) == "N"
      uBuffer := Val( uBuffer )
   endif

   DbSeek( uBuffer , .T. )
   ::oBrw:Refresh()

return nil



UTILITY STATIC function TBuscar_Append() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bAlta <> NIL
      Eval( ::bAlta , Self )
      ::oBrw:refresh()
   endif

return nil



UTILITY STATIC function TBuscar_Edit() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bEdit <> NIL
      Eval( ::bEdit , Self )
      ::oBrw:refresh()
   endif

return nil



UTILITY STATIC function TBuscar_Zoom() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if ::bZoom <> NIL
      Eval( ::bZoom , Self )
      ::oBrw:refresh()
   endif

return nil



UTILITY STATIC function TBuscar_Getfield() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

return ( ::uVal )



UTILITY STATIC function TBuscar_Activate() ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   if !IsReport()
      ::AddFastKey( 113, {|| ::Append() } )
      ::AddFastKey( 114, {|| ::Edit() } )
   end

   ::AddFastKey( 116, {|| ::End( 1 ) } )

Return ::TDialog:Activate( , , , .T. )



UTILITY STATIC function TBuscar_End( nResult) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   IIF( nResult == nil, nResult := 2, ) ;

   ::TDialog:End( nResult )

   if nResult == 1
      ::uVal := ( ::cAlias )->( fieldGet( fieldPos( ::cField ) ) )
   endif

return .T.



UTILITY STATIC function TBuscar_Create( oParent, cField) ; local Self AS CLASS TBuscar := QSelf() AS CLASS TBuscar

   local oGet
   local cGet           := Space( 100 )
   local oBrw
   local oDbf
   local oIndex
   local oField
   local oCbxOrd
   local cCbxOrd
   local aIndex         := {}
   local nOrdAnt        := 2
   local cCaption

   if Empty( oParent )
      MsgStop( "No se ha definido objeto padre en la clase busqueda." )
      Return ( Self )
   end

   oDbf                 := oParent:oDbf
   ::cField             := cField

   cCaption             := "Buscando " + Rtrim( Lower( oDbf:cComment ) )





   for each oIndex in oDbf:aTIndex
      if !Empty( oIndex:cComment )
         aAdd( aIndex, oIndex:cComment )
      end
   next





   nOrdAnt              := Min( Max( nOrdAnt, 1 ), len( aIndex ) )
   cCbxOrd              := aIndex[ nOrdAnt ]





   oDbf:OrdSetFocus( nOrdAnt )

   oDbf:GoTop()





   ::TDialog:New( , , , , cCaption, "HELPENTRY", GetResources() )




   oGet := TGet():ReDefine( 104, { | u | If( PCount()==0, cGet, cGet:= u ) }, Self,, "@!",,,,,,, .F.,,, .F., .F.,,,,,,, "cGet", )
   oGet:bChange            := {|| oGet:Assign(), oBrw:Seek( Alltrim( oGet:VarGet() ) ) }




   oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aIndex, Self,,,,,,, .F.,,,,,, )
   oCbxOrd:bChange         := {|| oDbf:OrdSetFocus( oCbxOrd:nAt ), oBrw:Refresh(), oGet:SetFocus() }






   oBrw                    := IXBrowse():New( Self )


   oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrw:nMarqueeStyle      := 5

   oBrw:cName              := cCaption

   oBrw:bSeek              := {|c| oDbf:Seek( c ) }
   oBrw:oSeek              := oGet

   oBrw:bLDblClick         := {|| ::end( 1 ) }
   oBrw:bRClicked          := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

   oDbf:SetBrowse( oBrw )





   for each oField in oDbf:aTField

      if ! oField:lHide

         with object ( oBrw:AddCol() )

            :cHeader          := oField:cComment
            :nWidth           := oField:nColSize

            if oField:lCalculate
               :bEditValue    := oField:bSetGet
            else
               :bEditValue    := oField:bDirect
            end

            if !Empty( oField:aBitmaps )
               :bStrData      := {|| "" }
               :SetCheck( oField:aBitmaps )
            end

            if oField:lColAlign
               :nDataStrAlign := 1
               :nHeadStrAlign := 1
            end

            if aScan( aIndex, {|cIndex| cIndex == :cHeader } ) <> 0
               :cSortOrder    := oField:cName
               :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), oBrw:GoTop() }
            end

         end

      endif

   next

   oBrw:CreateFromResource( 105 )









   TButton():ReDefine( 500, {||( oParent:Append( oBrw ) )}, Self,,, .F., {||     ( !IsReport() )},,, .F. )





   TButton():ReDefine( 501, {||( oParent:Edit( oBrw ) )}, Self,,, .F., {||     ( !IsReport() )},,, .F. )




   TButton():ReDefine( 1, {||( ::end( 1 ) )}, Self,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::end() )}, Self,,, .F.,,,, .F. )

   ::bStart    := {|| oBrw:Load(), oGet:SetFocus() }

   if !IsReport()
      ::AddFastKey( 113, {|| ::Append( oBrw ) } )
      ::AddFastKey( 114, {|| ::Edit( oBrw ) } )
   end

   ::AddFastKey( 116, {|| ::end( 1 ) } )

   ::TDialog:Activate( , , , .T. )





   if ::nResult == 1
      ::uVal   := oDbf:FieldGetByName( ::cField )
   endif

Return ( Self )

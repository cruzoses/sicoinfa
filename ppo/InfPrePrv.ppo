#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfPrePrv.prg"
_HB_CLASS InfPrevisionPagos ; UTILITY FUNCTION InfPrevisionPagos(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfPrevisionPagos" , {TNewInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oFacPrvP} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacPrvP" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacPrvT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacPrvT" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfPrevisionPagos_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfPrevisionPagos_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfPrevisionPagos_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfPrevisionPagos_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @InfPrevisionPagos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @InfPrevisionPagos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @InfPrevisionPagos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @InfPrevisionPagos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfPrevisionPagos_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfPrevisionPagos_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfPrevisionPagos ;



UTILITY STATIC function InfPrevisionPagos_Create() ; local Self AS CLASS InfPrevisionPagos := QSelf() AS CLASS InfPrevisionPagos

   ::AddField( "cTipDoc",   "C", 20, 0, {|| "@!" },      "Tipo",              .F., "Tipo documento",                    15, .F. )
   ::AddField( "cNumDoc",   "C", 17, 0, {|| "@!" },      "N. Recibo",         .T., "Número recibo",                     15, .F. )
   ::AddField( "cCodGPrv",  "C",  4, 0, {|| "@!" },      "Grp. prv.",         .F., "Cod. grupo proveedor",               9, .F. )
   ::AddField( "cNomGPrv",  "C", 30, 0, {|| "@!" },      "Grupo",             .F., "Nombre grupo",                      35, .F. )
   ::AddField( "cCodPrv",   "C", 12, 0, {|| "@!" },      "Prv.",              .F., "Cod. proveedor",                     9, .F. )
   ::AddField( "cNomPrv",   "C", 50, 0, {|| "@!" },      "Proveedor",         .F., "Nombre proveedor",                  35, .F. )
   ::AddField( "cCodFpg",   "C",  2, 0, {|| "@!" },      "Cod. pago",         .F., "Cod. pago",                          9, .F. )
   ::AddField( "cNomFpg",   "C", 30, 0, {|| "@!" },      "Forma de pago",     .F., "Forma de pago",                     35, .F. )
   ::AddField( "dFecMov",   "D",  8, 0, {|| "@!" },      "F. Exped.",         .T., "Fecha expedición",                  12, .F. )
   ::AddField( "dFecPre",   "D",  8, 0, {|| "@!" },      "F. Vncto.",         .T., "Fecha de vencimiento",              12, .F. )
   ::AddField( "cSuDoc",    "C", 20, 0, {|| "@!" },      "N. Documento",      .T., "Número de documento",               12, .F. )
   ::AddField( "cDescrip",  "C",100, 0, {|| "@!" },      "Descrip.",          .T., "Concepto del pago",                 50, .F. )
   ::AddField( "nImporte",  "N", 16, 3, {|| ::cPicOut }, "Importe",           .T., "Importe",                           15, .F. )
   ::AddField( "cBanco",    "C", 50, 0, {|| "@!" },      "Banco proveedor",   .F., "Nombre del banco del proveedor",    20, .F. )
   ::AddField( "cCuenta",   "C", 30, 0, {|| "@!" },      "Cuenta proveedor",  .F., "Cuenta bancaria del proveedor",     35, .F. )
   ::AddField( "cBncEmp",   "C", 50, 0, {|| "@!" },      "Banco empresa",     .F., "Nombre del banco de la empresa",    20, .F. )
   ::AddField( "cCtaEmp",   "C", 30, 0, {|| "@!" },      "Cuenta empresa",    .F., "Cuenta bancaria de la empresa",     35, .F. )

   ::AddTmpIndex( "cNumDoc", "cNumDoc" )
   ::AddTmpIndex( "dFecMov", "dFecMov" )
   ::AddTmpIndex( "dFecPre", "dFecPre" )

   ::lExcCero  := .F.

RETURN ( Self )



UTILITY STATIC function InfPrevisionPagos_OpenFiles() ; local Self AS CLASS InfPrevisionPagos := QSelf() AS CLASS InfPrevisionPagos

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oFacPrvP := DbfServer( "FACPRVP.DBF", ):NewOpen( "FACPRVP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FACPRVP.CDX" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

      ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function InfPrevisionPagos_CloseFiles() ; local Self AS CLASS InfPrevisionPagos := QSelf() AS CLASS InfPrevisionPagos

   if !Empty( ::oFacPrvP ) .AND. ::oFacPrvP:Used()
      ::oFacPrvP:End()
   end

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end

   ::oFacPrvP := nil
   ::oFacPrvT := nil

RETURN ( Self )



UTILITY STATIC function InfPrevisionPagos_lResource( cFld) ; local Self AS CLASS InfPrevisionPagos := QSelf() AS CLASS InfPrevisionPagos

   ::dIniInf            := nFirstDay( Month( Date() ) )
   ::lGrpFecInf         := .F.
   ::lNewInforme        := .T.
   ::lDefCondiciones    := .F.
   ::lDefEstadoUno      := .T.
   ::lDefEstadoDos      := .T.
   ::cEstadoUno         := "Ordenar por número"
   ::aEstadoUno         := { "Ordenar por número", "Ordenar por fecha exp.", "Ordenar por fecha prev." }
   ::cEstadoDos         := "Facturas"
   ::aEstadoDos         := { "Todas", "Facturas", "Rectificativas" }

   if !::NewResource( "INF_GEN_02" )
      return .F.
   end

   if !::lGrupoGProveedor( .F. )
      return .F.
   end

   if !::lGrupoProveedor( .F. )
      return .F.
   end

   if !::lGrupoFPago( .F. )
      return .F.
   end

   ::oDefExcInf( 1515 )

   ::CreateFilter( aItmRecPrv(), ::oFacPrvP:cAlias )

   ::oMtrInf:SetTotal( ::oFacPrvP:Lastrec() )

RETURN .T.






UTILITY STATIC function InfPrevisionPagos_lGenerate() ; local Self AS CLASS InfPrevisionPagos := QSelf() AS CLASS InfPrevisionPagos

   local cCodGPrv

   local cExpHead    := ""

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader   := {  {|| Padr( "Fecha", 13 ) + ": " + Dtoc( Date() ) }, {|| Padr( "Periodo", 13 ) + ": " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) } }

   if !::oGrupoGProveedor:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Grp. proveedor", 13 ) + ": " + AllTrim( ::oGrupoGProveedor:Cargo:Desde ) + " > " + AllTrim( ::oGrupoGProveedor:Cargo:Hasta ) } )
   end

   if !::oGrupoProveedor:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Proveedor", 13 ) + ": " + AllTrim( ::oGrupoProveedor:Cargo:Desde ) + " > " + AllTrim( ::oGrupoProveedor:Cargo:Hasta ) } )
   end

   if !::oGrupoFPago:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Forma de pago", 13 ) + ": " + AllTrim( ::oGrupoFPago:Cargo:Desde ) + " > " + AllTrim( ::oGrupoFPago:Cargo:Hasta ) } )
   end

   ::oFacPrvP:OrdSetFocus( "nNumFac" )

   if ::lExcCero
      cExpHead       := '!lCobrado .and. ( ( dFecVto >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecVto <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) ) .or. Empty( dFecVto ) )'
   else
      cExpHead       := '!lCobrado .and. ( ( dFecVto >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecVto <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) ) )'
   end

   if !::oGrupoProveedor:Cargo:Todos
      cExpHead       += '.and. cCodPrv >= "' + Rtrim( ::oGrupoProveedor:Cargo:Desde ) + '" .and. cCodPrv <= "' + Rtrim( ::oGrupoProveedor:Cargo:Hasta ) + '"'
   end

   if !::oGrupoFPago:Cargo:Todos
      cExpHead       += '.and. cCodPgo >= "' + Rtrim( ::oGrupoFPago:Cargo:Desde ) + '" .and. cCodPgo <= "' + Rtrim( ::oGrupoFPago:Cargo:Hasta ) + '"'
   end

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       += " .and. " + ::oFilter:cExpFilter
   end

   ::oFacPrvP:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacPrvP:cFile ), ::oFacPrvP:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oFacPrvP:OrdKeyCount() )

   ::oFacPrvP:GoTop()

   while !::oFacPrvP:Eof()

      cCodGPrv    := RetFld( ::oFacPrvP:cCodPrv, ::oDbfPrv:cAlias, "cCodGrp" )





      if ( ::oGrupoGProveedor:Cargo:Todos .OR. ( cCodGPrv >= ::oGrupoGProveedor:Cargo:Desde .AND. cCodGPrv <= ::oGrupoGProveedor:Cargo:Hasta ) ) .AND. Empty( ::oFacPrvP:dEntrada )                                                                                                            .AND. ( ::oEstadoDos:nAt == 1                                     .OR. ( ::oEstadoDos:nAt == 2 .AND. Empty( ::oFacPrvP:cTipRec ) ) .OR. ( ::oEstadoDos:nAt == 3 .AND. !Empty( ::oFacPrvP:cTipRec ) ) )

         ::oDbf:Append()

         ::oDbf:cTipDoc   := if( !Empty( ::oFacPrvP:cTipRec ), "Rectificativa", "Factura" )
         ::oDbf:cNumDoc   := ::oFacPrvP:cSerFac + "/" + AllTrim( Str( ::oFacPrvP:nNumFac ) ) + if( Empty( ::oFacPrvP:cSufFac ), "" + "-" + AllTrim( Str( ::oFacPrvP:nNumRec ) ), "/" + ::oFacPrvP:cSufFac + "-" + AllTrim( Str( ::oFacPrvP:nNumRec ) ) )
         ::oDbf:cCodGPrv  := cCodGPrv
         ::oDbf:cNomGPrv  := oRetFld( cCodGPrv, ::oGrpPrv:oDbf )
         ::oDbf:cCodPrv   := ::oFacPrvP:cCodPrv
         ::oDbf:cNomPrv   := ::oFacPrvP:cNomPrv
         ::oDbf:cCodFpg   := ::oFacPrvP:cCodPgo
         ::oDbf:cNomFpg   := oRetFld( ::oFacPrvP:cCodPgo, ::oDbfFpg )
         ::oDbf:dFecMov   := ::oFacPrvP:dPreCob
         ::oDbf:dFecPre   := ::oFacPrvP:dFecVto
         ::oDbf:cSuDoc    := ::oFacPrvT:cNumDoc
         ::oDbf:cDescrip  := ::oFacPrvP:cDesCrip
         ::oDbf:nImporte  := ::oFacPrvP:nImporte / ::oFacPrvP:nVdvPgo
         ::oDbf:cBanco    := AllTrim( cNombreBancoProvee( ::oFacPrvP:cCodPrv ) )

         ::oDbf:cCuenta   := Trans( cProveeCuenta( ::oFacPrvP:cCodPrv ), "@R ####-####-##-##########" )

         ::oDbf:cBncEmp   := ::oFacPrvP:cBncEmp
         ::oDbf:cCtaEmp   := ::oFacPrvP:cEntEmp + "-" + ::oFacPrvP:cSucEmp + "-" + ::oFacPrvP:cDigEmp + "-" + ::oFacPrvP:cCtaEmp

         ::oDbf:Save()

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc( ::oFacPrvP:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oFacPrvP:LastRec() )

   ::oFacPrvP:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacPrvP:cFile ) )

   do case
      case ::oEstadoUno:nAt == 1
         ::oDbf:OrdSetFocus( "cNumDoc" )

      case ::oEstadoUno:nAt == 2
         ::oDbf:OrdSetFocus( "dFecMov" )

      case ::oEstadoUno:nAt == 3
         ::oDbf:OrdSetFocus( "dFecPre" )

   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

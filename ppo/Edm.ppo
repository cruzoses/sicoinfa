#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 6 ".\Prg\Edm.prg"
static dbfRuta
static oTipArt



_HB_CLASS TEdm ; UTILITY FUNCTION TEdm(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TEdm" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )
   _HB_MEMBER { oFld} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFld" }, .F., .F. ), )
   _HB_MEMBER { oBrwRuta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwRuta" }, .F., .F. ), )
   _HB_MEMBER { oBrwTipo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwTipo" }, .F., .F. ), )
   _HB_MEMBER { oMetUno} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMetUno" }, .F., .F. ), )
   _HB_MEMBER { nMetUno} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMetUno" }, .F., .F. ), )
   _HB_MEMBER { oMetDos} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMetDos" }, .F., .F. ), )
   _HB_MEMBER { nMetDos} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMetDos" }, .F., .F. ), )
   _HB_MEMBER { oPath} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPath" }, .F., .F. ), )
   _HB_MEMBER { cPath} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPath" }, .F., .F. ), )
   _HB_MEMBER { oPathOrg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPathOrg" }, .F., .F. ), )
   _HB_MEMBER { cPathOrg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPathOrg" }, .F., .F. ), )
   _HB_MEMBER { lDelFiles} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lDelFiles" }, .F., .F. ), )
   _HB_MEMBER { oSerie} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSerie" }, .F., .F. ), )
   _HB_MEMBER { cSerie} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSerie" }, .F., .F. ), )
   _HB_MEMBER { oCodPgo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCodPgo" }, .F., .F. ), )
   _HB_MEMBER { cCodPgo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCodPgo" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TEdm_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TEdm_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TEdm_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TEdm_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate( oWnd); IIF( .F., s_oClass:ModMethod( "Activate", @TEdm_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TEdm_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelRuta( lSel); IIF( .F., s_oClass:ModMethod( "SelRuta", @TEdm_SelRuta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelRuta", @TEdm_SelRuta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SelAllRuta( lSel); IIF( .F., s_oClass:ModMethod( "SelAllRuta", @TEdm_SelAllRuta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelAllRuta", @TEdm_SelAllRuta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER MkSndEdm(); IIF( .F., s_oClass:ModMethod( "MkSndEdm", @TEdm_MkSndEdm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MkSndEdm", @TEdm_MkSndEdm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER MkRecEdm(); IIF( .F., s_oClass:ModMethod( "MkRecEdm", @TEdm_MkRecEdm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "MkRecEdm", @TEdm_MkRecEdm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TEdm ;



UTILITY STATIC function TEdm_OpenFiles( cPatEmp) ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( cPatEmp == nil, cPatEmp := cPatEmp(), ) ;

   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oTipArt           := TTipArt():New( cPatArt() )
   oTipArt:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN lOpen



UTILITY STATIC function TEdm_CloseFiles() ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   ( dbfRuta )->( dbCloseArea() )

   if !Empty( oTipArt )
      oTipArt:end()
   end

RETURN self



UTILITY STATIC function TEdm_Activate( oMenuItem, oWnd) ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   local oSayPgo
   local cSayPgo
   local oStru

   local nLevel      := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return ( nil )
   end

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return ( nil )
   end

   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !::OpenFiles()
      Return nil
   end

   oTipArt:SelectAll( .F. )

   ::SelAllRuta( .F. )

   ::nMetUno     := 0
   ::nMetDos     := 0
   ::cPath       := FullCurDir() + "PSION\"
   ::cPathOrg    := FullCurDir() + "PSION\"
   ::lDelFiles   := .T.
   ::cCodPgo     := cDefFpg()





   ::oDlg = TDialog():New(,,,,, "SND_EDM",, .F.,,,,, oWnd(), .F.,,,,,, .F., )







   ::oFld := TFolder():ReDefine( 500, {"&Exportar", "&Importar"}, { "SND_EDM1","SND_EDM2" }, ::oDlg,,,,, .F., )

   ::oBrwTipo                 := TXBrowse():New( ::oFld:aDialogs[ 1 ] )

   oTipArt:oDbf:SetBrowse( ::oBrwTipo, .F. )

   ::oBrwTipo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrwTipo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oBrwTipo:nMarqueeStyle   := 5

   ::oBrwTipo:CreateFromResource( 90 )

   with object ( ::oBrwTipo:addCol() )
      :cHeader       := "Se. Seleccionada"
      :bStrData      := {|| "" }
      :bEditValue    := {|| oTipArt:oDbf:lSelect }
      :nWidth        := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( ::oBrwTipo:addCol() )
      :cHeader       := "Código"
      :bEditValue    := {|| oTipArt:oDbf:cCodTip }
      :nWidth        := 50
   end

   with object ( ::oBrwTipo:addCol() )
      :cHeader       := "Descripción"
      :bEditValue    := {|| oTipArt:oDbf:cNomTip }
      :nWidth        := 200
   end

   ::oBrwTipo:bLDblClick := {|| oTipArt:InvSelect( ::oBrwTipo ) }




   TButton():ReDefine( 561, {||( oTipArt:InvSelect( ::oBrwTipo ) )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )




   TButton():ReDefine( 562, {||( oTipArt:SelectAll( .T., ::oBrwTipo ) )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )




   TButton():ReDefine( 563, {||( oTipArt:SelectAll( .F., ::oBrwTipo ) )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )





   ::oBrwRuta                 := TXBrowse():New( ::oFld:aDialogs[ 1 ] )

   ::oBrwRuta:cAlias          := dbfRuta

   ::oBrwRuta:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrwRuta:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oBrwRuta:nMarqueeStyle   := 5

   ::oBrwRuta:CreateFromResource( 100 )

   with object ( ::oBrwRuta:addCol() )
      :cHeader       := "Se. Seleccionada"
      :bStrData      := {|| "" }
      :bEditValue    := {|| ( dbfRuta )->lSelRut }
      :nWidth        := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( ::oBrwRuta:addCol() )
      :cHeader       := "Código"
      :bEditValue    := {|| ( dbfRuta )->cCodRut }
      :nWidth        := 50
   end

   with object ( ::oBrwRuta:addCol() )
      :cHeader       := "Descripción"
      :bEditValue    := {|| ( dbfRuta )->cDesRut }
      :nWidth        := 200
   end

   ::oBrwRuta:bLDblClick := {|| ::SelRuta() }





   ::oPath := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cPath, ::cPath:= u ) }, ::oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FOLDER",, )

   ::oPath:bHelp  := {|| ::oPath:cText( cGetDir32( "Seleccione destino" ) ) }




   TButton():ReDefine( 514, {||( ::SelRuta() )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )




   TButton():ReDefine( 516, {||( ::SelAllRuta( .T. ) )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )




   TButton():ReDefine( 517, {||( ::SelAllRuta( .F. ) )}, ::oFld:aDialogs[ 1 ],,, .F.,,,, .F. )






   ::oMetUno := TMeter():ReDefine( 120, { | u | If( PCount()==0, ::nMetUno, ::nMetUno:= u ) }, 100, ::oFld:aDialogs[ 1 ], .F.,, "Progreso", .F.,,,, )










   ::oPathOrg := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cPathOrg, ::cPathOrg:= u ) }, ::oFld:aDialogs[ 2 ],,,, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( ::oPathOrg:cText( cGetDir( "Seleccione destino" ) ) )}, nil, "FOLDER",, )



   TCheckBox():ReDefine( 120, { | u | If( PCount()==0, ::lDelFiles, ::lDelFiles:= u ) }, ::oFld:aDialogs[ 2 ],,,,,,, .F.,, .F. )





   ::oCodPgo := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cCodPgo, ::cCodPgo:= u ) }, ::oFld:aDialogs[ 2 ],, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      ::oCodPgo:bValid  := {|| cFPago( ::oCodPgo, , oSayPgo ) }
      ::oCodPgo:bHelp   := {|| BrwFPago( ::oCodPgo, oSayPgo ) }




   oSayPgo := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSayPgo, cSayPgo:= u ) }, ::oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   ::oMetDos := TMeter():ReDefine( 140, { | u | If( PCount()==0, ::nMetDos, ::nMetDos:= u ) }, 100, ::oFld:aDialogs[ 2 ], .F.,, "Progreso", .F.,,,, )








   TButton():ReDefine( 1, {||( if( ::oFld:nOption == 1, ::MkSndEdm(), ::MkRecEdm() ) )}, ::oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( ::oDlg:end() )}, ::oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 9, {||( ChmHelp( "ExportarDatos" ) )}, ::oDlg,,, .F.,,,, .F. )

   ::oDlg:AddFastKey( 116, {|| if( ::oFld:nOption == 1, ::MkSndEdm(), ::MkRecEdm() ) } )
   ::oDlg:AddFastKey( 112, {|| ChmHelp( "ExportarDatos" ) } )

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

   ::CloseFiles()

RETURN NIL



UTILITY STATIC function TEdm_SelRuta( lSel) ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   IIF( lSel == nil, lSel := !( dbfRuta )->lSelRut, ) ;

   if dbDialogLock( dbfRuta )
      ( dbfRuta )->lSelRut := lSel
      ( dbfRuta )->( dbUnlock() )
   end

   ::oBrwRuta:Refresh()

return nil



UTILITY STATIC function TEdm_SelAllRuta( lSel) ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   local nRec  := ( dbfRuta )->( Recno() )

   ( dbfRuta )->( dbGoTop() )
   while !( dbfRuta )->( eof() )

      if dbDialogLock( dbfRuta )
         ( dbfRuta )->lSelRut := lSel
         ( dbfRuta )->( dbUnlock() )
      end

      ( dbfRuta )->( dbSkip() )
   end

   ( dbfRuta )->( dbGoTo( nRec ) )

   if !Empty( ::oBrwRuta )
      ::oBrwRuta:Refresh()
   end

return nil






UTILITY STATIC function TEdm_MkSndEdm() ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm





   local lRut  := .F.
   local nRec  := ( dbfRuta )->( Recno() )





   ::oFld:aDialogs[ 1 ]:Disable()





   aEval( directory( "PSION\*.*" ), {|aFiles| fErase( "PSION\" + aFiles[1] ) } )

   ( dbfRuta )->( dbGoTop() )
   while !( dbfRuta )->( eof() )

      if ( dbfRuta )->lSelRut



         EdmArt( ( dbfRuta )->cCodRut, ::cPath, Self, oTipArt )



         EdmCli( ( dbfRuta )->cCodRut, ::cPath, Self, oTipArt )



         EdmRutCli( ( dbfRuta )->cCodRut, ::cPath, Self, oTipArt )



         EdmRecCli( ( dbfRuta )->cCodRut, ::cPath, Self )



         EdmOfe( ( dbfRuta )->cCodRut, ::cPath, Self )

         ::oMetUno:Set( 0 )

         lRut  := .T.

      end

      ( dbfRuta )->( dbSkip() )

   end

   ( dbfRuta )->( dbGoTo( nRec ) )

   if lRut

      MsgInfo( "Proceso de exportación finalizado con exito." )

   else

      msgStop( "Debe seleccionar al menos una ruta." )

   end



















   ::oFld:aDialogs[ 1 ]:Enable()

return nil






UTILITY STATIC function TEdm_MkRecEdm() ; local Self AS CLASS TEdm := QSelf() AS CLASS TEdm

   local aSucces  := {}

   if Empty( ::cCodPgo )
      msgStop( "Es necesario introducir una forma de pago" )
      return .F.
   end

   if ( dbfRuta )->( LastRec() ) == 0
      msgStop( "No hay rutas para importar" )
      return .F.
   end





   ::oFld:aDialogs[ 2 ]:Disable()

   ( dbfRuta )->( dbGoTop() )
   while !( dbfRuta )->( eof() )





      EdmPedCli( ( dbfRuta )->cCodRut, ::cPathOrg, Self, aSucces )

      ::oMetDos:Set( 0 )





      EdmAlbCli( ( dbfRuta )->cCodRut, ::cPathOrg, Self, aSucces )

      ::oMetDos:Set( 0 )





      EdmFacCli( ( dbfRuta )->cCodRut, ::cPathOrg, Self, aSucces )

      ::oMetDos:Set( 0 )





      EdmCobCli( ( dbfRuta )->cCodRut, ::cPathOrg, Self, aSucces )

      ( dbfRuta )->( dbSkip() )

   end





   if !Empty( aSucces )
      Visor( aSucces )
   end

   if ::lDelFiles
      aEval( Directory( ::cPath + "*.PSI" ), {|aFiles| fErase( ::cPath + aFiles[1] ) } )
   end

   ::oFld:aDialogs[ 2 ]:Enable()

return nil



function EdmSubStr( cChar, nStart, nEnd, lSep )

   IIF( lSep == nil, lSep := .T., ) ;
   IIF( nStart == nil, nStart := 1, ) ;
   IIF( nEnd == nil, nEnd := len( cChar ), ) ;

   cChar          := cValToChar( cChar )
   cChar          := Upper( AllTrim( SubStr( StrTran( cChar, ",", "" ), nStart, nEnd ) ) ) + if( lSep, ",", "" )





   cChar          := StrTran( cChar, "Á", "A" )
   cChar          := StrTran( cChar, "É", "E" )
   cChar          := StrTran( cChar, "Í", "I" )
   cChar          := StrTran( cChar, "Ó", "O" )
   cChar          := StrTran( cChar, "Ú", "U" )

RETURN ( cChar )



function EdmLogicSN( lLogic, lSep )

   IIF( lSep == nil, lSep := .T., ) ;

return ( If( lLogic, "S", "N" ) + if( lSep, ",", "" ) )



function EdmLocig12( lLogic, lSep )

   IIF( lSep == nil, lSep := .T., ) ;

return ( If( lLogic, "1", "2" ) + if( lSep, ",", "" ) )



function EdmRjust( cChar, cSep, nLen, lSep )

   IIF( cSep == nil, cSep := " ", ) ;
   IIF( nLen == nil, nLen := Len( cChar ), ) ;
   IIF( lSep == nil, lSep := .T., ) ;

return ( Rjust( cChar, cSep, nLen ) + if( lSep, ",", "" ) )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\EInfDiaExpediente.prg"
_HB_CLASS EInfDiaExpediente ; UTILITY FUNCTION EInfDiaExpediente(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "EInfDiaExpediente" , {TNewInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oExpediente} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oExpediente" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oSubTipoExpediente} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oSubTipoExpediente" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @EInfDiaExpediente_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @EInfDiaExpediente_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @EInfDiaExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @EInfDiaExpediente_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @EInfDiaExpediente_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @EInfDiaExpediente_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @EInfDiaExpediente_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @EInfDiaExpediente_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @EInfDiaExpediente_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @EInfDiaExpediente_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS EInfDiaExpediente ;



UTILITY STATIC function EInfDiaExpediente_Create() ; local Self AS CLASS EInfDiaExpediente := QSelf() AS CLASS EInfDiaExpediente

   ::AddField( "cNumDoc",  "C", 14, 0,  {|| "" }         ,  "Documento"          , .T., "Número documento"           , 14, .F. )
   ::AddField( "lExpEnd",  "L", 01, 0,  {|| "" }         ,  "Finalizado"         , .T., "Expediente finalizado"      ,  4, .F. )
   ::AddField( "dFecOrd",  "D", 08, 0,  {|| "" }         ,  "Inicio"             , .F., "Fecha inicio"               , 12, .F. )
   ::AddField( "cHorOrd",  "C", 05, 0,  {|| "@R 99:99" } ,  "H.Ini."             , .T., "Hora de inicio"             ,  6, .F. )
   ::AddField( "dFecVto",  "D", 08, 0,  {|| "" }         ,  "Vencimiento"        , .F., "Fecha vencimiento"          , 12, .F. )
   ::AddField( "cHorVto",  "C", 05, 0,  {|| "@R 99:99" } ,  "H.Vto."             , .T., "Hora de vencimiento"        ,  6, .F. )
   ::AddField( "cCodCli",  "C", 12, 0,  {|| "" }         ,  "Cliente"            , .T., "Cliente"                    , 14, .F. )
   ::AddField( "cNomCli",  "C", 80, 0,  {|| "" }         ,  "Nombre cliente"     , .F., "Nombre cliente"             , 30, .F. )
   ::AddField( "cCodTip",  "C", 03, 0,  {|| "" }         ,  "Tipo"               , .F., "Código tipo expediente"     ,  8, .F. )
   ::AddField( "cNomTip",  "C", 35, 0,  {|| "" }         ,  "Nombre tipo"        , .F., "Nombre tipo expediente"     , 20, .F. )
   ::AddField( "cCodSub",  "C", 03, 0,  {|| "" }         ,  "Subtipo"            , .F., "Código subtipo expediente"  ,  8, .F. )
   ::AddField( "cNomSub",  "C", 35, 0,  {|| "" }         ,  "Nombre subtipo"     , .F., "Nombre subtipo expediente"  , 20, .F. )
   ::AddField( "cCodCol",  "C", 03, 0,  {|| "" }         ,  "Colaborador"        , .F., "Colaborador"                ,  8, .F. )
   ::AddField( "cNomCol",  "C", 35, 0,  {|| "" }         ,  "Nombre colaborador" , .F., "Nombre colaborador"         , 20, .F. )
   ::AddField( "cCodTra",  "C", 05, 0,  {|| "" }         ,  "Operario"           , .F., "Operario"                   ,  8, .F. )
   ::AddField( "cNomTra",  "C", 35, 0,  {|| "" }         ,  "Nombre operario"    , .F., "Nombre operario"            , 20, .F. )
   ::AddField( "cCodEnt",  "C", 03, 0,  {|| "" }         ,  "Entidad"            , .F., "Entidad"                    ,  8, .F. )
   ::AddField( "cNomEnt",  "C", 35, 0,  {|| "" }         ,  "Nombre entidad"     , .F., "Nombre entidad"             , 20, .F. )

RETURN ( Self )



UTILITY STATIC function EInfDiaExpediente_OpenFiles() ; local Self AS CLASS EInfDiaExpediente := QSelf() AS CLASS EInfDiaExpediente

   local lOpen       := .T.
   local oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oExpediente        :=  TExpediente():Create( cPatEmp() )
      ::oExpediente:OpenFiles()

      ::oSubTipoExpediente := TDetTipoExpediente():Create( cPatEmp() )
      ::oSubTipoExpediente:OpenFiles()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function EInfDiaExpediente_CloseFiles() ; local Self AS CLASS EInfDiaExpediente := QSelf() AS CLASS EInfDiaExpediente

   if !Empty( ::oExpediente )
      ::oExpediente:end()
   end

   if !Empty( ::oSubTipoExpediente )
      ::oSubTipoExpediente:end()
   end

   ::oExpediente        := nil
   ::oSubTipoExpediente := nil

RETURN ( Self )



UTILITY STATIC function EInfDiaExpediente_lResource( cFld) ; local Self AS CLASS EInfDiaExpediente := QSelf() AS CLASS EInfDiaExpediente

   ::lNewInforme  := .T.

   if !::NewResource()
      return .F.
   end

   if !::lGrupoCliente( .F. )
      return .F.
   end

   if !::lGrupoTipoExpediente( .F. )
      return .F.
   end

   if !::lGrupoEntidad( .F. )
      return .F.
   end

   if !::lGrupoColaborador( .F. )
      return .F.
   end

   if !::lGrupoOperario( .F. )
      return .F.
   end

   ::lDefCondiciones := .F.

   ::oMtrInf:SetTotal( ::oExpediente:oDbf:Lastrec() )

   ::CreateFilter( , ::oExpediente:oDbf )

RETURN .T.



UTILITY STATIC function EInfDiaExpediente_lGenerate() ; local Self AS CLASS EInfDiaExpediente := QSelf() AS CLASS EInfDiaExpediente

   local cExpHead          := ""
   local cCodTipoOperacion := Space( 3 )

   ::oDlg:Disable()
   ::oBtnCancel:Enable()

   ::oDbf:Zap()






   ::aHeader   := {  {|| Padr( "Fecha", 13 ) + ": " + Dtoc( Date() ) }, {|| Padr( "Periodo", 13 ) + ": " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) } }

   if !::oGrupoCliente:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Cliente", 13 ) + ": " + AllTrim( ::oGrupoCliente:Cargo:Desde ) + " > " + AllTrim( ::oGrupoCliente:Cargo:Hasta ) } )
   end

   if !::oGrupoTipoExpediente:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Tipo", 13 ) + ": " + AllTrim( ::oGrupoTipoExpediente:Cargo:Desde ) + " > " + AllTrim( ::oGrupoTipoExpediente:Cargo:Hasta ) } )
   end

   if !::oGrupoEntidad:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Entidad", 13 ) + ": " + AllTrim( ::oGrupoEntidad:Cargo:Desde ) + " > " + AllTrim( ::oGrupoEntidad:Cargo:Hasta ) } )
   end

   if !::oGrupoOperario:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Operario", 13 ) + ": " + AllTrim( ::oGrupoOperario:Cargo:Desde ) + " > " + AllTrim( ::oGrupoOperario:Cargo:Hasta ) } )
   end

   if !::oGrupoColaborador:Cargo:Todos
      aAdd( ::aHeader, {|| Padr( "Colaborador", 13 ) + ": " + AllTrim( ::oGrupoColaborador:Cargo:Desde ) + " > " + AllTrim( ::oGrupoColaborador:Cargo:Hasta ) } )
   end





   ::oExpediente:oDbf:OrdSetFocus( "dFecOrd" )

   cExpHead       := 'dFecOrd >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dFecOrd <= Ctod( "' + Dtoc( ::dFinInf ) + '" )'

   if !::oGrupoCliente:Cargo:Todos
      cExpHead    += '.and. cCodCli >= "' + Rtrim( ::oGrupoCliente:Cargo:Desde ) + '" .and. cCodCli <= "' + Rtrim( ::oGrupoCliente:Cargo:Hasta ) + '"'
   end

   if !::oGrupoTipoExpediente:Cargo:Todos
      cExpHead    += '.and. cCodTip >= "' + Rtrim( ::oGrupoTipoExpediente:Cargo:Desde ) + '" .and. cCodTip <= "' + Rtrim( ::oGrupoTipoExpediente:Cargo:Hasta ) + '"'
   end

   if !::oGrupoEntidad:Cargo:Todos
      cExpHead    += '.and. cCodEnt >= "' + Rtrim( ::oGrupoEntidad:Cargo:Desde ) + '" .and. cCodEnt <= "' + Rtrim( ::oGrupoEntidad:Cargo:Hasta ) + '"'
   end

   if !::oGrupoOperario:Cargo:Todos
      cExpHead    += '.and. cCodTra >= "' + Rtrim( ::oGrupoOperario:Cargo:Desde ) + '" .and. cCodTra <= "' + Rtrim( ::oGrupoOperario:Cargo:Hasta ) + '"'
   end

   if !::oGrupoColaborador:Cargo:Todos
      cExpHead    += '.and. cCodCol >= "' + Rtrim( ::oGrupoColaborador:Cargo:Desde ) + '" .and. cCodCol <= "' + Rtrim( ::oGrupoColaborador:Cargo:Hasta ) + '"'
   end

   if !Empty( ::oFilter:cExpFilter )
      cExpHead    += " .and. " + ::oFilter:cExpFilter
   end

   ::oExpediente:oDbf:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oExpediente:oDbf:cFile ), ::oExpediente:oDbf:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oMtrInf:SetTotal( ::oExpediente:oDbf:OrdKeyCount() )

   ::oExpediente:oDbf:GoTop()
   while !::lBreak .AND. !::oExpediente:oDbf:Eof()

      if lChkSer( ::oExpediente:oDbf:cSerExp, ::aSer )

         ::oDbf:Append()

         ::oDbf:cNumDoc    := ::oExpediente:oDbf:cSerExp + "/" + AllTrim( Str( ::oExpediente:oDbf:nNumExp ) ) + "/" + ::oExpediente:oDbf:cSufExp
         ::oDbf:cCodCli    := ::oExpediente:oDbf:cCodCli
         ::oDbf:cNomCli    := ::oExpediente:oDbf:cNomCli
         ::oDbf:dFecOrd    := ::oExpediente:oDbf:dFecOrd
         ::oDbf:cHorOrd    := ::oExpediente:oDbf:cHorOrd
         ::oDbf:dFecVto    := ::oExpediente:oDbf:dFecVto
         ::oDbf:cHorVto    := ::oExpediente:oDbf:cHorVto
         ::oDbf:cCodTip    := ::oExpediente:oDbf:cCodTip
         ::oDbf:cNomTip    := oRetFld( ::oExpediente:oDbf:cCodTip, ::oTipoExpediente:oDbf, "cNomTip", "cCodTip" )
         ::oDbf:cCodSub    := ::oExpediente:oDbf:cCodSub
         ::oDbf:cNomSub    := oRetFld( ::oExpediente:oDbf:cCodTip + ::oExpediente:oDbf:cCodSub, ::oSubTipoExpediente:oDbf, "cNomSub", "cCodSub" )
         ::oDbf:cCodCol    := ::oExpediente:oDbf:cCodCol
         ::oDbf:cNomCol    := oRetFld( ::oExpediente:oDbf:cCodCol, ::oColaborador:oDbf, "cDesCol", "cCodCol" )
         ::oDbf:cCodTra    := ::oExpediente:oDbf:cCodTra
         ::oDbf:cNomTra    := oRetFld( ::oExpediente:oDbf:cCodTra, ::oOperario:oDbf, "cNomTra", "cCodTra" )
         ::oDbf:cCodEnt    := ::oExpediente:oDbf:cCodEnt
         ::oDbf:cNomEnt    := oRetFld( ::oExpediente:oDbf:cCodEnt, ::oEntidad:oDbf, "cDesEnt", "cCodEnt" )

         ::oDbf:Save()

      end

      ::oExpediente:oDbf:Skip()

      ::oMtrInf:AutoInc( ::oExpediente:oDbf:OrdKeyNo() )

   end

   ::oExpediente:oDbf:IdxDelete( cCurUsr(), GetFileNoExt( ::oExpediente:oDbf:cFile ) )

   ::oMtrInf:AutoInc( ::oExpediente:oDbf:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

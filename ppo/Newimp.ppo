#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Newimp.prg"
_HB_CLASS TNewImp ; UTILITY FUNCTION TNewImp(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TNewImp" , {TMant():classh} ) ) ; ;

   _HB_MEMBER { cPouDiv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPouDiv" }, .F., .F. ), )

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Moneybag_Dollar_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )

   _HB_MEMBER New( cPath, oWndParent, oMenuItem); IIF( .F., s_oClass:ModMethod( "New", @TNewImp_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TNewImp_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TNewImp_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TNewImp_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TNewImp_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TNewImp_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TNewImp_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TNewImp_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TNewImp_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TNewImp_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nValImp( cCodImp, lIvaInc, nIva); IIF( .F., s_oClass:ModMethod( "nValImp", @TNewImp_nValImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nValImp", @TNewImp_nValImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nBrwImp( oGet); IIF( .F., s_oClass:ModMethod( "nBrwImp", @TNewImp_nBrwImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nBrwImp", @TNewImp_nBrwImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cCtaImp( cCodImp); IIF( .F., s_oClass:ModMethod( "cCtaImp", @TNewImp_cCtaImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cCtaImp", @TNewImp_cCtaImp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave(); IIF( .F., s_oClass:ModMethod( "lPreSave", @TNewImp_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TNewImp_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TNewImp ;



UTILITY STATIC function TNewImp_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   IIF( cPath == nil, cPath := cPatEmp(), ) ;
   IIF( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   else
      ::nLevel          := nLevelUsr( "01037" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::cPouDiv            := cPouDiv( cDivEmp() )

   ::lAutoButtons       := .T.
   ::lCreateShell       := .F.

   ::cBitmap            := ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) )

RETURN ( Self )



UTILITY STATIC function TNewImp_OpenFiles(lExclusive) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   local lOpen          := .T.
   local oBlock
   local oError

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      lOpen             := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de impuestos especiales" )

   end

   ErrorBlock( oBlock )

   if !lOpen
      ::CloseFiles()
   end

RETURN ( lOpen )



UTILITY STATIC function TNewImp_DefineFiles( cPath, cDriver) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "NewImp.Dbf", "NewImp" ):New( "NewImp.Dbf", "NewImp", ( cDriver ), "Impuestos", ( cPath ) )

      ::oDbf:AddField( "cCodImp", "C", 3, 0, "@!",,,, "Código", .F., 60, .F., {} )
      ::oDbf:AddField( "cNomImp", "C", 50, 0,,,,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "nValImp", "N", 16, 6, ::cPouDiv,,,, "Importe", .T., 80, .F., {} )
      ::oDbf:AddField( "nPctImp", "N", 6, 2,,,,, "Porcentaje de impuesto", .F.,, .T., {} )
      ::oDbf:AddField( "nTypImp", "N", 1, 0,,,,, "Tipo de impuesto", .F.,, .T., {} )
      ::oDbf:AddField( "cSubCta", "C", 12, 0,,,,, "Subcuenta contabilidad", .F.,, .T., {} )
      ::oDbf:AddField( "lIvaVol", "L", 1, 0,,,,, "Aplicar impuesto por volumen", .F.,, .T., {} )

      ::oDbf:AddIndex( "cCodImp", "NewImp.Cdx", "cCodImp",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomImp", "NewImp.Cdx", "cNomImp",,, .F., .F., "Nombre",,, .T., .F. )
      ::oDbf:AddIndex( "nValImp", "NewImp.Cdx", "Str( nValImp, 16, 6 )",,, .F., .F., "Importe",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TNewImp_Resource( nMode) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

    local oDlg
   local oGet
   local oGet2
   local oCta
   local oGetSubCta
   local cGetSubCta  := ""

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "impuestos especiales", "NEWIMP",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodImp, ::oDbf:cCodImp:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .T., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )




      oGet2 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomImp, ::oDbf:cNomImp:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:nValImp, ::oDbf:nValImp:= u ) }, oDlg,, ::cPouDiv,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )








      oCta := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:cSubCta, ::oDbf:cSubCta:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( oCta, { ::oDbf:cSubCta, ::oDbf:cNomImp }, oGetSubCta ) )},,,,,, .T., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( oCta, oGetSubCta ) )}, nil, "LUPA",, )




      oGetSubCta := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )



      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, ::oDbf:lIvaVol, ::oDbf:lIvaVol:= u ) }, oDlg,,,,,,, .T.,, .F. )





      TButton():ReDefine( 1, {||( ::lPreSave( oGet, oGet2, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGet, oGet2, nMode, oDlg ) } )
   end

   oDlg:bStart := {|| if( !Empty( ::oDbf:cSubCta ), oCta:lValid(), ), oGet:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TNewImp_lPreSave( oGet, oGet2, nMode, oDlg) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   if nMode == 1 .OR. nMode == 4

      if Empty( ::oDbf:cCodImp )
         MsgStop( "Código del impuesto no puede estar vacío." )
         oGet:SetFocus()
         Return nil
      end

      if ::oDbf:SeekInOrd( ::oDbf:cCodImp, "CCODIMP" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodImp ) )
         return nil
      end

   end

   if Empty( ::oDbf:cNomImp )
      MsgStop( "Nombre del impuesto no puede estar vacío." )
      oGet2:SetFocus()
      Return nil
   end

Return ( oDlg:end( 1 ) )



UTILITY STATIC function TNewImp_nValImp( cCodImp, lIvaInc, nValIva) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   local nValImp     := 0

   if !Empty( cCodImp )
      if ::oDbf:Seek( cCodImp )
         nValImp     := ::oDbf:nValImp





      end
   end

return ( nValImp )



UTILITY STATIC function TNewImp_cCtaImp( nValImp) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   local cCtaImp     := ""

   if !Empty( nValImp )

      nValImp        := Str( nValImp, 16, 6 )

      ::oDbf:GetStatus()

      ::oDbf:OrdSetFocus( "nValImp" )

      if ::oDbf:Seek( nValImp )
         cCtaImp     := ::oDbf:cSubCta
      end

      ::oDbf:SetStatus()

   end

return ( cCtaImp )



UTILITY STATIC function TNewImp_nBrwImp( oGet) ; local Self AS CLASS TNewImp := QSelf() AS CLASS TNewImp

   local n
   local cCaption
   local cAlias
   local cField
   local aSizes   := {}
   local uOrden   := "nValImp"
   local aOrd     := {}
   local aCampos  := {}
   local aTitulos := {}
   local bAlta    := {|| ::Append() }
   local bEdit    := {|| ::Edit()   }
   local bZoom    := {|| ::Zoom()   }
   local aJustify := {}

   cCaption       := ::oDbf:cComment
   cAlias         := ::oDbf:cAlias
   cField         := "nValImp"

   for n := 1 to ::oDbf:FCount()

      if !::oDbf:aTField[ n ]:lHide .AND. !::oDbf:aTField[ n ]:lCalculate

         aAdd( aCampos, FieldWBlock( ::oDbf:aTField[ n ]:cName, ::oDbf:nArea ) )
         aAdd( aTitulos, ::oDbf:aTField[ n ]:cComment )
         aAdd( aSizes, ::oDbf:aTField[ n ]:nColSize )
         aAdd( aJustify, ::oDbf:aTField[ n ]:cType == "N"  )

      endif

   next

   for n := 1 to len( ::oDbf:aTIndex ) - 1
      if !Empty( ::oDbf:aTIndex[ n ]:cComment )
         aAdd( aOrd, ::oDbf:aTIndex[ n ]:cComment )
      end
   next

   ::oBuscar   := TBuscar():New( cCaption, cAlias, uOrden, cField, aOrd, aCampos, aTitulos, aSizes, bAlta, bEdit, bZoom, aJustify )

   ::oBuscar:Activate()

   if oGet <> nil

      if ::oBuscar:GetField() <> nil
         oGet:cText( ::oBuscar:Getfield() )
      else
         oGet:cText( 0 )
      end
      oGet:lValid()

   end

RETURN nil



FUNCTION NewImp( uMenuItem, oWnd )


   local oNewImp

   IIF( uMenuItem == nil, uMenuItem := "01037", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

   oNewImp              := TNewImp():New( cPatEmp(), oWnd, uMenuItem )
   oNewImp:Activate()







RETURN oNewImp

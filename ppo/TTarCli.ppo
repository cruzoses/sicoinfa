#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TTarCli.prg"
_HB_CLASS TarCli ; UTILITY FUNCTION TarCli(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TarCli" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oCliAtp} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oCliAtp" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oDbfKit} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfKit" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TarCli_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TarCli_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TarCli_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TarCli_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TarCli_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TarCli_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TarCli_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TarCli_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TarCli_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TarCli_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TarCli ;



UTILITY STATIC function TarCli_Create() ; local Self AS CLASS TarCli := QSelf() AS CLASS TarCli

   ::AddField(  "cCodCli", "C",  12, 0, {|| "@!" },         "Cod. Cli.",                 .F., "Cod. cliente"        ,  12, .F.  )
   ::AddField(  "cNomCli", "C",  50, 0, {|| "@!" },         "Nom. Cli.",                 .F., "Nombre cliente"      ,  40, .F.  )
   ::AddField(  "cCodArt", "C",  18, 0, {|| "@!" },         "Cod.",                      .T., "Cod. artículo"       ,  18, .F.  )
   ::AddField(  "cNomArt", "C", 100, 0, {|| "@!" },         "Artículo-familia",          .T., "Artículo-familia"    ,  40, .F.  )
   ::AddField(  "nPrcCos", "N",  16, 6, {|| ::cPicCom },    "Costo",                     .T., "Costo"               ,  10, .F.  )
   ::AddField(  "nPrcArt1","N",  19, 6, {|| ::cPicImp },    "Precio 1",                  .T., "Precio 1"            ,  10, .F.  )
   ::AddField(  "nPrcArt2","N",  19, 6, {|| ::cPicImp },    "Precio 2",                  .F., "Precio 2"            ,  10, .F.  )
   ::AddField(  "nPrcArt3","N",  19, 6, {|| ::cPicImp },    "Precio 3",                  .F., "Precio 3"            ,  10, .F.  )
   ::AddField(  "nPrcArt4","N",  19, 6, {|| ::cPicImp },    "Precio 4",                  .F., "Precio 4"            ,  10, .F.  )
   ::AddField(  "nPrcArt5","N",  19, 6, {|| ::cPicImp },    "Precio 5",                  .F., "Precio 5"            ,  10, .F.  )
   ::AddField(  "nPrcArt6","N",  19, 6, {|| ::cPicImp },    "Precio 6",                  .F., "Precio 6"            ,  10, .F.  )
   ::AddField(  "nDtoArt", "N",   6, 2, {|| "@ 999.99" },   "%Dto",                      .T., "Dto% artículo"       ,   6, .F.  )
   ::AddField(  "nDtoPrm", "N",   6, 2, {|| "@ 999.99" },   "%Dto Prm",                  .F., "Dto% promoción"      ,   6, .F.  )
   ::AddField(  "nDtoDiv", "N",  19, 6, {|| ::cPicImp },    "Dto. lineal",               .F., "Dto. lineal"         ,  10, .F.  )
   ::AddField(  "nComAge", "N",   6, 2, {|| "@ 999.99" },   "Com. age.",                 .F., "Comisión agente"     ,   6, .F.  )
   ::AddField(  "dFecIni", "D",   8, 0, {|| "" },           "Inicio",                    .F., "Fecha inicio"        ,   8, .F.  )
   ::AddField(  "dFecFin", "D",   8, 0, {|| "" },           "Fin",                       .F., "Fecha fin"           ,   8, .F.  )

   ::AddTmpIndex( "CCODCLI", "CCODCLI" )

   ::AddGroup( {|| ::oDbf:cCodCli }, {|| "Cliente : " + Rtrim( ::oDbf:cCodCli ) + " - " + ::oDbf:cNomCli }, {|| "" } )

RETURN ( Self )



UTILITY STATIC function TarCli_OpenFiles() ; local Self AS CLASS TarCli := QSelf() AS CLASS TarCli

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfCli := DbfServer( "CLIENT.DBF", ):NewOpen( "CLIENT.DBF",, ( cDriver() ),, ( cPatCli() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "CLIENT.CDX" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

   ::oCliAtp := DbfServer( "CLIATP.DBF", ):NewOpen( "CLIATP.DBF",, ( cDriver() ),, ( cPatCli() ), .F., .T., .F., .F. ) ; ::oCliAtp:AddBag( "CLIATP.CDX" ) ; ::oCliAtp:AddBag( ) ; ::oCliAtp:AutoIndex()

   ::oDbfFam := DbfServer( "FAMILIAS.DBF", ):NewOpen( "FAMILIAS.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfFam:AddBag( "FAMILIAS.CDX" ) ; ::oDbfFam:AddBag( ) ; ::oDbfFam:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oDbfKit := DbfServer( "ARTKIT.DBF", ):NewOpen( "ARTKIT.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfKit:AddBag( "ARTKIT.CDX" ) ; ::oDbfKit:AddBag( ) ; ::oDbfKit:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TarCli_CloseFiles() ; local Self AS CLASS TarCli := QSelf() AS CLASS TarCli

   if !Empty( ::oDbfCli ) .AND. ::oDbfCli:Used()
      ::oDbfCli:End()
   end

   if !Empty( ::oCliAtp ) .AND. ::oCliAtp:Used()
      ::oCliAtp:End()
   end

   if !Empty( ::oDbfFam ) .AND. ::oDbfFam:Used()
      ::oDbfFam:End()
   end

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if !Empty( ::oDbfKit ) .AND. ::oDbfKit:Used()
      ::oDbfKit:End()
   end

   ::oDbfCli   := nil
   ::oCliAtp   := nil
   ::oDbfFam   := nil
   ::oDbfArt   := nil
   ::oDbfKit   := nil

RETURN ( Self )



UTILITY STATIC function TarCli_lResource( cFld) ; local Self AS CLASS TarCli := QSelf() AS CLASS TarCli

   ::lDefSerInf   := .F.

   if !::StdResource( "INF_CLIATP" )
      return .F.
   end





   if !::oDefCliInf( 70, 80, 90, 100, , 600 )
      return .F.
   end





   ::oMtrInf:SetTotal( ::oCliAtp:Lastrec() )

   ::CreateFilter( aItmAtp(), ::oCliAtp:cAlias )

RETURN .T.






UTILITY STATIC function TarCli_lGenerate() ; local Self AS CLASS TarCli := QSelf() AS CLASS TarCli

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Periodo  : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Clientes : " + Rtrim( ::cCliOrg ) + " > " + Rtrim( ::cCliDes ) }, {|| "Divisa   : " + ::cDivInf + " - " + cNomDiv( ::cDivInf, ::oDbfDiv:cAlias ) }}

   ::oCliAtp:OrdSetFocus( "CCODART" )

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       := ::oFilter:cExpFilter
   else
      cExpHead       := ".t."
   end

   ::oCliAtp:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oCliAtp:cFile ), ::oCliAtp:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oCliAtp:GoTop()

   while !::lBreak .AND. !::oCliAtp:Eof()



      if ( ::oCliAtp:dFecIni >= ::dIniInf .OR. Empty( ::oCliAtp:dFecIni ) .OR. Empty( ::dIniInf ) ) .AND. ( ::oCliAtp:dFecFin <= ::dFinInf .OR. Empty( ::oCliAtp:dFecFin ) .OR. Empty( ::dFinInf ) ) .AND. ( ::lAllCli .OR. ( ::oCliAtp:cCodCli >= ::cCliOrg .AND. ::oCliAtp:cCodCli <= ::cCliDes ) )





         ::oDbf:Append()

         ::oDbf:cCodCli       := ::oCliAtp:cCodCli
         ::oDbf:cNomCli       := RetClient( ::oCliAtp:cCodCli, ::oDbfCli )

         if ::oCliAtp:nTipAtp <= 1
            ::oDbf:cCodArt    := ::oCliAtp:cCodArt
            if ::oDbfArt:Seek( ::oCliAtp:cCodArt )
               ::oDbf:nPrcCos := nCosto( nil, ::oDbfArt:cAlias, ::oDbfKit:cAlias, .F., ::cDivInf, ::oDbfDiv:cAlias )
            end
         else
            ::oDbf:cCodArt    := ::oCliAtp:cCodFam
         end

         if ::oCliAtp:nTipAtp <= 1
            ::oDbf:cNomArt    := RetArticulo( ::oCliAtp:cCodArt, ::oDbfArt )
         else
            ::oDbf:cNomArt    := RetFamilia( ::oCliAtp:cCodFam, ::oDbfFam )
         end

         ::oDbf:nPrcArt1      := nCnv2Div( ::oCliAtp:nPrcArt,  cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nPrcArt2      := nCnv2Div( ::oCliAtp:nPrcArt2, cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nPrcArt3      := nCnv2Div( ::oCliAtp:nPrcArt3, cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nPrcArt4      := nCnv2Div( ::oCliAtp:nPrcArt4, cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nPrcArt5      := nCnv2Div( ::oCliAtp:nPrcArt5, cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nPrcArt6      := nCnv2Div( ::oCliAtp:nPrcArt6, cDivEmp(), ::cDivInf, ::oDbfDiv:cAlias )
         ::oDbf:nDtoArt       := ::oCliAtp:nDtoArt
         ::oDbf:nDtoPrm       := ::oCliAtp:nDprArt
         ::oDbf:nDtoDiv       := ::oCliAtp:nDtoDiv
         ::oDbf:nComAge       := ::oCliAtp:nComAge
         ::oDbf:dFecIni       := ::oCliAtp:dFecIni
         ::oDbf:dFecFin       := ::oCliAtp:dFecFin

         ::oDbf:Save()

      end

      ::oCliAtp:Skip()

      ::oMtrInf:AutoInc( ::oCliAtp:OrdKeyNo() )

   end

   ::oCliAtp:IdxDelete( cCurUsr(), GetFileNoExt( ::oCliAtp:cFile ) )

   ::oMtrInf:AutoInc( ::oCliAtp:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

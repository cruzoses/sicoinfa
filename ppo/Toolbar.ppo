#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 34 ".\Prg\Toolbar.prg"
_HB_CLASS TToolBar ; UTILITY FUNCTION TToolBar(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TToolBar" , {TControl():classh} ) ) ; ;

   _HB_MEMBER { nBtnWidth, nBtnHeight} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nBtnWidth" , "nBtnHeight" }, .F., .F. ), )
   _HB_MEMBER { aButtons} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aButtons" }, .F., .F. ), )
   _HB_MEMBER { oImageList} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oImageList" }, .F., .F. ), )

   _HB_MEMBER New( oWnd, nBtnWidth, nBtnHeight, oImageList) AS CLASS TToolBar; IIF( .F., s_oClass:ModMethod( "New", @TToolBar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TToolBar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TToolBar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TToolBar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddButton( bAction, cToolTip, cText, bWhen); IIF( .F., s_oClass:ModMethod( "AddButton", @TToolBar_AddButton(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddButton", @TToolBar_AddButton(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddSeparator(); IIF( .F., s_oClass:ModInline( "AddSeparator", {|Self | Self, TBAddSeparator( ::hWnd ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "AddSeparator", {|Self | Self, TBAddSeparator( ::hWnd ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Command( nWParam, nLParam); IIF( .F., s_oClass:ModMethod( "Command", @TToolBar_Command(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Command", @TToolBar_Command(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


      _HB_MEMBER Display(); IIF( .F., s_oClass:ModInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


   _HB_MEMBER EnableButton(nButton, lOnOff); IIF( .F., s_oClass:ModInline( "EnableButton", {|Self,nButton, lOnOff | Self, TBEnableButton( ::hWnd, nButton, lOnOff ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "EnableButton", {|Self,nButton, lOnOff | Self, TBEnableButton( ::hWnd, nButton, lOnOff ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER AutoSize(); IIF( .F., s_oClass:ModInline( "AutoSize", {|Self | Self, SendMessage( ::hWnd, 1057, 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "AutoSize", {|Self | Self, SendMessage( ::hWnd, 1057, 0, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

      _HB_MEMBER EraseBkGnd(hDC); IIF( .F., s_oClass:ModInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


   _HB_MEMBER GotFocus(); IIF( .F., s_oClass:ModInline( "GotFocus", {|Self | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GotFocus", {|Self | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER RButtonDown( ); IIF( !.F., s_oClass:AddVirtual( "RButtonDown" ), )

   _HB_MEMBER MouseMove( ); IIF( !.F., s_oClass:AddVirtual( "MouseMove" ), )

   _HB_MEMBER Notify( nIdCtrl, nPtrNMHDR); IIF( .F., s_oClass:ModMethod( "Notify", @TToolBar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Notify", @TToolBar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


      _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @TToolBar_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @TToolBar_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TToolBar ;



UTILITY STATIC function TToolBar_New( oWnd, nBtnWidth, nBtnHeight, oImageList) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ; IIF( nBtnWidth == nil, nBtnWidth := 33, ); IIF( nBtnHeight == nil, nBtnHeight := 33, );

   ::oWnd         = oWnd
   ::nId          = ::GetNewId()
   ::nBtnWidth    = nBtnWidth
   ::nBtnHeight   = nBtnHeight
   ::aButtons     = {}
   ::oImageList   = oImageList
   ::lDrag        = .F.

   if Upper( oWnd:ClassName() ) <> "TREBAR"
      oWnd:oTop   = Self
   endif

   InitCommonControls()

   if ! Empty( oWnd:hWnd )
      ::Create()
      ::nHeight   = nBtnHeight + 3
      oWnd:AddControl( Self )
      if oImageList <> nil
         SendMessage( ::hWnd, 1072, 0, oImageList:hImageList )
      endif
   else
      oWnd:DefControl( Self )
   endif

return Self



UTILITY STATIC function TToolBar_AddButton( bAction, nBitmap, cToolTip, cText, bWhen) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   AAdd( ::aButtons, { bAction, cToolTip } )

   IIF( nBitmap == nil, nBitmap := Len( ::aButtons ), ) ;

   TBAddButton( ::hWnd, Len( ::aButtons ), nBitmap, cText )

   if bWhen <> nil .AND. ! Eval( bWhen )
      ::EnableButton( Len( ::aButtons ), .F. )
   endif

return nil



UTILITY STATIC function TToolBar_Create() ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nTransStyle := If( ! Upper( ::oWnd:ClassName() ) $ "TWINDOW,TMDIFRAME,TMDICHILD", 32768, 0 )







   nTransStyle       := nOr(  nTransStyle, 512, 2048, 256, 64, 4, 32 )

   ::hWnd            := CreateTlBar( ::oWnd:hWnd, ::nId, ::nBtnWidth, ::nBtnHeight )

   if ::hWnd == 0
      WndCreateError( Self )
   else
      nTransStyle    := nOr( SendMessage( ::hWnd, 1081 ), nTransStyle )

      SendMessage( ::hWnd, 1080, 0, nTransStyle )

      ::Link()
   endif

return nil



UTILITY STATIC function TToolBar_Command( nWParam, nLParam) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nNotifyCode, nID, hWndCtl
   local bAction






      nNotifyCode = nHiWord( nWParam )
      nID         = nLoWord( nWParam )
      hWndCtl     = nLParam


   if ( nID <= len( ::aButtons ) ) .AND. ( bAction := ::aButtons[ nID, 1 ] ) <> nil
      Eval( bAction, Self )
   endif

return nil



UTILITY STATIC function TToolBar_Notify( nIdCtrl, nPtrNMHDR) ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local nCode := GetNMHDRCode( nPtrNMHDR )



   do case
      case nCode == -530
           TTNSetText( nPtrNMHDR, ::aButtons[ GetNMHDRIdFrom( nPtrNMHDR ) ][ 2 ] )
   endcase

return nil





UTILITY STATIC function TToolBar_Paint() ; local Self AS CLASS TToolBar := QSelf() AS CLASS TToolBar

   local aInfo := ::DispBegin()

   if ::oBrush <> nil
      FillRect( ::hDC, GetClientRect( ::hWnd ), ::oBrush:hBrush )
   else
      CallWindowProc( ::nOldProc, ::hWnd, 20, ::hDC, 0 )
   endif
   CallWindowProc( ::nOldProc, ::hWnd, 15, ::hDC, 0 )

   ::DispEnd( aInfo )

return 1

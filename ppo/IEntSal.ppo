#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\IEntSal.prg"
_HB_CLASS IEntSal ; UTILITY FUNCTION IEntSal(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "IEntSal" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfEnt} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfEnt" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @IEntSal_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @IEntSal_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @IEntSal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @IEntSal_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @IEntSal_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @IEntSal_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @IEntSal_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @IEntSal_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @IEntSal_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @IEntSal_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS IEntSal ;



UTILITY STATIC function IEntSal_Create() ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   ::AddField( "dFecEnt",  "D",  8, 0, {|| "" },   "Fecha",       .T., "Fecha",         12, .F. )
   ::AddField( "cTipEnt",  "C", 20, 0, {|| "" },   "Tipo",        .T., "Tipo",          15, .F. )
   ::AddField( "cDesEnt",  "C", 50, 0, {|| "" },   "Descripción", .T., "Descripción",   50, .F. )
   ::AddField( "nImpEnt",  "N", 16, 6, {|| "" },   "Importe",     .T., "Importe",       16, .F. )

   ::AddTmpIndex ( "dFecEnt", "dFecEnt" )

   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function IEntSal_OpenFiles() ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfEnt := DbfServer( "ENTSAL.DBF", ):NewOpen( "ENTSAL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfEnt:AddBag( "ENTSAL.CDX" ) ; ::oDbfEnt:AddBag( ) ; ::oDbfEnt:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function IEntSal_CloseFiles() ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   if !Empty( ::oDbfEnt ) .AND. ::oDbfEnt:Used()
      ::oDbfEnt:End()
   end

   ::oDbfEnt  := nil

RETURN ( Self )



UTILITY STATIC function IEntSal_lResource( cFld) ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   if !::StdResource( "INF_ENT01" )
      return .F.
   end

   ::oMtrInf:SetTotal( ::oDbfEnt:Lastrec() )

   ::CreateFilter( aItmEntSal(), ::oDbfEnt:cAlias )

RETURN .T.






UTILITY STATIC function IEntSal_lGenerate() ; local Self AS CLASS IEntSal := QSelf() AS CLASS IEntSal

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) } }

   ::oDbfEnt:OrdSetFocus( "DFECENT" )

   ::oDbfEnt:GoTop()
   while !::lBreak .AND. !::oDbfEnt:Eof()

      if ::oDbfEnt:dFecEnt >= ::dIniInf .AND. ::oDbfEnt:dFecEnt <= ::dFinInf .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:dFecEnt  := ::oDbfEnt:dFecEnt
         if ::oDbfEnt:nTipEnt == 1
            ::oDbf:cTipEnt  := "Entrada"
         else
            ::oDbf:cTipEnt  := "Salida"
         end
         ::oDbf:cDesEnt  := ::oDbfEnt:cDesEnt
         ::oDbf:nImpEnt  := ::oDbfEnt:nImpEnt

         ::oDbf:Save()

      end

      ::oDbfEnt:Skip()

      ::oMtrInf:AutoInc( ::oDbfEnt:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfEnt:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

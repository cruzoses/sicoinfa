#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TInftrazarlote.prg"
_HB_CLASS TInfTrazLot ; UTILITY FUNCTION TInfTrazLot(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfTrazLot" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfTmp} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfTmp" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cLote} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cLote" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfTrazLot_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfTrazLot_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfTrazLot_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfTrazLot_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfTrazLot_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfTrazLot_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfTrazLot_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfTrazLot_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfTrazLot_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfTrazLot_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfTrazLot ;



UTILITY STATIC function TInfTrazLot_OpenFiles() ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot
RETURN ( Self )



UTILITY STATIC function TInfTrazLot_CloseFiles() ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot
RETURN ( Self )



UTILITY STATIC function TInfTrazLot_Create() ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   ::AddField( "cTipDoc",  "C",27, 0, {|| "@!" },     "Tip. Doc.",    .F., "Tipo de documento",     25, .F.  )
   ::AddField( "cNumDoc",  "C",12, 0, {|| "@!" },     "Num. Doc.",    .T., "Número del documento",  15, .F.  )
   ::AddField( "dFecDoc",  "D", 8, 0, {|| "@!" },     "Fecha",        .T., "Fecha del documento",   12, .F.  )
   ::AddField( "cCodCli",  "C",12, 0, {|| "@!" },     "Cod. Cli/Prv", .T., "Código del Cli/Prv",    15, .F.  )
   ::AddField( "cCliPrv",  "C",50, 0, {|| "@!" },     "Nom. Cli/Prv", .T., "Nombre del Cli/Prv",    50, .F.  )
   ::AddField( "cCodObr",  "C",10, 0, {|| "@!" },     "Obra",         .F., "Obra",                  10, .F.  )
   ::AddField( "cCodArt",  "C",18, 0, {|| "@!" },     "Cod. Art.",    .T., "Código del artículo",   18, .F.  )
   ::AddField( "cNomArt",  "C",100, 0, {|| "@!" },    "Nom. Art.",    .T., "Nombre del artículo",   20, .F.  )
   ::AddField( "nUnidades","N",16, 6, {|| MasUnd() }, "Und.",         .T., "Unidades de artículo",  10, .T.  )

   ::AddTmpIndex ( "cTipDoc", "cTipDoc + Dtos( dFecDoc )" )

   ::AddGroup( {|| ::oDbf:cTipDoc }, {|| "Documento : " + Rtrim( ::oDbf:cTipDoc ) }, {||"Total grupo..."} )

   ::lDefSerInf := .F.

   ::oDbfTmp   := ::xOthers[ 1 ]
   ::cLote     := ::xOthers[ 2 ]

RETURN ( Self )



UTILITY STATIC function TInfTrazLot_lResource( cFld) ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   if !::StdResource( "INF_TRAZALOTE" )
      return .F.
   end

   ::oBtnFilter:Disable()

   ::oMtrInf:SetTotal( ::oDbfTmp:Lastrec() )

RETURN .T.






UTILITY STATIC function TInfTrazLot_lGenerate() ; local Self AS CLASS TInfTrazLot := QSelf() AS CLASS TInfTrazLot

   ::oDlg:Disable()
   ::oDbf:Zap()

   ::oDbfTmp:GoTop()


   ::aHeader      := {  {|| "Fecha  : " + Dtoc( Date() )     }, {|| "Lote   : " + AllTrim( ::cLote ) } }

   while !::oDbfTmp:Eof()


      if ::oDbfTmp:dFecDoc >= ::dIniInf     .AND. ::oDbfTmp:dFecDoc <= ::dFinInf

         ::oDbf:Append()

         ::oDbf:cTipDoc     := AllTrim( ::oDbfTmp:cTipDoc )
         ::oDbf:cNumDoc     := ::oDbfTmp:cNumDoc
         ::oDbf:cCodArt     := ::oDbfTmp:cCodArt
         ::oDbf:cNomArt     := AllTrim( ::oDbfTmp:cNomArt )

         do case




            case ( AllTrim( ::oDbfTmp:cTipDoc )  == "Pedido a proveedor"              .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Albarán de proveedor"               .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Factura de proveedor"               .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Movimiento de almacén"              .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Material producido" )

                 ::oDbf:nUnidades   := ::oDbfTmp:nUnidades






            case ( AllTrim( ::oDbfTmp:cTipDoc ) == "Presupuesto de cliente"           .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Pedido de cliente"                  .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Albarán de cliente"                 .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Factura de cliente"                 .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de cliente"   .OR. AllTrim( ::oDbfTmp:cTipDoc ) == "Material consumido" )

                 ::oDbf:nUnidades   := -( ::oDbfTmp:nUnidades )

         end

         ::oDbf:dFecDoc     := ::oDbfTmp:dFecDoc
         ::oDbf:cCodCli     := ::oDbfTmp:cCodCli
         ::oDbf:cCliPrv     := ::oDbfTmp:cCliPrv
         ::oDbf:cCodObr     := ::oDbfTmp:cCodObr

         ::oDbf:Save()

      end

      ::oDbfTmp:Skip()

      ::oMtrInf:AutoInc( ::oDbfTmp:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfTmp:LastRec() )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

   ::oDbfTmp:GoTop()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 13 ".\Prg\Meter.prg"
_HB_CLASS TMeter ; UTILITY FUNCTION TMeter(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TMeter" , {TControl():classh} ) ) ; ;

   _HB_MEMBER {AS LOGICAL lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData("LOGICAL",, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )

   _HB_MEMBER { nTotal, nRefresh} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTotal" , "nRefresh" }, .F., .F. ), )
   _HB_MEMBER { nClrBar, nClrBText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nClrBar" , "nClrBText" }, .F., .F. ), )
   _HB_MEMBER { cText, lPercentage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cText" , "lPercentage" }, .F., .F. ), )
   _HB_MEMBER { nCurrent} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCurrent" }, .F., .F. ), )



   _HB_MEMBER New( nRow, nCol, bSetGet, nTotal, oWnd, nWidth, nHeight, lUpdate, lPixel, oFont, cText, lNoPercentage,  nClrPane, nClrText, nClrBar, nClrBText, lDesign) AS CLASS TMeter; IIF( .F., s_oClass:ModMethod( "New", @TMeter_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TMeter_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));



   _HB_MEMBER ReDefine( nId, bSetGet, nTotal, oWnd, lUpdate,  oFont, cText, lNoPercentage,  nClrPane, nClrText, nClrBar, nClrBText) AS CLASS TMeter; IIF( .F., s_oClass:ModMethod( "ReDefine", @TMeter_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReDefine", @TMeter_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Default(); IIF( .F., s_oClass:ModMethod( "Default", @TMeter_Default(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Default", @TMeter_Default(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Initiate(hDlg); IIF( .F., s_oClass:ModInline( "Initiate", {|Self,hDlg | Self, ::TControl:Initiate( hDlg ), ::Default() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Initiate", {|Self,hDlg | Self, ::TControl:Initiate( hDlg ), ::Default() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); IIF( .F., s_oClass:ModMethod( "HandleEvent", @TMeter_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "HandleEvent", @TMeter_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @TMeter_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @TMeter_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Set( nActual); IIF( .F., s_oClass:ModMethod( "Set", @TMeter_Set(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Set", @TMeter_Set(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetTotal(nTotal); IIF( .F., s_oClass:ModInline( "SetTotal", {|Self,nTotal | Self, ( ::nTotal := nTotal, ::nCurrent := 0, ::Refresh() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTotal", {|Self,nTotal | Self, ( ::nTotal := nTotal, ::nCurrent := 0, ::Refresh() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER AutoInc(); IIF( .F., s_oClass:ModMethod( "AutoInc", @TMeter_AutoInc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AutoInc", @TMeter_AutoInc(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TMeter ;





UTILITY STATIC function TMeter_New( nRow, nCol, bSetGet, nTotal, oWnd, nWidth, nHeight, lUpdate, lPixel, oFont, cText, lNoPercentage, nClrPane, nClrText,  nClrBar, nClrBText, lDesign) ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter





   IIF( nRow == nil, nRow := 0, ) ;
   IIF( nCol == nil, nCol := 0, ) ;
   IIF( lNoPercentage == nil, lNoPercentage := .F., ) ;
   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ;
   IIF( bSetGet == nil, bSetGet := { || 1 }, ) ;
   IIF( lPixel == nil, lPixel := .F., ) ;
   IIF( nClrBar == nil, nClrBar := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ), ) ;
   IIF( nClrBText == nil, nClrBText := 16777215, ) ;
   IIF( nClrText == nil, nClrText := oWnd:nClrText, ) ;
   IIF( nClrPane == nil, nClrPane := oWnd:nClrPane, ) ;
   IIF( cText == nil, cText := Chr( 0 ), ) ;
   IIF( nTotal == nil, nTotal := 10, ) ;
   IIF( nWidth == nil, nWidth := 300, ) ;
   IIF( nHeight == nil, nHeight := 20, ) ;
   IIF( lUpdate == nil, lUpdate := .F., ) ;
   IIF( lDesign == nil, lDesign := .F., ) ;

   ::nTop      = If( lPixel, nRow, nRow * 14 )
   ::nLeft     = If( lPixel, nCol, nCol *  8 )
   ::nBottom   = ::nTop  + nHeight
   ::nRight    = ::nLeft + nWidth
   ::oWnd      = oWnd

   ::nStyle    = nOR( 1073741824, 268435456, If( lDesign, nOr( 67108864, 65536 ), 0 ) )
   ::nId       = ::GetNewId()
   ::bSetGet   = bSetGet
   ::nTotal    = nTotal
   ::lDrag     = lDesign
   ::lCaptured = .F.
   ::lUpdate   = .F.

   ::nClrText  = nClrText
   ::nClrPane  = nClrPane
   ::nClrBar   = nClrBar
   ::nClrBText = nClrBText
   ::cText     = cText
   ::lPercentage = ! lNoPercentage

   ::oFont     = oFont





   ::Register( nOR( 1, 2 ) )

   ::nCurrent  := 0
   ::nRefresh  := 0

   if ! Empty( oWnd:hWnd )
      ::Create()
      ::Default()
      oWnd:AddControl( Self )
   else
      oWnd:DefControl( Self )
   endif

   if lDesign
      ::CheckDots()
   endif

return Self





UTILITY STATIC function TMeter_ReDefine( nId, bSetGet, nTotal, oWnd, lUpdate,  oFont, cText, lNoPercentage, nClrPane, nClrText,  nClrBar, nClrBText) ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   IIF( lNoPercentage == nil, lNoPercentage := .F., ) ;
   IIF( nTotal == nil, nTotal := 10, ) ;
   IIF( lUpdate == nil, lUpdate := .F., ) ;
   IIF( nClrBar == nil, nClrBar := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ), ) ;
   IIF( nClrBText == nil, nClrBText := 16777215, ) ;
   IIF( nClrText == nil, nClrText := oWnd:nClrText, ) ;
   IIF( nClrPane == nil, nClrPane := oWnd:nClrPane, ) ;
   IIF( cText == nil, cText := Chr( 0 ), ) ;

   ::nId       = nId
   ::bSetGet   = bSetGet
   ::nTotal    = nTotal
   ::oWnd      = oWnd
   ::lDrag     = .F.
   ::lCaptured = .F.
   ::lUpdate   = lUpdate

   ::nClrText  = nClrText
   ::nClrPane  = nClrPane
   ::nClrBar   = nClrBar
   ::nClrBText = nClrBText
   ::cText     = cText
   ::lPercentage = ! lNoPercentage
   ::oFont     = oFont

   ::nCurrent  := 0
   ::nRefresh  := 0





   ::Register( nOR( 1, 2 ) )

   if oWnd <> nil
      oWnd:DefControl( Self )
   endif

return Self



UTILITY STATIC function TMeter_HandleEvent( nMsg, nWParam, nLParam) ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   if nMsg == 15
      ::BeginPaint()
      ::Paint()
      ::EndPaint()
      return 0
   endif

return ::TControl:HandleEvent( nMsg, nWParam, nLParam )


UTILITY STATIC function TMeter_Paint() ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   local nActual := Eval( ::bSetGet )






   MeterPaint( ::hWnd, ::hDC, nActual, ::nTotal, nActual * 100 / If( ::nTotal <> 0, ::nTotal, 1 ), ::cText, ::lPercentage, ::nClrPane, ::nClrText, ::nClrBar,  ::nClrBText,  If( ::oFont == NIL, 0, ::oFont:hFont ) )
return nil



UTILITY STATIC function TMeter_Set( nActual) ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   IIF( nActual == nil, nActual := Eval( ::bSetGet ), ) ;

   if nActual > ::nTotal
      nActual        := ::nTotal
   endif

   if nActual < 0
      nActual        := 0
   endif

   Eval( ::bSetGet, nActual )

   if ::nTotal <> 0 .AND. Int( ::nRefresh + ( nActual / ::nTotal ) * 100 ) >= ::nRefresh + 1
      ::nRefresh     += Int( ( nActual / ::nTotal ) * 100 )
      ::Refresh( .F. )
      SysRefresh()
   endif

return nil



UTILITY STATIC function TMeter_Default() ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   if ValType( Eval( ::bSetGet ) ) == "U"
      Eval( ::bSetGet, 0 )
   endif

   if ::oFont <> nil
      ::SetFont( ::oFont )
   else
      ::SetFont( ::oWnd:oFont )
   endif

return nil



UTILITY STATIC function TMeter_AutoInc() ; local Self AS CLASS TMeter := QSelf() AS CLASS TMeter

   ::nCurrent++

   if ( ::nTotal < 100 ) .OR. ( Mod( ::nCurrent, Int( ::nTotal / 100 ) ) == 0 )
      ::Set( ::nCurrent )
   end

Return nil

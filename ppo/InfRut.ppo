#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfRut.prg"
_HB_CLASS InfRut ; UTILITY FUNCTION InfRut(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfRut" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfRut_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfRut_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfRut_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfRut_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfRut_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfRut_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfRut ;



UTILITY STATIC function InfRut_Create() ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   ::AddField( "cCodRut",       "C",  4, 0, {|| "" },     "Cod.",             .T., "Código de la ruta",          5, .F. )
   ::AddField( "cDesRut",       "C", 30, 0, {|| "" },     "Ruta",             .T., "Nombre de la ruta",         30, .F. )

   ::AddTmpIndex ( "cCodRut", "cCodRut" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function InfRut_lResource( cFld) ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   if !::StdResource( "INF_RUT01" )
      return .F.
   end





   ::oDefRutInf( 70, 80, 90, 100, 60 )





   ::oMtrInf:SetTotal( ::oDbfRut:Lastrec() )

   ::CreateFilter( aItmRut(), ::oDbfRut:cAlias )

RETURN .T.






UTILITY STATIC function InfRut_lGenerate() ; local Self AS CLASS InfRut := QSelf() AS CLASS InfRut

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha : " + Dtoc( Date() ) }, {|| "Rutas : " + if( ::lAllRut, "Todos", AllTrim( ::cRutOrg ) + " > " + AllTrim( ::cRutDes ) ) } }

   ::oDbfRut:OrdSetFocus( "CCODRUT" )

   ::oDbfRut:GoTop()

   while !::lBreak .AND. !::oDbfRut:Eof()


      if ( ::lAllRut .OR. ( ::oDbfRut:cCodRut >= ::cRutOrg .AND. ::oDbfRut:cCodRut <= ::cRutDes ) ) .AND. ::EvalFilter()

         ::oDbf:Append()
         ::oDbf:cCodRut     := ::oDbfRut:cCodRut
         ::oDbf:cDesRut     := ::oDbfRut:cDesRut
         ::oDbf:Save()

      end

      ::oDbfRut:Skip()

      ::oMtrInf:AutoInc( ::oDbfRut:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfRut:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 16 ".\Prg\Empresa.prg"
static oWndBrw
static dbfEmp
static dbfDiv
static dbfDlg
static tmpDlg
static dbfBnc
static dbfCount
static dbfUser
static dbfTVta
static oBandera
static cNewDlg
static cNewBnc
static lActEmp       := .T.
static nIvaReq       := 1
static cOldSerie
static cOldNomSer
static cNewEmpresa   := ""

static oBanco
static oPais

static cTmpCon
static tmpDlgCon

static bEdiT         := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode ) }
static bEdtGrp       := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode | EdtGrp( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode ) }
static bEdtC         := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode | EdtCnf( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode ) }
static bEdtDlg       := {| aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode, cCod | EdtDet( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode, cCod ) }



static aItmEmp       := {}
static aTiempo       := { "0 min.", "1 min.", "2 min.", "5 min.", "10 min.", "15 min.", "30 min.", "45 min.", "1 hora", "2 horas", "4 horas", "8 horas" }
static aTiempoImp    := { "0 seg.", "5 seg.", "10 seg.", "15 seg.", "20 seg.", "25 seg.", "30 seg.", "35 seg.", "40 seg.", "45 seg.", "50 seg.", "55 seg.", "60 seg." }





STATIC FUNCTION OpenFiles( lCount )

   local lOpen    := .T.
   local oError
   local oBlock

   IIF( lCount == nil, lCount := .T., ) ;

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDlg ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "USERS.DBF" ), ( cCheckArea( "USERS", @dbfUser ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "USERS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TVTA.DBF" ), ( cCheckArea( "TVTA", @dbfTVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      if lCount
         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      end

      oBanco      := TBancos():Create()
      oBanco:OpenFiles()

      oPais       := TPais():Create( cPatDat() )
      oPais:OpenFiles()

      oBandera    := TBandera():New()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



Static Function CloseFiles()

   if !Empty( dbfEmp )
      ( dbfEmp )->( dbCloseArea() )
   end

   if !Empty( dbfDiv )
      ( dbfDiv )->( dbCloseArea() )
   end

   if !Empty( dbfDlg )
      ( dbfDlg )->( dbCloseArea() )
   end

   if !Empty( dbfUser )
      ( dbfUser )->( dbCloseArea() )
   end

   if !Empty( dbfTVta )
      ( dbfTVta )->( dbCloseArea() )
   end

   if !Empty( dbfCount )
      ( dbfCount )->( dbCloseArea() )
   end

   if !Empty( oBanco )
      oBanco:End()
   end

   if !Empty( oPais )
      oPais:End()
   end

   dbfEmp      := nil
   dbfDiv      := nil
   dbfDlg      := nil
   dbfUser     := nil
   dbfTVta     := nil
   dbfCount    := nil
   oBanco      := nil
   oPais       := nil

   if oWndBrw <> nil
      oWndBrw  := nil
   end

Return .T.



FUNCTION Empresa( oMenuItem, oWnd )

   local nLevel         := 0

   IIF( oMenuItem == nil, oMenuItem := "01003", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

   if oWndBrw == nil





      nLevel            := nLevelUsr( oMenuItem )

      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles()
         return nil
      end


















      oWndBrw := TShell():New( 2, 10, 18, 70, "Empresas",, oWnd,,, .F.,,, ( dbfEmp ),,,,, {"Código",    "Nombre"}, {||WinAppRec( nil, bEdit, dbfEmp )}, {||if( ( dbfEmp )->lGrupo, WinEdtRec( oWndBrw:oBrw, bEdtGrp, dbfEmp ), WinEdtRec( oWndBrw:oBrw, bEdit, dbfEmp ) )}, {||if( ( dbfEmp )->lGrupo, WinDelGrp( oWndBrw:oBrw, dbfEmp ), WinDelEmp( oWndBrw:oBrw, dbfEmp ) )}, {||WinDupRec( oWndBrw:oBrw, bEdit, dbfEmp )}, nil, nLevel, "Office_Building_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      oWndBrw:lAutoPos           := .F.


      oWndBrw:oBrw:bLDblClick    := {|| if ( lGrupo( ( dbfEmp )->CodEmp, dbfEmp ), MsgStop( "No se pueden seleccionar grupos de empresas." ), ( SetEmpresa( ( dbfEmp )->CodEmp, dbfEmp, dbfDlg, dbfUser, nil, oWnd ), if( !Empty( oWndBrw ), oWndBrw:End( .T. ), ), ) ) }



      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Seleccionada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfEmp )->CodEmp == cCodigoEmpresaEnUso() }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "FactorySelec_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodEmp"
         :bEditValue       := {|| if( ( dbfEmp )->lGrupo, "<" + rTrim( ( dbfEmp )->CodEmp ) + ">", ( dbfEmp )->CodEmp ) }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNombre"
         :bEditValue       := {|| if( ( dbfEmp )->lGrupo, "<" + rTrim( ( dbfEmp )->cNombre ) + ">", ( dbfEmp )->cNombre ) }
         :nWidth           := 340
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:CreateXFromCode()







      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()






      oWndBrw:NewAt( "SEL",,, {||( Eval( oWndBrw:oBrw:bLDblClick ) )}, "Sele(c)cionar", "C",,, 4,, .F. )








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







      oWndBrw:NewAt( "FACTORY_ADD2_",,, {||( WinAppRec( oWndBrw:oBrw, bEdtGrp, dbfEmp ) )}, "Añadir (g)rupo", "G",,, 2,, .F. )







      oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







      oWndBrw:NewAt( "ZOOM",,, {||( if( ( dbfEmp )->lGrupo, WinZooRec( oWndBrw:oBrw, bEdtGrp, dbfEmp ), WinZooRec( oWndBrw:oBrw, bEdit, dbfEmp ) ) )}, "(Z)oom", "Z",,, 8,, .F. )






      oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel(), oWndBrw:oBrw:Refresh() )}, "(E)liminar", "E",,, 16,, .F. )






      oWndBrw:NewAt( "CNFCLI",,, {||( WinEdtRec( oWndBrw:oBrw, bEdtC, dbfEmp ) )}, "Con(f)igurar", "F",,, 4,, .F. )






      oWndBrw:NewAt( "CAL",,, {||( ActualizaEmpGrp( dbfEmp, dbfDlg, dbfUser, oWndBrw, oWnd ) )}, "Ac(t)ualizar ficheros", "T",,, 4,, .F. )





      oWndBrw:NewAt( "END1",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

   else

        oWndBrw:setFocus()

   end

RETURN NIL



STATIC FUNCTION EdtRec( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFld
   local oBtnPrv
   local oBtnOk
    local oNomEmp
    local cNomEmp
    local oCodEmp
   local aImportacion   := aImportacion()
   local cCodEmp        := Space( 2 )
    local bmpEmp
   local oBmpEmp
   local oBrwDet
   local oBrwBnc
   local oBmpChg
   local oGetSemilla
   local nGetSemilla    := 1
   local oSayGrp
   local cSayGrp
   local oBmpGeneral
   local oBmpImportacion
   local oBmpDelegaciones
   local oBmpBancos

   if ( nMode == 1 ) .AND. ( nUsrInUse() > 1 )
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return .F.
   end



   StopServices()

   if nMode == 1
      aTmp[1 ]    := "00"
      aTmp[14]    := 7
      aTmp[15]    := 7
      aTmp[30]    := 1
      aTmp[31]    := 1
      aTmp[122]    := 1
      aTmp[118]    := 1
      aTmp[123]    := 1
      aTmp[119]    := 1
      aTmp[49]    := 8
      aTmp[138]    := 8
      aTmp[17]    := "EUR"
      aTmp[18]    := "PTS"
      aTmp[155]    := Ctod( "01/01/" + Str( Year( Date() ), 4 ) )
      aTmp[156]    := Ctod( "31/12/" + Str( Year( Date() ), 4 ) )
      aTmp[171]   := .T.
      aTmp[172]   := .T.
      aTmp[173]   := .T.
      aTmp[174]   := .T.
      aTmp[175]   := .T.
      aTmp[176]   := .T.
      aTmp[177]   := "Precio 1"
      aTmp[178]   := "Precio 2"
      aTmp[179]   := "Precio 3"
      aTmp[180]   := "Precio 4"
      aTmp[181]   := "Precio 5"
      aTmp[182]   := "Precio 6"
      aTmp[275 ]   := "IVA"
   end

   cSayGrp              := RetFld( aTmp[ 200 ], dbfEmp )

   if BeginEdtRec( aTmp, nMode )
      Return .F.
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Empresas", "EMPRESA",, .F.,,,,,, .F.,,,,,, .F., )

   if nMode == 1









   oFld := TFolder():ReDefine( 400, {"Em&presa", "&Importación", "De&legaciones"}, { "EMPRESA_1","EMPRESA_9","EMPRESA_11" }, oDlg,,,,, .F., )

   else







   oFld := TFolder():ReDefine( 400, {"Em&presa", "De&legaciones"}, { "EMPRESA_1","EMPRESA_11" }, oDlg,,,,, .F., )

   end





   oBmpGeneral := TBitmap():ReDefine( 500, "Factory_48_Alpha",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )






   aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( NotValid( aGet[ 1 ], dbfEmp, .T., "0" ) .AND. !Empty( aTmp[ 1 ] ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[219], aTmp[219]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[5], aTmp[5]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[6], aTmp[6]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[7], aTmp[7]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[9], aTmp[9]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[10], aTmp[10]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 194, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )












    aGet[ 200 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 200 ], aTmp[ 200 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cEmpresa( aGet[ 200 ], dbfEmp, oSayGrp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwEmpresa( aGet[ 200 ], dbfEmp, oSayGrp, .T. ) )}, nil, "LUPA",, )




   oSayGrp := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, cSayGrp, cSayGrp:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )



   aGet[ 224 ] := TCheckBox():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 224 ], aTmp[ 224 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



   aGet[ 230 ] := TCheckBox():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 230 ], aTmp[ 230 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



   aGet[ 225 ] := TCheckBox():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 225 ], aTmp[ 225 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



   aGet[ 231 ] := TCheckBox():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 231 ], aTmp[ 231 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )








   aGet[ 17 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDiv( aGet[ 17 ], oBmpEmp, , , , dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 17 ], oBmpEmp, nil, dbfDiv, oBandera )}, nil, "LUPA",, )




   oBmpEmp := TBitmap():ReDefine( 361, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )








   aGet[ 18 ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cDiv( aGet[ 18 ], oBmpChg, , , , dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 18 ], oBmpChg, nil, dbfDiv, oBandera )}, nil, "LUPA",, )




   oBmpChg := TBitmap():ReDefine( 371, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )








   TGetHlp():ReDefine( 201, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, "99", {||    ( aTmp[ 14 ] >= 4 .AND. aTmp[ 14 ] <= 12 )},,,,,, .F., {||     ( !aTmp[ 224 ] .AND. nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )








   TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, "99", {||    ( aTmp[ 15 ] >= 4 .AND. aTmp[ 15 ] <= 12 )},,,,,, .F., {||     ( !aTmp[ 230 ] .AND. nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )





   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 155 ], aTmp[ 155 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 156 ], aTmp[ 156 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

   if nMode == 1





      oBmpImportacion := TBitmap():ReDefine( 500, "Office_Building_48_Alpha",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )








      oCodEmp := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodEmp, cCodEmp:= u ) }, oFld:aDialogs[2],, "@!", {||    ( if( cEmpresa( oCodEmp, dbfEmp, oNomEmp ), AppFromEmpresa( cCodEmp, dbfEmp, aGet, aTmp, tmpDlg, dbfDlg ), .F. ) )},,,,,, .F., {||      ( nMode == 1 )},, .F., .F.,,,,, {|Self|( BrwEmpresa( oCodEmp, dbfEmp, oNomEmp ) )}, nil, "LUPA",, )




      oNomEmp := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cNomEmp, cNomEmp:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aImportacion:lArticulos, aImportacion:lArticulos:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty( cCodEmp ) .AND. nMode == 1 )}, .F. )




      TRadMenu():Redefine( { | u | If( PCount()==0, aImportacion:nCosto, aImportacion:nCosto:= u ) }, oFld:aDialogs[2],, { 231, 232 },,,,, .F., {||     ( ( !Empty( cCodEmp ) .AND. nMode == 1 ) .AND. aImportacion:lArticulos )}, )




      TCheckBox():ReDefine( 240, { | u | If( PCount()==0, aImportacion:lClientes, aImportacion:lClientes:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty( cCodEmp ) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 250, { | u | If( PCount()==0, aImportacion:lProveedor, aImportacion:lProveedor:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 251, { | u | If( PCount()==0, aImportacion:lOferta, aImportacion:lOferta:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 252, { | u | If( PCount()==0, aImportacion:lPromocion, aImportacion:lPromocion:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aImportacion:lAlmacen, aImportacion:lAlmacen:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 270, { | u | If( PCount()==0, aImportacion:lAgente, aImportacion:lAgente:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 280, { | u | If( PCount()==0, aImportacion:lRuta, aImportacion:lRuta:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 285, { | u | If( PCount()==0, aImportacion:lDocument, aImportacion:lDocument:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 290, { | u | If( PCount()==0, aImportacion:lStockIni, aImportacion:lStockIni:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aImportacion:lFPago, aImportacion:lFPago:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 310, { | u | If( PCount()==0, aImportacion:lPedPrv, aImportacion:lPedPrv:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 320, { | u | If( PCount()==0, aImportacion:lAlbPrv, aImportacion:lAlbPrv:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aImportacion:lPreCli, aImportacion:lPreCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aImportacion:lPedCli, aImportacion:lPedCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aImportacion:lAlbCli, aImportacion:lAlbCli:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 360, { | u | If( PCount()==0, aImportacion:lVale, aImportacion:lVale:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty(cCodEmp) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 370, { | u | If( PCount()==0, aImportacion:lAnticipo, aImportacion:lAnticipo:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty( cCodEmp ) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 380, { | u | If( PCount()==0, aImportacion:lProduccion, aImportacion:lProduccion:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty( cCodEmp ) .AND. nMode == 1 )}, .F. )




      TCheckBox():ReDefine( 390, { | u | If( PCount()==0, aImportacion:lBancos, aImportacion:lBancos:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( !Empty( cCodEmp ) .AND. nMode == 1 )}, .F. )






      oGetSemilla := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nGetSemilla, nGetSemilla:= u ) }, oFld:aDialogs[2],, "999999999", {||    ( nGetSemilla > 0 )},,,,,, .F., {||      ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )

   end










      oBmpDelegaciones := TBitmap():ReDefine( 600, "Flag_Eu_48_Alpha",, oFld:aDialogs[ if( nMode == 1, 3, 2 ) ],,, .F., .F.,,, .F.,,, .T. )




      TButton():ReDefine( 500, {||( WinAppRec( oBrwDet, bEdtDlg, tmpDlg, , , aTmp[ 1] ), oBrwDet:DrawSelect() )}, oFld:aDialogs[ if( nMode == 1, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) )}, oFld:aDialogs[ if( nMode == 1, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( DbDelRec( oBrwDet, tmpDlg ) )}, oFld:aDialogs[ if( nMode == 1, 3, 2 ) ],,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBrwDet                 := IXBrowse():New( if( nMode == 1, oFld:aDialogs[ 3 ], oFld:aDialogs[ 2 ] ) )

      oBrwDet:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDet:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDet:cAlias          := tmpDlg
      oBrwDet:nMarqueeStyle   := 6
      oBrwDet:cName           := "Delegacion.Empresa"

      with object ( oBrwDet:AddCol() )
         :cHeader             := "Código"
         :cSortOrder          := "cCodDlg"
         :bEditValue          := {|| ( tmpDlg )->cCodDlg }
         :nWidth              := 80
      end

      with object ( oBrwDet:AddCol() )
         :cHeader             := "Nombre"
         :cSortOrder          := "cNomDlg"
         :bEditValue          := {|| ( tmpDlg )->cNomDlg }
         :nWidth              := 260
      end

      oBrwDet:bRClicked       := {| nRow, nCol, nFlags | oBrwDet:RButtonDown( nRow, nCol, nFlags ) }

      if ( nMode <> 3 )
         oBrwDet:bLDblClick   := {|| WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) }
      end

      oBrwDet:CreateFromResource( 100 )













































































































      oBtnPrv := TButton():ReDefine( 3, {||( PrvTrans( oFld, oBtnOk ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      oBtnOk := TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrw, oFld, oDlg, oBtnOk, aImportacion, nGetSemilla, cCodEmp, oBrwDet, dbfEmp, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )


      if nMode <> 3
         oFld:aDialogs[2]:AddFastKey( 113, {|| WinAppRec( oBrwDet, bEdtDlg, tmpDlg, , , aTmp[1] ), oBrwDet:DrawSelect() } )
         oFld:aDialogs[2]:AddFastKey( 114, {|| WinEdtRec( oBrwDet, bEdtDlg, tmpDlg ) } )
         oFld:aDialogs[2]:AddFastKey( 115, {|| DBDelRec( oBrwDet, tmpDlg ) } )
         oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )
      end

      oDlg:bStart    := {|| oBrwDet:Load(), aGet[ 1  ]:SetFocus(), aGet[ 17 ]:lValid(), aGet[ 18 ]:lValid() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( if( nMode <> 1, oBtnPrv:Hide(), SetWindowText( oBtnOk:hWnd, "&Siguiente >" ) ) )}, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      SetEmpresa( cNewEmpresa, , , , , oWnd() )
   end

   oBmpChg:End()
   oBmpEmp:End()

   if !Empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !Empty( oBmpImportacion )
      oBmpImportacion:End()
   end

   if !Empty( oBmpDelegaciones )
      oBmpDelegaciones:End()
   end

   DeleteObject( bmpEmp )





   KillTrans()



   InitServices()

RETURN ( .T. )



STATIC FUNCTION EdtGrp( aTmp, aGet, dbfEmp, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oBtnOk
    local oCodEmp
   local cCodEmp              := Space( 2 )
   local oCodGrp
   local cCodGrp              := Space( 2 )
   local oGrupoImportacion
   local aImportacion         := aImportacion()

   if nMode == 1 .AND. nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return .F.
   end



   StopServices()

   if nMode == 1
      aTmp[ 199  ]  := .T.
      aTmp[ 14 ]  := 7
      aTmp[ 15 ]  := 7
   end

   if BeginEdtRec( aTmp )
      Return .F.
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "grupo de empresas", "GRUPOEMP",, .F.,,,,,, .F.,,,,,, .F., )






      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oDlg,, "@!", {||    ( NotValid( aGet[ 1 ], dbfEmp, .T., "0" ) .AND. !Empty( aTmp[ 1 ] ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oDlg,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oDlg,, "99", {||    ( aTmp[ 14 ] >= 4 .AND. aTmp[ 14 ] <= 12 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )








      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oDlg,, "99", {||    ( aTmp[ 15 ] >= 4 .AND. aTmp[ 15 ] <= 12 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      4}, {|| 12},, nil,,, )

      oGrupoImportacion := TGroup():ReDefine( 170,, oDlg,,,, .T. )










      oCodGrp := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cCodGrp, cCodGrp:= u ) }, oDlg,, "@!", {||    ( cEmpresa( oCodGrp, dbfEmp, oCodGrp:oHelpText ) )},,,,,, .F., {||     ( nMode == 1 .AND. Empty( cCodEmp ) )},, .F., .F.,,,,, {|Self|( BrwEmpresa( oCodGrp, dbfEmp, oCodGrp:oHelpText, .T. ) )}, nil, "LUPA", 152, 151 )










      oCodEmp := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cCodEmp, cCodEmp:= u ) }, oDlg,, "@!", {||    ( if( cEmpresa( oCodEmp, dbfEmp, oCodEmp:oHelpText ), AppFromEmpresa( cCodEmp, dbfEmp, aGet, aTmp, tmpDlg, dbfDlg ), .F. ) )},,,,,, .F., {||     ( nMode == 1 .AND. Empty( cCodGrp ) )},, .F., .F.,,,,, {|Self|( BrwEmpresa( oCodEmp, dbfEmp, oCodEmp:oHelpText ) )}, nil, "LUPA", 162, 161 )









      oBtnOk := TButton():ReDefine( 1, {||( EndGrpTrans( aTmp, aGet, oBrw, oDlg, oBtnOk, aImportacion, if( Empty( cCodGrp ), cCodEmp, cCodGrp ), !Empty( cCodGrp ), nMode ), oBrw:Refresh() )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )
      end

      oDlg:bStart := {|| SetDlgModeGrupo( aGet, oCodGrp, oCodEmp, oGrupoImportacion, nMode ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   KillTrans()



   InitServices()

RETURN ( .T. )



static function SetDlgModeGrupo( aGet, oCodGrp, oCodEmp, oGrupoImportacion, nMode )

   if nMode == 1

      oCodGrp:Show()
      oCodEmp:Show()
      oGrupoImportacion:Show()

   else

      oCodGrp:Hide()
      oCodEmp:Hide()
      oGrupoImportacion:Hide()

   end

   aGet[ 1  ]:SetFocus()

return ( .T. )



STATIC FUNCTION EdtCnf( aTmp, aGet, dbfEmp, oBrw, nSelFolder, bValid, nMode )

   local n
   local oFnt
    local oDlg
   local oFld
   local oSay                    := Array( 46 )
   local cSay                    := AFill( Array( 46 ), "" )
   local oTree
   local oError
   local oBlock
   local oBrwEmp
   local oBrwCon
   local aBnfSobre               := { "Costo", "Venta" }
   local aCifRut                 := { "Cálculo de C.I.F.", "Cálculo de R.U.T." }
   local oCmbSerie
   local cCmbSerie               := "A"
   local oGetContador
   local nGetContador            := 1
   local aPrinters               := GetPrinters()
   local oGetFormato
   local cGetFormato             := Space( 3 )
   local oSayFmt
   local cSayFmt                 := ""
   local oGetCopias
   local nGetCopias              := 1
   local oGetSerie
   local cGetSerie               := Space( 1 )
   local cTiempoPed
   local oGetNFCPrefijo
   local cGetNFCPrefijo
   local oGetNFCContador
   local cGetNFCContador
   local oGetPlantillaDefecto
   local cGetPlantillaDefecto    := Space( 250 )
   local oBrwCfg
   local oBmpComportamiento
   local oBmpDefecto
   local oBmpArticulos
   local oBmpContadores
   local oBmpContabilidad
   local oBmpEnvios
   local oBmpComunicacion
   local oGroupNFC
   local oSerie
   local cSerie                  := "A"
   local oNomSer
   local cNomSer                 := aTmp[ 245 ]






   local aItems                  := {  {  "Wrench_48_alpha",            "General"               }, {  "Preferences_Edit_48_alpha",  "Valores por defecto"   }, {  "Cube_Yellow_Alpha_48",       "Artículos"             }, {  "Document_Edit_48_alpha",     "Contadores y docs."    }, {  "Folder2_red_Alpha_48",       "Contabilidad"          }, {  "Satellite_dish_48_alpha",    "Envios"                }, {  "Earth2_Alpha_48",            "Comunicaciones"        } }




   if nAnd( nLevelUsr( "01003" ), 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .F.
   end

   if lGrupoEmpresa( ( ( dbfEmp )->CodEmp ), dbfEmp )
      msgStop( "No se puede configurar un grupo de empresas." )
      return .F.
   end

   if BeginEdtCnf( aTmp, nMode )
      return .F.
   end



   StopServices()



   SetEmpresa( ( dbfEmp )->CodEmp, dbfEmp, dbfDlg, dbfUser, oBrw, oWnd(), .T. )





   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( aTmp[ 108 ] )
      aTmp[ 108 ]     := Space( 1 )
   end

   if Empty( aTmp[ 21 ] )
      aTmp[ 21 ]     := "Cliente"
   end

   if Empty( aTmp[ 23 ] )
      aTmp[ 23 ]     := "A:"
   end

   if Empty( aTmp[ 163 ] )
      aTmp[ 163 ]     := Padr( "Cajas", 100 )
   end

   if Empty( aTmp[ 164 ] )
      aTmp[ 164 ]     := Padr( "Unidades", 100 )
   end

   if Empty( aTmp[ 183 ] )
      aTmp[ 183 ] := "0800"
   end

   if aTmp[ 271 ] < 1 .OR. aTmp[ 271 ] > 2
      aTmp[ 271 ]     := 1
   end

   if Empty( aTmp[ 275 ] )
      aTmp[ 275 ]     := "IVA"
   end

   cOldNomSer              := "A"

   n                       := aScan( aPrinters, {| cPrinter | Rtrim( cPrinter ) == Rtrim( aTmp[ 152 ] ) } )
   if n <> 0
      aTmp[ 152 ]     := aPrinters[ n ]
   else
      aTmp[ 152 ]     := Space( 200 )
   end

   if Empty( nSelFolder )
      nSelFolder           := 1
   end

   cSay[ 36 ]              := aBnfSobre[ Max( aTmp[ 130 ], 1 ) ]
   cSay[ 37 ]              := aBnfSobre[ Max( aTmp[ 131 ], 1 ) ]
   cSay[ 38 ]              := aBnfSobre[ Max( aTmp[ 132 ], 1 ) ]
   cSay[ 39 ]              := aBnfSobre[ Max( aTmp[ 133 ], 1 ) ]
   cSay[ 40 ]              := aBnfSobre[ Max( aTmp[ 134 ], 1 ) ]
   cSay[ 41 ]              := aBnfSobre[ Max( aTmp[ 135 ], 1 ) ]

   cSay[ 42 ]              := aCifRut[ Max( aTmp[ 207 ], 1 ) ]

   cTiempoPed              := cTiempoToCadena( aTmp[ 211 ] )

   oFnt := TFont():New( "Segoe UI Light", 0, -20,,,,,,,,,,,,,, )

   LoaItmEmp( aTmp )




   oDlg = TDialog():New(,,,, "Configuración de empresa : " + aTmp[ 1 ] + "-" + aTmp[ 2 ], "EMPRESACFG",, .F.,,,,, oWnd(), .F.,,,,,, .F., )

      oBrwCfg                        := TXBrowse():New( oDlg )

      oBrwCfg:nMarqueeStyle          := 5
      oBrwCfg:lRecordSelector        := .F.
      oBrwCfg:lHScroll               := .F.
      oBrwCfg:lVScroll               := .F.
      oBrwCfg:lHeader                := .F.
      oBrwCfg:nDataLines             := 1
      oBrwCfg:oFont                  := oFnt
      oBrwCfg:nRowHeight             := 60

      oBrwCfg:nMarqueeStyle          := 6

      oBrwCfg:bClrSel                := {|| { 16777215, ( 251 + ( 140 * 256 ) + ( 60 * 65536 ) ) } }
      oBrwCfg:bClrSelFocus           := {|| { 16777215, ( 251 + ( 140 * 256 ) + ( 60 * 65536 ) ) } }

      oBrwCfg:bChange                := {|| ChangeTreeCfg( oBrwCfg, oFld ) }

      oBrwCfg:CreateFromResource( 100 )

      oBrwCfg:SetArray( aItems, , , .F. )

      with object ( oBrwCfg:AddCol() )
         :nEditType       := -1
         :lBmpStretch     := .F.
         :lBmpTransparent := .T.
         :nDataBmpAlign   := 0
         :nWidth          := 60
         :bAlphaLevel     := {|| 255 }
         :bStrData        := {|| aItems[ oBrwCfg:nArrayAt, 2 ] }
         :bStrImage       := {|| aItems[ oBrwCfg:nArrayAt, 1 ] }
      end

      with object ( oBrwCfg:AddCol() )
         :bStrData        := {|| aItems[ oBrwCfg:nArrayAt, 2 ] }
         :nWidth          := 190
      end




   oFld := TPages():Redefine( 400, oDlg, {"EMPRESA_2", "EMPRESA_3", "EMPRESA_8", "EMPRESA_10", "EMPRESA_5", "EMPRESA_6", "EMPRESA_0"},,,, )









      oBmpComportamiento := TBitmap():ReDefine( 500, "wrench_48_alpha",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )



      aGet[ 20 ] := TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 34 ] := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 35 ] := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 36 ] := TCheckBox():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )




      aGet[ 244 ] := TCheckBox():ReDefine( 206, { | u | If( PCount()==0, aTmp[ 244 ], aTmp[ 244 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      aGet[ 145 ] := TCheckBox():ReDefine( 187, { | u | If( PCount()==0, aTmp[ 145 ], aTmp[ 145 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 140 ] := TCheckBox():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 140 ], aTmp[ 140 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      TCheckBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ 170 ], aTmp[ 170 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 275 ] := TGetHlp():ReDefine( 139, { | u | If( PCount()==0, aTmp[ 275 ], aTmp[ 275 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 38 ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 113 ] := TCheckBox():ReDefine( 181, { | u | If( PCount()==0, aTmp[ 113 ], aTmp[ 113 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 143 ] := TCheckBox():ReDefine( 182, { | u | If( PCount()==0, aTmp[ 143 ], aTmp[ 143 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 166 ] := TCheckBox():ReDefine( 191, { | u | If( PCount()==0, aTmp[ 166 ], aTmp[ 166 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 165 ] := TCheckBox():ReDefine( 189, { | u | If( PCount()==0, aTmp[ 165 ], aTmp[ 165 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 194 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 194 ], aTmp[ 194 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 193 ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 193 ], aTmp[ 193 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 243 ] := TCheckBox():ReDefine( 204, { | u | If( PCount()==0, aTmp[ 243 ], aTmp[ 243 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 141 ] := TCheckBox():ReDefine( 195, { | u | If( PCount()==0, aTmp[ 141 ], aTmp[ 141 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 37 ] := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 37 ], aTmp[ 37 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 137 ] := TCheckBox():ReDefine( 184, { | u | If( PCount()==0, aTmp[ 137 ], aTmp[ 137 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 195 ] := TCheckBox():ReDefine( 192, { | u | If( PCount()==0, aTmp[ 195 ], aTmp[ 195 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 116 ] := TCheckBox():ReDefine( 183, { | u | If( PCount()==0, aTmp[ 116 ], aTmp[ 116 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )




      aGet[ 117 ] := TCheckBox():ReDefine( 188, { | u | If( PCount()==0, aTmp[ 117 ], aTmp[ 117 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     aTmp[ 116 ]}, .F. )




      aGet[ 237 ] := TCheckBox():ReDefine( 153, { | u | If( PCount()==0, aTmp[ 237 ], aTmp[ 237 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     aTmp[ 116 ]}, .F. )



      aGet[ 142 ] := TCheckBox():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 142 ], aTmp[ 142 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 242 ] := TCheckBox():ReDefine( 203, { | u | If( PCount()==0, aTmp[ 242 ], aTmp[ 242 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 229 ] := TCheckBox():ReDefine( 761, { | u | If( PCount()==0, aTmp[ 229 ], aTmp[ 229 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 205 ] := TCheckBox():ReDefine( 198, { | u | If( PCount()==0, aTmp[ 205 ], aTmp[ 205 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 144 ] := TCheckBox():ReDefine( 186, { | u | If( PCount()==0, aTmp[ 144 ], aTmp[ 144 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 198 ] := TCheckBox():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 198 ], aTmp[ 198 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )




      aGet[ 202 ] := TCheckBox():ReDefine( 158, { | u | If( PCount()==0, aTmp[ 202 ], aTmp[ 202 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )




      aGet[ 223 ] := TCheckBox():ReDefine( 159, { | u | If( PCount()==0, aTmp[ 223 ], aTmp[ 223 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      aGet[ 228 ] := TCheckBox():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 228 ], aTmp[ 228 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 192 ] := TCheckBox():ReDefine( 193, { | u | If( PCount()==0, aTmp[ 192 ], aTmp[ 192 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 278 ] := TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[ 278 ], aTmp[ 278 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      aGet[ 279 ] := TCheckBox():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 279 ], aTmp[ 279 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      aGet[ 281 ] := TCheckBox():ReDefine( 127, { | u | If( PCount()==0, aTmp[ 281 ], aTmp[ 281 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,, .F.,, .F. )



      aGet[ 273 ] := TCheckBox():ReDefine( 990, { | u | If( PCount()==0, aTmp[ 273 ], aTmp[ 273 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 39 ] := TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 40 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 40 ], aTmp[ 40 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 45 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 46 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 41 ] := TCheckBox():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 42 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 43 ] := TCheckBox():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )



      aGet[ 44 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )









      oBmpDefecto := TBitmap():ReDefine( 500, "Preferences_edit_48_alpha",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )






      aGet[ 107 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 107 ], aTmp[ 107 ]:= u ) }, oFld:aDialogs[2],,, {||    ( cClient( aGet[ 107 ], , oSay[32] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 107 ], oSay[32] ) )}, nil, "LUPA",, )




      oSay[32] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSay[32], cSay[32]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 108 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 108 ], aTmp[ 108 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( aTmp[ 108 ] == Space( 1 ) .OR. ( aTmp[ 108 ] >= "A" .AND. aTmp[ 108 ] <= "Z" ) )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( aGet[ 108 ] ) )}, {||  ( DwSerie( aGet[ 108 ] ) )},,,, nil,,, )







      aGet[ 109 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 109 ], aTmp[ 109 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cCajas( aGet[ 109 ], , oSay[33] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 109 ], oSay[33] ) )}, nil, "LUPA",, )




      oSay[ 33 ] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[ 33 ], cSay[ 33 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 189 ] := TCheckBox():ReDefine( 142, { | u | If( PCount()==0, aTmp[ 189 ], aTmp[ 189 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F.,, .F. )







      aGet[ 47 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cAlmacen( aGet[ 47 ], , oSay[1] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 47 ], oSay[1] ) )}, nil, "LUPA",, )




      oSay[1] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSay[1], cSay[1]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 190 ] := TCheckBox():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 190 ], aTmp[ 190 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F.,, .F. )







      aGet[ 48 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cFPago( aGet[ 48 ], , oSay[2] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 48 ], oSay[2] ) )}, nil, "LUPA",, )




      oSay[2] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 121 ] := TGetHlp():ReDefine( 135, { | u | If( PCount()==0, aTmp[ 121 ], aTmp[ 121 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cTiva( aGet[ 121 ], , oSay[35] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 121 ], , oSay[35] ) )}, nil, "LUPA",, )




      oSay[35] := TGetHlp():ReDefine( 136, { | u | If( PCount()==0, cSay[35], cSay[35]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      aGet[ 167 ] := TCheckBox():ReDefine( 137, { | u | If( PCount()==0, aTmp[ 167 ], aTmp[ 167 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F.,, .F. )







      aGet[ 110 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 110 ], aTmp[ 110 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cUser( aGet[ 110 ], , oSay[34] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwUser( aGet[ 110 ], , oSay[34] ) )}, nil, "LUPA",, )




      oSay[34] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[34], cSay[34]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 154 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 154 ], aTmp[ 154 ]:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cTVta( aGet[ 154 ], dbfTVta, oSay[43] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwTVta( aGet[ 154 ], dbfTVta, oSay[43] ) )}, nil, "LUPA",, )




      oSay[43] := TGetHlp():ReDefine( 401, { | u | If( PCount()==0, cSay[43], cSay[43]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 226 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 226 ], aTmp[ 226 ]:= u ) }, oFld:aDialogs[ 2 ],, "@!", {||    ( cTemporada( aGet[ 226 ], , oSay[ 46 ] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwTemporada( aGet[ 226 ], oSay[ 46 ] ) )}, nil, "LUPA",, )




      oSay[ 46 ] := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, cSay[ 46 ], cSay[ 46 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 120 ] := TGetHlp():ReDefine( 155, { | u | If( PCount()==0, aTmp[ 120 ], aTmp[ 120 ]:= u ) }, oFld:aDialogs[2],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 120 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 120 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )








      aGet[ 183 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 183 ], aTmp[ 183 ]:= u ) }, oFld:aDialogs[ 2 ],, "@R 99:99", {||    ( ValidTime( aGet[ 183 ], .T. ) )},,,,,, .F.,,, .F., .T., {||    ( UpTime( aGet[ 183 ] ) )}, {||  ( DwTime( aGet[ 183 ] ) )},,,, nil,,, )








      oSerie := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, cSerie, cSerie:= u ) }, oFld:aDialogs[2],, "@!", {||    ( cSerie >= "A" .AND. cSerie <= "Z" )},,,,,, .F.,,, .F., .T., {||    ( ChangeSerie( aGet, aTmp, oSerie, cSerie, oNomSer, cNomSer, .F. ) )}, {||  ( ChangeSerie( aGet, aTmp, oSerie, cSerie, oNomSer, cNomSer, .T. ) )},,,, nil,,, )




      oNomSer := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cNomSer, cNomSer:= u ) }, oFld:aDialogs[2],,, {||    ( GuardaNombreSerie( aTmp, cSerie, cNomSer ) )},,,,,, .F.,,, .F., .F.,,,,,, nil,,, )






      aGet[ 280 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 280 ], aTmp[ 280 ]:= u ) }, oFld:aDialogs[ 2 ],, "999999999", {||    ( aTmp[ 280 ] > 0 )},,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 148 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 148 ], aTmp[ 148 ]:= u ) }, oFld:aDialogs[ 2 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 227 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 227 ], aTmp[ 227 ]:= u ) }, oFld:aDialogs[ 2 ],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      oSay[ 42 ] := TComboBox():ReDefine( 160, { | u | If( PCount()==0, cSay[ 42 ], cSay[ 42 ]:= u ) }, aCifRut, oFld:aDialogs[ 2 ],,,,,,, .F.,,,,,, )









      oBmpArticulos := TBitmap():ReDefine( 500, "Cube_Yellow_Alpha_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )




      aGet[ 171 ] := TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 171 ], aTmp[ 171 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     .F.}, .F. )




      aGet[ 177 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 177 ], aTmp[ 177 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      aGet[ 124 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 124 ], aTmp[ 124 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      oSay[ 36 ] := TComboBox():ReDefine( 130, { | u | If( PCount()==0, cSay[ 36 ], cSay[ 36 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F.,,,,,, )



      aGet[ 172 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 172 ], aTmp[ 172 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )





      aGet[ 178 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 178 ], aTmp[ 178 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( aTmp[ 172 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 125 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 125 ], aTmp[ 125 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 172 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 37 ] := TComboBox():ReDefine( 230, { | u | If( PCount()==0, cSay[ 37 ], cSay[ 37 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F., {||     ( aTmp[ 172 ] )},,,,, )



      aGet[ 173 ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 173 ], aTmp[ 173 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )





      aGet[ 179 ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 179 ], aTmp[ 179 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( aTmp[ 173 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 126 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 126 ], aTmp[ 126 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 173 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 38 ] := TComboBox():ReDefine( 330, { | u | If( PCount()==0, cSay[ 38 ], cSay[ 38 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F., {||     ( aTmp[ 173 ] )},,,,, )



      aGet[ 174 ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 174 ], aTmp[ 174 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )





      aGet[ 180 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 180 ], aTmp[ 180 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( aTmp[ 174 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 127 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 127 ], aTmp[ 127 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 174 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 39 ] := TComboBox():ReDefine( 430, { | u | If( PCount()==0, cSay[ 39 ], cSay[ 39 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F., {||     ( aTmp[ 174 ] )},,,,, )



      aGet[ 175 ] := TCheckBox():ReDefine( 501, { | u | If( PCount()==0, aTmp[ 175 ], aTmp[ 175 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )





      aGet[ 181 ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ 181 ], aTmp[ 181 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( aTmp[ 175 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 128 ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ 128 ], aTmp[ 128 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 175 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 40 ] := TComboBox():ReDefine( 530, { | u | If( PCount()==0, cSay[ 40 ], cSay[ 40 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F., {||     ( aTmp[ 175 ] )},,,,, )



      aGet[ 176 ] := TCheckBox():ReDefine( 600, { | u | If( PCount()==0, aTmp[ 176 ], aTmp[ 176 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )





      aGet[ 182 ] := TGetHlp():ReDefine( 610, { | u | If( PCount()==0, aTmp[ 182 ], aTmp[ 182 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     ( aTmp[ 176 ] )},, .F., .T.,,,,,, nil,,, )






      aGet[ 129 ] := TGetHlp():ReDefine( 620, { | u | If( PCount()==0, aTmp[ 129 ], aTmp[ 129 ]:= u ) }, oFld:aDialogs[3],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ 176 ] )},, .F., .T.,,,,,, nil,,, )





      oSay[ 41 ] := TComboBox():ReDefine( 630, { | u | If( PCount()==0, cSay[ 41 ], cSay[ 41 ]:= u ) }, aBnfSobre, oFld:aDialogs[3],,,,,,, .F., {||     ( aTmp[ 176 ] )},,,,, )







      aGet[ 232 ] := TGetHlp():ReDefine( 800, { | u | If( PCount()==0, aTmp[ 232 ], aTmp[ 232 ]:= u ) }, oFld:aDialogs[3],, "9",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      6},, nil,,, )







      aGet[ 233 ] := TGetHlp():ReDefine( 810, { | u | If( PCount()==0, aTmp[ 233 ], aTmp[ 233 ]:= u ) }, oFld:aDialogs[3],, "9",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      6},, nil,,, )







      aGet[ 203 ] := TGetHlp():ReDefine( 740, { | u | If( PCount()==0, aTmp[ 203 ], aTmp[ 203 ]:= u ) }, oFld:aDialogs[3],, "9",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      6},, nil,,, )







      aGet[ 204 ] := TGetHlp():ReDefine( 750, { | u | If( PCount()==0, aTmp[ 204 ], aTmp[ 204 ]:= u ) }, oFld:aDialogs[3],, "9",,,,,,, .F.,,, .F., .T.,,, {||      0}, {||      6},, nil,,, )




      aGet[ 32 ] := TCheckBox():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[3],, {|| ( lChgCajCaj( aGet, aTmp ) )},,,,, .F.,, .F. )




      aGet[ 33 ] := TCheckBox():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     aTmp[ 32 ]}, .F. )




      aGet[ 163 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 163 ], aTmp[ 163 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F., {||     aTmp[ 32 ]},, .F., .F.,,,,,, nil,,, )



      aGet[ 164 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 164 ], aTmp[ 164 ]:= u ) }, oFld:aDialogs[3],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 206 ] := TCheckBox():ReDefine( 770, { | u | If( PCount()==0, aTmp[ 206 ], aTmp[ 206 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )



      aGet[ 201 ] := TCheckBox():ReDefine( 193, { | u | If( PCount()==0, aTmp[ 201 ], aTmp[ 201 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )



      aGet[ 234 ] := TCheckBox():ReDefine( 196, { | u | If( PCount()==0, aTmp[ 234 ], aTmp[ 234 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )




      aGet[ 212 ] := TCheckBox():ReDefine( 194, { | u | If( PCount()==0, aTmp[ 212 ], aTmp[ 212 ]:= u ) }, oFld:aDialogs[ 3 ],,,,,,, .F.,, .F. )



      aGet[ 240 ] := TCheckBox():ReDefine( 197, { | u | If( PCount()==0, aTmp[ 240 ], aTmp[ 240 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )



      aGet[ 241 ] := TCheckBox():ReDefine( 198, { | u | If( PCount()==0, aTmp[ 241 ], aTmp[ 241 ]:= u ) }, oFld:aDialogs[3],,,,,,, .F.,, .F. )






      TGetHlp():ReDefine( 700, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[3],, "99", {||    ( aTmp[ 49 ] >= 8 .AND. aTmp[ 49 ] <= 12 )},,,,,, .F.,,, .F., .T.,,, {|| 8}, {|| 12},, nil,,, )






      TGetHlp():ReDefine( 710, { | u | If( PCount()==0, aTmp[ 50 ], aTmp[ 50 ]:= u ) }, oFld:aDialogs[3],, "99", {||    ( aTmp[ 50 ] >= 0 .AND. aTmp[ 50 ]  <= 6 )},,,,,, .F.,,, .F., .T.,,, {|| 0}, {|| 6},, nil,,, )






      TGetHlp():ReDefine( 720, { | u | If( PCount()==0, aTmp[ 138 ], aTmp[ 138 ]:= u ) }, oFld:aDialogs[3],, "99", {||    ( aTmp[ 138 ] >= 8 .AND. aTmp[ 138 ] <= 12 )},,,,,, .F.,,, .F., .T.,,, {|| 8}, {|| 12},, nil,,, )






      TGetHlp():ReDefine( 730, { | u | If( PCount()==0, aTmp[ 139 ], aTmp[ 139 ]:= u ) }, oFld:aDialogs[3],, "99", {||    ( aTmp[ 139 ] >= 0 .AND. aTmp[ 139 ]  <= 6 )},,,,,, .F.,,, .F., .T.,,, {|| 0}, {|| 6},, nil,,, )









      oBmpContadores := TBitmap():ReDefine( 500, "document_edit_48_alpha",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )

      oTree          := TTreeView():Redefine( 100, oFld:aDialogs[ 4 ] )
      oTree:bChanged := {|| TreeChanged( oTree, oCmbSerie, oGetSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador, oGroupNFC, oGetPlantillaDefecto ) }









      oGetSerie := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cGetSerie, cGetSerie:= u ) }, oFld:aDialogs[ 4 ],, "@!", {||    ( Empty( cGetSerie ) .OR. ( cGetSerie >= "A" .AND. cGetSerie <= "Z" ) )},,,,,, .F.,,, .F., .T., {||    ( UpSerie( oGetSerie ) )}, {||  ( DwSerie( oGetSerie ) )},,,, nil,, 151, )






























      oCmbSerie := TComboBox():ReDefine( 110, { | u | If( PCount()==0, cCmbSerie, cCmbSerie:= u ) }, {  "Propiedades de la serie [A]", "Propiedades de la serie [B]", "Propiedades de la serie [C]", "Propiedades de la serie [D]", "Propiedades de la serie [E]", "Propiedades de la serie [F]", "Propiedades de la serie [G]", "Propiedades de la serie [H]", "Propiedades de la serie [I]", "Propiedades de la serie [J]", "Propiedades de la serie [K]", "Propiedades de la serie [L]", "Propiedades de la serie [M]", "Propiedades de la serie [N]", "Propiedades de la serie [O]", "Propiedades de la serie [P]", "Propiedades de la serie [Q]", "Propiedades de la serie [R]", "Propiedades de la serie [S]", "Propiedades de la serie [T]", "Propiedades de la serie [U]", "Propiedades de la serie [V]", "Propiedades de la serie [W]", "Propiedades de la serie [X]", "Propiedades de la serie [Y]", "Propiedades de la serie [Z]" }, oFld:aDialogs[ 4 ],,, {|Self|( CmbSerieChanged( oCmbSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador ) )},,,, .F.,,,,,, )







      oGetContador := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nGetContador, nGetContador:= u ) }, oFld:aDialogs[ 4 ],, "999999999", {||    ( nGetContador > 0 )},,,,,, .F.,,, .F., .T.,,,,,, nil,, 122, )








      oGetFormato := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetFormato, cGetFormato:= u ) }, oFld:aDialogs[ 4 ],,, {||    ( cDocumento( oGetFormato, oGetFormato:oHelpText ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwDocumento( oGetFormato, oGetFormato:oHelpText ) )}, nil, "LUPA", 132, 131 )









      oGetCopias := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nGetCopias, nGetCopias:= u ) }, oFld:aDialogs[ 4 ],, "9", {||    nGetCopias >= 0},,,,,, .F.,,, .F., .T.,,, {||      0}, {||      9},, nil,, 141, )




      oGetNFCPrefijo := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cGetNFCPrefijo, cGetNFCPrefijo:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 161, )




      oGetNFCContador := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, cGetNFCContador, cGetNFCContador:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 171, )




      oGroupNFC := TGroup():ReDefine( 180,, oFld:aDialogs[ 4 ],,,, .T. )





      oGetPlantillaDefecto := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, cGetPlantillaDefecto, cGetPlantillaDefecto:= u ) }, oFld:aDialogs[ 4 ],,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oGetPlantillaDefecto:cText( cGetFile( "Html ( *.Html ) | *.Html", "Seleccione el nombre del fichero" ) ) )}, nil, "Folder",, )









      oBmpContabilidad := TBitmap():ReDefine( 500, "Folder2_red_Alpha_48",, oFld:aDialogs[5],,, .F., .F.,,, .F.,,, .T. )





      aGet[ 51 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[5],, "@!",,,,,,, .F.,,, .F., .F.,,,,,, nil, "FOLDER",, )

      aGet[ 51 ]:bHelp        := {|| aGet[ 51 ]:cText( Padr( cGetDir32( "Seleccione directorio de Contaplus", Rtrim( aTmp[ 51 ] ), .T. ), 100 ) ) }
      aGet[ 51 ]:bValid       := {|| ChkRuta( aTmp[ 51 ], .T. ), .T. }





      TButton():ReDefine( 130, {||( EditConta( oBrwEmp:nArrayAt, aTmp ), oBrwEmp:Refresh() )}, oFld:aDialogs[5],,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},,, .F. )

      oBrwEmp                       := TXBrowse():New( oFld:aDialogs[ 5 ] )

      oBrwEmp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwEmp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwEmp:bWhen                 := {|| ChkRuta( aTmp[ 51 ], .F. ) }
      oBrwEmp:bLDblClick            := {|| EditConta( oBrwEmp:nArrayAt, aTmp ), oBrwEmp:Refresh() }

      oBrwEmp:SetArray( aItmEmp, , , .F. )

      oBrwEmp:nMarqueeStyle         := 5
      oBrwEmp:lHScroll              := .F.

      oBrwEmp:CreateFromResource( 110 )

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Serie"
         :bEditValue       := {|| if( !Empty( aItmEmp ), aItmEmp[ oBrwEmp:nArrayAt, 1 ], "" ) }
         :nWidth           := 30
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| if( !Empty( aItmEmp ), aItmEmp[ oBrwEmp:nArrayAt, 2 ], "" ) }
         :nWidth           := 60
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Empresa"
         :bEditValue       := {|| if( !Empty( aItmEmp ), cEmpresaContaplus( AllTrim( aTmp[ 51 ] ), aItmEmp[ oBrwEmp:nArrayAt, 2 ] ), "" ) }
         :nWidth           := 190
      end

      with object ( oBrwEmp:AddCol() )
         :cHeader          := "Proyecto"
         :bEditValue       := {|| if( !Empty( aItmEmp ), Transform( aItmEmp[ oBrwEmp:nArrayAt, 3 ], "@R ###.#######" ), "" ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end









      aGet[ 104 ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ 104 ], aTmp[ 104 ]:= u ) }, oFld:aDialogs[5],, "999", {||    ( ChkCta( aTmp[ 104 ], aGet[ 104 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 104 ], aGet[ 104 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 371, )









      aGet[ 105 ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ 105 ], aTmp[ 105 ]:= u ) }, oFld:aDialogs[5],, "999", {||    ( ChkCta( aTmp[ 105 ], aGet[ 105 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 105 ], aGet[ 105 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 381, )









      aGet[ 106 ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ 106 ], aTmp[ 106 ]:= u ) }, oFld:aDialogs[5],, "999", {||    ( ChkCta( aTmp[ 106 ], aGet[ 106 ]:oSay, .F., AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )},, .F., .F.,,,,, {|Self|( BrwChkCta( aGet[ 106 ], aGet[ 106 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 391, )









      aGet[ 111 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 111 ], aTmp[ 111 ]:= u ) }, oFld:aDialogs[5],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 111 ], nil, aGet[ 111 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 111 ], aGet[ 111 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 401, )









      aGet[ 112 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 112 ], aTmp[ 112 ]:= u ) }, oFld:aDialogs[5],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 112 ], nil, aGet[ 112 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 112 ], aGet[ 112 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 411, )









      aGet[ 149 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 149 ], aTmp[ 149 ]:= u ) }, oFld:aDialogs[ 5 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 149 ], nil, aGet[ 149 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 149 ], aGet[ 149 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 431, )









      aGet[ 157 ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ 157 ], aTmp[ 157 ]:= u ) }, oFld:aDialogs[ 5 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 157 ], nil, aGet[ 157 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 157 ], aGet[ 157 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 441, )









      aGet[ 169 ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ 169 ], aTmp[ 169 ]:= u ) }, oFld:aDialogs[ 5 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 169 ], nil, aGet[ 169 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 169 ], aGet[ 169 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 451, )









      aGet[ 168 ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ 168 ], aTmp[ 168 ]:= u ) }, oFld:aDialogs[ 5 ],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 168 ], nil, aGet[ 168 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )},,,,,, .F., {||     ( ChkRuta( aTmp[ 51 ], .F. ) )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 168 ], aGet[ 168 ]:oSay, AllTrim( aTmp[ 51 ] ), aItmEmp[ 1, 2 ] ) )}, nil, "LUPA", 461, )




      TRadMenu():Redefine( { | u | If( PCount()==0, nIvaReq, nIvaReq:= u ) }, oFld:aDialogs[ 5 ],, { 420, 421 },,,,, .F., {||     ChkRuta( aTmp[ 51 ], .F. )}, )



      aGet[ 236 ] := TCheckBox():ReDefine( 470, { | u | If( PCount()==0, aTmp[ 236 ], aTmp[ 236 ]:= u ) }, oFld:aDialogs[ 5 ],,,,,,, .F.,, .F. )



      aGet[ 276 ] := TCheckBox():ReDefine( 480, { | u | If( PCount()==0, aTmp[ 276 ], aTmp[ 276 ]:= u ) }, oFld:aDialogs[ 5 ],,,,,,, .F.,, .F. )



      aGet[ 277 ] := TCheckBox():ReDefine( 490, { | u | If( PCount()==0, aTmp[ 277 ], aTmp[ 277 ]:= u ) }, oFld:aDialogs[ 5 ],,,,,,, .F.,, .F. )









      oBmpEnvios := TBitmap():ReDefine( 500, "Satellite_dish_48_alpha",, oFld:aDialogs[6],,, .F., .F.,,, .F.,,, .T. )




      aGet[ 21 ] := TComboBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, { "Cliente", "Servidor" }, oFld:aDialogs[6],,,,,,, .F.,,,,,, )



      TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[6],, { 110, 111 },,,,, .F.,, )






      aGet[ 23 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[6],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 23 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 23 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )




      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( aTmp[ 22 ] == 2 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[28], aTmp[28]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( aTmp[22] == 2 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[29], aTmp[29]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( aTmp[22] == 2 )},, .F., .F.,,,,,, nil,,, )



      aGet[ 221 ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 221 ], aTmp[ 221 ]:= u ) }, oFld:aDialogs[6],,,,,,, .F.,, .F. )



      aGet[ 147 ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 147 ], aTmp[ 147 ]:= u ) }, oFld:aDialogs[6],,,,,,, .F.,, .F. )









      oBmpComunicacion := TBitmap():ReDefine( 500, "Earth2_Alpha_48",, oFld:aDialogs[7],,, .F., .F.,,, .F.,,, .T. )



      TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 184 ], aTmp[ 184 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 196 ], aTmp[ 196 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 185 ], aTmp[ 185 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 176, { | u | If( PCount()==0, aTmp[ 186 ], aTmp[ 186 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TCheckBox():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 197 ], aTmp[ 197 ]:= u ) }, oFld:aDialogs[7],,,,,,, .F.,, .F. )



      TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 187 ], aTmp[ 187 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 271 ], aTmp[ 271 ]:= u ) }, oFld:aDialogs[7],, { 121, 122 },,,,, .F.,, )



      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 158 ], aTmp[ 158 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )






      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 161 ], aTmp[ 161 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .T.,,, {||      1}, {||      65535},, nil,,, )



      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 159 ], aTmp[ 159 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 160 ], aTmp[ 160 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 162 ], aTmp[ 162 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 141, { | u | If( PCount()==0, aTmp[ 274 ], aTmp[ 274 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )








      aGet[ 210 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 210 ], aTmp[ 210 ]:= u ) }, oFld:aDialogs[ 7 ],, "@!", {||    ( aTmp[ 210 ] >= "A" .AND. aTmp[ 210 ] <= "Z"  )},,,,,, .F.,,, .F., .T., {||    ( UpSerie( aGet[ 210 ] ) )}, {||  ( DwSerie( aGet[ 210 ] ) )},,,, nil,,, )







      TBtnBmp():ReDefine( 150, "Data_Connection_16",,,,, {|Self|( TMySql():New( aTmp[ 158 ], aTmp[ 159 ], aTmp[ 160 ], aTmp[ 162 ], aTmp[ 161 ] ):TestConexion() )}, oFld:aDialogs[7], .F.,, .F., "Porbar conexión",,,,, !.T.,, .F.,,, .F., !.F. )




      TComboBox():ReDefine( 220, { | u | If( PCount()==0, cTiempoPed, cTiempoPed:= u ) }, aTiempo, oFld:aDialogs[ 7 ],,,,,,, .F.,,,,,, )



      aGet[ 235 ] := TCheckBox():ReDefine( 199, { | u | If( PCount()==0, aTmp[ 235 ], aTmp[ 235 ]:= u ) }, oFld:aDialogs[7],,,,,,, .F.,, .F. )



      TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 217 ], aTmp[ 217 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 218 ], aTmp[ 218 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 215 ], aTmp[ 215 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      aGet[ 222 ] := TCheckBox():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 222 ], aTmp[ 222 ]:= u ) }, oFld:aDialogs[7],,,,,,, .F.,, .F. )



      TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 216 ], aTmp[ 216 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 208 ], aTmp[ 208 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )






      aGet[ 213 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 213 ], aTmp[ 213 ]:= u ) }, oFld:aDialogs[7],, "@!",,,,,,, .F.,,, .F., .F.,,,,, {|Self|( aGet[ 213 ]:cText( Padr( cGetDir32( "Seleccione directorio", Rtrim( aTmp[ 213 ] ), .T. ), 100 ) ) )}, nil, "FOLDER",, )



      TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 214 ], aTmp[ 214 ]:= u ) }, oFld:aDialogs[7],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )








      TButton():ReDefine( 1, {||( SaveEdtCnf( aTmp, oSay, oTree, oCmbSerie, oGetSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador, oBrw, dbfEmp, nMode, cTiempoPed, oDlg, oNomSer ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oFld:aDialogs[ 4 ]:AddFastKey( 114, {|| EdtCon( oBrwCon ) } )
      oFld:aDialogs[ 5 ]:AddFastKey( 114, {|| EditConta( oBrwEmp:nAt, aTmp ), oBrwEmp:Refresh() } )

      oDlg:AddFastKey( 116, {|| SaveEdtCnf( aTmp, oSay, oTree, oCmbSerie, oGetSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador, oBrw, dbfEmp, nMode, cTiempoPed, oDlg, oNomSer ) } )

      oDlg:bStart    := {|| aEvalValid( oFld:aDialogs[ 2 ] ), aEvalValid( oFld:aDialogs[ 5 ] ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( InitEdtCnf( nSelFolder, oFld, oTree, oBrwCfg ) )}, oDlg:bRClicked,,, )





   RECOVER USING oError

      msgStop( "Imposible editar configuración de empresas" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

   end
   ErrorBlock( oBlock )





   KillTrans()

   if oDlg:nResult == 1
      SetEmpresa( ( dbfEmp )->CodEmp, dbfEmp, dbfDlg, dbfUser, oBrw, oWnd(), .T. )
   end



   InitServices()





   if !Empty( oBmpComportamiento )
      oBmpComportamiento:End()
   end

   if !Empty( oBmpDefecto )
      oBmpDefecto:End()
   end

   if !Empty( oBmpArticulos )
      oBmpArticulos:End()
   end

   if !Empty( oBmpContadores )
      oBmpContadores:End()
   end

   if !Empty( oBmpContabilidad )
      oBmpContabilidad:End()
   end

   if !Empty( oBmpEnvios )
      oBmpEnvios:End()
   end

   if !Empty( oBmpComunicacion )
      oBmpComunicacion:End()
   end

   if !Empty( oFnt )
      oFnt:End()
   end

RETURN ( oDlg:nResult == 1 )



Static Function KillTrans()





   if !Empty( tmpDlg ) .AND. ( tmpDlg )->( Used() )
      ( tmpDlg )->( dbCloseArea() )
      tmpDlg         := nil
   end

   dbfErase( cNewDlg )

   if !Empty( tmpDlgCon ) .AND. ( tmpDlgCon )->( Used() )
      ( tmpDlgCon )->( dbCloseArea() )
      tmpDlgCon      := nil
   end

   dbfErase( cTmpCon )

Return nil



Static Function InitEdtCnf( nSelFolder, oFld, oTree, oBrwCfg )

   local oRoot
   local oPrincipal
   local oTreeImageList    := TImageList():New( 16, 16 )





   oTreeImageList:AddMasked( TBitmap():Define( "Clipboard_empty_businessman_16" ),  ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_plain_businessman_16" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_businessman_16" ),         ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Notebook_user1_16" ),               ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Clipboard_empty_user1_16" ),        ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_plain_user1_16" ),         ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_user1_16" ),               ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_money2_16" ),              ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_delete_16" ),              ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Package_add_16" ),                  ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Package_ok_16" ),                   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Cashier_user1_16" ),                ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Worker2_Form_Red_16" ),             ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Folder_document_16" ),              ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Pencil_Package_16" ),               ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Stopwatch_16" ),                    ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Briefcase_document_16" ),           ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Truck_blue_document_16" ),          ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "User1_16" ),                        ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Money2_businessman_16" ),           ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Briefcase_user1_16" ),              ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Briefcase_security_agent_16" ),     ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Clipboard_Empty_Moneybag_16" ),     ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
   oTreeImageList:AddMasked( TBitmap():Define( "Document_Plain_Moneybag_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )

   oTree:SetImageList( oTreeImageList )

   oRoot                   := oTree:Add( "Pedido a proveedores",                    0 )
                              oTree:Add( "Albaran de proveedores",                  1 )
                              oTree:Add( "Facturas de proveedores",                 2 )
                              oTree:Add( "Facturas rectificativas de proveedores", 21 )
                              oTree:Add( "Presupuestos a clientes",                 3 )
                              oTree:Add( "Pedido de clientes",                      4 )
                              oTree:Add( "Albaranes de clientes",                   5 )
                              oTree:Add( "Facturas a clientes",                     6 )
                              oTree:Add( "Anticipos de facturas clientes",          7 )
                              oTree:Add( "Facturas rectificativas",                 8 )
                              oTree:Add( "Introducción depósitos",                  9 )
                              oTree:Add( "Estado depósitos",                        10 )
                              oTree:Add( "Tickets a clientes",                      11 )
                              oTree:Add( "Partes de producción",                    12 )
                              oTree:Add( "Expedientes",                             13 )
                              oTree:Add( "Movimientos de almacén",                  14 )
                              oTree:Add( "Sesiónes",                                15 )
                              oTree:Add( "Remesas bancarias",                       16 )
                              oTree:Add( "Ordenes de carga",                        17 )
                              oTree:Add( "Cobros de clientes",                      18 )
                              oTree:Add( "Recibos de proveedor",                    19 )
                              oTree:Add( "Recibos de clientes",                     20 )
                              oTree:Add( "Liquidación de agentes",                  21 )
                              oTree:Add( "Entrega a cuenta pedido",                 22 )
                              oTree:Add( "Entrega a cuenta albarán",                23 )

   oTree:Select( oRoot )

   oFld:SetOption( nSelFolder )

Return ( nil )



static Function ChangeTreeCfg( oBrwCfg, oFld )

   oFld:SetOption( oBrwCfg:nArrayAt )
   oBrwCfg:Refresh()

Return nil



Static Function TreeChanged( oTree, oCmbSerie, oGetSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador, oGroupNFC, oGetPlantillaDefecto )

   local cSerie
   local cSerieDefault
   local nContador
   local cFormato
   local nCopias
   local cItemText
   local cNFCPrefijo
   local cNFCContador
   local cPlantillaDefecto





   cItemText            := Upper( Rtrim( oTree:GetSelText() ) )
   if Empty( cItemText )
      return ( nil )
   end





   cSerie               := oCmbSerie:VarGet()[ 26 ]
   cSerieDefault        := oGetSerie:VarGet()
   nContador            := oGetContador:VarGet()
   cFormato             := oGetFormato:VarGet()
   nCopias              := oGetCopias:VarGet()

   cNFCPrefijo          := oGetNFCPrefijo:VarGet()
   cNFCContador         := oGetNFCContador:VarGet()
   cPlantillaDefecto    := oGetPlantillaDefecto:VarGet()

   if dbDialogLock( tmpDlgCon )

      if !Empty( cSerie )

         ( tmpDlgCon )->( FieldPut( FieldPos( cSerie ),              nContador      ) )
         ( tmpDlgCon )->( FieldPut( FieldPos( "Doc" + cSerie ),      cFormato       ) )
         ( tmpDlgCon )->( FieldPut( FieldPos( "Copias" + cSerie ),   nCopias        ) )

         ( tmpDlgCon )->( FieldPut( FieldPos( "cNFC" + cSerie ),     cNFCPrefijo    ) )
         ( tmpDlgCon )->( FieldPut( FieldPos( "nNFC" + cSerie ),     cNFCContador   ) )

         if !Empty( cSerieDefault )
            ( tmpDlgCon )->( FieldPut( FieldPos( "cSerie" ),         cSerieDefault  ) )
         end

      end

      ( tmpDlgCon )->cPltDfl                                      := cPlantillaDefecto

      ( tmpDlgCon )->( dbUnLock() )

   end





   if dbSeekInOrd( cItemText, "Des", tmpDlgCon )

      cOldSerie         := nil

      if ( tmpDlgCon )->lSerie
         oCmbSerie:Show()
         oCmbSerie:Select( 1 )
         oGetSerie:Show()
      else
         oCmbSerie:Hide()
         oGetSerie:Hide()
      end

      if ( tmpDlgCon )->lDoc
         oGetFormato:Show()
         oGetCopias:Show()
      else
         oGetFormato:Hide()
         oGetCopias:Hide()
      end

      if ( tmpDlgCon )->lCon
         oGetContador:Show()
      else
         oGetContador:Hide()
      end

      oGetSerie:cText( ( tmpDlgCon )->cSerie )

      oGetPlantillaDefecto:cText( ( tmpDlgCon )->cPltDfl )

      if ( tmpDlgCon )->lNFC
         oGetNFCPrefijo:Show()
         oGetNFCContador:Show()
         oGroupNFC:Show()
      else
         oGetNFCPrefijo:Hide()
         oGetNFCContador:Hide()
         oGroupNFC:Hide()
      end

      if !Empty( oCmbSerie:bChange )
         Eval( oCmbSerie:bChange )
      end

   end

Return ( nil )



Static Function CmbSerieSave( cSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador )

   local nContador
   local cFormato
   local nCopias
   local cNFCPrefijo
   local cNFCContador

   if Empty( cSerie )
      Return ( .T. )
   end

   nContador            := oGetContador:VarGet()
   cFormato             := oGetFormato:VarGet()
   nCopias              := oGetCopias:VarGet()

   cNFCPrefijo          := oGetNFCPrefijo:VarGet()
   cNFCContador         := oGetNFCContador:VarGet()

   if !Empty( cSerie ) .AND. dbDialogLock( tmpDlgCon )
      ( tmpDlgCon )->( FieldPut( FieldPos( cSerie ), nContador                 ) )
      ( tmpDlgCon )->( FieldPut( FieldPos( "Doc"    + cSerie ), cFormato       ) )
      ( tmpDlgCon )->( FieldPut( FieldPos( "Copias" + cSerie ), nCopias        ) )
      ( tmpDlgCon )->( FieldPut( FieldPos( "cNCF"   + cSerie ), cNFCPrefijo    ) )
      ( tmpDlgCon )->( FieldPut( FieldPos( "nCNF"   + cSerie ), cNFCContador   ) )
      ( tmpDlgCon )->( dbUnLock() )
   end

Return ( .T. )



Static Function CmbSerieChanged( oCmbSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador )

   local cSerie         := oCmbSerie:VarGet()[ 26 ]

   if !Empty( cOldSerie ) .AND. ( cOldSerie <> cSerie )
      CmbSerieSave( cOldSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador )
   end

   oGetContador:cText(     ( tmpDlgCon )->( FieldGet( FieldPos( cSerie ) ) ) )
   oGetCopias:cText(       Max( ( tmpDlgCon )->( FieldGet( FieldPos( "Copias" + cSerie ) ) ), 0 ) )
   oGetFormato:cText(      ( tmpDlgCon )->( FieldGet( FieldPos( "Doc" + cSerie ) ) ) )

   oGetNFCPrefijo:cText(  ( tmpDlgCon )->( FieldGet( FieldPos( "cNFC" + cSerie ) ) ) )
   oGetNFCContador:cText( ( tmpDlgCon )->( FieldGet( FieldPos( "nNFC" + cSerie ) ) ) )

   oGetFormato:lValid()

   cOldSerie            := cSerie

Return ( nil )



Static Function EdtDet( aTmp, aGet, tmpDlg, oBrw, bVal, bWhe, nMode, cCod )

   local oDlg

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "delegaciones", "Delega",, .F.,,,,,, .F.,,,,,, .F., )






      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ], aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lValidDelega( cCod, aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )



      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( tmpDlg )->( FieldPos( "cNomDlg" ) ) ], aTmp[ ( tmpDlg )->( FieldPos( "cNomDlg" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EndDelega( aTmp, aGet, tmpDlg, oBrw, nMode, oDlg, cCod )

   if nMode == 1
      if Empty( aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) .OR. ( tmpDlg )->( dbSeek( cCod + aTmp[ ( tmpDlg )->( FieldPos( "cCodDlg" ) ) ] ) )
         MsgStop( "Código no valido" )
         return nil
      end
   end

   WinGather( aTmp, aGet, tmpDlg, oBrw, nMode )

Return ( oDlg:end( 1 ) )



Static Function lValidDelega( cCodEmpresa, cCodDelega )

   if Empty( cCodDelega )
      MsgStop( "Código de delgación no puede estar vacio" )
      return .F.
   end

   if ( tmpDlg )->( dbSeek( cCodEmpresa + cCodDelega ) )
      MsgStop( "Delegación existente" )
      return .F.
   end

Return .T.



STATIC FUNCTION EdtCon( oBrwCon )

   local cPic
   local nCol     := oBrwCon:nColAct
   local uVar     := ( tmpDlgCon )->( fieldGet( nCol + 1 ) )
   local bValid

   if nCol <= 1
      return .F.
   end

   if nCol == 2
      cPic        := "@!"
      bValid      := { |oGet| Empty( oGet:VarGet() ) .OR. ( oGet:VarGet() >= "A" .AND. oGet:VarGet() <= "Z" ) }
   else
      cPic        := "999999999"
      bValid      := { |oGet| oGet:VarGet() > 0 }
   end

   if oBrwCon:lEditCol( nCol, @uVar, cPic, bValid )

      if dbDialogLock( tmpDlgCon )
         ( tmpDlgCon )->( fieldPut( nCol + 1, uVar ) )
         ( tmpDlgCon )->( dbUnlock() )
      end

      oBrwCon:DrawSelect()

   end

RETURN .T.



FUNCTION cEmpresa( oGet, dbfEmp, oGet2, aGet, aTmp, tmpDlg, dbfDlg )

   local nRec
   local lValid   := .F.
   local cCodEmp  := oGet:VarGet()

   if Empty( cCodEmp )

      if !Empty( oGet2 )
            oGet2:cText( "" )
      end

      return .T.

   end

   nRec           := ( dbfEmp )->( Recno() )

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )

      oGet:cText( ( dbfEmp )->CodEmp )

      if !Empty( oGet2 )
         oGet2:cText( ( dbfEmp )->cNombre )
      end

      lValid      := .T.

   else

        msgStop( "Empresa no encontrada", "Cadena buscada : " + cCodEmp )

   end

   ( dbfEmp )->( dbGoTo( nRec ) )

RETURN lValid



FUNCTION lEmpresa( cCodEmp, dbfEmp )

   local lClose   := .F.
   local lValid   := .F.

   if Empty( cCodEmp )
      return .F.
   end

   if Empty( dbfEmp )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ( dbfEmp )->( dbSeek( cCodEmp ) )
      lValid      := .T.
   end

   if lClose
      ( dbfEmp )->( dbCloseArea() )
   end

RETURN lValid



Static Function lGrupo( cCodEmp, dbfEmp )

   local lGrupo   := .F.

   if Empty( cCodEmp )
      return .F.
   end

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )
      lGrupo      := ( dbfEmp )->lGrupo
   end

RETURN lGrupo



FUNCTION BrwEmpresa( oGet, dbfEmp, oGet2, lGrupo )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
   local aSta
   local nRec
   local nOrd     := GetBrwOpt( "BrwEmpresa" )
    local oCbxOrd
   local aCbxOrd  := { "Código", "Nombre" }
   local cCbxOrd

   IIF( lGrupo == nil, lGrupo := .F., ) ;

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   nRec           := ( dbfEmp )->( Recno() )
   nOrd           := ( dbfEmp )->( OrdSetFocus( nOrd ) )

   if lGrupo
      ( dbfEmp )->( dbSetFilter( {|| Field->lGrupo }, "lGrupo" ) )
   else
      ( dbfEmp )->( dbSetFilter( {|| !Field->lGrupo }, "!lGrupo" ) )
   end

   aSta           := aGetStatus( dbfEmp )

   ( dbfEmp )->( dbGoTop() )

   oDlg = TDialog():New(,,,, if( lGrupo, "Grupo", "Empresa" ), "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfEmp ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfEmp ) ) }, .F., .F.,,,,,, nil, "Find",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfEmp )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfEmp
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Empresa"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodEmp"
         :bEditValue       := {|| ( dbfEmp )->CodEmp }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNombre"
         :bEditValue       := {|| ( dbfEmp )->cNombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end(1) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )

      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   IF oDlg:nResult == 1

      oGet:cText( ( dbfEmp )->CodEmp )

        IF ValType( oGet2 ) == "O"
         oGet2:cText( (dbfEmp)->cNombre )
        end

    end

   DestroyFastFilter( dbfEmp )

   SetStatus( dbfEmp, aSta )

   ( dbfEmp )->( dbClearFilter() )
   ( dbfEmp )->( OrdSetFocus( nOrd ) )
   ( dbfEmp )->( dbGoTo( nRec ) )

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



Function SetEmpresa( cCodEmp, dbfEmp, dbfDlg, dbfUsr, oBrw, oWnd, lSoft )

   local nOrd
   local oBlock
   local oError
   local lError      := .F.
   local lCloDlg     := .F.
   local lCloEmp     := .F.
   local lCloUsr     := .F.

   IIF( lSoft == nil, lSoft := .F., ) ;

   if !Empty( oWnd )
      oWnd:Disable()
   end

   CursorWait()




   if Empty( dbfEmp )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lCloEmp        := .T.
   end

   if Empty( dbfUsr )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "USERS.DBF" ), ( cCheckArea( "USERS", @dbfUsr ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "USERS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lCloUsr        := .T.
   end

   if Empty( dbfDlg )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDlg ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lCloDlg        := .T.
   end

   if Empty( cCodEmp )

      if ( dbfEmp )->( LastRec() ) == 0
         AppEmpresa()
      end

      if !Empty( cEmpUsr() )
         cCodEmp     := cEmpUsr()
      else
         cCodEmp     := GetCodEmp( dbfEmp )
      end

   end





   if Empty( cCodEmp )
      ( dbfEmp )->( dbGoTop() )
      cCodEmp        := ( dbfEmp )->CodEmp
   end

   nOrd              := ( dbfEmp )->( OrdSetFocus( "CodEmp" ) )
   if !( dbfEmp )->( dbSeek( cCodEmp ) )
      lError         := .T.
      msgStop( "La empresa " + cCodEmp + " no existe." )
   else
      if ( dbfEmp )->lGrupo
         lError      := .T.
         msgStop( "La empresa que desea seleccionar es un grupo de empresas no existe." )
      end
   end
  ( dbfEmp )->( OrdSetFocus( nOrd ) )

   if !lAdsRdd()
      if !lIsDir( FullCurDir() + "Emp" + cCodEmp )
         lError      := .T.
         msgStop( "El directorio de la empresa " + cCodEmp + " no existe." )
      end
   end





   if lError

      ( dbfEmp )->( dbGoTop() )
      while !( dbfEmp )->( eof() )

         if ( dbfEmp )->lGrupo

            ( dbfEmp )->( dbSkip() )

         else

            if dbLock( dbfEmp )
               ( dbfEmp )->lActiva    := .T.
               ( dbfEmp )->( dbUnLock() )
            end

            MsgAlert( "La nueva empresa activa es " + ( dbfEmp )->CodEmp + " - " + Rtrim( ( dbfEmp )->cNombre ) )

            cCodEmp  := ( dbfEmp )->CodEmp

            exit

         end

      end

   end





   cPatEmp( cCodEmp )





   if Empty( ( dbfEmp )->cCodGrp )

      cPatGrp( cCodEmp, nil, .T. )

      cPatCli( cCodEmp, nil, .T. )

      cPatArt( cCodEmp, nil, .T. )

      cPatPrv( cCodEmp, nil, .T. )

      cPatAlm( cCodEmp, nil, .T. )

      aEmpGrp( cCodEmp, dbfEmp, .T. )

   else





      cPatGrp( ( dbfEmp )->cCodGrp, nil, .F. )

      if RetFld( cCodEmp, dbfEmp, "lGrpCli", "CodEmp" )
         cPatCli( ( dbfEmp )->cCodGrp, nil, .F. )
      else
         cPatCli( cCodEmp, nil, .T. )
      end

      if RetFld( cCodEmp, dbfEmp, "lGrpArt", "CodEmp" )
         cPatArt( ( dbfEmp )->cCodGrp, nil, .F. )
      else
         cPatArt( cCodEmp, nil, .T. )
      end

      if RetFld( cCodEmp, dbfEmp, "lGrpPrv", "CodEmp" )
         cPatPrv( ( dbfEmp )->cCodGrp, nil, .F. )
      else
         cPatPrv( cCodEmp, nil, .T. )
      end

      if RetFld( cCodEmp, dbfEmp, "lGrpAlm", "CodEmp" )
         cPatAlm( ( dbfEmp )->cCodGrp, nil, .F. )
      else
         cPatAlm( cCodEmp, nil, .T. )
      end

      aEmpGrp( ( dbfEmp )->cCodGrp, dbfEmp, .F. )

   end





   cCodigoEmpresaEnUso( cCodEmp )

   if !aEmpresa( cCodEmp, dbfEmp, dbfDlg, dbfUsr )
      Empresa()
   end





   SetTituloEmpresa()





   WritePProString( "main", "Ultima Empresa", cCodEmp, FullCurDir() + "GstApolo.Ini" )





   if !Empty( dbfUsr ) .AND. ( dbfUsr )->( dbSeek( cCurUsr() ) )
      if ( dbfUsr )->( dbRLock() )
         ( dbfUsr )->cEmpUse  := cCodEmp
         ( dbfUsr )->( dbRUnLock() )
      end
   end





   if !lSoft .AND. !lAis()

      oMsgText( "Comprobando existencia de tablas" )
      IsEntSal()

      oMsgText( "Comprobando almacenes" )
      IsAlmacen()

      oMsgText( "Comprobando formas de pago" )
      IsFPago()

      oMsgText( "Comprobando familias" )
      IsFamilia()

      oMsgText( "Comprobando articulos" )
      IsArticulo()

      oMsgText( "Comprobando clientes" )
      IsClient()

      oMsgText( "Comprobando pedidos a proveedor" )
      IsPedPrv()

      oMsgText( "Comprobando albaran a proveedor" )
      IsAlbPrv()

      oMsgText( "Comprobando facturas a proveedor" )
      IsFacPrv()

      oMsgText( "Comprobando presupuestos a clientes" )
      IsPreCli()

      oMsgText( "Comprobando pedidos a clientes" )
      IsPedCli()

      oMsgText( "Comprobando albaranes a clientes" )
      IsAlbCli()

      oMsgText( "Comprobando facturas a clientes" )
      IsFacCli()

      oMsgText( "Comprobando facturas rectificativas a clientes" )
      IsFacRec()

      oMsgText( "Comprobando anticipos a clientes" )
      IsAntCli()

      oMsgText( "Comprobando tickets" )
      IsTpv()

      oMsgText( "Comprobando bancos" )
      IsBancos()





      oMsgText( "Seleccionado sesión actual" )

      ChkTurno( , oWnd )

   end





   if !Empty( dbfDlg ) .AND. lCloDlg
      ( dbfDlg )->( dbCloseArea() )
   end

   if !Empty( dbfUsr ) .AND. lCloUsr
      ( dbfUsr )->( dbCloseArea() )
   end

   if !Empty( dbfEmp )
      if lCloEmp
         ( dbfEmp )->( dbCloseArea() )
      end
   end

   if !Empty( oBrw )
      oBrw:Refresh()
      oBrw:SetFocus()
   end









   CursorWE()

   if !Empty( oWnd )
      oWnd:Enable()
   end

Return nil







STATIC FUNCTION WinDelEmp( oBrw, dbfEmp )

   local lRet     := .F.
   local cPath    := FullCurDir() + "Emp" + ( dbfEmp )->CodEmp + "\"

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return ( lRet )
   end

   if ( dbfEmp )->CodEmp == cCodigoEmpresaEnUso()

      msgStop( "Imposible borrar empresa activa" )

   else

      if ApoloMsgNoYes( "Conforme eliminación de empresa", "Supresión de empresa" )

         if ApoloMsgNoYes( "Eliminara DEFINITIVAMENTE los datos de la empresa : " + Rtrim( ( dbfEmp )->cNombre ), "Confirme supresión de empresa" )







            CursorWait()

            if IsDirectory( cPath )

               lRdDir( cPath )







            end

            while ( dbfDlg )->( dbSeek( ( dbfEmp )->CodEmp ) )
               if dbLock( dbfDlg )
                  ( dbfDlg )->( dbDelete() )
                  ( dbfDlg )->( dbUnLock() )
               end
            end

            DelRecno( dbfEmp, oBrw )

            lRet  := .T.

            CursorWE()


         end

      end

   end

RETURN lRet





STATIC FUNCTION WinDelGrp( oBrw, dbfEmp )

   local lRet     := .F.
   local cPath    := FullCurDir() + "GRP" + ( dbfEmp )->CodEmp + "\"
   local cCodEmp  := ( dbfEmp )->CodEmp
   local nRec     := ( dbfEmp )->( Recno() )

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return ( lRet )
   end

   if dbSeekInOrd( cCodEmp, "CCODGRP", dbfEmp )
      msgStop( "No se puede eliminar un grupo asignado a empresas" )
      ( dbfEmp )->( dbGoto( nRec ) )
      return ( lRet )
   end

   ( dbfEmp )->( dbGoto( nRec ) )

   if ApoloMsgNoYes( "Confirme eliminación de grupo", "Supresión de grupo" )


      if ApoloMsgNoYes(   "Eliminara DEFINITIVAMENTE los datos del grupo: " + Rtrim( ( dbfEmp )->cNombre ), "Confirme supresión de grupo" )







         CursorWait()

         if IsDirectory( cPath )
            lRdDir( cPath )
            if DirRemove( cPath ) <> 0
               msgStop( "Error al borrar el directorio " + Str( fError() ), cPath )
            end
         end

         DelRecno( dbfEmp, oBrw )

         lRet  := .T.

         CursorWE()


      end

   end

RETURN lRet



FUNCTION mkPathEmp( cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   local oDlgWat
   local oBmp
   local lEnd           := .F.
   local acImages       := { "BAR_01" }
   local cMsg           := "Creando nueva empresa"





   local cPath          := cPatEmpOld( cCodEmpNew )
   local cPathOld       := if( !Empty( cCodEmpOld ), cPatEmpOld( cCodEmpOld ), nil )


   IIF( lDialog == nil, lDialog := .F., ) ;
   IIF( lNewEmp == nil, lNewEmp := .F., ) ;
   IIF( cNomEmpNew == nil, cNomEmpNew := "", ) ;
   IIF( aImportacion == nil, aImportacion := aImportacion():False(), ) ;



   if IsDirectory( cPath )
      lRdDir( cPath )
      if DirRemove( cPath ) <> 0
         msgStop( "Error al borrar el directorio " + Str( fError() ), cNamePath( cPath ) )
      end
   end







   if lDialog

      oDlgWat = TDialog():New(,,,, "Creando empresa : " + cCodEmpNew + " - " + Rtrim( cNomEmpNew ), "CreaEmp",, .F.,,,,,, .F.,,,,,, .F., )




         oBmp := TBitmap():ReDefine( 500, "CrearEmpresa",, oDlgWat,,, .F., .F.,,, .F.,,, .F. )

         TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



         oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F. )

         oDlgWat:bStart := {|| StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg ), lEnd := .T., oDlgWat:End() }

      oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T., {|Self|( lEnd )},,, oDlgWat:bRClicked,,, )

      oBmp:End()

   else

      StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   end

   SysRefresh()

Return ( .T. )



Static Function StartPathEmp( cPath, cPathOld, cCodEmpNew, cNomEmpNew, cCodEmpOld, aImportacion, lDialog, lNewEmp, nGetSemilla, oMsg )

   local oError
   local oBlock
   local cCodGrp        := Space( 2 )
   local cPathGrp       := ""

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   SysRefresh()

   if lChDir( cNamePath( cPath ) ) .OR. MakeDir( cNamePath( cPath ) ) <> -1

      if cCodEmpOld <> nil
         cCodGrp        := cCodigoGrupo( cCodEmpOld )
      end

      if !Empty( cCodGrp )
         cPathGrp       := cPatStk( cCodGrp, , , .T. )
      else
         cPathGrp       := cPathOld
      end





      if oMsg <> nil
         oMsg:SetText( "Creando familias" )
      end

      mkFamilia( cPath, aImportacion:lArticulos, cPathGrp ); rxFamilia( cPath )       ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando categorias" )
      end

      mkCategoria( cPath, aImportacion:lArticulos, cPathGrp ); rxCategoria( cPath )   ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando temporadas" )
      end

      mkTemporada( cPath, aImportacion:lArticulos, cPathGrp ); rxTemporada( cPath )   ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de familias" )
      end

      if cPathOld <> nil
         TGrpFam():Create( cPath ):CheckFiles( cPathGrp + "GrpFam.Dbf" )   ; SysRefresh()
      else
         TGrpFam():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando fabricantes" )
      end

      if cPathOld <> nil
         TFabricantes():Create( cPath ):CheckFiles( cPathGrp + "Fabricantes.Dbf" )     ; SysRefresh()
      else
         TFabricantes():Create( cPath ):CheckFiles()                                   ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de familias" )
      end

      if cPathOld <> nil
         TComandas():Create( cPath ):CheckFiles( cPathGrp + "TComandas.Dbf" ); SysRefresh()
      else
         TComandas():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando fabricantes" )
      end

      if cPathOld <> nil
         TFabricantes():Create( cPath ):CheckFiles( cPathGrp + "Fabricantes.Dbf" )  ; SysRefresh()
      else
         TFabricantes():Create( cPath ):CheckFiles()                                ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando movimientos de almacén" )
      end
      TRemMovAlm():Create( cPath ):CheckFiles()                         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando catálogos" )
      end
      if cPathOld <> nil
         TCatalogo():Create( cPath ):CheckFiles( cPathGrp + "Catalogo.Dbf" )   ; SysRefresh()
      else
         TCatalogo():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando unidades de medición" )
      end
      if cPathOld <> nil
         UniMedicion():Create( cPath ):CheckFiles( cPathGrp + "UndMed.Dbf" )   ; SysRefresh()
      else
         UniMedicion():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando propiedades" )
      end
      mkPro(      cPath, aImportacion:lArticulos, cPathGrp ); rxPro( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando contadores" )
      end
      mkNewCount( cPath, nil, nGetSemilla )                             ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tarifas" )
      end
      mkTarifa(   cPath, nil, aImportacion:lArticulos, cPathOld )       ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando promociones" )
      end
      mkPromo(    cPath, aImportacion:lPromocion, cPathOld )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando articulos" )
      end
      mkArticulo( cPath, aImportacion:lArticulos, cPathGrp, nil, .F. )  ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de venta" )
      end
      mkGrpVenta( cPath, aImportacion:lArticulos, cPathOld )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando clientes" )
      end
      mkClient(   cPath, aImportacion:lClientes, cPathGrp )             ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando proveedores" )
      end
      mkProvee(   cPath, aImportacion:lProveedor, cPathGrp )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando agentes" )
      end
      mkAgentes(  cPath, aImportacion:lAgente, cPathGrp, nil )          ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando rutas" )
      end
      mkRuta(     cPath, aImportacion:lRuta, cPathGrp, nil )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando almacén" )
      end

      mkAlmacen(  cPath, aImportacion:lAlmacen, cPathGrp, nil )         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ubicaciones" )
      end
      mkUbi(  cPath, aImportacion:lAlmacen, cPathGrp, nil )         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ofertas" )
      end
      mkOferta(   cPath, aImportacion:lOferta, cPathGrp )               ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tpv" )
      end

      mkTpv(      cPath, aImportacion:lVale, cPathOld )                 ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando forma de pago" )
      end
      mkFPago(    cPath, aImportacion:lFPago, cPathGrp )                ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando incidencias" )
      end

      mkInci(     cPath, .T., cPathOld )                                ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando entrada y salidas" )
      end

      mkEntSal(   cPath )                                               ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando bancos" )
      end

      if cPathOld <> nil .AND. aImportacion:lBancos
         TBancos():Create( cPath ):CheckFiles( cPathOld + "Bancos.Dbf" )
      else
         TBancos():Create( cPath ):CheckFiles()
      end

      if cPathOld <> nil .AND. aImportacion:lBancos
         TCuentasBancarias():Create( cPath ):CheckFiles( cPathOld + "EmpBnc.Dbf" )
      else
         TCuentasBancarias():Create( cPath ):CheckFiles()
      end

      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando impuesto de hidrocarburos" )
      end

      TNewImp():Create( cPath ):CheckFiles()                            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando sesiones" )
      end

      TTurno():Create( cPath ):CheckFiles()                             ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de articulos" )
      end

      if cPathOld <> nil .AND. aImportacion:lArticulos
         TTipArt():Create( cPath ):CheckFiles( cPathGrp + "TipArt.Dbf" )   ; SysRefresh()
      else
         TTipArt():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de clientes" )
      end

      if cPathOld <> nil .AND. aImportacion:lClientes
         TGrpCli():Create( cPath ):CheckFiles( cPathGrp + "GrpCli.Dbf" )   ; SysRefresh()
      else
         TGrpCli():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando transportistas" )
      end

      if cPathOld <> nil .AND. aImportacion:lClientes
         TTrans():Create( cPath ):CheckFiles( cPathGrp + "Transpor.Dbf" )  ; SysRefresh()
      else
         TTrans():Create( cPath ):CheckFiles()                             ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de proveedores" )
      end

      if cPathOld <> nil .AND. aImportacion:lProveedor
         TGrpPrv():Create( cPath ):CheckFiles( cPathGrp + "GrpPrv.Dbf" )   ; SysRefresh()
      else
         TGrpPrv():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando cuentas de remesas" )
      end

      if cPathOld <> nil
         TCtaRem():Create( cPath ):CheckFiles( cPathOld + "CtaRem.Dbf" )   ; SysRefresh()
      else
         TCtaRem():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando salas y puntos de ventas" )
      end

      if cPathOld <> nil
         TSalaVenta():Create( cPath ):CheckFiles( cPathOld + "SalaVta.Dbf" )     ; SysRefresh()
         TDetSalaVta():Create( cPath ):CheckFiles( cPathOld + "SlaPnt.Dbf" )     ; SysRefresh()
      else
         TSalaVenta():Create( cPath ):CheckFiles()                               ; SysRefresh()
         TDetSalaVta():Create( cPath ):CheckFiles()                              ; SysRefresh()
      end





      if oMsg <> nil
         oMsg:SetText( "Creando historico de movimientos" )
      end
      mkHisMov( cPath, .F., cPathOld ) ; SysRefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando pedido a proveedores" )
      end
      mkPedPrv( cPath, aImportacion:lAlbPrv, cPathOld, nil, {| dbf | ( dbf )->nEstado <> 3 } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando albaran a proveedores" )
      end
      mkAlbPrv( cPath, aImportacion:lAlbPrv, cPathOld, nil, {| dbf | !( dbf )->lFacturado } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando factura a proveedores" )
      end
      mkFacPrv( cPath, nil ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas rectificativas a proveedores" )
      end
      mkRctPrv( cPath, nil ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando recibos a proveedores" )
      end
      mkRecPrv( cPath, nil ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando deposito a agentes" )
      end
      mkDepAge( cPath, .F., cPathOld  )                                 ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando deposito a agentes" )
      end
      mkExtAge( cPath, .F., cPathOld  )                                 ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando presupuesto a clientes" )
      end
      mkPreCli( cPath, aImportacion:lPreCli, cPathOld, nil, {| dbf | !( dbf )->lEstado } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando pedidos a clientes" )
      end
      mkPedCli( cPath, aImportacion:lPedCli, cPathOld, nil, {| dbf | ( dbf )->nEstado <> 3 } ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando albaranes a clientes" )
      end
      mkAlbCli( cPath, aImportacion:lAlbCli, cPathOld, nil, {| dbf | !( dbf )->lFacturado } ) ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas a clientes" )
      end
      mkFacCli( cPath ) ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas rectificativas a clientes" )
      end
      mkFacRec( cPath ) ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando recibos a clientes" )
      end
      mkRecCli( cPath ) ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando facturas de anticipos a clientes" )
      end
      mkAntCli( cPath, aImportacion:lAnticipo, cPathOld )
      SysRefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando secciones de producción" )
      end

      if cPathOld <> nil
         TSeccion():Create( cPath ):CheckFiles( cPathOld + "Seccion.Dbf" )
      else
         TSeccion():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando horas de producción" )
      end

      if cPathOld <> nil
         THoras():Create( cPath ):CheckFiles( cPathOld + "Horas.Dbf" )
      else
         THoras():Create( cPath ):CheckFiles()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando detalle de horas de producción" )
      end

      if cPathOld <> nil
         TDetHoras():Create( cPath ):CheckFiles( cPathOld + "OpeL.Dbf" )
      else
         TDetHoras():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando operarios de producción" )
      end

      if cPathOld <> nil
         TOperarios():Create( cPath ):CheckFiles( cPathOld + "OpeT.Dbf" )
      else
         TOperarios():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando operaciones de producción" )
      end

      if cPathOld <> nil
         TOperacion():Create( cPath ):CheckFiles( cPathOld + "Operacio.Dbf" )
      else
         TOperacion():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de operaciones de producción" )
      end

      if cPathOld <> nil
         TTipOpera():Create( cPath ):CheckFiles( cPathOld + "TipOpera.Dbf" )
      else
         TTipOpera():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando maquinarias de producción" )
      end

      if cPathOld <> nil
         TMaquina():Create( cPath ):CheckFiles( cPathOld + "MaqCosT.Dbf" )
      else
         TMaquina():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando costos de maquinarias de producción" )
      end

      if cPathOld <> nil
         TCosMaq():Create( cPath ):CheckFiles( cPathOld + "Costes.Dbf" )
      else
         TCosMaq():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if cPathOld <> nil
         TFideliza():Create( cPath ):CheckFiles( cPathOld + "Fideliza.Dbf" )
      else
         TFideliza():Create( cPath ):CheckFiles()
      end
      SysRefresh()

      if cPathOld <> nil
         TDetFideliza():Create( cPath ):CheckFiles( cPathOld + "DetFideliza.Dbf" )
      else
         TDetFideliza():Create( cPath ):CheckFiles()
      end
      SysRefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando columnas de usuarios" )
      end

      if cPathOld <> nil
         TShell():AppendData( cPath, cPathOld )
      else
         TShell():ReindexData( cPath )
      end





      if oMsg <> nil
         oMsg:SetText( "Creando favoritos de informes" )
      end

      if cPathOld <> nil
         mkReport( cPath, .T., cPathOld )
      else
         mkReport( cPath )
      end





      if oMsg <> nil
         oMsg:SetText( "Creando documentos" )
      end

      mkDocs( cPath, aImportacion:lDocument, cPathOld ) ; sysrefresh()





      if oMsg <> nil
         oMsg:SetText( "Creando stocks" )
      end

      if aImportacion:lStockIni .AND. cPathOld <> nil
         TStock():StockInit( cPath, cPathOld, oMsg, !aImportacion:lAlbPrv, !aImportacion:lAlbCli, aImportacion:nCosto )
      end





      SysRefresh()





      if lNewEmp

         with object ( TReindex():New( nil, nil, cPath ) )
            :lEmpresa      := .F.
            :lMessageEnd   := .F.
            :cCodEmp       := cCodEmpNew
            :cPatCli       := cPatCli( cCodEmpNew, .F., .T. )
            :cPatArt       := cPatArt( cCodEmpNew, .F., .T. )
            :cPatPrv       := cPatPrv( cCodEmpNew, .F., .T. )
            :cPatAlm       := cPatAlm( cCodEmpNew, .F., .T. )
            :cPatGrp       := cPatGrp( cCodEmpNew, .F., .T. )
            :GenIndices( oMsg )
         end

      end

   else

      MsgStop( "Imposible crear el directorio " + cPath )

   end

   RECOVER USING oError

      msgStop( "Error creando estructura de directorios" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

RETURN .T.



FUNCTION mkPathGrp( cCodGrpNew, cNomGrpNew, cCodGrpOld, aImportacion, lDialog, lNewGrp, lGrpOld, oMsg )

   local oDlgWat
   local oBmp
   local lEnd           := .F.
   local acImages       := { "BAR_01" }
   local cMsg           := "Creando nueva empresa"
   local cPath          := cPatGrpOld( cCodGrpNew )
   local cPathOld       := if( !Empty( cCodGrpOld ), if( lGrpOld, cPatGrpOld( cCodGrpOld ), cPatEmpOld( cCodGrpOld ) ), nil )
   local cCodGrp        := Space( 2 )

   IIF( lDialog == nil, lDialog := .F., ) ;
   IIF( lNewGrp == nil, lNewGrp := .F., ) ;
   IIF( cNomGrpNew == nil, cNomGrpNew := "", ) ;
   IIF( aImportacion == nil, aImportacion := aImportacion():False(), ) ;



   StopServices()



   if IsDirectory( cPath )
      lRdDir( cPath )
      if DirRemove( cPath ) <> 0
         msgStop( "Error al borrar el directorio " + Str( fError() ), cNamePath( cPath ) )
      end
   end







   if lDialog

   oDlgWat = TDialog():New(,,,, "Creando grupo : " + cCodGrpNew + " - " + cNomGrpNew, "CREAEMP",, .F.,,,,,, .F.,,,,,, .F., )




      oBmp := TBitmap():ReDefine( 500, "CrearEmpresa",, oDlgWat,,, .F., .F.,,, .F.,,, .F. )

      TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



      oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F. )

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T., {|Self|( lEnd )}, ! .T.,, oDlgWat:bRClicked,,, )

   end

   SysRefresh()

   if lChDir( cNamePath( cPath ) ) .OR. MakeDir( cNamePath( cPath ) ) <> -1

      if cCodGrpOld <> nil

         cCodGrp        := cCodigoGrupo( cCodGrpOld )

         if !lGrpOld .AND. !Empty( cCodGrp )
            cPathOld    := cPatStk( cCodGrp, , , .T. )
         end

      end

      if oMsg <> nil
         oMsg:SetText( "Creando familias" )
      end
      mkFamilia( cPath, aImportacion:lArticulos, cPathOld ); rxFamilia( cPath )       ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando categorias" )
      end
      mkCategoria( cPath, aImportacion:lArticulos, cPathOld ); rxCategoria( cPath )   ; SysRefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de familias" )
      end
      if cPathOld <> nil
         TGrpFam():Create( cPath ):CheckFiles( cPathOld + "GrpFam.Dbf" )   ; SysRefresh()
      else
         TGrpFam():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando fabricantes" )
      end

      if cPathOld <> nil
         TFabricantes():Create( cPath ):CheckFiles( cPathOld + "Fabricantes.Dbf" )     ; SysRefresh()
      else
         TFabricantes():Create( cPath ):CheckFiles()                                   ; SysRefresh()
      end


      if oMsg <> nil
         oMsg:SetText( "Creando tipos de familias" )
      end
      if cPathOld <> nil
         TComandas():Create( cPath ):CheckFiles( cPathOld + "TComandas.Dbf" )   ; SysRefresh()
      else
         TComandas():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando movimientos de almacén" )
      end
      TRemMovAlm():Create( cPath ):CheckFiles()                         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando catálogos" )
      end
      if cPathOld <> nil
         TCatalogo():Create( cPath ):CheckFiles( cPathOld + "Catalogo.Dbf" )   ; SysRefresh()
      else
         TCatalogo():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando unidades de medición" )
      end
      if cPathOld <> nil
         UniMedicion():Create( cPath ):CheckFiles( cPathOld + "UndMed.Dbf" )   ; SysRefresh()
      else
         UniMedicion():Create( cPath ):CheckFiles()                            ; sysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando propiedades" )
      end
      mkPro(      cPath, aImportacion:lArticulos, cPathOld ); rxPro( cPath ) ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando artículos" )
      end
      mkArticulo( cPath, aImportacion:lArticulos, cPathOld, nil, .F. )  ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando clientes" )
      end
      mkClient(   cPath, aImportacion:lClientes, cPathOld )             ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando proveedores" )
      end
      mkProvee(   cPath, aImportacion:lProveedor, cPathOld )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando agentes" )
      end
      mkAgentes(  cPath, aImportacion:lClientes, cPathOld, nil )          ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando rutas" )
      end
      mkRuta(     cPath, aImportacion:lClientes, cPathOld, nil )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando almacén" )
      end

      mkAlmacen(  cPath, aImportacion:lAlmacen, cPathOld, nil )         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ubicaciones" )
      end

      mkUbi(  cPath, aImportacion:lAlmacen, cPathOld, nil )         ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando ofertas" )
      end
      mkOferta(   cPath, aImportacion:lArticulos, cPathOld )               ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando promociones" )
      end
      mkPromo(    cPath, aImportacion:lArticulos, cPathOld )            ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando forma de pago" )
      end
      mkFPago(    cPath, aImportacion:lFPago, cPathOld )                ; sysrefresh()

      if oMsg <> nil
         oMsg:SetText( "Creando bancos" )
      end
      if cPathOld <> nil .AND. aImportacion:lFPago
         TBancos():Create( cPath ):CheckFiles( cPathOld + "Bancos.Dbf" )   ; SysRefresh()
      else
         TBancos():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando cuentas bancarias" )
      end
      if cPathOld <> nil .AND. aImportacion:lFPago
         TCuentasBancarias():Create( cPath ):CheckFiles( cPathOld + "EmpBnc.Dbf" ) ; SysRefresh()
      else
         TCuentasBancarias():Create( cPath ):CheckFiles()                  ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando tipos de articulos" )
      end
      if cPathOld <> nil .AND. aImportacion:lArticulos
         TTipArt():Create( cPath ):CheckFiles( cPathOld + "TipArt.Dbf" )   ; SysRefresh()
      else
         TTipArt():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de clientes" )
      end
      if cPathOld <> nil .AND. aImportacion:lClientes
         TGrpCli():Create( cPath ):CheckFiles( cPathOld + "GrpCli.Dbf" )   ; SysRefresh()
      else
         TGrpCli():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando transportistas" )
      end

      if cPathOld <> nil .AND. aImportacion:lClientes
         TTrans():Create( cPath ):CheckFiles( cPathOld + "Transpor.Dbf" )  ; SysRefresh()
      else
         TTrans():Create( cPath ):CheckFiles()                             ; SysRefresh()
      end

      if oMsg <> nil
         oMsg:SetText( "Creando grupos de proveedores" )
      end
      if cPathOld <> nil .AND. aImportacion:lProveedor
         TGrpPrv():Create( cPath ):CheckFiles( cPathOld + "GrpPrv.Dbf" )   ; SysRefresh()
      else
         TGrpPrv():Create( cPath ):CheckFiles()                            ; SysRefresh()
      end














      SysRefresh()





      if lNewGrp

         with object ( TReindex():New( nil, nil, cPath ) )
            :lEmpresa      := .F.
            :lMessageEnd   := .F.
            :cCodEmp       := cCodGrpNew
            :cPatCli       := cPatCli( cCodGrpNew, .F., .F. )
            :cPatArt       := cPatArt( cCodGrpNew, .F., .F. )
            :cPatPrv       := cPatPrv( cCodGrpNew, .F., .F. )
            :cPatAlm       := cPatAlm( cCodGrpNew, .F., .F. )
            :cPatGrp       := cPatGrp( cCodGrpNew, .F., .F. )
            :cPathEmp      := cPatGrp( cCodGrpNew, .F., .F. )
            :GenIndices( oMsg )
         end

      end

   else

      MsgStop( "Imposible crear el directorio " + cPath )

   end

   if lDialog
      lEnd  := .T.
      oBmp:End()
      oDlgWat:End()
   end



   InitServices()

   SysRefresh()

RETURN .T.








FUNCTION lActualiza( cCodEmp, oWndBrw, lNoWait, cNomEmp, lCompress )

   local oBmp
   local oAni
   local oAct
   local oMsg
   local oDlgWat
   local hBmp        := LoadBitmap( GetResources(), "BSTOP" )
   local cMsg        := ""
   local aMsg        := {}
   local acImages    := { "BAR_01" }
   local oBtnAceptar
   local oBtnCancelar

   IIF( lNoWait == nil, lNoWait := .F., ) ;
   IIF( lCompress == nil, lCompress := .T., ) ;

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return .F.
   end

   if !TReindex():lFreeHandle()

      msgStop( "Existen procesos exclusivos, no se puede acceder a la aplicación" + Chr(13)+Chr(10) +  "en estos momentos, reintentelo pasados unos segundos." )
      return .F.
   end

   if !TReindex():lCreateHandle()
      msgStop( "Esta opción ya ha sido inicada por otro usuario", "Atención" )
      return .F.
   end

   if lNoWait
      lActEmp        := .T.
   end

   if oWndBrw <> nil
      oWndBrw:End( .T. )
   end

   oDlgWat = TDialog():New(,,,, "Actualizando empresa : " + AllTrim( cCodEmp ) + " - " + AllTrim( cNomEmp ), "ACTEMPRESA",, .F.,,,,,, .F.,,,,,, .F., )




      oBmp := TBitmap():ReDefine( 500, "ACTUALIZAREMPRESA",, oDlgWat,,, .F., .F.,,, .F.,,, .F. )

      oAni        := TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



      oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F. )



      oAct := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, lActEmp, lActEmp:= u ) }, oDlgWat,,,,,,, .F.,, .F. )




      oBtnAceptar := TButton():ReDefine( 1, {||( ActualizaEmpresa( cCodEmp, aMsg, oAni, oBtnAceptar, oBtnCancelar, oDlgWat, oMsg, oAct, lActEmp, lCompress ) )}, oDlgWat,,, .F.,,,, .F. )





      oBtnCancelar := TButton():ReDefine( 2, {||( oDlgWat:End() )}, oDlgWat,,, .F.,,,, .F. )
      oDlgWat:AddFastKey( 116, {|| Eval( oBtnAceptar:bAction ) } )

      if lNoWait
         oDlgWat:bStart := oBtnAceptar:bAction
      else
         oDlgWat:bStart := {|| oAni:Hide() }
      end

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T.,,,, oDlgWat:bRClicked,,, )

   TReindex():lCloseHandle()

   oAni:End()
   oBmp:End()

   DeleteObject( hBmp )

RETURN ( oDlgWat:nResult == 1 )



Static Function ActualizaEmpresa( cCodEmp, aMsg, oAni, oBtnAceptar, oBtnCancelar, oDlg, oMsg, oAct, lActEmp, lCompress )

   oDlg:bValid          := {|| .F. }

   oAct:Disable()
   oBtnAceptar:Hide()
   oBtnCancelar:Hide()

   if .F.
      CompressEmpresa( cCodEmp, nil, nil, oBtnAceptar, oAni, oMsg )
   end

   ActDbfEmp( cCodEmp, aMsg, oAni, oDlg, oMsg, nil, lActEmp )

   oDlg:bValid          := {|| .T. }

   oDlg:End( 1 )

Return nil



Static Function ActDbfEmp( cCodEmp, aMsg, oAni, oDlg, oMsg, oMet, lActEmp )

   local oBlock
   local oError
   local cEmpDat  := cPatDat()
   local cEmpTmp  := cPatEmpTmp()
   local cEmpOld  := cPatEmpOld( cCodEmp )

   oAni:Show()

   oMsg:SetText( "Generando nueva estructura" )





   dbCloseAll()

   aEval( Directory( cEmpTmp + "*.*" ), {| aFiles | fErase( cEmpTmp + aFiles[ 1 ] ) } )

   if mkPathEmp( "Tmp", nil, nil, aImportacion():False(), .F., .F., nil, oMsg )





      oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE





         if mkUsuario( cEmpTmp, , .F. )
            ActDbf( cEmpDat, cEmpTmp, "Users", "usuarios", oMet, oMsg, aMsg )
            ActDbf( cEmpDat, cEmpTmp, "Mapas", "mapas", oMet, oMsg, aMsg )
         end

         if mkDiv( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Divisas", "divisas monetarias", oMet, oMsg, aMsg )
         end

         if mkTiva( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Tiva", "tipos de impuestos", oMet, oMsg, aMsg )
         end

         if mkFilter( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "CnfFlt", "filtros", oMet, oMsg, aMsg )
         end

         if mkCajas( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Cajas", "cajas", oMet, oMsg, aMsg )
            ActDbf( cEmpDat, cEmpTmp, "CajasL", "impresoras de comanda", oMet, oMsg, aMsg )
         end

         if mkImpTik( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "ImpTik", "impresora de tikets", oMet, oMsg, aMsg )
         end

         if mkVisor( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Visor", "visor", oMet, oMsg, aMsg )
         end

         if mkCajPorta( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "CajPorta", "cajón portamonedas", oMet, oMsg, aMsg )
         end

         if mkLogPorta( cEmpTmp )
            ActDbf( cEmpOld, cEmpTmp, "LogPorta", "log cajón portamonedas", oMet, oMsg, aMsg )
         end

         if mkSitua( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "Situa", "situaciones", oMet, oMsg, aMsg )
         end

         if mkTImp( cEmpTmp )
            ActDbf( cEmpDat, cEmpTmp, "TipImp", "Tipos de impresoras", oMet, oMsg, aMsg )
         end

         if mkReport( cEmpTmp, .F. )
            ActDbf( cEmpOld, cEmpTmp, "CfgCar", "Añadiendo datos de documentos", oMet, oMsg, aMsg )
         end





         ActDbf( cEmpOld, cEmpTmp, "FPago", "formas de pago", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Familias",  "familias", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FamPrv",    "familias de proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Categorias","categorías", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Pro",       "propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TblPro",    "tabla de propiedades", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "RDocumen",  "documentos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RItems",    "items de documentos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RColum",    "columnas de documentos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RBitmap",   "bitmaps de documentos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RBox",      "cajas de documentos", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ObrasT",    "obras", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "TarPreT",   "tarifas de precios", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TarPreL",   "tarifas de precios", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TarPreS",   "tarifas de precios", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PromoT",    "promociones", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PromoL",    "promociones", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Articulo",  "artículos", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ArtCodebar","códigos de barras", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtDiv",    "precios por ventas propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtKit",    "artículos kits", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtLbl",    "artículos relación de codigos de barras", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtImg",    "artículos relación de imagenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ProvArt",   "artículos por proveedor", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "HisMov",    "historicos de movimientos", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Client",    "clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ClientD",   "documentos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliAtp",    "atipicas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliBnc",    "bancos de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Provee",    "proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ProveeD",   "documentos de proveedor", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PrvBnc",    "bancos de proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Agentes",   "agentes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Ruta",      "rutas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Almacen",   "almacen", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "EntSal",    "entradas y salidas de caja", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "TikeT",     "tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeL",     "líneas de tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeP",     "pagos de tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeC",     "pagos de clientes tickets", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TikeS",     "series de tickets", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Oferta",    "ofertas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PedProvT",  "pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedProvL",  "líneas de pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedPrvI",   "incidencias de pedidos a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedPrvD",   "documentos de pedidos a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AlbProvT",  "albaran de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbProvL",  "líneas de albarán a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvI",   "incidencias de albaranes a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvD",   "documentos de albaranes a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbPrvS",   "números de serie de albaranes a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacPrvT",   "facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvL",   "líneas de facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvP",   "pagos de facturas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvI",   "incidencias de facturas a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvD",   "documentos de facturas a proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacPrvS",   "números de serie de facturas a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "RctPrvT",   "facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvL",   "líneas de facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvI",   "incidencias de facturas rectificativas de proveedores", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "RctPrvS",   "números de serie de facturas rectificativas a proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "DepAgeT",   "depositos a almacenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "DepAgeL",   "líneas de depositos a almacenes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ExtAgeT",   "existencias a almacenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ExtAgeL",   "líneas de existencias a almacenes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PreCliT",   "presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliL",   "líneas de presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliI",   "incidencias de presupuestos a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PreCliD",   "documentos de presupuestos a clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "PedCliT",   "pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliL",   "líneas de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliR",   "reservas de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliI",   "incidencias de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliD",   "documentos de pedidos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "PedCliP",   "entregas a cuenta de pedidos de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AlbCliT",   "albaranes de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliL",   "líneas de albaranes de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliI",   "incidencias de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliD",   "documentos de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliP",   "entregas a cuenta de albaranes a clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AlbCliS",   "números de series de albaranes a clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacCliT",   "facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliL",   "líneas de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliP",   "pagos de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliI",   "incidencias de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliD",   "documentos de facturas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacCliS",   "series de facturas de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "FacRecT",   "facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecL",   "líneas de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecI",   "incidencias de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecD",   "documentos de facturas rectificativas", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FacRecS",   "series de facturas rectificativas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "AntCliT",   "anticipos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AntCliI",   "anticipos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "AntCliD",   "documentos de anticipos de clientes", oMet, oMsg, aMsg )

         oMsg:SetText( "Unidades de medición" )
         UniMedicion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo bancos" )
         TBancos():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo backup" )
         TBackup():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo cuentas bancarias" )
         TCuentasBancarias():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo envios y recepciones" )
         TSndRecInf():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo frases publicitarias" )
         TFrasesPublicitarias():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo datos de documentos" )
         TInfGen():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de familias" )
         TGrpFam():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo fabricante" )
         TFabricantes():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de comandas" )
         TComandas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo movimientos de almacén" )
         TRemMovAlm():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo notas" )
         TNotas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo agenda" )
         TAgenda():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo sala de ventas" )
         TSalaVenta():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo ubicaciones de sala de ventas" )
         TDetSalaVta():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo plantillas de ventas automáticas" )
         TFacAutomatica():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de plantillas de ventas automáticas" )
         TDetFacAutomatica():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo histórico de plantillas de ventas automáticas" )
         THisFacAutomatica():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo invitaciones" )
         TInvitacion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo partes de producción" )
         TProduccion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo expedientes" )
         TExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo ordenes de carga" )
         TOrdCarga():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas ordenes de carga" )
         TDetOrdCar():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de artículos" )
         TTipArt():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo catálogos de artículos" )
         TCatalogo():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de clientes" )
         TGrpCli():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de proveedores" )
         TGrpPrv():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo nuevos impuestos" )
         TNewImp():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo transportistas" )
         TTrans():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo turnos" )
         TTurno():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo cuentas de remesas" )
         TCtaRem():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo remesas" )
         TRemesas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo secciones" )
         TSeccion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de horas" )
         THoras():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo operarios" )
         TOperarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo horas de operarios" )
         TDetHoras():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo operaciones" )
         TOperacion():Create():SyncAllDbf()

         oMsg:SetText( "Tipos de operación" )
         TTipOpera():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo costes maquinaria" )
         TCosMaq():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo máquina" )
         TMaquina():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalle máquinas" )
         TDetCostes():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de partes de producción" )
         TDetProduccion():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo series de partes de producción" )
         TDetSeriesProduccion():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de personal" )
         TDetPersonal():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de horas de personal" )
         TDetHorasPersonal():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de materias primas" )
         TDetMaterial():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo series de materiales de producción" )
         TDetSeriesMaterial():New():SyncAllDbf()






         oMsg:SetText( "Añadiendo series de movimientos de almacen" )
         TDetSeriesMovimientos():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de maquinaria" )
         TDetMaquina():New():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de expedientes" )
         TTipoExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo subtipos de expediente" )
         TDetTipoExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo entidades" )
         TEntidades():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo colaboradores" )
         TColaboradores():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo actuaciones" )
         TActuaciones():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo expedientes" )
         TExpediente():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo actuaciones de expedientes" )
         TDetActuacion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tanques de combustible" )
         TTankes():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo comentarios" )
         TComentarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de comentarios" )
         TDetComentarios():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo programas de fidelización" )
         TFideliza():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de programas de fidelización" )
         TDetFideliza():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo capturas" )
         TCaptura():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de capturas" )
         TDetCaptura():Create( cPatDat() ):SyncAllDbf()

         oMsg:SetText( "Añadiendo plantillas XML" )
         TPlantillaXml():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles de plantillas XML" )
         TDetCabeceraPlantillaXML():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo liquidaciones de agentes" )
         TCobAge():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo líneas de liquidaciones de agentes" )
         TDetCobAge():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo reporting" )
         TFastReportInfGen():SyncAllDbf()

         oMsg:SetText( "Añadiendo scripts" )
         TScripts():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo envios y recepciones de internet" )
         TSndRecInf():SyncAllDbf()

      RECOVER USING oError

         msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      end

      ErrorBlock( oBlock )





      InitDbClass()





      with object ( TReindex():New() )
         :lSincroniza   := lActEmp
         :lMessageEnd   := .F.
         :GenIndices( oMsg )
      end

   end





   aEval( Directory( cEmpTmp + "*.*" ), {|aFiles| fErase( cEmpTmp + aFiles[ 1 ] ) } )

   oAni:Hide()

RETURN .T.



Static Function cGetInfo( uVal )

   local cType := ValType( uVal )

   do case
      case cType == "C"
           return uVal

      case cType == "O"
           return "Class: " + uVal:ClassName()

      case cType == "A"
           return "Len: " + Str( Len( uVal ), 4 )

      otherwise
           return cValToChar( uVal )
   endcase

return nil



static function IsChgStru( dbfOld, dbfNew )

   local i
   local lChg     := .F.
   local cCharOld
   local cCharNew
   local aStruOld := ( dbfOld )->( dbStruct() )
   local aStruNew := ( dbfNew )->( dbStruct() )

   if len( aStruOld ) <> len( aStruNew )
      lChg        := .T.
   else
      for i := 1 to len( aStruNew )
         cCharOld := aStruOld[ i, 1 ] + aStruOld[ i, 2 ] + str( aStruOld[ i, 3 ], 3 ) + str( aStruOld[ i, 4 ], 2 )
         cCharNew := aStruNew[ i, 1 ] + aStruNew[ i, 2 ] + str( aStruNew[ i, 3 ], 3 ) + str( aStruNew[ i, 4 ], 2 )
         if cCharOld <> cCharNew
            lChg  := .T.
            exit
         endif
      next
   endif

return lChg

















































Static Function BeginEdtRec( aTmp )

   local oBlock
   local oError
   local lErrors  := .F.
   local cCodEmp  := aTmp[ 1 ]

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   cNewDlg        := cGetNewFileName( cPatTmp() + "Dlg"  )

   dbCreate( cNewDlg, aSqlStruct( aItmDlg() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewDlg, cCheckArea( "Dlg", @tmpDlg ), .F. )

   if !NetErr() .AND. ( tmpDlg )->( Used() )

      ( tmpDlg )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( tmpDlg )->( ordCreate( cNewDlg, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end




























   if !lErrors

      if ( dbfDlg )->( dbSeek( cCodEmp ) )
         while ( dbfDlg )->cCodEmp == cCodEmp .AND. !( dbfDlg )->( eof() )
            dbPass( dbfDlg, tmpDlg, .T. )
            ( dbfDlg )->( dbSkip() )
         end
      end

      ( tmpDlg )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

Return ( lErrors )



Static Function BeginEdtCnf( aTmp )

   local oBlock
   local oError
   local lErrors  := .F.
   local cCodEmp  := aTmp[ 1 ]

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   cTmpCon        := cGetNewFileName( cPatTmp() + "CON" )

   dbCreate( cTmpCon, aSqlStruct( aItmCount() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpCon, cCheckArea( "CON", @tmpDlgCon ), .F. )

   if !NetErr() .AND. ( tmpDlgCon )->( Used() )

      ( tmpDlgCon )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpDlgCon )->( ordCreate( cTmpCon, "Doc", "Upper( Doc )", {|| Upper( Field->Doc ) } ) )

      ( tmpDlgCon )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpDlgCon )->( ordCreate( cTmpCon, "Des", "Upper( Des )", {|| Upper( Field->Des ) } ) )

   else

      lErrors     := .T.

   end





   if !lErrors

      ( dbfCount )->( dbGoTop() )
      while !( dbfCount )->( eof() )
         dbPass( dbfCount, tmpDlgCon, .T. )
         ( dbfCount )->( dbSkip() )
      end

      ( tmpDlgCon )->( dbGoTop() )

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

Return ( lErrors )



Static Function PrvTrans( oFld, oBtnOk )

   if oFld:nOption > 1
      oFld:SetOption( oFld:nOption - 1 )
   end

   if oFld:nOption <> 3
      SetWindowText( oBtnOk:hWnd, "&Siguiente >" )
   end

Return nil



STATIC FUNCTION EndGrpTrans( aTmp, aGet, oBrw, oDlg, oBtnOk, aImportacion, cCodGrpOld, lGrpOld, nMode )

   IIF( lGrpOld == nil, lGrpOld := .T., ) ;

   oDlg:Disable()





   if nMode == 1

      if Empty( aTmp[ 48 ] )
         aTmp[ 48 ]  := "00"
      end

      if Empty( aTmp[ 47 ] )
         aTmp[ 47 ]  := "000"
      end

      if Empty( aTmp[ 109 ] )
         aTmp[ 109 ]  := "000"
      end

      if Empty( aTmp[ 110 ] )
         aTmp[ 110 ]  := "000"
      end

      if Empty( aTmp[ 120 ] )
         aTmp[ 120 ]  := ".\Imagen"
      end

   end





   WinGather( aTmp, aGet, dbfEmp, oBrw, nMode, , .F. )





   dbCommitAll()





   oDlg:Enable()
   oDlg:End( 1 )

   if nMode == 1 .AND. !Empty( aTmp[ 1 ] )

      if oWndBrw <> nil
         oWndBrw:Minimize()
      end





      StopServices()





      mkPathGrp( aTmp[ 1 ], aTmp[ 2 ], cCodGrpOld, aImportacion, .T., .T., lGrpOld )





      InitServices()

      if oWndBrw <> nil
         oWndBrw:Restore()
      end

   end

RETURN .T.







FUNCTION ActDbf( cEmpOld, cEmpTmp, cFile, cText, oMtr, oMsg, aMsg )

   local i
   local dbfOld
   local dbfTmp
   local dbfNamOld   := cEmpOld + cFile
   local dbfNamTmp   := cEmpTmp + cFile
   local lCopy       := .F.
   local nField      := 0
   local aField

   SysRefresh()

   if oMsg <> nil
      oMsg:SetText( "Añadiendo " + cText )
   end

   if !lExistTable( dbfNamOld + ".Dbf" )
      return .F.
   end

   if !lExistTable( dbfNamTmp + ".Dbf" )
      return .F.
   end

   dbUseArea( .T., ( cDriver() ), ( dbfNamOld + ".Dbf" ), ( cCheckArea( "OLD", @dbfOld ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if NetErr()
      msgStop( "Error al abrir el fichero " + ( dbfNamOld ) + ".Dbf" )
      return .F.
   end

   dbUseArea( .T., ( cLocalDriver() ), ( dbfNamTmp + ".Dbf" ), ( cCheckArea( "TMP", @dbfTmp ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if NetErr()
      msgStop( "Error al abrir el fichero " + ( dbfNamTmp ) + ".Dbf" )
      return .F.
   end





   if !IsChgStru( dbfOld, dbfTmp )
      return .F.
   end





   nField            := ( dbfTmp )->( fCount() )
   aField            := Array( nField )

   for i := 1 to nField
      aField[ i ]    := ( dbfTmp )->( FieldPos( ( dbfOld )->( FieldName( i ) ) ) )
   next





   ( dbfOld )->( dbGoTop() )
   while !( dbfOld )->( eof() )

      ( dbfTmp )->( dbAppend() )

      aEval( aField, {| nFld, i | if( nFld <> 0, ( dbfTmp )->( FieldPut( nFld, ( dbfOld )->( FieldGet( i ) ) ) ), ) } )

      ( dbfOld )->( dbSkip() )

      SysRefresh()

   end

   lCopy             := ( dbfOld )->( eof() )

   ( dbfOld )->( dbCloseArea() )
   ( dbfTmp )->( dbCloseArea() )





   if lCopy

      if lExistTable( dbfNamOld + ".Dbf" )
         fEraseTable( dbfNamOld + ".Dbf" )
      end

      if lExistTable( dbfNamOld + ".Fpt" )
         fEraseTable( dbfNamOld + ".Fpt" )
      end

      if lExistTable( dbfNamOld + ".Cdx" )
         fEraseTable( dbfNamOld + ".Cdx" )
      end

      if lExistTable( dbfNamTmp + ".Dbf" )
         if fRenameTable( dbfNamTmp + ".Dbf", dbfNamOld + ".Dbf" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Dbf" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Dbf" )
         end
      end

      if lExistTable( dbfNamTmp + ".Fpt" )
         if fRenameTable( dbfNamTmp + ".Fpt", dbfNamOld + ".Fpt" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Fpt" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Fpt" )
         end
      end

      if lExistTable( dbfNamTmp + ".Cdx" )
         if fRenameTable( dbfNamTmp + ".Cdx", dbfNamOld + ".Cdx" ) == -1
            msgStop( "La tabla " + ( dbfNamTmp ) + ".Cdx" + " no ha sido renombrada a " + ( dbfNamOld ) + ".Cdx" )
         end
      end

   else

      MsgStop( "No se actualizo el fichero " + ( dbfNamOld ) + ".Dbf" )

   end

return ( lCopy )



STATIC FUNCTION EndTrans( aTmp, aGet, oBrw, oFld, oDlg, oBtnOk, aImportacion, nGetSemilla, cCodEmpOld, oBrwDet, dbfEmp, nMode )

   local cCodEmp  := aTmp[ 1 ]

   cNewEmpresa    := aTmp[ 1 ]

   if nMode == 1

      if oFld:nOption <> 3

         oFld:SetOption( oFld:nOption + 1 )

         if oFld:nOption == 3
            SetWindowText( oBtnOk:hWnd, "&Terminar" )
         end

         Return nil

      end

      if !Empty( cCodEmpOld ) .AND. !dbSeekInOrd( cCodEmpOld, "CodEmp", dbfEmp )

         msgStop( "Empresa " + cCodEmpOld + " no encontrada." )

         Return nil

      end

   end





   oDlg:Disable()





   while ( dbfDlg )->( dbSeek( cCodEmp ) )
      IIF( dbLock( dbfDlg ), ( ( dbfDlg )->( dbDelete() ), ( dbfDlg )->( dbUnLock() ) ), )
   end





   ( tmpDlg )->( dbGoTop() )
   while !( tmpDlg )->( eof() )
      dbPass( tmpDlg, dbfDlg, .T., cCodEmp )
      ( tmpDlg )->( dbSkip() )
   end





   if nMode == 1

      if Empty( aTmp[ 48 ] )
         aTmp[ 48 ]  := "00"
      end

      if Empty( aTmp[ 47 ] )
         aTmp[ 47 ]  := "000"
      end

      if Empty( aTmp[ 109 ] )
         aTmp[ 109 ]  := "000"
      end

      if Empty( aTmp[ 110 ] )
         aTmp[ 110 ]  := "000"
      end

      if Empty( aTmp[ 120 ] )
         aTmp[ 120 ]  := ".\Imagen"
      end

      aTmp[ 31 ]     := nGetSemilla
      aTmp[ 118 ]     := nGetSemilla
      aTmp[ 119 ]     := nGetSemilla
      aTmp[ 122 ]     := nGetSemilla
      aTmp[ 123 ]     := nGetSemilla
      aTmp[ 188 ]     := nGetSemilla

   end





   WinGather( aTmp, aGet, dbfEmp, oBrw, nMode, , .F. )





   dbCommitAll()





   oDlg:Enable()
   oDlg:End( 1 )

   if nMode == 1 .AND. !Empty( aTmp[ 1 ] )

      if oWndBrw <> nil
         oWndBrw:QuitOnProcess()
         oWndBrw:End()
      end





      StopServices()





      mkPathEmp( aTmp[ 1 ], aTmp[ 2 ], cCodEmpOld, aImportacion, .T., .T., nGetSemilla )

   end

Return .T.



FUNCTION ConfEmpresa( oWnd, oMenuItem, nSelFolder )

   local nLevel         := 0


   IIF( oWnd == nil, oWnd := oWnd(), ) ;
   IIF( oMenuItem == nil, oMenuItem := "01003", ) ;
   IIF( nSelFolder == nil, nSelFolder := 1, ) ;





   nLevel               := nLevelUsr( oMenuItem )

   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return nil
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if OpenFiles()

      if ( dbfEmp )->( dbSeek( cCodEmp() ) )
         WinEdtRec( nil, bEdtC, dbfEmp, nSelFolder )
      else
         MsgStop( "Código de empresa " + cCodEmp() + " no encontrada." )
      end

      CloseFiles()

   end

RETURN NIL



Static Function AppFromEmpresa( cCodEmp, dbfEmp, aGet, aTmp, tmpDlg, dbfDlg )

   local nRec              := ( dbfEmp )->( Recno() )

   if dbSeekInOrd( cCodEmp, "CodEmp", dbfEmp )

      aTmp[ 16 ]     := (dbfEmp)->cSufDoc
      aTmp[ 14 ]     := (dbfEmp)->nCodCli
      aTmp[ 15 ]     := (dbfEmp)->nCodPrv
      aTmp[ 32 ]     := (dbfEmp)->lUseCaj
      aTmp[ 33 ]     := (dbfEmp)->lCalCaj
      aTmp[ 20 ]     := (dbfEmp)->lCodArt
      aTmp[ 34 ]     := (dbfEmp)->lEntCon
      aTmp[ 35 ]     := (dbfEmp)->lModDes
      aTmp[ 36 ]     := (dbfEmp)->lModIva
      aTmp[ 37 ]     := (dbfEmp)->lTipMov
      aTmp[ 113 ]     := (dbfEmp)->lGetCob
      aTmp[ 115 ]     := (dbfEmp)->lSelFam
      aTmp[ 117 ]     := (dbfEmp)->lModImp
      aTmp[ 38 ]     := (dbfEmp)->lActCos
      aTmp[ 45 ]     := (dbfEmp)->lNumObr
      aTmp[ 46 ]     := (dbfEmp)->cNumObr
      aTmp[ 39 ]     := (dbfEmp)->lNumPed
      aTmp[ 40 ]     := (dbfEmp)->cNumPed
      aTmp[ 41 ]     := (dbfEmp)->lNumAlb
      aTmp[ 42 ]     := (dbfEmp)->cNumAlb
      aTmp[ 43  ]     := (dbfEmp)->lSuaLb
      aTmp[ 44  ]     := (dbfEmp)->cSuaLb
      aTmp[ 49 ]     := (dbfEmp)->nDgtUnd
      aTmp[ 50 ]     := (dbfEmp)->nDecUnd
      aTmp[ 138 ]     := (dbfEmp)->nDgtEsc
      aTmp[ 139 ]     := (dbfEmp)->nDecEsc
      aTmp[ 51 ]     := (dbfEmp)->cRutCnt
      aTmp[ 104 ]     := (dbfEmp)->cCtaCli
      aTmp[ 105 ]     := (dbfEmp)->cCtaPrv
      aTmp[ 106 ]     := (dbfEmp)->cCtaVta
      aTmp[ 111 ]     := (dbfEmp)->cCtaCob
      aTmp[ 112 ]     := (dbfEmp)->cCtaSin
      aTmp[ 149 ]     := (dbfEmp)->cCtaAnt
      aTmp[ 114 ]     := (dbfEmp)->dFecVer
      aTmp[ 115 ]     := (dbfEmp)->lSelFam
      aTmp[ 117 ]     := (dbfEmp)->lModImp
      aTmp[ 118 ]     := (dbfEmp)->nNumLiq
      aTmp[ 119 ]     := (dbfEmp)->nNumCar
      aTmp[ 21 ]     := (dbfEmp)->cEnvUsr
      aTmp[ 22 ]     := (dbfEmp)->nTipCon
      aTmp[ 23 ]     := (dbfEmp)->cRutCon
      aTmp[ 24 ]     := (dbfEmp)->cNomCon
      aTmp[ 25 ]     := (dbfEmp)->cUsrCon
      aTmp[ 26 ]     := (dbfEmp)->cPswCon
      aTmp[ 27 ]     := (dbfEmp)->cSitFtp
      aTmp[ 28 ]     := (dbfEmp)->cUsrFtp
      aTmp[ 29 ]     := (dbfEmp)->cPswFtp
      aTmp[ 47 ]     := (dbfEmp)->cDefAlm
      aTmp[ 48 ]     := (dbfEmp)->cDefFpg
      aTmp[ 107 ]     := (dbfEmp)->cDefCli
      aTmp[ 108 ]     := (dbfEmp)->cDefSer
      aTmp[ 109 ]     := (dbfEmp)->cDefCaj
      aTmp[ 110 ]     := (dbfEmp)->cDefCjr
      aTmp[ 140 ]     := (dbfEmp)->lGetLot
      aTmp[ 141 ]     := (dbfEmp)->lBusImp
      aTmp[ 142 ]     := (dbfEmp)->lShwCos
      aTmp[ 143 ]     := (dbfEmp)->lGetAge
      aTmp[ 145 ]     := (dbfEmp)->lGetUsr
      aTmp[ 144 ]     := (dbfEmp)->lImpExa
      aTmp[ 152 ]     := (dbfEmp)->cPrnPdf
      aTmp[ 121 ]     := (dbfEmp)->cDefIva
      aTmp[ 148 ]     := (dbfEmp)->nDiaVal
      aTmp[ 168 ]  := (dbfEmp)->cCtaCeeRpt
      aTmp[ 169 ]  := (dbfEmp)->cCtaCeeSpt





      if ( dbfDlg )->( dbSeek( cCodEmp ) )
         while ( ( dbfDlg )->cCodEmp == cCodEmp .AND. !( dbfDlg )->( eof() ) )
            dbPass( dbfDlg, tmpDlg, .T. )
            ( dbfDlg )->( dbSkip() )
         end
      end

      ( tmpDlg )->( dbGoTop() )

   end

   ( dbfEmp )->( dbGoTo( nRec ) )

return ( .T. )



Function ChkAllEmp( lForced )

   local n
   local dbfEmp
   local nHandle
   local aEmp        := {}

   IIF( lForced == nil, lForced := .F., ) ;

   if ( !File( FullCurDir() + "ChkEmp.nil" ) .OR. fSize( FullCurDir() + "ChkEmp.nil" ) == 0 .OR. lForced )

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      while !( dbfEmp )->( eof() )
         aAdd( aEmp, { ( dbfEmp )->CodEmp, ( dbfEmp )->cNombre, ( dbfEmp )->lGrupo } )
         ( dbfEmp )->( dbSkip() )
      end

      ( dbfEmp )->( dbCloseArea() )








      if lForced .OR.  ApoloMsgNoYes(    "El sistema ha detectado una nueva versión, es"       + Chr(13)+Chr(10) +  "conveniente que inicie el proceso de atcualización"  + Chr(13)+Chr(10) +  "de sus datos, para ello deben de salir todos los"    + Chr(13)+Chr(10) +  "usuarios de la aplicación."                          + Chr(13)+Chr(10) +  + Chr(13)+Chr(10) +  "¿Desea actualizar todos sus datos?", "Seleccione una opción" )


         if !Empty( oWnd() )
            oWnd():Disable()
         end

         for n := 1 to len( aEmp )

            if aEmp[ n, 3 ]
               lActualizaGrupo( aEmp[ n, 1 ], aEmp[ n, 2 ] )
            else
               SetEmpresa( aEmp[ n, 1 ], , , , , , .T. )
               lActualiza( aEmp[ n, 1 ], oWndBrw, .T., aEmp[ n, 2 ] )
            end

         next

         if !Empty( oWnd() )
            oWnd():Enable()
         end

      end

      if !File( FullCurDir() + "ChkEmp.nil" )

         if ( nHandle := fCreate( FullCurDir() + "ChkEmp.nil", 0 ) ) == -1
            MsgAlert( "No puedo crear el fichero, error " + fError() )
         else
            fClose( nHandle )
         end

      end

      nHandle        := fOpen( FullCurDir() + "ChkEmp.nil", 2 )

      if fError() <> 0
         MsgAlert( "No puedo abrir el fichero, error " + fError() )
      else
         fWrite( nHandle, Dtos( Date() ) )
      end

      fClose( nHandle )

   end

RETURN nil



STATIC FUNCTION EditConta( nAt, aTmp )

   local oDlg
   local oGetEmp
   local cGetEmp  := aItmEmp[ nAt, 2 ]
   local oSayEmp
   local cSayEmp
   local oGetPrj
   local cGetPrj  := aItmEmp[ nAt, 3 ]
   local oSayPrj
   local cSayPrj

   oDlg = TDialog():New(,,,,, "EDTEMPCNT",, .F.,,,,,, .F.,,,,,, .F., )







      oGetEmp := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetEmp, cGetEmp:= u ) }, oDlg,, "@!", {||    ( ChkEmpresaContaplus( AllTrim( aTmp[ 51 ] ), cGetEmp, oSayEmp ), .T. )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwEmpresaContaplus( AllTrim( aTmp[ 51 ] ), oGetEmp ) )}, nil, "LUPA",, )





      oSayEmp := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSayEmp, cSayEmp:= u ) }, oDlg,, "@!",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      oGetPrj := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cGetPrj, cGetPrj:= u ) }, oDlg,, "@R ###.######", {||    ( ChkProyecto( cGetPrj, oSayPrj, AllTrim( aTmp[ 51 ] ), cGetEmp ), .T. )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwProyecto( oGetPrj, oSayPrj, AllTrim( aTmp[ 51 ] ), cGetEmp ) )}, nil, "LUPA",, )




      oSayPrj := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cSayPrj, cSayPrj:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oGetEmp:lValid(), oGetPrj:lValid() )}, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      aItmEmp[ nAt, 2 ]   := cGetEmp
      aItmEmp[ nAt, 3 ]   := cGetPrj
   end

RETURN ( nil )



static function SaveEdtCnf( aTmp, oSay, oTree, oCmbSerie, oGetSerie, oGetContador, oGetFormato, oGetCopias, oGetNFCPrefijo, oGetNFCContador, oBrw, dbfEmp, nMode, cTiempoPed, oDlg, oNomSer )

   local cItemText
   local cSerie
   local cSerieDefecto
   local nContador
   local cFormato
   local nCopias
   local cNFCPrefijo
   local cNFCContador

   CursorWait()

   oDlg:Disable()





   oNomSer:lValid()





   cItemText            := Upper( Rtrim( oTree:GetSelText() ) )

   if !Empty( cItemText )

      cSerie            := oCmbSerie:VarGet()[ 26 ]
      cSerieDefecto     := oGetSerie:VarGet()
      nContador         := oGetContador:VarGet()
      cFormato          := oGetFormato:VarGet()
      nCopias           := oGetCopias:VarGet()
      cNFCPrefijo       := oGetNFCPrefijo:VarGet()
      cNFCContador      := oGetNFCContador:VarGet()

      if dbSeekInOrd( cItemText, "Des", tmpDlgCon )

         if dbDialogLock( tmpDlgCon )

            ( tmpDlgCon )->( FieldPut( FieldPos( "cSerie" ),          cSerieDefecto  ) )
            ( tmpDlgCon )->( FieldPut( FieldPos( cSerie ),            nContador      ) )
            ( tmpDlgCon )->( FieldPut( FieldPos( "Doc" + cSerie ),    cFormato       ) )
            ( tmpDlgCon )->( FieldPut( FieldPos( "Copias" + cSerie ), nCopias        ) )
            ( tmpDlgCon )->( FieldPut( FieldPos( "cNFC" + cSerie ),   cNFCPrefijo    ) )
            ( tmpDlgCon )->( FieldPut( FieldPos( "nNFC" + cSerie ),   cNFCContador   ) )

            ( tmpDlgCon )->( dbUnLock() )

         end

      end

   end

   aTmp[ 52 ]    := aItmEmp[ 1, 2 ]
   aTmp[ 53 ]    := aItmEmp[ 2, 2 ]
   aTmp[ 54 ]    := aItmEmp[ 3, 2 ]
   aTmp[ 55 ]    := aItmEmp[ 4, 2 ]
   aTmp[ 56 ]    := aItmEmp[ 5, 2 ]
   aTmp[ 57 ]    := aItmEmp[ 6, 2 ]
   aTmp[ 58 ]    := aItmEmp[ 7, 2 ]
   aTmp[ 59 ]    := aItmEmp[ 8, 2 ]
   aTmp[ 60 ]    := aItmEmp[ 9, 2 ]
   aTmp[ 61 ]    := aItmEmp[10, 2 ]
   aTmp[ 62 ]    := aItmEmp[11, 2 ]
   aTmp[ 63 ]    := aItmEmp[12, 2 ]
   aTmp[ 64 ]    := aItmEmp[13, 2 ]
   aTmp[ 65 ]    := aItmEmp[14, 2 ]
   aTmp[ 66 ]    := aItmEmp[15, 2 ]
   aTmp[ 67 ]    := aItmEmp[16, 2 ]
   aTmp[ 68 ]    := aItmEmp[17, 2 ]
   aTmp[ 69 ]    := aItmEmp[18, 2 ]
   aTmp[ 70 ]    := aItmEmp[19, 2 ]
   aTmp[ 71 ]    := aItmEmp[20, 2 ]
   aTmp[ 72 ]    := aItmEmp[21, 2 ]
   aTmp[ 73 ]    := aItmEmp[22, 2 ]
   aTmp[ 74 ]    := aItmEmp[23, 2 ]
   aTmp[ 75 ]    := aItmEmp[24, 2 ]
   aTmp[ 76 ]    := aItmEmp[25, 2 ]
   aTmp[ 77 ]    := aItmEmp[26, 2 ]

   aTmp[ 78 ]    := aItmEmp[ 1, 3 ]
   aTmp[ 79 ]    := aItmEmp[ 2, 3 ]
   aTmp[ 80 ]    := aItmEmp[ 3, 3 ]
   aTmp[ 81 ]    := aItmEmp[ 4, 3 ]
   aTmp[ 82 ]    := aItmEmp[ 5, 3 ]
   aTmp[ 83 ]    := aItmEmp[ 6, 3 ]
   aTmp[ 84 ]    := aItmEmp[ 7, 3 ]
   aTmp[ 85 ]    := aItmEmp[ 8, 3 ]
   aTmp[ 86 ]    := aItmEmp[ 9, 3 ]
   aTmp[ 87 ]    := aItmEmp[10, 3 ]
   aTmp[ 88 ]    := aItmEmp[11, 3 ]
   aTmp[ 89 ]    := aItmEmp[12, 3 ]
   aTmp[ 90 ]    := aItmEmp[13, 3 ]
   aTmp[ 91 ]    := aItmEmp[14, 3 ]
   aTmp[ 92 ]    := aItmEmp[15, 3 ]
   aTmp[ 93 ]    := aItmEmp[16, 3 ]
   aTmp[ 94 ]    := aItmEmp[17, 3 ]
   aTmp[ 95 ]    := aItmEmp[18, 3 ]
   aTmp[ 96 ]    := aItmEmp[19, 3 ]
   aTmp[ 97 ]    := aItmEmp[20, 3 ]
   aTmp[ 98 ]    := aItmEmp[21, 3 ]
   aTmp[ 99 ]    := aItmEmp[22, 3 ]
   aTmp[ 100 ]    := aItmEmp[23, 3 ]
   aTmp[ 101 ]    := aItmEmp[24, 3 ]
   aTmp[ 102 ]    := aItmEmp[25, 3 ]
   aTmp[ 103 ]    := aItmEmp[26, 3 ]

   aTmp[ 146  ]    := ( nIvaReq == 1 )

   aTmp[ 130 ]    := oSay[ 36 ]:nAt
   aTmp[ 131 ]    := oSay[ 37 ]:nAt
   aTmp[ 132 ]    := oSay[ 38 ]:nAt
   aTmp[ 133 ]    := oSay[ 39 ]:nAt
   aTmp[ 134 ]    := oSay[ 40 ]:nAt
   aTmp[ 135 ]    := oSay[ 41 ]:nAt

   aTmp[ 207 ]     := oSay[ 42 ]:nAt

   aTmp[ 211 ]  := cCadenaToTiempo( cTiempoPed )



   ( tmpDlgCon )->( dbGoTop() )
   while !( tmpDlgCon )->( eof() )

      if dbSeekInOrd( ( tmpDlgCon )->Doc, "Doc", dbfCount )
         dbPass( tmpDlgCon, dbfCount )
      end

      ( tmpDlgCon )->( dbSkip() )

   end



   WinGather( aTmp, , dbfEmp, oBrw, nMode )

   oDlg:Enable()
   oDlg:End( 1 )

   CursorWE()

Return nil



static function LoaItmEmp( aTmp )

   aItmEmp       := {}

   aAdd( aItmEmp, { "A", aTmp[ 52 ], aTmp[ 78 ] } )
   aAdd( aItmEmp, { "B", aTmp[ 53 ], aTmp[ 79 ] } )
   aAdd( aItmEmp, { "C", aTmp[ 54 ], aTmp[ 80 ] } )
   aAdd( aItmEmp, { "D", aTmp[ 55 ], aTmp[ 81 ] } )
   aAdd( aItmEmp, { "E", aTmp[ 56 ], aTmp[ 82 ] } )
   aAdd( aItmEmp, { "F", aTmp[ 57 ], aTmp[ 83 ] } )
   aAdd( aItmEmp, { "G", aTmp[ 58 ], aTmp[ 84 ] } )
   aAdd( aItmEmp, { "H", aTmp[ 59 ], aTmp[ 85 ] } )
   aAdd( aItmEmp, { "I", aTmp[ 60 ], aTmp[ 86 ] } )
   aAdd( aItmEmp, { "J", aTmp[ 61 ], aTmp[ 87 ] } )
   aAdd( aItmEmp, { "K", aTmp[ 62 ], aTmp[ 88 ] } )
   aAdd( aItmEmp, { "L", aTmp[ 63 ], aTmp[ 89 ] } )
   aAdd( aItmEmp, { "M", aTmp[ 64 ], aTmp[ 90 ] } )
   aAdd( aItmEmp, { "N", aTmp[ 65 ], aTmp[ 91 ] } )
   aAdd( aItmEmp, { "O", aTmp[ 66 ], aTmp[ 92 ] } )
   aAdd( aItmEmp, { "P", aTmp[ 67 ], aTmp[ 93 ] } )
   aAdd( aItmEmp, { "Q", aTmp[ 68 ], aTmp[ 94 ] } )
   aAdd( aItmEmp, { "R", aTmp[ 69 ], aTmp[ 95 ] } )
   aAdd( aItmEmp, { "S", aTmp[ 70 ], aTmp[ 96 ] } )
   aAdd( aItmEmp, { "T", aTmp[ 71 ], aTmp[ 97 ] } )
   aAdd( aItmEmp, { "U", aTmp[ 72 ], aTmp[ 98 ] } )
   aAdd( aItmEmp, { "V", aTmp[ 73 ], aTmp[ 99 ] } )
   aAdd( aItmEmp, { "W", aTmp[ 74 ], aTmp[ 100 ] } )
   aAdd( aItmEmp, { "X", aTmp[ 75 ], aTmp[ 101 ] } )
   aAdd( aItmEmp, { "Y", aTmp[ 76 ], aTmp[ 102 ] } )
   aAdd( aItmEmp, { "Z", aTmp[ 77 ], aTmp[ 103 ] } )

   nIvaReq              := if( aTmp[ 146 ], 1, 2 )

return nil



Function PosEmpresa( cCodEmp, dbfEmp, oWndBrw )

   local nRec     := ( dbfEmp )->( Recno() )
   local nOrd     := ( dbfEmp )->( OrdSetFocus( "CodEmp" ) )

   if !( dbfEmp )->( dbSeek( cCodEmp ) )
      ( dbfEmp )->( dbGoTo( nRec ) )
   end

   ( dbfEmp )->( OrdSetFocus( nOrd ) )

   oWndBrw:Refresh()

Return nil



_HB_CLASS AImportacion ; UTILITY FUNCTION AImportacion(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "AImportacion" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { lArticulos} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lArticulos" }, .F., .F. ), )
   _HB_MEMBER { lClientes} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lClientes" }, .F., .F. ), )
   _HB_MEMBER { lProveedor} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lProveedor" }, .F., .F. ), )
   _HB_MEMBER { lAgente} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lAgente" }, .F., .F. ), )
   _HB_MEMBER { lRuta} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lRuta" }, .F., .F. ), )
   _HB_MEMBER { lPedPrv} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lPedPrv" }, .F., .F. ), )
   _HB_MEMBER { lAlbPrv} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lAlbPrv" }, .F., .F. ), )
   _HB_MEMBER { lPreCli} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lPreCli" }, .F., .F. ), )
   _HB_MEMBER { lPedCli} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lPedCli" }, .F., .F. ), )
   _HB_MEMBER { lAlbCli} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lAlbCli" }, .F., .F. ), )
   _HB_MEMBER { lAlmacen} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lAlmacen" }, .F., .F. ), )
   _HB_MEMBER { lDocument} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lDocument" }, .F., .F. ), )
   _HB_MEMBER { lStockIni} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lStockIni" }, .F., .F. ), )
   _HB_MEMBER { lOferta} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lOferta" }, .F., .F. ), )
   _HB_MEMBER { lPromocion} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lPromocion" }, .F., .F. ), )
   _HB_MEMBER { lFPago} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lFPago" }, .F., .F. ), )
   _HB_MEMBER { lVale} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lVale" }, .F., .F. ), )
   _HB_MEMBER { lAnticipo} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lAnticipo" }, .F., .F. ), )
   _HB_MEMBER { lProduccion} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lProduccion" }, .F., .F. ), )
   _HB_MEMBER { lBancos} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lBancos" }, .F., .F. ), )
   _HB_MEMBER { lExpedientes} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lExpedientes" }, .F., .F. ), )
   _HB_MEMBER { lFidelizacion} ; IIF( !.F., s_oClass:AddMultiData(, .T., nScope + IIF( .F., 32, 0 ), { "lFidelizacion" }, .F., .F. ), )
   _HB_MEMBER { nCosto} ; IIF( !.F., s_oClass:AddMultiData(, 1, nScope + IIF( .F., 32, 0 ), { "nCosto" }, .F., .F. ), )

   _HB_MEMBER False(); IIF( .F., s_oClass:ModMethod( "False", @AImportacion_False(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "False", @AImportacion_False(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Load( aTmp); IIF( .F., s_oClass:ModMethod( "Load", @AImportacion_Load(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Load", @AImportacion_Load(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS AImportacion ;



UTILITY STATIC function AImportacion_False() ; local Self AS CLASS AImportacion := QSelf() AS CLASS AImportacion

   ::lArticulos      := .F.
   ::lClientes       := .F.
   ::lProveedor      := .F.
   ::lAgente         := .F.
   ::lRuta           := .F.
   ::lPedPrv         := .F.
   ::lAlbPrv         := .F.
   ::lPreCli         := .F.
   ::lPedCli         := .F.
   ::lAlbCli         := .F.
   ::lAlmacen        := .F.
   ::lStockIni       := .F.
   ::lOferta         := .F.
   ::lPromocion      := .F.
   ::lFPago          := .F.
   ::lVale           := .F.
   ::lAnticipo       := .F.
   ::lDocument       := .F.
   ::lProduccion     := .F.
   ::lBancos         := .F.
   ::lExpedientes    := .F.
   ::lFidelizacion   := .F.
   ::nCosto          := 1

Return ( Self )



UTILITY STATIC function AImportacion_Load( aTmp) ; local Self AS CLASS AImportacion := QSelf() AS CLASS AImportacion

   ::lArticulos      := aTmp[ 225 ]
   ::lClientes       := aTmp[ 224 ]
   ::lProveedor      := aTmp[ 230 ]
   ::lAlmacen        := aTmp[ 231 ]

Return ( Self )



FUNCTION cPrinterPDF() ; return ( if( !Empty( aEmp()[ 152 ] ), Rtrim( aEmp()[ 152 ] ), "" ) )



FUNCTION nUltimaRecpcionInformacion( nRecepcion )

   if !Empty( nRecepcion )
      SetFieldEmpresa( nRecepcion, "nRecInf" )
   end

RETURN ( aEmp()[ 151 ] )



FUNCTION nUltimoEnvioInformacion( nEnvio )

   if !Empty( nEnvio )
      SetFieldEmpresa( nEnvio, "nSndInf" )
   end

RETURN ( aEmp()[ 150 ] )



function BrwDelegacion( oGet, dbfDelega, oGet2 )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
   local nRec
   local nOrd     := GetBrwOpt( "BrwDelegacion" )
    local oCbxOrd
   local aCbxOrd  := { "Código" }
   local cCbxOrd
   local cCodEmp  := cCodEmp()

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]

   nRec           := ( dbfDelega )->( Recno() )
   nOrd           := ( dbfDelega )->( OrdSetFocus( nOrd ) )

   ( dbfDelega )->( dbSetFilter( {|| Field->cCodEmp == cCodEmp }, "cCodEmp == " + cCodEmp ) )
   ( dbfDelega )->( DbGoTop() )

   oDlg = TDialog():New(,,,, "Delegación", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfDelega ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfDelega ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfDelega )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfDelega
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Delegacion.Empresa"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodDlg"
         :bEditValue       := {|| ( dbfDelega )->cCodDlg }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomDlg"
         :bEditValue       := {|| ( dbfDelega )->cNomDlg }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     .F.},,, .F. )

      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   DestroyFastFilter( dbfDelega )

   if oDlg:nResult == 1

      oGet:cText( ( dbfDelega )->cCodDlg )

      if ValType( oGet2 ) == "O"
         oGet2:cText( ( dbfDelega )->cNomDlg )
      end

   end

   ( dbfDelega )->( dbGoTo( nRec ) )
   ( dbfDelega )->( OrdSetFocus( nOrd ) )

    oGet:setFocus()

Return ( oDlg:nResult == 1 )



function cDelegacion( oGet, dbfDelega, oGet2 )

   local lValid   := .F.
   local cCodDlg  := oGet:varGet()
   local cCodEmp  := cCodEmp()

   if Empty( cCodDlg )
      if oGet2 <> NIL
            oGet2:cText( "" )
      end
      return .T.
   end

   if ( dbfDelega )->( DbSeek( cCodEmp + cCodDlg ) )
      oGet:cText( ( dbfDelega )->cCodDlg )
      if oGet2 <> NIL
         oGet2:cText( ( dbfDelega )->cNomDlg )
      end
      lValid      := .T.
   else
      msgStop( "Delegación no encontrada" )
   end

return lValid



Function AppEmpresa()

   if OpenFiles( .F. )

      WinAppRec( nil, bEdit, dbfEmp )

      CloseFiles()

   end

RETURN .T.



Function NextEmpresa()

   if Empty( oWnd() )
      Return .F.
   end





   if nAnd( nLevelUsr( "01003" ), 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return .F.
   end

   CursorWait()





   if oWnd() <> nil
      oWnd():Disable()
      oWnd():CloseAll()
   end

   if OpenFiles( .F. )

      if ( dbfEmp )->( dbSeek( cCodigoEmpresaEnUso() ) ) .AND. ( dbfEmp )->( OrdKeyNo() ) <> ( dbfEmp )->( OrdKeyCount() )

         ( dbfEmp )->( dbSkip() )

         if ( dbfEmp )->lGrupo
            ( dbfEmp )->( dbSkip() )
         end

         SetEmpresa( ( dbfEmp )->CodEmp, dbfEmp, dbfDlg, dbfUser, , , .T. )

         msgInfo( "Nueva empresa activa : " + ( dbfEmp )->CodEmp + " - " + Rtrim( ( dbfEmp )->cNombre ), "Cambio de empresa" )

      end

      CloseFiles()

   end

   oWnd():Enable()

   CursorWE()

RETURN .T.



Function PriorEmpresa()

   if Empty( oWnd() )
      Return .F.
   end





   if nAnd( nLevelUsr( "01003" ), 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return .F.
   end

   CursorWait()





   if oWnd() <> nil
      oWnd():Disable()
      oWnd():CloseAll()
   end

   if OpenFiles( .F. )

      if ( dbfEmp )->( dbSeek( cCodigoEmpresaEnUso() ) ) .AND. ( dbfEmp )->( OrdKeyNo() ) <> 1

         ( dbfEmp )->( dbSkip( -1 ) )

         if ( dbfEmp )->lGrupo
            ( dbfEmp )->( dbSkip( -1 ) )
         end

         SetEmpresa( ( dbfEmp )->CodEmp, dbfEmp, dbfDlg, dbfUser )

         msgInfo( "Nueva empresa activa : " + ( dbfEmp )->CodEmp + " - " + Rtrim( ( dbfEmp )->cNombre ), "Cambio de empresa" )

      end

      CloseFiles()

   end

   oWnd():Enable()

   CursorWE()

RETURN .T.



function ActualizaEmpGrp( dbfEmp, dbfDlg, dbfUser, oBrw, oWnd )

   local cCodEmp  := ""
   local cNomEmp  := ""
   local cCodGrp  := ""
   local cNomGrp  := ""



   CursorWait()



   oWnd:Disable()

   StopServices()

   cCodEmp        := ( dbfEmp )->CodEmp
   cNomEmp        := ( dbfEmp )->cNombre
   cCodGrp        := cCodigoGrupo( ( dbfEmp )->CodEmp, dbfEmp )
   cNomGrp        := RetFld( ( dbfEmp )->CodEmp, dbfEmp )

   if !( dbfEmp )->lGrupo
      SetEmpresa( cCodEmp, dbfEmp, dbfDlg, dbfUser, , , .T. )
   end

   CursorWE()

   oBrw:End()

   SysRefresh()

   if ( dbfEmp )->lGrupo

      lActualizaGrupo( cCodEmp, cNomEmp, oBrw )

   else

      if lActualiza( cCodEmp, oBrw, .F., cNomEmp ) .AND. !Empty( cCodGrp )
         lActualizaGrupo( cCodGrp, cNomGrp )
      end

   end



   InitServices()

   oWnd:Enable()

RETURN nil



FUNCTION lActualizaGrupo( cCodGrp, cNomGrp, oBrw )

   local oBmp
   local oAni
   local oMsg
   local cMsg        := ""
   local aMsg        := {}
   local oDlgWat
   local acImages    := { "BAR_01" }

   if nUsrInUse() > 1
      msgStop( "Hay más de un usuario conectado a la aplicación", "Atención" )
      return .F.
   end

   if !TReindex():lFreeHandle()

      msgStop( "Existen procesos exclusivos, no se puede acceder a la aplicación" + Chr(13)+Chr(10) +  "en estos momentos, reintentelo pasados unos segundos." )
      return .F.
   end

   if !TReindex():lCreateHandle()
      msgStop( "Esta opción ya ha sido inicada por otro usuario", "Atención" )
      return nil
   end

   if oBrw <> nil
      oBrw:End( .T. )
   end

   oDlgWat = TDialog():New(,,,, "Actualizando grupo : " + cCodGrp + " - " + AllTrim( cNomGrp ), "CREAEMP",, .F.,,,,,, .F.,,,,,, .F., )




      oBmp := TBitmap():ReDefine( 500, "ACTUALIZAREMPRESA",, oDlgWat,,, .F., .F.,,, .F.,,, .F. )

      oAni        := TAnimat():Redefine( oDlgWat, 100, acImages, 1 )



      oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F. )

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T.,, ! .T.,, oDlgWat:bRClicked,,, )

   oDlgWat:bValid := {|| .F. }





   CompressGrupo( cCodGrp, nil, nil, nil, oAni, oMsg )

   ActDbfGrp( cCodGrp, aMsg, oAni, oMsg, nil, .T. )

   TReindex():lCloseHandle()

   oAni:End()

   oBmp:End()

   oDlgWat:bValid := {|| .T. }

   oDlgWat:End()

RETURN .T.



Static Function ActDbfGrp( cCodGrp, aMsg, oAni, oMsg, oMet, lActGrp )

   local oBlock
   local oError




   local cEmpTmp  := cPatGrpOld( "Tmp" )
   local cEmpOld  := cPatGrpOld( cCodGrp )


   oAni:Show()

   oMsg:SetText( "Generando nueva estructura" )





   dbCloseAll()





   if mkPathGrp( "Tmp", nil, nil, aImportacion():False(), .F., .F., nil, oMsg )

      CloseFiles()

      oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE





         ActDbf( cEmpOld, cEmpTmp, "FPago",     "formas de pago", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Familias",  "familias", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "FamPrv",    "familias de proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Categorias","categorías", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Pro",       "propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "TblPro",    "tabla de propiedades", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ObrasT",    "obras", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Articulo",  "artículos", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtCodebar","códigos de barras", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ProvArt",   "artículos por proveedor", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtDiv",    "precios por ventas propiedades", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtImg",    "artículos relación de imagenes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ArtKit",    "articulos kits", oMet, oMsg, aMsg )


         ActDbf( cEmpOld, cEmpTmp, "Client",    "clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "ClientD",   "documentos de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliAtp",    "atipicas de clientes", oMet, oMsg, aMsg )
         ActDbf( cEmpOld, cEmpTmp, "CliBnc",    "bancos de clientes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Provee",    "proveedores", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "ProveeD",   "documentos de proveedor", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Agentes",   "agentes", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Ruta",      "rutas", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Almacen",   "almacen", oMet, oMsg, aMsg )

         ActDbf( cEmpOld, cEmpTmp, "Oferta",    "ofertas", oMet, oMsg, aMsg )

         oMsg:SetText( "Unidades de medición" )
         UniMedicion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de familias" )
         TGrpFam():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo fabricantes" )
         TFabricantes():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de comandas" )
         TComandas():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo tipos de artículos" )
         TTipArt():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo catálogos de artículos" )
         TCatalogo():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de clientes" )
         TGrpCli():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo grupos de proveedores" )
         TGrpPrv():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo invitaciones" )
         TInvitacion():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo programas de fidelización" )
         TFideliza():Create():SyncAllDbf()

         oMsg:SetText( "Añadiendo detalles programas de fidelización" )
         TDetFideliza():Create():SyncAllDbf()

      RECOVER USING oError

         msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      end
      ErrorBlock( oBlock )





      InitDbClass()





      with object ( TReindex():New() )
         :lSincroniza   := .F.
         :lNotGrupo     := .F.
         :lMessageEnd   := .F.
         :cPathEmp      := cPatGrp()
         :GenIndices( oMsg )
      end

   end

   oAni:Hide()

RETURN .T.








FUNCTION TstEmpresa( cPatDat )

   local dbfEmp
   local nFldEmp
   local oError
   local oBlock

   if !lExistTable( cPatDat() + "EMPRESA.DBF" )
      dbCreate( cPatDat() + "EMPRESA.DBF", aSqlStruct( aItmEmp() ), cDriver() )
   end

   if !lExistIndex( cPatDat() + "EMPRESA.CDX" )
      rxEmpresa( cPatDat() )
   end

   if !lExistTable( cPatDat() + "DELEGA.DBF" )
      dbCreate( cPatDat() + "DELEGA.DBF", aSqlStruct( aItmDlg() ), cDriver() )
   end

   if !lExistIndex( cPatDat() + "DELEGA.CDX" )
      rxDlg( cPatDat() )
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      dbUseArea( .T.,  cDriver(), ( cPatDat() + "Empresa.Dbf" ), cCheckArea( "EMPRESA", @dbfEmp ), .T. )

      if !( dbfEmp )->( netErr() )

         nFldEmp  := ( dbfEmp )->( fCount() )

         ( dbfEmp )->( dbCloseArea() )

         if nFldEmp <> len( aItmEmp() )

            dbCreate( cPatEmpTmp() + "Empresa.Dbf", aSqlStruct( aItmEmp() ), cLocalDriver() )
            appDbf( cPatDat(), cPatEmpTmp(), "Empresa", aItmEmp() )

            fEraseTable( cPatDat() + "Empresa.Dbf" )
            fRenameTable( cPatEmpTmp() + "Empresa.Dbf", cPatDat() + "Empresa.Dbf" )

            rxEmpresa( cPatDat() )

         end

      end





      dbUseArea( .T.,  cDriver(), ( cPatDat() + "Delega.Dbf" ), cCheckArea( "Delega", @dbfEmp ), .T. )

      if !( dbfEmp )->( netErr() )

         nFldEmp  := ( dbfEmp )->( fCount() )

         ( dbfEmp )->( dbCloseArea() )

         if nFldEmp <> len( aItmDlg() )

            dbCreate( cPatEmpTmp() + "Delega.Dbf", aSqlStruct( aItmDlg() ), cLocalDriver() )
            appDbf( cPatDat(), cPatEmpTmp(), "Delega", aItmDlg() )

            fEraseTable( cPatDat() + "Delega.Dbf" )
            fRenameTable( cPatEmpTmp() + "Delega.Dbf", cPatDat() + "Delega.Dbf" )

            rxDlg( cPatDat() )

         end

      end



























   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error al comprobar bases de datos de empresa." )

   end

   ErrorBlock( oBlock )

RETURN ( .T. )



FUNCTION aItmEmp()

   local aDbf  := {}

   aAdd( aDbf, {"CodEmp",     "C",  2, 0, "Código de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"cNombre",    "C", 45, 0, "Nombre de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CNIF",       "C", 15, 0, "Nif de la empresa",               "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CADMINIS",   "C", 35, 0, "Administrador",                   "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDOMICILIO", "C", 35, 0, "Domicilio",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CPOBLACION", "C", 35, 0, "Población",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CPROVINCIA", "C", 30, 0, "Provincia",                       "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CCODPOS",    "C",  5, 0, "Código postal",                   "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CTLF",       "C", 15, 0, "Teléfono",                        "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CFAX",       "C", 15, 0, "Fax",                             "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"EMAIL",      "C", 50, 0, "E-mail",                          "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"WEB",        "C",120, 0, "Página web",                      "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"LACTIVA",    "L",  1, 0, "Activa",                          "",                   "", "aEmp()", .F. } )
   aAdd( aDbf, {"NCODCLI",    "N",  2, 0, "Número de digitos del código de cliente", "",           "", "aEmp()", 0 } )
   aAdd( aDbf, {"NCODPRV",    "N",  2, 0, "Número de digitos del código de proveedor", "",         "", "aEmp()", 0 } )
   aAdd( aDbf, {"CSUFDOC",    "C",  2, 0, "Sufijo para documentos",          "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDIVEMP",    "C",  3, 0, "Divisa de la empresa",            "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"CDIVCHG",    "C",  3, 0, "Divisa para cambios",             "",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"NTURTIK",    "N",  4, 0, "Contador para turnos",            "",                   "", "aEmp()", 0 } )
   aAdd( aDbf, {"LCODART",    "L",  1, 0, "Permitir solo artículos codificados", "",               "", "aEmp()", .F. } )
   aAdd( aDbf, {"CENVUSR",    "C", 20, 0, "Tipo de envio cliente o servidor","",                   "", "aEmp()", "" } )
   aAdd( aDbf, {"NTIPCON",    "N",  1, 0, "Tipo de conexión",                "",                   "", "aEmp()", 0 } )
   aAdd( aDbf, {"CRUTCON",    "C",250, 0, "Ruta de la conexión",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CNOMCON",    "C", 50, 0, "Nombre de la conexión",           "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CUSRCON",    "C", 50, 0, "Nombre de usuario de la conexión","",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CPSWCON",    "C", 20, 0, "Password para conexión",          "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CSITFTP",    "C",100, 0, "Nombre del servidor ftp",         "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CUSRFTP",    "C", 50, 0, "Nombre de usuario para ftp",      "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CPSWFTP",    "C", 20, 0, "Password para usuario",           "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMTUR",    "N",  9, 0, "Número del turno",                "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMREM",    "N",  9, 0, "Número de la remesa",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LUSECAJ",    "L",  1, 0, "Usar cajas",                      "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LCALCAJ",    "L",  1, 0, "Cajas en calculo",                "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LENTCON",    "L",  1, 0, "Entradas continuas",              "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODDES",    "L",  1, 0, "Modificar descripciones",         "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODIVA",    "L",  1, 0, "Modificar tipo de impuestos",     "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LTIPMOV",    "L",  1, 0, "Permitir multiples tipos de venta","",                  "", "aEmp()", nil } )
   aAdd( aDbf, {"LACTCOS",    "L",  1, 0, "Actualizar precios de costo",     "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMPED" ,   "L",  1, 0, "Incluir comentarios de su pedido", "",                  "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMPED" ,   "C", 50, 0, "Texto a incluir comentarios de su pedido", "",          "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMALB",    "L",  1, 0, "Incluir comentarios de nuestro albaran", "",            "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMALB",    "C", 50, 0, "Texto a incluir comentarios de nuestro albaran", "",    "", "aEmp()", nil } )
   aAdd( aDbf, {"LSUALB" ,    "L",  1, 0, "Incluir comentarios de su albaran", "",                 "", "aEmp()", nil } )
   aAdd( aDbf, {"CSUALB" ,    "C", 50, 0, "Texto a incluir comentarios de su albaran", "",         "", "aEmp()", nil } )
   aAdd( aDbf, {"LNUMOBR",    "L",  1, 0, "Incluir comentarios de la obra",  "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CNUMOBR",    "C", 50, 0, "Texto a incluir comentarios de la obra", "",            "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFALM",    "C",  3, 0, "Almacen por defecto",             "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFFPG",    "C",  2, 0, "Forma de pago por defecto",       "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"NDGTUND",    "N",  2, 0, "Número de digitos para las unidades", "",               "", "aEmp()", nil } )
   aAdd( aDbf, {"NDECUND",    "N",  1, 0, "Número de decimales para las unidades", "",             "", "aEmp()", nil } )
   aAdd( aDbf, {"CRUTCNT",    "C",100, 0, "Ruta de contabilidad",            "",                   "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpA",   "C",  2, 0, "Código de la empresa en contaplus para la serie A", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpB",   "C",  2, 0, "Código de la empresa en contaplus para la serie B", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpC",   "C",  2, 0, "Código de la empresa en contaplus para la serie C", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpD",   "C",  2, 0, "Código de la empresa en contaplus para la serie D", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpE",   "C",  2, 0, "Código de la empresa en contaplus para la serie E", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpF",   "C",  2, 0, "Código de la empresa en contaplus para la serie F", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpG",   "C",  2, 0, "Código de la empresa en contaplus para la serie G", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpH",   "C",  2, 0, "Código de la empresa en contaplus para la serie H", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpI",   "C",  2, 0, "Código de la empresa en contaplus para la serie I", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpJ",   "C",  2, 0, "Código de la empresa en contaplus para la serie J", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpK",   "C",  2, 0, "Código de la empresa en contaplus para la serie K", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpL",   "C",  2, 0, "Código de la empresa en contaplus para la serie L", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpM",   "C",  2, 0, "Código de la empresa en contaplus para la serie M", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpN",   "C",  2, 0, "Código de la empresa en contaplus para la serie N", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpO",   "C",  2, 0, "Código de la empresa en contaplus para la serie O", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpP",   "C",  2, 0, "Código de la empresa en contaplus para la serie P", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpQ",   "C",  2, 0, "Código de la empresa en contaplus para la serie Q", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpR",   "C",  2, 0, "Código de la empresa en contaplus para la serie R", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpS",   "C",  2, 0, "Código de la empresa en contaplus para la serie S", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpT",   "C",  2, 0, "Código de la empresa en contaplus para la serie T", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpU",   "C",  2, 0, "Código de la empresa en contaplus para la serie U", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpV",   "C",  2, 0, "Código de la empresa en contaplus para la serie V", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpW",   "C",  2, 0, "Código de la empresa en contaplus para la serie W", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpX",   "C",  2, 0, "Código de la empresa en contaplus para la serie X", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpY",   "C",  2, 0, "Código de la empresa en contaplus para la serie Y", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodEmpZ",   "C",  2, 0, "Codigo de la empresa en contaplus para la serie Z", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProA",   "C",  9, 0, "Código del proyecto en contaplus para la serie A" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProB",   "C",  9, 0, "Código del proyecto en contaplus para la serie B" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProC",   "C",  9, 0, "Código del proyecto en contaplus para la serie C" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProD",   "C",  9, 0, "Código del proyecto en contaplus para la serie D" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProE",   "C",  9, 0, "Código del proyecto en contaplus para la serie E" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProF",   "C",  9, 0, "Código del proyecto en contaplus para la serie F" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProG",   "C",  9, 0, "Código del proyecto en contaplus para la serie G" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProH",   "C",  9, 0, "Código del proyecto en contaplus para la serie H" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProI",   "C",  9, 0, "Código del proyecto en contaplus para la serie I" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProJ",   "C",  9, 0, "Código del proyecto en contaplus para la serie J" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProK",   "C",  9, 0, "Código del proyecto en contaplus para la serie K" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProL",   "C",  9, 0, "Código del proyecto en contaplus para la serie L" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProM",   "C",  9, 0, "Código del proyecto en contaplus para la serie M" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProN",   "C",  9, 0, "Código del proyecto en contaplus para la serie N" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProO",   "C",  9, 0, "Código del proyecto en contaplus para la serie O" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProP",   "C",  9, 0, "Código del proyecto en contaplus para la serie P" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProQ",   "C",  9, 0, "Código del proyecto en contaplus para la serie Q" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProR",   "C",  9, 0, "Código del proyecto en contaplus para la serie R" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProS",   "C",  9, 0, "Código del proyecto en contaplus para la serie S" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProT",   "C",  9, 0, "Código del proyecto en contaplus para la serie T" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProU",   "C",  9, 0, "Código del proyecto en contaplus para la serie U" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProV",   "C",  9, 0, "Código del proyecto en contaplus para la serie V" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProW",   "C",  9, 0, "Código del proyecto en contaplus para la serie W" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProX",   "C",  9, 0, "Código del proyecto en contaplus para la serie X" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProY",   "C",  9, 0, "Código del proyecto en contaplus para la serie Y" , "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodProZ",   "C",  9, 0, "Código del proyecto en contaplus para la serie Z",  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTACLI",    "C",  3, 0, "Cuenta en contaplus de clientes",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTAPRV",    "C",  3, 0, "Cuenta en contaplus de proveedores",                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTAVTA",    "C",  3, 0, "Cuenta en contaplus de venta",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCLI",    "C", 12, 0, "Cliente por defecto",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFSER",    "C",  1, 0, "Serie por defecto",                                     "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCAJ",    "C",  3, 0, "Caja por defecto",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFCJR",    "C",  3, 0, "Cajero por defecto",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTACOB",    "C", 12, 0, "Subcuenta de cobros en T.P.V.",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CCTASIN",    "C", 12, 0, "Subcuenta de clientes sin codificar",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LGETCOB",    "L",  1, 0, "Recoger obras",                                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"DFECVER",    "D",  8, 0, "Fecha de la versión",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LSELFAM",    "L",  8, 0, "Selector por família",                                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LUSEIMP",    "L",  1, 0, "Habilitar impuestos especiales",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"LMODIMP",    "L",  1, 0, "Modificar impuestos especiales",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMLIQ",    "N",  9, 0, "Número de la liquidación",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMCAR",    "N",  9, 0, "Número de la ordenes de carga",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDIRIMG",    "C",100, 0, "Directorio de imagenes",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"CDEFIVA",    "C",  1, 0, "Tipo de impuesto por defecto",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMMOV",    "N",  9, 0, "Número del movimiento de almacen",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NNUMCOB",    "N",  9, 0, "Número del cobro de agentes",                           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF1",   "N",  6, 2, "Primer porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF2",   "N",  6, 2, "Segundo porcentaje de beneficio por defecto",           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF3",   "N",  6, 2, "Tercer porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF4",   "N",  6, 2, "Cuarto porcentaje de beneficio por defecto",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"NDEFBNF5",   "N",  6, 2, "Quinto porcentaje de beneficio por defecto",            "", "", "aEmp()", nil} )
   aAdd( aDbf, {"NDEFBNF6",   "N",  6, 2, "Sexto porcentaje de beneficio por defecto",             "", "", "aEmp()", nil} )
   aAdd( aDbf, {"nDefSbr1",   "N",  1, 0, "Primer beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr2",   "N",  1, 0, "Segundo beneficio sobre el costo o sobre venta por defecto","", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr3",   "N",  1, 0, "Tercer beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr4",   "N",  1, 0, "Cuarto beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr5",   "N",  1, 0, "Quinto beneficio sobre el costo o sobre venta por defecto", "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDefSbr6",   "N",  1, 0, "Sexto beneficio sobre el costo o sobre venta por defecto",  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwKit",    "L",  1, 0, "Mostrar productos kit",                                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lPasNil",    "L",  1, 0, "Confirmar artículos sin valorar",                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDgtEsc",    "N",  1, 0, "Número de digitos para escandallos",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDecEsc",    "N",  1, 0, "Número de decimales para escandallos",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetLot",    "L",  1, 0, "Recoger lotes",                                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lBusImp",    "L",  1, 0, "Buscar importes en la tarifa inferior",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwCos",    "L",  1, 0, "Mostrar precios de costo",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetAge",    "L",  1, 0, "Recoger el agente",                                     "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lImpExa",    "L",  1, 0, "Importe exacto al cobrar",                              "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetUsr",    "L",  1, 0, "Recoger el usuario",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lIvaReq",    "L",  1, 0, "Lógico para creación de cuentas de contabilidad",       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lEnvEnt",    "L",  1, 0, "Lógico para enviar solo albaranes entregados",          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDiaVal",    "N",  3, 0, "Dias de validez para un presupuesto",                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaAnt",    "C", 12, 0, "Subcuenta de anticipos de clientes",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nSndInf",    "N",  9, 0, "Número del último envio",                               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nRecInf",    "N",  9, 0, "Número del la última recepción",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPrnPdf",    "C",220, 0, "Impresora para generar PDF",                            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lCodeBar",   "L",  1, 0, "Lógico seleccionar multiples códigos de barras",        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cDedVta",    "C",  2, 0, "Tipo de venta por defecto",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"dIniOpe",    "D",  8, 0, "Fecha de inicio de las operaciones",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"dFinOpe",    "D",  8, 0, "Fecha de fin de las operaciones",                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaRet",    "C", 12, 0, "Cuenta en contaplus de IRPF",                           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cSitSql",    "C",100, 0, "Nombre del servidor para MySql",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cUsrSql",    "C", 50, 0, "Nombre de usuario para MySql",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPswSql",    "C", 20, 0, "Password para usuario para MySql",                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nPrtSql",    "N",  5, 0, "Puerto para conexión de MySql",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cDtbSql",    "C",100, 0, "Base de datos MySql",                                   "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNbrCaj",    "C",100, 0, "Descripción para cajas",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNbrUnd",    "C",100, 0, "Descripción para unidades",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUsePor",    "L",  1, 0, "Lógico habilitar portes",                               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUsePnt",    "L",  1, 0, "Lógico habilitar punto verde",                          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lIvaInc",    "L",  1, 0, "Lógico para impuestos incluido",                        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaCeeRpt", "C", 12, 0, "Cuenta en contaplus de impuestos repercutido",          "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaCeeSpt", "C", 12, 0, "Cuenta en contaplus de impuestos soportado",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lUseTbl",    "L",  1, 0, "Lógico para usar tabla de propiedades",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lShwTar1",   "L",  1, 0, "Lógico para mostrar la primera tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar2",   "L",  1, 0, "Lógico para mostrar la segunda tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar3",   "L",  1, 0, "Lógico para mostrar la tercera tarifa",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar4",   "L",  1, 0, "Lógico para mostrar la cuarta tarifa",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar5",   "L",  1, 0, "Lógico para mostrar la quinta tarifa",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lShwTar6",   "L",  1, 0, "Lógico para mostrar la sexta tarifa",                   "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"cTxtTar1",   "C", 50, 0, "Nombre para la primera tarifa",                         "", "", "aEmp()", "Precio 1"} )
   aAdd( aDbf, {"cTxtTar2",   "C", 50, 0, "Nombre para la segunda tarifa",                         "", "", "aEmp()", "Precio 2"} )
   aAdd( aDbf, {"cTxtTar3",   "C", 50, 0, "Nombre para la tercera tarifa",                         "", "", "aEmp()", "Precio 3"} )
   aAdd( aDbf, {"cTxtTar4",   "C", 50, 0, "Nombre para la cuarta tarifa",                          "", "", "aEmp()", "Precio 4"} )
   aAdd( aDbf, {"cTxtTar5",   "C", 50, 0, "Nombre para la quinta tarifa",                          "", "", "aEmp()", "Precio 5"} )
   aAdd( aDbf, {"cTxtTar6",   "C", 50, 0, "Nombre para la sexta tarifa",                           "", "", "aEmp()", "Precio 6"} )
   aAdd( aDbf, {"cIniJornada","C",  5, 0, "Hora de inicio de la jornada laboral",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cSrvMai",    "C",250, 0, "Servidor de correo",                                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCtaMai",    "C",250, 0, "Cuenta de correo",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPssMai",    "C",250, 0, "Clave de cuenta de correo",                             "", "", "aEmp()", "" } )
   aAdd( aDbf, {"cCcpMai",    "C",250, 0, "Enviar copoas de mail a cuenta de correo",              "", "", "aEmp()", "" } )
   aAdd( aDbf, {"nNumPgo",    "N",  9, 0, "Contador para pago de clientes",                        "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lSelCaj",    "L",  1, 0, "Lógico seleccionar cajas",                              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lSelAlm",    "L",  1, 0, "Lógico seleccionar almacenes",                          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lAddCut",    "L",  1, 0, "Lógico entrada corta o larga para artículos",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lFidelity",  "L",  1, 0, "Lógico para iniciar el modo fidelity",                  "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lPreLin",    "L",  1, 0, "Lógico seleccionar precios en línea",                   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lDtoLin",    "L",  1, 0, "Lógico habilitar descuento lineal",                     "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lSalPdt",    "L",  1, 0, "Lógico avisar saldo pendiente",                         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPrtMai",    "N",  5, 0, "Puerto del servidor de correo",                         "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lAutMai",    "L",  1, 0, "Lógico de autenticación del servidor de correo",        "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGetUbi",    "L",  1, 0, "Recoger ubicación de venta",                            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lGrupo",     "L",  1, 0, "Lógico de grupo",                                       "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCodGrp",    "C",  2, 0, "Código del grupo",                                      "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lStkCero",   "L",  1, 0, "Lógico para mostrar estokaje cero",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lShowSala",  "L",  1, 0, "Lógico para mostrar las sala de venta siempre",         "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPreTPro",   "N",  1, 0, "Precios para productos en táctil",                      "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"nPreTCmb",   "N",  1, 0, "Precios para combinados en táctil",                     "", "", "aEmp()", 2 } )
   aAdd( aDbf, {"lCosPrv",    "L",  1, 0, "Lógico costo por proveedor",                            "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lShwPop",    "L",  1, 0, "Lógico de mostrar ventanas de stocks",                  "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nCifRut",    "N",  1, 0, "Númerico para calclulo de CIF o RUT",                   "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"cDImagen",   "C",250, 0, "Ruta para las imagenes en FTP",                         "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"lGetFpg",    "L",  1, 0, "Lógico de solicitar siempre forma de pago",             "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cSeriePed",  "C",  1, 0, "Serie para pedidos de internet",                        "", "", "aEmp()", "A" } )
   aAdd( aDbf, {"nTiempoPed", "N",  3, 0, "Tiempo en recargar los pedidos",                        "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lNStkAct",   "L",  1, 0, "Logico para no mostrar el stock actual en ventas",      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cRutEdi",    "C",250, 0, "Ruta para exportar las facturas a EDI",                 "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"cCodEdi",    "C", 17, 0, "Código EDI [EAN] de nuestras empresa",                  "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cUsrFtpImg", "C", 50, 0, "Nombre de usuario para ftp de imagenes",                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cPswFtpImg", "C", 50, 0, "Contraseña de usuario para ftp de imagenes",            "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cHostFtpImg","C", 50, 0, "Host para ftp de imagenes",                             "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nPrtFtp",    "N",  5, 0, "Puerto del servidor ftp para imagenes",                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNumRegMer", "C",250, 0, "Número del registro mercantil",                         "", "", "aEmp()", Space( 250 ) } )
   aAdd( aDbf, {"nTiempoImp", "N",  3, 0, "Tiempo de recarga de impresión pda",                    "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lPasEnvio",  "L",  1, 0, "Lógico envio pasivo de datos",                          "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lPasFtp",    "L",  1, 0, "Lógico envio pasivo ftp",                               "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lOrdNomTpv", "L",  1, 0, "Lógico ordén TPV por nombre",                           "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lGrpCli",    "L",  1, 0, "Lógico de grupo tablas de cliente",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpArt",    "L",  1, 0, "Lógico de grupo tablas de artículos",                   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"CDefTem",    "C",  3, 0, "Temporada por defecto",                                 "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nDiaVale",   "N",  3, 0, "Numeros de dias para que el vale sea valido",           "", "", "aEmp()", nil } )
   aAdd( aDbf, {"lNumTik",    "L",  1, 0, "Lógico numero del tiket obligatorio para devolución",   "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCosAct",    "L",  1, 0, "Lógico para usar costo actual en movimientos",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpPrv",    "L",  1, 0, "Lógico de grupo tablas de proveedores",                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpAlm",    "L",  1, 0, "Lógico de grupo tablas de almacén",                     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"nPreVta",    "N",  1, 0, "Precios para ventas generales",                         "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"nPreWebVta", "N",  1, 0, "Precios para ventas web",                               "", "", "aEmp()", 0 } )
   aAdd( aDbf, {"lSerNoCom",  "L",  1, 0, "Avisar en ventas de números de serie no comprados",     "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lApelNomb",  "L",  1, 0, "Lógico para recibir el apellido - nombre WEB",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lConIva",    "L",  1, 0, "Lógico para contabilizar apuntes de impuestos siempre", "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lIvaImpEsp", "L",  1, 0, "Aplicar impuestos a impuestos especiales",              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lBtnFam",    "L",  1, 0, "Seleccion de familias por botones en PDA",              "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lMixFam",    "L",  1, 0, "Seleccion mixta de articulos en PDA",                   "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lCalLot",    "L",  1, 0, "Lógico calculo de lotes en stock",                      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lCalSer",    "L",  1, 0, "Lógico calculo de números de serie en stock",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lMovCos",    "L",  1, 0, "Lógico no usar movimientos en costo medio",             "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lGrpEnt",    "L",  1, 0, "Lógico agrupar entregas a cuenta en recibos",           "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lBusCir",    "L",  1, 0, "Lógico activar búsqueda circular",                      "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"cNomSerA",   "C", 60, 0, "Nombre para la serie A",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerB",   "C", 60, 0, "Nombre para la serie B",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerC",   "C", 60, 0, "Nombre para la serie C",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerD",   "C", 60, 0, "Nombre para la serie D",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerE",   "C", 60, 0, "Nombre para la serie E",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerF",   "C", 60, 0, "Nombre para la serie F",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerG",   "C", 60, 0, "Nombre para la serie G",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerH",   "C", 60, 0, "Nombre para la serie H",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerI",   "C", 60, 0, "Nombre para la serie I",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerJ",   "C", 60, 0, "Nombre para la serie J",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerK",   "C", 60, 0, "Nombre para la serie K",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerL",   "C", 60, 0, "Nombre para la serie L",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerM",   "C", 60, 0, "Nombre para la serie M",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerN",   "C", 60, 0, "Nombre para la serie N",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerO",   "C", 60, 0, "Nombre para la serie O",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerP",   "C", 60, 0, "Nombre para la serie P",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerQ",   "C", 60, 0, "Nombre para la serie Q",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerR",   "C", 60, 0, "Nombre para la serie R",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerS",   "C", 60, 0, "Nombre para la serie S",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerT",   "C", 60, 0, "Nombre para la serie T",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerU",   "C", 60, 0, "Nombre para la serie U",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerV",   "C", 60, 0, "Nombre para la serie V",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerW",   "C", 60, 0, "Nombre para la serie W",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerX",   "C", 60, 0, "Nombre para la serie X",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerY",   "C", 60, 0, "Nombre para la serie Y",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomSerZ",   "C", 60, 0, "Nombre para la serie Z",                                "", "", "aEmp()", nil } )
   aAdd( aDbf, {"nTipWeb",    "N",  2, 0, "OsCommerce o Prestashop",                               "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lCntNeg",    "L",  1, 0, "Contabilizar negativo",                                 "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lImgArt",    "L",  1, 0, "Lógico si un artículo lleva imagen",                    "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cCooKey",    "C",250, 0, "Valor de __COOKIE_KEY__ para prestashop",               "", "", "aEmp()", nil } )
   aAdd( aDbf, {"cNomImp",    "C", 20, 0, "Nombre del impuesto",                                   "", "", "aEmp()", "IVA" } )
   aAdd( aDbf, {"lReqDec",    "L",  1, 0, "Lógico si el recargo se aplica con decimales",          "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lAptNeg",    "L",  1, 0, "Lógico de realizar apunte en contaplus en negativo",    "", "", "aEmp()", .F. } )
   aAdd( aDbf, {"lLlevar",    "L",  1, 0, "Lógico realizar para llevar en táctil",                 "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"lRecoger",   "L",  1, 0, "Lógico realizar para recoger en táctil",                "", "", "aEmp()", .T. } )
   aAdd( aDbf, {"nAutSer",    "N", 16, 0, "Número de autserializado",                              "", "", "aEmp()", 1 } )
   aAdd( aDbf, {"lEncargar",  "L",  1, 0, "Lógico realizar para encargos en táctil",               "", "", "aEmp()", .T. } )

Return ( aDbf  )



static function aItmDlg()

   local aItmDlg  := {}

   aAdd( aItmDlg, { "CCODEMP", "C", 2, 0, "Código de empresa"    } )
   aAdd( aItmDlg, { "CCODDLG", "C", 2, 0, "Código de delegación" } )
   aAdd( aItmDlg, { "CNOMDLG", "C",50, 0, "Nombre de delegación" } )

return ( aItmDlg )



FUNCTION rxEmpresa( cPath, oMeter )

   local dbfEmp

   IIF( cPath == nil, cPath := cPatDat(), ) ;

   dbUseArea( .T., cDriver(), cPath + "Empresa.Dbf", cCheckArea( "EMPRESA", @dbfEmp ), .F. )
   if !( dbfEmp )->( neterr() )
      ( dbfEmp)->( __dbPack() )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CODEMP", "CodEmp", {|| Field->CodEmp }, ) )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CNOMBRE", "CNOMBRE", {|| Field->cNomBre } ) )

      ( dbfEmp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfEmp )->( ordCreate( cPath + "EMPRESA.CDX", "CCODGRP", "CCODGRP", {|| Field->cCodGrp } ) )

      ( dbfEmp )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de empresas" )
   end

RETURN NIL



FUNCTION rxDlg( cPath, oMeter )

   local dbfDlg

   IIF( cPath == nil, cPath := cPatDat(), ) ;

   dbUseArea( .T., cDriver(), cPath + "DELEGA.DBF", cCheckArea( "DELEGA", @dbfDlg ), .F. )

   if !( dbfDlg )->( neterr() )
      ( dbfDlg)->( __dbPack() )

      ( dbfDlg )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfDlg )->( ordCreate( cPath + "DELEGA.CDX", "CCODEMP", "CCODEMP + CCODDLG", {|| Field->cCodEmp + Field->cCodDlg } ) )

      ( dbfDlg )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de delegaciones" )
   end

RETURN NIL







Function lValidaOperacion( dOperacion, lMessage )

   IIF( lMessage == nil, lMessage := .T., ) ;


   if ( Empty( aEmp()[ 155 ] ) .OR. Empty( aEmp()[ 156 ] ) ) .OR.  ( dOperacion >= aEmp()[ 155 ] .AND. dOperacion <= aEmp()[ 156 ] )
      Return .T.
   end

   if lMessage
      msgStop( "La fecha del documento no está entre la fecha de operaciones marcada en la empresa" )
   end

Return ( .F. )



Function cNombreUnidades()

   local cNombreUnidades   := "Unidades"

   if !Empty( aEmp() ) .AND. 164 <= len( aEmp() ) .AND. !Empty( aEmp()[ 164 ] )
      cNombreUnidades      := Rtrim( aEmp()[ 164 ] )
   end

Return ( cNombreUnidades )



Function cNombreCajas()

   local cNombreCajas   := "Cajas"

   if !Empty( aEmp() ) .AND. 163 <= len( aEmp() ) .AND. !Empty( aEmp()[ 163 ] )
      cNombreCajas      := Rtrim( aEmp()[ 163 ] )
   end

Return ( cNombreCajas )



Static function lChgCajCaj( aGet, aTmp )

   if !aTmp[ 32 ]
      aTmp[ 33 ]  := .F.
      aGet[ 33 ]:Refresh()
   end

Return (.T.)



Static Function cTiempoToCadena( nTiempo )

   local cTiempo  := aTiempo[ 1 ]

   do case
      case nTiempo == 0
         cTiempo  := aTiempo[ 1 ]
      case nTiempo == 1
         cTiempo  := aTiempo[ 2 ]
      case nTiempo == 2
         cTiempo  := aTiempo[ 3 ]
      case nTiempo == 5
         cTiempo  := aTiempo[ 4 ]
      case nTiempo == 10
         cTiempo  := aTiempo[ 5 ]
      case nTiempo == 15
         cTiempo  := aTiempo[ 6 ]
      case nTiempo == 30
         cTiempo  := aTiempo[ 7 ]
      case nTiempo == 45
         cTiempo  := aTiempo[ 8 ]
      case nTiempo == 60
         cTiempo  := aTiempo[ 9 ]
      case nTiempo == 120
         cTiempo  := aTiempo[ 10 ]
      case nTiempo == 240
         cTiempo  := aTiempo[ 11 ]
      case nTiempo == 480
         cTiempo  := aTiempo[ 12 ]
   endcase

Return ( cTiempo )



Static Function cTiempoToCadenaImp( nTiempo )

   local cTiempo  := aTiempoImp[ 1 ]

   do case
      case nTiempo == 0
         cTiempo  := aTiempoImp[ 1 ]
      case nTiempo == 5
         cTiempo  := aTiempoImp[ 2 ]
      case nTiempo == 10
         cTiempo  := aTiempoImp[ 3 ]
      case nTiempo == 15
         cTiempo  := aTiempoImp[ 4 ]
      case nTiempo == 20
         cTiempo  := aTiempoImp[ 5 ]
      case nTiempo == 25
         cTiempo  := aTiempoImp[ 6 ]
      case nTiempo == 30
         cTiempo  := aTiempoImp[ 7 ]
      case nTiempo == 35
         cTiempo  := aTiempoImp[ 8 ]
      case nTiempo == 40
         cTiempo  := aTiempoImp[ 9 ]
      case nTiempo == 45
         cTiempo  := aTiempoImp[ 10 ]
      case nTiempo == 50
         cTiempo  := aTiempoImp[ 11 ]
      case nTiempo == 55
         cTiempo  := aTiempoImp[ 12 ]
      case nTiempo == 60
         cTiempo  := aTiempoImp[ 13 ]
   endcase

Return ( cTiempo )



Static Function cCadenaToTiempo( cTiempo )

   local nTiempo := 0

   do case
      case cTiempo == aTiempo[ 1 ]
         nTiempo  := 0
      case cTiempo == aTiempo[ 2 ]
         nTiempo  := 1
      case cTiempo == aTiempo[ 3 ]
         nTiempo  := 2
      case cTiempo == aTiempo[ 4 ]
         nTiempo  := 5
      case cTiempo == aTiempo[ 5 ]
         nTiempo  := 10
      case cTiempo == aTiempo[ 6 ]
         nTiempo  := 15
      case cTiempo == aTiempo[ 7 ]
         nTiempo  := 30
      case cTiempo == aTiempo[ 8 ]
         nTiempo  := 45
      case cTiempo == aTiempo[ 9 ]
         nTiempo  := 60
      case cTiempo == aTiempo[ 10 ]
         nTiempo  := 120
      case cTiempo == aTiempo[ 11 ]
         nTiempo  := 240
      case cTiempo == aTiempo[ 12 ]
         nTiempo  := 480
   endcase

Return ( nTiempo )










































































































































































































































































































































































































































































































































































































































































































Function SetTituloEmpresa()

   if oWnd() <> nil
      oWnd():cTitle( "Gestool" + Space( 1 ) + "2K13" + " : " + uFieldEmpresa( "CodEmp" ) + " - " + Rtrim( uFieldEmpresa( "cNombre" ) ) )
   end

Return ( nil )



FUNCTION aItmBnc()

   local aBase := {}

   aAdd( aBase, { "cCodEmp",     "C",  2, 0, "Código de empresa",                "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cEntBnc",     "C",  4, 0, "Entidad bancaria",                 "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cSucBnc",     "C",  4, 0, "Sucursal bancaria",                "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDigBnc",     "C",  2, 0, "Dígito control",                   "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCtaBnc",     "C", 10, 0, "Cuenta",                           "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCodBnc",     "C", 50, 0, "Nombre del banco",                 "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cDirBnc",     "C", 35, 0, "Domicilio del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPobBnc",     "C", 25, 0, "Población del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cProBnc",     "C", 20, 0, "Provincia del banco",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cCPBnc",      "C", 15, 0, "Código postal",                    "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cTlfBnc",     "C", 20, 0, "Teléfono",                         "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cFaxBnc",     "C", 20, 0, "Fax",                              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPContBnc",   "C", 35, 0, "Persona de contacto",              "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "cPaiBnc",     "C",  4, 0, "Pais",                             "",                   "", "( cDbfBnc )" } )
   aAdd( aBase, { "nSalIni",     "N", 16, 6, "Saldo inicial",                    "",                   "", "( cDbfBnc )" } )

RETURN ( aBase )



FUNCTION rxBnc( cPath, oMeter )

   local dbfBnc

   IIF( cPath == nil, cPath := cPatGrp(), ) ;

   dbUseArea( .T., cDriver(), cPath + "EmpBnc.Dbf", cCheckArea( "EmpBnc", @dbfBnc ), .F. )

   if !( dbfBnc )->( neterr() )

      ( dbfBnc )->( __dbPack() )

      ( dbfBnc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfBnc )->( ordCreate( cPath + "EmpBnc.CDX", "cCodEmp", "cCodEmp + cCodBnc", {|| Field->cCodEmp + Field->cCodBnc } ) )

      ( dbfBnc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfBnc )->( ordCreate( cPath + "EmpBnc.CDX", "cCtaBnc", "cCodEmp + cEntBnc + cSucBnc + cDigBnc + cCtaBnc", {|| Field->cCodEmp + Field->cEntBnc + Field->cSucBnc + Field->cDigBnc + Field->cCtaBnc } ) )

      ( dbfBnc )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de delegaciones" )

   end

RETURN NIL












































































































































































































FUNCTION BrwBncEmp( oGet, oGetEnt, oGetSuc, oGetDig, oGetCta, dbfBancos )

    local oDlg
    local oBrw
   local oFont
   local oBtn
    local oGet1
    local cGet1
   local nOrd        := GetBrwOpt( "BrwBncEmp" )
    local oCbxOrd
   local aCbxOrd     := { "Nombre", "Cuenta" }
   local cCbxOrd     := "Nombre"
   local nLevel      := nLevelUsr( "01003" )
   local lClose      := .F.
   local nOrdAnt

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   if !lExistTable( cPatGrp() + "EmpBnc.Dbf" )
      MsgStop( "No existe el fichero de bancos" )
      Return .F.
   end

   if Empty( dbfBancos )
      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "EmpBnc.Dbf" ), ( cCheckArea( "EMPBNC", @dbfBancos ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "EmpBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   nOrdAnt           := ( dbfBancos )->( ordSetFocus( nOrd ) )

   ( dbfBancos )->( dbGoTop() )



   oDlg = TDialog():New(,,,, "Seleccionar cuentas bancarias", "HelpEntry",, .F.,,,,,, .F.,,,,,, .F., )





      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfBancos, nil, cCodEmp() ) ) }, .F., .F.,,,,,, nil, "Find",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfBancos )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := TXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfBancos
      oBrw:nMarqueeStyle   := 5

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodBnc"
         :bEditValue       := {|| ( dbfBancos )->cCodBnc }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomBnc"
         :bEditValue       := {|| ( dbfBancos )->cNomBnc }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cuenta"
         :cSortOrder       := "cCtaBnc"
         :bEditValue       := {|| ( dbfBancos )->cEntBnc + "-" + ( dbfBancos )->cSucBnc + "-" + ( dbfBancos )->cDigBnc + "-" + ( dbfBancos )->cCtaBnc }
         :nWidth           := 150
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Domicilio"
         :bEditValue       := {|| ( dbfBancos )->cDirBnc }
         :nWidth           := 120
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Población"
         :bEditValue       := {|| ( dbfBancos )->cPobBnc }
         :nWidth           := 100
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código postal"
         :bEditValue       := {|| ( dbfBancos )->cCPBnc }
         :nWidth           := 40
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Provincia"
         :bEditValue       := {|| ( dbfBancos )->cProBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Teléfono"
         :bEditValue       := {|| ( dbfBancos )->cTlfBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fax"
         :bEditValue       := {|| ( dbfBancos )->cFaxBnc }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Contacto"
         :bEditValue       := {|| ( dbfBancos )->cPContBnc }
         :nWidth           := 140
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )





        TButton():ReDefine( 500, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





        TButton():ReDefine( 501, {||( nil )}, oDlg,,, .F., {||     ( .F. )},,, .F. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfBancos )->cNomBnc )

      if oGetEnt <> NIL
         oGetEnt:cText( ( dbfBancos )->cEntBnc )
      end

      if oGetSuc <> NIL
         oGetSuc:cText( ( dbfBancos )->cSucBnc )
      end

      if oGetDig <> NIL
         oGetDig:cText( ( dbfBancos )->cDigBnc )
      end

      if oGetCta <> NIL
         oGetCta:cText( ( dbfBancos )->cCtaBnc )
      end

   end

   DestroyFastFilter( dbfBancos )

   SetBrwOpt( "BrwBancos", ( dbfBancos )->( OrdNumber() ) )

   ( dbfBancos )->( dbClearFilter() )

   ( dbfBancos )->( OrdSetFocus( nOrdAnt ) )

   if lClose
      ( dbfBancos )->( dbCloseArea() )
   end

    oGet:setFocus()

RETURN ( oDlg:nResult == 1 )



static function ChangeSerie( aGet, aTmp, oSerie, cSerie, oNomSer, cNomSer, lDown )





   GuardaNombreSerie( aTmp, cSerie, cNomSer )





   if lDown
      DwSerie( oSerie )
   else
      UpSerie( oSerie )
   end





   CargaNombreSerie( aTmp, oSerie, oNomSer )

return ( .T. )



static function GuardaNombreSerie( aTmp, cSerie, cNomSer )

   do Case
      case cSerie == "A"
         aTmp[ 245 ] := cNomSer
      case cSerie == "B"
         aTmp[ 246 ] := cNomSer
      case cSerie == "C"
         aTmp[ 247 ] := cNomSer
      case cSerie == "D"
         aTmp[ 248 ] := cNomSer
      case cSerie == "E"
         aTmp[ 249 ] := cNomSer
      case cSerie == "F"
         aTmp[ 250 ] := cNomSer
      case cSerie == "G"
         aTmp[ 251 ] := cNomSer
      case cSerie == "H"
         aTmp[ 252 ] := cNomSer
      case cSerie == "I"
         aTmp[ 253 ] := cNomSer
      case cSerie == "J"
         aTmp[ 254 ] := cNomSer
      case cSerie == "K"
         aTmp[ 255 ] := cNomSer
      case cSerie == "L"
         aTmp[ 256 ] := cNomSer
      case cSerie == "M"
         aTmp[ 257 ] := cNomSer
      case cSerie == "N"
         aTmp[ 258 ] := cNomSer
      case cSerie == "O"
         aTmp[ 259 ] := cNomSer
      case cSerie == "P"
         aTmp[ 260 ] := cNomSer
      case cSerie == "Q"
         aTmp[ 261 ] := cNomSer
      case cSerie == "R"
         aTmp[ 262 ] := cNomSer
      case cSerie == "S"
         aTmp[ 263 ] := cNomSer
      case cSerie == "T"
         aTmp[ 264 ] := cNomSer
      case cSerie == "U"
         aTmp[ 265 ] := cNomSer
      case cSerie == "V"
         aTmp[ 266 ] := cNomSer
      case cSerie == "W"
         aTmp[ 267 ] := cNomSer
      case cSerie == "X"
         aTmp[ 268 ] := cNomSer
      case cSerie == "Y"
         aTmp[ 269 ] := cNomSer
      case cSerie == "Z"
         aTmp[ 270 ] := cNomSer
   end

return ( .T. )



static function CargaNombreSerie( aTmp, oSerie, oNomSer )

   do Case
      case oSerie:VarGet() == "A"
         oNomSer:cText( aTmp[ 245 ] )
      case oSerie:VarGet() == "B"
         oNomSer:cText( aTmp[ 246 ] )
      case oSerie:VarGet() == "C"
         oNomSer:cText( aTmp[ 247 ] )
      case oSerie:VarGet() == "D"
         oNomSer:cText( aTmp[ 248 ] )
      case oSerie:VarGet() == "E"
         oNomSer:cText( aTmp[ 249 ] )
      case oSerie:VarGet() == "F"
         oNomSer:cText( aTmp[ 250 ] )
      case oSerie:VarGet() == "G"
         oNomSer:cText( aTmp[ 251 ] )
      case oSerie:VarGet() == "H"
         oNomSer:cText( aTmp[ 252 ] )
      case oSerie:VarGet() == "I"
         oNomSer:cText( aTmp[ 253 ] )
      case oSerie:VarGet() == "J"
         oNomSer:cText( aTmp[ 254 ] )
      case oSerie:VarGet() == "K"
         oNomSer:cText( aTmp[ 255 ] )
      case oSerie:VarGet() == "L"
         oNomSer:cText( aTmp[ 256 ] )
      case oSerie:VarGet() == "M"
         oNomSer:cText( aTmp[ 257 ] )
      case oSerie:VarGet() == "N"
         oNomSer:cText( aTmp[ 258 ] )
      case oSerie:VarGet() == "O"
         oNomSer:cText( aTmp[ 259 ] )
      case oSerie:VarGet() == "P"
         oNomSer:cText( aTmp[ 260 ] )
      case oSerie:VarGet() == "Q"
         oNomSer:cText( aTmp[ 261 ] )
      case oSerie:VarGet() == "R"
         oNomSer:cText( aTmp[ 262 ] )
      case oSerie:VarGet() == "S"
         oNomSer:cText( aTmp[ 263 ] )
      case oSerie:VarGet() == "T"
         oNomSer:cText( aTmp[ 264 ] )
      case oSerie:VarGet() == "U"
         oNomSer:cText( aTmp[ 265 ] )
      case oSerie:VarGet() == "V"
         oNomSer:cText( aTmp[ 266 ] )
      case oSerie:VarGet() == "W"
         oNomSer:cText( aTmp[ 267 ] )
      case oSerie:VarGet() == "X"
         oNomSer:cText( aTmp[ 268 ] )
      case oSerie:VarGet() == "Y"
         oNomSer:cText( aTmp[ 269 ] )
      case oSerie:VarGet() == "Z"
         oNomSer:cText( aTmp[ 270 ] )
   end

return ( .T. )

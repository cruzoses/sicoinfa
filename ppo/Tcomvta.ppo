#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tcomvta.prg"
FUNCTION TComVta()

   local oInf
   local aCol  := {}
   local aIdx  := {}

   aAdd( aCol, { "cCodFam", "C", 16, 0, {|| "@!" },     "Fam. artículo", .F., "Familia artículo",    5 } )
   aAdd( aCol, { "CCODALM", "C",  3, 0, {|| "@!" },     "Alm.",          .T., "Código almacén",      3 } )
   aAdd( aCol, { "CCODART", "C", 18, 0, {|| "@!" },     "Código",        .T., "Código artículo",     8 } )
   aAdd( aCol, { "CNOMART", "C",100, 0, {|| "@!" },     "Descripción",   .T., "Descripción",         40} )
   aAdd( aCol, { "NUNDCOM", "N", 19, 6, {|| MasUnd() }, "Compras",       .T., "Compras",             13} )
   aAdd( aCol, { "NUNDVTA", "N", 19, 6, {|| MasUnd() }, "Ventas",        .T., "Ventas",              13} )
   aAdd( aCol, { "NUNDMOV", "N", 19, 6, {|| MasUnd() }, "Mov. alm.",     .T., "Moviemntos almacen",  13} )
   aAdd( aCol, { "NNUMUND", "N", 19, 6, {|| MasUnd() }, "Stock",         .T., "Stock",               13} )
   aAdd( aCol, { "NSTKCMP", "N", 19, 6, {|| MasUnd() }, "Stock comp.",   .F., "Stock comprometido",  13} )
   aAdd( aCol, { "NSTKLIB", "N", 19, 6, {|| MasUnd() }, "Stock libre",   .F., "Stock libre",         13} )

   aAdd( aIdx, { "CNOMART", "CNOMART" } )
   aAdd( aIdx, { "CCODART", "CCODART" } )
   aAdd( aIdx, { "CCODALM", "cCodFam + cCodArt" } )

   oInf  := TInfComVta():New( "Informe resumido de compras, ventas y stocks de artículos por familias", aCol, aIdx, "01046" )

   oInf:AddGroup( {|| oInf:oDbf:cCodFam }, {|| "Família : " + Rtrim( oInf:oDbf:cCodFam ) + "-" + oRetFld( oInf:oDbf:cCodFam, oInf:oDbfFam ) }, {||"Total família..."} )
   oInf:AddGroup( {|| oInf:oDbf:cCodArt }, {|| "Artículo: " + Rtrim( oInf:oDbf:cCodArt ) + "-" + oRetFld( oInf:oDbf:cCodArt, oInf:oDbfArt ) }, {||""} )

   oInf:Resource()
   oInf:Activate()

   oInf:End()

RETURN NIL



_HB_CLASS TInfComVta ; UTILITY FUNCTION TInfComVta(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfComVta" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oAlmacen} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlmacen" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFamilia} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFamilia" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oStock} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oStock" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oEstado} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oEstado" }, .F., .F. ), )
   _HB_MEMBER { oAlbPrvT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbPrvT" }, .F., .F. ), )
   _HB_MEMBER { oAlbPrvL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbPrvL" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvT" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvL" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliT" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliL" }, .F., .F. ), )
   _HB_MEMBER { oFacCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliT" }, .F., .F. ), )
   _HB_MEMBER { oFacCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliL" }, .F., .F. ), )
   _HB_MEMBER { oTikCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTikCliT" }, .F., .F. ), )
   _HB_MEMBER { oTikCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTikCliL" }, .F., .F. ), )
   _HB_MEMBER { oHisMov} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oHisMov" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfComVta_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfComVta_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfComVta_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfComVta_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource(); IIF( .F., s_oClass:ModMethod( "Resource", @TInfComVta_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TInfComVta_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfComVta_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfComVta_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER oDefIniInf( ); IIF( !.F., s_oClass:AddVirtual( "oDefIniInf" ), )

   _HB_MEMBER oDefFinInf( ); IIF( !.F., s_oClass:AddVirtual( "oDefFinInf" ), )

   _HB_MEMBER oDefDivInf( ); IIF( !.F., s_oClass:AddVirtual( "oDefDivInf" ), )

   _HB_MEMBER nTotVta(); IIF( .F., s_oClass:ModMethod( "nTotVta", @TInfComVta_nTotVta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotVta", @TInfComVta_nTotVta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotCom(); IIF( .F., s_oClass:ModMethod( "nTotCom", @TInfComVta_nTotCom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTotCom", @TInfComVta_nTotCom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTotMov(); IIF( .F., s_oClass:ModInline( "nTotMov", {|Self | Self, nTotVMovAlm( ::oDbfArt:Codigo, ::oHisMov:cAlias, ::oDbfAlm:cCodAlm ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nTotMov", {|Self | Self, nTotVMovAlm( ::oDbfArt:Codigo, ::oHisMov:cAlias, ::oDbfAlm:cCodAlm ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   ; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfComVta ;



UTILITY STATIC function TInfComVta_OpenFiles() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

  local oBlock
  local oError
  local lOpen     := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::oAlbPrvT := DbfServer( "ALBPROVT.DBF", ):NewOpen( "ALBPROVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "ALBPROVT.CDX" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

      ::oAlbPrvL := DbfServer( "ALBPROVL.DBF", ):NewOpen( "ALBPROVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "ALBPROVL.CDX" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()
      ::oAlbPrvL:OrdSetFocus( "cRef" )

      ::oFacPrvT := DbfServer( "FACPRVT.DBF", ):NewOpen( "FACPRVT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FACPRVT.CDX" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

      ::oFacPrvL := DbfServer( "FACPRVL.DBF", ):NewOpen( "FACPRVL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FACPRVL.CDX" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()
      ::oFacPrvL:OrdSetFocus( "cRef" )

      ::oAlbCliT := DbfServer( "ALBCLIT.DBF", ):NewOpen( "ALBCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.CDX" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

      ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()
      ::oAlbCliL:OrdSetFocus( "cRef" )

      ::oFacCliT := DbfServer( "FacCLIT.DBF", ):NewOpen( "FacCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliT:AddBag( "FacCLIT.CDX" ) ; ::oFacCliT:AddBag( ) ; ::oFacCliT:AutoIndex()

      ::oFacCliL := DbfServer( "FacCLIL.DBF", ):NewOpen( "FacCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FacCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()
      ::oFacCliL:OrdSetFocus( "cRef" )

      ::oTikCliT := DbfServer( "TikeT.DBF", ):NewOpen( "TikeT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TikeT.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

      ::oTikCliL := DbfServer( "TikeL.DBF", ):NewOpen( "TikeL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TikeL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()
      ::oTikCliL:OrdSetFocus( "cCbaTil" )

      ::oHisMov := DbfServer( "HisMov.DBF", ):NewOpen( "HisMov.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHisMov:AddBag( "HisMov.CDX" ) ; ::oHisMov:AddBag( ) ; ::oHisMov:AutoIndex()
      ::oHisMov:OrdSetFocus( "cRefMov" )

      ::oStock    := TStock():Create()
      if !::oStock:lOpenFiles()
         lOpen    := .F.
      end

   RECOVER USING oError

      lOpen       := .F.

      msgStop( "Imposible abrir todas las bases de datos" )

   end

   ErrorBlock( oBlock )

   if !lOpen
      ::CloseFiles()
   end

RETURN ( lOpen )



UTILITY STATIC function TInfComVta_CloseFiles() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if !Empty( ::oDbfPrvT ) .AND. ::oDbfPrvT:Used()
      ::oDbfPrvT:End()
   end

   if !Empty( ::oAlbPrvL ) .AND. ::oAlbPrvL:Used()
      ::oAlbPrvL:End()
   end

   if !Empty( ::oFacPrvT ) .AND. ::oFacPrvT:Used()
      ::oFacPrvT:End()
   end

   if !Empty( ::oFacPrvL ) .AND. ::oFacPrvL:Used()
      ::oFacPrvL:End()
   end

   if !Empty( ::oAlbCliT ) .AND. ::oAlbCliT:Used()
      ::oAlbCliT:End()
   end

   if !Empty( ::oAlbCliL ) .AND. ::oAlbCliL:Used()
      ::oAlbCliL:End()
   end

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end

   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oTikCliT ) .AND. ::oTikCliT:Used()
      ::oTikCliT:End()
   end

  if !Empty( ::oTikCliL ) .AND. ::oTikCliL:Used()
      ::oTikCliL:End()
   end

  if !Empty( ::oHisMov ) .AND. ::oHisMov:Used()
      ::oHisMov:End()
   end

  if !Empty( ::oStock ) .AND. ::oStock:Used()
      ::oStock:End()
   end

RETURN ( Self )



UTILITY STATIC function TInfComVta_Resource() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

   local cEstado  := "Almacen"

   ::lDefSerInf   := .F.

   if !::StdResource( "INF_GEN03" )
      return .F.
   end





   ::oDefAlmInf( 70, 80, 90, 100 )





   ::lDefArtInf( 110, 120, 130, 140 )





   ::lDefFamInf( 150, 160, 170, 180 )





   ::oDefExcInf( 210 )









   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, { "Nombre", "Código", "Almacen" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,, )





   ::oMtrInf:SetTotal( ::oDbfAlm:Lastrec() )

RETURN ( Self )






UTILITY STATIC function TInfComVta_lGenerate() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

   ::oDlg:Disable()

   ::oDbf:Zap()

   ::oMtrInf:SetTotal( ::oDbfArt:Lastrec() )

   ::oDbfAlm:Seek( ::cAlmOrg )




   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Almacén : " + ::cAlmOrg         + " > " + ::cAlmDes }, {|| "Familia : " + ::cFamOrg       + " > " + ::cFamDes }, {|| "Artículo: " + ::cArtOrg         + " > " + ::cArtDes } }

   ::oDbf:OrdSetFocus( ::oEstado:nAt )

   while ::oDbfAlm:CCODALM >= ::cAlmOrg .AND. ::oDbfAlm:CCODALM <= ::cAlmDes .AND. !::oDbfAlm:Eof()

      if ::oDbfArt:Seek( ::cArtOrg, .T. )

         while ::oDbfArt:Codigo <= ::cArtDes .AND. !::oDbfArt:Eof()





            if ::oDbfArt:NCTLSTOCK == 1            .AND. ::oDbfArt:FAMILIA >= ::cFamOrg      .AND. ::oDbfArt:FAMILIA <= ::cFamDes      .AND. !::oDbfArt:lKitArt                  .AND. !( ::lExcCero .AND. ::oStock:nTotStockAct( ::oDbfArt:Codigo, ::oDbfAlm:cCodAlm, , , , ::oDbfArt:lKitArt, ::oDbfArt:nCtlStock ) == 0 )

               ::oDbf:Append()
               ::oDbf:Blank()

               ::oDbf:cCodAlm := ::oDbfAlm:cCodAlm
               ::oDbf:cCodFam := ::oDbfArt:Familia
               ::oDbf:cCodArt := ::oDbfArt:Codigo
               ::oDbf:nUndCom := ::nTotCom()
               ::oDbf:nUndVta := ::nTotVta()
               ::oDbf:nUndMov := ::nTotMov()
               ::oDbf:cNomArt := ::oDbfArt:Nombre
               ::oDbf:nNumUnd := ::oStock:nTotStockAct( ::oDbfArt:Codigo, ::oDbfAlm:cCodAlm, , , , ::oDbfArt:lKitArt, ::oDbfArt:nCtlStock )
               ::oDbf:nStkCmp := ::oStock:nPdtEntCom( ::oDbfArt:Codigo, ::oDbfAlm:cCodAlm )
               ::oDbf:nStkLib := ::oDbf:nNumUnd - ::oDbf:nStkCmp

               ::oDbf:Save()

            end

         ::oDbfArt:Skip()
         ::oMtrInf:AutoInc( ::oDbfArt:OrdKeyNo() )

         end

      end

      ::oDbfAlm:Skip()

   end

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )



UTILITY STATIC function TInfComVta_nTotVta() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

   local nTotVta  := 0

   nTotVta        += nTotDAlbCli( ::oDbfArt:Codigo, ::oAlbCliL:cAlias, ::oAlbCliT:cAlias, ::oDbfAlm:cCodAlm )
   nTotVta        += nTotDFacCli( ::oDbfArt:Codigo, ::oFacCliL:cAlias, ::oDbfAlm:cCodAlm  )
   nTotVta        += nTotDTikCli( ::oDbfArt:Codigo, ::oTikCliT:cAlias, ::oTikCliL:cAlias, ::oDbfAlm:cCodAlm )

return ( nTotVta )



UTILITY STATIC function TInfComVta_nTotCom() ; local Self AS CLASS TInfComVta := QSelf() AS CLASS TInfComVta

   local nTotCom  := 0

   nTotCom        += nTotDAlbPrv( ::oDbfArt:Codigo, ::oAlbPrvL:cAlias, ::oAlbPrvT:cAlias, ::oDbfAlm:cCodAlm )
   nTotCom        += nTotDFacPrv( ::oDbfArt:Codigo, ::oFacPrvL:cAlias, ::oDbfAlm:cCodAlm )

return ( nTotCom )

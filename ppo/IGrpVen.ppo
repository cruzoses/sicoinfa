#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\IGrpVen.prg"
_HB_CLASS IGrpVen ; UTILITY FUNCTION IGrpVen(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "IGrpVen" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oGrpVen} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oGrpVen" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cVenOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cVenOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cVenDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cVenDes" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lAllVen} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lAllVen" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @IGrpVen_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @IGrpVen_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @IGrpVen_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @IGrpVen_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @IGrpVen_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @IGrpVen_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @IGrpVen_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @IGrpVen_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @IGrpVen_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @IGrpVen_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS IGrpVen ;



UTILITY STATIC function IGrpVen_Create() ; local Self AS CLASS IGrpVen := QSelf() AS CLASS IGrpVen

   ::AddField( "cGrpConta",   "C",  9, 0, {|| "" },           "Cód. Grp.",      .T., "Grupo de contabilidad",   20, .F. )
   ::AddField( "cGrpNom",     "C", 25, 0, {|| "" },           "Grp. ventas",    .T., "Nombre del grupo",        40, .F. )

   ::AddTmpIndex ( "cGrpConta", "cGrpConta" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function IGrpVen_OpenFiles() ; local Self AS CLASS IGrpVen := QSelf() AS CLASS IGrpVen

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oGrpVen := DbfServer( "GRPVENT.DBF", ):NewOpen( "GRPVENT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oGrpVen:AddBag( "GRPVENT.CDX" ) ; ::oGrpVen:AddBag( ) ; ::oGrpVen:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function IGrpVen_CloseFiles() ; local Self AS CLASS IGrpVen := QSelf() AS CLASS IGrpVen

   if !Empty( ::oGrpVen ) .AND. ::oGrpVen:Used()
      ::oGrpVen:End()
   end

   ::oGrpVen  := nil

RETURN ( Self )



UTILITY STATIC function IGrpVen_lResource( cFld) ; local Self AS CLASS IGrpVen := QSelf() AS CLASS IGrpVen

   local cSayVenOrg
   local cSayVenDes
   local oSayVenOrg
   local oSayVenDes
   local oVenOrg
   local oVenDes

   if !::StdResource( "INF_GVEN01" )
      return .F.
   end





   ::cVenOrg   := dbFirst( ::oGrpVen, 1 )
   ::cVenDes   := dbLast(  ::oGrpVen, 1 )
   cSayVenOrg  := dbFirst( ::oGrpVen, 2 )
   cSayVenDes  := dbLast(  ::oGrpVen, 2 )



   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllVen, ::lAllVen:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oVenOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cVenOrg, ::cVenOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllVen )},, .F., .F.,,,,,, nil, "LUPA",, )

      oVenOrg:bValid   := {|| cGrpVenta( oVenOrg, ::oGrpVen:cAlias, oSayVenOrg ) }
      oVenOrg:bHelp    := {|| BrwGrpVenta( oVenOrg, ::oGrpVen:cAlias, oSayVenOrg ) }





   oSayVenOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayVenOrg, cSayVenOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oVenDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cVenDes, ::cVenDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllVen )},, .F., .F.,,,,,, nil, "LUPA",, )

      oVenDes:bValid   := {|| cGrpVenta( oVenDes, ::oGrpVen:cAlias, oSayVenDes ) }
      oVenDes:bHelp    := {|| BrwGrpVenta( oVenDes, ::oGrpVen:cAlias, oSayVenDes ) }




   oSayVenDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayVenDes, cSayVenDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oGrpVen:Lastrec() )

   ::CreateFilter( aItmGrpVta(), ::oGrpVen )

RETURN .T.






UTILITY STATIC function IGrpVen_lGenerate() ; local Self AS CLASS IGrpVen := QSelf() AS CLASS IGrpVen

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Grp. ventas : " + if( ::lAllVen, "Todos", AllTrim( ::cVenOrg ) + " > " + AllTrim( ::cVenDes ) ) } }

   ::oGrpVen:GoTop()
   while !::oGrpVen:Eof()


      if ( ::lAllVen .OR. ( ::oGrpVen:cGrpConta >= ::cVenOrg .AND. ::oGrpVen:cGrpConta <= ::cVenDes ) ) .AND.  ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cGrpConta   := ::oGrpVen:cGrpConta
         ::oDbf:cGrpNom     := ::oGrpVen:cGrpNom

         ::oDbf:Save()

      end

      ::oGrpVen:Skip()

      ::oMtrInf:AutoInc( ::oGrpVen:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oGrpVen:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

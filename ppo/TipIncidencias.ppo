#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\TipIncidencias.prg"
_HB_CLASS TipIncidencia ; UTILITY FUNCTION TipIncidencia(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TipIncidencia" , {TMANT():classh} ) ) ; ;

   _HB_MEMBER New( cPath, oWndParent, oMenuItem); IIF( .F., s_oClass:ModMethod( "New", @TipIncidencia_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TipIncidencia_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TipIncidencia_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TipIncidencia_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TipIncidencia_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TipIncidencia_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TipIncidencia_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TipIncidencia_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TipIncidencia_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TipIncidencia_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER InvSelect(oBrw); IIF( .F., s_oClass:ModInline( "InvSelect", {|Self,oBrw | Self, ( ::oDbf:Load(), ::oDbf:lSelect := !::oDbf:lSelect, ::oDbf:Save(), oBrw:Refresh() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "InvSelect", {|Self,oBrw | Self, ( ::oDbf:Load(), ::oDbf:lSelect := !::oDbf:lSelect, ::oDbf:Save(), oBrw:Refresh() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER lSelect( lSel, oBrw); IIF( .F., s_oClass:ModMethod( "lSelect", @TipIncidencia_lSelect(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lSelect", @TipIncidencia_lSelect(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectAll( lSel, oBrw); IIF( .F., s_oClass:ModMethod( "SelectAll", @TipIncidencia_SelectAll(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectAll", @TipIncidencia_SelectAll(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lValid( oGet, oSay); IIF( .F., s_oClass:ModMethod( "lValid", @TipIncidencia_lValid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValid", @TipIncidencia_lValid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cNombre( cCodArt); IIF( .F., s_oClass:ModMethod( "cNombre", @TipIncidencia_cNombre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "cNombre", @TipIncidencia_cNombre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TipIncidencia ;



UTILITY STATIC function TipIncidencia_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   IIF( cPath == nil, cPath := cPatEmp(), ) ;
   IIF( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   else
      ::nLevel          := nLevelUsr( "01089" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lAutoButtons       := .T.
   ::lCreateShell       := .F.

RETURN ( Self )



UTILITY STATIC function TipIncidencia_OpenFiles(lExclusive) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

RETURN .T.



UTILITY STATIC function TipIncidencia_DefineFiles( cPath, cDriver) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "TipInci.Dbf", "TipInci" ):New( "TipInci.Dbf", "TipInci", ( cDriver ), "Tipos de incidencias", ( cPath ) )

      ::oDbf:AddField( "cCodInc", "C", 3, 0, "@!",,,, "Código", .F., 60, .F., {} )
      ::oDbf:AddField( "cNomInc", "C", 50, 0,,,,, "Descripción", .F., 200, .F., {} )

      ::oDbf:AddIndex( "cCodInc", "TipInci.CDX", "cCodInc",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomInc", "TipInci.CDX", "cNomInc",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TipIncidencia_Resource( nMode) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

    local oDlg
   local oGet

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tipo de incidencia", "TipArt",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodInc, ::oDbf:cCodInc:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomInc, ::oDbf:cNomInc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




   TButton():ReDefine( 9, {||( ChmHelp( "TipoIncidencia" ) )}, oDlg,,, .F.,,,, .F. )

   odlg:AddFastKey ( 112, {|| ChmHelp( "TipoIncidencia" ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TipIncidencia_lSelect( lSel, oBrw) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   ::oDbf:Load()
   ::oDbf:lSelect    := lSel
   ::oDbf:Save()

   if oBrw <> nil
      oBrw:Refresh()
   end

Return ( Self )



UTILITY STATIC function TipIncidencia_SelectAll( lSel, oBrw) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   ::oDbf:GetStatus()

   IIF( lSel == nil, lSel := .F., ) ;

   ::oDbf:GoTop()
   while !( ::oDbf:eof() )
      ::lSelect( lSel )
      ::oDbf:Skip()
   end

   ::oDbf:SetStatus()

   if oBrw <> nil
      oBrw:Refresh()
   end

RETURN ( Self )



UTILITY STATIC function TipIncidencia_lValid( oGet, oSay) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   local cCodArt

   if Empty( oGet:VarGet() )
      return .T.
   end

   cCodArt        := RJustObj( oGet, "0" )

   if ::oDbf:Seek( cCodArt )
      oGet:cText( cCodArt )
      if oSay <> nil
         oSay:cText( ::oDbf:cNomTip )
      end
   else
      msgStop( "Código no encontrado" )
      return .F.
   end

RETURN .T.



UTILITY STATIC function TipIncidencia_cNombre( cCodArt) ; local Self AS CLASS TipIncidencia := QSelf() AS CLASS TipIncidencia

   local cNombre  := ""

   if ::oDbf:Seek( cCodArt )
      cNombre     := ::oDbf:cNomTip
   end

RETURN ( cNombre )

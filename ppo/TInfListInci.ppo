#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TInfListInci.prg"
_HB_CLASS TInfListInci ; UTILITY FUNCTION TInfListInci(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfListInci" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfInci} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfInci" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cInciOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cInciOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cInciDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cInciDes" }, .F., .F. ), )

   _HB_MEMBER create(); IIF( .F., s_oClass:ModMethod( "create", @TInfListInci_create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "create", @TInfListInci_create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfListInci_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfListInci_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfListInci_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfListInci_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfListInci_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfListInci_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfListInci_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfListInci_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfListInci ;



UTILITY STATIC function TInfListInci_create() ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   ::AddField( "cCodInci", "C",  3, 0, {|| "@!" },        "Código ",       .T., "Código",           15, .F. )
   ::AddField( "cNomInci", "C", 50, 0, {|| "@!" },        "Incidencia",    .T., "Incidencia",       50, .F. )

   ::AddTmpIndex( "CCODINCI", "CCODINCI" )

   ::lDefSerInf := .F.
   ::lDefFecInf := .F.
   ::lDefDivInf := .F.

RETURN ( self )



UTILITY STATIC function TInfListInci_OpenFiles() ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oDbfInci := DbfServer( "TIPINCI.DBF", ):NewOpen( "TIPINCI.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfInci:AddBag( "TIPINCI.CDX" ) ; ::oDbfInci:AddBag( ) ; ::oDbfInci:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TInfListInci_CloseFiles() ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   if !Empty( ::oDbfInci ) .AND. ::oDbfInci:Used()
      ::oDbfInci:End()
   end

   ::oDbfInci := nil

RETURN ( Self )



UTILITY STATIC function TInfListInci_lResource( cFld) ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   local cSayInciOrg
   local cSayInciDes
   local oSayInciOrg
   local oSayInciDes
   local oInciOrg
   local oInciDes

   if !::StdResource( "INF_INCI" )
      return .F.
   end

   ::cInciOrg   := dbFirst( ::oDbfInci, 1 )
   ::cInciDes   := dbLast(  ::oDbfInci, 1 )
   cSayInciOrg  := dbFirst( ::oDbfInci, 2 )
   cSayInciDes  := dbLast(  ::oDbfInci, 2 )




   oInciOrg := TGetHlp():ReDefine( ( 1110 ), { | u | If( PCount()==0, ::cInciOrg, ::cInciOrg:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      oInciOrg:bHELP := {|| BrwIncidencia( ::oDbfInci:cAlias, oInciOrg, oSayInciOrg ) }




   oSayInciOrg := TGetHlp():ReDefine( ( 1111 ), { | u | If( PCount()==0, cSayInciOrg, cSayInciOrg:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




   oInciDes := TGetHlp():ReDefine( ( 1120 ), { | u | If( PCount()==0, ::cInciDes, ::cInciDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      oInciDes:bHELP := {|| BrwIncidencia( ::oDbfInci:cAlias, oInciDes, oSayInciDes ) }




   oSayInciDes := TGetHlp():ReDefine( ( 1121 ), { | u | If( PCount()==0, cSayInciDes, cSayInciDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )

   ::oMtrInf:SetTotal( ::oDbfInci:Lastrec() )

   ::CreateFilter( aItmInci(), ::oDbfInci:cAlias )

RETURN .T.






UTILITY STATIC function TInfListInci_lGenerate() ; local Self AS CLASS TInfListInci := QSelf() AS CLASS TInfListInci

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha                : " + Dtoc( Date() ) }, {|| "Tipos de incidencias : " + AllTrim( ::cInciOrg ) + " > " + AllTrim( ::cInciDes ) } }

   ::oDbfInci:GoTop()
   while !::lBreak .AND. !::oDbfInci:Eof()

      if ::oDbfInci:cCodInci >= ::cInciOrg .AND. ::odbfInci:cCodInci <= ::cInciDes .AND. ::EvalFilter()

         ::oDbf:Append()

         ::oDbf:cCodInci := ::oDbfInci:cCodInci
         ::oDbf:cNomInci := ::oDbfInci:cNomInci

         ::oDbf:Save()

      end

      ::oDbfInci:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfInci:Lastrec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

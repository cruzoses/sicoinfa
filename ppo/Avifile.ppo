#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 4 ".\Prg\Avifile.prg"
static oMsg
static oDlgWat
static nPrgWat := 0
static oCur
static nCur    := 1



Function PlayAvi( cFileAvi )

    local oBitMap
    local cBuffer        := Space(200)

    IIF( cFileAvi == nil, cFileAvi := "VRFYDATA.AVI", ) ;

    oDlgWat = TDialog():New(,,,,, "TESTAVI",, .F.,,,,,, .F.,,,,,, .F., )

    oBitMap := TBitmap():ReDefine( 500,,, oDlgWat,,, .F., .F.,,, .F.,,, .F. )











    oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .F.,, ! .T., {|Self|(  mciSendStr( "OPEN AVIVIDEO ALIAS VIDEO STYLE POPUP", @cBuffer,    oDlgWat:hWnd),    mciSendStr( "CLOSE VIDEO", @cBuffer, oDlgWat:hWnd ),    mciSendStr( "OPEN AVIVIDEO!" + Upper( Alltrim( cFileAvi ) ) + " ALIAS VIDEO PARENT "+ Alltrim( str( oBitMap:hWnd ) ), @cBuffer, oDlgWat:hWnd ),    mciSendStr( "PUT VIDEO DESTINATION AT 0 0 170 156", @cBuffer, oDlgWat:hWnd ),    mciSendStr( "WINDOW VIDEO HANDLE " + Alltrim( Str( oBitMap:hWnd ) ), @cBuffer, oDlgWat:hWnd),    mciSendStr( "PLAY VIDEO REPEAT", @cBuffer, oDlgWat:hWnd ),    sysRefresh() )}, oDlgWat:bRClicked,,, )

Return nil



Function EndAvi()

    oDlgWat:end()

   oDlgWat  := nil

Return nil



Function WaitPlease( cMsg, cTitle )

   local oBmp

   IIF( cMsg == nil, cMsg := "Procesando", ) ;
    IIF( cTitle == nil, cTitle := "Espere por favor...", ) ;

   CursorWait()

   oDlgWat = TDialog():New(,,,, cTitle, "WAIT_MOVE",, .F.,,,,,, .F.,,,,,, .F., )

   oBmp := TBitmap():ReDefine( 600, "WEBTOP",, oDlgWat,,, .F., .F.,,, .F.,,, .F. )

   TAnimat():Redefine( oDlgWat, 100, { "BAR_01" }, 1 )

   oMsg := TSay():ReDefine( 110, {|| cMsg}, oDlgWat,,,, .F.,, .F., .F. )

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .T.,, ! .T.,, oDlgWat:bRClicked,,, )

RETURN ( oDlgWat )



FUNCTION InitWait()

   CursorWait()

   oDlgWat = TDialog():New( -10, -10, -10, -10, "",,, .F.,,,,,, .F.,,,,,, .F., )

   oDlgWat:Activate( oDlgWat:bLClicked, oDlgWat:bMoved, oDlgWat:bPainted, .F.,, ! .T.,, oDlgWat:bRClicked,,, )

RETURN NIL



FUNCTION EndWait()

    oDlgWat:end()
   oDlgWat        := nil

   CursorWE()

RETURN NIL



FUNCTION WatMet( oMet, dbfTmp, cTxt )

    IIF( cTxt == nil, cTxt := "Procesando", ) ;

   CursorWait()

   if oMet <> nil .AND. cTxt <> nil
      oMet:cText  := cTxt
   end

   if dbfTmp <> nil
      oMet:nTotal := ( dbfTmp )->( LastRec() )
   end

RETURN NIL



FUNCTION RefMet( oMet )

RETURN ( oMet:set( ++nPrgWat ) )



FUNCTION EndMet( oMet )

   local nMetTot  := oMet:nTotal

   if oMet <> nil
      oMet:cText  := ""
      oMet:Set( nMetTot )
      Eval( oMet:bSetGet, 0 )
   end

   CursorWe()

RETURN NIL



FUNCTION IniWatCur()

   oCur  := Array( 8 )

   oCur[1] := TCursor():New( "PROC_1", )
   oCur[2] := TCursor():New( "PROC_2", )
   oCur[3] := TCursor():New( "PROC_3", )
   oCur[4] := TCursor():New( "PROC_4", )
   oCur[5] := TCursor():New( "PROC_5", )
   oCur[6] := TCursor():New( "PROC_6", )
   oCur[7] := TCursor():New( "PROC_7", )
   oCur[8] := TCursor():New( "PROC_8", )

   WSetCursor( oCur[nCur]:hCursor )
   SysRefresh()

RETURN NIL



FUNCTION RefWatCur()

   nCur++

   if nCur > 8
      nCur := 1
   end

   WSetCursor( oCur[nCur]:hCursor )
   SysRefresh()

RETURN NIL



FUNCTION EndWatCur()

   oCur[1]:End()
   oCur[2]:End()
   oCur[3]:End()
   oCur[4]:End()
   oCur[5]:End()
   oCur[6]:End()
   oCur[7]:End()
   oCur[8]:End()

   CursorWe()
   SysRefresh()

RETURN NIL



Function CreateWaitMeter( cMsg, cTitle, nTotal )

   oDlgWat              := TWaitMeter():New( cMsg, cTitle, nTotal )

Return ( SysRefresh() )



Function RefreshWaitMeter( nPosition )

   oDlgWat:RefreshMeter( nPosition )

Return ( SysRefresh() )



Function EndWaitMeter()

   oDlgWat:End()

Return ( SysRefresh() )



_HB_CLASS TWaitMeter ; UTILITY FUNCTION TWaitMeter(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TWaitMeter" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlgWait} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlgWait" }, .F., .F. ), )

   _HB_MEMBER { oMessage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMessage" }, .F., .F. ), )
   _HB_MEMBER { cMessage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cMessage" }, .F., .F. ), )

   _HB_MEMBER { oProgress} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProgress" }, .F., .F. ), )

   _HB_MEMBER { cTitle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cTitle" }, .F., .F. ), )
   _HB_MEMBER { oBitmap} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBitmap" }, .F., .F. ), )

   _HB_MEMBER { oMeter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMeter" }, .F., .F. ), )
   _HB_MEMBER { nTotal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTotal" }, .F., .F. ), )

   _HB_MEMBER New( cMsg, cTitle, nTotal); IIF( .F., s_oClass:ModMethod( "New", @TWaitMeter_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TWaitMeter_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetMessage(cMessage); IIF( .F., s_oClass:ModInline( "SetMessage", {|Self,cMessage | Self, ( ::oMessage:SetText( cMessage ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetMessage", {|Self,cMessage | Self, ( ::oMessage:SetText( cMessage ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER RefreshMeter(nPosition); IIF( .F., s_oClass:ModInline( "RefreshMeter", {|Self,nPosition | Self, ( ::oProgress:Set( nPosition ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "RefreshMeter", {|Self,nPosition | Self, ( ::oProgress:Set( nPosition ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetTotal(nTotal); IIF( .F., s_oClass:ModInline( "SetTotal", {|Self,nTotal | Self, ( ::oProgress:SetTotal( nTotal ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTotal", {|Self,nTotal | Self, ( ::oProgress:SetTotal( nTotal ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TWaitMeter_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TWaitMeter_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TWaitMeter ;



UTILITY STATIC function TWaitMeter_New( cTitle, cMsg, nTotal) ; local Self AS CLASS TWaitMeter := QSelf() AS CLASS TWaitMeter

   IIF( cMsg == nil, cMsg := "Procesando", ) ;
   IIF( cTitle == nil, cTitle := "Espere por favor...", ) ;
   IIF( nTotal == nil, nTotal := 0, ) ;

   ::cMessage           := cMsg
   ::cTitle             := cTitle
   ::nTotal             := nTotal

   CursorWait()

   ::oDlgWait           := TDialog():New( , , , , ::cTitle, "Wait_Meter", , .F.,,,,,,.F. )

   ::oBitmap            := TBitmap():ReDefine( 600, "PleaseWait", , ::oDlgWait, , , .F., .F., , , .F., , , .F. )

   ::oMessage           := TSay():ReDefine( 110, {|| ::cMessage }, ::oDlgWait, , , , .F. )

   ::oProgress          := TMeter():ReDefine( 120, { | u | If( pCount() == 0, nPrgWat, nPrgWat := u ) }, ::nTotal, ::oDlgWait, .F.,,,.F. )

   ::oDlgWait:Activate( , , , .T., ,.F. )

   SysRefresh()

RETURN ( Self )



UTILITY STATIC function TWaitMeter_End() ; local Self AS CLASS TWaitMeter := QSelf() AS CLASS TWaitMeter

   ::RefreshMeter( 0 )

   ::oBitmap:End()

   ::oDlgWait:End()

   ::oDlgWait           := nil

   CursorWE()

   SysRefresh()

RETURN ( nil )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 240 ".\Prg\Pedcli.prg"
memvar cDbf
memvar cDbfCol
memvar cDbfPag
memvar cCliente
memvar cDbfCli
memvar cDbfObr
memvar cAgente
memvar cDbfAge
memvar cIva
memvar cDbfIva
memvar cDbfUsr
memvar cFPago
memvar cDbfPgo
memvar cTarPreL
memvar cTarPreS
memvar cPromoL
memvar cDbfRut
memvar cDbfTrn
memvar cDbfPro
memvar cDbfTblPro
memvar aTotIva
memvar aTotIvm
memvar cCtaCli
memvar nTotBrt
memvar nTotIva
memvar nTotIvm
memvar nTotReq
memvar nTotImp
memvar nTotDto
memvar nTotDpp
memvar nTotUno
memvar nTotDos
memvar nTotNet
memvar nTotPed
memvar nTotPag
memvar nTotPnt
memvar nTotCos
memvar nTotPes
memvar nTotAge
memvar nTotTrn
memvar nTotRnt
memvar nTotDif
memvar nTotAtp
memvar nPctRnt
memvar aIvaUno
memvar aIvaDos
memvar aIvaTre
memvar aIvmUno
memvar aIvmDos
memvar aIvmTre
memvar nVdv
memvar nVdvDivPed
memvar cPicUndPed
memvar cPouDivPed
memvar cPorDivPed
memvar cPouChgPed
memvar nDouDivPed
memvar nRouDivPed
memvar nTotArt
memvar nTotCaj
memvar nPagina
memvar lEnd
memvar cDbfEnt
memvar cDbfDiv
memvar cPorDivEnt
memvar nTotPage
memvar nTotalDto



static aImpVto       := {}
static aDatVto       := {}
static bEdtRec       := { |aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, cCodPre | EdtRec( aTmp, aGet, dbfPedCliT, oBrw, bWhen, bValid, nMode, cCodPre ) }
static bEdtDet       := { |aTmp, aGet, dbfPedCliL, oBrw, bWhen, bValid, nMode, aTmpPed | EdtDet( aTmp, aGet, dbfPedCliL, oBrw, bWhen, bValid, nMode, aTmpPed ) }
static bEdtRes       := { |aTmp, aGet, dbfPedCliR, oBrw, bWhen, bValid, nMode, aTmpLin | EdtRes( aTmp, aGet, dbfPedCliR, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtDoc       := { |aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin | EdtDoc( aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin ) }
static bEdtPgo       := { |aTmp, aGet, dbfPedCliP, oBrw, bWhen, bValid, nMode, aTmpPed | EdtEnt( aTmp, aGet, dbfPedCliP, oBrw, bWhen, bValid, nMode, aTmpPed ) }
static nNumArt       := 0
static nNumCaj       := 0
static lExternal     := .F.
static aTipPed       := { "Venta", "Alquiler" }









static cOldCodCli    := ""
static cOldCodArt    := ""
static cOldPrpArt    := ""
static cOldUndMed    := ""

static dbfOferta
static lOpenFiles    := .F.
static oWndBrw
static dbfPedCliT
static dbfPedCliL
static dbfPedCliI
static dbfPedCliD
static dbfPedCliP
static dbfPedCliR
static dbfPreCliT
static dbfPreCliL
static dbfPreCliI
static dbfPreCliD
static dbfPedPrvT
static dbfPedPrvL
static dbfAlbCliT
static dbfAlbCliL
static dbfAlbCliP
static dbfAlbPrvT
static dbfAlbPrvL
static dbfClient
static dbfCliInc
static dbfCliBnc
static dbfIva
static dbfTarPreL
static dbfTarPreS
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfAgent
static dbfCliAtp
static dbfArticulo
static dbfCodebar
static dbfFamilia
static dbfFPago
static dbfDiv
static dbfKit
static dbfArtDiv
static dbfRuta
static dbfTblCnv
static dbfAlm
static dbfUsr
static dbfCount
static dbfPrv
static dbfObrasT
static oBrwIva
static dbfArtPrv
static dbfInci
static dbfDelega
static dbfEmp
static dbfFacPrvL
static dbfRctPrvL
static dbfAntCliT
static dbfFacCliT
static dbfFacCliL
static dbfFacCliP
static dbfFacRecL
static dbfTikCliT
static dbfTikCliL
static dbfProLin
static dbfProMat
static dbfHisMov
static dbfSitua
static cOrdAnt
static oBandera
static oTrans
static oNewImp
static dbfTmpLin
static dbfTmpPedLin
static dbfTmpFin
static dbfTmpRes
static dbfTmpInc
static dbfTmpDoc
static dbfTmpPgo
static dbfTVta
static dbfPro
static dbfFlt
static dbfTblPro
static dbfDoc
static dbfAgeCom
static dbfCajT
static oStock
static cTmpLin
static cTmpRes
static cTmpInc
static cTmpDoc
static cTmpPgo
static oGetNet
static oGetTrn
static oGetIvm
static oGetPnt
static oGetIva
static oGetReq
static oGetAge
static oGetRnt
static oGetTotal
static oTotPedLin
static oGetPed
static oGetEnt
static oGetPdt
static oGetPes
static oGetDif
static nVdvDiv
static cPouDiv
static cPorDiv
static cPpvDiv
static cPicEur
static cPicUnd
static nDouDiv
static nRouDiv
static nDpvDiv
static oFont
static oMenu
static oGrpFam
static oFraPub
static oTipArt
static oUndMedicion
static oTipPed
static Cod

static oDlgPedidosWeb
static oBrwPedidosWeb
static oBrwDetallesPedidos

static oComisionLinea
static nComisionLinea      := 0

static cFiltroUsuario      := ""

static oMsgAlarm

static bEdtInc             := { |aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpLin | EdtInc( aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpLin ) }

static aEstadoProduccion   := { "Producido", "En producción", "Pendiente de producción" }







FUNCTION GenPedCli( nDevice, cCaption, cCodDoc, cPrinter, nCopies )

   local oInf
   local oDevice
   local nNumPed

   if ( dbfPedCliT )->( Lastrec() ) == 0
      return nil
   end

   nNumPed              := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed

   IIF( nDevice == nil, nDevice := 1, ) ;
   IIF( cCaption == nil, cCaption := "Imprimiendo pedido", ) ;
   IIF( cCodDoc == nil, cCodDoc := cFormatoDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ), ) ;
   IIF( nCopies == nil, nCopies := if( nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) == 0, Max( Retfld( ( dbfPedCliT )->cCodCli, dbfClient, "CopiasF" ), 1 ), nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) ), ) ;

   if Empty( cCodDoc )
      cCodDoc           := cFirstDoc( "PC", dbfDoc )
   end

   if !lExisteDocumento( cCodDoc, dbfDoc )
      return nil
   end





   if !Empty( oAuditor() )
      if nDevice == 1
         oAuditor():AddEvent( "Impreso pedido a clientes",    nNumPed, "09" )
      else
         oAuditor():AddEvent( "Previsualizado pedido a clientes",  nNumPed, "09" )
      end
   end





   if lVisualDocumento( cCodDoc, dbfDoc )

      PrintReportPedCli( nDevice, nCopies, cPrinter, dbfDoc )

   else

      nTotPedCli( nNumPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, nil, cDivEmp() )
      nPagPedCli( nNumPed, dbfPedCliP, dbfDiv, cDivEmp() )

      ( dbfPedCliL )->( dbSeek( nNumPed ) )
      ( dbfPedCliP )->( dbSeek( nNumPed ) )
      ( dbfClient  )->( dbSeek( ( dbfPedCliT )->CCODCLI ) )
      ( dbfAgent   )->( dbSeek( ( dbfPedCliT )->CCODAGE ) )
      ( dbfFPago   )->( dbSeek( ( dbfPedCliT )->CCODPGO ) )
      ( dbfObrasT  )->( dbSeek( ( dbfPedCliT )->CCODCLI + ( dbfPedCliT )->CCODOBR ) )

      oTrans:oDbf:Seek( ( dbfPedCliT )->cCodTrn )

      private cDbf         := dbfPedCliT
      private cDbfCol      := dbfPedCliL
      private cDbfPag      := dbfPedCliP
      private cCliente     := dbfClient
      private cDbfCli      := dbfClient
      private cDbfObr      := dbfObrasT
      private cAgente      := dbfAgent
      private cDbfAge      := dbfAgent
      private cIva         := dbfIva
      private cDbfIva      := dbfIva
      private cFPago       := dbfFPago
      private cDbfPgo      := dbfFPago
      private cDbfObr      := dbfObrasT
      private cTarPreL     := dbfTarPreL
      private cTarPreS     := dbfTarPreS
      private cPromoL      := dbfPromoL
      private cDbfRut      := dbfRuta
      private cDbfUsr      := dbfUsr
      private cDbfTrn      := oTrans:GetAlias()
      private cDbfPro      := dbfPro
      private cDbfTblPro   := dbfTblPro

      private nTotPage     := nTotLPedCli( dbfPedCliL )
      private nVdv         := nVdvDiv
      private nVdvDivPed   := nVdvDiv
      private cPicUndPed   := cPicUnd
      private cPouDivPed   := cPouDiv
      private cPorDivPed   := cPorDiv
      private cPouChgPed   := cPouDiv( cDivChg(), dbfDiv )
      private nDouDivPed   := nDouDiv
      private nRouDivPed   := nRouDiv

      private nTotArt      := nNumArt
      private nTotCaj      := nNumCaj

      if !Empty( cPrinter )
         oDevice           := TPrinter():New( cCaption, .F., .T., cPrinter )
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .F.,, oDevice, cCaption,,, )
      else
         oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .T.,,, cCaption,,, )
      end

      if !Empty( oInf ) .AND. oInf:lCreated

         oInf:lAutoland    := .F.
         oInf:lFinish      := .F.
         oInf:lNoCancel    := .T.
         oInf:bSkip        := {|| PedCliReportSkipper( dbfPedCliL ) }

         oInf:oDevice:lPrvModal  := .T.

         do case
            case nDevice == 1

               oInf:oDevice:SetCopies( nCopies )

               oInf:bPreview  := {| oDevice | PrintPreview( oDevice ) }

            case nDevice == 3

               oInf:bPreview  := {| oDevice | PrintPdf( oDevice ) }

         end

         SetMargin( cCodDoc, oInf )

         PrintColum( cCodDoc, oInf )

      end

      RptEnd()

      if !Empty( oInf )




         oInf:Activate({||         ( !( dbfPedCliL )->lImpLin )}, {||       ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == nNumPed .AND. !( dbfPedCliL )->( Eof() ) )},,,, {||  ( ePage( oInf, cCodDoc ) )},,,,,,,, )

         if nDevice == 1
            oInf:oDevice:end()
         end

      end

      oInf                 := nil

   end

   lChgImpDoc( dbfPedCliT )

RETURN NIL



Static Function PedCliReportSkipper( dbfPedCliL )

   ( dbfPedCliL )->( dbSkip() )

   nTotPage              += nTotLPedCli( dbfPedCliL )

Return nil



STATIC FUNCTION EPage( oInf, cCodDoc )

    private nPagina        := oInf:nPage
    private lEnd            := oInf:lFinish

   IIF( cCodDoc == nil, cCodDoc := "PC1", ) ;

   PrintItems( cCodDoc, oInf )

RETURN NIL



STATIC FUNCTION OpenFiles( lExt )

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de pedidos de clientes" )
      Return ( .F. )
   end

   IIF( lExt == nil, lExt := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()





      if !lExistTable( cPatEmp() + "PedCliT.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliL.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliR.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliI.Dbf" )  .OR. !lExistTable( cPatEmp() + "PedCliD.Dbf" )
         mkPedCli( cPatEmp() )
      end

      lOpenFiles        := .T.

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVT.DBF" ), ( cCheckArea( "PEDPROVT", @dbfPedPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PEDPROVL", @dbfPedPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIT.DBF" ), ( cCheckArea( "PRECLIT", @dbfPreCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIL.DBF" ), ( cCheckArea( "PRECLIL", @dbfPreCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLII.DBF" ), ( cCheckArea( "PRECLII", @dbfPreCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLID.DBF" ), ( cCheckArea( "PRECLID", @dbfPreCliD ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIT", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIP.DBF" ), ( cCheckArea( "ALBCLIP", @dbfAlbCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @dbfAlbPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliInc.Dbf" ), ( cCheckArea( "CliInc", @dbfCliInc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliInc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgent ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TVTA.DBF" ), ( cCheckArea( "TVTA", @dbfTVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CTIPO" )

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtDiv.Dbf" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtDiv.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TBLCNV.DBF" ), ( cCheckArea( "TBLCNV", @dbfTblCnv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TBLCNV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Cajas.Dbf" ), ( cCheckArea( "CAJAS", @dbfCajT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Cajas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "Almacen.Dbf" ), ( cCheckArea( "ALMACEN", @dbfAlm ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "Almacen.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatPrv() + "PROVEE.DBF" ), ( cCheckArea( "PROVEEDOR", @dbfPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatPrv() + "PROVEE.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "USERS.DBF" ), ( cCheckArea( "USERS", @dbfUsr ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "USERS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIPINCI.DBF" ), ( cCheckArea( "TIPINCI", @dbfInci ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIPINCI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DELEGA.DBF" ), ( cCheckArea( "DELEGA", @dbfDelega ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DELEGA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CNFFLT.DBF" ), ( cCheckArea( "CNFFLT", @dbfFlt ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CNFFLT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "AGECOM.DBF" ), ( cCheckArea( "AGECOM", @dbfAgeCom ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "AGECOM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIT.DBF" ), ( cCheckArea( "FACCLIT", @dbfFacCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacCliP.Dbf" ), ( cCheckArea( "FacCliP", @dbfFacCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacCliP.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.Dbf" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacRecL.DBF" ), ( cCheckArea( "FacRecL", @dbfFacRecL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacRecL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CSTKFAST" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "HISMOV.DBF" ), ( cCheckArea( "HISMOV", @dbfHisMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "HISMOV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRefMov" )

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "SITUA.DBF" ), ( cCheckArea( "SITUA", @dbfSitua ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "SITUA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliBnc.Dbf" ), ( cCheckArea( "CLIBNC", @dbfCliBnc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliBnc.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end



      oUndMedicion      := UniMedicion():Create( cPatGrp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles     := .F.
      end

      oBandera          := TBandera():New()

      oStock            := TStock():Create( cPatGrp() )
      if !oStock:lOpenFiles()
         lOpenFiles     := .F.
      else
      oStock:cPedCliT   := dbfPedCliT
      oStock:cPedCliL   := dbfPedCliL
      oStock:cPedCliR   := dbfPedCliR

      oStock:cAlbCliT   := dbfAlbCliT
      oStock:cAlbCliL   := dbfAlbCliL

      oStock:cAlbPrvT   := dbfAlbPrvT
      oStock:cAlbPrvL   := dbfAlbPrvL

      oStock:cPedPrvL   := dbfPedPrvL
      oStock:cFacPrvL   := dbfFacPrvL
      oStock:cRctPrvL   := dbfRctPrvL

      oStock:cKit       := dbfKit

      oStock:cAntCliT   := dbfAntCliT

      oStock:cFacCliL   := dbfFacCliL
      oStock:cFacCliP   := dbfFacCliP

      oStock:cFacRecL   := dbfFacRecL

      oStock:cTikT      := dbfTikCliT
      oStock:cTikL      := dbfTikCliL

      oStock:cProducL   := dbfProLin
      oStock:cProducM   := dbfProMat

      oStock:cHisMov    := dbfHisMov

      end

      oNewImp           := TNewImp():Create( cPatEmp() )
      if !oNewImp:OpenFiles()
         lOpenFiles     := .F.
      end

      oTrans            := TTrans():Create( cPatCli() )
      if !oTrans:OpenFiles()
         lOpenFiles     := .F.
      end

      oTipArt           := TTipArt():Create( cPatArt() )
      if !oTipArt:OpenFiles()
         lOpenFiles     := .F.
      end

      oGrpFam           := TGrpFam():Create( cPatArt() )
      if !oGrpFam:OpenFiles()
         lOpenFiles     := .F.
      end

      oFraPub           := TFrasesPublicitarias():Create( cPatArt() )
      if !oFraPub:OpenFiles()
         lOpenFiles     := .F.
      end





      oFont                := TFont():New( "Arial", 8, 26, .F., .T. )





      public nTotBrt       := 0
      public nTotPed       := 0
      public nTotDto       := 0
      public nTotDPP       := 0
      public nTotNet       := 0
      public nTotIvm       := 0
      public nTotIva       := 0
      public nTotReq       := 0
      public nTotAge       := 0
      public nTotPnt       := 0
      public nTotUno       := 0
      public nTotDos       := 0
      public nTotTrn       := 0
      public nTotCos       := 0
      public nTotRnt       := 0
      public nTotAtp       := 0
      public nTotPes       := 0
      public nTotDif       := 0
      public nPctRnt       := 0

      public aTotIva       := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }
      public aIvaUno       := aTotIva[ 1 ]
      public aIvaDos       := aTotIva[ 2 ]
      public aIvaTre       := aTotIva[ 3 ]

      public aTotIvm       := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
      public aIvmUno       := aTotIvm[ 1 ]
      public aIvmDos       := aTotIvm[ 2 ]
      public aIvmTre       := aTotIvm[ 3 ]

      public aImpVto       := {}
      public aDatVto       := {}





      if oUser():lFiltroVentas()
         cFiltroUsuario    := "Field->cCodUsr == '" + oUser():cCodigo() + "' .and. Field->cCodCaj == '" + oUser():cCaja() + "'"
      end

      EnableAcceso()

   RECOVER USING oError

      lOpenFiles           := .F.

      EnableAcceso()

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



FUNCTION PedCli( oMenuItem, oWnd, cCodCli, cCodArt, cCodPre, lPedWeb )

   local oImp
   local oPrv
   local oSnd
   local oDel
   local oRpl
   local oPdf
   local oMail
   local oDup
   local oBtnEur
   local nLevel
   local lEuro          := .F.
   local oRotor
   local aEstGen        := {  "No" , "Parcial" , "Si" }

   IIF( oMenuItem == nil, oMenuItem := "01056", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;
   IIF( cCodCli == nil, cCodCli := "", ) ;
   IIF( cCodArt == nil, cCodArt := "", ) ;
   IIF( cCodPre == nil, cCodPre := "", ) ;
   IIF( lPedWeb == nil, lPedWeb := .F., ) ;

   nLevel               := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return .F.
   end

   DisableAcceso()





















   oWndBrw := TShell():New( 0, 0, 22, 80, "Pedidos de clientes",, oWnd,,, .F.,,, ( dbfPedCliT ),,,,, {"Número", "Fecha", "Código", "Nombre", "Obra", "Agente", "Entrada", "Comercio electrónico"}, {||( WinAppRec( oWndBrw:oBrw, bEdtRec, dbfPedCliT, cCodCli, cCodArt, cCodPre ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdtRec, dbfPedCliT, cCodCli, cCodArt, cCodPre ) )}, {||( WinDelRec( oWndBrw:oBrw, dbfPedCliT, {|| QuiPedCli() } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdtRec, dbfPedCliT, cCodCli, cCodArt, cCodPre ) )}, nil, nLevel, "Clipboard_empty_user1_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEdtRec, dbfPedCliT ) )}, .T. )

      oWndBrw:lFechado     := .T.

      oWndBrw:bChgIndex    := {|| if( oUser():lFiltroVentas(), CreateFastFilter( cFiltroUsuario, dbfPedCliT, .F., , cFiltroUsuario ), CreateFastFilter( "", dbfPedCliT, .F. ) ) }

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfPedCliT )->lCloPed }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Zoom16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Estado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| ( dbfPedCliT )->nEstado }
         :nWidth           := 20
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "Trafficlight_on_16" )
      end

     with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfPedCliT )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Lbl16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Incidencia"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nEstadoIncidencia( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "informacion_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Producción"
         :nHeadBmpNo       := 4
         :bStrData         := {|| cEstadoProduccion( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) }
         :bBmpData         := {|| nEstadoProduccion( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) }
         :nWidth           := 20
         :lHide            := .T.
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "Worker2_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Impreso"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfPedCliT )->lImprimido }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Imp16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Comercio electrónico"
         :cSortOrder       := "lInternet"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfPedCliT )->lInternet }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "SndInt16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Listo para entregar"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfPedCliT )->lPdtCrg }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "clipboard_ok_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Generado"
         :bEditValue       := {|| aEstGen[ Max( Min( ( dbfPedCliT )->nGenerado, len( aEstGen ) ), 1 ) ] }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Recibido"
         :bEditValue       := {|| aEstGen[ Max( Min( ( dbfPedCliT )->nRecibido, len( aEstGen ) ), 1 ) ] }
         :nWidth           := 60
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entrega"
         :cSortOrder       := "dFecEnt"
         :bEditValue       := {|| Dtoc( ( dbfPedCliT )->dFecEnt ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipPed[ if( ( dbfPedCliT )->lAlquiler, 2, 1 ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( dbfPedCliT )->cSerPed + "/" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( dbfPedCliT )->cCodDlg }
         :nWidth           := 20
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( dbfPedCliT )->cTurPed, "######" ) }
         :nWidth           := 40
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| Dtoc( ( dbfPedCliT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( dbfPedCliT )->cCodCaj }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Usuario"
         :bEditValue       := {|| ( dbfPedCliT )->cCodUsr }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Situación"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cSituac ) }
         :nWidth           := 80
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cCodCli ) }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| ( dbfPedCliT )->cNomCli }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Agente"
         :cSortOrder       := "cCodAge"
         :bEditValue       := {|| ( dbfPedCliT )->cCodAge }
         :nWidth           := 50
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Ruta"
         :bEditValue       := {|| ( dbfPedCliT )->cCodRut }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Forma pago"
         :bEditValue       := {|| if( !Empty( (dbfPedCliT)->cCodPgo ), (dbfPedCliT)->cCodPgo + " - " + AllTrim( RetFld( (dbfPedCliT)->cCodPgo, dbfFPago, "cDesPago" ) ), "" ) }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( dbfPedCliT )->cCodAlm }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Obra"
         :cSortOrder       := "cCodObr"
         :bEditValue       := {|| ( dbfPedCliT )->cCodObr }
         :nWidth           := 50
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Entregado " + cDivEmp()
         :bEditValue       := {|| nPagPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliP, dbfDiv, if( lEuro, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 100
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( dbfPedCliT )->nTotNet }
         :cEditPicture     := cPorDiv( ( dbfPedCliT )->cDivPed, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( dbfPedCliT )->nTotIva }
         :cEditPicture     := cPorDiv( ( dbfPedCliT )->cDivPed, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "R.E."
         :bEditValue       := {|| ( dbfPedCliT )->nTotReq }
         :cEditPicture     := cPorDiv( ( dbfPedCliT )->cDivPed, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( dbfPedCliT )->nTotPed }
         :cEditPicture     := cPorDiv( ( dbfPedCliT )->cDivPed, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEuro, cDivChg(), ( dbfPedCliT )->cDivPed ), dbfDiv ) }
         :nWidth           := 30
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Pendiente " + cDivEmp()
         :bEditValue       := {|| ( nTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, nil, nil, .F. ) - nPagPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliP, dbfDiv, nil, .F. ) ) }
         :nWidth           := 100
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cEditPicture     := cPorDiv
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Transportista"
         :bEditValue       := {|| if( Empty( ( dbfPedCliT )->cCodTrn ), "", ( dbfPedCliT )->cCodTrn + " - " + AllTrim( RetFld( ( dbfPedCliT )->cCodTrn, oTrans:GetAlias(), "cNomTrn" ) ) ) }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Horas montaje"
         :bEditValue       := {|| ( dbfPedCliT )->nMontaje }
         :nWidth           := 70
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :cEditPicture     := "@E 999.99"
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Su Pedido"
         :bEditValue       := {|| ( dbfPedCliT )->cSuPed }
         :nWidth           := 100
         :lHide            := .T.
      end

      oWndBrw:CreateXFromCode()





   oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()







   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







   oDup := oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",, {|This|This:Toggle()}, 2,, .F. )









      oWndBrw:NewAt( "Dup",,, {||( DupSerie( oWndBrw ) )}, "Series",,,, 2, oDup, .F. )








   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )







   oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







   oImp := oWndBrw:NewAt( "IMP",,, {||( GenPedCli( 1 ), oWndBrw:Refresh() )}, "(I)mprimir", "I",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oImp, 1 )





   oWndBrw:NewAt( "SERIE1",,, {||( PrnSerie(), oWndBrw:Refresh() )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oPrv := oWndBrw:NewAt( "PREV1",,, {||( GenPedCli( 2 ), oWndBrw:Refresh() )}, "(P)revisualizar", "P",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oPrv, 2 )






   oPdf := oWndBrw:NewAt( "DOCLOCK",,, {||( GenPedCli( 3 ) )}, "Pd(f)", "F",, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oPdf, 3 )





   oMail := oWndBrw:NewAt( "Mail",,, {||( GenPedCli( 6 ) )}, "Correo electrónico",,, {|This|This:Toggle()}, 32,, .F. )


      lGenPedCli( oWndBrw:oBrw, oMail, 6 )





   oWndBrw:NewAt( "Money2_",,, {||( WinAppRec( oWndBrw:oBrw, bEdtPgo, dbfPedCliP ) )}, "Entregas a (c)uenta", "C",,, 2,, .F. )

   if oUser():lAdministrador()






      oWndBrw:NewAt( "CHGSTATE",,, {||( ChgSta( oWndBrw:oBrw ) )}, "Cambiar es(t)ado", "T",,, 4,, .F. )

   end






   oWndBrw:NewAt( "Sel",,, {||( SelSend( oWndBrw:oBrw ) )}, "(L)isto entrega", "L",,, 2,, .F. )








   oSnd := oWndBrw:NewAt( "LBL",, "Seleccionar pedidos para ser enviados", {||lSnd( oWndBrw, dbfPedCliT )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfPedCliT, "lSndDoc", .T., .T., .T. ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfPedCliT, "lSndDoc", .F., .T., .T. ) )}, "Ninguno",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfPedCliT, "lSndDoc", .T., .F., .T. ) )}, "Abajo",,,, 4, oSnd, .F. )






   oBtnEur := oWndBrw:NewAt( "BAL_EURO",,, {||( lEuro := !lEuro, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )
   if oUser():lAdministrador()






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmPedCli(), dbfPedCliT ):ChgFields(), oWndBrw:Refresh() )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aColPedCli(), dbfPedCliL ):ChgFields(), oWndBrw:Refresh() )}, "Lineas",,,, 4, oRpl, .F. )

   end






   oWndBrw:NewAt( "SHOPPINGCART",,, {||( TPedidosClientes2PedidosProveedor():New( ( dbfPedCliT )->cSerPed, ( dbfPedCliT )->nNumPed, ( dbfPedCliT )->cSufPed, oStock ):Dialog() )}, "(G)enerar pedido a proveedores", "G",,,,, .F. )





   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "09", ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )}, "I(n)forme documento", "N",,, 4,, .F. )




   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,,,, .F. )




      oWndBrw:NewAt( "USER1_",,, {||( EdtCli( ( dbfPedCliT )->cCodCli ) )}, "Modificar cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "INFO",,, {||( InfCliente( ( dbfPedCliT )->cCodCli ) )}, "Informe de cliente",,,,, oRotor, .F. )




      oWndBrw:NewAt( "Worker",,, {||( EdtObras( ( dbfPedCliT )->cCodCli, ( dbfPedCliT )->cCodObr, dbfObrasT ) )}, "Modificar obra",,,,, oRotor, .F. )




      oWndBrw:NewAt( "NOTEBOOK_USER1_",,, {||( if( !Empty( ( dbfPedCliT )->cNumPre ), ZooPreCli( ( dbfPedCliT )->cNumPre ), MsgStop( "El pedido no proviene de presupuesto" ) ) )}, "Visualizar presupuesto",,,,, oRotor, .F. )





      oWndBrw:NewAt( "DOCUMENT_PLAIN_USER1_",,, {||( if( ( dbfPedCliT )->nEstado <> 3, AlbCli( nil, nil, nil, nil, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ), MsgInfo( "Pedido entregado o cancelado" ) ) )}, "Generar albarán",,,,, oRotor, .T. )






      oWndBrw:NewAt( "DOCUMENT_PLAIN_USER1_",,, {||( Ped2AlbCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )}, "Modificar albarán",,,,, oRotor, .F. )





      oWndBrw:NewAt( "DOCUMENT_USER1_",,, {||( if( ( dbfPedCliT )->nEstado <= 2, FactCli( nil, nil, nil, nil, nil, { nil, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed , nil, nil } ), MsgInfo( "Pedido entregado o cancelado" ) ) )}, "Generar factura",,,,, oRotor, .T. )




      oWndBrw:NewAt( "DOCUMENT_USER1_",,, {||( Ped2FacCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )}, "Modificar factura",,,,, oRotor, .F. )





      oWndBrw:NewAt( "DOCUMENT_MONEY2_",,, {||( FacAntCli( , , ( dbfPedCliT )->cCodCli ) )}, "Generar anticipo",,,,, oRotor, .T. )





      oWndBrw:NewAt( "Note_",,, {||( PedCliNotas() )}, "Generar nota de agenda",,,,, oRotor, .T. )





      oWndBrw:NewAt( "CASHIER_USER1_",,, {||( if( ( dbfPedCliT )->nEstado <=1 .AND. Empty( ( dbfPedCliT )->cNumTik ), FrontTpv( nil, nil, nil, nil, .F., .F., { nil, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, nil } ), MsgStop( "Pedido albaranado, cancelado o convertido a ticket" ) ) )}, "Convertir a ticket",,,,, oRotor, .T. )




   oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )

   if !oUser():lFiltroVentas()
      oWndBrw:oActiveFilter:aTField       := aItmPedCli()
      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt
      oWndBrw:oActiveFilter:cTipFilter    := "09"
   end

   if lPedWeb
      ( dbfPedCliT )->( OrdSetFocus( "lInternet" ) )
      ( dbfPedCliT )->( dbGoTop() )
   end

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

   EnableAcceso()

   if !Empty( cCodCli ) .OR. !Empty( cCodArt ) .OR. !Empty( cCodPre )

      if !Empty( oWndBrw )
         oWndBrw:RecAdd()
      end

      cCodCli  := nil
      cCodArt  := nil
      cCodPre  := nil

   end

Return .T.






FUNCTION PedCliWeb()

   PedCli( "01056", oWnd(), nil, nil, nil, .T. )

Return .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbfPedCliT, oBrw, cCodCli, cCodArt, nMode, cCodPre )

    local oDlg
   local oFld
   local nOrd
   local lWhen
   local oBrwLin
   local oBrwInc
   local oBrwDoc
   local oBrwPgo
   local oSay           := Array( 11 )
   local cSay           := Array( 11 )
   local oSayLabels     := Array(  9 )
   local oGetMasDiv
   local cGetMasDiv     := ""
   local oBmpEmp
   local oBmpDiv
   local oBtnKit
   local cEstPed        := ""
   local oRieCli
   local nRieCli        := 0
   local oSayGetRnt
   local cTipPed
   local oSayDias
   local oSayTxtDias
   local cSerie         := cNewSer( "nPedCli", dbfCount )
   local oBmpGeneral

   lWhen                := if( oUser():lAdministrador(), ( nMode <> 3 ), if( nMode == 2, !aTmp[ 56 ], ( nMode <> 3 ) ) )





   cOldCodCli           := aTmp[ 6 ]

   do case
      case nMode == 1

         if !lCurSesion()
            MsgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( oUser():cCaja() ) .AND. !oUser():lAdministrador()
            msgStop( "Esta caja " + oUser():cCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 4 ]     := cCurSesion()
         aTmp[ 17 ]     := oUser():cAlmacen()
         aTmp[ 18 ]     := oUser():cCaja()
         aTmp[ 46 ]     := cDivEmp()
         aTmp[ 19 ]     := cDefFpg()
         aTmp[ 47 ]     := nChgDiv( aTmp[ 46 ], dbfDiv )
         aTmp[ 3 ]     := RetSufEmp()
         aTmp[ 22 ]     := 1
         aTmp[ 57 ]     := cCurUsr()
         aTmp[ 68 ]     := oUser():cDelegacion()
         aTmp[ 51 ]     := uFieldEmpresa( "lIvaInc" )
         aTmp[ 76 ]     := Padr( "Gastos", 250 )
         aTmp[ 52 ]     := nIva( dbfIva, cDefIva() )

         if !Empty( cCodPre )
            aTmp[ 45 ]  := cCodPre
         end

      case nMode == 4

         if !lCurSesion()
            MsgStop( "No hay sesiones activas, imposible añadir documentos" )
            Return .F.
         end

         if !lCajaOpen( oUser():cCaja() ) .AND. !oUser():lAdministrador()
           msgStop( "Esta caja " + oUser():cCaja() + " esta cerrada." )
            Return .F.
         end

         aTmp[ 5 ]  := GetSysDate()
         aTmp[ 4 ]  := cCurSesion()
         aTmp[ 22 ]  := 1
         aTmp[ 56 ]  := .F.

      case nMode == 2

         if aTmp[ 56 ] .AND. !oUser():lAdministrador()
            MsgStop( "El pedido está cerrado." )
            Return .F.
         end

         if aTmp[ 22 ] == 3 .AND. !aTmp[ 81 ]
            MsgStop( "El pedido ya fue entregado." )
            Return .F.
         end

   end

   if Empty( Rtrim( aTmp[ 1 ] ) )
      aTmp[ 1 ]     := cSerie
   end

   if Empty( aTmp[ 28 ] )
      aTmp[ 28 ]     := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end

   if Empty( aTmp[ 29 ] )
      aTmp[ 29 ]     := Padr( "General", 50 )
   end

   if Empty( aTmp[ 31 ] )
      aTmp[ 31 ]        := Padr( "Pronto pago", 50 )
   end





   cTipPed                 := aTipPed[ if( aTmp[ 73 ], 2, 1 ) ]





   if BeginTrans( aTmp, nMode )
      Return .F.
   end





   if Empty( aTmp[ 85 ] )
      aTmp[ 85 ] := RetFld( aTmp[ 6 ], dbfClient, "Telefono" )
   end

   nRieCli              := oStock:nRiesgo( aTmp[ 6 ] )





   nOrd                 := ( dbfPedCliT )->( ordSetFocus( 1 ) )

   cPouDiv              := cPouDiv( aTmp[ 46 ], dbfDiv )
   cPorDiv              := cPorDiv( aTmp[ 46 ], dbfDiv )
   nDouDiv              := nDouDiv( aTmp[ 46 ], dbfDiv )
   nRouDiv              := nRouDiv( aTmp[ 46 ], dbfDiv )
   cPpvDiv              := cPpvDiv( aTmp[ 46 ], dbfDiv )
   nDpvDiv              := nDpvDiv( aTmp[ 46 ], dbfDiv )
   cPicEur              := cPouDiv( "EUR", dbfDiv )
   cPicUnd              := MasUnd()

   DO CASE
      CASE  aTmp[ 22 ] == 1
         cEstPed        := "Pendiente"
      CASE  aTmp[ 22 ] == 2
         cEstPed        := "Parcial"
      CASE  aTmp[ 22 ] == 3
         cEstPed        := "Entregado"
   end





   cSay[ 2 ]        := RetFld( aTmp[ 16 ], dbfTarPreS )
   cSay[ 3 ]        := RetFld( aTmp[ 6 ] + aTmp[ 15 ], dbfObrasT, "cNomObr" )
   cSay[ 4 ]        := RetFld( aTmp[ 17 ], dbfAlm )
   cSay[ 5 ]        := RetFld( aTmp[ 19 ], dbfFPago )
   cSay[ 6 ]        := RetFld( aTmp[ 14 ], dbfAgent )
   cSay[ 7 ]        := RetFld( aTmp[ 20 ], dbfRuta )
   cSay[ 8 ]        := oTrans:cNombre( aTmp[ 54 ] )
   cSay[ 9 ]        := RetFld( aTmp[ 18 ], dbfCajT )
   cSay[10 ]        := RetFld( aTmp[ 57 ], dbfUsr, "cNbrUse" )
   cSay[11 ]        := RetFld( cCodEmp() + aTmp[ 68 ], dbfDelega, "cNomDlg" )





   InitTarifaCabecera( aTmp[ 28 ] )





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "pedidos de clientes", "PEDCLI",, .F.,,,,,, .F.,,,,,, .F., )



      oFld := TFolder():ReDefine( 200, {"&Pedido",  "Da&tos",   "&Incidencias", "D&ocumentos"}, { "PEDCLI_1","PEDCLI_2","PEDCLI_3","PEDCLI_4" }, oDlg,,,,, .F., )









      oBmpGeneral := TBitmap():ReDefine( 990, "pedidos_clientes_48_alpha",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "folder2_red_alpha_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "information_48_alpha",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )





      oBmpGeneral := TBitmap():ReDefine( 990, "address_book2_alpha_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )







      aGet[ 6 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oFld:aDialogs[1],,, {||    ( LoaCli( aGet, aTmp, nMode, oRieCli ), RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[6], aGet[7] ) )}, nil, "LUPA",, )




      aGet[ 7 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 12 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 8 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 8 ], Rtrim( aTmp[ 9 ] ) + Space( 1 ) + Rtrim( aTmp[ 10 ] ) )}, nil, "Environnment_View_16",, )




      aGet[ 9 ] := TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




        aGet[10] := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTmp[10], aTmp[10]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




        aGet[11] := TGetHlp():ReDefine( 107, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )









      aGet[ 28 ] := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, aTmp[ 28 ], aTmp[ 28 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( ChangeTarifaCabecera( aTmp[ 28 ], dbfTmpLin, oBrwLin ) )},,,,,, .F., {||     ( nMode <> 3 .AND. ( lUsrMaster() .OR. oUser():lCambiarPrecio() ) )},, .F., .T.,,, {||      1}, {||      6},, nil,,, )





      oRieCli := TGetHlp():ReDefine( 133, { | u | If( PCount()==0, nRieCli, nRieCli:= u ) }, oFld:aDialogs[1],, cPorDiv,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[85] := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, aTmp[85], aTmp[85]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen .AND. ( !aTmp[ 13 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )













      aGet[ 16 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTarifa( aGet[16], oSay[ 2 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen .AND. oUser():lAdministrador() )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[16], oSay[ 2 ] ) )}, nil, "LUPA",, )




      oSay[ 2 ] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 15 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cObras( aGet[ 15 ], oSay[ 3 ], aTmp[ 6 ], dbfObrasT ) )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwObras( aGet[ 15 ], oSay[ 3 ], aTmp[ 6 ], dbfObrasT ) )}, nil, "LUPA",, )




      oSay[ 3 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 17 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 17 ], aTmp[ 17 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 17 ], , oSay[ 4 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 17 ], oSay[ 4 ] ) )}, nil, "LUPA",, )






      oSay[ 4 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAlmacen( aTmp[ 17 ], dbfTmpLin, oBrwLin ) )}, nil, "Bot",, )












      aGet[ 19 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( cFPago( aGet[19], , oSay[ 5 ] ) )},,,,,, .F., {||     ( if( IsMuebles(), .T., lWhen ) )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 19 ], oSay[ 5 ] ) )}, nil, "LUPA",, )




      oSay[ 5 ] := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ 92 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 92 ], aTmp[ 92 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ 92 ], aGet[ 93 ], aGet[ 94 ], aGet[ 95 ], aGet[ 96 ], aTmp[ 6 ] ) )}, nil, "LUPA",, )





      aGet[ 93 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 93 ], aTmp[ 93 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lCalcDC( aTmp[ 93 ], aTmp[ 94 ], aTmp[ 95 ], aTmp[ 96 ], aGet[ 95 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[ 94 ] := TGetHlp():ReDefine( 421, { | u | If( PCount()==0, aTmp[ 94 ], aTmp[ 94 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lCalcDC( aTmp[ 93 ], aTmp[ 94 ], aTmp[ 95 ], aTmp[ 96], aGet[ 95 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[ 95 ] := TGetHlp():ReDefine( 422, { | u | If( PCount()==0, aTmp[ 95 ], aTmp[ 95 ]:= u ) }, oFld:aDialogs[1],,, {||    ( lCalcDC( aTmp[ 93 ], aTmp[ 94 ], aTmp[ 95 ], aTmp[ 96 ], aGet[ 95 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[ 96 ] := TGetHlp():ReDefine( 423, { | u | If( PCount()==0, aTmp[ 96 ], aTmp[ 96 ]:= u ) }, oFld:aDialogs[1],, "9999999999", {||    ( lCalcDC( aTmp[ 93 ], aTmp[ 94 ], aTmp[ 95 ], aTmp[ 96 ], aGet[ 95 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )











      aGet[ 14 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAgentes( aGet[ 14 ], dbfAgent, oSay[ 6 ], aGet[ 43 ], dbfAgeCom ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 14 ], oSay[ 6 ] ) )}, nil, "LUPA",, )






      oSay[ 6 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( ExpAgente( aTmp[ 14 ], aTmp[ 43 ], dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, nil, "Bot",, )







      aGet[ 43 ] := TGetHlp():ReDefine( 182, { | u | If( PCount()==0, aTmp[ 43 ], aTmp[ 43 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( !Empty( aTmp[ 14] ) .AND. lWhen )},, .F., .T.,,,,,, nil,,, )




      oGetAge := TGetHlp():ReDefine( 183, { | u | If( PCount()==0, nTotAge, nTotAge:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )












      aGet[ 20 ] := TGetHlp():ReDefine( 185, { | u | If( PCount()==0, aTmp[ 20 ], aTmp[ 20 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cRuta( aGet[ 20 ], dbfRuta, oSay[ 7 ] ) )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[ 20 ], dbfRuta, oSay[ 7 ] ) )}, nil, "LUPA",, )





      oSay[ 7 ] := TGetHlp():ReDefine( 186, { | u | If( PCount()==0, cSay[ 7 ], cSay[ 7 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )













        aGet[ 46 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oFld:aDialogs[1],, "@!", {||    (  cDivOut( aGet[ 46 ], oBmpDiv, aGet[ 47 ], @cPouDiv, @nDouDiv, @cPorDiv, @nRouDiv, @cPpvDiv, @nDpvDiv, oGetMasDiv, dbfDiv, oBandera ) )}, "N/W*",,,,, .F., {||     (  nMode == 1 .AND. ( dbfTmpLin )->( LastRec() ) == 0 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 46 ], oBmpDiv, aGet[ 47 ], dbfDiv, oBandera )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 201, "BAN_EURO",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .F. )

















      oBmpEmp := TBitmap():ReDefine( 500,, "Bmp\ImgPedCli.bmp", oDlg,,, .F., .F.,,, .F.,,, .F. )




      oBrwLin                 := IXBrowse():New( oFld:aDialogs[1] )

      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLin:cAlias          := dbfTmpLin

      oBrwLin:nMarqueeStyle   := 6
      oBrwLin:cName           := "Pedido a cliente.Detalle"

      oBrwLin:CreateFromResource( 210 )

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Oferta"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpLin )->lLinOfe }
         :nWidth              := 50
         :SetCheck( { "Star_Red_16", "Nil16" } )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Re. Recibido"
         :bStrData            := {|| "" }
         :bBmpData            := {|| if( nTotNPedCli( dbfTmpLin ) == 0, 3, nEstadoRecPedCli( dbfPedPrvL, dbfAlbPrvL, dbfTmpLin ) ) }
         :nWidth              := 20
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Green_16" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Pr. Estado producción"
         :bStrData            := {|| "" }
         :bBmpData            := {|| Min( Max( ( dbfTmpLin )->nProduc + 1, 1 ), 3 ) }
         :nWidth              := 20
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Red_16" )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Número"
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :cEditPicture        := "9999"
         :nWidth              := 54
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Código"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :nWidth              := 60
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "C. Barras"
         :bEditValue          := {|| cCodigoBarrasDefecto( ( dbfTmpLin )->cRef, dbfCodeBar ) }
         :nWidth              := 100
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| if( Empty( ( dbfTmpLin )->cRef ), ( dbfTmpLin )->mLngDes, ( dbfTmpLin )->cDetalle ) }
         :nWidth              := 250
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Código proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cCodPrv ) }
         :nWidth              := 50
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Nombre proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cNomPrv ) }
         :nWidth              := 150
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Referencia proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cRefPrv ) }
         :nWidth              := 50
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNPedCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 94
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 30
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Entregado"
         :bEditValue          := {|| nUnidadesRecibidasAlbCli( ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed, ( dbfTmpLin )->cRef, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cRefPrv, ( dbfTmpLin )->cDetalle, dbfAlbCliL ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nImpUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 52
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 99.9"
         :nWidth              := 44
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "P. verde"
         :bEditValue          := {|| nPntUPedCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLPedCli( dbfTmpLin, nDouDiv, nRouDiv, , , aTmp[ 91 ] ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      if nMode <> 3
         oBrwLin:bLDblClick  := {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) }
      end








      aGet[ 29 ] := TGetHlp():ReDefine( 219, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )








      aGet[ 30 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[ 1 ],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )},,,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )




      aGet[ 31 ] := TGetHlp():ReDefine( 229, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









        aGet[ 32 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





        aGet[ 33 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









        aGet[ 34 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )






      aGet[ 35 ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[1],, "@!",, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 36 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaTotal( aTmp ) )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( RecalculaTotal( aTmp ) ) }, .F., .T.,,,,,, nil,,, )





      oBrwIva                        := TXBrowse():New( oFld:aDialogs[ 1 ] )

      oBrwIva:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwIva:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwIva:SetArray( aTotIva, , , .F. )
      oBrwIva:lHscroll               := .F.

      oBrwIva:nMarqueeStyle          := 5
      oBrwIva:lRecordSelector        := .F.

      oBrwIva:CreateFromResource( 490 )

      with object ( oBrwIva:AddCol() )
         :cHeader          := "Base"
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 2 ], cPorDiv ), "" ) }
         :nWidth           := 108
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "%" + cImp()
         :bStrData         := {|| if( !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ), aTotIva[ oBrwIva:nArrayAt, 3 ], "" ) }
         :bEditValue       := {|| aTotIva[ oBrwIva:nArrayAt, 3 ] }
         :nWidth           := 60
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :nFootStrAlign    := 1
         :nEditType        := 1
         :bEditWhen        := {|| !IsNil( aTotIva[ oBrwIva:nArrayAt, 3 ] ) }
         :bOnPostEdit      := {|o,x| EdtIva( o, x, aTotIva[ oBrwIva:nArrayAt, 3 ], dbfTmpLin, dbfIva, oBrwLin ), RecalculaTotal( aTmp ) }
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := cImp()
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil, Trans( aTotIva[ oBrwIva:nArrayAt, 8 ], cPorDiv ), "" ) }
         :nWidth           := 66
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "% R.E."
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil .AND. aTmp[ 42 ], Trans( aTotIva[ oBrwIva:nArrayAt, 4 ], "@E 99.9"), "" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwIva:AddCol() )
         :cHeader          := "R.E."
         :bStrData         := {|| if( aTotIva[ oBrwIva:nArrayAt, 3 ] <> nil .AND. aTmp[ 42 ], Trans( aTotIva[ oBrwIva:nArrayAt, 9 ], cPorDiv ), "" ) }
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end









      aGet[ 76 ] := TGetHlp():ReDefine( 411, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )









      aGet[ 52 ] := TGetHlp():ReDefine( 412, { | u | If( PCount()==0, aTmp[ 52 ], aTmp[ 52 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( dbfIva, aTmp[ 52 ] ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( nTotPedCli( nil, dbfPedCliT, dbfTmpLin, dbfIva, dbfDiv, dbfFPago, aTmp ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 52 ], dbfIva, , .T. ) )}, nil, "LUPA",, )








      aGet[ 53 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 53 ], aTmp[ 53 ]:= u ) }, oFld:aDialogs[1],, cPorDiv, {||    ( nTotPedCli( nil, dbfPedCliT, dbfTmpLin, dbfIva, dbfDiv, dbfFPago, aTmp ), .T. )}, "N/W*",,,,, .F., {||     ( lWhen )}, {|nKey,nFlags,Self| ( nTotPedCli( nil, dbfPedCliT, dbfTmpLin, dbfIva, dbfDiv, dbfFPago, aTmp ) ) }, .F., .F.,,,,,, nil,,, )



      oGetNet := TSay():ReDefine( 401, {|| nTotNet}, oFld:aDialogs[1],,,, .F.,, .F., .F. )



      oGetTrn := TSay():ReDefine( 402, {|| nTotTrn}, oFld:aDialogs[1],,,, .F.,, .F., .F. )



      oGetIvm := TSay():ReDefine( 403, {|| nTotIvm}, oFld:aDialogs[1],,,, .F.,, .F., .F. )





      aGet[ 91 ] := TCheckBox():ReDefine( 409, { | u | If( PCount()==0, aTmp[ 91  ], aTmp[ 91  ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ), oBrwLin:Refresh() )},,,,, .F., {||     ( lWhen )}, .F. )



      oGetPnt := TSay():ReDefine( 404, {|| nTotPnt}, oFld:aDialogs[1],,,, .F.,, .F., .F. )



      oSayGetRnt := TSay():ReDefine( 709,, oFld:aDialogs[1],,,, .F.,, .F., .F. )



      oGetRnt := TGetHlp():ReDefine( 408, { | u | If( PCount()==0, nTotRnt, nTotRnt:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



      oGetIva := TSay():ReDefine( 405, {|| nTotIva}, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )





      aGet[ 42 ] := TCheckBox():ReDefine( 406, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oFld:aDialogs[1],, {||( RecalculaTotal( aTmp ) )},,,,, .F., {||     ( lWhen )}, .F. )



      oGetReq := TSay():ReDefine( 407, {|| nTotReq}, oFld:aDialogs[1],,,, .F.,, .F., .F. )




      oGetTotal := TSay():ReDefine( 470, {|| nTotPed}, oFld:aDialogs[1],,,, .F., oFont, .F., .F. )









      TButton():ReDefine( 515, {||( AppDeta( oBrwLin, bEdtDet, aTmp, .T. ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 500, {||( AppDeta( oBrwLin, bEdtDet, aTmp) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 501, {||( EdtDeta( oBrwLin, bEdtDet, aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( DelDeta( oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwLin, bEdtDet, dbfTmpLin, nil, nil, aTmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )





        TButton():ReDefine( 524, {||( DbSwapUp( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 525, {||( DbSwapDown( dbfTmpLin, oBrwLin ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[1],,, .F., {||     ( lWhen )},,, .F. )




      oBtnKit := TButton():ReDefine( 526, {||( ShowKit( dbfPedCliT, dbfTmpLin, oBtnKit, oBrwLin ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )










      aGet[1] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[1], aTmp[1]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( aTmp[1] >= "A" .AND. aTmp[1] <= "Z"  )}, "N/W*",,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[1] ) )}, {||  ( DwSerie( aGet[ 1] ) )},,,, nil,,, )





        aGet[2] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[2], aTmp[2]:= u ) }, oFld:aDialogs[1],, "999999999",,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )




        aGet[3] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[3], aTmp[3]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 5 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )





      aGet[ 22 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cEstPed, cEstPed:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,, 121, )








      aGet[ 75 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 75 ], aTmp[ 75 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 112, )








      aGet[ 74 ] := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, aTmp[ 74 ], aTmp[ 74 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,, 114, )





      oSayDias := TSay():ReDefine( 117, {||      ( aTmp[ 74 ] - aTmp[ 75 ] )}, oFld:aDialogs[1], "9999",,, .F.,, .F., .F. )



      oSayTxtDias := TSay():ReDefine( 118,, oFld:aDialogs[1],,,, .F.,, .F., .F. )







      aGet[ 57 ] := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[ 57 ], aTmp[ 57 ]:= u ) }, oFld:aDialogs[2],,, {||    ( SetUsuario( aGet[ 57 ], oSay[ 10 ], nil, dbfUsr ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 10 ] := TGetHlp():ReDefine( 116, { | u | If( PCount()==0, cSay[ 10 ], cSay[ 10 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )










      aGet[45] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[45], aTmp[45]:= u ) }, oFld:aDialogs[1],, "@R #/#########/##", {||    (  cPreCli( aTmp, aGet, oBrwLin, nMode ), SetDialog( aGet, oSayDias, oSayTxtDias, oSayGetRnt, oGetRnt ) )}, "N/W*",,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,, {|Self|(  BrwPreCli( aGet[ 45 ], dbfPreCliT, dbfPreCliL, dbfIva, dbfDiv, dbfFPago, aGet[ 51 ] ) )}, nil, "LUPA", 124, )





      aGet[ 71 ] := TComboBox():ReDefine( 218, { | u | If( PCount()==0, aTmp[ 71 ], aTmp[ 71 ]:= u ) }, ( aSituacion( dbfSitua ) ), oFld:aDialogs[1],,,,,,, .F., {||     ( lWhen )},,,,, )






      oTipPed := TComboBox():ReDefine( 217, { | u | If( PCount()==0, cTipPed, cTipPed:= u ) }, aTipPed, oFld:aDialogs[1],,, {|Self|( SetDialog( aGet, oSayDias, oSayTxtDias, oSayGetRnt, oGetRnt ) )},,,, .F., {||     ( ( dbfTmpLin )->( LastRec() ) == 0 )},,,,, )




      aGet[ 51 ] := TCheckBox():ReDefine( 129, { | u | If( PCount()==0, aTmp[ 51 ], aTmp[ 51 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( dbfTmpLin )->( LastRec() ) == 0 )}, .F. )








      aGet[ 68 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 68 ], aTmp[ 68 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oSay[ 11 ] := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[54] := TGetHlp():ReDefine( 235, { | u | If( PCount()==0, aTmp[54], aTmp[54]:= u ) }, oFld:aDialogs[2],,, {||    ( LoadTrans( aTmp, aGet[ 54 ], aGet[ 55 ], oSay[ 8 ] ) )},,,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( oTrans:Buscar( aGet[54] ), .T. )}, nil, "LUPA",, )




      oSay[ 8 ] := TGetHlp():ReDefine( 236, { | u | If( PCount()==0, cSay[ 8 ], cSay[ 8 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 55 ] := TGetHlp():ReDefine( 237, { | u | If( PCount()==0, aTmp[ 55 ], aTmp[ 55 ]:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[ 44 ] := TGetHlp():ReDefine( 128, { | u | If( PCount()==0, aTmp[ 44 ], aTmp[ 44 ]:= u ) }, oFld:aDialogs[2],, "999",,,,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )












      aGet[ 18 ] := TGetHlp():ReDefine( 165, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oFld:aDialogs[2],,, {||    cCajas( aGet[ 18 ], dbfCajT, oSay[ 9 ] )}, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 18 ], oSay[ 9 ] ) )}, nil, "LUPA",, )





      oSay[ 9 ] := TGetHlp():ReDefine( 166, { | u | If( PCount()==0, cSay[ 9 ], cSay[ 9 ]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 61 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[60] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[60], aTmp[60]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[23] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[23], aTmp[23]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      aGet[21] := TGetHlp():ReDefine( 127, { | u | If( PCount()==0, aTmp[21], aTmp[21]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .T.,,,,,, nil,,, )




      aGet[49] := TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[49], aTmp[49]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( lWhen )}, .F. )









        aGet[24] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[24], aTmp[24]:= u ) }, oFld:aDialogs[2],,,, "N/W*",,,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )





      aGet[26] := TMultiGet():ReDefine( 240, { | u | If( PCount()==0, aTmp[26], aTmp[26]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||     ( lWhen )}, .F.,, )





      aGet[25] := TMultiGet():ReDefine( 250, { | u | If( PCount()==0, aTmp[25], aTmp[25]:= u ) }, oFld:aDialogs[2],, "N/W*",,,,, .F., {||     ( lWhen )}, .F.,, )




      oGetMasDiv := TSay():ReDefine( 480, {|| cGetMasDiv}, oFld:aDialogs[1],,,, .F., oFont, .F., .F. )










      TButton():ReDefine( 500, {||( WinAppRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 510, {||( WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 520, {||( if( ( dbfTmpPgo )->lCloPgo .AND. !oUser():lAdministrador(), MsgStop( "Solo pueden eliminar las entregas cerradas los administradores." ), ( WinDelRec( oBrwPgo, dbfTmpPgo ), RecalculaTotal( aTmp ) ) ) )}, oFld:aDialogs[2],,, .F., {||     ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 600, {||( PrnEntregas( .F., dbfTmpPgo ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 610, {||( PrnEntregas( .T., dbfTmpPgo ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )








      aGet[ 65 ] := TCheckBox():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 65 ], aTmp[ 65 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() )}, .F. )




      aGet[ 66 ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ 66 ], aTmp[ 66 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() )},, .F., .F.,,,,,, nil,,, )




      aGet[ 67 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 67 ], aTmp[ 67 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() )},, .F., .F.,,,,,, nil,,, )









      aGet[ 81 ] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[2],, {||( lChangeCancel( aGet, aTmp, dbfTmpLin ) )},,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() .AND. aTmp[ 22 ] <> 2 )}, .F. )




      aGet[ 82 ] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() .AND. aTmp[ 81 ] )},, .F., .F.,,,,,, nil,,, )




      aGet[ 83 ] := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() .AND. aTmp[ 81 ] )},, .F., .F.,,,,,, nil,,, )






      oBrwPgo                 := IXBrowse():New( oFld:aDialogs[2] )

      oBrwPgo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPgo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPgo:cAlias          := dbfTmpPgo
      oBrwPgo:cName           := "Pedido de cliente.Pago"

      oBrwPgo:nMarqueeStyle   := 6
      oBrwPgo:lHScroll        := .F.

      oBrwPgo:CreateFromResource( 530 )

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Sesión cerrada"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfTmpPgo )->lCloPgo }
         :nWidth              := 20
         :SetCheck( { "Cnt16", "Nil16" } )
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( ( dbfTmpPgo )->dEntrega ) }
         :nWidth              := 80
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Sesión"
         :bEditValue          := {|| ( dbfTmpPgo )->cTurRec }
         :nWidth              := 60
         :lHide               := .T.
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Caja"
         :bEditValue          := {|| ( dbfTmpPgo )->cCodCaj }
         :nWidth              := 50
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Agente"
         :bEditValue          := {|| ( dbfTmpPgo )->cCodAge }
         :nWidth              := 60
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Concepto"
         :bEditValue          := {|| ( dbfTmpPgo )->cDescrip }
         :nWidth              := 176
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Importe"
         :bEditValue          := {|| nEntPedCli( dbfTmpPgo, dbfDiv, cDivEmp(), .T. ) }
         :nWidth              := 90
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwPgo:AddCol() )
         :cHeader             := "Forma pago"
         :bEditValue          := {|| ( dbfTmpPgo )->cCodPgo }
         :nWidth              := 120
         :lHide               := .T.
      end

      if nMode == 2
         oBrwPgo:bLDblClick   := {|| WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) }
      end








      oGetPed := TSay():ReDefine( 540, {|| nTotPed}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



      oGetEnt := TSay():ReDefine( 550, {|| 0}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



      oGetPdt := TSay():ReDefine( 560, {|| 0}, oFld:aDialogs[2],,,, .F.,, .F., .F. )





      oGetPes := TGetHlp():ReDefine( 570, { | u | If( PCount()==0, nTotPes, nTotPes:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oGetDif := TGetHlp():ReDefine( 580, { | u | If( PCount()==0, nTotDif, nTotDif:= u ) }, oFld:aDialogs[2],, ( MasUnd() ),,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      oBrwInc                 := IXBrowse():New( oFld:aDialogs[ 3 ] )

      oBrwInc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwInc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwInc:cAlias          := dbfTmpInc

      oBrwInc:nMarqueeStyle   := 6
      oBrwInc:cName           := "Pedido de cliente.Incidencia"

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Resuelta"
            :bStrData         := {|| "" }
            :bEditValue       := {|| ( dbfTmpInc )->lListo }
            :nWidth           := 70
            :SetCheck( { "Sel16", "Cnt16" } )
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Código"
            :bEditValue       := {|| ( dbfTmpInc )->cCodTip }
            :nWidth           := 80
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Incidencia"
            :bEditValue       := {|| cNomInci( ( dbfTmpInc )->cCodTip, dbfInci ) }
            :nWidth           := 200
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpInc )->dFecInc ) }
            :nWidth           := 90
         end

         with object ( oBrwInc:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpInc )->mDesInc }
            :nWidth           := 470
         end

         if nMode <> 3
            oBrwInc:bLDblClick   := {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) }
         end

         oBrwInc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( WinDelRec( oBrwInc, dbfTmpInc ) )}, oFld:aDialogs[ 3 ],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) )}, oFld:aDialogs[ 3 ],,, .F.,,,, .F. )



      oBrwDoc                 := TXBrowse():New( oFld:aDialogs[ 4 ] )

      oBrwDoc:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDoc:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDoc:cAlias          := dbfTmpDoc

      oBrwDoc:nMarqueeStyle   := 6
      oBrwDoc:nRowHeight      := 40
      oBrwDoc:nDataLines      := 2

         with object ( oBrwDoc:AddCol() )
            :cHeader          := "Documento"
            :bEditValue       := {|| Rtrim( ( dbfTmpDoc )->cNombre ) + Chr(13)+Chr(10) + Space( 5 ) + Rtrim( ( dbfTmpDoc )->cRuta ) }
            :nWidth           := 850
         end

         if nMode <> 3
            oBrwDoc:bLDblClick   := {|| ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) }
         end

         oBrwDoc:CreateFromResource( 210 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )





        TButton():ReDefine( 502, {||( WinDelRec( oBrwDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F., {||     ( lWhen )},,, .F. )




        TButton():ReDefine( 503, {||( WinZooRec( oBrwDoc, bEdtDoc, dbfTmpDoc ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )




      TButton():ReDefine( 504, {||( ShellExecute( oDlg:hWnd, "open", Rtrim( ( dbfTmpDoc )->cRuta ) ) )}, oFld:aDialogs[ 4 ],,, .F.,,,, .F. )









      TButton():ReDefine( 3, {||( RecPedCli( aTmp ), oBrwLin:Refresh( .T. ), RecalculaTotal( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      TButton():ReDefine( 4, {||( if( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ), GenPedCli( 1 ), ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( if( ExitNoSave( nMode, dbfTmpLin ), oDlg:end(), ) )}, oDlg,,, .F.,,,, .T. )

      oSayLabels[ 1 ] := TGroup():ReDefine( 700,, oFld:aDialogs[ 1 ],,,, .T. )
      oSayLabels[ 2 ] := TSay():ReDefine( 703,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 3 ] := TSay():ReDefine( 704,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 4 ] := TSay():ReDefine( 705,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 5 ] := TSay():ReDefine( 706,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 6 ] := TSay():ReDefine( 708,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 7 ] := TSay():ReDefine( 710,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 8 ] := TSay():ReDefine( 711,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )
      oSayLabels[ 9 ] := TSay():ReDefine( 712,, oFld:aDialogs[ 1 ],,,, .F.,, .F., .F. )

   if nMode <> 3

      oFld:aDialogs[1]:AddFastKey( 113, {|| AppDeta( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| EdtDeta( oBrwLin, bEdtDet, aTmp ) } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| DelDeta( oBrwLin ), RecalculaTotal( aTmp ) } )

      oFld:aDialogs[2]:AddFastKey( 113, {|| WinAppRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) } )
      oFld:aDialogs[2]:AddFastKey( 114, {|| WinEdtRec( oBrwPgo, bEdtPgo, dbfTmpPgo, nil, nil, aTmp ), RecalculaTotal( aTmp ) } )
      oFld:aDialogs[2]:AddFastKey( 115, {|| if( ( dbfTmpPgo )->lCloPgo .AND. !oUser():lAdministrador(), MsgStop( "Solo pueden eliminar las entregas cerradas los administradores." ), ( WinDelRec( oBrwPgo, dbfTmpPgo ), RecalculaTotal( aTmp ) ) ) } )

      oFld:aDialogs[3]:AddFastKey( 113, {|| WinAppRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 114, {|| WinEdtRec( oBrwInc, bEdtInc, dbfTmpInc, nil, nil, aTmp ) } )
      oFld:aDialogs[3]:AddFastKey( 115, {|| WinDelRec( oBrwInc, dbfTmpInc ) } )

      oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwDoc, bEdtDoc, dbfTmpDoc, nil, nil, aTmp ) } )
      oFld:aDialogs[4]:AddFastKey( 115, {|| WinDelRec( oBrwDoc, dbfTmpDoc ) } )

      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ) } )
      oDlg:AddFastKey( 117, {|| if( EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg ), GenPedCli( 1 ), ) } )
      oDlg:AddFastKey( 118, {|| ExcelImport( aTmp, dbfTmpLin, dbfArticulo, dbfArtDiv, dbfFamilia, dbfDiv, oBrwLin, .T. ) } )

      oDlg:AddFastKey( 65,    {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )

   end

   oDlg:AddFastKey ( 112, {|| ChmHelp( "Pedido" ) } )

   do case
      case nMode == 1 .AND. lRecogerUsuario() .AND. Empty( cCodArt )
         oDlg:bStart := {|| if( lGetUsuario( aGet[ 57 ], dbfUsr ), , oDlg:End() ) }
      case nMode == 1 .AND. lRecogerUsuario() .AND. !Empty( cCodArt )
         oDlg:bStart := {|| if( lGetUsuario( aGet[ 57 ], dbfUsr ), AppDeta( oBrwLin, bEdtDet, aTmp, nil, cCodArt ), oDlg:End() ) }
      case nMode == 1 .AND. !lRecogerUsuario() .AND. !Empty( cCodArt )
         oDlg:bStart := {|| AppDeta( oBrwLin, bEdtDet, aTmp, nil, cCodArt ) }
      otherwise
         oDlg:bStart := {|| ShowKit( dbfPedCliT, dbfTmpLin, oBtnKit, oBrwLin, .F., dbfTmpInc, cCodCli, dbfClient, oRieCli, oGetRnt, aGet, oSayGetRnt ) }
   end









    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|(  RecalculaTotal( aTmp ) )}, .T.,,, {|Self|(  EdtRecMenu( aTmp, oDlg ), SetDialog( aGet, oSayDias, oSayTxtDias, oSayGetRnt, oGetRnt ), oBrwLin:Load() , oBrwInc:Load() , oBrwPgo:Load() , if( !Empty( cCodPre ), aGet[ 45 ]:lValid(), ) )}, oDlg:bRClicked,,, )

   oMenu:end()

   oBmpEmp:end()
   oBmpDiv:end()





   if oDlg:nResult <> 1

      if !Empty( aTmp[ 45 ] ) .AND. nMode == 1

         if ( dbfPreCliT )->( dbSeek( aTmp[ 45 ] ) )

            if dbLock( dbfPreCliT )
               ( dbfPreCliT )->lEstado := .F.
               ( dbfPreCliT )->( dbUnLock() )
            end

         end

      end

   end

   ( dbfPedCliT )->( ordSetFocus( nOrd ) )

   oBmpGeneral:End()





   lPedidosWeb( dbfPedCliT )





   oBrwLin:CloseData()
   oBrwInc:CloseData()
   oBrwPgo:CloseData()





   KillTrans()

RETURN ( oDlg:nResult == 1 )



Static Function EdtEnt( aTmp, aGet, dbfTmpPgo, oBrw, bWhen, bValid, nMode, aTmpPed )

   local oDlg
   local oFld
   local oBmp
   local oFpago
   local cFpago
   local oBmpDiv
   local oGetCli
   local cGetCli
   local oGetAge
   local cGetAge
   local oGetCaj
   local cGetCaj
   local cPorDiv
   local oBmpBancos

   IIF( aTmpPed == nil, aTmpPed := dbScatter( dbfPedCliT ), ) ;

   do case
      case nMode == 1

         aTmp[ ( dbfTmpPgo )->( FieldPos( "cTurRec" ) ) ]      := cCurSesion()
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ]      := oUser():cCaja()

         aTmp[ ( dbfTmpPgo )->( FieldPos( "cSerPed" ) ) ]      := aTmpPed[ 1 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "nNumPed" ) ) ]      := aTmpPed[ 2 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cSufPed" ) ) ]      := aTmpPed[ 3 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ]      := aTmpPed[ 6 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ]      := aTmpPed[ 14 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ]      := aTmpPed[ 46 ]
         aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ]      := aTmpPed[ 19 ]

         if dbSeekInOrd( aTmpPed[ 19 ], "cCodPago", dbfFPago ) .AND. ( dbfFPago )->lUtlBnc

            aTmp[ ( dbfTmpPgo )->( FieldPos( "cBncEmp" ) ) ]   := ( dbfFPago )->cBanco
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cEntEmp" ) ) ]   := ( dbfFPago )->cEntBnc
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cSucEmp" ) ) ]   := ( dbfFPago )->cSucBnc
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cDigEmp" ) ) ]   := ( dbfFPago )->cDigBnc
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cCtaEmp" ) ) ]   := ( dbfFPago )->cCtaBnc

            aTmp[ ( dbfTmpPgo )->( FieldPos( "cBncCli" ) ) ]   := aTmpPed[ 92  ]
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cEntCli" ) ) ]   := aTmpPed[ 93 ]
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cSucCli" ) ) ]   := aTmpPed[ 94 ]
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cDigCli" ) ) ]   := aTmpPed[ 95 ]
            aTmp[ ( dbfTmpPgo )->( FieldPos( "cCtaCli" ) ) ]   := aTmpPed[ 96 ]

         end

     case nMode == 2

         if aTmp[ ( dbfTmpPgo )->( FieldPos( "lCloPgo" ) ) ] .AND. !oUser():lAdministrador()
            msgStop( "Solo pueden modificar las entregas cerradas los administradores." )
            return .F.
         end

   end

   cGetCli           := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ], dbfClient, "Titulo" )
   cGetAge           := cNbrAgent( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ], dbfAgent )
   cGetCaj           := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ], dbfCajT, "cNomCaj" )
   cPorDiv           := cPorDiv(aTmp[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ], dbfDiv )
   cFPago            := RetFld( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ], dbfFPago )



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "Entregas a cuenta", "Recibos",, .F.,,,,,, .F.,,,,,, .F., )







      oFld := TFolder():ReDefine( 500, {"&General", "Bancos"}, { "Entregas_1","Recibos_4" }, oDlg,,,,, .F., )





      oBmp := TBitmap():ReDefine( 500, "Money_Alpha_48",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .T. )








      aGet[ ( dbfTmpPgo )->( FieldPos( "nImporte" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "nImporte" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "nImporte" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],, ( cPorDiv ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )











      aGet[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( cDivOut( aGet[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ], oBmpDiv, aGet[ ( dbfTmpPgo )->( FieldPos( "nVdvPgo" ) ) ], nil, nil, @cPorDiv, nil, nil, nil, nil, dbfDiv, oBandera ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ ( dbfTmpPgo )->( FieldPos( "cDivPgo" ) ) ], oBmpDiv, aGet[ ( dbfTmpPgo )->( FieldPos( "nVdvPgo" ) ) ], dbfDiv, oBandera )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 151, "BAN_EURO",, oFld:aDialogs[ 1 ],,, .F., .F.,,, .F.,,, .F. )










      aGet[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],, "@!", {||    ( cFPago( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ], dbfFPago, oFpago ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodPgo" ) ) ], oFpago ) )}, nil, "LUPA",, )




      oFpago := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, cFpago, cFpago:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ ( dbfTmpPgo )->( FieldPos( "dEntrega" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "dEntrega" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "dEntrega" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ ( dbfTmpPgo )->( FieldPos( "dEntrega" ) ) ]:cText( Calendario( aTmp[ ( dbfTmpPgo )->( FieldPos( "dEntrega" ) ) ] ) )}, nil, "LUPA",, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "cTurRec" ) ) ] := TGetHlp():ReDefine( 335, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cTurRec" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cTurRec" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],, "999999",,,,,,, .F., {||     ( nMode <> 3 .AND. lUsrMaster() )},, .F., .F.,,,,,, nil,,, )










      aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    ( cClient( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ], dbfClient, oGetCli ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ], oGetCli ) )}, nil, "LUPA",, )




      oGetCli := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cGetCli, cGetCli:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    ( cAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ], dbfAgent, oGetAge ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodAge" ) ) ], oGetAge ) )}, nil, "LUPA",, )




      oGetAge := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cGetAge, cGetAge:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ ( dbfTmpPgo )->( FieldPos( "cDescrip" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cDescrip" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cDescrip" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ ( dbfTmpPgo )->( FieldPos( "cPgdoPor" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cPgdoPor" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cPgdoPor" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










      aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ]:= u ) }, oFld:aDialogs[ 1 ],,, {||    cCajas( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ], dbfCajT, oGetCaj )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ ( dbfTmpPgo )->( FieldPos( "cCodCaj" ) ) ], oGetCaj ) )}, nil, "LUPA",, )




      oGetCaj := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, cGetCaj, cGetCaj:= u ) }, oFld:aDialogs[ 1 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      oBmpBancos := TBitmap():ReDefine( 500, "office_building_48_alpha",, oFld:aDialogs[ 2 ],,, .F., .F.,,, .F.,,, .T. )






      aGet[ ( dbfTmpPgo )->( FieldPos( "CBNCEMP" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CBNCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CBNCEMP" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwBncEmp( aGet[ ( dbfTmpPgo )->( FieldPos( "CBNCEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ] ) )}, nil, "LUPA",, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTAEMP" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGEMP" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ( dbfTmpPgo )->( FieldPos( "CBNCCLI" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CBNCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CBNCCLI" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwBncCli( aGet[ ( dbfTmpPgo )->( FieldPos( "CBNCCLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCODCLI" ) ) ] ) )}, nil, "LUPA",, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ]:= u ) }, oFld:aDialogs[2],,, {||    ( lCalcDC( aTmp[ ( dbfTmpPgo )->( FieldPos( "CENTCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CSUCCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ], aTmp[ ( dbfTmpPgo )->( FieldPos( "CCTACLI" ) ) ], aGet[ ( dbfTmpPgo )->( FieldPos( "CDIGCLI" ) ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      TButton():ReDefine( 1, {||( ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart    := {|| aGet[ ( dbfTmpPgo )->( FieldPos( "nImporte" ) ) ]:SetFocus() }

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo ) } )
   end


   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( CreateMenuEntrega( aTmp, oDlg ) )}, oDlg:bRClicked,,, )

   if !Empty( oMenu )
      oMenu:End()
   end

   if !Empty( oBmpDiv )
      oBmpDiv:End()
   end

   if !Empty( oBmp )
      oBmp:End()
   end

   if !Empty( oBmpBancos )
      oBmpBancos:End()
   end

RETURN ( oDlg:nResult == 1 )



Static Function CreateMenuEntrega( aTmp, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F. )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F. )

         MenuBegin( .F.,,, .F., .F. )




            MenuAddItem( "&2. Modificar cliente", "Modifica la ficha del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ] ), EdtCli( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ] ), MsgStop( "Código de cliente vacío" ) ) )},, "User1_16",,,,, .F.,,, .F. )





            MenuAddItem( "&3. Informe de cliente", "Informe de cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ] ), InfCliente( aTmp[ ( dbfTmpPgo )->( FieldPos( "cCodCli" ) ) ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

RETURN ( oMenu )



Static Function ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpPgo )

   if nMode == 1
      aTmp[ ( dbfTmpPgo )->( FieldPos( "nNumRec" ) ) ]   := ( dbfTmpPgo )->( RecNo() ) + 1
   end

   WinGather( aTmp, aGet, dbfTmpPgo, oBrw, nMode )

   oDlg:End( 1 )

Return .T.



Static Function EdtRecMenu( aTmp, oDlg )

   oMenu := MenuBegin( .F.,,, .F., .F. )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F. )

         MenuBegin( .F.,,, .F., .F. )

            if !lExternal




            MenuAddItem( "&1. Visualizar presupuesto", "Visualiza el presupuesto del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 45 ] ), ZooPreCli( aTmp[ 45 ] ), MsgStop( "El pedido no proviene de presupuesto" ) ) )},, "Notebook_User1_16",,,,, .F.,,, .F. )

            MenuAddItem()





            MenuAddItem( "&2. Generar anticipo", "Genera anticipo de cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), CreateAntCli( aTmp[ 6 ] ), msgStop("Debe seleccionar un cliente para hacer una factura de anticipo" ) ) )},, "Document_Money2_16",,,,, .F.,,, .F. )
            MenuAddItem()




            MenuAddItem( "&3. Modificar cliente", "Modificar la ficha del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), EdtCli( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "User1_16",,,,, .F.,,, .F. )





            MenuAddItem( "&4. Informe de cliente", "Abrir el informe del cliente", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 6 ] ), InfCliente( aTmp[ 6 ] ), MsgStop( "Código de cliente vacío" ) ) )},, "Info16",,,,, .F.,,, .F. )




            MenuAddItem( "&5. Modificar obra", "Modifica la obra del documento", .F.,, {|oMenuItem|( if( !Empty( aTmp[ 15 ] ), EdtObras( aTmp[ 6 ], aTmp[ 15 ], dbfObrasT ), MsgStop( "Código de obra vacío" ) ) )},, "Worker16",,,,, .F.,,, .F. )
            MenuAddItem()

            end





            MenuAddItem( "&6. Informe del documento", "Informe del documento", .F.,, {|oMenuItem|( TTrazaDocumento():Activate( "09", aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] ) )},, "Info16",,,,, .F.,,, .F. )
         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

Return ( oMenu )







STATIC FUNCTION EdtDet( aTmp, aGet, dbfPedCliL, oBrw, lTotLin, cCodArtEnt, nMode, aTmpPed )

   local oDlg
   local oFld
   local oBtn
   local oBrwResCli
   local oBrwAlbCli
   local oBrwFacCli
   local oBrwAlbPrv
    local oGet2
   local cGet2
   local oGet3
   local cGet3
   local oTot           := Array( 6 )
   local oTotal
    local nTotal
   local oSayPr1
   local oSayPr2
   local cSayPr1        := ""
   local cSayPr2        := ""
   local oSayVp1
   local oSayVp2
   local cSayVp1        := ""
   local cSayVp2        := ""
   local oSayAlm
   local cSayAlm        := ""
   local nOrdAnt
   local nOrdPedPrv
   local nOrdAlbPrv
   local nTotRes        := 0
   local cNumPed        := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   local oSayLote
   local oStkAct
   local nStkAct        := 0
   local nTotEnt
   local dFecRes
   local cCodArt        := Padr( aTmp[ 4 ], 32 )
   local bmpImage
   local oTotUni
   local oTotPdt
   local nTotPdt        := 0
   local oTotEnt
   local oSayGrp
   local cSayGrp        := ""
   local oSayFam
   local cSayFam        := ""
   local cNumedPrv      := ""
   local oRentLin
   local cRentLin
   local cCodDiv        := aTmpPed[ 46 ]
   local oSayDias
   local oGetCaducidad
   local dGetCaducidad
   local nOrdFacCliL
   local oBtnSer

   local oEstadoProduccion
   local cEstadoProduccion := aEstadoProduccion[ Min( Max( aTmp[ 88 ] + 1, 1 ), len( aEstadoProduccion ) ) ]

   do case
   case nMode == 1

      aTmp[2 ]   := aTmpPed[ 2 ]
      aTmp[12]   := 1
      aTmp[25  ]   := Ctod( "" )
      aTmp[26 ]   := cDefVta()
      aTmp[28 ]   := lTotLin
      aTmp[11 ]   := 1
      aTmp[39 ]   := aTmpPed[ 17 ]
      aTmp[42 ]   := aTmpPed[ 51 ]
      aTmp[81 ]   := aTmpPed[ 28 ]
      aTmp[82 ]   := .T.

      if aTmpPed[ 50 ] <= 1
         aTmp[ 10 ]  := nIva( dbfIva, cDefIva() )
      end

      if !Empty( cCodArtEnt )
         cCodArt        := Padr( cCodArtEnt, 32 )
      end

      aTmp[ 74 ] := aTmpPed[ 75 ]
      aTmp[ 73 ] := aTmpPed[ 74]

      aTmp[ 75]:= !Empty( oTipPed ) .AND. ( oTipPed:nAt == 2 )

   case nMode == 2

      lTotLin           := aTmp[ 28 ]

   end

   nOrdPedPrv           := ( dbfPedPrvL )->( OrdSetFocus( "cPedCliRef" ) )

   dFecRes              := dTmpPdtRec( aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes )
   nTotRes              := nUnidadesRecibidasAlbCli( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 70 ], aTmp[ 9 ], dbfAlbCliL )
   nTotRes              += nUnidadesRecibidasFacCli( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], dbfFacCliL )

   if nTotRes > nTotNPedCli( aTmp )
      nTotRes           := nTotNPedCli( aTmp )
   end

   nTotEnt              := nUnidadesRecibidasPedCli( aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ], aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 70 ], aTmp[ 9 ], dbfAlbPrvL )
   nTotPdt              := nTotNPedCli( aTmp ) - nTotEnt





   cOldCodArt           := aTmp[ 4 ]
   cOldPrpArt           := aTmp[ 5 ] + aTmp[ 6 ] + aTmp[ 7 ] + aTmp[ 8 ]
   cOldUndMed           := aTmp[ 22 ]





   cSayGrp              := RetFld( aTmp[ 59 ], oGrpFam:GetAlias() )
   cSayFam              := RetFld( aTmp[ 58 ], dbfFamilia )





   nOrdAnt              := ( dbfAlbCliL )->( OrdSetFocus( "cNumPedRef" ) )

   ( dbfAlbCliL )->( OrdScope( 0, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfAlbCliL )->( OrdScope( 1, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfAlbCliL )->( dbGoTop() )





   nOrdFacCliL          := ( dbfFacCliL )->( OrdSetFocus( "cNumPedRef" ) )

   ( dbfFacCliL )->( OrdScope( 0, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] ) )
   ( dbfFacCliL )->( OrdScope( 1, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] ) )
   ( dbfFacCliL )->( dbGoTop() )

   nOrdAlbPrv           := ( dbfAlbPrvL )->( OrdSetFocus( "cPedCliRef" ) )

   ( dbfAlbPrvL )->( OrdScope( 0, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfAlbPrvL )->( OrdScope( 1, aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ] + aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfAlbPrvL )->( dbGoTop() )

   ( dbfTmpRes )->( OrdScope( 0, aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfTmpRes )->( OrdScope( 1, aTmp[ 4 ] + aTmp[ 7 ] + aTmp[ 8 ] ) )
   ( dbfTmpRes )->( dbGoTop() )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "lineas a pedidos de clientes", "LFACCLI",, .F.,,,,,, .F.,,,,,, .F., )

      if aTmp[ 75 ]

















         oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "R&ecepciones", "Reser&vas", "Entre&gas", "&Anular", "&Observaciones"}, { "LPRECLI_4","LPEDCLI_2","LPEDCLI_6","LPEDCLI_4","LPEDCLI_5","LPEDCLI_3","LFACCLI_3" }, oDlg,,,,, .F., )

      else

















         oFld := TFolder():ReDefine( 400, {"&General", "Da&tos", "R&ecepciones", "Reser&vas", "Entre&gas", "&Anular", "&Observaciones"}, { "LFACCLI_1","LPEDCLI_2","LPEDCLI_6","LPEDCLI_4","LPEDCLI_5","LPEDCLI_3","LFACCLI_3" }, oDlg,,,,, .F., )

      end








      aGet[ 4 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cCodArt, cCodArt:= u ) }, oFld:aDialogs[1],,, {||    ( LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwArticulo( aGet[ 4 ], aGet[ 9 ] ) )}, nil, "LUPA",, )




      aGet[ 9 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( ( lModDes() .OR. Empty( aTmp[ 9 ] ) ) .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      oSayLote := TSay():ReDefine( 113,, oFld:aDialogs[1],,,, .F.,, .F., .F. )





      aGet[ 45 ] := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, aTmp[ 45 ], aTmp[ 45 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ 45 ]:bValid   := {|| if( !uFieldEmpresa( "lNStkAct" ), oStock:nPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], aTmp[ 46 ], aTmp[ 36 ], oStkAct ), .T. ), .T. }

      if !aTmp[ 75 ]






      oGetCaducidad := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, dGetCaducidad, dGetCaducidad:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 341, )

      end





      aGet[ 27 ] := TMultiGet():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 27 ], aTmp[ 27 ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( ( lModDes() .OR. Empty( aTmp[ 27 ] ) ) .AND. nMode <> 3 )}, .F.,, )






      if !aTmp[ 75 ]










      aGet[ 7 ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 7 ], oSayVp1, aTmp[ 5 ], dbfTblPro ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[ 7 ], oSayVp1, aTmp[ 5 ] ) )}, nil, "LUPA",, )



      oSayPr1 := TSay():ReDefine( 271, {|| cSayPr1}, oFld:aDialogs[1],,,, .F.,, .F., .F. )




      oSayVp1 := TGetHlp():ReDefine( 272, { | u | If( PCount()==0, cSayVp1, cSayVp1:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










      aGet[8] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oFld:aDialogs[1],,, {||    ( if( lPrpAct( aTmp[ 8 ], oSayVp2, aTmp[ 6 ], dbfTblPro ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ), .F. ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[8], oSayVp2, aTmp[6 ] ) )}, nil, "LUPA",, )



      oSayPr2 := TSay():ReDefine( 281, {|| cSayPr2}, oFld:aDialogs[1],,,, .F.,, .F., .F. )





      oSayVp2 := TGetHlp():ReDefine( 282, { | u | If( PCount()==0, cSayVp2, cSayVp2:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )

      end








      aGet[ 22 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oUndMedicion:Existe( aGet[ 22 ], aGet[ 22 ]:oHelpText, "cNombre" ), ValidaMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ 22 ] ), ValidaMedicion( aTmp, aGet ) )}, nil, "LUPA",, 171 )











      aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 521, )

         aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 531, )

         aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:oSay:SetColor( 8388608 )









      aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:= u ) }, oFld:aDialogs[1],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 541, )

         aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:oSay:SetColor( 8388608 )






      if IsMuebles()





         aGet[ 70 ] := TGetHlp():ReDefine( 500, { | u | If( PCount()==0, aTmp[ 70 ], aTmp[ 70 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,, 501, )

      end










      aGet[ 10 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( lTiva( dbfIva, aTmp[ 10 ], @aTmp[ 60 ] ) )}, "N/W*",,,,, .F., {||     ( lModIva() .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .F.,,,,, {|Self|( BrwIva( aGet[ 10 ], dbfIva, , .T. ) )}, nil, "LUPA",, )

      if aTmp[ 75 ]







      aGet[ 74 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 74 ], aTmp[ 74 ]:= u ) }, oFld:aDialogs[1],,, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,,, )







      aGet[ 73 ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ 73 ], aTmp[ 73 ]:= u ) }, oFld:aDialogs[1],,, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), oSayDias:Refresh() ) }, .F., .T.,,,,,, nil,,, )





      oSayDias := TSay():ReDefine( 440, {||      ( aTmp[ 73 ] - aTmp[ 74 ] )}, oFld:aDialogs[1], "9999",,, .F.,, .F., .F. )

      else










      aGet[ 41 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 41 ], aTmp[ 41 ]:= u ) }, oFld:aDialogs[1],, cPouDiv,, "N/W*",,,,, .F., {||     ( uFieldEmpresa( "lModImp" ) .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,, {|Self|( oNewImp:nBrwImp( aGet[ 41 ] ) )}, nil,, 126, )

      end














        aGet[11] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[11], aTmp[11]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ) )},,,,,, .F., {||     ( lUseCaj() .AND. nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 131, )









        aGet[12] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[12], aTmp[12]:= u ) }, oFld:aDialogs[1],, cPicUnd, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ), LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, .F. ) ) }, .F., .T.,,,,,, nil,, 141, )













      aGet[ 14 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )










      aGet[ 81 ] := TGetHlp():ReDefine( 156, { | u | If( PCount()==0, aTmp[ 81 ], aTmp[ 81 ]:= u ) }, oFld:aDialogs[1],, "9", {||    ( aTmp[ 81 ] >= 1 .AND. aTmp[ 81 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( lUsrMaster() .OR. oUser():lCambiarPrecio() ) )}, {|nKey,nFlags,Self| ( ChangeTarifa( aTmp, aGet, aTmpPed ), RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      1}, {||      6},, nil,,, )





      if aTmp[ 75 ]









         aGet[ 76 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 76 ], aTmp[ 76 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )

      end









      aGet[ 16 ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 351, )










      aGet[ 15 ] := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oFld:aDialogs[1],, cPpvDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,, 152, )











      aGet[31] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[31], aTmp[31]:= u ) }, oFld:aDialogs[1],, cPouDiv, {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ),,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,, {||      0},,, nil,, 261, )





      aGet[ 30 ] := TGetHlp():ReDefine( 295, { | u | If( PCount()==0, aTmp[ 30 ], aTmp[ 30 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 23 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )




      aGet[ 24 ] := TGetHlp():ReDefine( 175, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 71 ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 71 ], aTmp[ 71 ]:= u ) }, oFld:aDialogs[1],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )





      aGet[ 72 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 72 ], aTmp[ 72 ]:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,,, nil,,, )









        aGet[17] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[17], aTmp[17]:= u ) }, oFld:aDialogs[1],, "@E 999.99", {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )









        aGet[18] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[18], aTmp[18]:= u ) }, oFld:aDialogs[1],, "@E 99.99", {||    ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )}, {|nKey,nFlags,Self| ( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) ) }, .F., .T.,,,,,, nil,,, )







        aGet[19] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[19], aTmp[19]:= u ) }, oFld:aDialogs[1],, "@E 99.99",, "N/W*",,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .T.,,,,,, nil,,, )

      if !aTmp[ 75 ]





      oComisionLinea := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, nComisionLinea, nComisionLinea:= u ) }, oFld:aDialogs[ 1 ],, cPorDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      end






      oTotal := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nTotal, nTotal:= u ) }, oFld:aDialogs[1],, cPouDiv,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[37] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[37], aTmp[37]:= u ) }, oFld:aDialogs[1],, cPouDiv,,,,,,, .F., {||     ( oUser():lAdministrador() .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,, 321, )










      aGet[ 54 ] := TGetHlp():ReDefine( 205, { | u | If( PCount()==0, aTmp[ 54 ], aTmp[ 54 ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:lValid( aGet[ 54 ], oGet3 ) )},,,,,, .F., {||     ( nMode <> 3 .AND. nMode <> 5 .AND. !lTotLin )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ 54 ] ) )}, nil, "LUPA",, )





      oGet3 := TGetHlp():ReDefine( 206, { | u | If( PCount()==0, cGet3, cGet3:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )














        aGet[26] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ 26 ], aTmp[ 26 ]:= u ) }, oFld:aDialogs[1],,, {||        ( cTVta( aGet[26], dbfTVta, oGet2 ) )},,,,,, .F., {||     ( nMode <> 3 .AND. !lTotLin )},, .F., .F.,,,,, {|Self|( BrwTVta( aGet[26], dbfTVta, oGet2 ) )}, nil, "LUPA", 292, )




        oGet2 := TGetHlp():ReDefine( 291, { | u | If( PCount()==0, cGet2, cGet2:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )











      aGet[ 39 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 39 ], aTmp[ 39 ]:= u ) }, oFld:aDialogs[1],,, {||    ( cAlmacen( aGet[ 39 ], , oSayAlm ), if( !uFieldEmpresa( "lNStkAct" ), oStock:lPutStockActual( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], aTmp[ 46 ], aTmp[ 36 ], oStkAct ), .T. ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[ 39 ], oSayAlm ) )}, nil, "LUPA",, )




      oSayAlm := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cSayAlm, cSayAlm:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





      oStkAct := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, nStkAct, nStkAct:= u ) }, oFld:aDialogs[1],, cPicUnd,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 49 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 49 ], aTmp[ 49 ]:= u ) }, oFld:aDialogs[1],, "99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )










      aGet[ 35 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oFld:aDialogs[2],, "9999",,,,,,, .F., {||     ( nMode == 1 )},, .F., .T.,,,,,, nil,,, )




      aGet[ 29 ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 29 ], aTmp[ 29 ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[ 25 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 25 ], aTmp[ 25 ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      aGet[52] := TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[52], aTmp[52]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[ 38 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 38 ], aTmp[ 38 ]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 65 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 65 ], aTmp[ 65 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( aGet[ 65 ], bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ 65 ], bmpImage ) )}, nil, "LUPA",, )











      aGet[ 59 ] := TGetHlp():ReDefine( ( 150 ), { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oFld:aDialogs[ 2 ],,, {||    ( oSayGrp:cText( RetFld( aTmp[ 59  ], oGrpFam:GetAlias() ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oGrpFam:Buscar( aGet[ 59 ] ) )}, nil, "LUPA",, )




      oSayGrp := TGetHlp():ReDefine( ( 151 ), { | u | If( PCount()==0, cSayGrp, cSayGrp:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







      aGet[ 58 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oFld:aDialogs[2],,, {||    ( oSayFam:cText( RetFld( aTmp[ 58  ], dbfFamilia ) ), .T. )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[ 58 ], oSayFam ) )}, nil, "LUPA",, )




      oSayFam := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSayFam, cSayFam:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 82 ] := TCheckBox():ReDefine( 310, { | u | If( PCount()==0, aTmp[ 82 ], aTmp[ 82 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





      aGet[ 83 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 83 ], aTmp[ 83 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         aGet[ 83 ]:bValid := {|| oFraPub:lValid( aGet[ 83 ], aGet[ 84 ] ) }
         aGet[ 83 ]:bHelp  := {|| oFraPub:Buscar( aGet[ 83 ] ) }




      aGet[ 84 ] := TGetHlp():ReDefine( 321, { | u | If( PCount()==0, aTmp[ 84 ], aTmp[ 84 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oRentLin := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cRentLin, cRentLin:= u ) }, oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,, 301, )




      aGet[ 47 ] := TCheckBox():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 48 ] := TCheckBox():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      aGet[ 36 ] := TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oFld:aDialogs[ 2 ],, { 350, 351, 352 },,,,, .F., {||     ( nMode <> 3 )}, )







      aGet[ 63 ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ 63 ], aTmp[ 63 ]:= u ) }, oFld:aDialogs[ 2 ],, ( RetPicCodPrvEmp() ),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 361 )

      aGet[ 63 ]:bValid  := {|| cProvee( aGet[ 63 ], dbfPrv, aGet[ 63 ]:oHelpText ) }
      aGet[ 63 ]:bHelp   := {|| brwProvee( aGet[ 63 ], aGet[ 63 ]:oHelpText ) }






      oEstadoProduccion := TComboBox():ReDefine( 380, { | u | If( PCount()==0, cEstadoProduccion, cEstadoProduccion:= u ) }, aEstadoProduccion, oFld:aDialogs[ 2 ],,,,,,, .F., {||     ( nMode <> 3 )},,,,, )









      oTotUni := TSay():ReDefine( 150, {|| nTotNPedCli( aTmp )}, oFld:aDialogs[3], cPicUnd, "B/W*",, .F.,, .F., .F. )





      oTotEnt := TSay():ReDefine( 160, {|| nTotEnt}, oFld:aDialogs[3], cPicUnd, "G/W*",, .F.,, .F., .F. )





      oTotPdt := TSay():ReDefine( 170, {|| nTotPdt}, oFld:aDialogs[3], cPicUnd, "R/W*",, .F.,, .F., .F. )

      oBrwAlbPrv                 := TXBrowse():New( oFld:aDialogs[3] )

      oBrwAlbPrv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAlbPrv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAlbPrv:cAlias          := dbfAlbPrvL

      oBrwAlbPrv:lFooter         := .F.
      oBrwAlbPrv:nMarqueeStyle   := 5

      oBrwAlbPrv:CreateFromResource( 180 )

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb, dbfAlbPrvT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Albarán"
         :bEditValue          := {|| AllTrim( ( dbfAlbPrvL )->cSerAlb ) + "/" + AllTrim( Str( ( dbfAlbPrvL )->nNumAlb ) ) + "/" + AllTrim( ( dbfAlbPrvL )->cSufAlb ) }
         :nWidth              := 80
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Proveedor"
         :bEditValue          := {|| cNbrAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb, dbfAlbPrvT ) }
         :nWidth              := 210
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfAlbPrvL )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfAlbPrvL )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfAlbPrvL )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNAlbPrv( dbfAlbPrvL ) }
         :bFooter             := {|| nTotEnt }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfAlbPrvL )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwAlbPrv:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfAlbPrvL )->cAlmLin }
         :nWidth              := 30
      end

      oBrwAlbPrv:bLDblClick     := {|| EdtAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb ), oBrwAlbPrv:Refresh(), oTotEnt:Refresh(), oTotPdt:Refresh() }









      oTot[ 4 ] := TSay():ReDefine( 190, {|| nTotRPedCli( , aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes )}, oFld:aDialogs[4], cPicUnd, "B/W*",, .F.,, .F., .F. )





      oTot[ 5 ] := TSay():ReDefine( 200, {|| nUnidadesRecibidasAlbCli( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 70 ], aTmp[ 9 ], dbfAlbCliL )}, oFld:aDialogs[4], cPicUnd, "G/W*",, .F.,, .F., .F. )





      oTot[ 6 ] := TSay():ReDefine( 210, {|| NotMinus( nTotRPedCli( , aTmp[ 4 ], aTmp[ 7 ], aTmp[ 8 ], dbfTmpRes ) - nUnidadesRecibidasAlbCli( cNumPed, aTmp[ 4 ], aTmp[ 5 ], aTmp[ 6 ], aTmp[ 70 ], aTmp[ 9 ], dbfAlbCliL ) )}, oFld:aDialogs[4], cPicUnd, "R/W*",, .F.,, .F., .F. )





      TButton():ReDefine( 501, {||( WinAppRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 502, {||( WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( WinDelRec( nil, dbfTmpRes , nil, {|| oBrwResCli:Refresh() } ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh() )}, oFld:aDialogs[4],,, .F., {||     ( nMode <> 3 )},,, .F. )

      oBrwResCli                 := IXBrowse():New( oFld:aDialogs[4] )

      oBrwResCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwResCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwResCli:cAlias          := dbfTmpRes

      oBrwResCli:nMarqueeStyle   := 6
      oBrwResCli:cName           := "Pedido de cliente.Detalle.Reservas"

      oBrwResCli:CreateFromResource( 220 )

      with object ( oBrwResCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( ( dbfTmpRes )->dFecRes ) }
         :nWidth              := 70
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := cNombreCajas()
         :bEditValue          := {|| ( dbfTmpRes )->nCajRes }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| ( dbfTmpRes )->nUndRes }
         :cEditPicture        := cPicUnd
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwResCli:AddCol() )
         :cHeader             := "Total " + cNombreUnidades()
         :bEditValue          := {|| nTotNResCli( dbfTmpRes ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 230
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      if nMode <> 3
         oBrwResCli:bLDblClick  := {|| WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) }
      end









      oTot[ 1 ] := TSay():ReDefine( 150, {|| nTotNPedCli( aTmp )}, oFld:aDialogs[5], cPicUnd, "B/W*",, .F.,, .F., .F. )





      oTot[ 2 ] := TSay():ReDefine( 160, {|| nTotRes}, oFld:aDialogs[5], cPicUnd, "G/W*",, .F.,, .F., .F. )





      oTot[ 3 ] := TSay():ReDefine( 170, {|| nTotNPedCli( aTmp ) - nTotRes}, oFld:aDialogs[5], cPicUnd, "R/W*",, .F.,, .F., .F. )

      oBrwAlbCli                 := TXBrowse():New( oFld:aDialogs[5] )

      oBrwAlbCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwAlbCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwAlbCli:cAlias          := dbfAlbCliL

      oBrwAlbCli:lFooter         := .F.
      oBrwAlbCli:nMarqueeStyle   := 5

      oBrwAlbCli:CreateFromResource( 230 )

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecAlbCli( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Albarán"
         :bEditValue          := {|| ( dbfAlbCliL )->cSerAlb + "/" + AllTrim( Str( ( dbfAlbCliL )->nNumAlb ) ) + "/" + ( dbfAlbCliL )->cSufAlb }
         :nWidth              := 80
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Cliente"
         :bEditValue          := {|| cNbrAlbCli( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb, dbfAlbCliT ) }
         :nWidth              := 210
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfAlbCliL )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfAlbCliL )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfAlbCliL )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNAlbCli( dbfAlbCliL ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfAlbCliL )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwAlbCli:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfAlbCliL )->cAlmLin }
         :nWidth              := 30
      end

      oBrwAlbCli:bLDblClick     := {|| ZooAlbCli( ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb ), oBrwAlbCli:Refresh() }





      oBrwFacCli                 := TXBrowse():New( oFld:aDialogs[5] )

      oBrwFacCli:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFacCli:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFacCli:cAlias          := dbfFacCliL

      oBrwFacCli:lFooter         := .F.
      oBrwFacCli:nMarqueeStyle   := 5

      oBrwFacCli:CreateFromResource( 240 )

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( dFecFacCli( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT ) ) }
         :nWidth              := 70
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Factura"
         :bEditValue          := {|| ( dbfFacCliL )->cSerie + "/" + AllTrim( Str( ( dbfFacCliL )->nNumFac ) ) + "/" + ( dbfFacCliL )->cSufFac }
         :nWidth              := 80
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Cliente"
         :bEditValue          := {|| cNbrFacCli( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac, dbfFacCliT ) }
         :nWidth              := 210
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfFacCliL )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfFacCliL )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfFacCliL )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNFacCli( dbfFacCliL ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfFacCliL )->cUnidad }
         :nWidth              := 25
         :lHide               := .T.
      end

      with object ( oBrwFacCli:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfFacCliL )->cAlmLin }
         :nWidth              := 30
      end

      oBrwFacCli:bLDblClick   := {|| ZooFacCli( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac ), oBrwFacCli:Refresh() }









      aGet[55] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[55], aTmp[55]:= u ) }, oFld:aDialogs[6],, {||( CambiaAnulado( aGet, aTmp ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[ 56 ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oFld:aDialogs[6],,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






      aGet[57] := TMultiGet():ReDefine( 420, { | u | If( PCount()==0, aTmp[57], aTmp[57]:= u ) }, oFld:aDialogs[6],, "N/W*",,,,, .F., {||     ( nMode <> 3 )}, .F.,, )









      aGet[ 61 ] := TMultiGet():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 61 ], aTmp[ 61 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      aGet[ 85 ] := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 85 ], aTmp[ 85 ]:= u ) }, oFld:aDialogs[ 7 ],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      bmpImage := TBitmap():ReDefine( 220,, ( cFileBitmap( cPatImg(), aTmp[ 65 ] ) ), oDlg,, { |nRow,nCol,nKeyFlags| ( bmpImage:lStretch := !bmpImage:lStretch, bmpImage:Refresh() ) }, .F., .F.,,, .F.,,, .F. )

         bmpImage:SetColor( , GetSysColor( 15 ) )








      oBtnSer := TButton():ReDefine( 552, {||( nil )}, oDlg,,, .F.,,,, .F. )





      oBtn := TButton():ReDefine( 1, {||( SaveDeta( aTmp, aTmpPed, aGet, oFld, oDlg, oBrw, bmpImage, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, oSayLote, oEstadoProduccion, cCodArt, oBtn ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 9, {||( ChmHelp( "Añadir_v" ) )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3

         oDlg:AddFastKey( 116, {|| SaveDeta( aTmp, aTmpPed, aGet, oFld, oDlg, oBrw, bmpImage, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, oSayLote, oEstadoProduccion, cCodArt, oBtn ) } )

         oFld:aDialogs[4]:AddFastKey( 113, {|| WinAppRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 114, {|| WinEdtRec( oBrwResCli, bEdtRes, dbfTmpRes, oTot, nil, aTmp ) } )
         oFld:aDialogs[4]:AddFastKey( 115, {|| DbDelRec( oBrwResCli, dbfTmpRes ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh() } )

      end

      oDlg:AddFastKey( 112, {|| ChmHelp( "Añadir_v" ) } )





      oDlg:bStart := {||   SetDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, aTmpPed, oSayLote, oFld, oRentLin, oBrwAlbCli, oBrwAlbPrv, oBrwFacCli ), if( !Empty( oBtnSer ), oBtnSer:Hide(), ), if( !Empty( oGetCaducidad ), oGetCaducidad:Hide(), ), if( !Empty( cCodArtEnt ), aGet[ 4 ]:lValid(), ), aGet[ 22 ]:lValid() }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( RecalculaLinea( aTmp, aTmpPed, nDouDiv, oTotal, oTot, oRentLin, cCodDiv ) )}, .T.,,, {|Self|( EdtDetMenu( aGet[ 4 ], oDlg ), oBrwResCli:Load() )}, oDlg:bRClicked,,, )

   EndDetMenu()

   ( dbfPedPrvL )->( OrdSetFocus( nOrdPedPrv ) )

   ( dbfAlbCliL )->( OrdScope( 0, nil ) )
   ( dbfAlbCliL )->( OrdScope( 1, nil ) )
   ( dbfAlbCliL )->( OrdSetFocus( nOrdAnt ) )

   ( dbfFacCliL )->( OrdScope( 0, nil ) )
   ( dbfFacCliL )->( OrdScope( 1, nil ) )
   ( dbfFacCliL )->( OrdSetFocus( nOrdFacCliL ) )

   ( dbfAlbPrvL )->( OrdScope( 0, nil ) )
   ( dbfAlbPrvL )->( OrdScope( 1, nil ) )
   ( dbfAlbPrvL )->( OrdSetFocus( nOrdAlbPrv ) )

   ( dbfTmpRes )->( OrdScope( 0, nil ) )
   ( dbfTmpRes )->( OrdScope( 1, nil ) )
   ( dbfTmpRes )->( dbGoTop() )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION EdtRes( aTmp, aGet, dbfTmpRes, oBrw, oTot, bValid, nMode, aTmpLin )

   local oDlg
   local oGet
   local oSay

   if nMode == 1
      aTmp[ 1 ]  := aTmpLin[ 1 ]
      aTmp[ 2 ]  := aTmpLin[ 2 ]
      aTmp[ 3 ]  := aTmpLin[ 3 ]
      aTmp[ 4    ]  := aTmpLin[ 4    ]
      aTmp[ 5 ]  := aTmpLin[ 5 ]
      aTmp[ 6 ]  := aTmpLin[ 6 ]
      aTmp[ 7 ]  := aTmpLin[ 7 ]
      aTmp[ 8 ]  := aTmpLin[ 8 ]
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "reservas a pedidos de clientes", "LRESPEDCLI",, .F.,,,,,, .F.,,,,,, .F., )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfPedCliR )->( fieldPos( "DFECRES" ) ) ], aTmp[ ( dbfPedCliR )->( fieldPos( "DFECRES" ) ) ]:= u ) }, oDlg,,,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )







      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfPedCliR )->( fieldPos( "NCAJRES" ) ) ], aTmp[ ( dbfPedCliR )->( fieldPos( "NCAJRES" ) ) ]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F.,, {|nKey,nFlags,Self| ( oSay:Refresh() ) }, .F., .T.,,,,,, nil,,, )







      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfPedCliR )->( fieldPos( "NUNDRES" ) ) ], aTmp[ ( dbfPedCliR )->( fieldPos( "NUNDRES" ) ) ]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F.,, {|nKey,nFlags,Self| ( oSay:Refresh() ) }, .F., .T.,,,,,, nil,,, )





      oSay := TSay():ReDefine( 130, {|| NotCaja( aTmp[ ( dbfPedCliR )->( fieldPos( "NCAJRES" ) ) ] ) * aTmp[ ( dbfPedCliR )->( fieldPos( "NUNDRES" ) ) ]}, oDlg, cPicUnd, "N/W*",, .F.,, .F., .F. )











        TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpRes, oBrw, nMode ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh(), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpRes, oBrw, nMode ), oTot[4]:Refresh(), oTot[5]:Refresh(), oTot[6]:Refresh(), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( if( !lUseCaj(), oGet:hide(), ) )}, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function EdtDoc( aTmp, aGet, dbfPedCliD, oBrw, bWhen, bValid, nMode, aTmpLin )

   local oDlg
   local oRuta
   local oNombre
   local oObservacion

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "documento de pedidos de clientes", "DOCUMENTOS",, .F.,,,,,, .F.,,,,,, .F., )




      oNombre := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cNombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      oRuta := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "cRuta" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oRuta:cText( cGetFile( "Doc ( *.* ) | " + "*.*", "Seleccione el nombre del fichero" ) ) )}, nil, "FOLDER",, )





      oObservacion := TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ], aTmp[ ( dbfTmpDoc )->( FieldPos( "mObsDoc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpDoc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static Function PrnSerie()

    local oDlg
   local oFmtDoc
   local cFmtDoc     := cFormatoDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount )
   local oSayFmt
   local cSayFmt
   local oSerIni
   local oSerFin
   local nRecno      := (dbfPedCliT)->( recno() )
   local nOrdAnt     := (dbfPedCliT)->( OrdSetFocus(1) )
   local cSerIni     := (dbfPedCliT)->cSerPed
   local cSerFin     := (dbfPedCliT)->cSerPed
   local nDocIni     := (dbfPedCliT)->nNumPed
   local nDocFin     := (dbfPedCliT)->nNumPed
   local cSufIni     := (dbfPedCliT)->cSufPed
   local cSufFin     := (dbfPedCliT)->cSufPed
   local oPrinter
   local cPrinter    := PrnGetName()
   local lCopiasPre  := .T.
   local lInvOrden   := .F.
   local oNumCop
   local nNumCop     := if( nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) == 0, Max( Retfld( ( dbfPedCliT )->cCodCli, dbfClient, "CopiasF" ), 1 ), nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) )

   if Empty( cFmtDoc )
      cFmtDoc        := cSelPrimerDoc( "PC" )
   end

   cSayFmt           := cNombreDoc( cFmtDoc )

   oDlg = TDialog():New(,,,, "Imprimir series de pedidos", "IMPSERDOC",, .F.,,,,,, .F.,,,,,, .F., )









   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z"  )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )









   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z"  )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, lCopiasPre, lCopiasPre:= u ) }, oDlg,,,,,,, .F.,, .F. )









   oNumCop := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, nNumCop, nNumCop:= u ) }, oDlg,, "999999999", {||    nNumCop > 0},,,,,, .F., {||     !lCopiasPre},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )







   oFmtDoc := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cFmtDoc, cFmtDoc:= u ) }, oDlg,,, {||    ( cDocumento( oFmtDoc, oSayFmt, dbfDoc ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtDoc, oSayFmt, "PC" ) )}, nil, "LUPA",, )





   oSayFmt := TGetHlp():ReDefine( 91, { | u | If( PCount()==0, cSayFmt, cSayFmt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 92, "Printer_pencil_16",,,,,{|| EdtDocumento( cFmtDoc ) }, oDlg, .F., , .F.,  )




   oPrinter := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 161, "Printer_preferences_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )





   TButton():ReDefine( 1, {||(  StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden ), oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| StartPrint( SubStr( cFmtDoc, 1, 3 ), cSerIni + Str( nDocIni, 9 ) + cSufIni, cSerFin + Str( nDocFin, 9 ) + cSufFin, oDlg, nil, lCopiasPre, nNumCop, lInvOrden ), oDlg:end( 1 ) } )

   oDlg:bStart := { || oSerIni:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( dbfPedCliT )->( dbGoTo( nRecNo ) )
   ( dbfPedCliT )->( ordSetFocus( nOrdAnt ) )

    oWndBrw:oBrw:refresh()

RETURN NIL



STATIC FUNCTION StartPrint( cFmtDoc, cDocIni, cDocFin, oDlg, cPrinter, lCopiasPre, nNumCop, lInvOrden )

   local nCopyClient

   oDlg:disable()

   if !lInvOrden

      ( dbfPedCliT )->( dbSeek( cDocIni, .T. ) )



      while ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed >= cDocIni .AND.  ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed <= cDocFin .AND.  !( dbfPedCliT )->( eof() )

            lChgImpDoc( dbfPedCliT )

         if lCopiasPre

            nCopyClient := if( nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) == 0, Max( Retfld( ( dbfPedCliT )->cCodCli, dbfClient, "CopiasF" ), 1 ), nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) )

            GenPedCli( 1, "Imprimiendo documento : " + ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

         else

            GenPedCli( 1, "Imprimiendo documento : " + ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, cFmtDoc, cPrinter, nNumCop )

         end

         ( dbfPedCliT )->( dbSkip() )

      end

   else

      ( dbfPedCliT )->( DbSeek( cDocFin ) )



      while ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed >= cDocIni .AND. ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed <= cDocFin .AND. !( dbfPedCliT )->( Bof() )

            lChgImpDoc( dbfPedCliT )

         if lCopiasPre

            nCopyClient := if( nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) == 0, Max( Retfld( ( dbfPedCliT )->cCodCli, dbfClient, "CopiasF" ), 1 ), nCopiasDocumento( ( dbfPedCliT )->cSerPed, "nPedCli", dbfCount ) )

            GenPedCli( 1, "Imprimiendo documento : " + ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, cFmtDoc, cPrinter, nCopyClient )

         else

            GenPedCli( 1, "Imprimiendo documento : " + ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, cFmtDoc, cPrinter, nNumCop )

         end

         ( dbfPedCliT )->( dbSkip( -1 ) )

      end

   end

   oDlg:enable()

RETURN NIL



FUNCTION aTotPedCli( cPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, cDivRet )

   nTotPedCli( cPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, nil, cDivRet, .F. )

RETURN ( { nTotNet, nTotIva, nTotReq, nTotPed, nTotPnt, nTotTrn, nTotAge, nTotCos } )







STATIC FUNCTION DelDetalle( cNumPed )

   IIF( cNumPed == nil, cNumPed := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT  )->cSufPed, ) ;







   if ( dbfPedCliL )->( dbSeek( cNumPed ) )
      while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cNumPed
         if dbLock( dbfPedCliL )
            ( dbfPedCliL )->( dbDelete() )
            ( dbfPedCliL )->( dbUnLock() )
         end
         ( dbfPedCliL )->( dbSkip() )
      end
   end



   if ( dbfPedCliR )->( dbSeek( cNumPed ) )
      while ( dbfPedCliR )->cSerPed + Str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed == cNumPed
         if dbLock( dbfPedCliR )
            ( dbfPedCliR )->( dbDelete() )
            ( dbfPedCliR )->( dbUnLock() )
         end
         ( dbfPedCliR )->( dbSkip() )
      end
   end



   if ( dbfPedCliP )->( dbSeek( cNumPed ) )
      while ( dbfPedCliP )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) ) .AND. !( dbfPedCliP )->( eof() )
         if dbDialogLock( dbfPedCliP )
            ( dbfPedCliP )->( dbDelete() )
            ( dbfPedCliP )->( dbUnLock() )
         end
         ( dbfPedCliP )->( dbSkip() )
      end
   end

RETURN NIL



FUNCTION BrwPedCli( oGet, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, oIva )

    local oDlg
    local oBrw
   local oGet1
   local cGet1
   local nOrd     := GetBrwOpt( "BrwPedCli" )
    local nOrdAnt
   local nRecAnt
    local oCbxOrd
   local aCbxOrd  := { "Número", "Fecha", "Cliente", "Nombre" }
   local cCbxOrd

   nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd        := aCbxOrd[ nOrd ]
   nOrdAnt        := ( dbfPedCliT )->( OrdSetFocus( nOrd ) )
   nRecAnt        := ( dbfPedCliT )->( Recno() )

   ( dbfPedCliT )->( dbSetFilter( {|| Field->nEstado <= 2 }, "nEstado <= 2" ) )
   ( dbfPedCliT )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Pedidos de clientes", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfPedCliT ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfPedCliT, .T., nil, .F. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfPedCliT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfPedCliT
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Pedido de cliente.Browse"

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }

      oBrw:CreateFromResource( 105 )

      with object ( oBrw:AddCol() )
         :cHeader          := "Es.Estado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( ( dbfPedCliT )->nEstado == 1 ) }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Bullet_Square_Yellow_16", "Bullet_Square_Red_16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| aTipPed[ if( ( dbfPedCliT )->lAlquiler, 2, 1  ) ] }
         :nWidth           := 50
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| dtoc( ( dbfPedCliT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cNomCli ) }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, nil, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 500,, oDlg,,, .F., {||     .F.},,, .F. )




        TButton():ReDefine( 501,, oDlg,,, .F., {||     .F.},,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13, {|| oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBrw:Load() )}, oDlg:bRClicked,,, )

   DestroyFastFilter( dbfPedCliT )

   SetBrwOpt( "BrwPedCli", ( dbfPedCliT )->( OrdNumber() ) )

   if oDlg:nResult == 1
      oGet:cText( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed )
      oGet:lValid()
      oIva:Click( ( dbfPedCliT )->lIvaInc ):Refresh()
   end

   ( dbfPedCliT )->( dbClearFilter() )
   ( dbfPedCliT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfPedCliT )->( dbGoTo( nRecAnt ) )

RETURN ( oDlg:nResult == 1 )



FUNCTION nImpUPedCli( uTmpLin, nDec, nVdv, cPorDiv )

   local nCalculo    := 0

   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   if ValType( uTmpLin ) == "C"

      if ( uTmpLin )->lAlquiler
         nCalculo       := ( uTmpLin )->nPreAlq
      else
         nCalculo       := ( uTmpLin )->nPreDiv
      end

      if ( uTmpLin )->lIvaLin

         if ( uTmpLin )->nIva <> 0
            nCalculo -= nCalculo / ( 100 / ( uTmpLin )->nIva + 1 )
         end

         if ( uTmpLin )->nValImp <> 0
            nCalculo -= ( uTmpLin )->nValImp
         end

      end

   else

      if uTmpLin:lAlquiler
         nCalculo       := uTmpLin:nPreAlq
      else
         nCalculo       := uTmpLin:nPreDiv
      end

      if uTmpLin:lIvaLin

         if uTmpLin:nIva <> 0
            nCalculo -= nCalculo / ( 100 / uTmpLin:nIva + 1 )
         end

         if uTmpLin:nValImp <> 0
            nCalculo -= uTmpLin:nValImp
         end

      end

   end

   nCalculo          := Round( nCalculo / nVdv, nDec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nBrtLPedCli( uTmpLin, nDec, nRec, nVdv, cPorDiv )

   local nCalculo    := 0

   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nImpUPedCli( uTmpLin, nDec, nVdv, cPorDiv )
   nCalculo          *= nTotNPedCli( uTmpLin )

   nCalculo          := Round( nCalculo / nVdv, nRec )

Return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nIvaUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := nTotUPedCli( dbfTmpLin, nDec, nVdv )
   nCalculo       := nCalculo * ( dbfTmpLin )->nIva / 100

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION cDesPedCli( cPedCliL )

   IIF( cPedCliL == nil, cPedCliL := dbfPedCliL, ) ;

RETURN ( Descrip( cPedCliL ) )



FUNCTION nIvaLPedCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo := nTotLPedCli( dbfLin, nDec, nRouDec, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   if !( dbfLin )->lIvaLin
      nCalculo       := nCalculo * ( dbfLin )->nIva / 100
   else
      nCalculo       -= nCalculo / ( 1 + ( dbfLin )->nIva / 100 )
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION Pre2Ped( cNumPre )

   local cNumPed

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfPedCliT )->( OrdSetFocus( 6 ) )

   if ( dbfPedCliT )->( dbSeek( cNumPre ) )
      cNumPed := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed
   end

   if !Empty( cNumPed )
      EdtPedCli( cNumPed )
   else
      msgStop( "No hay pedido asociado" )
   end

   ( dbfPedCliT )->( dbCloseArea() )


RETURN NIL



STATIC FUNCTION cPreCli( aTmp, aGet, oBrw, nMode )

   local lValid   := .F.
   local cNumPre  := aGet[ 45 ]:varGet()

   if nMode <> 1 .OR. Empty( cNumPre )
      return .T.
   end

   IF ( dbfPreCLiT )->( dbSeek( cNumPre ) )

      IF ( dbfPreCLiT )->lEstado

         MsgStop( "Pesupuesto ya en pedidos" )
         lValid   := .F.

        ELSE

         aGet[45]:bWhen := {|| .F. }

         aGet[6]:cText( ( dbfPreCLiT )->CCODCLI )
            aGet[6]:bWhen    := {|| .F. }

         aGet[7]:cText( ( dbfPreCLiT )->CNOMCLI )
         aGet[8]:cText( ( dbfPreCLiT )->CDIRCLI )
         aGet[9]:cText( ( dbfPreCLiT )->CPOBCLI )
         aGet[10]:cText( ( dbfPreCLiT )->CPRVCLI )
         aGet[11]:cText( ( dbfPreCLiT )->CPOSCLI )
         aGet[12]:cText( ( dbfPreCLiT )->CDNICLI )
         aGet[85]:cText( ( dbfPreCLiT )->CTLFCLI )

         aGet[18]:cText( ( dbfPreCLiT )->cCodCaj )
         aGet[18]:lValid()

         aGet[17]:cText( ( dbfPreCLiT )->CCODALM )
            aGet[17]:lValid()

         aGet[19]:cText( ( dbfPreCLiT )->CCODPGO )
         aGet[19]:lValid()

         aGet[14]:cText( ( dbfPreCLiT )->CCODAGE )
            aGet[14]:lValid()

         aGet[43]:cText( ( dbfPreCliT )->nPctComAge )

         aGet[16]:cText( ( dbfPreCLiT)->CCODTAR )
            aGet[16]:lValid()

         aGet[15]:cText( ( dbfPreCLiT)->CCODOBR )
            aGet[15]:lValid()

         aGet[42]:Click( ( dbfPreCLiT )->lRecargo ):Refresh()
         aGet[91 ]:Click( ( dbfPreCLiT )->lOperPv ):Refresh()
         aGet[51 ]:Click( ( dbfPreCliT )->lIvaInc ):Refresh()





         aGet[60]:cText( ( dbfPreCLiT )->cRetMat )
         aGet[24]:cText( ( dbfPreCliT )->cCondEnt )
         aGet[25]:cText( ( dbfPreCLiT )->mComEnt )
         aGet[26]:cText( ( dbfPreCLiT )->mObserv )





         aGet[ 29 ]:cText( ( dbfPreCLiT )->cDtoEsp )
         aGet[ 31    ]:cText( ( dbfPreCLiT )->cDpp    )
         aGet[ 30 ]:cText( ( dbfPreCLiT )->nDtoEsp )
         aGet[ 32    ]:cText( ( dbfPreCLiT )->nDpp    )
         aGet[ 33 ]:cText( ( dbfPreCLiT )->cDtoUno )
         aGet[ 34 ]:cText( ( dbfPreCLiT )->nDtoUno )
         aGet[ 35 ]:cText( ( dbfPreCLiT )->cDtoDos )
         aGet[ 36 ]:cText( ( dbfPreCLiT )->nDtoDos )
         aGet[ 76 ]:cText( ( dbfPreCLiT )->cManObr )
         aGet[ 52 ]:cText( ( dbfPreCLiT )->nIvaMan )
         aGet[ 53 ]:cText( ( dbfPreCLiT )->nManObr )
         aGet[ 44 ]:cText( ( dbfPreCliT )->nBultos )





         aTmp[ 64 ]     := ( dbfPreCliT )->cCodGrp
         aTmp[ 13 ]     := ( dbfPreCliT )->lModCli
         aTmp[ 91 ]     := ( dbfPreCliT )->lOperPv





         aTmp[ 73 ]   := ( dbfPreCliT )->lAlquiler
         aTmp[ 74  ]   := ( dbfPreCliT )->dFecEntr
         aTmp[ 75   ]   := ( dbfPreCliT )->dFecSal

         if aTmp[ 73 ]
            oTipPed:Select( 2 )
         else
            oTipPed:Select( 1 )
         end





         if dbLock( dbfPreCLiT )
            ( dbfPreCLiT )->lEstado := .T.
            ( dbfPreCLiT )->( dbUnLock() )
         end

         if ( dbfPreCLiL )->( dbSeek( cNumPre ) )

            while ( ( dbfPreCLiL )->cSerPre + Str( ( dbfPreCLiL )->nNumPre ) + ( dbfPreCLiL )->cSufPre == cNumPre )

               (dbfTmpLin)->( dbAppend() )

               (dbfTmpLin)->nNumPed    := 0
               (dbfTmpLin)->nNumLin    := (dbfPreCLiL)->nNumLin
               (dbfTmpLin)->cRef       := (dbfPreCliL)->cRef
               (dbfTmpLin)->cDetalle   := (dbfPreCLiL)->cDetalle
               (dbfTmpLin)->mLngDes    := (dbfPreCLiL)->mLngDes
               (dbfTmpLin)->mNumSer    := (dbfPreCLiL)->mNumSer
               (dbfTmpLin)->nPreDiv    := (dbfPreCLiL)->nPreDiv
               (dbfTmpLin)->nPntVer    := (dbfPreCLiL)->nPntVer
               (dbfTmpLin)->nImpTrn    := (dbfPreCLiL)->nImpTrn
               (dbfTmpLin)->nCanPed    := (dbfPreCLiL)->nCanPre
               (dbfTmpLin)->nUniCaja   := (dbfPreCLiL)->nUniCaja
               (dbfTmpLin)->nUndKit    := (dbfPreCLiL)->nUndKit
               (dbfTmpLin)->nPesOkg    := (dbfPreCLiL)->nPesOkg
               (dbfTmpLin)->cPesoKg    := (dbfPreCLiL)->cPesoKg
               (dbfTmpLin)->cUnidad    := (dbfPreCLiL)->cUnidad
               (dbfTmpLin)->nVolumen   := (dbfPreCLiL)->nVolumen
               (dbfTmpLin)->cVolumen   := (dbfPreCLiL)->cVolumen
               (dbfTmpLin)->nCanEnt    := (dbfPreCLiL)->nCanEnt
               (dbfTmpLin)->nIva       := (dbfpreclil)->nIva
               (dbfTmpLin)->nReq       := (dbfpreclil)->nReq
               (dbfTmpLin)->cUniDad    := (dbfPreCLiL)->cUniDad
               (dbfTmpLin)->nDto       := (dbfPreCliL)->nDto
               (dbfTmpLin)->nDtoPrm    := (dbfPreCLiL)->nDtoPrm
               (dbfTmpLin)->nComAge    := (dbfPreCLiL)->nComAge
               (dbfTmpLin)->lTotLin    := (dbfPreCLiL)->lTotLin
               (dbfTmpLin)->nDtoDiv    := (dbfPreCLiL)->nDtoDiv
               (dbfTmpLin)->nCtlStk    := (dbfPreCLiL)->nCtlStk
               (dbfTmpLin)->dFecHa     := (dbfPreCLiL)->dFecHa
               (dbfTmpLin)->cAlmLin    := (dbfPreCLiL)->cAlmLin
               (dbfTmpLin)->nValImp    := (dbfPreCLiL)->nValImp
               (dbfTmpLin)->cCodImp    := (dbfPreCLiL)->cCodImp
               (dbfTmpLin)->lIvaLin    := (dbfPreCLiL)->lIvaLin
               (dbfTmpLin)->cCodPr1    := (dbfPreCliL)->cCodPr1
               (dbfTmpLin)->cCodPr2    := (dbfPreCliL)->cCodPr2
               (dbfTmpLin)->cValPr1    := (dbfPreCliL)->cValPr1
               (dbfTmpLin)->cValPr2    := (dbfPreCliL)->cValPr2
               (dbfTmpLin)->nCosDiv    := (dbfPreCliL)->nCosDiv
               (dbfTmpLin)->nMesGrt    := (dbfPreCliL)->nMesGrt
               (dbfTmpLin)->lLote      := (dbfPreclil)->llote
               (dbfTmpLin)->nLote      := (dbfPreclil)->nlote
               (dbfTmpLin)->cLote      := (dbfPreclil)->clote
               (dbfTmpLin)->lKitArt    := (dbfPreCliL)->lKitArt
               (dbfTmpLin)->lKitChl    := (dbfPreCliL)->lKitChl
               (dbfTmpLin)->lKitPrc    := (dbfPreCliL)->lKitPrc
               (dbfTmpLin)->lMsgVta    := (dbfPreCliL)->lMsgVta
               (dbfTmpLin)->lNotVta    := (dbfPreCliL)->lNotVta
               (dbfTmpLin)->lImpLin    := (dbfPreCliL)->lImpLin
               (dbfTmpLin)->cCodTip    := (dbfPreCliL)->cCodTip
               (dbfTmpLin)->mObsLin    := (dbfPreCliL)->mObsLin
               (dbfTmpLin)->Descrip    := (dbfPreCliL)->Descrip
               (dbfTmpLin)->cCodPrv    := (dbfPreCliL)->cCodPrv
               (dbfTmpLin)->cNomPrv    := (dbfPreCliL)->cNomPrv
               (dbfTmpLin)->cImagen    := (dbfPreCliL)->cImagen
               (dbfTmpLin)->cCodFam    := (dbfPreCliL)->cCodFam
               (dbfTmpLin)->cGrpFam    := (dbfPreCliL)->cGrpFam
               (dbfTmpLin)->cRefPrv    := (dbfPreCliL)->cRefPrv
               (dbfTmpLin)->dFecEnt    := (dbfPreCliL)->dFecEnt
               (dbfTmpLin)->dFecSal    := (dbfPreCliL)->dFecSal
               (dbfTmpLin)->nPreAlq    := (dbfPreCliL)->nPreAlq
               (dbfTmpLin)->lAlquiler  := (dbfPreCliL)->lAlquiler
               (dbfTmpLin)->cUnidad    := (dbfPreCliL)->cUnidad
               (dbfTmpLin)->nNumMed    := (dbfPreCliL)->nNumMed
               (dbfTmpLin)->nMedUno    := (dbfPreCliL)->nMedUno
               (dbfTmpLin)->nMedDos    := (dbfPreCliL)->nMedDos
               (dbfTmpLin)->nMedTre    := (dbfPreCliL)->nMedTre
               (dbfTmpLin)->nPuntos    := (dbfPreCliL)->nPuntos
               (dbfTmpLin)->nValPnt    := (dbfPreCliL)->nValPnt
               (dbfTmpLin)->nDtoPnt    := (dbfPreCliL)->nDtoPnt
               (dbfTmpLin)->nIncPnt    := (dbfPreCliL)->nIncPnt
               (dbfTmpLin)->lLinOfe    := (dbfPreCliL)->lLinOfe

               (dbfPreCliL)->( dbSkip() )

            end

            ( dbfTmpLin )->( dbGoTop() )





            if ( dbfPreCliI )->( dbSeek( cNumPre ) )

               while ( dbfPreCliI )->cSerPre + Str( ( dbfPreCliI )->nNumPre ) + ( dbfPreCliI )->cSufPre == cNumPre .AND. !( dbfPreCliI )->( Eof() )
                  dbPass( dbfPreCliI, dbfTmpInc, .T. )
                  ( dbfPreCliI )->( dbSkip() )
               end

            end

            ( dbfPreCliI )->( dbGoTop() )



            if ( dbfPreCliD )->( dbSeek( cNumPre ) )

               while ( dbfPreCliD )->cSerPre + Str( ( dbfPreCliD )->nNumPre ) + ( dbfPreCliD )->cSufPre == cNumPre .AND. !( dbfPreCliD )->( Eof() )
                  dbPass( dbfPreCliD, dbfTmpDoc, .T. )
                  ( dbfPreCliD )->( dbSkip() )
               end

            end

            ( dbfPreCliD )->( dbGoTop() )

            oBrw:Refresh()
            oBrw:SetFocus()

         end

         lValid   := .T.

      end

   else

      msgStop( "Presupuesto no existe" )

   end

   RecalculaTotal( aTmp )

RETURN lValid








































































































STATIC FUNCTION ChgSta( oBrw )

   local nRec
   local nRecAlb
   local cNumPed
   local lQuit

   if ApoloMsgNoYes( "Al cambiar el estado perderá la referencia a cualquier documento que esté asociado.", "¿Desea cambiarlo?" )

      for each nRec in ( oBrw:aSelected )

         ( dbfPedCliT )->( dbGoTo( nRec ) )

         lQuit                         := .F.

         cNumPed                       := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT  )->cSufPed





         if dbLock( dbfPedCliT )

            if ( dbfPedCliT )->nEstado == 1
               ( dbfPedCliT )->nEstado := 3
            else
               lQuit                   := .T.
               ( dbfPedCliT )->nEstado := 1
            end

            ( dbfPedCliT )->( dbRUnlock() )

         end

         if lQuit





            nRecAlb  := ( dbfAlbCliT )->( RecNo() )

            if dbSeekInOrd( cNumPed, "cNumPed", dbfAlbCliT )

               while ( dbfAlbCliT )->cNumPed == cNumPed  .AND. !( dbfAlbCliT )->( Eof() )

                  if dbLock( dbfAlbCliT )
                     ( dbfAlbCliT )->cNumPed    := ""
                     ( dbfAlbCliT )->( dbUnLock() )
                  end

                  ( dbfAlbCliT )->( dbSkip() )

               end

            end

            ( dbfAlbCliT )->( dbGoTo( nRecAlb ) )





            nRecAlb  := ( dbfAlbCliL )->( RecNo() )

            if dbSeekInOrd( cNumPed, "cNumPed", dbfAlbCliL )

               while ( dbfAlbCliL )->cNumPed == cNumPed  .AND. !( dbfAlbCliL )->( Eof() )

                  if dbLock( dbfAlbCliL )
                     ( dbfAlbCliL )->cNumPed    := ""
                     ( dbfAlbCliL )->( dbUnLock() )
                  end

                  ( dbfAlbCliL )->( dbSkip() )

               end

            end

            ( dbfAlbCliL )->( dbGoTo( nRecAlb ) )





            nRecAlb  := ( dbfFacCliT )->( RecNo() )

            if dbSeekInOrd( cNumPed, "cNumPed", dbfFacCliT )

               while ( dbfFacCliT )->cNumPed == cNumPed  .AND. !( dbfFacCliT )->( Eof() )

                  if dbLock( dbfFacCliT )
                     ( dbfFacCliT )->cNumPed    := ""
                     ( dbfFacCliT )->( dbUnLock() )
                  end

                  ( dbfFacCliT )->( dbSkip() )

               end

            end

            ( dbfFacCliT )->( dbGoTo( nRecAlb ) )





            nRecAlb  := ( dbfFacCliL )->( RecNo() )

            if dbSeekInOrd( cNumPed, "cNumPed", dbfFacCliL )

               while ( dbfFacCliL )->cNumPed == cNumPed  .AND. !( dbfFacCliL )->( Eof() )

                  if dbLock( dbfFacCliL )
                     ( dbfFacCliL )->cNumPed    := ""
                     ( dbfFacCliL )->( dbUnLock() )
                  end

                  ( dbfFacCliL )->( dbSkip() )

               end

            end

            ( dbfFacCliL )->( dbGoTo( nRecAlb ) )

         end

      next

   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL



static function lGenPedCli( oBrw, oBtn, nDevice )

   local bAction

   IIF( nDevice == nil, nDevice := 1, ) ;

   if Empty( oBtn )
      return nil
   end

   IF !( dbfDoc )->( dbSeek( "PC" ) )







         oWndBrw:NewAt( "DOCUMENT",,, {||( msgStop( "No hay facturas de clientes predefinidas" ) )}, "No hay documentos",,,, 4, oBtn, .F. )

   ELSE

      WHILE ( dbfDoc )->CTIPO == "PC" .AND. !( dbfDoc )->( eof() )

         bAction  := bGenFac( nDevice, "Imprimiendo pedidos de clientes", ( dbfDoc )->CODIGO )

         oWndBrw:NewAt( "Document", , , bAction, Rtrim( ( dbfDoc )->cDescrip ) , , , , , oBtn )

         ( dbfDoc )->( dbSkip() )

      end

   end

   SysRefresh()

return nil



static function bGenFac( nDevice, cTitle, cCodDoc )

   local bGen
   local nDev  := by( nDevice )
   local cTit  := by( cTitle  )
   local cCod  := by( cCodDoc )

   if nDev == 1
      bGen     := {|| GenPedCli( nDev, cTit, cCod ) }
   else
      bGen     := {|| GenPedCli( nDev, cTit, cCod ) }
   end

return ( bGen )



FUNCTION EdmPedCli( cCodRut, cPathTo, oStru, aSucces )

   local cLine
   local cFilEdm
   local oFilEdm
   local dFecPed
   local cCodCli
   local nNumPed

   IIF( cCodRut == nil, cCodRut := "001", ) ;
   IIF( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "PEDID" + cCodRut + ".PSI"





   if !file( cFilEdm )
      msgWait( "No existe el fichero " + cFilEdm, "Atención", 1 )
      return nil
   end

   oFilEdm           := TTxtFile():New( cFilEdm )





   OpenFiles()

   oStru:oMetDos:cText   := "Ped. Clientes"
   oStru:oMetDos:SetTotal( oFilEdm:nTLines )





   cLine    := oFilEdm:cLine





   while ! oFilEdm:lEoF()





      dFecPed  := Ctod( SubStr( cLine,  1, 10 ) )
      cCodCli  := SubStr( cLine, 11,  7 )

      if ( dbfClient )->( dbSeek( cCodCli ) )

         nNumPed                    := nNewDoc( ( dbfClient )->Serie, dbfPedCliT, "NPEDCLI", , dbfCount )
         ( dbfPedCliT )->( dbAppend() )
         ( dbfPedCliT )->cSerPed    := ( dbfClient )->Serie
         ( dbfPedCliT )->cSufPed    := RetSufEmp()
         ( dbfPedCliT )->nNumPed    := nNumPed
         ( dbfPedCliT )->dFecPed    := dFecPed
         ( dbfPedCliT )->cCodAlm    := oUser():cAlmacen()
         ( dbfPedCliT )->cDivPed    := cDivEmp()
         ( dbfPedCliT )->nVdvPed    := nChgDiv( ( dbfPedCliT )->cDivPed, dbfDiv )
         ( dbfPedCliT )->nEstado    := 1
         ( dbfPedCliT )->cCodCli    := ( dbfClient )->Cod
         ( dbfPedCliT )->cNomCli    := ( dbfClient )->Titulo
         ( dbfPedCliT )->cDirCli    := ( dbfClient )->Domicilio
         ( dbfPedCliT )->cPobCli    := ( dbfClient )->Poblacion
         ( dbfPedCliT )->cPrvCli    := ( dbfClient )->Provincia
         ( dbfPedCliT )->cPosCli    := ( dbfClient )->CodPostal
         ( dbfPedCliT )->cDniCli    := ( dbfClient )->Nif
         ( dbfPedCliT )->cCodTar    := ( dbfClient )->cCodTar
         ( dbfPedCliT )->cCodPgo    := ( dbfClient )->CodPago
         ( dbfPedCliT )->cCodAge    := ( dbfClient )->cAgente
         ( dbfPedCliT )->cCodRut    := ( dbfClient )->cCodRut
         ( dbfPedCliT )->nTarifa    := ( dbfClient )->nTarifa
         ( dbfPedCliT )->lRecargo   := ( dbfClient )->lReq
         ( dbfPedCliT )->lOperPv    := ( dbfClient )->lPntVer
         ( dbfPedCliT )->cDtoEsp    := ( dbfClient )->cDtoEsp
         ( dbfPedCliT )->cDpp       := ( dbfClient )->cDpp
         ( dbfPedCliT )->nDtoEsp    := ( dbfClient )->nDtoEsp
         ( dbfPedCliT )->nDpp       := ( dbfClient )->nDpp
         ( dbfPedCliT )->nDtoCnt    := ( dbfClient )->nDtoCnt
         ( dbfPedCliT )->nDtoRap    := ( dbfClient )->nDtoRap
         ( dbfPedCliT )->nDtoUno    := ( dbfClient )->nDtoCnt
         ( dbfPedCliT )->nDtoDos    := ( dbfClient )->nDtoRap

         aAdd( aSucces, { .F., "Nuevo pedido de clientes " + ( dbfPedCliT )->cSerPed + "/" + Str( ( dbfPedCliT )->nNumPed ) + "/" + ( dbfPedCliT )->cSufPed } )

      end







      while dFecPed  == Ctod( SubStr( cLine, 1, 10 ) )      .AND. cCodCli  == SubStr( cLine, 11,  7 )             .AND. ! oFilEdm:lEoF()





         ( dbfPedCliL )->( dbAppend() )
         ( dbfPedCliL )->cSerPed := ( dbfPedCliT )->cSerPed
         ( dbfPedCliL )->nNumPed := ( dbfPedCliT )->nNumPed
         ( dbfPedCliL )->cSufPed := ( dbfPedCliT )->cSufPed
         ( dbfPedCliL )->cRef    := Ltrim( SubStr( cLine, 18, 13 ) )
         ( dbfPedCliL )->cDetalle:= RetFld( ( dbfPedCliL )->cRef, dbfArticulo )
         ( dbfPedCliL )->nPreDiv := Val( SubStr( cLine, 31,  7 ) )
         ( dbfPedClil )->nDtoDiv := Val( SubStr( cLine, 38,  4 ) )
         ( dbfPedClil )->nDto    := Val( SubStr( cLine, 42,  5 ) )
         ( dbfPedClil )->nCanPed := Val( SubStr( cLine, 47,  4 ) )
         ( dbfPedClil )->nUniCaja:= Val( SubStr( cLine, 51,  7 ) )

         oFilEdm:Skip()

         oStru:oMetDos:SetTotal( oFilEdm:nLine )





         cLine    := oFilEdm:cLine

      end

   end

   CloseFiles()

   oFilEdm:Close()

RETURN ( aSucces )



FUNCTION nDtoAtpPedCli( uPedCliT, dbfPedCliL, nDec, nRou, nVdv, lPntVer, lImpTrn )

   local nCalculo
   local nDtoAtp     := 0

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nRou == nil, nRou := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( lPntVer == nil, lPntVer := .F., ) ;
   IIF( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLPedCli( dbfPedCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   if ( uPedCliT )->nSbrAtp <= 1 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoEsp / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 2 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDpp    / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 3 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoUno / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 4 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

   nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoDos / 100, nRou )

   if ( uPedCliT )->nSbrAtp == 5 .AND. ( uPedCliT )->nDtoAtp <> 0
      nDtoAtp     += Round( nCalculo * ( uPedCliT )->nDtoAtp / 100, nRou )
   end

RETURN ( nDtoAtp )







function nTotPdtRec( cPedido, cRef, cValPr1, cValPr2, dbfPedCliR )

   local bWhile
   local nRec     := ( dbfPedCliR )->( Recno() )
   local nTotRes  := 0

   if cPedido == nil
      bWhile      := {|| !( dbfPedCliR )->( eof() ) }
      ( dbfPedCliR )->( dbGoTop() )
   else
      bWhile      := {|| cPedido + ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == cPedido + cRef + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() ) }
      ( dbfPedCliR )->( dbSeek( cPedido + cRef + cValPr1 + cValPr2 ) )
   end

   while Eval( bWhile )

      nTotRes     += nTotNResCli( dbfPedCliR )

      ( dbfPedCliR )->( dbSkip() )

   end

   ( dbfPedCliR )->( dbGoTo( nRec ) )

return ( nTotRes )



function dFecPdtRec( cPedido, cRef, cValPr1, cValPr2, dbfPedCliR )

   local dFecAct  := Ctod( "" )
   local nRec     := ( dbfPedCliR )->( Recno() )

   if ( dbfPedCliR )->( dbSeek( cPedido + cRef + cValPr1 + cValPr2 ) )

      while ( dbfPedCliR )->cSerPed + Str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed == cPedido .AND.  !( dbfPedCliR )->( eof() )

         if Empty( dFecAct ) .OR. dFecAct > ( dbfPedCliR )->dFecRes
            dFecAct  := ( dbfPedCliR )->dFecRes
         end

         ( dbfPedCliR )->( dbSkip() )

      end

   end

   ( dbfPedCliR )->( dbGoTo( nRec ) )

return ( dFecAct )



function dTmpPdtRec( cRef, cValPr1, cValPr2, dbfPedCliR )

   local dFecAct  := Ctod( "" )
   local nRec     := ( dbfPedCliR )->( Recno() )

   ( dbfPedCliR )->( dbGoTop() )
   while !( dbfPedCliR )->( eof() )

      if ( dbfPedCliR )->cRef == cRef .AND. ( dbfPedCliR )->cValPr1 == cValPr1 .AND. ( dbfPedCliR )->cValPr2 == cValPr2

         if Empty( dFecAct ) .OR. dFecAct > ( dbfPedCliR )->dFecRes
            dFecAct  := ( dbfPedCliR )->dFecRes
         end

      end

      ( dbfPedCliR )->( dbSkip() )

   end

   ( dbfPedCliR )->( dbGoTo( nRec ) )

return ( dFecAct )



FUNCTION dFecPedCli( cPedCli, dbfPedCliT )

   local dFecPed  := CtoD("")

   IF ( dbfPedCliT )->( dbSeek( cPedCli ) )
      dFecPed  := ( dbfPedCliT )->dFecPed
   end

RETURN ( dFecPed )















FUNCTION cNbrPedCli( cPedCli, dbfPedCliT )

   local cNomCli  := ""

   IF ( dbfPedCliT )->( dbSeek( cPedCli ) )
      cNomCli  := ( dbfPedCliT )->CNOMCLI
    end

RETURN ( cNomCli )


































function nTotVPedCli( cCodArt, dbfPedCliL, nDec, nDor )

   local nTotVta  := 0
   local nRecno   := ( dbfPedCliL )->( Recno() )

   if ( dbfPedCliL )->( dbSeek( cCodArt ) )

      while ( dbfPedCliL )->CREF == cCodArt .AND. !( dbfPedCliL )->( eof() )

         if !( dbfPedCliL )->LTOTLIN
            nTotVta += nTotLPedCli( dbfPedCliL, nDec, nDor )
         end

         ( dbfPedCliL )->( dbSkip() )

      end

   end

   ( dbfPedCliL )->( dbGoTo( nRecno ) )

return ( nTotVta )













































































































































FUNCTION aDocPedCli( lEntregas )

   local aDoc        := {}

   IIF( lEntregas == nil, lEntregas := .F., ) ;





   aAdd( aDoc, { "Empresa",         "EM" } )
   aAdd( aDoc, { "Pedido",          "PC" } )

   if lEntregas
      aAdd( aDoc, { "Entregas a cuenta",  "EP" } )
   end

   aAdd( aDoc, { "Cliente",         "CL" } )
   aAdd( aDoc, { "Almacen",         "AL" } )
   aAdd( aDoc, { "Obras",           "OB" } )
   aAdd( aDoc, { "Rutas",           "RT" } )
   aAdd( aDoc, { "Agentes",         "AG" } )
   aAdd( aDoc, { "Divisas",         "DV" } )
   aAdd( aDoc, { "Formas de pago",  "PG" } )
   aAdd( aDoc, { "Transportistas",  "TR" } )

RETURN ( aDoc )



function aCalPedCli()




































   local aCalPedCli :=  {{"nTotArt",                                                   "N", 16,  6, "Total artículos",             "cPicUndPed",  "" }, { "nTotCaj",                                                   "N", 16,  6, "Total cajas",                 "cPicUndPed",  "" }, { "aTotIva[1,1]",                                              "N", 16,  6, "Bruto primer tipo de " + cImp(),    "cPorDivPed",  "aTotIva[1,1] != 0" }, { "aTotIva[2,1]",                                              "N", 16,  6, "Bruto segundo tipo de " + cImp(),   "cPorDivPed",  "aTotIva[2,1] != 0" }, { "aTotIva[3,1]",                                              "N", 16,  6, "Bruto tercer tipo de " + cImp(),    "cPorDivPed",  "aTotIva[3,1] != 0" }, { "aTotIva[1,2]",                                              "N", 16,  6, "Base primer tipo de " + cImp(),     "cPorDivPed",  "aTotIva[1,2] != 0" }, { "aTotIva[2,2]",                                              "N", 16,  6, "Base segundo tipo de " + cImp(),    "cPorDivPed",  "aTotIva[2,2] != 0" }, { "aTotIva[3,2]",                                              "N", 16,  6, "Base tercer tipo de " + cImp(),     "cPorDivPed",  "aTotIva[3,2] != 0" }, { "aTotIva[1,3]",                                              "N",  5,  2, "Porcentaje primer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[1,3] != 0" }, { "aTotIva[2,3]",                                              "N",  5,  2, "Porcentaje segundo tipo " + cImp(), "'@R 99.99%'", "aTotIva[2,3] != 0" }, { "aTotIva[3,3]",                                              "N",  5,  2, "Porcentaje tercer tipo " + cImp(),  "'@R 99.99%'", "aTotIva[3,3] != 0" }, { "aTotIva[1,4]",                                              "N",  5,  2, "Porcentaje primer tipo RE",   "'@R 99.99%'", "aTotIva[1,4] != 0" }, { "aTotIva[2,4]",                                              "N",  5,  2, "Porcentaje segundo tipo RE",  "'@R 99.99%'", "aTotIva[2,4] != 0" }, { "aTotIva[3,4]",                                              "N",  5,  2, "Porcentaje tercer tipo RE",   "'@R 99.99%'", "aTotIva[3,4] != 0" }, { "round( aTotIva[1,2] * aTotIva[1,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe primer tipo " + cImp(),     "cPorDivPed",  "aTotIva[1,2] != 0" }, { "round( aTotIva[2,2] * aTotIva[2,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe segundo tipo " + cImp(),    "cPorDivPed",  "aTotIva[2,2] != 0" }, { "round( aTotIva[3,2] * aTotIva[3,3] / 100, nDouDivPed )",    "N", 16,  6, "Importe tercer tipo " + cImp(),     "cPorDivPed",  "aTotIva[3,2] != 0" }, { "round( aTotIva[1,2] * aTotIva[1,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe primer RE",           "cPorDivPed",  "aTotIva[1,2] != 0" }, { "round( aTotIva[2,2] * aTotIva[2,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe segundo RE",          "cPorDivPed",  "aTotIva[2,2] != 0" }, { "round( aTotIva[3,2] * aTotIva[3,4] / 100, nDouDivPed )",    "N", 16,  6, "Importe tercer RE",           "cPorDivPed",  "aTotIva[3,2] != 0" }, { "nTotBrt",                                                   "N", 16,  6, "Total bruto",                 "cPorDivPed",  "lEnd" }, { "nTotDto",                                                   "N", 16,  6, "Total descuento",             "cPorDivPed",  "lEnd" }, { "nTotDpp",                                                   "N", 16,  6, "Total descuento pronto pago", "cPorDivPed",  "lEnd" }, { "nTotNet",                                                   "N", 16,  6, "Total neto",                  "cPorDivPed",  "lEnd" }, { "nTotIva",                                                   "N", 16,  6, "Total " + cImp(),                   "cPorDivPed",  "lEnd" }, { "nTotIvm",                                                   "N", 16,  6, "Total IVMH",                  "cPorDivPed",  "lEnd" }, { "nTotReq",                                                   "N", 16,  6, "Total RE",                    "cPorDivPed",  "lEnd" }, { "nTotPed",                                                   "N", 16,  6, "Total pedido",                "cPorDivPed",  "lEnd" }, { "nTotPag",                                                   "N", 16,  6, "Total entregas a cuenta",     "cPorDivPed",  "lEnd" }, { "nTotCos",                                                   "N", 16,  6, "Total costo",                 "cPorDivPed",  "lEnd" }, { "nTotPes",                                                   "N", 16,  6, "Total peso",                  "'@E 99,999.99'","lEnd" }, { "nTotPage",                                                  "N", 16,  6, "Total página",                "'cPorDivPed'", "!lEnd" }, { "nImpEuros( nTotPed, (cDbf)->cDivPed, cDbfDiv )",            "N", 16,  6, "Total pedido (Euros)",        "",            "lEnd" }, { "nImpPesetas( nTotPed, (cDbf)->cDivPed, cDbfDiv )",          "N", 16,  6, "Total pedido (Pesetas)",      "",            "lEnd" }, { "nPagina",                                                   "N",  2,  0, "Numero de página",            "'99'",        "" }, { "lEnd",                                                      "L",  1,  0, "Fin del documento",           "",            "" } }

return ( aCalPedCli )



function aCocPedCli()






   local aCocPedCli  := {{"Descrip( cDbfCol )",                                         "C", 50, 0, "Detalle del artículo",       "",            "Descripción", "" }, { "nTotNPedCli( cDbfCol ) )",                                   "N", 16, 6, "Total unidades",             "cPicUndPed",  "Unds.",       "" }, { "nTotUPedCli( cDbfCol, nRouDivPed, nVdvDivPed )",             "N", 16, 6, "Precio unitario de pedido",  "cPouDivPed",  "Importe",     "" }, { "nTotLPedCli( cDbfCol, nDouDivPed, nRouDivPed )",             "N", 16, 6, "Total línea de pedido",      "cPorDivPed",  "Total",       "" }, { "nTotFPedCli( cDbfCol, nDouDivPed, nRouDivPed )",             "N", 16, 6, "Total final línea de pedido","cPorDivPed",  "Total",       "" }, { "cFrasePublicitaria( cDbfCol )",                              "C", 50, 0, "Texto de frase publicitaria","",            "Publicidad",  "" } }


return ( aCocPedCli )



STATIC FUNCTION RecPedCli( aTmpPed )

    local nDtoAge
   local nImpAtp  := 0
   local nImpOfe  := 0
   local nRecno
   local cCodFam




   if !ApoloMsgNoYes(   "¡Atención!,"                                      + Chr(13)+Chr(10) +  "todos los precios se recalcularán en función de"  + Chr(13)+Chr(10) +  "los valores en las bases de datos.", "¿Desea proceder?" )
      return nil
   end

   nRecno         := ( dbfTmpLin )->( RecNo() )

   ( dbfArticulo )->( ordSetFocus( "Codigo" ) )

   ( dbfTmpLin )->( dbGotop() )
   while !( dbfTmpLin )->( eof() )





      if ( dbfArticulo )->( dbSeek( ( dbfTmpLin )->cRef ) )

         if aTmpPed[ 50 ] <= 1
            ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )
            ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )
         end





         if !Empty( ( dbfArticulo )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( dbfArticulo )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpPed[ 51 ], ( dbfTmpLin )->nIva )
         end





         if !Empty( ( dbfArticulo )->cCodImp )
            ( dbfTmpLin )->cCodImp  := ( dbfArticulo )->cCodImp
            ( dbfTmpLin )->nValImp  := oNewImp:nValImp( ( dbfArticulo )->cCodImp )
         end





         ( dbfTmpLin )->nPreDiv  := nRetPreArt( ( dbfTmpLin )->nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], dbfArticulo, dbfDiv, dbfKit, dbfIva )





         ( dbfTmpLin )->nPvpRec  := ( dbfArticulo )->PvpRec
         ( dbfTmpLin )->nCosDiv  := nCosto( nil, dbfArticulo, dbfKit )





         ( dbfTmpLin )->nPntVer  := ( dbfArticulo )->nPntVer1





         do case

         case  lSeekAtpArt( aTmpPed[ 6 ] + ( dbfTmpLin )->cRef, ( dbfTmpLin )->cCodPr1 + ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1 + ( dbfTmpLin )->cValPr2, aTmpPed[ 5 ], dbfCliAtp ) .AND.  ( dbfCliAtp )->lAplPed

               nImpAtp  := nImpAtp( ( dbfTmpLin )->nTarLin, dbfCliAtp )
               if nImpAtp <> 0
                  ( dbfTmpLin )->nPreDiv  := nImpAtp
               end

               nImpAtp  := nDtoAtp( ( dbfTmpLin )->nTarLin, dbfCliAtp )
               if nImpAtp <> 0
                  ( dbfTmpLin )->nDto     := nImpAtp
               end

               if ( dbfCliAtp )->nDprArt <> 0
                  ( dbfTmpLin )->nDtoPrm  := ( dbfCliAtp )->nDprArt
               end

               if ( dbfCliAtp )->nComAge <> 0
                  ( dbfTmpLin )->nComAge  := ( dbfCliAtp )->nComAge
               end





         case !Empty( aTmpPed[ 16 ] )

            cCodFam     := ( dbfTmpLin )->cCodFam

            nImpOfe     := RetPrcTar( ( dbfTmpLin )->cRef, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL, ( dbfTmpLin )->nTarLin )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nPreDiv  := nImpOfe
            end

            nImpOfe     := RetPctTar( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, dbfTarPreL )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nDto     := nImpOfe
            end

            nImpOfe     := RetComTar( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 14 ], dbfTarPreL, dbfTarPreS )
            if nImpOfe  <> 0
               ( dbfTmpLin )->nComAge  := nImpOfe
            end






            nImpOfe     := RetDtoPrm( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 5 ], dbfTarPreL )

            if nImpOfe  <> 0
               ( dbfTmpLin )->nDtoPrm  := nImpOfe
            end





            nDtoAge     := RetDtoAge( ( dbfTmpLin )->cRef, cCodFam, aTmpPed[ 16 ], ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, aTmpPed[ 5 ], aTmpPed[ 14 ],  dbfTarPreL, dbfTarPreS )

            if nDtoAge  <> 0
               ( dbfTmpLin )->nComAge  := nDtoAge
            end

         end





         nImpOfe     := nImpOferta( ( dbfTmpLin )->cRef, aTmpPed[ 6 ], aTmpPed[ 64 ], ( dbfTmpLin )->nUniCaja, aTmpPed[ 5 ], dbfOferta, ( dbfTmpLin )->nTarLin, nil, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nPreDiv     := nCnv2Div( nImpOfe, cDivEmp(), aTmpPed[ 46 ], dbfDiv )
         end





         nImpOfe     := nDtoOferta( ( dbfTmpLin )->cRef, aTmpPed[ 6 ], aTmpPed[ 64 ], ( dbfTmpLin )->nUniCaja, aTmpPed[ 5 ], dbfOferta, ( dbfTmpLin )->cCodPr1, ( dbfTmpLin )->cCodPr2, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2 )
         if nImpOfe  <> 0
            ( dbfTmpLin )->nDtoPrm  := nImpOfe
         end

      end

      ( dbfTmpLin )->( dbSkip() )

   end

   ( dbfTmpLin )->( dbGoTo( nRecno ) )

return nil



FUNCTION QuiPedCli()

   local nOrdDet
   local nOrdPgo
   local nOrdRes
   local nOrdInc
   local nOrdDoc

   if ( dbfPedCliT )->lCloPed .AND. !oUser():lAdministrador()
      msgStop( "Solo puede eliminar pedidos cerrados los administradores." )
      Return .F.
   end

   nOrdDet        := ( dbfPedCliL )->( OrdSetFocus( "NNUMPED" ) )
   nOrdPgo        := ( dbfPedCliP )->( OrdSetFocus( "NNUMPED" ) )
   nOrdRes        := ( dbfPedCliR )->( OrdSetFocus( "NNUMPED" ) )
   nOrdInc        := ( dbfPedCliI )->( OrdSetFocus( "NNUMPED" ) )
   nOrdDoc        := ( dbfPedCliD )->( OrdSetFocus( "NNUMPED" ) )





   if !Empty( dbfPreCliT )
      if dbSeekInOrd( ( dbfPedCliT )->cNumPre, "nNumPre", dbfPreCliT ) .AND. ( dbfPreCliT )->( dbRLock() )
         ( dbfPreCliT )->lEstado := .F.
         ( dbfPreCliT )->( dbUnLock() )
      end
   end





   while ( dbfPedCliL )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) ) .AND. !( dbfPedCliL )->( eof() )
      if dbLock( dbfPedCliL )
         ( dbfPedCliL )->( dbDelete() )
         ( dbfPedCliL )->( dbUnLock() )
      end
   end





   while ( dbfPedCliR )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) ) .AND. !( dbfPedCliR )->( eof() )
      if dbLock( dbfPedCliR )
         ( dbfPedCliR )->( dbDelete() )
         ( dbfPedCliR )->( dbUnLock() )
      end
   end





   while ( dbfPedCliP )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) ) .AND. !( dbfPedCliP )->( eof() )
      if dbDialogLock( dbfPedCliP )
         ( dbfPedCliP )->( dbDelete() )
         ( dbfPedCliP )->( dbUnLock() )
      end
   end





   while ( dbfPedCliI )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT  )->cSufPed ) ) .AND. !( dbfPedCliI )->( eof() )
      if dbLock( dbfPedCliI )
         ( dbfPedCliI )->( dbDelete() )
         ( dbfPedCliI )->( dbUnLock() )
      end
   end





   while ( dbfPedCliD )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT  )->cSufPed ) ) .AND. !( dbfPedCliD )->( eof() )
      if dbLock( dbfPedCliD )
         ( dbfPedCliD )->( dbDelete() )
         ( dbfPedCliD )->( dbUnLock() )
      end
   end

   ( dbfPedCliL )->( OrdSetFocus( nOrdDet ) )
   ( dbfPedCliP )->( OrdSetFocus( nOrdPgo ) )
   ( dbfPedCliR )->( OrdSetFocus( nOrdRes ) )
   ( dbfPedCliI )->( OrdSetFocus( nOrdInc ) )
   ( dbfPedCliD )->( OrdSetFocus( nOrdDoc ) )

Return ( .T. )



Function SynPedCli( cPath )

   local aTotPed

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if OpenFiles()

      while !( dbfPedCliT )->( eof() )

         if Empty( ( dbfPedCliT )->cCodCaj )
            if dbLock( dbfPedCliT )
               ( dbfPedCliT )->cCodCaj := "000"
               ( dbfPedCliT )->( dbUnLock() )
            end
         end

         if !( ( dbfPedCliT )->cSerPed >= "A" .AND. ( dbfPedCliT )->cSerPed <= "Z" )
            if dbLock( dbfPedCliT )
               ( dbfPedCliT )->( dbDelete() )
               ( dbfPedCliT )->( dbUnLock() )
            end
         end





         if ( dbfPedCliT )->nTotPed == 0 .AND. dbLock( dbfPedCliT )

            aTotPed                 := aTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, ( dbfPedCliT )->cDivPed )

            ( dbfPedCliT )->nTotNet := aTotPed[1]
            ( dbfPedCliT )->nTotIva := aTotPed[2]
            ( dbfPedCliT )->nTotReq := aTotPed[3]
            ( dbfPedCliT )->nTotPed := aTotPed[4]

            ( dbfPedCliT )->( dbUnLock() )

         end

         ( dbfPedCliT )->( dbSkip() )

      end

      while !( dbfPedCliL )->( eof() )

         if !( dbfPedCliT )->( dbSeek( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed ) )

            if dbLock( dbfPedCliL )
               ( dbfPedCliL )->( dbDelete() )
               ( dbfPedCliL )->( dbUnLock() )
            end

         else

            if Empty( ( dbfPedCliL )->cLote ) .AND. !Empty( ( dbfPedCliL )->nLote )
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->cLote   := AllTrim( Str( ( dbfPedCliL )->nLote ) )
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

            if ( dbfPedCliL )->lIvaLin == ( dbfPedCliT )->lIvaInc
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->lIvaLin := ( dbfPedCliT )->lIvaInc
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

            if !Empty( ( dbfPedCliL )->cRef ) .AND. Empty( ( dbfPedCliL )->cCodFam )
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->cCodFam := RetFamArt( ( dbfPedCliL )->cRef, dbfArticulo )
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

            if !Empty( ( dbfPedCliL )->cRef ) .AND. !Empty( ( dbfPedCliL )->cCodFam )
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->cGrpFam := cGruFam( ( dbfPedCliL )->cCodFam, dbfFamilia )
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

            if Empty( ( dbfPedCliL )->nReq )
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->nReq    := nPReq( dbfIva, ( dbfPedCliL )->nIva )
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

         end

         ( dbfPedCliL )->( dbSkip() )

         SysRefresh()

      end

      while !( dbfPedCliI )->( eof() )

         if !( dbfPedCliT )->( dbSeek( ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed ) )
            if dbLock( dbfPedCliI )
               ( dbfPedCliI )->( dbDelete() )
               ( dbfPedCliI )->( dbUnLock() )
            end
         end
         ( dbfPedCliI )->( dbSkip() )
         SysRefresh()

      end

      CloseFiles()

   end

return nil



_HB_CLASS TPedidosClientesSenderReciver ; UTILITY FUNCTION TPedidosClientesSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TPedidosClientesSenderReciver" , {TSenderReciverItem():classh} ) ) ; ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @TPedidosClientesSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @TPedidosClientesSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER RestoreData(); IIF( .F., s_oClass:ModMethod( "RestoreData", @TPedidosClientesSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RestoreData", @TPedidosClientesSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SendData(); IIF( .F., s_oClass:ModMethod( "SendData", @TPedidosClientesSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SendData", @TPedidosClientesSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ReciveData(); IIF( .F., s_oClass:ModMethod( "ReciveData", @TPedidosClientesSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReciveData", @TPedidosClientesSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Process(); IIF( .F., s_oClass:ModMethod( "Process", @TPedidosClientesSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Process", @TPedidosClientesSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TPedidosClientesSenderReciver ;



UTILITY STATIC function TPedidosClientesSenderReciver_CreateData() ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local lSnd              := .F.
   local dbfPedCliT
   local dbfPedCliL
   local dbfPedCliI
   local tmpPedCliT
   local tmpPedCliL
   local tmpPedCliI
   local cFileName         := "PedCli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()

   ::oSender:SetText( "Enviando pedidos de clientes" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @dbfPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   rxPedCli( cPatSnd() )

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @tmpPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @tmpPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @tmpPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfPedCliT )->( LastRec() )
   end

   while !( dbfPedCliT )->( eof() )

      if ( dbfPedCliT )->lSndDoc

         lSnd  := .T.

         dbPass( dbfPedCliT, tmpPedCliT, .T. )
         ::oSender:SetText( ( dbfPedCliT )->cSerPed + "/" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + AllTrim( ( dbfPedCliT )->cSufPed ) + "; " + Dtoc( ( dbfPedCliT )->dFecPed ) + "; " + AllTrim( ( dbfPedCliT )->cCodCli ) + "; " + ( dbfPedCliT )->cNomCli )

         if ( dbfPedCliL )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )
            while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed ) == ( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) .AND. !( dbfPedCliL )->( eof() )
               dbPass( dbfPedCliL, tmpPedCliL, .T. )
               ( dbfPedCliL )->( dbSkip() )
            end
         end

         if ( dbfPedCliI )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )
            while ( ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed ) == ( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) .AND. !( dbfPedCliI )->( eof() )
               dbPass( dbfPedCliI, tmpPedCliI, .T. )
               ( dbfPedCliI )->( dbSkip() )
            end
         end

      end

      ( dbfPedCliT )->( dbSkip() )

      if !Empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfPedCliT )->( OrdKeyNo() ) )
      end

   end

   ( dbfPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( tmpPedCliT )->( dbCloseArea() )
   ( tmpPedCliL )->( dbCloseArea() )
   ( tmpPedCliI )->( dbCloseArea() )

   if lSnd





      ::oSender:SetText( "Comprimiendo pedidos de clientes" )

      if ::oSender:lZipData( cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay pedidos de clientes para enviar" )

   end

Return ( Self )



UTILITY STATIC function TPedidosClientesSenderReciver_RestoreData() ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local dbfPedCliT

   if ::lSuccesfullSend





      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.Dbf" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfPedCliT )->( OrdSetFocus( "lSndDoc" ) )

      while ( dbfPedCliT )->( dbSeek( .T. ) ) .AND. !( dbfPedCliT )->( eof() )
         if ( dbfPedCliT )->( dbRLock() )
            ( dbfPedCliT )->lSndDoc := .F.
            ( dbfPedCliT )->( dbRUnlock() )
         end
      end

      ( dbfPedCliT )->( dbCloseArea() )

   end

Return ( Self )



UTILITY STATIC function TPedidosClientesSenderReciver_SendData() ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local cFileName         := "PedCli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()

   if File( cPatOut() + cFileName )





      if ftpSndFile( cPatOut() + cFileName, cFileName, 2000, ::oSender )
         ::lSuccesfullSend := .T.
         ::IncNumberToSend()
         ::oSender:SetText( "Fichero enviado " + cFileName )
      else
         ::oSender:SetText( "ERROR al enviar fichero" )
      end

   end

Return ( Self )



UTILITY STATIC function TPedidosClientesSenderReciver_ReciveData() ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local n
   local aExt        := aRetDlgEmp()





   ::oSender:SetText( "Recibiendo pedidos de clientes" )

   for n := 1 to len( aExt )
      ftpGetFiles( "PedCli*." + aExt[ n ], cPatIn(), 2000, ::oSender )
   next

   ::oSender:SetText( "Pedidos de clientes recibidos" )

Return Self



UTILITY STATIC function TPedidosClientesSenderReciver_Process() ; local Self AS CLASS TPedidosClientesSenderReciver := QSelf() AS CLASS TPedidosClientesSenderReciver

   local m
   local oBlock
   local oError
   local dbfPedCliT
   local dbfPedCliL
   local dbfPedCliI
   local tmpPedCliT
   local tmpPedCliL
   local tmpPedCliI
   local aFiles      := Directory( cPatIn() + "PedCli*.*" )

   for m := 1 to len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )

      oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

      BEGIN SEQUENCE

         if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )







            if file( cPatSnd() + "PedCliT.DBF" )   .AND. file( cPatSnd() + "PedCliL.DBF" )   .AND. file( cPatSnd() + "PedCliI.DBF" )

               dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @tmpPedCliT ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
               if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @tmpPedCliL ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
               if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @tmpPedCliI ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
               if !lAIS() ; ordListAdd( ( cPatSnd() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @dbfPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
               if !lAIS() ; ordListAdd( ( cPatEmp() + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

               while ( tmpPedCliT )->( !eof() )


                  if lValidaOperacion( ( tmpPedCliT )->dFecPed, .F. ) .AND.  !( dbfPedCliT )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )

                     dbPass( tmpPedCliT, dbfPedCliT, .T. )
                     ::oSender:SetText( "Añadido     : " + ( tmpPedCliL )->cSerPed + "/" + AllTrim( Str( ( tmpPedCliL )->nNumPed ) ) + "/" + AllTrim( ( tmpPedCliL )->cSufPed ) + "; " + Dtoc( ( tmpPedCliT )->dFecPed ) + "; " + AllTrim( ( tmpPedCliT )->cCodCli ) + "; " + ( tmpPedCliT )->cNomCli )

                     if ( tmpPedCliL )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                        while ( tmpPedCliL )->cSerPed + Str( ( tmpPedCliL )->nNumPed ) + ( tmpPedCliL )->cSufPed == ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed .AND. !( tmpPedCliL )->( eof() )
                           dbPass( tmpPedCliL, dbfPedCliL, .T. )
                           ( tmpPedCliL )->( dbSkip() )
                        end
                     end

                     if ( tmpPedCliI )->( dbSeek( ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed ) )
                        while ( tmpPedCliI )->cSerPed + Str( ( tmpPedCliI )->nNumPed ) + ( tmpPedCliI )->cSufPed == ( tmpPedCliT )->cSerPed + Str( ( tmpPedCliT )->nNumPed ) + ( tmpPedCliT )->cSufPed .AND. !( tmpPedCliI )->( eof() )
                           dbPass( tmpPedCliI, dbfPedCliI, .T. )
                           ( tmpPedCliI )->( dbSkip() )
                        end
                     end

                  else

                     ::oSender:SetText( "Desestimado : " + ( tmpPedCliL )->cSerPed + "/" + AllTrim( Str( ( tmpPedCliL )->nNumPed ) ) + "/" + AllTrim( ( tmpPedCliL )->cSufPed ) + "; " + Dtoc( ( tmpPedCliT )->dFecPed ) + "; " + AllTrim( ( tmpPedCliT )->cCodCli ) + "; " + ( tmpPedCliT )->cNomCli )

                  end

                  ( tmpPedCliT )->( dbSkip() )

               end

               ( dbfPedCliT )->( dbCloseArea() )
               ( dbfPedCliL )->( dbCloseArea() )
               ( dbfPedCliI )->( dbCloseArea() )
               ( tmpPedCliT )->( dbCloseArea() )
               ( tmpPedCliL )->( dbCloseArea() )
               ( tmpPedCliI )->( dbCloseArea() )

            else

               ::oSender:SetText( "Faltan ficheros" )

            end

            fErase( cPatSnd() + "PedCliT.DBF" )
            fErase( cPatSnd() + "PedCliL.DBF" )
            fErase( cPatSnd() + "PedCliI.DBF" )

         else

            ::oSender:SetText( "Error al descomprimir los ficheros" )

         end

         ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

      RECOVER USING oError

         ( dbfPedCliT )->( dbCloseArea() )
         ( dbfPedCliL )->( dbCloseArea() )
         ( dbfPedCliI )->( dbCloseArea() )
         ( tmpPedCliT )->( dbCloseArea() )
         ( tmpPedCliL )->( dbCloseArea() )
         ( tmpPedCliI )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return Self



function aColTmpLin()

   local aColTmpLin  := {}

   aAdd( aColTmpLin, { "CREF",    "C",   18,  0, "Referencia del artículo",         "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CDETALLE","C",  250,  0, "Nombre del artículo",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "LSELART", "L",    1,  0, "Lógico de selección de artículo", "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CCODPRV", "C",   12,  0, "Código de proveedor",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CCODPR1", "C",   10,  0, "Código propiedad 1",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CCODPR2", "C",   10,  0, "Código propiedad 2",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CVALPR1", "C",   10,  0, "Valor propiedad 1",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CVALPR2", "C",   10,  0, "Valor propiedad 2",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NNUMUNI", "N",   16,  6, "Unidades pedidas",                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NNUMCAJ", "N",   16,  6, "Cajas pedidas",                   "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NSTKFIS", "N",   16,  6, "Stock fisico",                    "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NSTKDIS", "N",   16,  6, "Stock disponible",                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "LSHOW",   "L",    1,  0, "Lógico de mostrar",               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NIVA",    "N",    6,  2, "Porcentaje de " + cImp(),               "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NREQ",    "N",    6,  2, "Porcentaje de recargo",           "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NPREDIV", "N",   16,  6, "Precio del artículo",             "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NDTO",    "N",    6,  2, "Descuento del producto",          "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NDTOPRM", "N",    6,  2, "Descuento de promoción",          "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CUNIDAD", "C",    2,  0, "Unidad de medición",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "LLOTE",   "L",    1,  0, "",                                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "NLOTE",   "N",    9,  0, "",                                "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CLOTE",   "C",   12,  0, "Número de lote",                  "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "MOBSLIN", "M",   10,  0, "Observaciones de lineas",         "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "CREFPRV", "C",   18,  0, "Referencia proveedor",            "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "cUnidad", "C",    2,  0, "Unidad de medición",              "",         "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedUno", "N",   16,  6, "Primera unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedDos", "N",   16,  6, "Segunda unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )
   aAdd( aColTmpLin, { "nMedTre", "N",   16,  6, "Tercera unidad de medición",      "MasUnd()", "", "( cDbfCol )" } )

return ( aColTmpLin )



function aColTmpFin()

   local aColTmpFin  := {}

   aAdd( aColTmpFin, { "CSERIE",  "C",    1,  0, "Serie del documento",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "NNUMERO", "N",    9,  0, "Número del documento",            "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "CSUFIJO", "C",    2,  0, "Sufijo del documento",            "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "DFECDOC", "D",    8,  0, "Fecha del documento",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "CCODPRV", "C",   12,  0, "Código de proveedor",             "",  "", "( cDbfCol )" } )
   aAdd( aColTmpFin, { "CNOMPRV", "C",   30,  0, "Nombre de proveedor",             "",  "", "( cDbfCol )" } )

return ( aColTmpFin )



FUNCTION BrwArtPed( aGet, dbfTmpPedLin, dbfDiv, dbfIva )

    local oDlg
    local oBrw
    local oGet1
    local cGet1
    local oCbxOrd
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }
   local nRecAnt     := ( dbfTmpPedLin )->( recno() )
   local nOrdAnt     := ( dbfTmpPedLin )->( OrdSetFocus( 1 ) )

   ( dbfTmpPedLin )->( DbGoTop() )

   oDlg = TDialog():New(,,,, "Artículos", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )







      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||    ( OrdClearScope( oBrw, dbfTmpPedLin ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfTmpPedLin, .T. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfTmpPedLin )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )













      oBrw := TWBrowse():ReDefine( 105, {|| { (dbfTmpPedLin)->cRef, (dbfTmpPedLin)->cDetalle } }, oDlg, {"Código" , "Nombre"}, {90 , 300},,,,,,,,,,,, .F., ( dbfTmpPedLin ),,,, )

         oBrw:aActions     := {| nCol | lPressCol( nCol, oBrw, oCbxOrd, aCbxOrd, dbfTmpPedLin ) }
         oBrw:aJustify     := { .F., .F. }
         oBrw:bLDblClick   := {|| oDlg:end( 1 ) }





      TButton():ReDefine( 500, {||( oDlg:end() )}, oDlg,,, .F., {||     ( .F. )},,, .F. )





      TButton():ReDefine( 501, {||( oDlg:end() )}, oDlg,,, .F., {||     ( .F. )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      aGet:cText( ( dbfTmpPedLin )->cRef )
      aGet:lValid()
   end

   ( dbfTmpPedLin )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTmpPedLin )->( dbGoTo( nRecAnt ) )

RETURN oDlg:nResult == 1




Static Function lCheckGenerado( cSerie, nNumero, cSufijo, cCodArt, cCodPr1, cCodPr2, cDetalle )

   local lCheck   := .T.
   local nOrdAnt  := ( dbfPedPrvT )->( OrdSetFocus( "CPEDCLI" ) )
   local nOrdAnt2 := ( dbfPedPrvL )->( OrdSetFocus( "NNUMPED" ) )

   ( dbfPedPrvT )->( dbGoTop() )

   if (dbfPedPrvT)->( dbSeek( cSerie + Str( nNumero ) + cSufijo ) )


      while ( dbfPedPrvT )->cNumPedCli == cSerie + Str( nNumero ) + cSufijo .AND. !( dbfPedPrvT )->( eof() )

          if ( dbfPedPrvL )->( dbSeek( ( dbfPedPrvT )->cSerPed + Str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed ) )


          while ( dbfPedPrvT )->cSerPed + str( ( dbfPedPrvT )->nNumPed ) + ( dbfPedPrvT )->cSufPed == ( dbfPedPrvL )->cSerPed + str( ( dbfPedPrvL )->nNumPed ) + ( dbfPedPrvL )->cSufPed .AND. !( dbfPedPrvL )->( eof() )

                  if ( dbfPedPrvL )->cRef + ( dbfPedPrvL )->cCodPr1 + ( dbfPedPrvL )->cCodPr2 + ( dbfPedPrvL )->cDetalle == cCodArt + cCodPr1 + cCodPr2 + cDetalle
                     lCheck   := .F.
                  end

                  ( dbfPedPrvL )->( dbSkip() )

              end

          end

          ( dbfPedPrvT )->( dbSkip() )

      end

   end

   ( dbfPedPrvT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfPedPrvL )->( OrdSetFocus( nOrdAnt2 ) )
   ( dbfPedPrvT )->( dbGoTop() )

return lCheck



static function CambiaAnulado( aGet, aTmp )

   if aTmp[55]

      aGet[56]:cText( GetSysDate() )
      aTmp[57]   := ""

   else

      aGet[56]:cText( Ctod( "" ) )
      aTmp[57]   := ""

   end

return .T.



Function Ped2FacCli( cNumPed )

   local cNumFac
   local dbfFacCliT

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIT.DBF" ), ( cCheckArea( "FACCLIT", @dbfFacCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfFacCliT )->( OrdSetFocus( "cNumPed" ) )

   if ( dbfFacCliT )->( dbSeek( cNumPed ) )
      cNumFac     := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac
   end

   if !Empty( cNumFac )
      EdtFacCli( cNumFac )
   else
      msgStop( "No hay factura asociada" )
   end

   ( dbfFacCliT )->( dbCloseArea() )

Return nil



Function AppPedCli( cCodCli, cCodArt, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli( nil, nil, cCodCli, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( .T. )
         nTotPedCli()
         WinAppRec( nil, bEdtRec, dbfPedCliT, cCodCli, cCodArt )
         CloseFiles()
      end

   end

RETURN .T.



Function EdtPedCli( cNumPed, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            nTotPedCli()
            WinEdtRec( nil, bEdtRec, dbfPedCliT )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION ZooPedCli( cNumPed, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 8 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            nTotPedCli()
            WinZooRec( nil, bEdtRec, dbfPedCliT )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION DelPedCli( cNumPed, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 16 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            WinDelRec( nil, dbfPedCliT, {|| QuiPedCli() } )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            nTotPedCli()
            WinDelRec( nil, dbfPedCliT, {|| QuiPedCli() } )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION PrnPedCli( cNumPed, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            GenPedCli( 1 )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            nTotPedCli()
            GenPedCli( 1 )
         end

         CloseFiles()

      end

   end

Return .T.



FUNCTION VisPedCli( cNumPed, lOpenBrowse )

   local nLevel         := nLevelUsr( "01056" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if PedCli()
         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            GenPedCli( 2 )
         else
            MsgStop( "No se encuentra pedido" )
         end
      end

   else

      if OpenFiles( .T. )

         if dbSeekInOrd( cNumPed, "nNumPed", dbfPedCliT )
            nTotPedCli()
            GenPedCli( 2 )
         end

         CloseFiles()

      end

   end

Return .T.



Static Function DesgPnt( cCodArt, aTmp, nTarifa, oPreDiv, oCosDiv, nMode )

   local oDlg
   local oPuntos
   local oValorPunto
   local oDtoPnt
   local oIncPnt
   local oImporte
   local nPuntos     := 0
   local nValorPunto := 0
   local nDtoPnt     := 0
   local nIncPnt     := 0





   if Empty( cCodArt )
      MsgInfo( "Debe seleccinar un artículo", "Código vacío" )
      return .F.
   end





   nPuntos           := aTmp[ 66 ]
   nValorPunto       := aTmp[ 67 ]
   nDtoPnt           := aTmp[ 68 ]
   nIncPnt           := aTmp[ 69 ]

   oDlg = TDialog():New(,,,, "Desglose de puntos", "DESGPUNTOS",, .F.,,,,,, .F.,,,,,, .F., )







   oPuntos := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, nPuntos, nPuntos:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )







   oValorPunto := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, nValorPunto, nValorPunto:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,,,,, nil,,, )









   oDtoPnt := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, nDtoPnt, nDtoPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )









   oIncPnt := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, nIncPnt, nIncPnt:= u ) }, oDlg,, "999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oImporte:Refresh() ) }, .F., .T.,,, {||      0}, {||      100},, nil,,, )





   oImporte := TSay():ReDefine( 240, {|| nCalculoPuntos( nPuntos, nValorPunto, nDtoPnt, nIncPnt )}, oDlg, cPouDiv, "N/W*",, .F.,, .F., .F. )





   TButton():ReDefine( 500, {||( EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )




   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndDesgPnt( cCodArt, nTarifa, oPreDiv, oImporte, dbfArticulo, nDouDiv ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      aTmp[ 66 ]     := nPuntos
      aTmp[ 67 ]     := nValorPunto
      aTmp[ 68 ]     := nDtoPnt
      aTmp[ 69 ]     := nIncPnt

      oCosDiv:cText( oImporte:VarGet() )
      oCosDiv:Refresh()

   end

Return ( .T. )



Static Function PedCliNotas()

   local cObserv  := ""
   local aData    := {}

   aAdd( aData, "Pedido " + ( dbfPedCliT )->cSerPed + "/" + AllTrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + Alltrim( ( dbfPedCliT )->cSufPed ) + " de " + Rtrim( ( dbfPedCliT )->cNomCli ) )
   aAdd( aData, "09" )
   aAdd( aData, ( dbfPedCliT )->cCodCli )
   aAdd( aData, ( dbfPedCliT )->cNomCli )
   aAdd( aData, ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed )

   if ( dbfClient )->( dbSeek( ( dbfPedCliT )->cCodCli ) )

      if !Empty( ( dbfClient )->cPerCto )
         cObserv  += Rtrim( ( dbfClient )->cPerCto ) + Space( 1 )
      end

      if !Empty( ( dbfClient )->Telefono )
         cObserv  += "Télefono : " + Rtrim( ( dbfClient )->Telefono ) + Space( 1 )
      end

      if !Empty( ( dbfClient )->Movil )
         cObserv  += "Móvil : " + Rtrim( ( dbfClient )->Movil ) + Space( 1 )
      end

      if !Empty( ( dbfClient )->Fax )
         cObserv  += "Fax : " + Rtrim( ( dbfClient )->Fax ) + Space( 1 )
      end

   end

   aAdd( aData, cObserv )

   GenerarNotas( aData )

Return ( nil )




STATIC FUNCTION PrnEntregas( lPrint, dbfPedCliP )

    local oDlg
   local oFmtEnt
   local cFmtEnt     := cFormatoDocumento(   nil, "NENTPED", dbfCount )
   local oSayEnt
   local cSayEnt
   local aPrinters   := GetPrinters()
   local cPrinter    := PrnGetName()
   local oPrinter
   local oCopPrn
   local nCopPrn     := nCopiasDocumento(    nil, "NENTPED", dbfCount )

   cSayEnt           := cNombreDoc( cFmtEnt )

   IIF( lPrint == nil, lPrint := .T., ) ;

   oDlg = TDialog():New(,,,,, "IMPSERENT",, .F.,,,,,, .F.,,,,,, .F., )







   oFmtEnt := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFmtEnt, cFmtEnt:= u ) }, oDlg,,, {||    ( cDocumento( oFmtEnt, oSayEnt ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oFmtEnt, oSayEnt, "EP" ) )}, nil, "LUPA",, )





   oSayEnt := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayEnt, cSayEnt:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




   oPrinter := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cPrinter, cPrinter:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   TBtnBmp():ReDefine( 111, "Printer_preferences_16",,,,,{|| PrinterPreferences( oPrinter ) }, oDlg, .F., , .F.,  )








   oCopPrn := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nCopPrn, nCopPrn:= u ) }, oDlg,, "999999999", {||    nCopPrn > 0},,,,,, .F.,,, .F., .T.,,, {||      1}, {||      99999},, nil,,, )




   TButton():ReDefine( 500, {||( GenPrnEntregas( lPrint, cFmtEnt, cPrinter, if( lPrint, nCopPrn, 1 ), dbfPedCliP ), oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart := {|| if( !lPrint, oCopPrn:Disable(), oCopPrn:Enable() ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

return nil




static function GenPrnEntregas( lPrint, cFmtEnt, cPrinter, nCopies, dbfPedCliP )

   local n              := 1
   local oInf
   local oDevice
   local cCaption       := "Imprimiendo entrega a cuenta"
   local nRecno         := ( dbfPedCliP )->( Recno() )

   IIF( lPrint == nil, lPrint := .T., ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;

   if Empty( cFmtEnt )
      MsgStop( "Es necesario elegir un formato" )
      return nil
   end

   if !lExisteDocumento( cFmtEnt, dbfDoc )
      return nil
   end

   if lVisualDocumento( cFmtEnt, dbfDoc )

      PrintReportEntPedCli( if( lPrint, 1, 2 ), nCopies, cPrinter, dbfDoc, dbfPedCliP )

   else

      private cDbf         := dbfPedCliT
      private cDbfEnt      := dbfPedCliP
      private cCliente     := dbfClient
      private cDbfCli      := dbfClient
      private cFPago       := dbfFPago
      private cDbfPgo      := dbfFPago
      private cDbfAge      := dbfAgent
      private cDbfDiv      := dbfDiv
      private cPorDivEnt   := cPorDiv( ( dbfPedCliP )->cDivPgo, dbfDiv )

      while n <= nCopies

         if !Empty( cPrinter )
            oDevice           := TPrinter():New( cCaption, .F., .T., cPrinter )
            oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .F.,, oDevice, cCaption,,, )
         else
            oInf := RptBegin({}, {}, {}, {}, {}, .F.,,,, .T.,,, cCaption,,, )
         end

         if !Empty( oInf ) .AND. oInf:lCreated
            oInf:lFinish      := .F.
            oInf:lAutoland    := .T.
            oInf:lNoCancel    := .T.
            oInf:bSkip        := {|| .T. }

            if lPrint
               oInf:bPreview  := {| oDevice | PrintPreview( oDevice ) }
            end
         end

         SetMargin( cFmtEnt, oInf )
         PrintColum( cFmtEnt, oInf )

         RptEnd()

         if !Empty( oInf )

            private nPagina   := oInf:nPage
            private lEnd      := oInf:lFinish



            oInf:Activate(, {||       ( .F. )},,,, {||  ( PrintItems( cFmtEnt, oInf ) )},,,,,,,, )

            if lPrint
               oInf:oDevice:end()
            end

         end

         ( dbfPedCliP )->( dbGoTo( nRecno ) )

         oInf              := nil

         n++

      end

   end

Return nil



FUNCTION PrnEntPed( cNumEnt, lPrint, dbfPedCliP )

   local nLevel         := nLevelUsr( "01056" )

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 32 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if OpenFiles( .T. )

      if dbSeekInOrd( cNumEnt, "nNumPed", dbfPedCliP )
         PrnEntregas( lPrint, dbfPedCliP )
      end

      CloseFiles()

   end

Return .T.





STATIC FUNCTION DupSerie( oWndBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local oTxtDup
   local nTxtDup     := 0
   local nRecno      := ( dbfPedCliT )->( Recno() )
   local nOrdAnt     := ( dbfPedCliT )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( dbfPedCliT )->cSerPed, ( dbfPedCliT )->nNumPed, ( dbfPedCliT )->cSufPed, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel
   local oFecDoc
   local cFecDoc     := GetSysDate()




   oDlg = TDialog():New(,,,, "Duplicar series de pedidos", "DUPSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F., )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oFecDoc := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cFecDoc, cFecDoc:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oTxtDup := TMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDup, nTxtDup:= u ) }, ( dbfPedCliT )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

      oDlg:AddFastKey( 116, {|| DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, @lCancel, cFecDoc ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( dbfPedCliT )->( dbGoTo( nRecNo ) )
   ( dbfPedCliT )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DupStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDup, lCancel, cFecDoc )

   local nOrd
   local nDuplicados    := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( dbfPedCliT )->( OrdSetFocus( "nNumPed" ) )

      ( dbfPedCliT )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )

      while !lCancel .AND. ( dbfPedCliT )->( !eof() )






         if ( dbfPedCliT )->cSerPed >= oDesde:cSerieInicio  .AND. ( dbfPedCliT )->cSerPed <= oDesde:cSerieFin     .AND. ( dbfPedCliT )->nNumPed >= oDesde:nNumeroInicio .AND. ( dbfPedCliT )->nNumPed <= oDesde:nNumeroFin    .AND. ( dbfPedCliT )->cSufPed >= oDesde:cSufijoInicio .AND. ( dbfPedCliT )->cSufPed <= oDesde:cSufijoFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed

            DupPedido( cFecDoc )

         end

         ( dbfPedCliT )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( dbfPedCliT )->( OrdSetFocus( nOrd ) )

   else

      nOrd              := ( dbfPedCliT )->( OrdSetFocus( "dFecPed" ) )

      ( dbfPedCliT )->( dbSeek( oDesde:dFechaInicio, .T. ) )

      while !lCancel .AND. ( dbfPedCliT )->( !eof() )


         if ( dbfPedCliT )->dFecPed >= oDesde:dFechaInicio  .AND. ( dbfPedCliT )->dFecPed <= oDesde:dFechaFin

            ++nDuplicados

            oTxtDup:cText  := "Duplicando : " + ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed

            DupPedido( cFecDoc )

         end

         ( dbfPedCliT )->( dbSkip() )

         ++nProcesed

         oTxtDup:Set( nProcesed )

      end

      ( dbfPedCliT )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros duplicados : " + Str( nDuplicados ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



STATIC FUNCTION PedRecDup( cDbf, xField1, xField2, xField3, lCab, cFecDoc )

   local nRec           := ( cDbf )->( Recno() )
   local aTabla         := {}
   local nOrdAnt

   IIF( lCab == nil, lCab := .F., ) ;

   aTabla               := DBScatter( cDbf )
   aTabla[ 1 ]   := xField1
   aTabla[ 2 ]   := xField2
   aTabla[ 3 ]   := xField3

   if lCab

      aTabla[ 4     ]  := cCurSesion()
      if !Empty( cFecDoc )
         aTabla[ 5  ]  := cFecDoc
      end
      aTabla[ 18     ]  := oUser():cCaja()
      aTabla[ 21     ]  := Ctod("")
      aTabla[ 45     ]  := Space( 12 )
      aTabla[ 48     ]  := .T.
      aTabla[ 56     ]  := .F.
      aTabla[ 57     ]  := cCurUsr()
      aTabla[ 58     ]  := GetSysDate()
      aTabla[ 59     ]  := Time()
      aTabla[ 65  ]  := .F.
      aTabla[ 66     ]  := Ctod("")
      aTabla[ 67     ]  := Space( 5 )
      aTabla[ 68     ]  := oUser():cDelegacion()
      aTabla[ 22     ]  := 1

      nOrdAnt                 := ( cDbf )->( OrdSetFocus( "NNUMPED" ) )

   end

   if dbDialogLock( cDbf, .T. )
      aEval( aTabla, { | uTmp, n | ( cDbf )->( fieldPut( n, uTmp ) ) } )
      ( cDbf )->( dbUnLock() )
   end

   if lCab
      ( cDbf )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cDbf )->( dbGoTo( nRec ) )

RETURN ( .T. )



STATIC FUNCTION DupPedido( cFecDoc )

   local nNewNumPed  := 0



   nNewNumPed  := nNewDoc( ( dbfPedCliT )->cSerPed, dbfPedCliT, "NPEDCLI", , dbfCount )



   PedRecDup( dbfPedCliT, ( dbfPedCliT )->cSerPed, nNewNumPed, ( dbfPedCliT )->cSufPed, .T., cFecDoc )



   if ( dbfPedCliL )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )


      while ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed == ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed .AND.  !( dbfPedCliL )->( Eof() )

            PedRecDup( dbfPedCliL, ( dbfPedCliT )->cSerPed, nNewNumPed, ( dbfPedCliT )->cSufPed, .F. )

         ( dbfPedCliL )->( dbSkip() )

      end

   end



   if ( dbfPedCliD )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )


      while ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed == ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed .AND.  !( dbfPedCliD )->( Eof() )

            PedRecDup( dbfPedCliD, ( dbfPedCliT )->cSerPed, nNewNumPed, ( dbfPedCliT )->cSufPed, .F. )

         ( dbfPedCliD )->( dbSkip() )

      end

   end

RETURN ( .T. )





STATIC FUNCTION SetDialog( aGet, oSayDias, oSayTxtDias, oSayGetRnt, oGetRnt )

   if oTipPed:nAt == 2
      aGet[ 74 ]:Show()
      aGet[ 75 ]:Show()
      oSayDias:Show()
      oSayTxtDias:Show()
      aGet[ 22 ]:Hide()
   else
      aGet[ 74 ]:Hide()
      aGet[ 75 ]:Hide()
      oSayDias:Hide()
      oSayTxtDias:Hide()
      aGet[ 22 ]:Show()
   end

   aGet[ 74 ]:Refresh()
   aGet[ 75 ]:Refresh()
   oSayDias:Refresh()
   oSayTxtDias:Refresh()
   aGet[ 22 ]:Refresh()

   if !lAccArticulo() .OR. oUser():lNotRentabilidad()

      if !Empty( oSayGetRnt )
         oSayGetRnt:Hide()
      end

      if !Empty( oGetRnt )
         oGetRnt:Hide()
      end

   end

Return .T.



STATIC FUNCTION ValidaMedicion( aTmp, aGet )

   local cNewUndMed  := aGet[ 22 ]:VarGet





   if ( Empty( cOldUndMed ) .OR. cOldUndMed <> cNewUndMed )

      if oUndMedicion:oDbf:Seek( aTmp[ 22 ] )

         if oUndMedicion:oDbf:nDimension >= 1 .AND. !Empty( oUndMedicion:oDbf:cTextoDim1 )
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:cText( ( dbfArticulo )->nLngArt )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:Show()
            else
               aTmp[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]  := ( dbfArticulo )->nLngArt
            end
         else
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 2 .AND. !Empty( oUndMedicion:oDbf:cTextoDim2 )
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:cText( ( dbfArticulo )->nAltArt )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:Show()
            else
               aTmp[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]  := ( dbfArticulo )->nAltArt
            end

         else
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
                 aTmp[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]  := 0
            end
         end

         if oUndMedicion:oDbf:nDimension >= 3 .AND. !Empty( oUndMedicion:oDbf:cTextoDim3 )
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:cText( ( dbfArticulo ) ->nAncArt )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:Show()
            else
               aTmp[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]  := ( dbfArticulo )->nAncArt
            end
         else
            if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]  := 0
            end
         end

      else

         if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] )
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:Hide()
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] )
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:Hide()
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
         end

         if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] )
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:Hide()
            aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
         end

      end

      cOldUndMed := cNewUndMed

   end

RETURN .T.



Static Function ChangeTarifa( aTmp, aGet, aTmpPed )

    local nPrePro  := 0

   if !aTmp[ 75 ]

      nPrePro     := nPrePro( aTmp[ 4 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArtDiv, aTmpPed[ 16 ] )

      if nPrePro == 0
         nPrePro  := nRetPreArt( aTmp[ 81 ], aTmpPed[ 46 ], aTmpPed[ 51 ], dbfArticulo, dbfDiv, dbfKit, dbfIva )
      end

      if nPrePro <> 0
         aGet[ 14 ]:cText( nPrePro )
      end

   else

      aGet[ 14 ]:cText( 0 )

      nPrePro := nPreAlq( aTmp[ 4 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArticulo )

      if nPrePro <> 0
         aGet[ 76 ]:cText( nPrePro )
      end

   end

return .T.



_HB_CLASS TPedidosClientes2PedidosProveedor ; UTILITY FUNCTION TPedidosClientes2PedidosProveedor(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TPedidosClientes2PedidosProveedor" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { cSerie} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSerie" }, .F., .F. ), )
   _HB_MEMBER { nNumero} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nNumero" }, .F., .F. ), )
   _HB_MEMBER { cSufijo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSufijo" }, .F., .F. ), )

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )
   _HB_MEMBER { oPag} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPag" }, .F., .F. ), )
   _HB_MEMBER { oBmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBmp" }, .F., .F. ), )

   _HB_MEMBER { oBtnPrev} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnPrev" }, .F., .F. ), )
   _HB_MEMBER { oBtnNext} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnNext" }, .F., .F. ), )

   _HB_MEMBER { oMtr} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMtr" }, .F., .F. ), )
   _HB_MEMBER { nMtr} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMtr" }, .F., .F. ), )

   _HB_MEMBER { cProveedorDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cProveedorDesde" }, .F., .F. ), )
   _HB_MEMBER { cProveedorHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cProveedorHasta" }, .F., .F. ), )
   _HB_MEMBER { oProveedorDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProveedorDesde" }, .F., .F. ), )
   _HB_MEMBER { oProveedorHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProveedorHasta" }, .F., .F. ), )
   _HB_MEMBER { oSayProveedorDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayProveedorDesde" }, .F., .F. ), )
   _HB_MEMBER { oSayProveedorHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayProveedorHasta" }, .F., .F. ), )
   _HB_MEMBER { cSayProveedorDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayProveedorDesde" }, .F., .F. ), )
   _HB_MEMBER { cSayProveedorHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayProveedorHasta" }, .F., .F. ), )

   _HB_MEMBER { oArticuloDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oArticuloDesde" }, .F., .F. ), )
   _HB_MEMBER { oArticuloHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oArticuloHasta" }, .F., .F. ), )
   _HB_MEMBER { oCodigoAlmacen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCodigoAlmacen" }, .F., .F. ), )
   _HB_MEMBER { oNombreAlmacen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oNombreAlmacen" }, .F., .F. ), )
   _HB_MEMBER { oSayArticuloDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayArticuloDesde" }, .F., .F. ), )
   _HB_MEMBER { oSayArticuloHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayArticuloHasta" }, .F., .F. ), )

   _HB_MEMBER { cArticuloDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cArticuloDesde" }, .F., .F. ), )
   _HB_MEMBER { cArticuloHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cArticuloHasta" }, .F., .F. ), )
   _HB_MEMBER { cSayArticuloDesde} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayArticuloDesde" }, .F., .F. ), )
   _HB_MEMBER { cSayArticuloHasta} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayArticuloHasta" }, .F., .F. ), )
   _HB_MEMBER { cCodigoAlmacen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCodigoAlmacen" }, .F., .F. ), )
   _HB_MEMBER { cNombreAlmacen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cNombreAlmacen" }, .F., .F. ), )

   _HB_MEMBER { oStock} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oStock" }, .F., .F. ), )
   _HB_MEMBER { nStockDisponible} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nStockDisponible" }, .F., .F. ), )
   _HB_MEMBER { nStockFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nStockFin" }, .F., .F. ), )

   _HB_MEMBER { oBrw} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrw" }, .F., .F. ), )
   _HB_MEMBER { oBrwFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwFin" }, .F., .F. ), )

   _HB_MEMBER { oDlgEditLine} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlgEditLine" }, .F., .F. ), )
   _HB_MEMBER { oGetProveedor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetProveedor" }, .F., .F. ), )
   _HB_MEMBER { oGetArticulo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetArticulo" }, .F., .F. ), )

   _HB_MEMBER { oGetValorPropiedad1} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetValorPropiedad1" }, .F., .F. ), )
   _HB_MEMBER { oGetValorPropiedad2} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetValorPropiedad2" }, .F., .F. ), )

   _HB_MEMBER { oGetCajas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetCajas" }, .F., .F. ), )
   _HB_MEMBER { oGetUnidades} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetUnidades" }, .F., .F. ), )

   _HB_MEMBER { oGetMedUno} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetMedUno" }, .F., .F. ), )
   _HB_MEMBER { oGetMedDos} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetMedDos" }, .F., .F. ), )
   _HB_MEMBER { oGetMedTre} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetMedTre" }, .F., .F. ), )

   _HB_MEMBER New(); IIF( .F., s_oClass:ModMethod( "New", @TPedidosClientes2PedidosProveedor_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TPedidosClientes2PedidosProveedor_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CreateLines(); IIF( .F., s_oClass:ModMethod( "CreateLines", @TPedidosClientes2PedidosProveedor_CreateLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateLines", @TPedidosClientes2PedidosProveedor_CreateLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DestroyLines(); IIF( .F., s_oClass:ModMethod( "DestroyLines", @TPedidosClientes2PedidosProveedor_DestroyLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DestroyLines", @TPedidosClientes2PedidosProveedor_DestroyLines(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Dialog(); IIF( .F., s_oClass:ModMethod( "Dialog", @TPedidosClientes2PedidosProveedor_Dialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Dialog", @TPedidosClientes2PedidosProveedor_Dialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Next(); IIF( .F., s_oClass:ModMethod( "Next", @TPedidosClientes2PedidosProveedor_Next(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Next", @TPedidosClientes2PedidosProveedor_Next(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Prev(); IIF( .F., s_oClass:ModMethod( "Prev", @TPedidosClientes2PedidosProveedor_Prev(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Prev", @TPedidosClientes2PedidosProveedor_Prev(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CreaPedidoProveedor(); IIF( .F., s_oClass:ModMethod( "CreaPedidoProveedor", @TPedidosClientes2PedidosProveedor_CreaPedidoProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreaPedidoProveedor", @TPedidosClientes2PedidosProveedor_CreaPedidoProveedor(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Select(); IIF( .F., s_oClass:ModMethod( "Select", @TPedidosClientes2PedidosProveedor_Select(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Select", @TPedidosClientes2PedidosProveedor_Select(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectArticulo(); IIF( .F., s_oClass:ModMethod( "SelectArticulo", @TPedidosClientes2PedidosProveedor_SelectArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectArticulo", @TPedidosClientes2PedidosProveedor_SelectArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectAllArticulo( lSel); IIF( .F., s_oClass:ModMethod( "SelectAllArticulo", @TPedidosClientes2PedidosProveedor_SelectAllArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectAllArticulo", @TPedidosClientes2PedidosProveedor_SelectAllArticulo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER EditLine(); IIF( .F., s_oClass:ModMethod( "EditLine", @TPedidosClientes2PedidosProveedor_EditLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EditLine", @TPedidosClientes2PedidosProveedor_EditLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER StartEditLine(); IIF( .F., s_oClass:ModMethod( "StartEditLine", @TPedidosClientes2PedidosProveedor_StartEditLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "StartEditLine", @TPedidosClientes2PedidosProveedor_StartEditLine(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TPedidosClientes2PedidosProveedor ;



UTILITY STATIC function TPedidosClientes2PedidosProveedor_New( cSerie, nNumero, cSufijo, oStock) ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   ::cSerie                := cSerie
   ::nNumero               := nNumero
   ::cSufijo               := cSufijo

   ::cSayProveedorDesde    := dbFirst( dbfPrv, 2 )
   ::cSayProveedorHasta    := dbLast ( dbfPrv, 2 )
   ::cProveedorDesde       := dbFirst( dbfPrv, 1 )
   ::cProveedorHasta       := dbLast ( dbfPrv, 1 )

   ::cCodigoAlmacen        := dbFirst( dbfAlm, 1 )

   ::cNombreAlmacen        := dbFirst( dbfAlm, 2 )

   ::oStock                := oStock
   ::nStockDisponible      := 4
   ::nStockFin             := 3

Return ( Self )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_Dialog() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   if ::CreateLines()

      ( dbfTmpPedLin )->( ordSetFocus( "cRef" ) )
      ( dbfTmpPedLin )->( dbGoTop() )

      ::cArticuloDesde     := dbFirst( dbfTmpPedLin, 1 )
      ::cArticuloHasta     := dbLast ( dbfTmpPedLin, 1 )
      ::cSayArticuloDesde  := dbFirst( dbfTmpPedLin, 2 )
      ::cSayArticuloHasta  := dbLast ( dbfTmpPedLin, 2 )





      ::oDlg = TDialog():New(,,,,, "ASS_PEDCLI",, .F.,,,,,, .F.,,,,,, .F., )




      ::oBmp := TBitmap():ReDefine( 500, "GenerarPedidoProveedor",, ::oDlg,,, .F., .F.,,, .F.,,, .F. )






      ::oPag := TPages():Redefine( 110, ::oDlg, {"ASS_PEDCLI1", "ASS_PEDCLI2", "ASS_PEDCLI3"},,,, )




      ::oProveedorDesde := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cProveedorDesde, ::cProveedorDesde:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      ::oProveedorDesde:bValid   := {|| cProvee( ::oProveedorDesde, dbfPrv, ::oSayProveedorDesde ) }
      ::oProveedorDesde:bHelp    := {|| BrwProvee( ::oProveedorDesde, ::oSayProveedorDesde ) }




      ::oSayProveedorDesde := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::cSayProveedorDesde, ::cSayProveedorDesde:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      ::oProveedorHasta := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cProveedorHasta, ::cProveedorHasta:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      ::oProveedorHasta:bValid   := {|| cProvee( ::oProveedorHasta, dbfPrv, ::oSayProveedorHasta ) }
      ::oProveedorHasta:bHelp    := {|| BrwProvee( ::oProveedorHasta, ::oSayProveedorHasta ) }




      ::oSayProveedorHasta := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::cSayProveedorHasta, ::cSayProveedorHasta:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      ::oArticuloDesde := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::cArticuloDesde, ::cArticuloDesde:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      ::oArticuloDesde:bValid := {|| cArticulo( ::oArticuloDesde, dbfArticulo, ::oSayArticuloDesde ) }
      ::oArticuloDesde:bHelp  := {|| brwArtPed( ::oArticuloDesde, dbfTmpPedLin, dbfDiv, dbfIva ) }




      ::oSayArticuloDesde := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cSayArticuloDesde, ::cSayArticuloDesde:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      ::oArticuloHasta := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::cArticuloHasta, ::cArticuloHasta:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

      ::oArticuloHasta:bValid := {|| cArticulo( ::oArticuloHasta, dbfArticulo, ::oSayArticuloHasta ) }
      ::oArticuloHasta:bHelp  := {|| brwArtPed( ::oArticuloHasta, dbfTmpPedLin, dbfDiv, dbfIva ) }




      ::oSayArticuloHasta := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::cSayArticuloHasta, ::cSayArticuloHasta:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      ::oCodigoAlmacen := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::cCodigoAlmacen, ::cCodigoAlmacen:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )

     ::oCodigoAlmacen:bValid  := {|| cAlmacen( ::oCodigoAlmacen, , ::oNombreAlmacen ) }
     ::oCodigoAlmacen:bHelp   := {|| BrwAlmacen( ::oCodigoAlmacen, ::oNombreAlmacen ) }




      ::oNombreAlmacen := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::cNombreAlmacen, ::cNombreAlmacen:= u ) }, ::oPag:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )



      TRadMenu():Redefine( { | u | If( PCount()==0, ::nStockDisponible, ::nStockDisponible:= u ) }, ::oPag:aDialogs[1],, { 201, 202, 203, 204 },,,,, .F.,, )



      TRadMenu():Redefine( { | u | If( PCount()==0, ::nStockFin, ::nStockFin:= u ) }, ::oPag:aDialogs[1],, { 212, 213, 214 },,,,, .F.,, )





      ::oMtr := TMeter():ReDefine( 220, { | u | If( PCount()==0, ::nMtr, ::nMtr:= u ) }, ( dbfTmpPedLin )->( LastRec() ), ::oPag:aDialogs[1], .F.,, "Procesando", .F.,,,, )

      ::oBrw               := IXBrowse():New( ::oPag:aDialogs[2] )

      ::oBrw:bClrSel       := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrw:bClrSelFocus  := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrw:cAlias        := dbfTmpPedLin

      ::oBrw:nMarqueeStyle := 5
      ::oBrw:cName         := "Pedido de cliente.Generar"

      ::oBrw:bLDblClick    := {|| ::EditLine() }

      ::oBrw:SetRdd()

      ::oBrw:CreateFromResource( 100 )

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Se. Seleccionado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTmpPedLin )->lSelArt }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Cnt16" } )
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Proveedor"
         :bEditValue       := {|| AllTrim( ( dbfTmpPedLin )->cCodPrv ) + " - " + AllTrim( RetProvee( ( dbfTmpPedLin )->cCodPrv ) ) }
         :nWidth           := 200
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpPedLin )->cRef }
         :nWidth           := 70
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Nombre"
         :bEditValue       := {|| ( dbfTmpPedLin )->cDetalle }
         :nWidth           := 155
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Propiedad 1"
         :bEditValue       := {|| ( dbfTmpPedLin )->cValPr1 }
         :nWidth           := 80
         :lHide            := .T.
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Propiedad 2"
         :bEditValue       := {|| ( dbfTmpPedLin )->cValPr2 }
         :nWidth           := 80
         :lHide            := .T.
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := cNombreCajas()
         :bEditValue       := {|| ( dbfTmpPedLin )->nNumCaj }
         :cEditPicture     := MasUnd()
         :nWidth           := 50
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := cNombreUnidades()
         :bEditValue       := {|| ( dbfTmpPedLin )->nNumUni }
         :cEditPicture     := MasUnd()
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Stk. físico"
         :bEditValue       := {|| ( dbfTmpPedLin )->nStkFis }
         :cEditPicture     := MasUnd()
         :nWidth           := 60
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( ::oBrw:AddCol() )
         :cHeader          := "Stk. disponible"
         :bEditValue       := {|| ( dbfTmpPedLin )->nStkDis }
         :cEditPicture     := MasUnd()
         :nWidth           := 90
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end




      TButton():ReDefine( 110, {||( ::EditLine() )}, ::oPag:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( ::SelectArticulo() )}, ::oPag:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 130, {||( ::SelectAllArticulo( .T. ) )}, ::oPag:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 140, {||( ::SelectAllArticulo( .F. ) )}, ::oPag:aDialogs[2],,, .F.,,,, .F. )

      ::oBrwFin                  := TXBrowse():New( ::oPag:aDialogs[3] )

      ::oBrwFin:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwFin:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrwFin:cAlias           := dbfTmpFin

      ::oBrwFin:nMarqueeStyle    := 5

      ::oBrwFin:bLDblClick       := {|| ZooPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ) }

      ::oBrwFin:CreateFromResource( 100 )

      with object ( ::oBrwFin:AddCol() )
         :cHeader                := "Documento"
         :bEditValue             := {|| AllTrim( ( dbfTmpFin )->cSerie ) + "/" + AllTrim( Str( ( dbfTmpFin )->nNumero ) ) + "/" + AllTrim( ( dbfTmpFin )->cSufijo ) }
         :nWidth                 := 80
      end

      with object ( ::oBrwFin:AddCol() )
         :cHeader                := "Fecha"
         :bEditValue             := {|| dtoc( ( dbfTmpFin )->dFecDoc ) }
         :nWidth                 := 80
      end

      with object ( ::oBrwFin:AddCol() )
         :cHeader                := "Proveedor"
         :bEditValue             := {|| AllTrim( ( dbfTmpFin )->cCodPrv ) + " - " + AllTrim( ( dbfTmpFin )->cNomPrv ) }
         :nWidth                 := 250
      end

      with object ( ::oBrwFin:AddCol() )
         :cHeader                := "Total"
         :bEditValue             := {|| nTotPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo, dbfPedPrvT, dbfPedPrvL, dbfIva, dbfDiv, nil, cDivEmp(), .T. ) }
         :nWidth                 := 80
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
      end




      TButton():ReDefine( 110, {||( EdtPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ), ::oBrwFin:Refresh() )}, ::oPag:aDialogs[3],,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( ZooPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ) )}, ::oPag:aDialogs[3],,, .F.,,,, .F. )






      TButton():ReDefine( 130, {||(  DelPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ), if( dbLock( dbfTmpFin ), ( ( dbfTmpFin )->( dbDelete() ), ( dbfTmpFin )->( dbUnLock() ) ), ::oBrwFin:Referesh() ) )}, ::oPag:aDialogs[3],,, .F.,,,, .F. )




      TButton():ReDefine( 140, {||( VisPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ) )}, ::oPag:aDialogs[3],,, .F.,,,, .F. )




      TButton():ReDefine( 150, {||( PrnPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo ) )}, ::oPag:aDialogs[3],,, .F.,,,, .F. )




      ::oBtnPrev := TButton():ReDefine( 401, {||( ::Prev() )}, ::oDlg,,, .F.,,,, .F. )




      ::oBtnNext := TButton():ReDefine( 402, {||( ::Next() )}, ::oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 403, {||( ::DestroyLines() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oBtnPrev:Hide(), ::oBrwFin:GoTop() }

      ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

      ::oBmp:End()

   end

   ::oStock:SetGeneradoPedCli( ::cSerie + Str( ::nNumero ) + ::cSufijo )

RETURN ( ::oDlg:nResult == 1 )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_CreateLines() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   local oError
   local oBlock
   local cTmpLin
   local cTmpFin
   local lErrors  := .F.




   cTmpLin        := cGetNewFileName( cPatTmp() + "PTmpCliL" )
   cTmpFin        := cGetNewFileName( cPatTmp() + "PTmpFinL" )

   dbCreate( cTmpLin, aSqlStruct( aColTmpLin() ), cDriver() )

   dbUseArea( .T., cDriver(), cTmpLin, cCheckArea( "PTmpCliL", @dbfTmpPedLin ), .F. )

   if !NetErr()
      ( dbfTmpPedLin )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpPedLin )->( ordCreate( cTmpLin, "cRef", "cRef", {|| Field->cRef } ) )

      ( dbfTmpPedLin )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpPedLin )->( ordCreate( cTmpLin, "cDetalle", "cDetalle", {|| Field->cDetalle } ) )

      ( dbfTmpPedLin )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpPedLin )->( ordCreate( cTmpLin, "lShow", "lShow", {|| Field->lShow } ) )

      ( dbfTmpPedLin )->( ordCondSet( "lShow .and. lSelArt .and. !Deleted()", {|| Field->lShow .AND. Field->lSelArt .AND. !Deleted()}  ) )
      ( dbfTmpPedLin )->( ordCreate( cTmpLin, "cCodPrv", "cCodPrv", {|| Field->cCodPrv } ) )
   else
      lErrors     := .T.
   end

   dbCreate( cTmpFin, aSqlStruct( aColTmpFin() ), cDriver() )

   dbUseArea( .T., cDriver(), cTmpFin, cCheckArea( "PTmpFinL", @dbfTmpFin ), .F. )

   if !NetErr()
      ( dbfTmpFin )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTmpFin )->( ordCreate( cTmpFin, "cNumDoc", "cNumDoc", {|| Field->cSerie + str( Field->nNumero ) + Field->cSufijo } ) )
   else
      lErrors     := .T.
   end

   if !lErrors

      ( dbfPedCliL )->( dbGoTop() )
      while !( dbfPedCliL )->( Eof() )


         if ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == ::cSerie + Str( ::nNumero ) + ::cSufijo .AND.  nTotNPedCli( dbfPedCliL ) <> 0

            ( dbfTmpPedLin )->( dbAppend() )

            (dbfTmpPedLin)->lShow      := .T.
            (dbfTmpPedLin)->lSelArt    := .T.
            (dbfTmpPedLin)->cRef       := (dbfPedCliL)->cRef
            (dbfTmpPedLin)->cDetalle   := (dbfPedCliL)->cDetalle
            (dbfTmpPedLin)->cCodPrv    := (dbfPedCliL)->cCodPrv
            (dbfTmpPedLin)->cCodPr1    := (dbfPedCliL)->cCodPr1
            (dbfTmpPedLin)->cCodPr2    := (dbfPedCliL)->cCodPr2
            (dbfTmpPedLin)->cValPr1    := (dbfPedCliL)->cValPr1
            (dbfTmpPedLin)->cValPr2    := (dbfPedCliL)->cValPr2
            (dbfTmpPedLin)->nNumUni    := (dbfPedCliL)->nUniCaja
            (dbfTmpPedLin)->nNumCaj    := (dbfPedCliL)->nCanPed
            (dbfTmpPedLin)->nStkFis    := oStock:nTotStockAct( (dbfPedCliL)->cRef, , , , , RetFld( (dbfPedCliL)->cRef, dbfArticulo, "lKitArt" ), RetFld( (dbfPedCliL)->cRef, dbfArticulo, "nKitStk" ) )
            (dbfTmpPedLin)->nStkDis    := oStock:nTotStockAct( (dbfPedCliL)->cRef, , , , , RetFld( (dbfPedCliL)->cRef, dbfArticulo, "lKitArt" ), RetFld( (dbfPedCliL)->cRef, dbfArticulo, "nKitStk" ) ) - nTotReserva( (dbfPedCliL)->cRef )
            (dbfTmpPedLin)->nIva       := (dbfPedCliL)->nIva
            (dbfTmpPedLin)->nReq       := (dbfPedCliL)->nReq
            (dbfTmpPedLin)->nDto       := (dbfPedCliL)->nDto
            (dbfTmpPedLin)->nDtoPrm    := (dbfPedCliL)->nDtoPrm
            (dbfTmpPedLin)->cUniDad    := (dbfPedCliL)->cUniDad
            (dbfTmpPedLin)->lLote      := (dbfPedCliL)->lLote
            (dbfTmpPedLin)->nLote      := (dbfPedCliL)->nLote
            (dbfTmpPedLin)->cLote      := (dbfPedCliL)->cLote
            (dbfTmpPedLin)->mObsLin    := (dbfPedCliL)->mObsLin
            (dbfTmpPedLin)->cRefPrv    := (dbfPedCliL)->cRefPrv
            (dbfTmpPedLin)->cUnidad    := (dbfPedCliL)->cUnidad
            (dbfTmpPedLin)->nMedUno    := (dbfPedCliL)->nMedUno
            (dbfTmpPedLin)->nMedDos    := (dbfPedCliL)->nMedDos
            (dbfTmpPedLin)->nMedTre    := (dbfPedCliL)->nMedTre
            (dbfTmpPedLin)->nPreDiv    := nCosto( ( dbfPedCliL )->cRef, dbfArticulo, dbfKit, .F., , dbfDiv )

         end

         ( dbfPedCliL )->( dbSkip() )

      end

      ( dbfTmpPedLin )->( dbGoTop() )

   end











Return ( !lErrors )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_Prev() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   do case
   case ::oPag:nOption == 2

      ( dbfTmpPedLin )->( OrdClearScope() )
      ( dbfTmpPedLin )->( OrdSetFocus( cOrdAnt ) )
      ( dbfTmpPedLin )->( dbGoTop() )

      while !( dbfTmpPedLin )->( eof() )

         if dbLock( dbfTmpPedLin )
            ( dbfTmpPedLin )->lShow := .F.
            ( dbfTmpPedLin )->( dbUnLock() )
         end

         ( dbfTmpPedLin )->( dbSkip() )

      end

      ::oPag:GoPrev()

      SetWindowText( ::oBtnNext:hWnd, "Siguien&te >" )

      ::oBtnPrev:Hide()

   case ::oPag:nOption == 3

      ::DestroyLines( .T. )

   end

Return ( .T. )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_Next() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   do case
      case ::oPag:nOption == 1

         ::Select()

         ::oPag:GoNext()

         ::oBtnPrev:Show()

         SetWindowText( ::oBtnNext:hWnd, "&Procesar" )

      case ::oPag:nOption == 2

         ::CreaPedidoProveedor()

         ::oBrwFin:Refresh()

         ::oPag:GoNext()



         SetWindowText( ::oBtnPrev:hWnd, "Terminar e &imprimir" )

         SetWindowText( ::oBtnNext:hWnd, "&Terminar" )

      case ::oPag:nOption == 3

         ::DestroyLines()

   end

Return ( .T. )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_SelectArticulo() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   if dbDialogLock( dbfTmpPedLin )
      ( dbfTmpPedLin )->lSelArt := !( dbfTmpPedLin )->lSelArt
      ( dbfTmpPedLin )->( dbUnlock() )
   end

   ::oBrw:Refresh()

return nil



UTILITY STATIC function TPedidosClientes2PedidosProveedor_SelectAllArticulo( lSel) ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   local nRec  := ( dbfTmpPedLin )->( Recno() )

   ( dbfTmpPedLin )->( dbGoTop() )
   while !( dbfTmpPedLin )->( eof() )

      if dbDialogLock( dbfTmpPedLin )
         ( dbfTmpPedLin )->lSelArt := lSel
         ( dbfTmpPedLin )->( dbUnlock() )
      end

      ( dbfTmpPedLin )->( dbSkip() )
   end

   ( dbfTmpPedLin )->( dbGoTo( nRec ) )

   ::oBrw:Refresh()

return nil



UTILITY STATIC function TPedidosClientes2PedidosProveedor_Select() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   local nStk := 0

   ( dbfTmpPedLin )->( dbGoTop() )
   while !( dbfTmpPedLin )->( eof() )


      if ( Empty( ( dbfTmpPedLin )->cCodPrv ) .OR. ( ( dbfTmpPedLin )->cCodPrv >= ::cProveedorDesde .AND. ( dbfTmpPedLin )->cCodPrv <= ::cProveedorHasta ) ) .AND. ( ( dbfTmpPedLin )->cRef >= ::cArticuloDesde .AND. ( dbfTmpPedLin )->cRef <= ::cArticuloHasta )

         nStk  := oStock:nTotStockAct( ( dbfTmpPedLin )->cRef, , , , , RetFld( ( dbfTmpPedLin )->cRef, dbfArticulo, "lKitArt" ), RetFld( ( dbfTmpPedLin )->cRef, dbfArticulo, "nKitStk" ) ) - nTotReserva( ( dbfTmpPedLin)->cRef )

         do case
            case ::nStockDisponible == 1 .AND. nStk < 0

               if dbLock( dbfTmpPedLin )
                  ( dbfTmpPedLin )->lShow := lCheckGenerado( ::cSerie, ::nNumero, ::cSufijo, ( dbfTmpPedLin )->cRef, ( dbfTmpPedLin )->cCodPr1, ( dbfTmpPedLin )->cCodPr2, ( dbfTmpPedLin )->cDetalle )
                  ( dbfTmpPedLin )->( dbUnLock() )
               end

            case ::nStockDisponible == 2 .AND. nStk <= 0

               if dbLock( dbfTmpPedLin )
                  ( dbfTmpPedLin )->lShow := lCheckGenerado( ::cSerie, ::nNumero, ::cSufijo, ( dbfTmpPedLin )->cRef, ( dbfTmpPedLin )->cCodPr1, ( dbfTmpPedLin )->cCodPr2, ( dbfTmpPedLin )->cDetalle )
                  ( dbfTmpPedLin )->( dbUnLock() )
               end

            case ::nStockDisponible == 3 .AND. nStk < RetFld( ( dbfTmpPedLin )->cRef, dbfArticulo, "nMinimo" )

               if dbLock( dbfTmpPedLin )
                  ( dbfTmpPedLin )->lShow := lCheckGenerado( ::cSerie, ::nNumero, ::cSufijo, ( dbfTmpPedLin )->cRef, ( dbfTmpPedLin )->cCodPr1, ( dbfTmpPedLin )->cCodPr2, ( dbfTmpPedLin )->cDetalle )
                  ( dbfTmpPedLin )->( dbUnLock() )
               end

            case ::nStockDisponible == 4

               if dbLock( dbfTmpPedLin )
                  ( dbfTmpPedLin )->lShow := lCheckGenerado( ::cSerie, ::nNumero, ::cSufijo, ( dbfTmpPedLin )->cRef, ( dbfTmpPedLin )->cCodPr1, ( dbfTmpPedLin )->cCodPr2, ( dbfTmpPedLin )->cDetalle )
                  ( dbfTmpPedLin )->( dbUnLock() )
               end

          end

      end

      ( dbfTmpPedLin )->( dbSkip() )

      ::oMtr:Set( ( dbfTmpPedLin )->( OrdKeyNo() ) )

   end

   ::oMtr:Set( ( dbfTmpPedLin )->( LastRec() ) )

   cOrdAnt := (dbfTmpPedLin)->( OrdSetFocus( "lShow" ) )

   ( dbfTmpPedLin )->( OrdScope( 0, .T. ) )
   ( dbfTmpPedLin )->( OrdScope( 1, .T. ) )

   ( dbfTmpPedLin )->( dbGotop() )

return nil



UTILITY STATIC function TPedidosClientes2PedidosProveedor_CreaPedidoProveedor() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   local cSeriePedido
   local nNumeroPedido
   local cSufijoPedido
   local cLastProveedor := ""

   ( dbfTmpPedLin )->( OrdSetFocus(4) )
   ( dbfTmpPedLin )->( dbGoTop() )

   while !( dbfTmpPedLin )->( eof() )

      if ( dbfPrv )->( dbSeek( ( dbfTmpPedLin )->cCodPrv ) )



         if cLastProveedor <> ( dbfTmpPedLin )->cCodPrv

            cSeriePedido               := cNewSer( "nPedPrv", dbfCount )
            nNumeroPedido              := nNewDoc( cSeriePedido, dbfPedPrvT, "nPedPrv", , dbfCount )
            cSufijoPedido              := RetSufEmp()

            ( dbfTmpFin )->( dbAppend())
            ( dbfTmpFin )->cSerie      := cSeriePedido
            ( dbfTmpFin )->nNumero     := nNumeroPedido
            ( dbfTmpFin )->cSufijo     := cSufijoPedido
            ( dbfTmpFin )->dFecDoc     := GetSysDate()
            ( dbfTmpFin )->cCodPrv     := ( dbfTmpPedLin )->cCodPrv
            ( dbfTmpFin )->cNomPrv     := ( dbfPrv )->Titulo
            ( dbfTmpFin )->( dbRUnLock() )

            ( dbfPedPrvT )->( dbAppend() )
            ( dbfPedPrvT )->cSerPed    := cSeriePedido
            ( dbfPedPrvT )->nNumPed    := nNumeroPedido
            ( dbfPedPrvT )->cSufPed    := cSufijoPedido
            ( dbfPedPrvT )->cTurPed    := cCurSesion()
            ( dbfPedPrvT )->dFecPed    := GetSysDate()
            ( dbfPedPrvT )->cCodPrv    := ( dbfTmpPedLin )->cCodPrv
            ( dbfPedPrvT )->cCodAlm    := ::cCodigoAlmacen
            ( dbfPedPrvT )->cCodCaj    := oUser():cCaja()
            ( dbfPedPrvT )->cNomPrv    := ( dbfPrv )->Titulo
            ( dbfPedPrvT )->cDirPrv    := ( dbfPrv )->Domicilio
            ( dbfPedPrvT )->cPobPrv    := ( dbfPrv )->Poblacion
            ( dbfPedPrvT )->cProPrv    := ( dbfPrv )->Provincia
            ( dbfPedPrvT )->cPosPrv    := ( dbfPrv )->cCodPai
            ( dbfPedPrvT )->cDniPrv    := ( dbfPrv )->Nif
            ( dbfPedPrvT )->dFecEnt    := GetSysDate() + ( dbfPrv )->nPlzEnt
            ( dbfPedPrvT )->nEstado    := 1
            ( dbfPedPrvT )->cDivPed    := cDivEmp()
            ( dbfPedPrvT )->nVdvPed    := nChgDiv( ( dbfPedPrvT )->cDivPed, dbfDiv )
            ( dbfPedPrvT )->lSndDoc    := .T.
            ( dbfPedPrvT )->cCodUsr    := cCurUsr()
            ( dbfPedPrvT )->cNumPedCli := ::cSerie + Str( ::nNumero ) + ::cSufijo
            ( dbfPedPrvT )->lRecargo   := ( dbfPrv )->lReq
            ( dbfPedPrvT )->( dbRUnLock() )

            cLastProveedor             := ( dbfTmpPedLin )->cCodPrv

         end





         ( dbfPedPrvL )->( dbAppend() )

         ( dbfPedPrvL )->cSerPed          := cSeriePedido
         ( dbfPedPrvL )->nNumPed          := nNumeroPedido
         ( dbfPedPrvL )->cSufPed          := cSufijoPedido
         ( dbfPedPrvL )->cRef             := ( dbfTmpPedLin )->cRef
         ( dbfPedPrvL )->cDetalle         := ( dbfTmpPedLin )->cDetalle
         ( dbfPedPrvL )->nIva             := ( dbfTmpPedLin )->nIva
         ( dbfPedPrvL )->nReq             := ( dbfTmpPedLin )->nReq

         do case
            case ::nStockFin == 1
               ( dbfPedPrvL )->nUniCaja   := Calculaunidades( ( dbfTmpPedLin )->nNumUni, ( dbfTmpPedLin )->nStkDis, RetFld( ( dbfTmpPedLin )->cRef, dbfArticulo, "nMinimo" ) )

            case ::nStockFin == 2
               ( dbfPedPrvL )->nUniCaja   := Calculaunidades( ( dbfTmpPedLin )->nNumUni, ( dbfTmpPedLin )->nStkDis, RetFld( ( dbfTmpPedLin )->cRef, dbfArticulo, "nMaximo" ) )

            case ::nStockFin == 3
               ( dbfPedPrvL )->nUniCaja   := ( dbfTmpPedLin )->nNumUni

         end

         ( dbfPedPrvL )->cPedCli          := ::cSerie + Str( ::nNumero ) + ::cSufijo
         ( dbfPedPrvL )->cAlmLin          := ::cCodigoAlmacen
         ( dbfPedPrvL )->nCanPed          := ( dbfTmpPedLin )->nNumCaj
         ( dbfPedPrvL )->nPreDiv          := ( dbfTmpPedLin )->nPreDiv
         ( dbfPedPrvL )->cUniDad          := ( dbfTmpPedLin )->cUniDad
         ( dbfPedPrvL )->nDtoLin          := ( dbfTmpPedLin )->nDto
         ( dbfPedPrvL )->nDtoPrm          := ( dbfTmpPedLin )->nDtoPrm
         ( dbfPedPrvL )->cCodPr1          := ( dbfTmpPedLin )->cCodPr1
         ( dbfPedPrvL )->cCodPr2          := ( dbfTmpPedLin )->cCodPr2
         ( dbfPedPrvL )->cValPr1          := ( dbfTmpPedLin )->cValPr1
         ( dbfPedPrvL )->cValPr2          := ( dbfTmpPedLin )->cValPr2
         ( dbfPedPrvL )->lLote            := ( dbfTmpPedLin )->lLote
         ( dbfPedPrvL )->nLote            := ( dbfTmpPedLin )->nLote
         ( dbfPedPrvL )->cLote            := ( dbfTmpPedLin )->cLote
         ( dbfPedPrvL )->mObsLin          := ( dbfTmpPedLin )->mObsLin
         ( dbfPedPrvL )->cRefPrv          := ( dbfTmpPedLin )->cRefPrv
         ( dbfPedPrvL )->nMedUno          := ( dbfTmpPedLin )->nMedUno
         ( dbfPedPrvL )->nMedDos          := ( dbfTmpPedLin )->nMedDos
         ( dbfPedPrvL )->nMedTre          := ( dbfTmpPedLin )->nMedTre
         ( dbfPedPrvL )->cUnidad          := ( dbfTmpPedLin )->cUnidad

         ( dbfPedPrvL )->( dbRUnLock() )

      end

      ( dbfTmpPedLin )->( dbSkip() )

   end

   ( dbfTmpFin )->( dbGoTop() )

return nil



UTILITY STATIC function TPedidosClientes2PedidosProveedor_DestroyLines( lPrint) ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   IIF( lPrint == nil, lPrint := .F., ) ;





   if lPrint

      ( dbfTmpFin )->( dbGoTop() )

      while !( dbfTmpFin )->( eof() )

         PrnPedPrv( ( dbfTmpFin )->cSerie + Str( ( dbfTmpFin )->nNumero ) + ( dbfTmpFin )->cSufijo )

         ( dbfTmpFin )->( dbSkip() )

      end

   end





   if !Empty( dbfTmpPedLin ) .AND. ( dbfTmpPedLin )->( Used() )
      ( dbfTmpPedLin )->( dbCloseArea() )
   end

   if !Empty( dbfTmpFin ) .AND. ( dbfTmpFin )->( Used() )
      ( dbfTmpFin )->( dbCloseArea() )
   end





   dbfErase( dbfTmpPedLin )
   dbfErase( dbfTmpFin    )

   ::oDlg:end()

Return .T.



UTILITY STATIC function TPedidosClientes2PedidosProveedor_EditLine() ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   local cPic     := MasUnd()
   local aTmp     := dbScatter( dbfTmpPedLin )

   ::oDlgEditLine = TDialog():New(,,,,, "EdtPedPrv",, .F.,,,,,, .F.,,,,,, .F., )



      TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "lSelArt" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "lSelArt" ) ) ]:= u ) }, ::oDlgEditLine,,,,,,, .F.,, .F. )






      ::oGetProveedor := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPrv" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPrv" ) ) ]:= u ) }, ::oDlgEditLine,, ( RetPicCodPrvEmp() ),,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )

      ::oGetProveedor:bValid  := {|| cProvee( ::oGetProveedor, dbfPrv, ::oGetProveedor:oHelpText ) }
      ::oGetProveedor:bHelp   := {|| brwProvee( ::oGetProveedor, ::oGetProveedor:oHelpText ) }






      ::oGetArticulo := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cRef" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "cRef" ) ) ]:= u ) }, ::oDlgEditLine,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil, "LUPA",, 121 )

      ::oGetArticulo:bValid   := {|| cArticulo( ::oGetArticulo, dbfArticulo, ::oGetArticulo:oHelpText ) }
      ::oGetArticulo:bHelp    := {|| brwArticulo( ::oGetArticulo, ::oGetArticulo:oHelpText ) }







      ::oGetValorPropiedad1 := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cValPr1" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "cValPr1" ) ) ]:= u ) }, ::oDlgEditLine,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil, "LUPA", 132, 131 )

      ::oGetValorPropiedad1:bValid  := {|| lPrpAct( ::oGetValorPropiedad1, ::oGetValorPropiedad1:oSay, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr1" ) ) ], dbfTblPro ) }
      ::oGetValorPropiedad1:bHelp   := {|| brwPrpAct( ::oGetValorPropiedad1, ::oGetValorPropiedad1:oSay, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr1" ) ) ], dbfTblPro ) }







      ::oGetValorPropiedad2 := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cValPr2" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "cValPr2" ) ) ]:= u ) }, ::oDlgEditLine,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil, "LUPA", 142, 141 )

      ::oGetValorPropiedad2:bValid  := {|| lPrpAct( ::oGetValorPropiedad2, ::oGetValorPropiedad2:oSay, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr2" ) ) ], dbfTblPro ) }
      ::oGetValorPropiedad2:bHelp   := {|| brwPrpAct( ::oGetValorPropiedad2, ::oGetValorPropiedad2:oSay, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr2" ) ) ], dbfTblPro ) }











      ::oGetCajas := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "nNumCaj" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "nNumCaj" ) ) ]:= u ) }, ::oDlgEditLine,, cPic,,,,,,, .F.,,, .F., .T.,,,,,, nil,, 151, )






      ::oGetUnidades := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "nNumUni" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "nNumUni" ) ) ]:= u ) }, ::oDlgEditLine,, cPic,,,,,,, .F.,,, .F., .T.,,,,,, nil,, 161, )




      TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( FieldPos( "cUnidad" ) ) ], aTmp[ ( dbfTmpPedLin )->( FieldPos( "cUnidad" ) ) ]:= u ) }, ::oDlgEditLine,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      ::oGetMedUno := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedUno" ) ) ], aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedUno" ) ) ]:= u ) }, ::oDlgEditLine,, cPic,,,,,,, .F.,,, .F., .T.,,,,,, nil,, 171, )

      ::oGetMedUno:oSay:SetColor( 8388608 )






      ::oGetMedDos := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedDos" ) ) ], aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedDos" ) ) ]:= u ) }, ::oDlgEditLine,, cPic,,,,,,, .F.,,, .F., .T.,,,,,, nil,, 181, )

      ::oGetMedDos:oSay:SetColor( 8388608 )






      ::oGetMedTre := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedTre" ) ) ], aTmp[ ( dbfTmpPedLin )->( fieldpos( "nMedTre" ) ) ]:= u ) }, ::oDlgEditLine,, cPic,,,,,,, .F.,,, .F., .T.,,,,,, nil,, 191, )

      ::oGetMedTre:oSay:SetColor( 8388608 )





      TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( fieldpos( "nStkFis" ) ) ], aTmp[ ( dbfTmpPedLin )->( fieldpos( "nStkFis" ) ) ]:= u ) }, ::oDlgEditLine,, cPouDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfTmpPedLin )->( fieldpos( "nStkDis" ) ) ], aTmp[ ( dbfTmpPedLin )->( fieldpos( "nStkDis" ) ) ]:= u ) }, ::oDlgEditLine,, cPouDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 1, {||( WinGather( aTmp, , dbfTmpPedLin, ::oBrw, 2 ), ::oDlgEditLine:End() )}, ::oDlgEditLine,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( ::oDlgEditLine:end() )}, ::oDlgEditLine,,, .F.,,,, .T. )

      ::oDlgEditLine:bStart   := {|| ::StartEditLine( aTmp ) }

   ::oDlgEditLine:Activate( ::oDlgEditLine:bLClicked, ::oDlgEditLine:bMoved, ::oDlgEditLine:bPainted, .T.,,,, ::oDlgEditLine:bRClicked,,, )

   ::oBrw:CloseData()

RETURN ( Self )



UTILITY STATIC function TPedidosClientes2PedidosProveedor_StartEditLine( aTmp) ; local Self AS CLASS TPedidosClientes2PedidosProveedor := QSelf() AS CLASS TPedidosClientes2PedidosProveedor

   ::oGetProveedor:lValid()
   ::oGetArticulo:lValid()

   if lUseCaj()
      ::oGetCajas:SetText( cNombreCajas() )
   else
      ::oGetCajas:Hide()
   end

   ::oGetUnidades:SetText( cNombreUnidades() )



   if !Empty( aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr1" ) ) ] )
      ::oGetValorPropiedad1:Show()
   else
      ::oGetValorPropiedad1:Hide()
   end

   if !Empty( aTmp[ ( dbfTmpPedLin )->( FieldPos( "cCodPr2" ) ) ] )
      ::oGetValorPropiedad2:Show()
   else
      ::oGetValorPropiedad2:Hide()
   end



   ::oGetMedUno:Hide()
   ::oGetMedDos:Hide()
   ::oGetMedTre:Hide()

   if !Empty( aTmp[ ( dbfTmpPedLin )->( FieldPos( "cUnidad" ) ) ] ) .AND. oUndMedicion:oDbf:Seek( aTmp[ ( dbfTmpPedLin )->( FieldPos( "cUnidad" ) ) ] )

      if oUndMedicion:oDbf:nDimension >= 1 .AND. !Empty( oUndMedicion:oDbf:cTextoDim1 )
         ::oGetMedUno:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
         ::oGetMedUno:Show()
      end

      if oUndMedicion:oDbf:nDimension >= 2 .AND. !Empty( oUndMedicion:oDbf:cTextoDim2 )
         ::oGetMedDos:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
         ::oGetMedDos:Show()
      end

      if oUndMedicion:oDbf:nDimension >= 3 .AND. !Empty( oUndMedicion:oDbf:cTextoDim3 )
         ::oGetMedTre:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
         ::oGetMedTre:Show()
      end

   end

RETURN ( Self )



function nTotReserva( cCodArt )

   local nTotal := 0

   ( dbfPedCliR )->( OrdSetFocus( "cRef" ) )

   if ( dbfPedCliR )->( dbSeek( cCodArt ) )

      while ( dbfPedCliR )->cRef == cCodArt .AND. !(dbfPedCliR)->(Eof())

         nTotal += nTotRPedCli( (dbfPedCliR)->cSerPed + Str( (dbfPedCliR)->nNumPed ) + (dbfPedCliR)->cSufPed, (dbfPedCliR)->cRef, (dbfPedCliR)->cValPr1, (dbfPedCliR)->cValPr2, dbfPedCliR )

      (dbfPedCliR)->(dbSkip())

      end

   end

return ( nTotal )



STATIC function Calculaunidades( nCantidad, nStockDis, nStockMinMax )

   local nUnidades

   do case
      case nStockDis < 0
         nUnidades   := ( 0 - nStockDis ) + nCantidad + nStockMinMax
      case nStockDis == 0
         nUnidades   := nCantidad + nStockMinMax
      case nStockDis > 0
         nUnidades   := ( nCantidad - nStockDis ) + nStockMinMax
   end

   if nUnidades < 0
      nUnidades      := 0
   end

return nUnidades



STATIC FUNCTION SelSend( oBrw )

   if dbDialogLock( dbfPedCliT )
      ( dbfPedCliT )->lPdtCrg := !( dbfPedCliT )->lPdtCrg
      ( dbfPedCliT )->( dbUnLock() )
   end

   oBrw:Refresh()
   oBrw:SetFocus()

RETURN NIL






function nEstadoRecPedCli( dbfPedPrvL, dbfAlbPrvL, dbfTmpLin )

   local nTotUni
   local nOrdAnt
   local nEstado     := 1
   local nTotRec     := 0

   if IsMuebles()

      nOrdAnt        := ( dbfPedPrvL )->( OrdSetFocus( "cPedCliDet" ) )

      if ( dbfPedPrvL )->( dbSeek( ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed + ( dbfTmpLin )->cRef + ( dbfTmpLin )->cValPr1 + ( dbfTmpLin )->cValPr2 + ( dbfTmpLin )->cRefPrv + ( dbfTmpLin )->cDetalle ) )

         nTotUni     := nTotNPedCli( dbfTmpLin )
         nTotRec     := nUnidadesRecibidasPedPrv( ( dbfPedPrvL )->cSerPed + Str( ( dbfPedPrvL )->nNumPed ) + ( dbfPedPrvL )->cSufPed, ( dbfTmpLin)->cRef, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, ( dbfTmpLin )->cRefPrv, ( dbfTmpLin )->cDetalle, dbfAlbPrvL )

      end

      ( dbfPedPrvL )->( OrdSetFocus( nOrdAnt ) )

   else

      nOrdAnt        := ( dbfPedPrvL )->( OrdSetFocus( "cPedCliRef" ) )

      if ( dbfPedPrvL )->( dbSeek( ( dbfTmpLin )->cSerPed + Str( ( dbfTmpLin )->nNumPed ) + ( dbfTmpLin )->cSufPed + ( dbfTmpLin )->cRef + ( dbfTmpLin )->cValPr1 + ( dbfTmpLin )->cValPr2 ) )

         nTotUni     := nTotNPedCli( dbfTmpLin )
         nTotRec     := nUnidadesRecibidasPedPrv( ( dbfPedPrvL )->cSerPed + Str( ( dbfPedPrvL )->nNumPed ) + ( dbfPedPrvL )->cSufPed, ( dbfTmpLin)->cRef, ( dbfTmpLin )->cValPr1, ( dbfTmpLin )->cValPr2, ( dbfTmpLin )->cRefPrv, ( dbfTmpLin )->cDetalle, dbfAlbPrvL )

      end

      ( dbfPedPrvL )->( OrdSetFocus( nOrdAnt ) )

   end

   do case
      case nTotRec == 0
         nEstado     := 1
      case nTotRec < nTotUni
         nEstado     := 2
      case nTotRec >= nTotUni
         nEstado     := 3
   end

Return nEstado



Static Function LoadTrans( aTmp, oGetCod, oGetKgs, oSayTrn )

   local uValor   := oGetCod:VarGet()

   if Empty( uValor )

      oSayTrn:cText( "" )
      oGetKgs:cText( 0 )

   else

      if oTrans:oDbf:SeekInOrd( uValor, "cCodTrn" )
         oGetCod:cText( uValor )
         oSayTrn:cText( oTrans:oDbf:cNomTrn )
         oGetKgs:cText( oTrans:oDbf:nKgsTrn )
      else
         msgStop( "Código de transportista no encontrado." )
         Return .F.
      end

   end

   RecalculaTotal( aTmp )

Return .T.
#line 10057 ".\Prg\Pedcli.prg"
Static Function DataReport( oFr )





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Pedidos", ( dbfPedCliT )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Pedidos", cItemsToReport( aItmPedCli() ) )

   oFr:SetWorkArea(     "Lineas de pedidos", ( dbfPedCliL )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de pedidos", cItemsToReport( aColPedCli() ) )

   oFr:SetWorkArea(     "Incidencias de pedidos", ( dbfPedCliI )->( Select() ) )
   oFr:SetFieldAliases( "Incidencias de pedidos", cItemsToReport( aIncPedCli() ) )

   oFr:SetWorkArea(     "Documentos de pedidos", ( dbfPedCliD )->( Select() ) )
   oFr:SetFieldAliases( "Documentos de pedidos", cItemsToReport( aPedCliDoc() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( dbfClient )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Obras", ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Obras",  cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlm )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Rutas", ( dbfRuta )->( Select() ) )
   oFr:SetFieldAliases( "Rutas", cItemsToReport( aItmRut() ) )

   oFr:SetWorkArea(     "Agentes", ( dbfAgent )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Formas de pago", ( dbfFpago )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Transportistas", oTrans:Select() )
   oFr:SetFieldAliases( "Transportistas", cObjectsToReport( oTrans:oDbf ) )

   oFr:SetWorkArea(     "Artículos", ( dbfArticulo )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOferta )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(     "Unidades de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetMasterDetail( "Pedidos", "Lineas de pedidos",                 {|| ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Incidencias de pedidos",            {|| ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Documentos de pedidos",             {|| ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed } )
   oFr:SetMasterDetail( "Pedidos", "Empresa",                           {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Pedidos", "Clientes",                          {|| ( dbfPedCliT )->cCodCli } )
   oFr:SetMasterDetail( "Pedidos", "Obras",                             {|| ( dbfPedCliT )->cCodCli + ( dbfPedCliT )->cCodObr } )
   oFr:SetMasterDetail( "Pedidos", "Almacen",                           {|| ( dbfPedCliT )->cCodAlm } )
   oFr:SetMasterDetail( "Pedidos", "Rutas",                             {|| ( dbfPedCliT )->cCodRut } )
   oFr:SetMasterDetail( "Pedidos", "Agentes",                           {|| ( dbfPedCliT )->cCodAge } )
   oFr:SetMasterDetail( "Pedidos", "Formas de pago",                    {|| ( dbfPedCliT )->cCodPgo } )
   oFr:SetMasterDetail( "Pedidos", "Transportistas",                    {|| ( dbfPedCliT )->cCodTrn } )

   oFr:SetMasterDetail( "Lineas de pedidos", "Artículos",               {|| ( dbfPedCliL )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Ofertas",                 {|| ( dbfPedCliL )->cRef } )
   oFr:SetMasterDetail( "Lineas de pedidos", "Unidades de medición",    {|| ( dbfPedCliL )->cUnidad } )

   oFr:SetResyncPair( "Pedidos", "Lineas de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Incidencias de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Documentos de pedidos" )
   oFr:SetResyncPair( "Pedidos", "Empresa" )
   oFr:SetResyncPair( "Pedidos", "Clientes" )
   oFr:SetResyncPair( "Pedidos", "Obras" )
   oFr:SetResyncPair( "Pedidos", "Almacenes" )
   oFr:SetResyncPair( "Pedidos", "Rutas" )
   oFr:SetResyncPair( "Pedidos", "Agentes" )
   oFr:SetResyncPair( "Pedidos", "Formas de pago" )
   oFr:SetResyncPair( "Pedidos", "Transportistas" )

   oFr:SetResyncPair( "Lineas de pedidos", "Artículos" )
   oFr:SetResyncPair( "Lineas de pedidos", "Ofertas" )
   oFr:SetResyncPair( "Lineas de pedidos", "Unidades de medición" )


Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Pedidos" )
   oFr:DeleteCategory(  "Lineas de Pedidos" )





   oFr:AddVariable(     "Pedidos",             "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Pedidos",             "Total pedido",                        "GetHbVar('nTotPed')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable(     "Pedidos",             "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Pedidos",             "Total descuentos",                    "GetHbVar('nTotalDto')" )
   oFr:AddVariable(     "Pedidos",             "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Pedidos",             "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable(     "Pedidos",             "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable(     "Pedidos",             "Total " + cImp(),                           "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Pedidos",             "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable(     "Pedidos",             "Total página",                        "GetHbVar('nTotPag')" )
   oFr:AddVariable(     "Pedidos",             "Total peso",                          "GetHbVar('nTotPes')" )
   oFr:AddVariable(     "Pedidos",             "Total costo",                         "GetHbVar('nTotCos')" )
   oFr:AddVariable(     "Pedidos",             "Total artículos",                     "GetHbVar('nTotArt')" )
   oFr:AddVariable(     "Pedidos",             "Total cajas",                         "GetHbVar('nTotCaj')" )
   oFr:AddVariable(     "Pedidos",             "Cuenta por defecto del cliente",      "GetHbVar('cCtaCli')" )

   oFr:AddVariable(     "Pedidos",             "Bruto primer tipo de " + cImp(),            "GetHbArrayVar('aIvaUno',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto segundo tipo de " + cImp(),           "GetHbArrayVar('aIvaDos',1)" )
   oFr:AddVariable(     "Pedidos",             "Bruto tercer tipo de " + cImp(),            "GetHbArrayVar('aIvaTre',1)" )
   oFr:AddVariable(     "Pedidos",             "Base primer tipo de " + cImp(),             "GetHbArrayVar('aIvaUno',2)" )
   oFr:AddVariable(     "Pedidos",             "Base segundo tipo de " + cImp(),            "GetHbArrayVar('aIvaDos',2)" )
   oFr:AddVariable(     "Pedidos",             "Base tercer tipo de " + cImp(),             "GetHbArrayVar('aIvaTre',2)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo " + cImp(),          "GetHbArrayVar('aIvaUno',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo " + cImp(),         "GetHbArrayVar('aIvaDos',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo " + cImp(),          "GetHbArrayVar('aIvaTre',3)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje primer tipo RE",           "GetHbArrayVar('aIvaUno',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje segundo tipo RE",          "GetHbArrayVar('aIvaDos',4)" )
   oFr:AddVariable(     "Pedidos",             "Porcentaje tercer tipo RE",           "GetHbArrayVar('aIvaTre',4)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer tipo " + cImp(),             "GetHbArrayVar('aIvaUno',8)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo tipo " + cImp(),            "GetHbArrayVar('aIvaDos',8)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer tipo " + cImp(),             "GetHbArrayVar('aIvaTre',8)" )
   oFr:AddVariable(     "Pedidos",             "Importe primer RE",                   "GetHbArrayVar('aIvaUno',9)" )
   oFr:AddVariable(     "Pedidos",             "Importe segundo RE",                  "GetHbArrayVar('aIvaDos',9)" )
   oFr:AddVariable(     "Pedidos",             "Importe tercer RE",                   "GetHbArrayVar('aIvaTre',9)" )

   oFr:AddVariable(     "Pedidos",             "Total unidades primer tipo de impuestos especiales",            "GetHbArrayVar('aIvmUno',1 )" )
   oFr:AddVariable(     "Pedidos",             "Total unidades segundo tipo de impuestos especiales",           "GetHbArrayVar('aIvmDos',1 )" )
   oFr:AddVariable(     "Pedidos",             "Total unidades tercer tipo de impuestos especiales",            "GetHbArrayVar('aIvmTre',1 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del primer tipo de impuestos especiales",               "GetHbArrayVar('aIvmUno',2 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del segundo tipo de impuestos especiales",              "GetHbArrayVar('aIvmDos',2 )" )
   oFr:AddVariable(     "Pedidos",             "Importe del tercer tipo de impuestos especiales",               "GetHbArrayVar('aIvmTre',2 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe primer tipo de impuestos especiales",             "GetHbArrayVar('aIvmUno',3 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe segundo tipo de impuestos especiales",            "GetHbArrayVar('aIvmDos',3 )" )
   oFr:AddVariable(     "Pedidos",             "Total importe tercer tipo de impuestos especiales",             "GetHbArrayVar('aIvmTre',3 )" )


   oFr:AddVariable(     "Pedidos",             "Fecha del primer vencimiento",        "GetHbArrayVar('aDatVto',1)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del segundo vencimiento",       "GetHbArrayVar('aDatVto',2)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del tercer vencimiento",        "GetHbArrayVar('aDatVto',3)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del cuarto vencimiento",        "GetHbArrayVar('aDatVto',4)" )
   oFr:AddVariable(     "Pedidos",             "Fecha del quinto vencimiento",        "GetHbArrayVar('aDatVto',5)" )
   oFr:AddVariable(     "Pedidos",             "Importe del primer vencimiento",      "GetHbArrayVar('aImpVto',1)" )
   oFr:AddVariable(     "Pedidos",             "Importe del segundo vencimiento",     "GetHbArrayVar('aImpVto',2)" )
   oFr:AddVariable(     "Pedidos",             "Importe del tercero vencimiento",     "GetHbArrayVar('aImpVto',3)" )
   oFr:AddVariable(     "Pedidos",             "Importe del cuarto vencimiento",      "GetHbArrayVar('aImpVto',4)" )
   oFr:AddVariable(     "Pedidos",             "Importe del quinto vencimiento",      "GetHbArrayVar('aImpVto',5)" )

   oFr:AddVariable(     "Lineas de Pedidos",   "Detalle del artículo",                "CallHbFunc('cDesPedCli')"  )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total unidades artículo",             "CallHbFunc('nTotNPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Precio unitario del artículo",        "CallHbFunc('nTotUPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total línea de pedido",               "CallHbFunc('nTotLPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total peso por línea",                "CallHbFunc('nPesLPedCli')" )
   oFr:AddVariable(     "Lineas de Pedidos",   "Total final línea del pedido",        "CallHbFunc('nTotFPedCli')" )

Return nil



Function DesignReportPedCli( oFr, dbfDoc )

   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   if lFlag





      DataReport( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "   CallHbFunc('nTotPedCli');"                              + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "CabeceraColumnas",  "MainPage", 6 )
         oFr:SetProperty(     "CabeceraColumnas",  "Top", 200 )
         oFr:SetProperty(     "CabeceraColumnas",  "Height", 0 )
         oFr:SetProperty(     "CabeceraColumnas",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet", "Pedidos" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de pedidos" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lOpen
         CloseFiles()
      end

   else

      Return .F.

   end

Return .T.



Function PrintReportPedCli( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr
   local cFilePdf       := cPatTmp() + "PedidoCliente" + StrTran( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, " ", "" ) + ".Pdf"

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;
   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2
            oFr:ShowPreparedReport()

         case nDevice == 1
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3
            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatTmp() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .T. )
            oFr:DoExport(     "PDFExport" )

         case nDevice == 6

            oFr:SetProperty(  "PDFExport", "ShowDialog",       .F. )
            oFr:SetProperty(  "PDFExport", "DefaultPath",      cPatTmp() )
            oFr:SetProperty(  "PDFExport", "FileName",         cFilePdf )
            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:SetProperty(  "PDFExport", "OpenAfterExport",  .F. )
            oFr:DoExport(     "PDFExport" )

            if file( cFilePdf )

               with object ( TGenMailing():New() )

                  :SetTypeDocument( "nPedCli" )
                  :SetDe(           uFieldEmpresa( "cNombre" ) )
                  :SetCopia(        uFieldEmpresa( "cCcpMai" ) )
                  :SetAdjunto(      cFilePdf )
                  :SetPara(         RetFld( ( dbfPedCliT )->cCodCli, dbfClient, "cMeiInt" ) )
                  :SetAsunto(       "Envio de pedido de cliente número " + ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) )
                  :SetMensaje(      "Adjunto le remito nuestro pedido de cliente " + ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + Space( 1 ) )
                  :SetMensaje(      "de fecha " + Dtoc( ( dbfPedCliT )->dfecPed ) + Space( 1 ) )
                  :SetMensaje(      Chr(13)+Chr(10) )
                  :SetMensaje(      Chr(13)+Chr(10) )
                  :SetMensaje(      "Reciba un cordial saludo." )

                  :GeneralResource( dbfPedCliT, aItmPedCli() )

               end

            end

      end

   end





   oFr:DestroyFr()

Return .T.



Static Function DataReportEntPedCli( oFr, cPedCliP )





   oFr:ClearDataSets()

   if !Empty( cPedCliP )
   oFr:SetWorkArea(     "Entrega", ( cPedCliP )->( Select() ), .F., { 1, 1, 0 } )
   else
   oFr:SetWorkArea(     "Entrega", ( dbfPedCliP )->( Select() ), .F., { 1, 1, 0 } )
   end
   oFr:SetFieldAliases( "Entrega", cItemsToReport( aPedCliPgo() ) )

   oFr:SetWorkArea(     "Pedido de cliente", ( dbfPedCliT )->( Select() ) )
   oFr:SetFieldAliases( "Pedido de cliente", cItemsToReport( aItmPedCli() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( dbfClient )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Formas de pago", ( dbfFpago )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   if !Empty( cPedCliP )
   oFr:SetMasterDetail( "Entrega", "Pedido de cliente",        {|| ( cPedCliP )->cSerPed + Str( ( cPedCliP )->nNumPed ) + ( cPedCliP )->cSufPed } )
   oFr:SetMasterDetail( "Entrega", "Clientes",                 {|| ( cPedCliP )->cCodCli } )
   oFr:SetMasterDetail( "Entrega", "Formas de pago",           {|| ( cPedCliP )->cCodPgo } )
   else
   oFr:SetMasterDetail( "Entrega", "Pedido de cliente",        {|| ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed } )
   oFr:SetMasterDetail( "Entrega", "Clientes",                 {|| ( dbfPedCliP )->cCodCli } )
   oFr:SetMasterDetail( "Entrega", "Formas de pago",           {|| ( dbfPedCliP )->cCodPgo } )
   end

   oFr:SetMasterDetail( "Entrega", "Empresa",                  {|| cCodigoEmpresaEnUso() } )

   oFr:SetResyncPair(   "Entrega", "Pedido de cliente" )
   oFr:SetResyncPair(   "Entrega", "Empresa" )
   oFr:SetResyncPair(   "Entrega", "Clientes" )
   oFr:SetResyncPair(   "Entrega", "Formas de pago" )

Return nil



Static Function VariableReportEntPedCli( oFr )





   oFr:AddVariable( "Pedido de cliente",     "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable( "Pedido de cliente",     "Total pedido",                        "GetHbVar('nTotPed')" )
   oFr:AddVariable( "Pedido de cliente",     "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable( "Pedido de cliente",     "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable( "Pedido de cliente",     "Total bruto",                         "GetHbVar('nTotBrt')" )
   oFr:AddVariable( "Pedido de cliente",     "Total descuento",                     "GetHbVar('nTotDto')" )
   oFr:AddVariable( "Pedido de cliente",     "Total descuento pronto pago",         "GetHbVar('nTotDpp')" )
   oFr:AddVariable( "Pedido de cliente",     "Total neto",                          "GetHbVar('nTotNet')" )
   oFr:AddVariable( "Pedido de cliente",     "Total primer descuento definible",    "GetHbVar('nTotUno')" )
   oFr:AddVariable( "Pedido de cliente",     "Total segundo descuento definible",   "GetHbVar('nTotDos')" )
   oFr:AddVariable( "Pedido de cliente",     "Total " + cImp(),                           "GetHbVar('nTotIva')" )
   oFr:AddVariable( "Pedido de cliente",     "Total RE",                            "GetHbVar('nTotReq')" )
   oFr:AddVariable( "Pedido de cliente",     "Total página",                        "GetHbVar('nTotPag')" )
   oFr:AddVariable( "Pedido de cliente",     "Total peso",                          "GetHbVar('nTotPes')" )
   oFr:AddVariable( "Pedido de cliente",     "Total costo",                         "GetHbVar('nTotCos')" )
   oFr:AddVariable( "Pedido de cliente",     "Total artículos",                     "GetHbVar('nTotArt')" )
   oFr:AddVariable( "Pedido de cliente",     "Total cajas",                         "GetHbVar('nTotCaj')" )
   oFr:AddVariable( "Pedido de cliente",     "Bruto primer tipo de " + cImp(),            "GetHbArrayVar('aIvaUno',1)" )
   oFr:AddVariable( "Pedido de cliente",     "Bruto segundo tipo de " + cImp(),           "GetHbArrayVar('aIvaDos',1)" )
   oFr:AddVariable( "Pedido de cliente",     "Bruto tercer tipo de " + cImp(),            "GetHbArrayVar('aIvaTre',1)" )
   oFr:AddVariable( "Pedido de cliente",     "Base primer tipo de " + cImp(),             "GetHbArrayVar('aIvaUno',2)" )
   oFr:AddVariable( "Pedido de cliente",     "Base segundo tipo de " + cImp(),            "GetHbArrayVar('aIvaDos',2)" )
   oFr:AddVariable( "Pedido de cliente",     "Base tercer tipo de " + cImp(),             "GetHbArrayVar('aIvaTre',2)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje primer tipo " + cImp(),          "GetHbArrayVar('aIvaUno',3)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje segundo tipo " + cImp(),         "GetHbArrayVar('aIvaDos',3)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje tercer tipo " + cImp(),          "GetHbArrayVar('aIvaTre',3)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje primer tipo RE",           "GetHbArrayVar('aIvaUno',4)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje segundo tipo RE",          "GetHbArrayVar('aIvaDos',4)" )
   oFr:AddVariable( "Pedido de cliente",     "Porcentaje tercer tipo RE",           "GetHbArrayVar('aIvaTre',4)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe primer tipo " + cImp(),             "GetHbArrayVar('aIvaUno',8)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe segundo tipo " + cImp(),            "GetHbArrayVar('aIvaDos',8)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe tercer tipo " + cImp(),             "GetHbArrayVar('aIvaTre',8)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe primer RE",                   "GetHbArrayVar('aIvaUno',9)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe segundo RE",                  "GetHbArrayVar('aIvaDos',9)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe tercer RE",                   "GetHbArrayVar('aIvaTre',9)" )
   oFr:AddVariable( "Pedido de cliente",     "Fecha del primer vencimiento",        "GetHbArrayVar('aDatVto',1)" )
   oFr:AddVariable( "Pedido de cliente",     "Fecha del segundo vencimiento",       "GetHbArrayVar('aDatVto',2)" )
   oFr:AddVariable( "Pedido de cliente",     "Fecha del tercer vencimiento",        "GetHbArrayVar('aDatVto',3)" )
   oFr:AddVariable( "Pedido de cliente",     "Fecha del cuarto vencimiento",        "GetHbArrayVar('aDatVto',4)" )
   oFr:AddVariable( "Pedido de cliente",     "Fecha del quinto vencimiento",        "GetHbArrayVar('aDatVto',5)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe del primer vencimiento",      "GetHbArrayVar('aImpVto',1)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe del segundo vencimiento",     "GetHbArrayVar('aImpVto',2)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe del tercero vencimiento",     "GetHbArrayVar('aImpVto',3)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe del cuarto vencimiento",      "GetHbArrayVar('aImpVto',4)" )
   oFr:AddVariable( "Pedido de cliente",     "Importe del quinto vencimiento",      "GetHbArrayVar('aImpVto',5)" )

Return nil



Function DesignReportEntPedCli( oFr, dbfDoc )

   if OpenFiles()





      DataReportEntPedCli( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotPedCli');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:SetProperty(     "MainPage",          "OnBeforePrint", "DetalleOnMasterDetail" )

         oFr:AddBand(         "CuerpoDocumento",   "MainPage", 2 )
         oFr:SetProperty(     "CuerpoDocumento",   "Top", 0 )
         oFr:SetProperty(     "CuerpoDocumento",   "Height", 300 )

         oFr:AddBand(         "CabeceraColumnas",  "MainPage", 6 )
         oFr:SetProperty(     "CabeceraColumnas",  "Top", 300 )
         oFr:SetProperty(     "CabeceraColumnas",  "Height", 0 )
         oFr:SetProperty(     "CabeceraColumnas",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet", "Entrega" )

      end





      VariableReportEntPedCli( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      CloseFiles()

   else

      Return .F.

   end

Return .T.



Function PrintReportEntPedCli( nDevice, nCopies, cPrinter, dbfDoc, cPedCliP )

   local oFr

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;
   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReportEntPedCli( oFr, cPedCliP )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      VariableReportEntPedCli( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2
            oFr:ShowPreparedReport()

         case nDevice == 1
            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3
            oFr:DoExport( "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































_HB_CLASS pdaPedCliSenderReciver ; UTILITY FUNCTION pdaPedCliSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "pdaPedCliSenderReciver" , { HBObject():Classh } ) ) ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @pdaPedCliSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @pdaPedCliSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS pdaPedCliSenderReciver ;



UTILITY STATIC function pdaPedCliSenderReciver_CreateData( oPgrActual, oSayStatus, cPatPreVenta) ; local Self AS CLASS pdaPedCliSenderReciver := QSelf() AS CLASS pdaPedCliSenderReciver

   local pdaPedCliT
   local pdaPedCliL
   local pdaPedCliR
   local pdaPedCliI
   local pdaPedCliP
   local pdaPedCliD
   local dbfPedCliT
   local dbfPedCliL
   local dbfPedCliR
   local dbfPedCliI
   local dbfPedCliP
   local dbfPedCliD
   local lExist         := .F.
   local cFileName
   local cNumPedCliT
   local cPatPc         := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )



   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliT.DBF" ), ( cCheckArea( "PedCliT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfPedCliT )->( OrdSetFocus( "lSndDoc" ) )

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliR.DBF" ), ( cCheckArea( "PedCliR", @dbfPedCliR ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliI.DBF" ), ( cCheckArea( "PedCliI", @dbfPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliI.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliP.DBF" ), ( cCheckArea( "PedCliP", @dbfPedCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PedCliD.Dbf" ), ( cCheckArea( "PedCliD", @dbfPedCliD ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PedCliD.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliT.Dbf", cCheckArea( "PedCliT", @pdaPedCliT ), .T. )
   ( pdaPedCliT )->( ordListAdd( cPatEmp() + "PedCliT.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliL.Dbf", cCheckArea( "PedCliL", @pdaPedCliL ), .T. )
   ( pdaPedCliL )->( ordListAdd( cPatEmp() + "PedCliL.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliR.Dbf", cCheckArea( "PedCliR", @pdaPedCliR ), .T. )
   ( pdaPedCliR )->( ordListAdd( cPatEmp() + "PedCliR.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliI.Dbf", cCheckArea( "PedCliI", @pdaPedCliI ), .T. )
   ( pdaPedCliI )->( ordListAdd( cPatEmp() + "PedCliI.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliP.Dbf", cCheckArea( "PedCliP", @pdaPedCliP ), .T. )
   ( pdaPedCliP )->( ordListAdd( cPatEmp() + "PedCliP.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatEmp() + "PedCliD.Dbf", cCheckArea( "PedCliD", @pdaPedCliD ), .T. )
   ( pdaPedCliD )->( ordListAdd( cPatEmp() + "PedCliD.Cdx" ) )

   if !Empty( oPgrActual )
      oPgrActual:SetRange( 0, ( pdaPedCliT )->( OrdKeyCount() ) )
   end

   ( pdaPedCliT )->( dbGoTop() )
   while !( pdaPedCliT )->( eof() )

      if ( pdaPedCliT )->lSndDoc

         cNumPedCliT    := ( pdaPedCliT )->cSerPed + Str( ( pdaPedCliT )->nNumPed ) + ( pdaPedCliT )->cSufPed

         if !( dbfPedCliT )->( dbSeek( cNumPedCliT ) )

            dbPass( pdaPedCliT, dbfPedCliT, .T. )





            if ( pdaPedCliL )->( dbSeek( cNumPedCliT ) )
               while ( pdaPedCliL )->cSerPed + Str( ( pdaPedCliL )->nNumPed ) + ( pdaPedCliL )->cSufPed == cNumPedCliT .AND. !( pdaPedCliL )->( eof() )
                  dbPass( pdaPedCliL, dbfPedCliL, .T. )
                  ( pdaPedCliL )->( dbSkip() )
               end
            end





            if ( pdaPedCliR )->( dbSeek( cNumPedCliT ) )
               while ( pdaPedCliR )->cSerPed + Str( ( pdaPedCliR )->nNumPed ) + ( pdaPedCliR )->cSufPed == cNumPedCliT .AND. !( pdaPedCliR )->( eof() )
                  dbPass( pdaPedCliR, dbfPedCliR, .T. )
                  ( pdaPedCliR )->( dbSkip() )
               end
            end





            if ( pdaPedCliI )->( dbSeek( cNumPedCliT ) )
               while ( pdaPedCliI )->cSerPed + Str( ( pdaPedCliI )->nNumPed ) + ( pdaPedCliI )->cSufPed == cNumPedCliT .AND. !( pdaPedCliI )->( eof() )
                  dbPass( pdaPedCliI, dbfPedCliI, .T. )
                  ( pdaPedCliI )->( dbSkip() )
               end
            end





            if ( pdaPedCliP )->( dbSeek( cNumPedCliT ) )
               while ( pdaPedCliP )->cSerPed + Str( ( pdaPedCliP )->nNumPed ) + ( pdaPedCliP )->cSufPed == cNumPedCliT .AND. !( pdaPedCliP )->( eof() )
                  dbPass( pdaPedCliP, dbfPedCliP, .T. )
                  ( pdaPedCliP )->( dbSkip() )
               end
            end





            if ( pdaPedCliD )->( dbSeek( cNumPedCliT ) )
               while ( pdaPedCliD )->cSerPed + Str( ( pdaPedCliD )->nNumPed ) + ( pdaPedCliD )->cSufPed == cNumPedCliT .AND. !( pdaPedCliD )->( eof() )
                  dbPass( pdaPedCliD, dbfPedCliD, .T. )
                  ( pdaPedCliD )->( dbSkip() )
               end
            end

             if dbLock( pdaPedCliT )
               ( pdaPedCliT )->lSndDoc  := .F.
               ( pdaPedCliT )->( dbUnLock() )
            end

         end

      end

      ( pdaPedCliT )->( dbSkip() )

      if !Empty( oSayStatus )
         oSayStatus:SetText( "Sincronizando Pedidos " + Alltrim( Str( ( pdaPedCliT )->( OrdKeyNo() ) ) ) + " de " + Alltrim( Str( ( pdaPedCliT )->( OrdKeyCount() ) ) ) )
      end

      SysRefresh()

      if !Empty( oPgrActual )
         oPgrActual:SetPos( ( pdaPedCliT )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   ( pdaPedCliT )->( dbCloseArea() )
   ( pdaPedCliL )->( dbCloseArea() )
   ( pdaPedCliR )->( dbCloseArea() )
   ( pdaPedCliI )->( dbCloseArea() )
   ( pdaPedCliP )->( dbCloseArea() )
   ( pdaPedCliD )->( dbCloseArea() )
   ( dbfPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliR )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( dbfPedCliP )->( dbCloseArea() )
   ( dbfPedCliD )->( dbCloseArea() )

Return ( Self )







FUNCTION IsPedCli( cPath )

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "PedCliT.Dbf" )
      dbCreate( cPath + "PedCliT.Dbf", aSqlStruct( aItmPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliL.Dbf" )
      dbCreate( cPath + "PedCliL.Dbf", aSqlStruct( aColPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliR.DBF" )
      dbCreate( cPath + "PedCliR.Dbf", aSqlStruct( aPedCliRes() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliI.Dbf" )
      dbCreate( cPath + "PedCliI.Dbf", aSqlStruct( aIncPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliD.Dbf" )
      dbCreate( cPath + "PedCliD.Dbf", aSqlStruct( aPedCliDoc() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliP.Dbf" )
      dbCreate( cPath + "PedCliP.Dbf", aSqlStruct( aPedCliPgo() ), cDriver() )
   end






   if !lExistIndex( cPath + "PedCliT.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliL.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliR.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliI.Cdx" ) .OR.  !lExistIndex( cPath + "PedCliP.Cdx" ) .OR.  !lExistTable( cPath + "PedCliD.Cdx" )

      rxPedCli( cPath )

   end

Return ( nil )



FUNCTION mkPedCli( cPath, lAppend, cPathOld, oMeter, bFor )

   local oldPedCliT
   local oldPedCliL
   local oldPedCliI
   local oldPedCliD
   local oldPedCliP
   local oldAlbCliT
   local oldAlbCliL

   IIF( lAppend == nil, lAppend := .F., ) ;
   IIF( cPath == nil, cPath := cPatEmp(), ) ;
   IIF( bFor == nil, bFor := {|| .T. }, ) ;

    IF oMeter <> NIL
        oMeter:cText    := "Generando Bases"
        sysrefresh()
    end

   CreateFiles( cPath )
   rxPedCli( cPath, oMeter )

   IF lAppend .AND. lIsDir( cPathOld )

      dbUseArea( .T., cDriver(), cPath + "PEDCLIT.DBF", cCheckArea( "PEDCLIT", @dbfPedCliT ), .F. )
      ( dbfPedCliT )->( ordListAdd( cPath + "PedCliT.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PEDCLIL.DBF", cCheckArea( "PEDCLIL", @dbfPedCliL ), .F. )
      ( dbfPedCliL )->( ordListAdd( cPath + "PedCliL.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliI.Dbf", cCheckArea( "PedCliI", @dbfPedCliI ), .F. )
      ( dbfPedCliI )->( ordListAdd( cPath + "PedCliI.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliD.Dbf", cCheckArea( "PedCliD", @dbfPedCliD ), .F. )
      ( dbfPedCliD )->( ordListAdd( cPath + "PedCliD.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "PedCliP.Dbf", cCheckArea( "PedCliP", @dbfPedCliP ), .F. )
      ( dbfPedCliP )->( ordListAdd( cPath + "PedCliP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PedCliT.Dbf", cCheckArea( "PEDCLIT", @oldPedCliT ), .F. )
      ( oldPedCliT )->( ordListAdd( cPathOld + "PedCliT.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLIL.DBF", cCheckArea( "PEDCLIL", @oldPedCliL ), .F. )
      ( oldPedCliL )->( ordListAdd( cPathOld + "PEDCLIL.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLII.DBF", cCheckArea( "PEDCLII", @oldPedCliI ), .F. )
      ( oldPedCliI )->( ordListAdd( cPathOld + "PEDCLII.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLID.DBF", cCheckArea( "PEDCLID", @oldPedCliD ), .F. )
      ( oldPedCliD )->( ordListAdd( cPathOld + "PEDCLID.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "PEDCLIP.DBF", cCheckArea( "PEDCLIP", @oldPedCliP ), .F. )
      ( oldPedCliP )->( ordListAdd( cPathOld + "PEDCLIP.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliT.DBF", cCheckArea( "AlbCliT", @oldAlbCliT ), .F. )
      ( oldAlbCliT )->( ordListAdd( cPathOld + "AlbCliT.CDX" ) )

      dbUseArea( .T., cDriver(), cPathOld + "AlbCliL.DBF", cCheckArea( "AlbCliL", @oldAlbCliL ), .F. )
      ( oldAlbCliL )->( ordListAdd( cPathOld + "AlbCliL.CDX" ) )

      while !( oldPedCliT )->( eof() )

         if eval( bFor, oldPedCliT )

            dbCopy( oldPedCliT, dbfPedCliT, .T. )

            if ( dbfPedCliT )->( dbRLock() )
               ( dbfPedCliT )->cTurPed    := Padl( "1", 6 )
               ( dbfPedCliT )->( dbRUnlock() )
            end

            if ( oldPedCliL )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliL )->cSerPed + Str( ( oldPedCliL )->NNUMPED ) + ( oldPedCliL )->CSUFPED == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED .AND. !( oldPedCliL )->( eof() )


                  dbCopy( oldPedCliL, dbfPedCliL, .T. )
                  ( dbfPedCliL )->nUniCaja   := nTotNPedCli( oldPedCliL )
                  ( dbfPedCliL )->nUniCaja   -= nUnidadesRecibidasAlbCli( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed, ( oldPedCliL )->cRef, ( oldPedCliL )->cValPr1, ( oldPedCliL )->cValPr2, ( oldPedCliL )->cRefPrv, ( oldPedCliL )->cDetalle, oldAlbCliL )
                  ( dbfPedCliL )->nUniEnt    := 0


                  ( oldPedCliL )->( dbSkip() )

               end
            end

            if ( oldPedCliI )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliI )->cSerPed + Str( ( oldPedCliI )->nNumPed ) + ( oldPedCliI )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliI )->( eof() )

                  dbCopy( oldPedCliI, dbfPedCliI, .T. )
                  ( oldPedCliI )->( dbSkip() )

               end
            end

            if ( oldPedCliD )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliD )->cSerPed + Str( ( oldPedCliD )->nNumPed ) + ( oldPedCliD )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliD )->( eof() )

                  dbCopy( oldPedCliD, dbfPedCliD, .T. )
                  ( oldPedCliD )->( dbSkip() )

               end
            end

            if ( oldPedCliP )->( dbSeek( ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->NNUMPED ) + ( oldPedCliT )->CSUFPED ) )
               while ( oldPedCliP )->cSerPed + Str( ( oldPedCliP )->nNumPed ) + ( oldPedCliP )->cSufPed == ( oldPedCliT )->cSerPed + Str( ( oldPedCliT )->nNumPed ) + ( oldPedCliT )->cSufPed .AND. !( oldPedCliP )->( eof() )

                  dbCopy( oldPedCliP, dbfPedCliP, .T. )
                  ( oldPedCliP )->( dbSkip() )

               end
            end

         end

         SysRefresh()

         ( oldPedCliT )->( dbSkip() )

      end

      ( dbfPedCliT )->( dbCloseArea() )
      ( dbfPedCliL )->( dbCloseArea() )
      ( dbfPedCliI )->( dbCloseArea() )
      ( dbfPedCliD )->( dbCloseArea() )
      ( dbfPedCliP )->( dbCloseArea() )

      ( oldPedCliT )->( dbCloseArea() )
      ( oldPedCliL )->( dbCloseArea() )
      ( oldPedCliI )->( dbCloseArea() )
      ( oldPedCliD )->( dbCloseArea() )
      ( oldPedCliP )->( dbCloseArea() )

      ( oldAlbCliT )->( dbCloseArea() )
      ( oldAlbCliL )->( dbCloseArea() )

    end

RETURN .T.



FUNCTION rxPedCli( cPath, oMeter )

    local dbfPedCliT

   IIF( cPath == nil, cPath := cPatEmp(), ) ;






   if !lExistTable( cPath + "PEDCLIT.DBF" ) .OR.  !lExistTable( cPath + "PEDCLIL.DBF" ) .OR.  !lExistTable( cPath + "PEDCLIR.DBF" ) .OR.  !lExistTable( cPath + "PEDCLII.DBF" ) .OR.  !lExistTable( cPath + "PEDCLID.DBF" ) .OR.  !lExistTable( cPath + "PEDCLIP.DBF" )
      CreateFiles( cPath )
   end

   fEraseIndex( cPath + "PEDCLIT.CDX" )
   fEraseIndex( cPath + "PEDCLIL.CDX" )
   fEraseIndex( cPath + "PEDCLIR.CDX" )
   fEraseIndex( cPath + "PEDCLII.CDX" )
   fEraseIndex( cPath + "PEDCLID.CDX" )
   fEraseIndex( cPath + "PEDCLIP.CDX" )

   dbUseArea( .T., cDriver(), cPath + "PEDCLIT.DBF", cCheckArea( "PEDCLIT", @dbfPedCliT ), .F. )
   if !( dbfPedCliT )->( neterr() )
      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "DFECPED", "DFECPED", {|| Field->DFECPED } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CCODCLI", "CCODCLI", {|| Field->CCODCLI } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CNOMCLI", "Upper( CNOMCLI )", {|| Upper( Field->CNOMCLI ) } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cCodObr", "cCodObr + Dtos( dFecPed )", {|| Field->cCodObr + Dtos( Field->dFecPed ) } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cCodAge", "cCodAge + Dtos( dFecPed )", {|| Field->cCodAge + Dtos( Field->dFecPed ) } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "dFecEnt", "Dtos( dFecEnt )", {|| Dtos( Field->dFecEnt ) } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted() .and. lInternet", {||!Deleted() .AND. Field->lInternet } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "lInternet", "Dtos( dFecCre ) + cTimCre", {|| Dtos( Field->dFecCre ) + Field->cTimCre } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "CTURPED", "CTURPED + CSUFPED + CCODCAJ", {|| Field->CTURPED + Field->CSUFPED + Field->CCODCAJ} ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIT.CDX", "cNumPre", "cNumPre", {|| Field->cNumPre } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ))
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "lSndDoc", "lSndDoc", {|| Field->lSndDoc } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cCodUsr", "cCodUsr + Dtos( dFecCre ) + cTimCre", {|| Field->cCodUsr + Dtos( Field->dFecCre ) + Field->cTimCre } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted() .and. lInternet .and. nEstado != 3", {|| !Deleted() .AND. Field->lInternet .AND. Field->nEstado <> 3 } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "lIntPedCli", "dFecPed", {|| Field->dFecPed } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cNumAlb", "cNumAlb", {|| Field->cNumAlb } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "cCodWeb", "Str( cCodWeb )", {|| Str( Field->cCodWeb ) } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliT.Cdx", "iNumPre", "'PEDIDO CLIENTES               ' + cSerPed + Str( nNumPed ) + cSufPed", {|| "PEDIDO CLIENTES               " + Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed } ) )

      ( dbfPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver(), cPath + "PEDCLIL.DBF", cCheckArea( "PEDCLIL", @dbfPedCliT ), .F. )
   if !( dbfPedCliT )->( neterr() )
      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIL.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIL.CDX", "cRef", "cRef", {|| Field->CREF } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIL.CDX", "Lote", "cLote", {|| Field->cLote } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliL.Cdx", "iNumPre", "'PEDIDO CLIENTES               ' + cSerPed + Str( nNumPed ) + cSufPed", {|| "PEDIDO CLIENTES               " + Field->cSerPed + Str( Field->nNumPed ) + Field->cSufPed } ) )

      ( dbfPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver(), cPath + "PEDCLIR.DBF", cCheckArea( "PEDCLIR", @dbfPedCliT ), .F. )
   if !( dbfPedCliT )->( neterr() )
      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIR.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED + CREF + CVALPR1 + CVALPR2", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED + Field->CREF + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PEDCLIR.CDX", "CREF", "CREF + CVALPR1 + CVALPR2", {|| Field->CREF + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( dbfPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver(), cPath + "PedCliI.DBF", cCheckArea( "PedCliI", @dbfPedCliT ), .F. )
   if !( dbfPedCliT )->( neterr() )
      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliI.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted() .and. !lSndWeb ", {||!Deleted() .AND. !Field->lSndWeb }  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliI.CDX", "lSndWeb", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( dbfPedCliT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )
   end

   dbUseArea( .T., cDriver(), cPath + "PedCliD.DBF", cCheckArea( "PedCliD", @dbfPedCliT ), .F. )

   if !( dbfPedCliT )->( neterr() )

      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliD.CDX", "NNUMPED", "CSERPED + STR( NNUMPED ) + CSUFPED", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED } ) )

      ( dbfPedCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end

   dbUseArea( .T., cDriver(), cPath + "PedCliP.DBF", cCheckArea( "PedCliP", @dbfPedCliT ), .F. )

   if !( dbfPedCliT )->( neterr() )

      ( dbfPedCliT )->( __dbPack() )

      ( dbfPedCliT )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "nNumPed", "CSERPED + STR( NNUMPED ) + CSUFPED + STR( NNUMREC )", {|| Field->CSERPED + STR( Field->NNUMPED ) + Field->CSUFPED + STR( Field->NNUMREC ) } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "cTurRec", "cTurRec + cSufPed + cCodCaj", {|| Field->cTurRec + Field->cSufPed + Field->cCodCaj } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( dbfPedCliT )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "dEntrega", "dEntrega", {|| Field->dEntrega } ) )

      ( dbfPedCliT )->( ordCondSet("!Deleted() .and. !Field->lPasado", {|| !Deleted() .AND. !Field->lPasado } ) )
      ( dbfPedCliT )->( ordCreate( cPath + "PedCliP.Cdx", "lCtaBnc", "Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp", {|| Field->cEntEmp + Field->cSucEmp + Field->cDigEmp + Field->cCtaEmp } ) )

      ( dbfPedCliT )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de pedidos de clientes" )

   end

RETURN NIL



STATIC FUNCTION CreateFiles( cPath )

   if !lExistTable( cPath + "PedCliT.Dbf" )
      dbCreate( cPath + "PedCliT.Dbf", aSqlStruct( aItmPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliL.Dbf" )
      dbCreate( cPath + "PedCliL.Dbf", aSqlStruct( aColPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliR.DBF" )
      dbCreate( cPath + "PedCliR.Dbf", aSqlStruct( aPedCliRes() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliI.Dbf" )
      dbCreate( cPath + "PedCliI.Dbf", aSqlStruct( aIncPedCli() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliD.Dbf" )
      dbCreate( cPath + "PedCliD.Dbf", aSqlStruct( aPedCliDoc() ), cDriver() )
   end

   if !lExistTable( cPath + "PedCliP.Dbf" )
      dbCreate( cPath + "PedCliP.Dbf", aSqlStruct( aPedCliPgo() ), cDriver() )
   end

RETURN NIL



function aItmPedCli()

   local aItmPedCli := {}

   aAdd( aItmPedCli, { "CSERPED", "C",    1,  0, "Serie del pedido",                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NNUMPED", "N",    9,  0, "Número del pedido",               "'999999999'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CSUFPED", "C",    2,  0, "Sufijo de pedido",                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CTURPED", "C",    6,  0, "Sesión del pedido",               "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECPED", "D",    8,  0, "Fecha del pedido",                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODCLI", "C",   12,  0, "Código del cliente",              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CNOMCLI", "C",   80,  0, "Nombre del cliente",              "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDIRCLI", "C",  100,  0, "Domicilio del cliente",           "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CPOBCLI", "C",   35,  0, "Población del cliente",           "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CPRVCLI", "C",   20,  0, "Provincia del cliente",           "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CPOSCLI", "C",   15,  0, "Código postal del cliente",       "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDNICLI", "C",   30,  0, "DNI del cliente",                 "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LMODCLI", "L",    1,  0, "Modificar datos del cliente",     "'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODAGE", "C",    3,  0, "Código del agente",               "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODOBR", "C",   10,  0, "Código de obra",                  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODTAR", "C",    5,  0, "Código de tarifa",                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODALM", "C",    3,  0, "Código del almacen",              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODCAJ", "C",    3,  0, "Código de caja",                  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODPGO", "C",    2,  0, "Código de pago",                  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODRUT", "C",    4,  0, "Código de la ruta",               "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECENT", "D",    8,  0, "Fecha de salida",                 "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NESTADO", "N",    1,  0, "Estado del pedido",               "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CSUPED",  "C",   35,  0, "Su pedido",                       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCONDENT","C",  100,  0, "Condiciones del pedido",          "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "MCOMENT", "M",   10,  0, "Comentarios",                     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "MOBSERV", "M",   10,  0, "Observaciones",                   "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LMAYOR",  "L",    1,  0, "",                                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NTARIFA", "N",    1,  0, "Tarifa de precio aplicada",       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDTOESP", "C",   50,  0, "Descripción de porcentaje de descuento","",             "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOESP", "N",    5,  2, "Porcentaje de descuento",         "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDPP",    "C",   50,  0, "Descripción porcentaje de descuento por pronto pago","","", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDPP",    "N",    5,  2, "Pct. de dto. por pronto pago",    "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDTOUNO", "C",   25,  0, "Desc. del primer descuento pers.","'@!'",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOUNO", "N",    5,  2, "Pct. del primer descuento pers.", "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDTODOS", "C",   25,  0, "Desc. del segundo descuento pers.","'@!'",              "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTODOS", "N",    5,  2, "Pct. del segundo descuento pers.","'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOCNT", "N",    5,  2, "Pct. de dto. por pago contado",   "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTORAP", "N",    5,  2, "Pct. de dto. por rappel",         "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOPUB", "N",    5,  2, "Pct. de dto. por publicidad",     "'@EZ 99,99'",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOPGO", "N",    5,  2, "Pct. de dto. por pago centralizado", "'@EZ 99,99'",     "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NDTOPTF", "N",    7,  2, "",                                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LRECARGO","L",    1,  0, "Aplicar recargo de equivalencia", "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NPCTCOMAGE","N",  5,  2, "Pct. de comisión del agente",     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NBULTOS", "N",    3,  0, "Número de bultos",                "'999'",              "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CNUMPRE", "C",   12,  0, "",                                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CDIVPED", "C",    3,  0, "Código de divisa",                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NVDVPED", "N",   10,  4, "Valor del cambio de la divisa",   "'@EZ 999,999.9999'", "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LSNDDOC", "L",    1,  0, "Valor lógico documento enviado",  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LPDTCRG", "L",    1,  0, "Lógico para ser entregado",       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NREGIVA", "N",    1,  0, "Regimen de " + cImp() ,           "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LIVAINC", "L",    1,  0, "IGIC incluido" ,                  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NIVAMAN", "N",    6,  2, "Porcentaje de " + cImp() + " del gasto" , "'@EZ 999,99'","","( cDbf )", nil } )
   aAdd( aItmPedCli, { "NMANOBR", "N",   16,  6, "Gastos" ,                         "cPorDivPed",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODTRN", "C",    9,  0, "Código de transportista" ,        "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nKgsTrn", "N",   16,  6, "TARA del transportista" ,         "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LCLOPED", "L",    1,  0, "Lógico de pedido cerrado" ,       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODUSR", "C",    3,  0, "Código de usuario",               "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECCRE", "D",    8,  0, "Fecha de creación del documento", "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CTIMCRE", "C",    5,  0, "Hora de creación del documento",  "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CRETMAT", "C",   20,  0, "Matricula",                       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CRETPOR", "C",   20,  0, "Retirado por",                    "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NPEDPROV","N",    1,  0, "",                                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NMONTAJE","N",    6 , 2, "Horas de montaje",                "'@EZ 999,99'",       "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODGRP", "C",    4,  0, "Código de grupo de cliente",      "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LIMPRIMIDO","L",  1,  0, "Lógico de imprimido",             "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECIMP", "D",    8,  0, "Última fecha de impresión",       "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CHORIMP", "C",    5,  0, "Hora de la última impresión",     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCodDlg", "C",    2,  0, "Código delegación" ,              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nDtoAtp", "N",    6,  2, "Porcentaje de descuento atípico", "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nSbrAtp", "N",    1,  0, "Lugar donde aplicar dto atípico", "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cSituac", "C",   20,  0, "Situación del documento",         "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lWeb",    "L",    1,  0, "Lógico de recibido por web",      "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lAlquiler","L",   1,  0, "Lógico de alquiler",              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECENTR","D",    8,  0, "Fecha de entrada de alquiler",    "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DFECSAL", "D",    8,  0, "Fecha de salida de alquiler",     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CMANOBR", "C",  250,  0, "Literal de gastos" ,              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NGENERADO","N",   1,  0, "Estado generado" ,                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "NRECIBIDO","N",   1,  0, "Estado recibido" ,                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LINTERNET","L",   1,  0, "Pedido desde internet" ,          "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CNUMTIK",  "C",  13,  0, "Número del ticket generado" ,     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "LCANCEL",  "L",   1,  0, "Lógico pedido cancelado" ,        "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "DCANCEL",  "D",   8,  0, "Fecha cancelación" ,              "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCANCEL",  "C", 100,  0, "Motivo cancelación" ,             "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CCODWEB",  "N",  11,  0, "Codigo del pedido en la web" ,    "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "CTLFCLI",  "C",  20,  0, "Teléfono del cliente" ,           "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotNet",  "N",  16,  6, "Total neto" ,                     "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotIva",  "N",  16,  6, "Total " + cImp() ,                "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotReq",  "N",  16,  6, "Total recago" ,                   "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "nTotPed",  "N",  16,  6, "Total pedido" ,                   "",                   "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cNumAlb",  "C",  12,  0, "Número del albarán donde se agrupa" , "",               "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lOperPV",  "L",   1,  0, "Lógico para operar con punto verde" , "",               "", "( cDbf )", .T. } )
   aAdd( aItmPedCli, { "cBanco",   "C",  50,  0, "Nombre del banco del cliente", "",                      "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cEntBnc",  "C",   4,  0, "Entidad de la cuenta bancaria del cliente", "",         "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cSucBnc",  "C",   4,  0, "Sucursal de la cuenta bancaria del cliente", "",        "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cDigBnc",  "C",   2,  0, "Dígito de control de la cuenta bancaria del cliente","","", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "cCtaBnc",  "C",  10,  0, "Cuenta bancaria del cliente", "",                       "", "( cDbf )", nil } )
   aAdd( aItmPedCli, { "lProduc",  "L",   1,  0, "Lógico para incluir en producción" , "",                "", "( cDbf )", .T. } )

return ( aItmPedCli )



function aColPedCli()

   local aColPedCli  := {}

   aAdd( aColPedCli, { "CSERPED",   "C",    1,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NNUMPED",   "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CSUFPED",   "C",    2,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CREF",      "C",   18,  0, "Referencia del artículo",         "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CCODPR1",   "C",   10,  0, "Código de la primera propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CCODPR2",   "C",   10,  0, "Código de la segunda propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CVALPR1",   "C",   10,  0, "Valor de la primera propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CVALPR2",   "C",   10,  0, "Valor de la segunda propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CDETALLE",  "C",  250,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NIVA"    ,  "N",    6,  2, "Porcentaje de impuesto",          "'@E 99.99'",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NCANPED" ,  "N",   16,  6, "Cantidad pedida",                 "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NUNICAJA",  "N",   16,  6, "Unidades por caja",               "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NUNDKIT",   "N",   16,  6, "Unidades del producto kit",       "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NPREDIV" ,  "N",   16,  6, "Precio del artículo",             "cPorDivPed",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NPNTVER",   "N",   16,  6, "Importe punto verde",             "cPorDivPed",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nImpTrn",   "N",   16,  6, "Importe de portes",               "cPorDivPed",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NDTO",      "N",    6,  2, "Descuento del producto",          "'@E 99.9'",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NDTOPRM",   "N",    6,  2, "Descuento de la promoción",       "'@E 99.9'",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NCOMAGE",   "N",    6,  2, "Comisión del agente",             "'@E 99.9'",          "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NCANENT",   "N",   16,  6, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NUNIENT",   "N",   16,  6, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CUNIDAD",   "C",    2,  0, "Unidad de medición",              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NPESOKG",   "N",   16,  6, "Peso del producto",               "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CPESOKG",   "C",    2,  0, "Unidad de peso del producto",     "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "DFECHA",    "D",    8,  0, "Fecha de entrega",                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CTIPMOV",   "C",    2,  0, "Tipo de movimiento",              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "MLNGDES",   "M",   10,  0, "Descripción de artículo sin codificar", "",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LTOTLIN",   "L",    1,  0, "Línea de total",                  "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LIMPLIN",   "L",    1,  0, "Línea no imprimible",             "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NFACCNV",   "N",   13,  4, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NDTODIV",   "N",   16,  6, "Descuento lineal de la compra",   "cPorDivPed",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LRESUND",   "L",    1,  0, "Reservar unidades del stock",     "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NRESUND",   "N",   16,  6, "Unidades reservadas de del stock","",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NRETUND",   "N",   16,  6, "Und. entregadas de las reservadas","",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NNUMLIN",   "N",    4,  0, "Numero de la línea",              "'9999'",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NCTLSTK",   "N",    1,  0, "Tipo de stock de la linea",       "'9'",                "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NCOSDIV",   "N",   16,  6, "Costo del producto" ,             "cPorDivPre",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NPVPREC",   "N",   16,  6, "Precio de venta recomendado" ,    "cPorDivPre",         "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CALMLIN",   "C",    3,  0, "Código de almacén" ,              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CCODIMP",   "C",    3,  0, "Código del IVMH",                 "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NVALIMP",   "N",   16,  6, "Importe de impuesto",             "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LIVALIN",   "L",    1,  0, "Línea con impuesto incluido",     "",                 "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LLOTE",     "L",    1,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NLOTE",     "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CLOTE",     "C",   12,  0, "Número de lote",                  "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LKITART",   "L",    1,  0, "Línea con escandallo",            "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LKITCHL",   "L",    1,  0, "Línea pertenciente a escandallo", "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LKITPRC",   "L",    1,  0, "Línea de escandallos con precio", "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NMESGRT",   "N",    2,  0, "Meses de garantía",               "'99'",               "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LMSGVTA",   "L",    1,  0, "Avisar en venta sin stocks",      "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LNOTVTA",   "L",    1,  0, "No permitir venta sin stocks",    "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LCONTROL",  "L",    1,  0, "" ,                               "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "MNUMSER",   "M",   10,  0, "" ,                               "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodTip",   "C",    3,  0, "Código del tipo de artículo",     "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "LANULADO",  "L",    1,  0, "Anular linea",                    "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "DANULADO",  "D",    8,  0, "Fecha de anulacion",              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "MANULADO",  "M",  100,  0, "Motivo anulacion",                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CCODFAM",   "C",   16,  0, "Código de familia",               "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CGRPFAM",   "C",    3,  0, "Código de grupo de familia",      "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NREQ",      "N",   16,  6, "Recargo de equivalencia",         "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "MOBSLIN",   "M",   10,  0, "Observaciones de linea",          "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NRECIBIDA", "N",    1,  0, "Estado si recibido del artículo", "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CCODPRV",   "C",   12,  0, "Código del proveedor",            "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CNOMPRV",   "C",   30,  0, "Nombre del proveedor",            "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CIMAGEN",   "C",  250,  0, "Fichero de imagen" ,              "",                   "", "( cDbfCol )", .T. } )
   aAdd( aColPedCli, { "NPUNTOS",   "N",   15,  6, "Puntos del artículo",             "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NVALPNT",   "N",   16,  6, "Valor del punto",                 "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NDTOPNT",   "N",    6,  2, "Descuento puntos",                "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NINCPNT",   "N",    6,  2, "Incremento porcentual",           "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CREFPRV",   "C",   18,  0, "Referencia proveedor",            "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "NVOLUMEN",  "N",   16,  6, "Volumen del producto" ,           "'@E 9,999.99'",      "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "CVOLUMEN",  "C",    2,  0, "Unidad del volumen" ,             "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "DFECENT" ,  "D",    8,  0, "Fecha de entrada del alquiler",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "dFecSal" ,  "D",    8,  0, "Fecha de salida del alquiler",    "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lAlquiler" ,"L",    1,  0, "Lógico de alquiler",              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nPreAlq",   "N",   16,  6, "Precio de alquiler",              "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nNumMed",   "N",    1,  0, "Número de mediciones",            "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedUno",   "N",   16,  6, "Primera unidad de medición",      "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedDos",   "N",   16,  6, "Segunda unidad de medición",      "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nMedTre",   "N",   16,  6, "Tercera unidad de medición",      "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "nTarLin",   "N",    1,  0, "Tarifa de precio aplicada" ,      "",                   "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lImpFra",   "L",    1,  0, "Lógico de imprimir frase publicitaria", "",             "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cCodFra",   "C",    3,  0, "Código de frase publicitaria",     "",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "cTxtFra",   "C",  250,  0, "",                                 "",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "Descrip",   "M",   10,  0, "Descripción larga",                "",                  "", "( cDbfCol )", nil } )
   aAdd( aColPedCli, { "lLinOfe",   "L",    1,  0, "Linea con oferta",                 "",                  "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "lVolImp",   "L",    1,  0, "Lógico aplicar volumen con impuestos especiales",  "",  "", "( cDbfCol )", .F. } )
   aAdd( aColPedCli, { "nProduc",   "N",    1,  0, "Lógico de producido",              "",                  "", "( cDbfCol )", .F. } )

return ( aColPedCli )



Static Function aPedCliRes()

   local aPedCliRes  := {}

   aAdd( aPedCliRes, { "CSERPED", "C",    1,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "NNUMPED", "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CSUFPED", "C",    2,  0, "",                                "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CREF",    "C",   18,  0, "Referencia del artículo",         "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CCODPR1", "C",   10,  0, "Código de la primera propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CCODPR2", "C",   10,  0, "Código de la segunda propiedad",  "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CVALPR1", "C",   10,  0, "Valor de la primera propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CVALPR2", "C",   10,  0, "Valor de la segunda propiedad",   "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "DFECRES", "D",    8,  0, "Fecha de la reserva",             "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "NCAJRES", "N",   16,  6, "Cajas reservadas",                "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "NUNDRES", "N",   16,  6, "Unidades reservadas",             "MasUnd()",           "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "NLOTE",   "N",    9,  0, "",                                "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliRes, { "CLOTE",   "C",   12,  0, "Número del lote",                 "",                   "", "( cDbfCol )", nil } )

return ( aPedCliRes )



function aIncPedCli()

   local aIncPedCli  := {}

   aAdd( aIncPedCli, { "cSerPed", "C",    1,  0, "Serie de pedido" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "nNumPed", "N",    9,  0, "Número de pedido" ,                     "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,                     "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "cCodTip", "C",    3,  0, "Tipo de incidencia" ,                   "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "dFecInc", "D",    8,  0, "Fecha de la incidencia" ,               "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "mDesInc", "M",   10,  0, "Descripción de la incidencia" ,         "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lListo",  "L",    1,  0, "Lógico de listo" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lAviso",  "L",    1,  0, "Lógico de aviso" ,                      "",                   "", "( cDbfCol )", nil } )
   aAdd( aIncPedCli, { "lSndWeb", "L",    1,  0, "Lógico de incidencia subia a la web" ,  "",                   "", "( cDbfCol )", nil } )

return ( aIncPedCli )



function aPedCliDoc()

   local aPedCliDoc  := {}

   aAdd( aPedCliDoc, { "cSerPed", "C",    1,  0, "Serie de pedido" ,            "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "nNumPed", "N",    9,  0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cSufPed", "C",    2,  0, "Sufijo de pedido" ,           "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cNombre", "C",  250,  0, "Nombre del documento" ,       "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "cRuta",   "C",  250,  0, "Ruta del documento" ,         "",                   "", "( cDbfCol )", nil } )
   aAdd( aPedCliDoc, { "mObsDoc", "M",   10,  0, "Observaciones del documento", "",                   "", "( cDbfCol )", nil } )

return ( aPedCliDoc )



function aPedCliPgo()

   local aPedCliPgo  := {}

   aAdd( aPedCliPgo, {"cSerPed"     ,"C",  1, 0, "Serie de pedido" ,            "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nNumPed"     ,"N",  9, 0, "Numero de pedido" ,           "'999999999'",        "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSufPed"     ,"C",  2, 0, "Sufijo de pedido" ,           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nNumRec"     ,"N",  2, 0, "Numero del recibo",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodCaj"     ,"C",  3, 0, "Código de caja",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cTurRec"     ,"C",  6, 0, "Sesión del recibo",           "######",             "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodCli"     ,"C", 12, 0, "Código de cliente",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"dEntrega"    ,"D",  8, 0, "Fecha de cobro",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nImporte"    ,"N", 16, 6, "Importe",                     "cPorDivEnt",         "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDescrip"    ,"C",100, 0, "Concepto del pago",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cPgdoPor"    ,"C", 50, 0, "Pagado por",                  "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDocPgo"     ,"C", 50, 0, "Documento de pago",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDivPgo"     ,"C",  3, 0, "Código de la divisa",         "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"nVdvPgo"     ,"N", 10, 6, "Valor de la divisa",          "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodAge"     ,"C",  3, 0, "Código del agente",           "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCodPgo"     ,"C",  2, 0, "Código de pago",              "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"lCloPgo"     ,"L",  1, 0, "Lógico cerrado turno",        "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"lPasado"     ,"L",  1, 0, "Lógico pasado albarán",       "",                   "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cBncEmp"     ,"C", 50, 0, "Banco de la empresa para el recibo" ,"",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cBncCli"     ,"C", 50, 0, "Banco del cliente para el recibo" ,"",              "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cEntEmp"     ,"C",  4, 0, "Entidad de la cuenta de la empresa",  "",           "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSucEmp"     ,"C",  4, 0, "Sucursal de la cuenta de la empresa",  "",          "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDigEmp"     ,"C",  2, 0, "Dígito de control de la cuenta de la empresa", "",  "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCtaEmp"     ,"C", 10, 0, "Cuenta bancaria de la empresa",  "",                "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cEntCli"     ,"C",  4, 0, "Entidad de la cuenta del cliente",  "",             "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cSucCli"     ,"C",  4, 0, "Sucursal de la cuenta del cliente",  "",            "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cDigCli"     ,"C",  2, 0, "Dígito de control de la cuenta del cliente", "",    "", "( cDbfEnt )", nil } )
   aAdd( aPedCliPgo, {"cCtaCli"     ,"C", 10, 0, "Cuenta bancaria del cliente",  "",                  "", "( cDbfEnt )", nil } )

return ( aPedCliPgo )







function nTotNPedCli( uDbf )

   local nTotUnd

   IIF( uDbf == nil, uDbf := dbfPedCliL, ) ;

   do case
   case ValType( uDbf ) == "A"

      if uDbf[ 75 ]

         nTotUnd  := NotCaja( uDbf[ 11 ] )
         nTotUnd  *= uDbf[ 12 ]
         nTotUnd  *= NotCero( uDbf[ 13 ] )
         nTotUnd  *= NotCero( uDbf[ 73 ] - uDbf[ 74 ] )
         nTotUnd  *= NotCero( uDbf[ 78 ] )
         nTotUnd  *= NotCero( uDbf[ 79 ] )
         nTotUnd  *= NotCero( uDbf[ 80 ] )

      else

         nTotUnd  := NotCaja( uDbf[ 11 ] )
         nTotUnd  *= uDbf[ 12 ]
         nTotUnd  *= NotCero( uDbf[ 13 ] )
         nTotUnd  *= NotCero( uDbf[ 78 ] )
         nTotUnd  *= NotCero( uDbf[ 79 ] )
         nTotUnd  *= NotCero( uDbf[ 80 ] )

      end

   case ValType( uDbf ) == "O"

      if uDbf:lAlquiler

         nTotUnd  := NotCaja( uDbf:nCanPed )
         nTotUnd  *= uDbf:nUniCaja
         nTotUnd  *= NotCero( uDbf:nUndKit )
         nTotUnd  *= NotCero( uDbf:dFecEnt - uDbf:dFecSal )
         nTotUnd  *= NotCero( uDbf:nMedUno )
         nTotUnd  *= NotCero( uDbf:nMedDos )
         nTotUnd  *= NotCero( uDbf:nMedTre )

      else

         nTotUnd  := NotCaja( uDbf:nCanPed )
         nTotUnd  *= uDbf:nUniCaja
         nTotUnd  *= NotCero( uDbf:nUndKit )
         nTotUnd  *= NotCero( uDbf:nMedUno )
         nTotUnd  *= NotCero( uDbf:nMedDos )
         nTotUnd  *= NotCero( uDbf:nMedTre )

      end

   otherwise

      if ( uDbf )->lAlquiler

         nTotUnd  := NotCaja( ( uDbf )->nCanPed )
         nTotUnd  *= ( uDbf )->nUniCaja
         nTotUnd  *= NotCero( ( uDbf )->nUndKit )
         nTotUnd  *= NotCero( ( uDbf )->dFecEnt - ( uDbf )->dFecSal )
         nTotUnd  *= NotCero( ( uDbf )->nMedUno )
         nTotUnd  *= NotCero( ( uDbf )->nMedDos )
         nTotUnd  *= NotCero( ( uDbf )->nMedTre )

      else
         nTotUnd  := NotCaja( ( uDbf )->nCanPed )
         nTotUnd  *= ( uDbf )->nUniCaja
         nTotUnd  *= NotCero( ( uDbf )->nUndKit )
         nTotUnd  *= NotCero( ( uDbf )->nMedUno )
         nTotUnd  *= NotCero( ( uDbf )->nMedDos )
         nTotUnd  *= NotCero( ( uDbf )->nMedTre )
      end

   end

return ( nTotUnd )





STATIC FUNCTION CloseFiles()

   DisableAcceso()

   lPedidosWeb( dbfPedCliT )

   DestroyFastFilter( dbfPedCliT, .T., .T. )

   if !Empty( oFont )
      oFont:end()
   end

   if !Empty( dbfPedCliT )
      ( dbfPedCliT )->( dbCloseArea() )
   end

   IIF( !Empty( dbfPedCliL ), ( dbfPedCliL )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedCliR ), ( dbfPedCliR )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedCliI ), ( dbfPedCliI )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedCliD ), ( dbfPedCliD )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedCliP ), ( dbfPedCliP )->( dbCloseArea() ), )
   IIF( !Empty( dbfPreCliT ), ( dbfPreCliT )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedPrvT ), ( dbfPedPrvT )->( dbCloseArea() ), )
   IIF( !Empty( dbfPedPrvL ), ( dbfPedPrvL )->( dbCloseArea() ), )
   IIF( !Empty( dbfPreCliL ), ( dbfPreCliL )->( dbCloseArea() ), )
   IIF( !Empty( dbfPreCliI ), ( dbfPreCliI )->( dbCloseArea() ), )
   IIF( !Empty( dbfPreCliD ), ( dbfPreCliD )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlbCliT ), ( dbfAlbCliT )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlbCliL ), ( dbfAlbCliL )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlbCliP ), ( dbfAlbCliP )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlbPrvT ), ( dbfAlbPrvT )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlbPrvL ), ( dbfAlbPrvL )->( dbCloseArea() ), )
   IIF( !Empty( dbfClient  ), ( dbfClient  )->( dbCloseArea() ), )
   IIF( !Empty( dbfIva     ), ( dbfIva     )->( dbCloseArea() ), )
   IIF( !Empty( dbfTarPreL ), ( dbfTarPreL )->( dbCloseArea() ), )
   IIF( !Empty( dbfTarPreS ), ( dbfTarPreS )->( dbCloseArea() ), )
   IIF( !Empty( dbfPromoT  ), ( dbfPromoT  )->( dbCloseArea() ), )
   IIF( !Empty( dbfPromoL  ), ( dbfPromoL  )->( dbCloseArea() ), )
   IIF( !Empty( dbfPromoC  ), ( dbfPromoC  )->( dbCloseArea() ), )
   IIF( !Empty( dbfAgent   ), ( dbfAgent   )->( dbCloseArea() ), )
   IIF( !Empty( dbfArticulo), ( dbfArticulo)->( dbCloseArea() ), )
   IIF( !Empty( dbfCodebar ), ( dbfCodebar )->( dbCloseArea() ), )
   IIF( !Empty( dbfFamilia ), ( dbfFamilia )->( dbCloseArea() ), )
   IIF( !Empty( dbfPrv     ), ( dbfPrv     )->( dbCloseArea() ), )
   IIF( !Empty( dbfCliAtp  ), ( dbfCliAtp  )->( dbCloseArea() ), )
   IIF( !Empty( dbfFPago   ), ( dbfFPago   )->( dbCloseArea() ), )
   IIF( !Empty( dbfDiv     ), ( dbfDiv     )->( dbCloseArea() ), )
   IIF( !Empty( dbfObrasT  ), ( dbfObrasT  )->( dbCloseArea() ), )
   IIF( !Empty( dbfTVta    ), ( dbfTVta    )->( dbCloseArea() ), )
   IIF( !Empty( dbfDoc     ), ( dbfDoc     )->( dbCloseArea() ), )
   IIF( !Empty( dbfOferta  ), ( dbfOferta  )->( dbCloseArea() ), )
   IIF( !Empty( dbfPro     ), ( dbfPro     )->( dbCloseArea() ), )
   IIF( !Empty( dbfTblPro  ), ( dbfTblPro  )->( dbCloseArea() ), )
   IIF( !Empty( dbfKit     ), ( dbfKit     )->( dbCloseArea() ), )
   IIF( !Empty( dbfRuta    ), ( dbfRuta    )->( dbCloseArea() ), )
   IIF( !Empty( dbfAlm     ), ( dbfAlm     )->( dbCloseArea() ), )
   IIF( !Empty( dbfArtDiv  ), ( dbfArtDiv  )->( dbCloseArea() ), )
   IIF( !Empty( dbfTblCnv  ), ( dbfTblCnv  )->( dbCloseArea() ), )
   IIF( !Empty( dbfCajT    ), ( dbfCajT    )->( dbCloseArea() ), )
   IIF( !Empty( dbfUsr     ), ( dbfUsr     )->( dbCloseArea() ), )
   IIF( !Empty( dbfInci    ), ( dbfInci    )->( dbCloseArea() ), )
   IIF( !Empty( dbfArtPrv  ), ( dbfArtPrv  )->( dbCloseArea() ), )
   IIF( !Empty( dbfDelega  ), ( dbfDelega  )->( dbCloseArea() ), )
   IIF( !Empty( dbfFlt     ), ( dbfFlt     )->( dbCloseArea() ), )
   IIF( !Empty( dbfCount   ), ( dbfCount   )->( dbCloseArea() ), )
   IIF( !Empty( dbfAgeCom  ), ( dbfAgeCom  )->( dbCloseArea() ), )
   IIF( !Empty( dbfEmp     ), ( dbfEmp     )->( dbCloseArea() ), )
   IIF( !Empty( dbfFacPrvL ), ( dbfFacPrvL )->( dbCloseArea() ), )
   IIF( !Empty( dbfRctPrvL ), ( dbfRctPrvL )->( dbCloseArea() ), )
   IIF( !Empty( dbfAntCliT ), ( dbfAntCliT )->( dbCloseArea() ), )
   IIF( !Empty( dbfFacCliT ), ( dbfFacCliT )->( dbCloseArea() ), )
   IIF( !Empty( dbfFacCliL ), ( dbfFacCliL )->( dbCloseArea() ), )
   IIF( !Empty( dbfFacRecL ), ( dbfFacRecL )->( dbCloseArea() ), )
   IIF( !Empty( dbfFacCliP ), ( dbfFacCliP )->( dbCloseArea() ), )
   IIF( !Empty( dbfTikCliT ), ( dbfTikCliT )->( dbCloseArea() ), )
   IIF( !Empty( dbfTikCliL ), ( dbfTikCliL )->( dbCloseArea() ), )
   IIF( !Empty( dbfProLin  ), ( dbfProLin  )->( dbCloseArea() ), )
   IIF( !Empty( dbfProMat  ), ( dbfProMat  )->( dbCloseArea() ), )
   IIF( !Empty( dbfHisMov  ), ( dbfHisMov  )->( dbCloseArea() ), )
   IIF( !Empty( dbfCliInc  ), ( dbfCliInc  )->( dbCloseArea() ), )
   IIF( !Empty( dbfSitua   ), ( dbfSitua   )->( dbCloseArea() ), )
   IIF( !Empty( dbfCliBnc  ), ( dbfCliBnc  )->( dbCloseArea() ), )

   IIF( !Empty( oStock     ), oStock:end(), )
   IIF( !Empty( oTrans     ), oTrans:end(), )
   IIF( !Empty( oNewImp    ), oNewImp:end(), )
   IIF( !Empty( oTipArt    ), oTipArt:end(), )
   IIF( !Empty( oGrpFam    ), oGrpFam:end(), )

   if !Empty( oFraPub )
      oFraPub:end()
   end

   if !Empty( oUndMedicion )
      oUndMedicion:end()
   end

   dbfPedCliT     := nil
   dbfPedCliL     := nil
   dbfPedCliI     := nil
   dbfPedCliD     := nil
   dbfPedCliP     := nil
   dbfPreCliT     := nil
   dbfPreCliL     := nil
   dbfPreCliI     := nil
   dbfPreCliD     := nil
   dbfPedCliR     := nil
   dbfPedPrvT     := nil
   dbfPedPrvL     := nil
   dbfAlbCliT     := nil
   dbfAlbCliL     := nil
   dbfAlbCliP     := nil
   dbfAlbPrvT     := nil
   dbfAlbPrvL     := nil
   dbfClient      := nil
   dbfIva         := nil
   dbfTarPreL     := nil
   dbfTarPreS     := nil
   dbfPromoT      := nil
   dbfPromoL      := nil
   dbfPromoC      := nil
   dbfAgent       := nil
   dbfArticulo    := nil
   dbfPrv         := nil
   dbfArtPrv      := nil
   dbfCodebar     := nil
   dbfCliAtp      := nil
   dbfFpago       := nil
   dbfDiv         := nil
   dbfObrasT      := nil
   dbfTVta        := nil
   dbfDoc         := nil
   dbfOferta      := nil
   dbfPro         := nil
   dbfTblPro      := nil
   dbfKit         := nil
   dbfRuta        := nil
   dbfAlm         := nil
   dbfArtDiv      := nil
   dbfTblCnv      := nil
   dbfCajT        := nil
   dbfUsr         := nil
   dbfFlt         := nil
   dbfInci        := nil
   dbfCount       := nil
   dbfAgeCom      := nil
   dbfEmp         := nil
   dbfFacPrvL     := nil
   dbfRctPrvL     := nil
   dbfAntCliT     := nil
   dbfFacCliT     := nil
   dbfFacCliL     := nil
   dbfFacRecL     := nil
   dbfFacCliP     := nil
   dbfTikCliT     := nil
   dbfTikCliL     := nil
   dbfProLin      := nil
   dbfProMat      := nil
   dbfHisMov      := nil
   dbfCliInc      := nil
   dbfSitua       := nil
   dbfCliBnc      := nil

   oStock         := nil
   oBandera       := nil
   oNewImp        := nil
   oTrans         := nil
   oTipArt        := nil
   oGrpFam        := nil

   lOpenFiles     := .F.

   oWndBrw        := nil

   EnableAcceso()

RETURN .T.





FUNCTION nTotRPedCli( cPedido, cRef, cValPr1, cValPr2, dbfPedCliR )

   local nTotRes     := 0
   local nOrd
   local nRec        := ( dbfPedCliR )->( Recno() )

   IIF( cValPr1 == nil, cValPr1 := Space( 10 ), ) ;
   IIF( cValPr2 == nil, cValPr2 := Space( 10 ), ) ;

   if cPedido == nil

      nOrd           := ( dbfPedCliR )->( OrdSetFocus( "cRef" ) )

      if ( dbfPedCliR )->( dbSeek( cRef + cValPr1 + cValPr2 ) )
         while ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == cRef + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() )
            nTotRes  += nTotNResCli( dbfPedCliR )
            ( dbfPedCliR )->( dbSkip() )
         end
      end

      ( dbfPedCliR )->( OrdSetFocus( nOrd ) )

   else

      nOrd           := ( dbfPedCliR )->( OrdSetFocus( "nNumPed" ) )

      if ( dbfPedCliR )->( dbSeek( cPedido + cRef + cValPr1 + cValPr2 ) )
         while ( dbfPedCliR )->cSerPed + Str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed + ( dbfPedCliR )->cRef + ( dbfPedCliR )->cValPr1 + ( dbfPedCliR )->cValPr2 == cPedido + cRef + cValPr1 + cValPr2 .AND. !( dbfPedCliR )->( eof() )
            nTotRes  += nTotNResCli( dbfPedCliR )
            ( dbfPedCliR )->( dbSkip() )
         end
      end

      ( dbfPedCliR )->( OrdSetFocus( nOrd ) )

   end

   ( dbfPedCliR )->( dbGoTo( nRec ) )

return ( nTotRes )



Static Function KillTrans()





   if !Empty( dbfTmpLin ) .AND. ( dbfTmpLin )->( Used() )
      ( dbfTmpLin )->( dbCloseArea() )
   end

   if !Empty( dbfTmpInc ) .AND. ( dbfTmpInc )->( Used() )
      ( dbfTmpInc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpDoc ) .AND. ( dbfTmpDoc )->( Used() )
      ( dbfTmpDoc )->( dbCloseArea() )
   end

   if !Empty( dbfTmpPgo ) .AND. ( dbfTmpPgo )->( Used() )
      ( dbfTmpPgo )->( dbCloseArea() )
   end

   if !Empty( dbfTmpRes ) .AND. ( dbfTmpRes )->( Used() )
      ( dbfTmpRes )->( dbCloseArea() )
   end





   dbfErase( cTmpLin )
   dbfErase( cTmpInc )
   dbfErase( cTmpDoc )
   dbfErase( cTmpPgo )
   dbfErase( cTmpRes )

Return .T.



STATIC FUNCTION EndTrans( aTmp, aGet, oBrwLin, oBrwInc, nMode, oDlg )

   local oError
   local oBlock
   local aTabla
   local cSerPed
   local nNumPed
   local cSufPed

   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end

   cSerPed              := aTmp[ 1 ]
   nNumPed              := aTmp[ 2 ]
   CSufPed              := aTmp[ 3 ]

   aTmp[ 48 ]     := .T.





   if !lValidaOperacion( aTmp[5] )
      Return .F.
   end






   if lCliBlq( aTmp[ 6 ], dbfClient )
      msgStop( "Cliente bloqueado, no se pueden realizar operaciones de venta." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 6 ] )
      msgStop( "Código de cliente no puede estar vacío." )
      aGet[ 6 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 17 ] )
      msgStop( "Almacén no puede estar vacío." )
      aGet[ 17 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 18 ] )
      msgStop( "Caja no puede estar vacía." )
      aGet[ 18 ]:SetFocus()
      return .F.
   end

   if Empty( aTmp[ 46 ] )
      MsgStop( "No puede almacenar documento sin código de divisa." )
      aGet[ 46 ]:SetFocus()
      return .F.
   end


   if Empty( aTmp[ 14 ] ) .AND. lRecogerAgentes()
      msgStop( "Agente no puede estar vacío." )
      aGet[ 14 ]:SetFocus()
      return .F.
   end


   if ( dbfTmpLin )->( eof() )
      MsgStop( "No puede almacenar un documento sin líneas." )
      return .F.
   end

   oDlg:Disable()


      oMsgText( "Archivando" )


   oBlock      := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   BeginTransaction()





   ( dbfTmpLin )->( dbClearFilter() )





   aTmp[ 58 ]     := Date()
   aTmp[ 59 ]     := Time()





   if !Empty( oTipPed ) .AND. oTipPed:nAt == 2
      aTmp[ 73 ]   := .T.
   else
      aTmp[ 73 ]   := .F.
   end

   do case

       case nMode == 1 .OR. nMode == 4

         nNumPed           := nNewDoc( cSerPed, dbfPedCliT, "NPEDCLI", , dbfCount )
         aTmp[ 2 ]  := nNumPed

       case nMode == 2





         if nNumPed <> 0

            while ( dbfPedCliL )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
               if dbLock( dbfPedCliL )
                  ( dbfPedCliL )->( dbDelete() )
                  ( dbfPedCliL )->( dbUnLock() )
               end
            end

            while ( dbfPedCliI )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
               if dbLock( dbfPedCliI )
                  ( dbfPedCliI )->( dbDelete() )
                  ( dbfPedCliI )->( dbUnLock() )
               end
            end

            while ( dbfPedCliD )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
                  if dbLock( dbfPedCliD )
                     ( dbfPedCliD )->( dbDelete() )
                     ( dbfPedCliD )->( dbUnLock() )
                  end
            end

            while ( dbfPedCliP )->( dbSeek( cSerPed + str( nNumPed ) + cSufPed ) )
               if dbLock( dbfPedCliP )
                  ( dbfPedCliP )->( dbDelete() )
                  ( dbfPedCliP )->( dbUnLock() )
               end
            end

         end

       end


       if !( "PDA" $ cParamsMain() )
          oMsgProgress()
          oMsgProgress():SetRange( 0, ( dbfTmpLin )->( LastRec() ) )
       end






   ( dbfTmpLin )->( dbGoTop() )

   while ( dbfTmpLin )->( !eof() )

      if nMode == 1
         if dbLock( dbfTmpLin )
            ( dbfTmpLin )->lAnulado    := aTmp[ 81 ]
            ( dbfTmpLin )->dAnulado    := aTmp[ 82 ]
            ( dbfTmpLin )->mAnulado    := aTmp[ 83 ]
            ( dbfTmpLin )->nProduc     := 2
            ( dbfTmpLin )->( dbUnLock() )
         end
      end

      dbPass( dbfTmpLin, dbfPedCliL, .T., cSerPed, nNumPed, cSufPed )

      ( dbfTmpLin )->( dbSkip() )


      if !( "PDA" $ cParamsMain() )
         oMsgProgress():Deltapos(1)
      end


   end





   ( dbfTmpInc )->( dbGoTop() )
   while ( dbfTmpInc )->( !eof() )
      dbPass( dbfTmpInc, dbfPedCliI, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpInc )->( dbSkip() )
   end





   ( dbfTmpDoc )->( dbGoTop() )
   while ( dbfTmpDoc )->( !eof() )
      dbPass( dbfTmpDoc, dbfPedCliD, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpDoc )->( dbSkip() )
   end





   ( dbfTmpPgo )->( dbGoTop() )
   while ( dbfTmpPgo )->( !eof() )
      dbPass( dbfTmpPgo, dbfPedCliP, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpPgo )->( dbSkip() )
   end





   ( dbfTmpRes )->( DbGoTop() )
   while ( dbfTmpRes )->( !eof() )
      dbPass( dbfTmpRes, dbfPedCliR, .T., cSerPed, nNumPed, cSufPed )
      ( dbfTmpRes )->( dbSkip() )
   end













   if aTmp[ 81 ]
      aTmp[ 22 ]  := 3
   end





   aTmp[ 86 ]     := nTotNet
   aTmp[ 87 ]     := nTotIva
   aTmp[ 88 ]     := nTotReq
   aTmp[ 89 ]     := nTotPed





   WinGather( aTmp, aGet, dbfPedCliT, , nMode )













   if !Empty( oStock )
      oStock:SetRecibidoPedCli( cSerPed + Str( nNumPed ) + cSufPed )
   end





   if !Empty( oStock )
      oStock:SetGeneradoPedCli( cSerPed + Str( nNumPed ) + cSufPed )
   end





   dbCommitAll()

   CommitTransaction()

   RECOVER USING oError

      RollBackTransaction()
      msgStop( "Imposible almacenar documento" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )


      oMsgText()




   if !( "PDA" $ cParamsMain() )
      EndProgress()
   end







   oDlg:Enable()

   oDlg:end( 1 )

Return .T.







FUNCTION nTotPedCli( cPedido, cPedCliT, cPedCliL, cIva, cDiv, cFpago, aTmp, cDivRet, lPic, cDbfClient )

    local nRecno
    local cCodDiv
    local cPouDiv
    local dFecPed
    local bCondition
    local nDtoEsp
    local nDtoPP
    local nDtoUno
    local nDtoDos
   local lIvaInc
   local nIvaMan
   local nManObr
   local nSbrAtp
   local nDtoAtp
   local nKgsTrn
   local nTotLin           := 0
   local nTotUnd           := 0
   local aTotalDto         := { 0, 0, 0 }
   local aTotalDPP         := { 0, 0, 0 }
   local aTotalUno         := { 0, 0, 0 }
   local aTotalDos         := { 0, 0, 0 }
   local aTotalAtp         := { 0, 0, 0 }
   local lRecargo
   local nTotAcu           := 0
   local n
   local nDescuentosLineas := 0
   local lPntVer           := .F.

   IIF( cPedCliT == nil, cPedCliT := dbfPedCliT, ) ;
   IIF( cPedCliL == nil, cPedCliL := dbfPedCliL, ) ;
   IIF( cDbfClient == nil, cDbfClient := dbfClient, ) ;
   IIF( cIva == nil, cIva := dbfIva, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( cFPago == nil, cFPago := dbfFPago, ) ;
   IIF( cPedido == nil, cPedido := ( cPedCliT )->cSerPed + Str( ( cPedCliT )->nNumPed ) + ( cPedCliT )->cSufPed, ) ;
   IIF( lPic == nil, lPic := .F., ) ;

   if Empty( Select( cPedCliT ) )
      Return ( 0 )
   end

   if Empty( Select( cPedCliL ) )
      Return ( 0 )
   end

   if Empty( Select( cIva ) )
      Return ( 0 )
   end

   if Empty( Select( cDiv ) )
      Return ( 0 )
   end

   public nTotPed       := 0
   public nTotDto       := 0
   public nTotDPP       := 0
   public nTotNet       := 0
   public nTotIvm       := 0
   public nTotIva       := 0
   public nTotReq       := 0
   public nTotAge       := 0
   public nTotPnt       := 0
   public nTotUno       := 0
   public nTotDos       := 0
   public nTotTrn       := 0
   public nTotCos       := 0
   public nTotRnt       := 0
   public nTotAtp       := 0
   public nTotPes       := 0
   public nTotDif       := 0
   public nPctRnt       := 0
   public nTotBrt       := 0

   public aTotIva       := { { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 }, { 0,0,nil,0,0,0,0,0,0 } }
   public aIvaUno       := aTotIva[ 1 ]
   public aIvaDos       := aTotIva[ 2 ]
   public aIvaTre       := aTotIva[ 3 ]

   public aTotIvm       := { { 0,nil,0 }, { 0,nil,0 }, { 0,nil,0 }, }
   public aIvmUno       := aTotIvm[ 1 ]
   public aIvmDos       := aTotIvm[ 2 ]
   public aIvmTre       := aTotIvm[ 3 ]

   public aImpVto       := {}
   public aDatVto       := {}

   public nNumArt       := 0
   public nNumCaj       := 0

   public nTotArt       := nNumArt
   public nTotCaj       := nNumCaj

   public nTotalDto     := 0

   public cCtaCli       := cClientCuenta( ( cPedCliT )->cCodCli )

   nRecno               := ( cPedCliL )->( RecNo() )

   if aTmp <> nil

      lRecargo          := aTmp[ 42]
      dFecPed           := aTmp[ 5 ]
      nDtoEsp           := aTmp[ 30 ]
      nDtoPP            := aTmp[ 32    ]
      nDtoUno           := aTmp[ 34 ]
      nDtoDos           := aTmp[ 36 ]
      cCodDiv           := aTmp[ 46 ]
      nVdvDiv           := aTmp[ 47 ]
      lIvaInc           := aTmp[ 51 ]
      nIvaMan           := aTmp[ 52 ]
      nManObr           := aTmp[ 53 ]
      nSbrAtp           := aTmp[ 70 ]
      nDtoAtp           := aTmp[ 69 ]
      nKgsTrn           := aTmp[ 55 ]
      lPntVer           := aTmp[ 91 ]
      bCondition        := {|| ( cPedCliL )->( !eof() ) }
      ( cPedCliL )->( dbGoTop() )

   else

      lRecargo          := ( cPedCliT )->lRecargo
      dFecPed           := ( cPedCliT )->dFecPed
      nDtoEsp           := ( cPedCliT )->nDtoEsp
      nDtoPP            := ( cPedCliT )->nDpp
      nDtoUno           := ( cPedCliT )->nDtoUno
      nDtoDos           := ( cPedCliT )->nDtoDos
      cCodDiv           := ( cPedCliT )->cDivPed
      nVdvDiv           := ( cPedCliT )->nVdvPed
      lIvaInc           := ( cPedCliT )->lIvaInc
      nIvaMan           := ( cPedCliT )->nIvaMan
      nManObr           := ( cPedCliT )->nManObr
      nSbrAtp           := ( cPedCliT )->nSbrAtp
      nDtoAtp           := ( cPedCliT )->nDtoAtp
      nKgsTrn           := ( cPedCliT )->nKgsTrn
      lPntVer           := ( cPedCliT )->lOperPv
      bCondition        := {|| ( cPedCliL )->cSerPed + Str( ( cPedCliL )->nNumPed ) + ( cPedCliL )->cSufPed == cPedido .AND. ( cPedCliL )->( !eof() ) }
      ( cPedCliL )->( dbSeek( cPedido ) )

   end





   cPouDiv              := cPouDiv( cCodDiv, cDiv )
   cPorDiv              := cPorDiv( cCodDiv, cDiv )
   cPpvDiv              := cPpvDiv( cCodDiv, cDiv )
   nDouDiv              := nDouDiv( cCodDiv, cDiv )
   nRouDiv              := nRouDiv( cCodDiv, cDiv )
   nDpvDiv              := nDpvDiv( cCodDiv, cDiv )

   while Eval( bCondition )

      if lValLine( cPedCliL )

         if ( cPedCliL )->lTotLin





            if ( cPedCliL )->nPreDiv <> nTotLin .OR. ( cPedCliL )->nUniCaja <> nTotUnd

               if dbLock( cPedCliL )
                  ( cPedCliL )->nPreDiv    := nTotLin
                  ( cPedCliL )->nUniCaja   := nTotUnd
                  ( cPedCliL )->( dbUnLock() )
               end

            end





            nTotLin           := 0
            nTotUnd           := 0

         else

            nTotArt           := nTotLPedCli( cPedCliL, nDouDiv, nRouDiv, , , .F., .F., )
            nTotPnt           := if( lPntVer, nPntLPedCli( cPedCliL, nDpvDiv ), 0 )
            nTotTrn           := nTrnLPedCli( cPedCliL, nDouDiv )
            nTotIvm           := nTotIPedCli( cPedCliL, nDouDiv, nRouDiv )
            nTotCos           += nTotCPedCli( cPedCliL, nDouDiv, nRouDiv )
            nTotPes           += nPesLPedCli( cPedCliL )
            nDescuentosLineas += nTotDtoLPedCli( cPedCliL, nDouDiv )

            if aTmp <> nil
               nTotAge        += nComLPedCli( aTmp, cPedCliL, nDouDiv, nRouDiv )
            else
               nTotAge        += nComLPedCli( cPedCliT, cPedCliL, nDouDiv, nRouDiv )
            end



            nTotLin           += nTotArt
            nTotUnd           += nTotNPedCli( cPedCliL )

            nNumArt           += nTotNPedCli( cPedCliL )
            nNumCaj           += ( cPedCliL )->nCanPed





            do case
            case aTotIva[ 1, 3 ] == NIL .OR. aTotIva[ 1, 3 ] == ( cPedCliL )->nIva
               aTotIva[ 1, 3 ]      := ( cPedCliL )->nIva
               aTotIva[ 1, 4 ]      := ( cPedCliL )->nReq
               aTotIva[ 1, 1 ]      += nTotArt
               aTotIva[ 1, 6 ]      += nTotIvm
               aTotIva[ 1, 7 ]      += nTotTrn
               aTotIva[ 1, 5 ]      += nTotPnt

            case aTotIva[ 2, 3 ] == NIL .OR. aTotIva[ 2, 3 ] == ( cPedCliL )->nIva
               aTotIva[ 2, 3 ]      := ( cPedCliL )->nIva
               aTotIva[ 2, 4 ]      := ( cPedCliL )->nReq
               aTotIva[ 2, 1 ]      += nTotArt
               aTotIva[ 2, 6 ]      += nTotIvm
               aTotIva[ 2, 7 ]      += nTotTrn
               aTotIva[ 2, 5 ]      += nTotPnt

            case aTotIva[ 3, 3 ] == NIL .OR. aTotIva[ 3, 3 ] == ( cPedCliL )->nIva
               aTotIva[ 3, 3 ]      := ( cPedCliL )->nIva
               aTotIva[ 3, 4 ]      := ( cPedCliL )->nReq
               aTotIva[ 3, 1 ]      += nTotArt
               aTotIva[ 3, 6 ]      += nTotIvm
               aTotIva[ 3, 7 ]      += nTotTrn
               aTotIva[ 3, 5 ]      += nTotPnt

            end





            if ( cPedCliL )->nValImp <> 0

               do case
                  case aTotIvm[ 1, 2 ] == nil .OR. aTotIvm[ 1, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 1, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 1, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 1, 3 ]      := aTotIvm[ 1, 1 ] * aTotIvm[ 1, 2 ]

                  case aTotIvm[ 2, 2 ] == nil .OR. aTotIvm[ 2, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 2, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 2, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 2, 3 ]      := aTotIvm[ 2, 1 ] * aTotIvm[ 2, 2 ]

                  case aTotIvm[ 3, 2 ] == nil .OR. aTotIvm[ 3, 2 ] == ( cPedCliL )->nValImp
                     aTotIvm[ 3, 1 ]      += nTotNPedCli( cPedCliL ) * if( ( cPedCliL )->lVolImp, NotCero( ( cPedCliL )->nVolumen ), 1 )
                     aTotIvm[ 3, 2 ]      := ( cPedCliL )->nValImp
                     aTotIvm[ 3, 3 ]      := aTotIvm[ 3, 1 ] * aTotIvm[ 3, 2 ]

               end

            end

         end

      end

      ( cPedCliL )->( dbSkip() )

   end

   ( cPedCliL )->( dbGoto( nRecno ) )





   aTotIva           := aSort( aTotIva,,, {|x,y| if( x[3] <> nil, x[3], -1 ) > if( y[3] <> nil, y[3], -1 )  } )

   aTotIva[ 1, 2 ]         := Round( aTotIva[ 1, 1 ], nRouDiv )
   aTotIva[ 2, 2 ]         := Round( aTotIva[ 2, 1 ], nRouDiv )
   aTotIva[ 3, 2 ]         := Round( aTotIva[ 3, 1 ], nRouDiv )

   nTotBrt         := aTotIva[ 1, 1 ] + aTotIva[ 2, 1 ] + aTotIva[ 3, 1 ]





   if nSbrAtp <= 1 .AND. nDtoAtp <> 0

      aTotalAtp[1]   := Round( aTotIva[ 1, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[2]   := Round( aTotIva[ 2, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[3]   := Round( aTotIva[ 3, 2 ] * nDtoAtp / 100, nRouDiv )

      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]

   end





    IF nDtoEsp     <> 0

      aTotalDto[1]   := Round( aTotIva[ 1, 2 ] * nDtoEsp / 100, nRouDiv )
      aTotalDto[2]   := Round( aTotIva[ 2, 2 ] * nDtoEsp / 100, nRouDiv )
      aTotalDto[3]   := Round( aTotIva[ 3, 2 ] * nDtoEsp / 100, nRouDiv )

      nTotDto        := aTotalDto[ 1 ] + aTotalDto[ 2 ] + aTotalDto[ 3 ]

      aTotIva[ 1, 2 ]      -= aTotalDto[ 1 ]
      aTotIva[ 2, 2 ]      -= aTotalDto[ 2 ]
      aTotIva[ 3, 2 ]      -= aTotalDto[ 3 ]

    end





   if nSbrAtp == 2 .AND. nDtoAtp <> 0

      aTotalAtp[1]   := Round( aTotIva[ 1, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[2]   := Round( aTotIva[ 2, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[3]   := Round( aTotIva[ 3, 2 ] * nDtoAtp / 100, nRouDiv )

      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]

   end





    IF nDtoPP    <> 0

      aTotalDPP[1]   := Round( aTotIva[ 1, 2 ] * nDtoPP / 100, nRouDiv )
      aTotalDPP[2]   := Round( aTotIva[ 2, 2 ] * nDtoPP / 100, nRouDiv )
      aTotalDPP[3]   := Round( aTotIva[ 3, 2 ] * nDtoPP / 100, nRouDiv )

      nTotDPP      := aTotalDPP[1] + aTotalDPP[2] + aTotalDPP[3]

        aTotIva[ 1, 2 ]        -= aTotalDPP[1]
        aTotIva[ 2, 2 ]        -= aTotalDPP[2]
        aTotIva[ 3, 2 ]        -= aTotalDPP[3]

    end





   if nSbrAtp == 3 .AND. nDtoAtp <> 0

      aTotalAtp[1]   := Round( aTotIva[ 1, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[2]   := Round( aTotIva[ 2, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[3]   := Round( aTotIva[ 3, 2 ] * nDtoAtp / 100, nRouDiv )

      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]

   end

    IF nDtoUno <> 0

      aTotalUno[1]   := Round( aTotIva[ 1, 2 ] * nDtoUno / 100, nRouDiv )
      aTotalUno[2]   := Round( aTotIva[ 2, 2 ] * nDtoUno / 100, nRouDiv )
      aTotalUno[3]   := Round( aTotIva[ 3, 2 ] * nDtoUno / 100, nRouDiv )

      nTotUno      := aTotalUno[1] + aTotalUno[2] + aTotalUno[3]

        aTotIva[ 1, 2 ]        -= aTotalUno[1]
        aTotIva[ 2, 2 ]        -= aTotalUno[2]
        aTotIva[ 3, 2 ]        -= aTotalUno[3]

    end





   if nSbrAtp == 4 .AND. nDtoAtp <> 0

      aTotalAtp[1]   := Round( aTotIva[ 1, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[2]   := Round( aTotIva[ 2, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[3]   := Round( aTotIva[ 3, 2 ] * nDtoAtp / 100, nRouDiv )

      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]

   end

    IF nDtoDos <> 0

      aTotalDos[1]   := Round( aTotIva[ 1, 2 ] * nDtoDos / 100, nRouDiv )
      aTotalDos[2]   := Round( aTotIva[ 2, 2 ] * nDtoDos / 100, nRouDiv )
      aTotalDos[3]   := Round( aTotIva[ 3, 2 ] * nDtoDos / 100, nRouDiv )

      nTotDos      := aTotalDos[ 1 ] + aTotalDos[ 2 ] + aTotalDos[ 3 ]

        aTotIva[ 1, 2 ]        -= aTotalDos[1]
        aTotIva[ 2, 2 ]        -= aTotalDos[2]
        aTotIva[ 3, 2 ]        -= aTotalDos[3]

    end





   if nSbrAtp == 5 .AND. nDtoAtp <> 0

      aTotalAtp[1]   := Round( aTotIva[ 1, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[2]   := Round( aTotIva[ 2, 2 ] * nDtoAtp / 100, nRouDiv )
      aTotalAtp[3]   := Round( aTotIva[ 3, 2 ] * nDtoAtp / 100, nRouDiv )

      nTotAtp      := aTotalAtp[ 1 ] + aTotalAtp[ 2 ] + aTotalAtp[ 3 ]

   end





   if nManObr <> 0

      do case
      case aTotIva[ 1, 3 ] == nil .OR. aTotIva[ 1, 3 ] == nIvaMan

         aTotIva[ 1, 3 ]   := nIvaMan
         aTotIva[ 1, 2 ]   += nManObr

      case aTotIva[ 2, 3 ] == nil .OR. aTotIva[ 2, 3 ] == nIvaMan

         aTotIva[ 2, 3 ]   := nIvaMan
         aTotIva[ 2, 2 ]   += nManObr

      case aTotIva[ 3, 3 ] == nil .OR. aTotIva[ 3, 3 ] == nIvaMan

         aTotIva[ 3, 3 ]   := nIvaMan
         aTotIva[ 3, 2 ]   += nManObr

      end

   end





   aTotIva[ 1, 2 ]         += aTotIva[ 1, 7 ]
   aTotIva[ 2, 2 ]         += aTotIva[ 2, 7 ]
   aTotIva[ 3, 2 ]         += aTotIva[ 3, 7 ]





   aTotIva[ 1, 2 ]         += aTotIva[ 1, 5 ]
   aTotIva[ 2, 2 ]         += aTotIva[ 2, 5 ]
   aTotIva[ 3, 2 ]         += aTotIva[ 3, 5 ]





   aTotIva[ 1, 2 ]         += aTotIva[ 1, 6 ]
   aTotIva[ 2, 2 ]         += aTotIva[ 2, 6 ]
   aTotIva[ 3, 2 ]         += aTotIva[ 3, 6 ]

   if !lIvaInc





      aTotIva[ 1, 8 ]      := if( aTotIva[ 1, 3 ] <> NIL, Round( aTotIva[ 1, 2 ] * aTotIva[ 1, 3 ] / 100, nRouDiv ), 0 )
      aTotIva[ 2, 8 ]      := if( aTotIva[ 2, 3 ] <> NIL, Round( aTotIva[ 2, 2 ] * aTotIva[ 2, 3 ] / 100, nRouDiv ), 0 )
      aTotIva[ 3, 8 ]      := if( aTotIva[ 3, 3 ] <> NIL, Round( aTotIva[ 3, 2 ] * aTotIva[ 3, 3 ] / 100, nRouDiv ), 0 )





      if lRecargo
         aTotIva[ 1, 9 ]   := if( aTotIva[ 1, 3 ] <> NIL, Round( aTotIva[ 1, 2 ] * aTotIva[ 1, 4 ] / 100, nRouDiv ), 0 )
         aTotIva[ 2, 9 ]   := if( aTotIva[ 2, 3 ] <> NIL, Round( aTotIva[ 2, 2 ] * aTotIva[ 2, 4 ] / 100, nRouDiv ), 0 )
         aTotIva[ 3, 9 ]   := if( aTotIva[ 3, 3 ] <> NIL, Round( aTotIva[ 3, 2 ] * aTotIva[ 3, 4 ] / 100, nRouDiv ), 0 )
      end

      aTotIva[ 1, 2 ]      -= aTotIva[ 1, 6 ]
      aTotIva[ 2, 2 ]      -= aTotIva[ 2, 6 ]
      aTotIva[ 3, 2 ]      -= aTotIva[ 3, 6 ]

   else

      if aTotIva[ 1, 3 ] <> 0
         aTotIva[ 1, 8 ]   := if( aTotIva[ 1, 3 ] <> nil, Round( aTotIva[ 1, 2 ] / ( 100 / aTotIva[ 1, 3 ] + 1 ), nRouDiv ), 0 )
      end
      if aTotIva[ 2, 3 ] <> 0
         aTotIva[ 2, 8 ]   := if( aTotIva[ 2, 3 ] <> nil, Round( aTotIva[ 2, 2 ] / ( 100 / aTotIva[ 2, 3 ] + 1 ), nRouDiv ), 0 )
      end
      if aTotIva[ 3, 3 ] <> 0
         aTotIva[ 3, 8 ]   := if( aTotIva[ 3, 3 ] <> nil, Round( aTotIva[ 3, 2 ] / ( 100 / aTotIva[ 3, 3 ] + 1 ), nRouDiv ), 0 )
      end

      if lRecargo
         if aTotIva[ 1, 4 ] <> 0
            aTotIva[ 1, 9 ]   := if( aTotIva[ 1, 3 ] <> NIL, Round( aTotIva[ 1, 2 ] / ( 100 / aTotIva[ 1, 4 ] + 1 ), nRouDiv ), 0 )
         end
         if aTotIva[ 3, 4 ] <> 0
            aTotIva[ 2, 9 ]   := if( aTotIva[ 2, 3 ] <> NIL, Round( aTotIva[ 2, 2 ] / ( 100 / aTotIva[ 2, 4 ] + 1 ), nRouDiv ), 0 )
         end
         if aTotIva[ 3, 4 ] <> 0
            aTotIva[ 3, 9 ]   := if( aTotIva[ 3, 3 ] <> NIL, Round( aTotIva[ 3, 2 ] / ( 100 / aTotIva[ 3, 4 ] + 1 ), nRouDiv ), 0 )
         end
      end

      aTotIva[ 1, 2 ]      -= aTotIva[ 1, 8 ]
      aTotIva[ 2, 2 ]      -= aTotIva[ 2, 8 ]
      aTotIva[ 3, 2 ]      -= aTotIva[ 3, 8 ]

      aTotIva[ 1, 2 ]      -= aTotIva[ 1, 9 ]
      aTotIva[ 2, 2 ]      -= aTotIva[ 2, 9 ]
      aTotIva[ 3, 2 ]      -= aTotIva[ 3, 9 ]

   end





   nTotNet           := Round( aTotIva[ 1, 2 ] + aTotIva[ 2, 2 ] + aTotIva[ 3, 2 ], nRouDiv )





   nTotIvm           := Round( aTotIvm[ 1, 3 ] + aTotIvm[ 2, 3 ] + aTotIvm[ 3, 3 ], nRouDiv )





   nTotTrn           := Round( aTotIva[ 1, 7 ] + aTotIva[ 2, 7 ] + aTotIva[ 3, 7 ], nRouDiv )





   nTotPnt           := Round( aTotIva[ 1, 5 ] + aTotIva[ 2, 5 ] + aTotIva[ 3, 5 ], nRouDiv )





   nTotIva           := Round( aTotIva[ 1, 8 ] + aTotIva[ 2, 8 ] + aTotIva[ 3, 8 ], nRouDiv )





   nTotReq           := Round( aTotIva[ 1, 9 ] + aTotIva[ 2, 9 ] + aTotIva[ 3, 9 ], nRouDiv )





   nTotImp           := nTotIva + nTotReq + nTotIvm






   nTotRnt           := Round(         nTotNet - nManObr - nTotAge - nTotPnt - nTotAtp - nTotCos, nRouDiv )

   nPctRnt           := nRentabilidad( nTotNet - nManObr - nTotAge - nTotPnt, nTotAtp, nTotCos )





   if nKgsTrn <> 0
      nTotDif        := nKgsTrn - nTotPes
   else
      nTotDif        := 0
   end





   nTotPed           := nTotNet + nTotImp





   nTotalDto         := nDescuentosLineas + nTotDto + nTotDpp + nTotUno + nTotDos + nTotAtp
























   ( cPedCliL )->( dbGoTo( nRecno) )





   if cDivRet <> nil .AND. cDivRet <> cCodDiv
      nTotNet     := nCnv2Div( nTotNet, cCodDiv, cDivRet, cDiv )
      nTotIvm     := nCnv2Div( nTotIvm, cCodDiv, cDivRet, cDiv )
      nTotIva     := nCnv2Div( nTotIva, cCodDiv, cDivRet, cDiv )
      nTotReq     := nCnv2Div( nTotReq, cCodDiv, cDivRet, cDiv )
      nTotPed     := nCnv2Div( nTotPed, cCodDiv, cDivRet, cDiv )
      nTotPnt     := nCnv2Div( nTotPnt, cCodDiv, cDivRet, cDiv )
      nTotTrn     := nCnv2Div( nTotTrn, cCodDiv, cDivRet, cDiv )
      cPorDiv     := cPorDiv( cDivRet, cDiv )
   end

RETURN ( if( lPic, Trans( nTotPed, cPorDiv ), nTotPed ) )



Static Function RecalculaTotal( aTmp )

   local nTotPedCli  := nTotPedCli( nil, dbfPedCliT, dbfTmpLin, dbfIva, dbfDiv, dbfFPago, aTmp, nil, .F. )
   local nEntPedCli  := nPagPedCli( nil, dbfTmpPgo, dbfDiv )

   aTotIva              := aSort( aTotIva,,, {|x,y| x[1] > y[1] } )

   if oBrwIva <> nil
      oBrwIva:Refresh()
   end





   if oGetNet <> nil
      oGetNet:SetText( Trans( nTotNet, cPorDiv ) )
   end

   if oGetIvm <> nil
      oGetIvm:SetText( Trans( nTotIvm, cPorDiv ) )
   end

   if oGetRnt <> nil
      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) +  AllTrim( cSimDiv( aTmp[ 46 ], dbfDiv ) ) + " : " + AllTrim( Trans( nPctRnt, "999.99" ) ) + "%" ) )
   end

   if oGetIva <> nil
      oGetIva:SetText( Trans( nTotIva, cPorDiv ) )
   end

   if oGetReq <> nil
      oGetReq:SetText( Trans( nTotReq, cPorDiv ) )
   end

   if oGetPnt <> nil
      oGetPnt:SetText( Trans( nTotPnt, cPorDiv ) )
   end

   if oGetTrn <> nil
      oGetTrn:SetText( Trans( nTotTrn, cPorDiv ) )
   end

   if oGetTotal <> nil
      oGetTotal:SetText( Trans( nTotPed, cPorDiv ) )
   end

   if oTotPedLin <> nil
      oTotPedLin:SetText( Trans( nTotPed, cPorDiv ) )
   end

   if oGetAge <> nil
      oGetAge:SetText( Trans( nTotAge, cPorDiv ) )
   end

   if oGetPed <> nil
      oGetPed:SetText( Trans( nTotPedCli, cPorDiv ) )
   end

   if oGetEnt <> nil
      oGetEnt:SetText( Trans( nEntPedCli, cPorDiv ) )
   end

   if oGetPdt <> nil
      oGetPdt:SetText( Trans( nTotPedCli - nEntPedCli, cPorDiv ) )
   end

   if oGetPes <> nil
      oGetPes:cText( nTotPes )
   end

   if oGetDif <> nil
      oGetDif:cText( nTotDif )
   end

Return .T.







STATIC FUNCTION DelDeta( oBrwLin )

   local lKitArt  := ( dbfTmpLin )->lKitArt
   local nNumLin  := ( dbfTmpLin )->nNumLin

   WinDelRec( oBrwLin, dbfTmpLin, , {|| if( lKitArt, DbDelKit( oBrwLin, dbfTmpLin, nNumLin ), ) } )

RETURN ( .T. )







STATIC FUNCTION AppDeta( oBrwLin, bEdtDet, aTmp, lTot, cCodArt )

   IIF( lTot == nil, lTot := .F., ) ;

   WinAppRec( oBrwLin, bEdtDet, dbfTmpLin, lTot, cCodArt, aTmp )

RETURN RecalculaTotal( aTmp )






STATIC FUNCTION EdtDeta( oBrwLin, bEdtDet, aTmp )

   WinEdtRec( oBrwLin, bEdtDet, dbfTmpLin, nil, nil, aTmp )

RETURN RecalculaTotal( aTmp )



Function nPntUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo := ( dbfTmpLin )->NPNTVER

   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

    IF nVdv <> 0
      nCalculo    /= nVdv
    end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nTrnUPedCli( dbfTmpLin, nDec, nVdv )

    local nCalculo

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo       := ( dbfTmpLin )->nImpTrn

    IF nVdv <> 0
      nCalculo    := nCalculo / nVdv
    end

RETURN ( Round( nCalculo, nDec ) )



FUNCTION nDtoUPedCli( dbfTmpLin, nDec, nVdv )

   local nCalculo := ( dbfTmpLin )->nDtoDiv

   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

    IF nVdv <> 0
      nCalculo    /= nVdv
    end

RETURN ( round( nCalculo, nDec ) )



FUNCTION nTotFPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPorDiv )

   local nCalculo := 0

   nCalculo       += nTotLPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn )
   nCalculo       += nTotIPedCli( cPedCliL, nDec, nRou, nVdv )

return ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTotUPedCli( uTmpLin, nDec, nVdv )

   local nCalculo       := 0

   IIF( uTmpLin == nil, uTmpLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   do case
      case Valtype( uTmpLin ) == "C"

         if ( uTmpLin )->lAlquiler
            nCalculo    := ( uTmpLin )->nPreAlq
         else
            nCalculo    := ( uTmpLin )->nPreDiv
         end









      case Valtype( uTmpLin ) == "O"

         if uTmpLin:lAlquiler
            nCalculo    := uTmpLin:nPreAlq
         else
            nCalculo    := uTmpLin:nPreDiv
         end









   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nDec ) )







FUNCTION nPagPedCli( cNumPed, dbfPedCliP, dbfDiv, cDivRet, lPic, lAll )

   local nRec           := ( dbfPedCliP )->( Recno() )
   local nOrd           := ( dbfPedCliP )->( OrdSetFocus( "nNumPed" ) )
   local cCodDiv        := cDivEmp()
   local cPorDiv        := cPorDiv( cCodDiv, dbfDiv )
   local nRouDiv        := nRouDiv( cCodDiv, dbfDiv )

   nTotPag              := 0

   IIF( lPic == nil, lPic := .F., ) ;
   IIF( lAll == nil, lAll := .T., ) ;

   if Empty( cNumPed )

      ( dbfPedCliP )->( dbGoTop() )
      while !( dbfPedCliP )->( Eof() )

         if lAll .OR. !( dbfPedCliP )->lPasado
            nTotPag     += nEntPedCli( dbfPedCliP, dbfDiv, cDivRet )
         end

         ( dbfPedCliP )->( dbSkip() )

      end

   else

      if ( dbfPedCliP )->( dbSeek( cNumPed ) )

         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .AND. !( dbfPedCliP )->( eof() )

            if lAll .OR. !( dbfPedCliP )->lPasado
               nTotPag   += nEntPedCli( dbfPedCliP, dbfDiv, cDivRet )
            end

            ( dbfPedCliP )->( dbSkip() )

         end

      end

   end

   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      nTotPag           := nCnv2Div( nTotPag, cCodDiv, cDivRet, dbfDiv )
      cPorDiv           := cPorDiv( cDivRet, dbfDiv )
      nRouDiv           := nRouDiv( cDivRet, dbfDiv )
   end

   nTotPag              := Round( nTotPag, nRouDiv )

   if lPic
      nTotPag           := Trans( nTotPag, cPorDiv )
   end

   ( dbfPedCliP )->( OrdSetFocus( nOrd ) )
   ( dbfPedCliP )->( dbGoTo( nRec ) )

RETURN ( nTotPag )



function nEntPedCli( uPedCliP, cDbfDiv, cDivRet, lPic )

   local cDivPgo
   local nRouDiv
   local cPorDiv
   local nTotRec

   IIF( uPedCliP == nil, uPedCliP := dbfPedCliP, ) ;
   IIF( cDbfDiv == nil, cDbfDiv := dbfDiv, ) ;
   IIF( cDivRet == nil, cDivRet := cDivEmp(), ) ;
   IIF( lPic == nil, lPic := .F., ) ;

   if ValType( uPedCliP ) == "O"
      cDivPgo        := uPedCliP:cDivPgo
      nTotRec        := uPedCliP:nImporte
   else
      cDivPgo        := ( uPedCliP )->cDivPgo
      nTotRec        := ( uPedCliP )->nImporte
   end

   nRouDiv           := nRouDiv( cDivPgo, cDbfDiv )
   cPorDiv           := cPorDiv( cDivPgo, cDbfDiv )

   nTotRec           := Round( nTotRec, nRouDiv )

   if cDivRet <> cDivPgo
      nRouDiv        := nRouDiv( cDivRet, cDbfDiv )
      cPorDiv        := cPorDiv( cDivRet, cDbfDiv )
      nTotRec        := nCnv2Div( nTotRec, cDivPgo, cDivRet, cDbfDiv )
   end

RETURN if( lPic, Trans( nTotRec, cPorDiv ), nTotRec )



FUNCTION nComLPedCli( uPedCliT, dbfPedCliL, nDecOut, nDerOut )

   local nImpLPedCli  := nImpLPedCli( uPedCliT, dbfPedCliL, nDecOut, nDerOut, , .F., .T., .F. )

RETURN ( nImpLPedCli * ( dbfPedCliL )->nComAge / 100 )







FUNCTION nImpLPedCli( uPedCliT, dbfPedCliL, nDec, nRou, nVdv, lIva, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo
   local lIvaInc

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nRou == nil, nRou := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( lIva == nil, lIva := .F., ) ;
   IIF( lDto == nil, lDto := .T., ) ;
   IIF( lPntVer == nil, lPntVer := .F., ) ;
   IIF( lImpTrn == nil, lImpTrn := .F., ) ;

   nCalculo          := nTotLPedCli( dbfPedCliL, nDec, nRou, nVdv, .T., lImpTrn, lPntVer )

   if ValType( uPedCliT ) == "A"
      nCalculo       -= Round( nCalculo * uPedCliT[ 30 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 32    ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 34 ]  / 100, nRou )
      nCalculo       -= Round( nCalculo * uPedCliT[ 36 ]  / 100, nRou )
      lIvaInc        := uPedCliT[ 51 ]
   else
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoEsp / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDpp    / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoUno / 100, nRou )
      nCalculo       -= Round( nCalculo * ( uPedCliT )->nDtoDos / 100, nRou )
      lIvaInc        := ( uPedCliT )->lIvaInc
   end

   if ( dbfPedCliL )->nIva <> 0
      if lIva
         if !lIvaInc
            nCalculo += Round( nCalculo * ( dbfPedCliL )->nIva / 100, nRou )
         end
      else
         if lIvaInc
            nCalculo -= Round( nCalculo / ( 100 / ( dbfPedCliL )->nIva  + 1 ), nRou )
         end
      end
   end

RETURN ( if( cPouDiv <> NIL, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nPesLPedCli( cPedCliL )

    local nCalculo

   IIF( cPedCliL == nil, cPedCliL := dbfPedCliL, ) ;

   if !( cPedCliL )->lTotLin
      nCalculo       := Abs( nTotNPedCli( cPedCliL ) ) * ( cPedCliL )->nPesoKg
   end

RETURN ( nCalculo )



FUNCTION nTotCPedCli( dbfLine, nDec, nRec, nVdv, cPouDiv )

   local nCalculo       := 0

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nRec == nil, nRec := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   if !( dbfLine )->lKitChl
      nCalculo          := nTotNPedCli( dbfLine )
      nCalculo          *= ( dbfLine )->nCosDiv
   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

   nCalculo             := Round( nCalculo, nRec )

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nTotIPedCli( dbfLin, nDec, nRouDec, nVdv, cPorDiv )

   local nCalculo    := 0

   IIF( dbfLin == nil, dbfLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nRouDec == nil, nRouDec := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   IF !( dbfLin )->lTotLin





      nCalculo       := Round( ( dbfLin )->nValImp, nDec )





      nCalculo       *= nTotNPedCli( dbfLin )

         if ( dbfLin )->LVOLIMP
            nCalculo *= NotCero( ( dbfLin )->nVolumen )
         end

      nCalculo       := Round( nCalculo / nVdv, nRouDec )

   end

RETURN ( if( cPorDiv <> NIL, Trans( nCalculo, cPorDiv ), nCalculo ) )



FUNCTION nTrnLPedCli( dbfLin, nDec, nRou, nVdv )

   local nImpTrn

   IIF( dbfLin == nil, dbfLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nRou == nil, nRou := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;





   nImpTrn           := nTrnUPedCli( dbfLin, nDec ) * nTotNPedCli( dbfLin )

   IF nVdv <> 0
      nImpTrn        := nImpTrn / nVdv
    end

RETURN ( Round( nImpTrn, nRou ) )



FUNCTION nPntLPedCli( dbfLin, nDec, nVdv )

   local nPntVer

   IIF( dbfLin == nil, dbfLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := 2, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;





   nPntVer           := ( dbfLin )->nPntVer / nVdv
   nPntVer           *= nTotNPedCli( dbfLin )

RETURN ( Round( nPntVer, nDec ) )



FUNCTION nTotLPedCli( cPedCliL, nDec, nRou, nVdv, lDto, lPntVer, lImpTrn, cPouDiv )

   local nCalculo

   IIF( cPedCliL == nil, cPedCliL := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRou == nil, nRou := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( lDto == nil, lDto := .T., ) ;
   IIF( lPntVer == nil, lPntVer := .T., ) ;
   IIF( lImpTrn == nil, lImpTrn := .T., ) ;

   if ( cPedCliL )->lTotLin

      nCalculo       := nTotUPedCli( cPedCliL, nDec )

   else

      nCalculo       := nTotUPedCli( cPedCliL, nDec )
      nCalculo       *= nTotNPedCli( cPedCliL )

      if ( cPedCliL )->nDto <> 0
            nCalculo -= nCalculo * ( cPedCliL )->nDto    / 100
      end

      if ( cPedCliL )->nDtoPrm <> 0
            nCalculo -= nCalculo * ( cPedCliL )->nDtoPrm / 100
      end





      if lPntVer .AND. ( cPedCliL )->nPntVer <> 0
         nCalculo    += ( cPedCliL )->nPntVer * nTotNPedCli( cPedCliL )
      end





      if lImpTrn .AND. ( cPedCliL )->nImpTrn <> 0
         nCalculo    += ( cPedCliL )->nImpTrn * nTotNPedCli( cPedCliL )
      end

   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   if nRou <> nil
      nCalculo       := Round( nCalculo, nRou )
   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



STATIC FUNCTION LoaCli( aGet, aTmp, nMode, oRieCli, oTlfCli )

    local lValid         := .T.
   local cNewCodCli  := aGet[ 6 ]:varGet()
   local lChgCodCli  := ( Empty( cOldCodCli ) .OR. cOldCodCli <> cNewCodCli )

   if Empty( cNewCodCli )
      Return .T.
   elseif At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 6 ], "0", RetNumCodCliEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end

   if ( dbfClient )->( dbSeek( cNewCodCli ) )










      aGet[ 6 ]:cText( ( dbfClient )->Cod )





      if ( dbfClient )->nColor <> 0
         aGet[ 7 ]:SetColor( , ( dbfClient )->nColor )
      end

      if Empty( aGet[ 7 ]:varGet() ) .OR. lChgCodCli
         aGet[ 7 ]:cText( ( dbfClient )->Titulo )
      end

      if Empty( aGet[ 8 ]:varGet() ) .OR. lChgCodCli
         aGet[ 8 ]:cText( ( dbfClient )->Domicilio )
      end

      if Empty( aGet[ 9 ]:varGet() ) .OR. lChgCodCli
         aGet[ 9 ]:cText( ( dbfClient )->Poblacion )
      end

      if aGet[ 10 ] <> nil

         if Empty( aGet[ 10 ]:varGet() ) .OR. lChgCodCli
            aGet[ 10 ]:cText( ( dbfClient )->Provincia )
         end

      end

      if Empty( aGet[ 11 ]:varGet() ) .OR. lChgCodCli
         aGet[ 11 ]:cText( ( dbfClient )->CodPostal )
      end

      if Empty( aGet[ 85 ]:varGet() ) .OR. lChgCodCli
         aGet[ 85 ]:cText( ( dbfClient )->Telefono )
      end

      if !Empty( aGet[ 12 ] )

         if Empty( aGet[ 12 ]:varGet() ) .OR. lChgCodCli
            aGet[ 12 ]:cText( ( dbfClient )->Nif )
         end

      else

         if Empty( aTmp[ 12 ] ) .OR. lChgCodCli
            aTmp[ 12 ]  := ( dbfClient )->Nif
         end

      end

      if Empty( aTmp[ 64 ] ) .OR. lChgCodCli
         aTmp[ 64 ]     := ( dbfClient )->cCodGrp
      end

      if ( lChgCodCli )





         if oRieCli <> nil
            oStock:SetRiesgo( cNewCodCli, oRieCli, ( dbfClient )->Riesgo )
         end

         aTmp[ 13 ]     := ( dbfClient )->lModDat

      end

      if ( lChgCodCli )
         aTmp[ 91 ]     := ( dbfClient )->lPntVer
      end

      if nMode == 1

         aTmp[50 ]      := ( dbfClient )->nRegIva





         if Empty( aTmp[ 1 ] )

            if !Empty( ( dbfClient )->Serie )
               aGet[ 1 ]:cText( ( dbfClient )->Serie )
            end

         else



            if !Empty( ( dbfClient )->Serie )                .AND. aTmp[ 1 ] <> ( dbfClient )->Serie      .AND. ApoloMsgNoYes( "La serie del cliente seleccionado es distinta a la anterior.", "¿Desea cambiar la serie?" )
               aGet[ 1 ]:cText( ( dbfClient )->Serie )
            end

         end

         if aGet[ 17 ] <> nil

            if ( Empty( aGet[ 17 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodAlm )
               aGet[ 17 ]:cText( ( dbfClient )->cCodAlm )
               aGet[ 17 ]:lValid()
            end

         end

         if aGet[ 16 ] <> nil

            if ( Empty( aGet[ 16 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodTar )
               aGet[ 16 ]:cText( ( dbfClient )->CCODTAR )
               aGet[ 16 ]:lValid()
            end

         end

         if ( Empty( aGet[ 19 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->CodPago )
            aGet[ 19 ]:cText( ( dbfClient )->CodPago )
            aGet[ 19 ]:lValid()
         end





         if ( lChgCodCli .AND. lBancoDefecto( ( dbfClient )->Cod, dbfCliBnc ) )

            if !Empty( aGet[ 92 ] )
               aGet[ 92 ]:cText( ( dbfCliBnc )->cCodBnc )
               aGet[ 92 ]:lValid()
            end

            if !Empty( aGet[ 93 ] )
               aGet[ 93 ]:cText( ( dbfCliBnc )->cEntBnc )
               aGet[ 93 ]:lValid()
            end

            if !Empty( aGet[ 94 ] )
               aGet[ 94 ]:cText( ( dbfCliBnc )->cSucBnc )
               aGet[ 94 ]:lValid()
            end

            if !Empty( aGet[ 95 ] )
               aGet[ 95 ]:cText( ( dbfCliBnc )->cDigBnc )
               aGet[ 95 ]:lValid()
            end

            if !Empty( aGet[ 96 ] )
               aGet[ 96 ]:cText( ( dbfCliBnc )->cCtaBnc )
               aGet[ 96 ]:lValid()
            end

         end

         if !Empty( aGet[ 14 ] )
            if ( Empty( aGet[ 14 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cAgente )
               aGet[ 14 ]:cText( ( dbfClient )->cAgente )
               aGet[ 14 ]:lValid()
            end
         end

         if ( Empty( aGet[ 20 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodRut )
            aGet[ 20 ]:cText( ( dbfClient)->CCODRUT )
            aGet[ 20 ]:lValid()
         end

         if ( Empty( aGet[ 28 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->nTarifa )
            aGet[ 28 ]:cText( ( dbfClient )->nTarifa )
         end

         if !Empty( aGet[ 54 ] ) .AND. ( Empty( aGet[ 54 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodTrn )
            aGet[ 54 ]:cText( ( dbfClient )->cCodTrn )
            aGet[ 54 ]:lValid()
         end

         if lChgCodCli

            aGet[ 42 ]:Click( ( dbfClient )->lReq ):Refresh()

            aGet[ 91  ]:Click( ( dbfClient )->lPntVer ):Refresh()





















            aGet[ 29 ]:cText( ( dbfClient )->cDtoEsp )

            aGet[ 30 ]:cText( ( dbfClient )->nDtoEsp )

            aGet[ 31    ]:cText( ( dbfClient )->cDpp )

            aGet[ 32    ]:cText( ( dbfClient )->nDpp )

            aGet[ 33 ]:cText( ( dbfClient )->cDtoUno )

            aGet[ 35 ]:cText( ( dbfClient )->cDtoDos )

            aGet[ 34 ]:cText( ( dbfClient )->nDtoCnt )

            aGet[ 36 ]:cText( ( dbfClient )->nDtoRap )

            aTmp[ 69 ] := ( dbfClient )->nDtoAtp

            aTmp[ 70 ] := ( dbfClient )->nSbrAtp

         end

      end

      cOldCodCli  := ( dbfClient )->Cod

      if ( dbfClient )->lMosCom .AND. !Empty( ( dbfClient )->mComent ) .AND. lChgCodCli
         MsgStop( Trim( ( dbfClient )->mComent ) )
      end


      ShowInciCliente( ( dbfClient )->Cod, dbfCliInc )


      lValid      := .T.

    ELSE

        msgStop( "Cliente no encontrado" )
        lValid := .F.

    end

RETURN lValid



STATIC FUNCTION BeginTrans( aTmp, nMode )

   local lErrors  := .F.
   local cDbfLin  := "PCliL"
   local cDbfInc  := "PCliI"
   local cDbfDoc  := "PCliD"
   local cDbfRes  := "PCliR"
   local cDbfPgo  := "PCliP"
   local cPedido  := ""
   local oError
   local oBlock
   local nOrd

   if nMode <> 1
      cPedido     := aTmp[ 1 ] + Str( aTmp[ 2 ] ) + aTmp[ 3 ]
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   cTmpLin        := cGetNewFileName( cPatTmp() + cDbfLin )
   cTmpRes        := cGetNewFileName( cPatTmp() + cDbfRes )
   cTmpInc        := cGetNewFileName( cPatTmp() + cDbfInc )
   cTmpDoc        := cGetNewFileName( cPatTmp() + cDbfDoc )
   cTmpPgo        := cGetNewFileName( cPatTmp() + cDbfPgo )





   dbCreate( cTmpLin, aSqlStruct( aColPedCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( cDbfLin, @dbfTmpLin ), .F. )

   if !NetErr()

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

      ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpLin )->( OrdCreate( cTmpLin, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpInc, aSqlStruct( aIncPedCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpInc, cCheckArea( cDbfInc, @dbfTmpInc ), .F. )
   if !NetErr()

      ( dbfTmpInc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpInc )->( ordCreate( cTmpInc, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpDoc, aSqlStruct( aPedCliDoc() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpDoc, cCheckArea( cDbfDoc, @dbfTmpDoc ), .F. )
   if !NetErr()

      ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpPgo, aSqlStruct( aPedCliPgo() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpPgo, cCheckArea( cDbfDoc, @dbfTmpPgo ), .F. )
   if !NetErr()

      ( dbfTmpDoc )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmpDoc )->( ordCreate( cTmpDoc, "Recno", "Recno()", {|| Recno() } ) )

   else

      lErrors     := .T.

   end

   dbCreate( cTmpRes, aSqlStruct( aPedCliRes() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cTmpRes, cCheckArea( cDbfRes, @dbfTmpRes ), .F. )
   if !NetErr()

      ( dbfTmpRes )->( ordCreate( cTmpRes, "CREF", "CREF + CVALPR1 + CVALPR2", {|| Field->CREF + Field->CVALPR1 + Field->CVALPR2 } ) )
      ( dbfTmpRes )->( ordListAdd( cTmpRes ) )

   else

      lErrors     := .T.

   end





   if ( dbfPedCliL )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliL )->CSERPED + Str( ( dbfPedCliL )->NNUMPED ) + ( dbfPedCliL )->CSUFPED == cPedido ) .AND. ( dbfPedCliL )->( !eof() )

         ( dbfTmpLin )->( dbAppend() )
         if ( dbfPedCliL )->nNumLin == 0 .AND. dbLock( dbfPedCliL )
            ( dbfPedCliL )->nNumLin := ( dbfTmpLin )->( Recno() )
            ( dbfPedCliL )->( dbRUnLock() )
         end
         dbPass( dbfPedCliL, dbfTmpLin )
            ( dbfPedCliL )->( DbSkip() )

      end

   end

   ( dbfTmpLin )->( dbGoTop() )





   if ( dbfPedCliI )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cPedido ) .AND. ( dbfPedCliI )->( !eof() )

         dbPass( dbfPedCliI, dbfTmpInc, .T. )
         ( dbfPedCliI )->( dbSkip() )

      end

   end

   ( dbfTmpInc )->( dbGoTop() )





   if ( dbfPedCliD )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliD )->cSerPed + Str( ( dbfPedCliD )->nNumPed ) + ( dbfPedCliD )->cSufPed == cPedido ) .AND. ( dbfPedCliD )->( !eof() )

         dbPass( dbfPedCliD, dbfTmpDoc, .T. )
         ( dbfPedCliD )->( dbSkip() )

      end

   end

   ( dbfTmpDoc )->( dbGoTop() )





   if ( dbfPedCliP )->( dbSeek( cPedido ) )

      while ( ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cPedido ) .AND. ( dbfPedCliP )->( !eof() )

         dbPass( dbfPedCliP, dbfTmpPgo, .T. )
         ( dbfPedCliP )->( dbSkip() )

      end

   end

   ( dbfTmpPgo )->( dbGoTop() )





   if ( dbfPedCliR )->( DbSeek( cPedido ) )

      while ( ( dbfPedCliR )->cSerPed + Str( ( dbfPedCliR )->nNumPed ) + ( dbfPedCliR )->cSufPed == cPedido ) .AND. ( dbfPedCliR )->( !eof() )

         dbPass( dbfPedCliR, dbfTmpRes, .T. )
         ( dbfPedCliR )->( DbSkip() )

      end

   end

   ( dbfTmpRes )->( dbGoTop() )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

RETURN lErrors



Static Function EdtInc( aTmp, aGet, dbfPedCliI, oBrw, bWhen, bValid, nMode, aTmpPed )

   local oDlg
   local oNomInci
   local cNomInci          := RetFld( aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], dbfInci )
   local oTitulo
   local cTitulo        := LblTitle( nMode ) + " incidencia"


   if nMode == 1
      aTmp[ 1  ]    := aTmpPed[ 1 ]
      aTmp[ 2  ]    := aTmpPed[ 2 ]
      aTmp[ 3  ]    := aTmpPed[ 3 ]

      if IsMuebles()
         aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]  := .T.
      end
   end


   if ( "PDA" $ cParamsMain() )
      oDlg = TDialog():New(,,,,, "PEDCLI_INC_PDA",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDlg = TDialog():New(,,,, LblTitle( nMode ) + "incidencias de presupuestos a clientes", "INCIDENCIA",, .F.,,,,,, .F.,,,,,, .F., )
   end









      aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ]:= u ) }, oDlg,,, {||    ( cTipInci( aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], dbfInci, oNomInci ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwIncidencia( dbfInci, aGet[ ( dbfTmpInc )->( FieldPos( "cCodTip" ) ) ], oNomInci ) )}, nil, "LUPA",, )




      oNomInci := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cNomInci, cNomInci:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "dFecInc" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lAviso" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )





      TMultiGet():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "mDesInc" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ], aTmp[ ( dbfTmpInc )->( FieldPos( "lListo" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )

     if ( "PDA" $ cParamsMain() )



         oTitulo := TSay():ReDefine( 1000, {|| cTitulo}, oDlg,,,, .F.,, .F., .F. )

      end





      TButton():ReDefine( 1, {||( WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| WinGather( aTmp, nil, dbfTmpInc, oBrw, nMode ), oDlg:end( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )







STATIC FUNCTION SetDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, aTmpPed, oSayLote, oFld, oRentLin, oBrwAlbCli, oBrwAlbPrv, oBrwFacCli )

   local cCodArt  := aGet[ 4 ]:varGet()

   if !lUseCaj()
      aGet[ 11 ]:Hide()
   else
      aGet[ 11 ]:SetText( cNombreCajas() )
   end

   if nMode == 1

      if !Empty( aGet[ 25 ] )
         aTmp[ 25 ]   := Ctod( "" )
         aGet[ 25 ]:Refresh()
      end

   end

   aGet[ 12 ]:SetText( cNombreUnidades() )

   if !lTipMov()
      if !Empty( aGet[ 26 ] ) .AND. !Empty( oGet2 )
         aGet[ 26 ]:hide()
         oGet2:hide()
      end
   end

   if aGet[ 41 ] <> nil

      if !uFieldEmpresa( "lUseImp", .F. )
         aGet[ 41 ]:Hide()
      else
         if !uFieldEmpresa( "lModImp", .F. )
            aGet[ 41 ]:Disable()
         end
      end
   end

   if aGet[ 16 ] <> nil
      if !uFieldEmpresa( "lUsePor", .F. )
         aGet[ 16 ]:Hide()
      end
   end

   if aGet[ 15 ] <> nil
      if !uFieldEmpresa( "lUsePnt", .F. ) .OR. !aTmpPed[ 91 ]
         aGet[ 15 ]:Hide()
      end
   end

   if aGet[ 31 ] <> nil
      if !uFieldEmpresa( "lDtoLin", .F. )
         aGet[ 31 ]:Hide()
      end
   end

   if oRentLin <> nil .AND. oUser():lNotRentabilidad()
      oRentLin:Hide()
   end

   if aTmp[ 75 ]
      aGet[ 14 ]:Hide()
      aGet[ 76 ]:Show()
   end

   do case
   case nMode == 1

      aTmp[ 4     ] := Space( 32 )
      aTmp[ 42  ] := aTmpPed[ 51 ]

      aGet[ 11  ]:cText( 1 )
      aGet[ 12 ]:cText( 1 )

      if !Empty( aGet[ 35  ] )
         aGet[ 35  ]:cText( nLastNum( dbfTmpLin ) )
      else
         aTmp[ 35  ] := nLastNum( dbfTmpLin )
      end

      aGet[ 39  ]:cText( aTmpPed[ 17 ])

      if !Empty( aGet[ 56  ] )
          aGet[ 56 ]:cText( Ctod( "" ) )
      else
          aTmp[ 56 ] := Ctod( "" )
      end

      if !Empty( aGet[ 55 ] )
          aGet[ 55 ]:Click( .F. )
      end

      aGet[ 4     ]:show()
      aGet[ 9 ]:show()
      aGet[ 27  ]:hide()

      if !Empty( aGet[ 45 ] )
          aGet[ 45 ]:hide()
      end

      if !Empty( oSayLote )
          oSayLote:hide()
      end

   case nMode <> 1 .AND. empty( cCodArt )

      aGet[ 4     ]:hide()
      aGet[ 9 ]:hide()
      aGet[ 27  ]:show()

      if !Empty( aGet[ 45 ] )
         if aTmp[ 43 ]
            aGet[ 45 ]:Show()
         else
            aGet[ 45 ]:Hide()
         end
      end

      if !Empty( oSayLote )
         if aTmp[ 43 ]
            oSayLote:Show()
         else
            oSayLote:Hide()
         end
      end

   case nMode <> 1 .AND. !empty( cCodArt )

      aGet[ 4     ]:show()
      aGet[ 9 ]:show()
      aGet[ 27  ]:hide()

      if !Empty( aGet[ 45 ] )
         if aTmp[ 43 ]
            aGet[ 45 ]:Show()
         else
            aGet[ 45 ]:Hide()
         end
      end

      if !Empty( oSayLote )
         if aTmp[ 43 ]
            oSayLote:Show()
         else
            oSayLote:Hide()
         end
      end

      if !Empty( oStock )
         oStock:nPutStockActual( cCodArt, aTmp[ 39 ], aTmp[ 7 ], aTmp[ 8 ], aTmp[ 45 ], aTmp[ 46 ], aTmp[ 36 ], oStkAct )
      end

      if !Empty( aGet[ 63 ] )
         aGet[ 63 ]:lValid()
      end


   end

   if !Empty( oStkAct )

      if !uFieldEmpresa( "lNStkAct" )
         oStkAct:Show()
      else
         oStkAct:Hide()
      end

   end

   if !aTmp[ 75 ]

      if !Empty( aTmp[ 5 ] )

         if !Empty( aGet[7 ] )
            aGet[ 7 ]:Show()
            aGet[ 7 ]:lValid()
         end

         if !Empty( oSayPr1 )
            oSayPr1:Show()
            oSayPr1:SetText( retProp( aTmp[ 5 ], dbfPro ) )
         end

         if !Empty( oSayVp1 )
            oSayVp1:Show()
         end

      else

         if !Empty( aGet[7 ] )
            aGet[7 ]:hide()
         end

         if !Empty( oSayPr1 )
            oSayPr1:hide()
         end

         if !Empty( oSayVp1 )
            oSayVp1:hide()
         end

      end

      if !Empty( aTmp[ 6 ] )

         if !Empty( aGet[ 8 ] )
            aGet[ 8 ]:Show()
            aGet[ 8 ]:lValid()
         end

         if !Empty( oSayPr2 )
            oSayPr2:Show()
            oSayPr2:SetText( retProp( aTmp[ 6 ], dbfPro ) )
         end

         if !Empty( oSayVp2 )
            oSayVp2:Show()
         end

      else

         if !Empty( aGet[ 8 ] )
            aGet[8 ]:hide()
         end

         if !Empty( oSayPr2 )
            oSayPr2:hide()
         end

         if !Empty( oSayVp2 )
            oSayVp2:hide()
         end

      end

   end





   if Empty( aTmp[ 81 ] )
      if !Empty( aGet[ 81 ] )
         aGet[ 81 ]:cText( aTmpPed[ 28 ] )
      else
         aTmp[ 81 ]     := aTmpPed[ 28 ]
      end
   end

   if !Empty( aGet[ 81 ] )
      if !uFieldEmpresa( "lPreLin" )
         aGet[ 81 ]:Hide()
      else
         aGet[ 81 ]:Show()
      end
   end




   if !Empty( aGet[ 26 ] )
      aGet[ 26 ]:lValid()
   end

   aGet[ 39 ]:lValid()

   if !lAccArticulo() .OR. oUser():lNotCostos()

      if !Empty( oRentLin )
         oRentLin:Hide()
      end

      if !Empty( aGet[ 37 ] )
         aGet[ 37 ]:Hide()
      end

   end





   if ( Empty( aTmp[ 14 ] ) .OR. lUsrMaster() .OR. oUser():lCambiarPrecio() ) .AND. nMode <> 3

      aGet[ 14 ]:HardEnable()
      aGet[ 16 ]:HardEnable()

      if !Empty( aGet[ 15 ] )
          aGet[ 15 ]:HardEnable()
      end

      aGet[ 17    ]:HardEnable()
      aGet[ 18 ]:HardEnable()

      if !Empty( aGet[ 31 ] )
         aGet[ 31 ]:HardEnable()
      end

   else

      aGet[ 14 ]:HardDisable()
      aGet[ 16 ]:HardDisable()

      if !Empty( aGet[ 15 ] )
         aGet[ 15 ]:HardDisable()
      end

      aGet[ 17    ]:HardDisable()
      aGet[ 18 ]:HardDisable()

      if !Empty( aGet[ 31 ] )
         aGet[ 31 ]:HardDisable()
      end

   end



   if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] )
      aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:Hide()
   end

   if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] )
      aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:Hide()
   end

   if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] )
      aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:Hide()
   end

   if oUndMedicion:oDbf:Seek(  aTmp[ 22 ] )

      if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 1 .AND. !Empty( oUndMedicion:oDbf:cTextoDim1 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedUno" ) ) ]:Show()
      end

      if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 2 .AND. !Empty( oUndMedicion:oDbf:cTextoDim2 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedDos" ) ) ]:Show()
      end

      if !Empty( aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ] ) .AND. oUndMedicion:oDbf:nDimension >= 3 .AND. !Empty( oUndMedicion:oDbf:cTextoDim3 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )
         aGet[ ( dbfPedCliL )->( fieldpos( "nMedTre" ) ) ]:Show()
      end

   end



   if !Empty( oBrwAlbCli )
      oBrwAlbCli:GoTop()
      oBrwAlbCli:Refresh()
   end

   if !Empty( oBrwFacCli )
      oBrwFacCli:GoTop()
      oBrwFacCli:Refresh()
   end

   if !Empty( oBrwAlbPrv )
      oBrwAlbPrv:GoTop()
      oBrwAlbPrv:Refresh()
   end



   if !Empty( oFld )
      oFld:SetOption( 1 )
   end

Return nil



STATIC FUNCTION SaveDeta( aTmp, aTmpPed, aGet, oFld, oDlg2, oBrw, bmpImage, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, oSayLote, oEstadoProduccion, cCodArt, oBtn )

   local aXbyStr
   local aClo     := aClone( aTmp )



   oBtn:SetFocus()

   if !aGet[ 4 ]:lValid()
      return nil
   end



   if !lMoreIva( aTmp[ 10 ] )
      msgStop( "Demasiados tipos de " + cImp() + " en un mismo documento.", "Atención" )
      return nil
   end

   if Empty( aTmp[ 39 ] ) .AND. !Empty( aTmp[ 4 ] )
      msgStop( "Código de almacén no puede estar vacío", "Atención" )
      return nil
   end

   if !cAlmacen( aGet[ 39 ], dbfAlm )
      return nil
   end



   aTmp[ 88 ]  := oEstadoProduccion:nAt - 1

   if nMode == 1

      aTmp[ 4 ]  := cCodArt

      if !Empty( aTmp[ 45 ] )
         GraLotArt( aTmp[ 4 ], dbfArticulo, aTmp[ 45 ] )
      end





      aXbYStr        := nXbYAtipica( aTmp[ 4 ], aTmpPed[ 6 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfCliAtp )

      if aXbYStr[ 1 ] == 0





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( aTmp[ 4 ], aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 1 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( RetFld( aTmp[ 4 ], dbfArticulo, "FAMILIA", "CODIGO" ), aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 2 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( RetFld( aTmp[ 4 ], dbfArticulo, "CCODTIP", "CODIGO" ), aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 3 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( RetFld( aTmp[ 4 ], dbfArticulo, "CCODCATE", "CODIGO" ), aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 4 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( RetFld( aTmp[ 4 ], dbfArticulo, "CCODTEMP", "CODIGO" ), aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 5 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end





         if !aTmp[ 86 ]

            aXbyStr  := nXbYOferta( RetFld( aTmp[ 4 ], dbfArticulo, "CCODFAB", "CODIGO" ), aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 11 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, 6 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 86 ]  := .T.
            end

         end

      end





      if aXbYStr[ 1 ] <> 0 .AND. aXbYStr[ 2 ] <> 0





         if aXbYStr[ 1 ] == 1





            aTmp[ 11  ] -= aXbYStr[ 2 ]

            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .F. )

            aTmp[ 11  ] := aXbYStr[ 2 ]
            aTmp[ 14  ] := 0

            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

         else





            if aTmp[ 12 ] < 0
               aTmp[ 12 ] += aXbYStr[ 2 ]
            else
               aTmp[ 12 ] -= aXbYStr[ 2 ]
            end

            WinGather( aTmp, , dbfTmpLin, oBrw, nMode, nil, .F. )

            if aClo[ 46 ]
               AppendKit( aClo, aTmpPed )
            end

            if aTmp[ 12 ] < 0
               aTmp[ 12 ] := -( aXbYStr[ 2 ] )
            else
               aTmp[ 12 ] := aXbYStr[ 2 ]
            end

            aTmp[ 14  ] := 0

            WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

            if aClo[ 46 ]
               AppendKit( aClo, aTmpPed )
            end

         end

      else



         WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

         if aClo[ 46 ]
            AppendKit( aClo, aTmpPed )
         end

      end

   else

      aTmp[ 60 ]                    := nPReq( dbfIva, aTmp[ 10 ] )





      WinGather( aTmp, aGet, dbfTmpLin, oBrw, nMode )

   end

   cOldCodArt                          := ""
   cOldUndMed                          := ""

   if !Empty( aGet[ 22 ] )
      aGet[ 22 ]:lValid()
   end





   if !Empty( bmpImage )
      bmpImage:Hide()
   end

   if !Empty( bmpImage )
      PalBmpFree( bmpImage:hBitmap, bmpImage:hPalette )
   end





   if nMode == 1 .AND. lEntCon()

      RecalculaTotal( aTmpPed )

      SetDlgMode( aTmp, aGet, nMode, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, oGet2, oTotal, aTmpPed, oSayLote, oFld )

      SysRefresh()

      if !Empty( aGet[ 4 ] )
         aGet[ 4 ]:SetFocus()
      end

   else

      oDlg2:end( 1 )

   end

Return nil



Static Function AppendKit( uTmpLin, aTmpPed )

   local cCodArt
   local cSerPed
   local nNumPed
   local cSufPed
   local nCanPed
   local dFecPed
   local cTipMov
   local cAlmLin
   local nIvaLin
   local lIvaLin
   local nComAge
   local nUniCaj
   local nDtoGrl
   local nDtoPrm
   local nDtoDiv
   local nNumLin
   local nTarLin
   local nRecAct                       := ( dbfKit )->( Recno() )
   local nUnidades                     := 0
   local nStkActual                    := 0

   if ValType( uTmpLin ) == "A"
      cCodArt                          := uTmpLin[ 4    ]
      cSerPed                          := uTmpLin[ 1 ]
      nNumPed                          := uTmpLin[ 2 ]
      cSufPed                          := uTmpLin[ 3 ]
      nCanPed                          := uTmpLin[ 11 ]
      dFecPed                          := uTmpLin[ 25  ]
      cTipMov                          := uTmpLin[ 26 ]
      cAlmLin                          := uTmpLin[ 39 ]
      nIvaLin                          := uTmpLin[ 10    ]
      lIvaLin                          := uTmpLin[ 42 ]
      nComAge                          := uTmpLin[ 19 ]
      nUniCaj                          := uTmpLin[ 12]
      nDtoGrl                          := uTmpLin[ 17    ]
      nDtoPrm                          := uTmpLin[ 18 ]
      nDtoDiv                          := uTmpLin[ 31 ]
      nNumLin                          := uTmpLin[ 35 ]
      nTarLin                          := uTmpLin[ 81 ]
   else
      cCodArt                          := ( uTmpLin )->cRef
      cSerPed                          := ( uTmpLin )->cSerPed
      nNumPed                          := ( uTmpLin )->nNumPed
      cSufPed                          := ( uTmpLin )->cSufPed
      nCanPed                          := ( uTmpLin )->nCanPed
      dFecPed                          := ( uTmpLin )->dFecha
      cTipMov                          := ( uTmpLin )->cTipMov
      cAlmLin                          := ( uTmpLin )->cAlmLin
      nIvaLin                          := ( uTmpLin )->nIva
      lIvaLin                          := ( uTmpLin )->lIvaLin
      nComAge                          := ( uTmpLin )->nComAge
      nUniCaj                          := ( uTmpLin )->nUniCaja
      nDtoGrl                          := ( uTmpLin )->nDto
      nDtoPrm                          := ( uTmpLin )->nDtoPrm
      nDtoDiv                          := ( uTmpLin )->nDtoDiv
      nNumLin                          := ( uTmpLin )->nNumLin
      nTarLin                          := ( uTmpLin )->nTarLin
   end

   if ( dbfKit )->( dbSeek( cCodArt ) )

      while ( dbfKit )->cCodKit == cCodArt .AND. !( dbfKit )->( eof() )

         if ( dbfArticulo )->( dbSeek( ( dbfKit )->cRefKit ) )

            ( dbfTmpLin )->( dbAppend() )

            if lKitAsociado( cCodArt, dbfArticulo )
               ( dbfTmpLin )->nNumLin  := nLastNum( dbfTmpLin )
               ( dbfTmpLin )->lKitChl  := .F.
            else
               ( dbfTmpLin )->nNumLin  := nNumLin
               ( dbfTmpLin )->lKitChl  := .T.
            end

            ( dbfTmpLin )->cRef        := ( dbfkit      )->cRefKit
            ( dbfTmpLin )->cDetalle    := ( dbfArticulo )->Nombre
            ( dbfTmpLin )->nPntVer     := ( dbfArticulo )->nPntVer1
            ( dbfTmpLin )->nPesoKg     := ( dbfArticulo )->nPesoKg
            ( dbfTmpLin )->cPesoKg     := ( dbfArticulo )->cUndDim
            ( dbfTmpLin )->cUnidad     := ( dbfArticulo )->cUnidad
            ( dbfTmpLin )->nVolumen    := ( dbfArticulo )->nVolumen
            ( dbfTmpLin )->cVolumen    := ( dbfArticulo )->cVolumen

            ( dbfTmpLin )->nPvpRec     := ( dbfArticulo )->PvpRec
            ( dbfTmpLin )->cCodImp     := ( dbfArticulo )->cCodImp
            ( dbfTmpLin )->lLote       := ( dbfarticulo )->lLote
            ( dbfTmpLin )->nLote       := ( dbfarticulo )->nLote
            ( dbfTmpLin )->cLote       := ( dbfarticulo )->cLote

            ( dbfTmpLin )->nValImp     := oNewImp:nValImp( ( dbfArticulo )->cCodImp )
            ( dbfTmpLin )->nCosDiv     := nCosto( nil, dbfArticulo, dbfKit )

            if ( dbfArticulo )->lFacCnv
               ( dbfTmpLin )->nFacCnv  := ( dbfArticulo )->nFacCnv
            end

            ( dbfTmpLin )->cSerPed     := cSerPed
            ( dbfTmpLin )->nNumPed     := nNumPed
            ( dbfTmpLin )->cSufPed     := cSufPed
            ( dbfTmpLin )->nCanPed     := nCanPed
            ( dbfTmpLin )->dFecha      := dFecPed
            ( dbfTmpLin )->cTipMov     := cTipMov
            ( dbfTmpLin )->cAlmLin     := cAlmLin
            ( dbfTmpLin )->lIvaLin     := lIvaLin
            ( dbfTmpLin )->nComAge     := nComAge





            if !Empty( nIvaLin )
               ( dbfTmpLin )->nIva     := nIva( dbfIva, ( dbfArticulo )->TipoIva )
               ( dbfTmpLin )->nReq     := nReq( dbfIva, ( dbfArticulo )->TipoIva )
            else
               ( dbfTmpLin )->nIva     := 0
               ( dbfTmpLin )->nReq     := 0
            end





            ( dbfTmpLin )->lImpLin     := lImprimirComponente( cCodArt, dbfArticulo )
            ( dbfTmpLin )->lKitPrc     := lPreciosComponentes( cCodArt, dbfArticulo )

            ( dbfTmpLin )->nUniCaja    := nUniCaj * ( dbfKit )->nUndKit

            if ( dbfTmpLin )->lKitPrc
               ( dbfTmpLin )->nPreDiv  := nRetPreArt( nTarLin, aTmpPed[ 46 ], aTmpPed[ 51 ], dbfArticulo, dbfDiv, dbfKit, dbfIva )
            end

            if lStockComponentes( cCodArt, dbfArticulo )
               ( dbfTmpLin )->nCtlStk  := ( dbfArticulo )->nCtlStock
            else
               ( dbfTmpLin )->nCtlstk  := 3
            end





            if ( dbfKit )->lAplDto
               ( dbfTmpLin )->nDto     := nDtoGrl
               ( dbfTmpLin )->nDtoPrm  := nDtoPrm
               ( dbfTmpLin )->nDtoDiv  := nDtoDiv
            end

            if ( dbfArticulo )->lKitArt
               AppendKit( dbfTmpLin, aTmpPed )
            end





            if ( dbfArticulo)->lMsgVta .AND. !uFieldEmpresa( "lNStkAct" )

               nStkActual     := oStock:nStockAlmacen( ( dbfKit )->cRefKit, cAlmLin )
               nUnidades      := nUniCaj * ( dbfKit )->nUndKit

               do case
                  case nStkActual - nUnidades < 0



                       MsgStop( "No hay stock suficiente para realizar la venta" + Chr(13)+Chr(10) +  "del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( dbfArticulo )->Nombre ), "¡Atención!" )

                  case nStkActual - nUnidades < ( dbfArticulo)->nMinimo





                       MsgStop( "El stock del componente " + AllTrim( ( dbfKit )->cRefKit ) + " - " + AllTrim( ( dbfArticulo )->Nombre ) + Chr(13)+Chr(10) +  "está bajo minimo." + Chr(13)+Chr(10) +  "Unidades a vender : " + AllTrim( Trans( nUnidades, MasUnd() ) ) + Chr(13)+Chr(10) +  "Stock actual : " + AllTrim( Trans( nStkActual, MasUnd() ) ), "¡Atención!" )

               end

            end

         end

         ( dbfKit )->( dbSkip() )

      end

   end

   ( dbfKit )->( dbGoTo( nRecAct ) )

Return ( nil )



STATIC FUNCTION lMoreIva( nCodIva )





   if aTotIva[ 1, 3 ] == nil .OR. aTotIva[ 2, 3 ] == nil .OR. aTotIva[ 3, 3 ] == nil
      return .T.
   end

   if aTotIva[ 1, 3 ] == nCodIva .OR. aTotIva[ 2, 3 ] == nCodIva .OR. aTotIva[ 3, 3 ] == nCodIva
      return .T.
   end

   MsgStop( "Documento con mas de 3 Tipos de " + cImp() )

return .F.







STATIC FUNCTION RecalculaLinea( aTmp, aTmpPed, nDec, oTotal, oTot, oMargen, cCodDiv, lTotal )

   local nCalculo
   local nUnidades
   local nMargen
   local nCosto
   local nRentabilidad
   local nBase       := 0

   IIF( lTotal == nil, lTotal := .F., ) ;

   nUnidades         := nTotNPedCli( aTmp )

   if aTmp[ 75 ]
      nCalculo       := aTmp[ 76  ]
   else
      nCalculo       := aTmp[ 14  ]
   end

   nCalculo          -= aTmp[ 31  ]





   if !aTmp[ 42 ]

      if aTmp[ 87 ]
         nCalculo += aTmp[ 41 ] * NotCero( aTmp[ 71 ] )
      else
         nCalculo += aTmp[ 41 ]
      end

   end

   nCalculo          *= nUnidades






   if aTmp[ 16 ] <> 0
      nCalculo       += aTmp[ 16 ] * nUnidades
   end





   if aTmp[ 17 ] <> 0
      nCalculo       -= nCalculo * aTmp[ 17    ] / 100
   end

   if aTmp[ 18 ] <> 0
      nCalculo       -= nCalculo * aTmp[ 18 ] / 100
   end





   nCosto            := nUnidades * aTmp[ 37 ]

   if aTmp[ 42 ] .AND. aTmp[ 10 ] <> 0
      nMargen        := nCalculo - Round( nCalculo / ( 100 / aTmp[ 10 ] + 1 ), nRouDiv )
   else
      nMargen        := nCalculo
   end

   nBase             := nMargen

   nMargen           -= nCosto

   if nCalculo == 0
      nRentabilidad  := 0
   else
      nRentabilidad  := nRentabilidad( nCalculo, 0, nCosto )
   end





   if aTmpPed[ 91 ]
      nCalculo       += aTmp[ 15 ] * nUnidades
   end

   nCalculo          := Round( nCalculo, nDec )

   if !Empty( oTotal )
      oTotal:cText( nCalculo )
   end

   if oTot <> nil
      aEval( oTot, {|o| o:Refresh() } )
   end

   if oMargen <> nil
      oMargen:cText( AllTrim( Trans( nMargen, cPorDiv ) + Space( 1 ) + AllTrim( cSimDiv( cCodDiv, dbfDiv ) ) + " : " + AllTrim( Trans( nRentabilidad, "999.99" ) ) + "%" ) )
   end

   if !Empty( oComisionLinea )
      oComisionLinea:cText( Round( ( nBase * aTmp[ 19 ] / 100 ), nRouDiv ) )
   end

RETURN ( if( !lTotal, .T., nCalculo ) )



STATIC FUNCTION LoaArt( cCodArt, aTmp, aGet, aTmpPed, oStkAct, oSayPr1, oSayPr2, oSayVp1, oSayVp2, bmpImage, oSayLote, nMode, lFocused )

   local nCosPro
    local nDtoAge
   local cCodFam
   local cPrpArt
   local nImpAtp     := 0
   local nImpOfe     := 0
   local nPrePro     := 0
   local lChgCodArt  := ( Empty( cOldCodArt ) .OR. Rtrim( cOldCodArt ) <> Rtrim( cCodArt ) )
   local nPosComa
   local cProveedor
   local nTarOld     := aTmp[ 81 ]
   local nNumDto     := 0

   IIF( lFocused == nil, lFocused := .T., ) ;

   if Empty( cCodArt )

      if lRetCodArt()
         MsgStop( "No se pueden añadir líneas sin codificar" )
         return .F.
      end

      if Empty( aTmp[ 10 ] )
         aGet[ 10 ]:bWhen      := {|| .T. }
      end

      if  !Empty( aGet[ 41 ] )
         aGet[ 41 ]:bWhen  := {|| .T. }
      end

      aGet[ 9 ]:hide()

      if !Empty( aGet[ 27 ] )
          aGet[ 27 ]:Show()
      end

      if lFocused .AND. !Empty( aGet[ 27 ] )
        aGet[ 27 ]:SetFocus()
      end

   else

      if lModIva()
         aGet[ 10 ]:bWhen     := {|| .T. }
      else
         aGet[ 10 ]:bWhen     := {|| .F. }
      end

      if !Empty( aGet[ 41 ] )
         if uFieldEmpresa( "lModImp" )
            aGet[ 41 ]:bWhen   := {|| .T. }
         else
            aGet[ 41 ]:bWhen   := {|| .F. }
         end
      end

      aGet[ 9 ]:Show()

      if !Empty( aGet[ 41 ] )
          aGet[ 27 ]:hide()
      end



      if "," $ cCodArt
         nPosComa                := At( ",", cCodArt )
         cProveedor              := RJust( Left( cCodArt, nPosComa - 1 ), "0", RetNumCodPrvEmp() )
         cCodArt                 := cSeekProveedor( cCodArt, dbfArtPrv )
      else
         cCodArt                 := cSeekCodebar( cCodArt, dbfCodebar, dbfArticulo )
      end

      if ( dbfArticulo )->( dbSeek( cCodArt ) ) .OR. ( dbfArticulo )->( dbSeek( Upper( cCodArt ) ) )

         if ( dbfArticulo )->lObs
            MsgStop( "Artículo catalogado como obsoleto" )
            return .F.
         end



         if ( lChgCodArt )

            cCodArt              := ( dbfArticulo )->Codigo
            aTmp[ 4 ]        := cCodArt

            aGet[ 4 ]:cText( cCodArt )

            if ( dbfArticulo )->lMosCom .AND. !Empty( ( dbfArticulo )->mComent )
               MsgStop( Trim( ( dbfArticulo )->mComent ) )
            end

            if !IsNil( cProveedor )

               aGet[ 63 ]:cText( cProveedor )
               aGet[ 63 ]:lValid()

               aTmp[ 70 ]  := Padr( cRefPrvArt( cCodArt, Padr( cProveedor, 12 ) , dbfArtPrv ), 18 )

               if IsMuebles()
                  aGet[ 64 ]:cText( AllTrim( RetProvee( cProveedor ) ) )
                  aGet[ 70 ]:cText( Padr( cRefPrvArt( cCodArt, Padr( cProveedor, 12 ) , dbfArtPrv ), 18 ) )
               end

            else

               if !Empty( aGet[ 63 ] )
                  aGet[ 63 ]:cText( ( dbfArticulo )->cPrvHab )
                  aGet[ 63 ]:lValid()
               end

               aTmp[ 70 ]  := Padr( cRefPrvArt( cCodArt, ( dbfArticulo )->cPrvHab , dbfArtPrv ) , 18 )

               if IsMuebles()
                  aGet[ 63 ]:cText( (dbfArticulo)->cPrvHab )
                  aGet[ 64 ]:cText( AllTrim( RetProvee( (dbfArticulo)->cPrvHab ) ) )
                  aGet[ 70 ]:cText( Padr( cRefPrvArt( cCodArt, ( dbfArticulo )->cPrvHab , dbfArtPrv ) , 18 ) )
               end

            end





            if !Empty( aGet[ 85 ] )
               aGet[ 85 ]:cText( ( dbfArticulo )->Descrip )
            else
               aTmp[ 85 ]     := ( dbfArticulo )->Descrip
            end






            if ( dbfArticulo )->lLote

               if !Empty( oSayLote )
                  oSayLote:Show()
               end

               if !Empty( aGet[ 45 ] )
                  aGet[ 45 ]:show()
                  aGet[ 45 ]:cText( ( dbfArticulo )->cLote )
               else
                  aTmp[ 45 ]    := ( dbfArticulo )->cLote
               end

               aTmp[ 43 ]          := ( dbfArticulo )->lLote

            else

               if !Empty( aGet[ 45 ] )
                  aGet[ 45 ]:hide()
               end

               if !Empty( oSayLote )
                  oSayLote:hide()
               end

            end





            if ( dbfArticulo )->lKitArt

               aTmp[ 46 ]        := ( dbfArticulo )->lKitArt
               aTmp[ 29 ]        := lImprimirCompuesto( ( dbfArticulo )->Codigo, dbfArticulo )
               aTmp[ 48 ]        := lPreciosCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )

               if lStockCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )

                  if aGet[ 36 ] <> nil
                     aGet[ 36 ]:SetOption( ( dbfArticulo )->nCtlStock )
                  else
                     aTmp[ 36 ]  := ( dbfArticulo )->nCtlStock
                  end

               else

                  if aGet[ 36 ] <> nil
                     aGet[ 36 ]:SetOption( 3 )
                  else
                     aTmp[ 36 ]  := 3
                  end

               end

            else

               aTmp[ 29 ]     := .F.

               if aGet[ 36 ] <> nil
                  aGet[ 36 ]:SetOption( ( dbfArticulo )->nCtlStock )
               else
                  aTmp[ 36 ]  := ( dbfArticulo )->nCtlStock
               end

            end





            aTmp[ 50 ]         := ( dbfArticulo )->lMsgVta
            aTmp[ 51 ]         := ( dbfArticulo )->lNotVta





            cCodFam                 := ( dbfArticulo )->Familia
            if !Empty( cCodFam )

               if !Empty( aGet[ 58 ] )
                  aGet[ 58 ]:cText( cCodFam )
                  aGet[ 58 ]:lValid()
               else
                  aTmp[ 58 ]  := cCodFam
               end

               if !Empty( aGet[ 59 ] )
                  aGet[ 59 ]:cText( cGruFam( cCodFam, dbfFamilia ) )
                  aGet[ 59 ]:lValid()
               else
                  aTmp[ 59 ]  := cGruFam( cCodFam, dbfFamilia )
               end

               if aGet[ 83 ] <> nil
                  aGet[ 83 ]:cText( cCodFra( cCodFam, dbfFamilia ) )
                  aGet[ 83 ]:lValid()
               else
                  aTmp[ 83 ]  := cCodFra( cCodFam, dbfFamilia )
               end

            else

               if !Empty( aGet[ 58 ] )
                  aGet[ 58 ]:cText( Space( 8 ) )
                  aGet[ 58 ]:lValid()
               else
                  aTmp[ 58 ]  := Space( 8 )
               end

               if !Empty( aGet[ 59 ] )
                  aGet[ 59 ]:cText( Space( 3 ) )
                  aGet[ 59 ]:lValid()
               else
                  aTmp[ 59 ]  := Space( 3 )
               end

               if !Empty( aGet[ 83 ] )
                  aGet[ 83 ]:cText( Space( 3 ) )
                  aGet[ 83 ]:lValid()
               else
                  aTmp[ 83 ]  := Space( 3 )
               end

            end





            if aGet[ 9 ] <> nil
               aGet[ 9 ]:cText( ( dbfArticulo )->Nombre )
            else
               aTmp[ 9 ] := ( dbfArticulo )->Nombre
            end

            if aGet[ 27 ] <> nil
               aGet[ 27 ]:cText( ( dbfArticulo )->Descrip )
            else
               aTmp[ 27 ] := ( dbfArticulo )->Descrip
            end








            if !Empty( aGet[ 23 ] )
               aGet[ 23  ]:cText( ( dbfArticulo )->nPesoKg )
            else
               aGet[ 23  ] := ( dbfArticulo )->nPesoKg
            end

            if !Empty( aGet[ 24 ] )
               aGet[ 24  ]:cText( ( dbfArticulo )->cUndDim )
            else
               aGet[ 24  ] := ( dbfArticulo )->cUndDim
            end

            if !Empty( aGet[ 71 ] )
               aGet[ 71 ]:cText( ( dbfArticulo )->nVolumen )
            else
               aGet[ 71 ] := ( dbfArticulo )->nVolumen
            end

            if !Empty( aGet[ 22 ] )
                aGet[ 22 ]:cText( ( dbfArticulo )->cUnidad )
                aGet[ 22 ]:lValid()
            else
                aTmp[ 22 ] := ( dbfArticulo )->cUnidad
            end

            if !Empty( aGet[ 72 ] )
                aGet[ 72 ]:cText( ( dbfArticulo )->cVolumen )
            else
                aTmp[ 72 ]:= ( dbfArticulo )->cVolumen
            end







            if !Empty( aGet[ 54 ] )
               aGet[ 54 ]:cText( ( dbfArticulo )->cCodTip )
            else
               aTmp[ 54 ] := ( dbfArticulo )->cCodTip
            end

            if (dbfArticulo)->nCajEnt <> 0
               aGet[ 11 ]:cText( (dbfArticulo)->nCajEnt )
            end

            if ( dbfArticulo )->nUniCaja <> 0
               aGet[ 12 ]:cText( ( dbfArticulo )->nUniCaja )
            end





            if aTmpPed[ 50 ] <= 1
               aGet[ 10 ]:cText( nIva( dbfIva, ( dbfArticulo )->TipoIva ) )
               aTmp[ 60 ]     := nReq( dbfIva, ( dbfArticulo )->TipoIva )
            end





            if !Empty( ( dbfArticulo )->cCodImp )
               aTmp[ 40 ]  := ( dbfArticulo )->cCodImp
               if !Empty( aGet[ 41 ] )
                  aGet[ 41 ]:cText( oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpPed[ 51 ], aTmp[ 10 ] ) )
               else
                  aTmp[ 41 ]  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, aTmpPed[ 51 ], aTmp[ 10 ] )
               end

               aTmp[ 87 ]     := RetFld( ( dbfArticulo )->cCodImp, oNewImp:oDbf:cAlias, "lIvaVol" )

            end





            if !Empty( ( dbfArticulo )->cCodFra )

               if aGet[ 83 ] <> nil
                  aGet[ 83 ]:cText( ( dbfArticulo )->cCodFra )
                  aGet[ 83 ]:lValid()
               else
                  aTmp[ 83 ]  := ( dbfArticulo )->cCodFra
               end

            end





            if ( dbfArticulo )->lFacCnv
               aTmp[ 30 ]     := ( dbfArticulo )->nFacCnv
            end





            if !Empty( aGet[ 49 ] )
               aGet[ 49 ]:cText( ( dbfArticulo )->nMesGrt )
            else
               aGet[ 49 ]  := ( dbfArticulo )->nMesGrt
            end





            aGet[ 19 ]:cText( aTmpPed[ 43 ] )





            if !Empty( aGet[ 65 ] )
               aGet[ 65 ]:cText( ( dbfArticulo )->cImagen )
            else
               aTmp[ 65 ]     := ( dbfArticulo )->cImagen
            end

            if !Empty( bmpImage )
               if !Empty( aTmp[ 65 ] )
                  bmpImage:Show()
                  bmpImage:LoadBmp( cFileBitmap( cPatImg(), aTmp[ 65 ] ) )
               else
                  bmpImage:Hide()
               end
            end





            if oStkAct <> nil .AND. !uFieldEmpresa( "lNStkAct" ) .AND. aTmp[ 36 ] <= 1
               oStock:nPutStockActual( cCodArt, aTmp[ 39 ], , , , aTmp[ 46 ], aTmp[ 36 ], oStkAct )
            end





            aTmp[5 ] := ( dbfArticulo )->cCodPrp1
            aTmp[6 ] := ( dbfArticulo )->cCodPrp2

            if !Empty( aTmp[ 5 ] )

               if aGet[ 7 ] <> nil
                  aGet[ 7 ]:Show()
                  if lFocused
                     aGet[ 7 ]:SetFocus()
                  end
               end

               if oSayPr1 <> nil
                  oSayPr1:SetText( retProp( ( dbfArticulo )->cCodPrp1, dbfPro ) )
                  oSayPr1:show()
               end

               if oSayVp1 <> nil
                   oSayVp1:SetText( "" )
                   oSayVp1:Show()
               end
            else

               if !Empty( aGet[ 7 ] ) .AND. !Empty( oSayPr1 ) .AND. !Empty( oSayVp1 )
                  aGet[ 7 ]:hide()
                  oSayPr1:hide()
                  oSayVp1:hide()
               end

            end

            if !empty( aTmp[6 ] )

               if aGet[ 8 ] <> nil
                  aGet[ 8 ]:show()
               end

               if oSayPr2 <> nil
                  oSayPr2:SetText( retProp( ( dbfArticulo )->cCodPrp2, dbfPro ) )
                  oSayPr2:show()
               end

               if oSayVp2 <> nil
                   oSayVp2:SetText( "" )
                   oSayVp2:Show()
               end

            else

               if !Empty( aGet[ 8 ] )
                  aGet[8 ]:hide()
               end

               if !Empty( oSayPr2 )
                  oSayPr2:hide()
               end

               if !Empty( oSayVp2 )
                  oSayVp2:hide()
               end

            end

         end





         cPrpArt              := aTmp[ 5 ] + aTmp[ 6 ] + aTmp[ 7 ] + aTmp[ 8 ]

         if ( lChgCodArt ) .OR. ( cPrpArt <> cOldPrpArt )

            if nMode == 1
               cCodFam        := RetFamArt( cCodArt, dbfArticulo )
            else
               cCodFam        := aTmp[58]
            end







         if IsMuebles()
            aTmp[ 66 ]  := ( dbfArticulo )->pCosto
            aTmp[ 67 ]  := ( dbfArticulo )->nPuntos
            aTmp[ 68 ]  := ( dbfArticulo )->nDtoPnt
            aTmp[ 69 ]  := 0
         end





            aTmp[ 38 ] := (dbfArticulo)->PvpRec

            if !Empty( aGet[15 ] )
                aGet[ 15 ]:cText( ( dbfArticulo )->NPNTVER1 )
            else
                aTmp [ 15 ] :=  ( dbfArticulo )->NPNTVER1
            end





            if !uFieldEmpresa( "lCosAct" )
               nCosPro           := oStock:nCostoMedio( aTmp[ 4 ], aTmp[ 39 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ] )
               if nCosPro == 0
                  nCosPro        := nCosto( aTmp[ 4 ], dbfArticulo, dbfKit, .F., , dbfDiv )
               end
            else
               nCosPro           := nCosto( aTmp[ 4 ], dbfArticulo, dbfKit, .F., , dbfDiv )
            end

            if aGet[ 37 ] <> nil
               aGet[ 37 ]:cText( nCosPro )
            else
               aTmp[ 37 ]  := nCosPro
            end





            nNumDto              := RetFld( aTmpPed[ 6 ], dbfClient, "nDtoArt" )

            if nNumDto <> 0

               do case
                  case nNumDto == 1

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17 ]:cText( ( dbfArticulo )->nDtoArt1 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt1
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt1
                     end

                  case nNumDto == 2

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17 ]:cText( ( dbfArticulo )->nDtoArt2 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt2
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt2
                     end

                  case nNumDto == 3

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17]:cText( ( dbfArticulo )->nDtoArt3 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt3
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt3
                     end

                  case nNumDto == 4

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17 ]:cText( ( dbfArticulo )->nDtoArt4 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt4
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt4
                     end

                  case nNumDto == 5

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17 ]:cText( ( dbfArticulo )->nDtoArt5 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt5
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt5
                     end

                  case nNumDto == 6

                     if !Empty( aGet[ 17 ] )
                        aGet[ 17]:cText( ( dbfArticulo )->nDtoArt6 )
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt6
                     else
                        aTmp[ 17 ]     := ( dbfArticulo )->nDtoArt6
                     end

               end

            end





            if aTmp[ 17 ] == 0

               if !Empty( aGet[ 17 ] )
                  aGet[ 17 ]:cText( nDescuentoFamilia( cCodFam, dbfFamilia ) )
               else
                  aTmp[ 17 ]     := nDescuentoFamilia( cCodFam, dbfFamilia )
               end

            end





            if !Empty( aGet[ 22 ] )
               aGet[ 22 ]:cText( ( dbfArticulo )->cUnidad )
            else
               aTmp[ 22 ]  := ( dbfArticulo )->cUnidad
            end



            nPrePro           := nPrePro( aTmp[ 4 ], aTmp[ 5 ], aTmp[ 7 ], aTmp[ 6 ], aTmp[ 8 ], aTmp[ 81 ], aTmpPed[ 51 ], dbfArtDiv, dbfTarPreL, aTmpPed[16] )

            if nPrePro == 0
               aGet[14]:cText( nRetPreArt( aTmp[ 81 ], aTmpPed[ 46 ], aTmpPed[ 51 ], dbfArticulo, dbfDiv, dbfKit, dbfIva, ,aGet[ 81 ] ) )
            else
               aGet[14]:cText( nPrePro )
            end

            if aTmp[ 75 ]
               aGet[ 14 ]:cText( 0 )
               aGet[ 76 ]:cText( nPreAlq( aTmp[ 4 ], aTmp[ 81 ], aTmpPed[51], dbfArticulo ) )
            end





            if !Empty( aTmpPed[16] )


               nImpOfe     := RetPrcTar( cCodArt, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL, aTmp[ 81 ] )
               if nImpOfe  <> 0
                  aGet[14]:cText( nImpOfe )
               end


               nImpOfe  := RetPctTar( cCodArt, cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL )
               if nImpOfe  <> 0
                  aGet[17   ]:cText( nImpOfe )
               end


               nImpOfe  := RetLinTar( cCodArt, cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], dbfTarPreL )
               if nImpOfe <> 0
                  aGet[31]:cText( nImpOfe )
               end


               nImpOfe  := RetComTar( cCodArt, cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmpPed[14], dbfTarPreL, dbfTarPreS )
               if nImpOfe <> 0
                  aGet[19 ]:cText( nImpOfe )
               end



               nImpOfe  := RetDtoPrm( cCodArt, cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmpPed[5], dbfTarPreL )
               if nImpOfe  <> 0
                  aGet[18]:cText( nImpOfe )
               end



               nDtoAge  := RetDtoAge( cCodArt, cCodFam, aTmpPed[16], aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmpPed[5], aTmpPed[14], dbfTarPreL, dbfTarPreS )
               if nDtoAge  <> 0
                  aGet[ 19 ]:cText( nDtoAge )
               end

            end



            do case

            case  lSeekAtpArt( aTmpPed[ 6 ] + cCodArt, aTmp[ 5 ] + aTmp[ 6 ], aTmp[ 7 ] + aTmp[ 8 ], aTmpPed[ 5 ], dbfCliAtp ) .AND.  ( dbfCliAtp )->lAplPed

               nImpAtp     := nImpAtp( nTarOld, dbfCliAtp, , , aGet[ 81 ] )
               if nImpAtp  <> 0
                  aGet[ 14 ]:cText( nImpAtp )
               end





               nImpAtp     := nDtoAtp( nTarOld, dbfCliAtp )
               if nImpAtp  <> 0
                  aGet[ 17 ]:cText( nImpAtp )
               end





               if ( dbfCliAtp )->nDprArt <> 0
                  aGet[18]:cText( ( dbfCliAtp )->nDprArt )
               end

               if ( dbfCliAtp )->nComAge <> 0
                  aGet[19]:cText( ( dbfCliAtp )->nComAge )
               end

               if ( dbfCliAtp )->nDtoDiv <> 0
                  if !Empty( aGet[ 31 ] )
                     aGet[ 31 ]:cText( ( dbfCliAtp )->nDtoDiv )
                  else
                     aGet[ 31 ]  := ( dbfCliAtp )->nDtoDiv
                  end
               end




            case  lSeekAtpFam( aTmpPed[ 6 ] + aTmp[ 58 ], aTmpPed[ 5 ], dbfCliAtp ) .AND.  ( dbfCliAtp )->lAplPed

               if ( dbfCliAtp )->nDtoArt <> 0
                  aGet[17   ]:cText( ( dbfCliAtp )->nDtoArt )
               end

               if ( dbfCliAtp )->nDprArt <> 0
                  aGet[18]:cText( ( dbfCliAtp )->nDprArt )
               end

               if ( dbfCliAtp )->nComAge <> 0
                  aGet[19]:cText( ( dbfCliAtp )->nComAge )
               end

               if ( dbfCliAtp )->nDtoDiv <> 0
                  if !Empty( aGet[ 31 ] )
                     aGet[ 31 ]:cText( ( dbfCliAtp )->nDtoDiv )
                  else
                     aGet[ 31 ]  := ( dbfCliAtp )->nDtoDiv
                  end
               end

            end




























            if !IsPda()
                ValidaMedicion( aTmp, aGet )
            end


         end





         lBuscaOferta( cCodArt, aGet, aTmp, aTmpPed, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )





         cOldPrpArt := cPrpArt
         cOldCodArt := cCodArt





         if Empty( aTmp[ 14 ] ) .OR. lUsrMaster() .OR. oUser():lCambiarPrecio()
            aGet[ 14 ]:HardEnable()
            aGet[ 16 ]:HardEnable()

            if !Empty( aGet[ 15 ] )
                aGet[ 15 ]:HardEnable()
            end

            aGet[ 17    ]:HardEnable()
            aGet[ 18 ]:HardEnable()

            if !Empty( aGet[ 31 ] )
                aGet[ 31 ]:HardEnable()
            end

         else
            aGet[ 14 ]:HardDisable()
            aGet[ 16 ]:HardDisable()

            if !Empty( aGet[ 15 ] )
                aGet[ 15 ]:HardEnable()
            end
            aGet[ 17    ]:HardDisable()
            aGet[ 18 ]:HardDisable()

            if !Empty( aGet[ 31 ] )
                aGet[ 31 ]:HardEnable()
            end

         end

      else

         MsgStop( "Artículo no encontrado" )
         Return .F.

      end

   end

RETURN .T.



Static Function nEstadoIncidencia( cNumPed )

   local nEstado  := 0
   local aBmp     := ""

   if ( dbfPedCliI )->( dbSeek( cNumPed ) )

      while ( dbfPedCliI )->cSerPed + Str( ( dbfPedCliI )->nNumPed ) + ( dbfPedCliI )->cSufPed == cNumPed .AND. !( dbfPedCliI )->( Eof() )

         if ( dbfPedCliI )->lListo
            do case
               case nEstado == 0 .OR. nEstado == 3
                    nEstado := 3
               case nEstado == 1
                    nEstado := 2
            end
         else
            do case
               case nEstado == 0
                    nEstado := 1
               case nEstado == 3
                    nEstado := 2
            end
         end

         ( dbfPedCliI )->( dbSkip() )

      end

   end

Return ( nEstado )



Static Function nEstadoProduccion( cNumPed )

   local nEstado        := 1

   if ( dbfPedCliL )->( dbSeek( cNumPed ) )

      while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cNumPed .AND. !( dbfPedCliL )->( Eof() )

         do case
            case ( dbfPedCliL )->nProduc == 1

               nEstado  := 2

               exit

            case ( dbfPedCliL )->nProduc == 2

               nEstado  := 3

         end

         ( dbfPedCliL )->( dbSkip() )

      end

   end

Return ( nEstado )



Static Function cEstadoProduccion( cNumPed )

Return ( aEstadoProduccion[ Max( Min( nEstadoProduccion( cNumPed ), 3 ), 1 ) ] )






FUNCTION nDtoLPedCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo    := 0

   IIF( dbfLin == nil, dbfLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   if ( dbfLin )->nDto <> 0
      nCalculo       := nTotUPedCli( dbfLin, nDec ) * ( dbfLin )->nDto / 100
      nCalculo       := Round( nCalculo / nVdv, nDec )
   end

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )



Function nTotDtoLPedCli( dbfLin, nDec, nVdv, cPorDiv )

   local nCalculo

   IIF( dbfLin == nil, dbfLin := dbfPedCliL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nDtoLPedCli( dbfLin, nDec, nVdv ) * nTotNPedCli( dbfLin )

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

   nCalculo          := Round( nCalculo, nDec )

RETURN ( if( cPorDiv <> nil, Trans( nCalculo, cPorDiv ), nCalculo ) )





Function oPedidosWeb()

   if !Empty( oDlgPedidosWeb ) .AND. !Empty( oBrwPedidosWeb )
      oBrwPedidosWeb:Refresh()
   else
      MuestraPedidosWeb()
   end

Return nil



Function MuestraPedidosWeb( oBtnPedidos, lGoPedCli )

   local oError
   local oBlock
    local oCbxOrd
   local cNumPed

   IIF( lGoPedCli == nil, lGoPedCli := .F., ) ;

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de pedidos de clientes" )
      Return ( .F. )
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfPedCliT )->( OrdSetFocus( "lInternet" ) )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIR.DBF" ), ( cCheckArea( "PEDCLIR", @dbfPedCliR ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIR.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLII.DBF" ), ( cCheckArea( "PEDCLII", @dbfPedCliI ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLII.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLID.DBF" ), ( cCheckArea( "PEDCLID", @dbfPedCliD ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLID.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





      cTmpLin        := cGetNewFileName( cPatTmp() + "cPedLin" )

      dbCreate( cTmpLin, aSqlStruct( aColPedCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cTmpLin, cCheckArea( "PedCliL", @dbfTmpLin ), .F. )

      if !NetErr()

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "nNumLin", "Str( nNumLin, 4 )", {|| Str( Field->nNumLin ) } ) )

         ( dbfTmpLin )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
         ( dbfTmpLin )->( OrdCreate( cTmpLin, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

      end

      oDlgPedidosWeb = TDialog():New(,,,,, "PEDIDOS_INTERNET",, .F.,,,,,, .F.,,,,,, .F., )

      oBrwPedidosWeb                 := IXBrowse():New( oDlgPedidosWeb )

      oBrwPedidosWeb:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPedidosWeb:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPedidosWeb:cAlias          := dbfPedCliT
      oBrwPedidosWeb:nMarqueeStyle   := 6
      oBrwPedidosWeb:cName           := "Pedido de cliente.Web"
      oBrwPedidosWeb:nRowHeight      := 40

      oBrwPedidosWeb:bLDblClick      := {|| oDlgPedidosWeb:end( 1 ) }

      oBrwPedidosWeb:bChange         := {|| ChangePedidosWeb() }

      oBrwPedidosWeb:CreateFromResource( 100 )

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Es.Estado"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( ( dbfPedCliT )->nEstado == 1 ) }
         :nWidth           := 20
         :lHide            := .T.
         :SetCheck( { "Bullet_Square_Yellow_16", "Bullet_Square_Red_16" } )
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Número"
         :cSortOrder       := "nNumPed"
         :bEditValue       := {|| ( dbfPedCliT )->cSerPed + "/" + Alltrim( Str( ( dbfPedCliT )->nNumPed ) ) + "/" + ( dbfPedCliT )->cSufPed }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecPed"
         :bEditValue       := {|| dtoc( ( dbfPedCliT )->dFecPed ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| ( dbfPedCliT )->cTimCre }
         :nWidth           := 40
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Cliente"
         :cSortOrder       := "cCodCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cCodCli ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomCli"
         :bEditValue       := {|| AllTrim( ( dbfPedCliT )->cNomCli ) }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Telefono"
         :bEditValue       := {|| RetFld( ( dbfPedCliT )->cCodCli, dbfClient, "Telefono" ) }
         :nWidth           := 80
      end

      with object ( oBrwPedidosWeb:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotPedCli( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed, dbfPedCliT, dbfPedCliL, dbfIva, dbfDiv, dbfFPago, nil, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end


      oBrwDetallesPedidos                 := IXBrowse():New( oDlgPedidosWeb )

      oBrwDetallesPedidos:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDetallesPedidos:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDetallesPedidos:cAlias          := dbfTmpLin
      oBrwDetallesPedidos:nMarqueeStyle   := 6
      oBrwDetallesPedidos:cName           := "Pedido de cliente lineas.Web"





      oBrwDetallesPedidos:CreateFromResource( 110 )

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Num."
         :bEditValue          := {|| ( dbfTmpLin )->nNumLin }
         :cEditPicture        := "9999"
         :nWidth              := 35
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Código"
         :bEditValue          := {|| ( dbfTmpLin )->cRef }
         :nWidth              := 70
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| if( Empty( ( dbfTmpLin )->cRef ), ( dbfTmpLin )->mLngDes, ( dbfTmpLin )->cDetalle ) }
         :nWidth              := 215
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Código proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cCodPrv ) }
         :nWidth              := 50
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Nombre proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cNomPrv ) }
         :nWidth              := 150
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Referencia proveedor"
         :bEditValue          := {|| AllTrim( ( dbfTmpLin )->cRefPrv ) }
         :nWidth              := 50
         :lHide               := !( IsMuebles() )
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Prop. 1"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr1 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Prop. 2"
         :bEditValue          := {|| ( dbfTmpLin )->cValPr2 }
         :nWidth              := 40
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Lote"
         :bEditValue          := {|| ( dbfTmpLin )->cLote }
         :nWidth              := 60
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := cNombreUnidades()
         :bEditValue          := {|| nTotNPedCli( dbfTmpLin ) }
         :cEditPicture        := cPicUnd
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "UM. Unidad de medición"
         :bEditValue          := {|| ( dbfTmpLin )->cUnidad }
         :nWidth              := 25
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Alm."
         :bEditValue          := {|| ( dbfTmpLin )->cAlmLin }
         :nWidth              := 30
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Precio"
         :bEditValue          := {|| nImpUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Dto."
         :bEditValue          := {|| ( dbfTmpLin )->nDto }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Dto. Lin."
         :bEditValue          := {|| nDtoUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Prm."
         :bEditValue          := {|| ( dbfTmpLin )->nDtoPrm }
         :cEditPicture        := "@E 99.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% Age"
         :bEditValue          := {|| ( dbfTmpLin )->nComAge }
         :cEditPicture        := "@E 999.99"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "% " + cImp()
         :bEditValue          := {|| ( dbfTmpLin )->nIva }
         :cEditPicture        := "@E 99.9"
         :nWidth              := 40
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Portes"
         :bEditValue          := {|| nTrnUPedCli( dbfTmpLin, nDouDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "P. verde"
         :bEditValue          := {|| nPntUPedCli( dbfTmpLin, nDpvDiv ) }
         :cEditPicture        := cPouDiv
         :nWidth              := 70
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :lHide               := .T.
      end

      with object ( oBrwDetallesPedidos:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLPedCli( dbfTmpLin, nDouDiv, nRouDiv ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 80
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      oDlgPedidosWeb:bStart   := {|| StartPedidosWeb( oDlgPedidosWeb ) }

      oDlgPedidosWeb:Activate( oDlgPedidosWeb:bLClicked, oDlgPedidosWeb:bMoved, oDlgPedidosWeb:bPainted, .T.,,,, oDlgPedidosWeb:bRClicked,,, )





      if oDlgPedidosWeb:nResult == 1
         cNumPed              := ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed
      end





      if dbSeekInOrd( .T., "lIntPedCli", dbfPedCliT )
         lStartAvisoPedidos()
      else
         lStopAvisoPedidos()
      end

      if !Empty( oBtnPedidos )
         oBtnPedidos:lSelected   := .F.
         oBtnPedidos:Refresh()
      end


   RECOVER USING oError

      msgStop( "Imposible abrir ficheros de pedidos de clientes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfPedCliT )->( dbCloseArea() )
   ( dbfPedCliL )->( dbCloseArea() )
   ( dbfPedCliP )->( dbCloseArea() )
   ( dbfPedCliR )->( dbCloseArea() )
   ( dbfPedCliI )->( dbCloseArea() )
   ( dbfPedCliD )->( dbCloseArea() )
   ( dbfFPago   )->( dbCloseArea() )
   ( dbfDiv     )->( dbCloseArea() )
   ( dbfIva     )->( dbCloseArea() )
   ( dbfClient  )->( dbCloseArea() )
   ( dbfTmpLin  )->( dbCloseArea() )

   oDlgPedidosWeb          := nil
   oBrwPedidosWeb          := nil
   oBrwDetallesPedidos     := nil

   dbfErase( cTmpLin )

Return ( cNumPed )



Static Function ChangePedidosWeb()





   ( dbfTmpLin )->( __dbZap() )

   if ( dbfPedCliL )->( dbSeek( ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) )

      while ( ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == ( dbfPedCliT )->cSerPed + Str( ( dbfPedCliT )->nNumPed ) + ( dbfPedCliT )->cSufPed ) .AND. ( dbfPedCliL )->( !eof() )

         dbPass( dbfPedCliL, dbfTmpLin, .T. )

         ( dbfPedCliL )->( dbSkip() )

      end

   end

   ( dbfTmpLin )->( dbGoTop() )





   oBrwDetallesPedidos:GoTop()
   oBrwDetallesPedidos:Refresh( .T. )

return nil



Static Function StartPedidosWeb( oDlgPedidosWeb )

   local oBoton
   local oGrupo
   local oCarpeta
   local oOfficeBar

   lStopAvisoPedidos()

   oOfficeBar                 := TDotNetBar():New( 0, 0, 1008, 100, oDlgPedidosWeb, 1 )
   oOfficeBar:nHTabs          := 4
   oOfficeBar:lPaintAll       := .F.
   oOfficeBar:lDisenio        := .F.

   oOfficeBar:SetStyle( 1 )

   oDlgPedidosWeb:oTop        := oOfficeBar

   oCarpeta                   := TCarpeta():New( oOfficeBar, "" )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 126, "Lineas", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "Up32",              "Arriba",         1, {|| oBrwPedidosWeb:GoUp() }, , , .F., .F., .F. )
   oBoton                     := TDotNetButton():New( 60, oGrupo, "Down32",            "Abajo",          2, {|| oBrwPedidosWeb:GoDown() }, , , .F., .F., .F. )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 126, "Acciones", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "Procesar32",        "Procesar",       1, {|| oDlgPedidosWeb:End( 1 ) }, , , .F., .F., .F. )
   oBoton                     := TDotNetButton():New( 60, oGrupo, "Garbage_Empty_32",  "Eliminar",       2, {|| WinDelRec( oBrwPedidosWeb, dbfPedCliT, {|| QuiPedCli() } ), ChangePedidosWeb() } , , , .F., .F., .F. )

   oGrupo                     := TDotNetGroup():New( oCarpeta, 66, "Salir", .F. )

   oBoton                     := TDotNetButton():New( 60, oGrupo, "End32",             "Salida",         1, {|| oDlgPedidosWeb:End() }, , , .F., .F., .F. )

   ChangePedidosWeb()

Return ( nil )



Function lPedidosWeb( dbfPedCliT )

   local nRec
   local oBlock
   local oError
   local lClose               := .F.

   oBlock                     := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if Empty( dbfPedCliT )
         dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
         lClose               := .T.
      else
         nRec                 := ( dbfPedCliT )->( Recno() )
      end

      if dbSeekInOrd( .T., "lIntPedCli", dbfPedCliT )

         lStartAvisoPedidos()





         if Empty( oMsgAlarm )
            oMsgAlarm         := TMsgItem():New( oWnd():oMsgBar,,24,,,,.T.,, "Sndint16",, "Nuevos pedidos recibidos"  )
            oMsgAlarm:bAction := {|| PedCli() }
         end

      else

         lStopAvisoPedidos()





         if !Empty( oMsgAlarm )
            oWnd():oMsgBar:DelItem( oMsgAlarm )
         end

      end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

   if ( dbfPedCliT )->( Used() )
      if lClose
         ( dbfPedCliT )->( dbCloseArea() )
      else
         ( dbfPedCliT )->( dbGoTo( nRec ) )
      end
   end

Return nil





Static Function YearComboBoxChange()

     if oWndBrw:oWndBar:lAllYearComboBox()
        DestroyFastFilter( dbfPedCliT )
      CreateUserFilter( "", dbfPedCliT, .F., , , "all" )
     else
        DestroyFastFilter( dbfPedCliT )
      CreateUserFilter( "Year( Field->dFecPed ) == " + oWndBrw:oWndBar:cYearComboBox(), dbfPedCliT, .F., , , "Year( Field->dFecPed ) == " + oWndBrw:oWndBar:cYearComboBox() )
     end

     ( dbfPedCliT )->( dbGoTop() )

     oWndBrw:Refresh()

  Return nil



Static function lChangeCancel( aGet, aTmp, dbfTmpLin )

   if aTmp[ 81 ]
      aTmp[ 82 ]  := GetSysDate()
   else
      aTmp[ 82 ]  := CtoD( "" )
      aTmp[ 83 ]  := Space( 100 )
   end

   if !Empty( aGet[ 82 ] )
      aGet[ 82 ]:Refresh()
   end

   if !Empty( aGet[ 83 ] )
      aGet[ 83 ]:Refresh()
   end

return ( .T. )


























































































static function lBuscaOferta( cCodArt, aGet, aTmp, aTmpPed, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )

   local sOfeArt
   local nTotalLinea    := 0


   if ( dbfArticulo )->Codigo == cCodArt .OR. ( dbfArticulo )->( dbSeek( cCodArt ) )





      nTotalLinea := RecalculaLinea( aTmp, aTmpPed, nDouDiv, , , , aTmpPed[ 46 ], .T. )

      sOfeArt     := sOfertaArticulo( cCodArt, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmp[ 12 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], , aTmp[5], aTmp[6], aTmp[7], aTmp[8], aTmp[ 46 ], dbfArticulo, dbfDiv, dbfKit, dbfIva, aTmp[ 11 ], nTotalLinea )

      if !Empty( sOfeArt ) .AND. sOfeArt:nPrecio <> 0
         aGet[ 14 ]:cText( sOfeArt:nPrecio )
         aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
         aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
         aTmp[ 86 ]  := .T.
      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaFamilia( ( dbfArticulo )->Familia, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], dbfArticulo, aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaTipoArticulo( ( dbfArticulo )->cCodTip, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], dbfArticulo, aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaCategoria( ( dbfArticulo )->cCodCate, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], dbfArticulo, aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaTemporada( ( dbfArticulo )->cCodTemp, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], dbfArticulo, aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 86 ]  := .T.
         end

      end

      if !aTmp[ 86 ]





         sOfeArt     := sOfertaFabricante( ( dbfArticulo )->cCodFab, aTmpPed[ 6 ], aTmpPed[ 64 ], aTmpPed[ 5 ], dbfOferta, aTmp[ 81 ], dbfArticulo, aTmp[ 12 ], aTmp[ 11 ], nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 17 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 31 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 86 ]  := .T.
         end

      end

   end

return .T.

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfUbi.prg"
_HB_CLASS InfUbi ; UTILITY FUNCTION InfUbi(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "InfUbi" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oDbfUbiT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfUbiT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oDbfUbiL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfUbiL" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cUbiOrg} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cUbiOrg" }, .F., .F. ), )
   _HB_MEMBER {AS CHARACTER cUbiDes} ; IIF( !.F., s_oClass:AddMultiData( "CHARACTER",, nScope + IIF( .F., 32, 0 ), { "cUbiDes" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lAllUbi} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lAllUbi" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @InfUbi_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @InfUbi_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @InfUbi_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @InfUbi_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @InfUbi_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @InfUbi_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @InfUbi_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @InfUbi_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @InfUbi_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @InfUbi_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS InfUbi ;



UTILITY STATIC function InfUbi_Create() ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   ::AddField( "cCodUbi",   "C",  5, 0, {|| "" },     "Cod. ubi.",         .F., "Código de ubicación",               10, .F. )
   ::AddField( "cNomUbi",   "C", 30, 0, {|| "" },     "Nom. ubi.",         .F., "Nombre de ubicación",               10, .F. )
   ::AddField( "cUbiLin",   "C",  5, 0, {|| "" },     "Ubic.",             .T., "Ubicación",                         10, .F. )
   ::AddField( "cNomUbil",  "C", 30, 0, {|| "" },     "Descripción",       .T., "Domicilio de almacen",              30, .F. )

   ::AddTmpIndex( "CCODUBI", "CCODUBI + CUBILIN" )

   ::AddGroup( {|| ::oDbf:cCodUbi }, {|| "Cod. ubicación  : " + Rtrim( ::oDbf:cCodUbi ) + "-" + Rtrim( ::oDbf:cNomUbi ) }, {||"Total ..."} )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function InfUbi_OpenFiles() ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oDbfUbiT := DbfServer( "UBICAT.DBF", ):NewOpen( "UBICAT.DBF",, ( cDriver() ),, ( cPatAlm() ), .F., .T., .F., .F. ) ; ::oDbfUbiT:AddBag( "UBICAT.CDX" ) ; ::oDbfUbiT:AddBag( ) ; ::oDbfUbiT:AutoIndex()

   ::oDbfUbiL := DbfServer( "UBICAL.DBF", ):NewOpen( "UBICAL.DBF",, ( cDriver() ),, ( cPatAlm() ), .F., .T., .F., .F. ) ; ::oDbfUbiL:AddBag( "UBICAL.CDX" ) ; ::oDbfUbiL:AddBag( ) ; ::oDbfUbiL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function InfUbi_CloseFiles() ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   if !Empty( ::oDbfUbiT ) .AND. ::oDbfUbiT:Used()
      ::oDbfUbiT:End()
   end
   if !Empty( ::oDbfUbiL ) .AND. ::oDbfUbiL:Used()
      ::oDbfUbiL:End()
   end

   ::oDbfUbiT  := nil
   ::oDbfUbiL  := nil

RETURN ( Self )



UTILITY STATIC function InfUbi_lResource( cFld) ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   local oUbiOrg
   local oUbiDes
   local cSayUbiOrg
   local cSayUbiDes
   local oSayUbiOrg
   local oSayUbiDes

   if !::StdResource( "INF_UBI01" )
      return .F.
   end

   ::cUbiOrg   := dbFirst( ::oDbfUbiT, 1 )
   ::cUbiDes   := dbLast(  ::oDbfUbiT, 1 )
   cSayUbiOrg  := dbFirst( ::oDbfUbiT, 2 )
   cSayUbiDes  := dbLast(  ::oDbfUbiT, 2 )







   TCheckBox():ReDefine( ( 60 ), { | u | If( PCount()==0, ::lAllUbi, ::lAllUbi:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )






   oUbiOrg := TGetHlp():ReDefine( ( 70 ), { | u | If( PCount()==0, ::cUbiOrg, ::cUbiOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllUbi )},, .F., .F.,,,,,, nil, "LUPA",, )

      oUbiOrg:bValid   := {|| cUbica( oUbiOrg, ::oDbfUbiT:cAlias, oSayUbiOrg ) }
      oUbiOrg:bHelp    := {|| BrwUbicacion( oUbiOrg, ::oDbfUbiT:cAlias, oSayUbiOrg ) }





   oSayUbiOrg := TGetHlp():ReDefine( ( 80 ), { | u | If( PCount()==0, cSayUbiOrg, cSayUbiOrg:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oUbiDes := TGetHlp():ReDefine( ( 90 ), { | u | If( PCount()==0, ::cUbiDes, ::cUbiDes:= u ) }, ::oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( !::lAllUbi )},, .F., .F.,,,,,, nil, "LUPA",, )

      oUbiDes:bValid   := {|| cUbica( oUbiDes, ::oDbfUbiT:cAlias, oSayUbiDes ) }
      oUbiDes:bHelp    := {|| BrwUbicacion( oUbiDes, ::oDbfUbiT:cAlias, oSayUbiDes ) }




   oSayUbiDes := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, cSayUbiDes, cSayUbiDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   ::oMtrInf:SetTotal( ::oDbfUbiT:Lastrec() )

   ::CreateFilter( aItmUbi(), ::oDbfUbiT:cAlias )

RETURN .T.






UTILITY STATIC function InfUbi_lGenerate() ; local Self AS CLASS InfUbi := QSelf() AS CLASS InfUbi

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha     : " + Dtoc( Date() ) }, {|| "Ubicación : " + if( ::lAllUbi, "Todos", AllTrim( ::cUbiOrg ) + " > " + AllTrim( ::cUbiDes ) ) } }

   ::oDbfUbiT:OrdSetFocus( "CCODUBI" )

   ::oDbfUbiT:GoTop()
   while !::lBreak .AND. !::oDbfUbiT:Eof()



      if ( ::lAllUbi .OR. ( ::oDbfUbiT:cCodUbi >= ::cUbiOrg .AND. ::oDbfUbiT:cCodUbi <= ::cUbiDes ) ) .AND. ::oDbfUbiL:Seek( ::oDbfUbiT:cCodUbi )                                                        .AND. ::EvalFilter()

         while ::oDbfUbiT:cCodUbi == ::oDbfUbiL:cCodUbi .AND. !::oDbfUbiL:Eof

            ::oDbf:Append()

            ::oDbf:cCodUbi     := ::oDbfUbiT:cCodUbi
            ::oDbf:cNomUbi     := oRetFld( ::oDbf:cCodUbi, ::oDbfUbiT )
            ::oDbf:cUbiLin     := ::oDbfUbiL:cUbiLin
            ::oDbf:cNomUbil    := ::oDbfUbiL:cNomUbil

            ::oDbf:Save()

            ::oDbfUbiL:Skip()

         end

      end

      ::oDbfUbiT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( ::oDbfUbiT:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 50 ".\Prg\Fpago.prg"
static oWndBrw
static aBigResource
static aPressResource
static aTexto
static bEdit         := { |aTmp, aGet, dbfFormasPago, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfFormasPago, oBrw, bWhen, bValid, nMode ) }



static dbfFormasPago







STATIC FUNCTION OpenFiles( cPatEmp )

   local lOpen       := .T.
   local oBlock

   IIF( cPatEmp == nil, cPatEmp := cPatGrp(), ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   aBigResource      := aLittleResourceFormaPago()
   aTexto            := aTextoResourceFormaPago()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN lOpen



STATIC FUNCTION CloseFiles()

   if oWndBrw <> nil
      oWndBrw  := nil
   end

   ( dbfFormasPago )->( dbCloseArea() )

   dbfFormasPago    := nil

RETURN ( .T. )



FUNCTION FPago( oMenuItem, oWnd )

   local nLevel

   IIF( oMenuItem == nil, oMenuItem := "01014", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

    IF oWndBrw == NIL





      nLevel            := nLevelUsr( oMenuItem )
      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end

      if !OpenFiles()
         return nil
      end





      AddMnuNext( "Formas de pago", ProcName() )















      oWndBrw := TShell():New( 2, 10, 18, 70, "Formas de pago",, oWnd,,, .F.,,, ( dbfFormasPago ),,,,, {"Código", "Nombre", "Posición"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfFormasPago ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfFormasPago ) )}, {||( WinDelRec(  oWndBrw:oBrw, dbfFormasPago ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfFormasPago ) )}, nil, nLevel, "Creditcards_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPago"
         :bEditValue       := {|| ( dbfFormasPago )->cCodPago }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesPago"
         :bEditValue       := {|| ( dbfFormasPago )->cDesPago }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Táctil"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfFormasPago )->lShwTpv }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "TACTIL16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Posición"
         :cSortOrder       := "nPosTpv"
         :bEditValue       := {|| if( ( dbfFormasPago )->lShwTpv, Trans( ( dbfFormasPago )->nPosTpv, "99" ), "" ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      oWndBrw:lAutoPos     := .F.
      oWndBrw:cHtmlHelp    := "Formas de pago"

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )







        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )







        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfFormasPago ) )}, "(Z)oom", "Z",,, 8,, .F. )







        oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )








        oWndBrw:NewAt( "IMP",,, {||( InfFpg():New( "Listado de formas de pago" ):Play() )}, "(L)istado", "L",,, 32,, .F. )






      oWndBrw:NewAt( "Up",,, {||( ChangePosition( .F. ), oWndBrw:Refresh() )}, "S(u)bir posición", "U",,, 32,, .F. )






      oWndBrw:NewAt( "Down",,, {||( ChangePosition( .T. ), oWndBrw:Refresh() )}, "Ba(j)ar posición", "J",,, 32,, .F. )







      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )


        oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

    ELSE

        oWndBrw:SetFocus()

    end

RETURN NIL



STATIC FUNCTION EdtRec( aTmp, aGet, dbfFormasPago, oBrw, bWhen, bValid, nMode )

   local oDlg
    local oGet
   local nOrd
   local oGet2
   local oGetCob
   local cGetCob
   local oGetGas
   local cGetGas
   local oCmbImagen
   local cCmbImagen
   local nMaxPosition





   nOrd                 := ( dbfFormasPago )->( OrdSetFocus( "nPosTpv" ) )
   nMaxPosition         := ( dbfFormasPago )->( OrdKeyCount() )
   ( dbfFormasPago )->( OrdSetFocus( nOrd ) )

   if ( nMode == 1 .OR. nMode == 4 )
      nMaxPosition++
   end





   if nMode == 1
      aTmp[ 10 ]  := 1
      aTmp[ 11 ]  := 0
   end

   if aTmp[ 3 ] == 0
      aTmp[ 3 ]  := 1
   end

   if aTmp[ 6 ] == 0
      aTmp[ 6 ]  := 1
   end

   if Empty( aTmp[ 14 ] )
      aTmp[ 14 ]  := 1
   end

   if Empty( aTmp[ 15 ] )
      aTmp[ 15 ]  := nMaxPosition
   end

   if aTmp[ 1 ] == "00"
      aTmp[ 13 ]  := .T.
   end





   if Empty( aBigResource )
      aBigResource      := aLittleResourceFormaPago()
   end

   if Empty( aTexto )
      aTexto            := aTextoResourceFormaPago()
   end

   cCmbImagen           := aTexto[ Min( Max( aTmp[ 14 ], 1 ), len( aTexto ) ) ]





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "formas de pagos", "FormPago",, .F.,,,,,, .F.,,,,,, .F., )










      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oDlg,, "@!", {||    ( NotValid( oGet, dbfFormasPago ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,,, nil,,, )




      oGet2 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2], aTmp[ 2]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oDlg,, { 111, 112, 113 },,,,, .F., {||     ( nMode <> 3 )}, )






      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 4 ], aTmp[ 4 ]:= u ) }, oDlg,, "@E 99.99",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 3 ] == 3 )},, .F., .T.,,,,,, nil,,, )




      TCheckBox():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oDlg,, { 140, 141 },,,,, .F., {||     ( nMode <> 3 )}, )









      aGet[ 10 ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oDlg,, "999", {||    ( aTmp[ 10 ] > 0 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      1}, {||      999},, nil,,, )








      aGet[ 11 ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oDlg,, "999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      999},, nil,,, )








      aGet[ 12 ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oDlg,, "999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 10 ] > 1 )},, .F., .T.,,, {||      0}, {||      999},, nil,,, )








      TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )






      aGet[ 32 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( aTmp[ 31 ] .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwBncEmp( aGet[ 32 ], aGet[ 33 ], aGet[ 34 ], aGet[ 35 ], aGet[ 36 ] ) )}, nil, "LUPA",, )





      aGet[ 33 ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ 33 ], aTmp[ 34 ], aTmp[ 35 ], aTmp[ 36 ], aGet[ 35 ] ) )},,,,,, .F., {||     ( aTmp[ 31 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 34 ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ 34 ], aTmp[ 34 ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ 33 ], aTmp[ 34 ], aTmp[ 35 ], aTmp[ 36 ], aGet[ 35 ] ) )},,,,,, .F., {||     ( aTmp[ 31 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ 35 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 35 ], aTmp[ 35 ]:= u ) }, oDlg,,, {||    ( lCalcDC( aTmp[ 33 ], aTmp[ 34 ], aTmp[ 35 ], aTmp[ 36 ], aGet[ 35 ] ) )},,,,,, .F., {||     ( aTmp[ 31 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ 36 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oDlg,, "9999999999", {||    ( lCalcDC( aTmp[ 33 ], aTmp[ 34 ], aTmp[ 35 ], aTmp[ 36 ], aGet[ 35 ] ) )},,,,,, .F., {||     ( aTmp[ 31 ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








      aGet[ 7 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 7 ], { aTmp[ 7 ], aTmp[ 2 ] }, oGetCob ) )},,,,,, .F., {||     ( !Empty( cRutCnt() ) .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 7 ], oGetCob ) )}, nil, "LUPA",, )




        oGetCob := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, cGetCob, cGetCob:= u ) }, oDlg,,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








      aGet[ 8 ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 8 ], { aTmp[ 8 ], aTmp[ 2 ] }, oGetGas ) )},,,,,, .F., {||     ( !Empty( cRutCnt() ) .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 8 ], oGetGas ) )}, nil, "LUPA",, )





      oGetGas := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cGetGas, cGetGas:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )






      TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ 1 ] <> "00" )}, .F. )







      oCmbImagen := TComboBox():ReDefine( 410, { | u | If( PCount()==0, cCmbImagen, cCmbImagen:= u ) }, ( aTexto ), oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, ( aBigResource ),,,, )










      aGet[ 15 ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oDlg,, "99", {||    ( aTmp[ 15 ] >= 1 .AND. aTmp[ 15 ] <= 99 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      ( 1 )}, {||      ( 99 )},, nil,,, )








      aGet[ ( dbfFormasPago )->( FieldPos( "cCodXml" ) ) ] := TComboBox():ReDefine( 425, { | u | If( PCount()==0, aTmp[ ( dbfFormasPago )->( FieldPos( "cCodXml" ) ) ], aTmp[ ( dbfFormasPago )->( FieldPos( "cCodXml" ) ) ]:= u ) }, {       "01. Al contado", "02. Recibo Domiciliado", "03. Recibo", "04. Transferencia", "05. Letra Aceptada", "06. Crédito Documentario", "07. Contrato Adjudicación", "08. Letra de cambio", "09. Pagaré a la Orden", "10. Pagaré No a la Orden", "11. Cheque", "12. Reposición", "13. Especiales", "14. Compensación", "15. Giro postal", "16. Cheque conformado", "17. Cheque bancario", "18. Pago contra reembolso", "19. Pago mediante tarjeta" }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )},,,,, )





      TGetHlp():ReDefine( 500, { | u | If( PCount()==0, aTmp[ ( dbfFormasPago )->( FieldPos( "nEntIni" ) ) ], aTmp[ ( dbfFormasPago )->( FieldPos( "nEntIni" ) ) ]:= u ) }, oDlg,, "@E 99.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ ( dbfFormasPago )->( FieldPos( "nPctDto" ) ) ], aTmp[ ( dbfFormasPago )->( FieldPos( "nPctDto" ) ) ]:= u ) }, oDlg,, "@E 99.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )







      TButton():ReDefine( 1, {||( lPreSave( aTmp, aGet, dbfFormasPago, oBrw, nMode, oDlg, oGet, oGet2, oCmbImagen ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 559, {||( GoHelp() )}, oDlg,,, .F.,,,, .F. )

      if nMode <> 3
         oDlg:AddFastKey( 116, {|| lPreSave( aTmp, aGet, dbfFormasPago, oBrw, nMode, oDlg, oGet, oGet2, oCmbImagen ) } )
      end

      oDlg:AddFastKey ( 112, {|| GoHelp() } )

      oDlg:bStart := {|| oGet:SetFocus(), aGet[ 7 ]:lValid(), aGet[ 8 ]:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION lPreSave( aTmp, aGet, dbfFormasPago, oBrw, nMode, oDlg, oGet, oGet2, oCmbImagen )

   if nMode == 1 .OR. nMode == 4

      if Empty( aTmp[ 1 ] )
         MsgStop( "El código de la forma de pago no puede estar vacío." )
         oGet:SetFocus()
         Return nil
      end

      if dbSeekInOrd( aTmp[ 1 ], "CCODPAGO", dbfFormasPago )
         MsgStop( "Código ya existe " + Rtrim( aTmp[ 1 ] ) )
         Return nil
      end

   end

   if Empty( aTmp[ 2 ] )
      MsgStop( "El nombre de la forma de pago no puede estar vacío." )
      oGet2:SetFocus()
      Return nil
   end

   if aTmp[ 10 ] < 1
      MsgStop( "El número de plazos tiene que ser mayor que cero." )
      aGet[ 10 ]:SetFocus()
      Return nil
   end



   aTmp[ 14 ]  := oCmbImagen:nAt



   WinGather( aTmp, aGet, dbfFormasPago, oBrw, nMode )



   ChangePosition()

Return ( oDlg:end( 1 ) )



FUNCTION cNbrFPago( cCodPago, dbfFormasPago )

    local cText            := ""
   local lClose      := .F.

   if dbfFormasPago == NIL
      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   if ValType( dbfFormasPago ) == "O"
      if dbfFormasPago:Seek( cCodPago )
         cText       := RTrim( dbfFormasPago:cDesPago )
      end
   else
      if ( dbfFormasPago )->( dbSeek( cCodPago ) )
         cText       := RTrim( ( dbfFormasPago )->cDesPago )
      end
   end

   if lClose
      ( dbfFormasPago )->( dbCloseArea() )
   end

RETURN cText



FUNCTION cCtaFPago( cCodFPgo, dbfFormasPago )

    local cText        := ""
   local lClose   := .F.

   if Empty( dbfFormasPago )
      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if dbSeekInOrd( cCodFPgo, "cCodPago", dbfFormasPago )
      cText       := ( dbfFormasPago )->cCtaCobro
   end

   if lClose
      ( dbfFormasPago )->( dbCloseArea() )
   end

RETURN cText



FUNCTION cCtaFGas( cCodFPgo, dbfFormasPago )

    local cText        := ""
   local lClose   := .F.

   if Empty( dbfFormasPago )
      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ( dbfFormasPago )->( dbSeekInOrd( cCodFPgo, "cCodPago" ) )
      cText       := ( dbfFormasPago )->cCtaGas
   end

   if lClose
      ( dbfFormasPago )->( dbCloseArea() )
   end

RETURN cText







FUNCTION nTipoPago( cCodFPgo, dbfFormasPago )

   local nEfe        := 1

   do case
      case ValType( dbfFormasPago ) == "O"

         if dbfFormasPago:SeekInOrd( cCodFPgo, "cCodPago" )
            nEfe     := dbfFormasPago:nTipPgo
         end

      case ValType( dbfFormasPago ) == "C"

         if ( dbfFormasPago )->( dbSeekInOrd( cCodFPgo, "cCodPago" ) )
            nEfe     := ( dbfFormasPago )->nTipPgo
         end

   end

RETURN nEfe



FUNCTION cCodigoXmlPago( cCodPgo, dbfFormasPago )

   local cCod        := ""

   do case
      case ValType( dbfFormasPago ) == "O"

         if dbfFormasPago:SeekInOrd( cCodPgo, "cCodPago" )
            cCod     := Rtrim( Left( dbfFormasPago:cCodXml, 2 ) )
         end

      case ValType( dbfFormasPago ) == "C"

         if ( dbfFormasPago )->( dbSeekInOrd( cCodPgo, "cCodPago" ) )
            cCod     := Rtrim( Left( ( dbfFormasPago )->cCodXml, 2 ) )
         end

   end

RETURN ( cCod )



Function BrwPgoTactil( oGet, dbfFormasPago, oGet2 )

   local oDlg
   local oBrw
   local nRec        := ( dbfFormasPago )->( RecNo() )
   local nOrdAnt     := ( dbfFormasPago )->( OrdSetFocus( "CDESPGOBIG" ) )

   oDlg = TDialog():New(,,,, "Seleccionar forma de pago ordenada por: nombre", "HELPENTRYTACTIL",, .F.,,,,,, .F.,,,,,, .F., )





      TButtonBmp():ReDefine( 100, {||( BuscarBrwTactil( dbfFormasPago, oBrw ) )}, oDlg,,, .F.,,,, .F., "LUPA_32",, )




      TButton():ReDefine( 110, {||( ( dbfFormasPago )->( OrdSetFocus( "CCODPGOBIG" ) ), oBrw:Refresh(), oDlg:cTitle( "Seleccionar forma de pago ordenada por: código" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 120, {||( ( dbfFormasPago )->( OrdSetFocus( "CDESPGOBIG" ) ), oBrw:Refresh(), oDlg:cTitle( "Seleccionar forma de pago ordenada por: nombre" ) )}, oDlg,,, .F.,,,, .F. )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfFormasPago
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Formas de pago"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPago"
         :bEditValue       := {|| ( dbfFormasPago )->cCodPago }
         :nWidth           := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesPago"
         :bEditValue       := {|| ( dbfFormasPago )->cDesPago }
         :nWidth           := 200
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )





      TButtonBmp():ReDefine( 140, {||( oBrw:GoUp() )}, oDlg,,, .F.,,,, .F., "UP32",, )





      TButtonBmp():ReDefine( 150, {||( oBrw:GoDown() )}, oDlg,,, .F.,,,, .F., "DOWN32",, )




      TButton():ReDefine( 1, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1
      oGet:cText( ( dbfFormasPago )->cCodPago )
      oGet2:cText( Rtrim( ( dbfFormasPago )->cDesPago ) )
   end

   ( dbfFormasPago )->( OrdSetFocus( nOrdAnt ) )
   ( dbfFormasPago )->( dbGoTo( nRec ) )

Return oDlg:nResult == 1



Function BuscarBrwTactil( Dbf, oBrw )

   local nRec        := ( dbf )->( RecNo() )
   local cBuscado    := VirtualKey( .F. )

   if !Empty( cBuscado )
      if ( dbf )->( dbSeek( cBuscado ) )
         oBrw:Refresh()
      else
         msgStop( "Elemento no encontrado" )
         ( dbf )->( dbGoto( nRec ) )
         oBrw:Refresh()
      end
   end

Return ( .T. )




























_HB_CLASS pdaFPagoSenderReciver ; UTILITY FUNCTION pdaFPagoSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "pdaFPagoSenderReciver" , { HBObject():Classh } ) ) ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @pdaFPagoSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @pdaFPagoSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS pdaFPagoSenderReciver ;



UTILITY STATIC function pdaFPagoSenderReciver_CreateData( oPgrActual, oSayStatus, cPatPreVenta) ; local Self AS CLASS pdaFPagoSenderReciver := QSelf() AS CLASS pdaFPagoSenderReciver

   local dbfFormasPago
   local tmpFPago
   local lExist      := .F.
   local cFileName
   local cPatPc      := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )

   dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPago.Dbf" ), ( cCheckArea( "FPago", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatGrp() + "FPago.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatPc + "FPago.Dbf", cCheckArea( "FPago", @tmpFPago ), .T. )
   ( tmpFPago )->( ordListAdd( cPatPc + "FPago.Cdx" ) )

   if !Empty( oPgrActual )
      oPgrActual:SetRange( 0, ( tmpFPago )->( OrdKeyCount() ) )
   end

   ( tmpFPago )->( dbGoTop() )
   while !( tmpFPago )->( eof() )

         if ( dbfFormasPago )->( dbSeek( ( tmpFPago )->cCodPago ) )
            dbPass( tmpFPago, dbfFormasPago, .F. )
         else
            dbPass( tmpFPago, dbfFormasPago, .T. )
         end

         ( tmpFPago )->( dbSkip() )

         if !Empty( oSayStatus )
            oSayStatus:SetText( "Sincronizando Formas de pago " + Alltrim( Str( ( tmpFPago )->( OrdKeyNo() ) ) ) + " de " + Alltrim( Str( ( tmpFPago )->( OrdKeyCount() ) ) ) )
         end

      SysRefresh()

      if !Empty( oPgrActual )
         oPgrActual:SetPos( ( tmpFPago )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   ( tmpFPago )->( dbCloseArea() )
   ( dbfFormasPago )->( dbCloseArea() )

Return ( Self )





FUNCTION pdaBrwFPago( oGet, dbfFormasPago, oGet2, lBigStyle )

    local oDlg
   local oSayTit
   local oBtn
   local oFont
    local oGet1
    local cGet1
    local oBrw
   local nOrd        := GetBrwOpt( "BrwFPago" )
    local oCbxOrd
   local aCbxOrd     := { "Código", "Nombre" }
   local cCbxOrd     := "Código"
   local lClose      := .F.
   local nLevel      := nLevelUsr( "01039" )
   local oSayText
   local cSayText    := "Formas de pago"

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   IIF( lBigStyle == nil, lBigStyle := .F., ) ;

   if Empty( dbfFormasPago )
      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose         := .T.
   end

   nOrd              := ( dbfFormasPago )->( OrdSetFocus( nOrd ) )
   ( dbfFormasPago )->( dbGoTop() )


   if lBigStyle
      oDlg = TDialog():New(,,,, "Seleccionar formas de pago", "BIGHELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDlg = TDialog():New(,,,, "Seleccionar formas de pago", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   end





























        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfFormasPago ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfFormasPago ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfFormasPago )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus(), oCbxOrd:refresh() )},,,, .F.,,,,,, )










      oBrw := TWBrowse():ReDefine( 105, {|| { ( dbfFormasPago )->cCodPago, ( dbfFormasPago )->cDesPago } }, oDlg, {"Código", "Nombre"}, {80, 300},,,,,,,,,,,, .F., ( dbfFormasPago ),,,, )

      if lBigStyle
         oBrw:nHeaderHeight   := 36
         oBrw:nFooterHeight   := 36
         oBrw:nLineHeight     := 36
      end

      oBrw:bLDblClick         := {|| oDlg:end( 1 ) }



   if ( "PDA" $ cParamsMain() )



      oSayText := TSay():ReDefine( 100, {|| cSayText}, oDlg,,,, .F.,, .F., .F. )

   end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )



      if !( "PDA" $ cParamsMain() )





         TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfFormasPago ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. !IsReport() )},,, .F. )





         TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfFormasPago ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. !IsReport() )},,, .F. )

         if nAnd( nLevel, 2 ) <> 0 .AND. !IsReport()
            oDlg:AddFastKey( 113, {|| WinAppRec( oBrw, bEdit, dbfFormasPago ) } )
         end

         if nAnd( nLevel, 4 ) <> 0 .AND. !IsReport()
            oDlg:AddFastKey( 114, {|| WinEdtRec( oBrw, bEdit, dbfFormasPago ) } )
         end

      end



   oDlg:AddFastKey( 116,    {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,{|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )








   if oDlg:nResult == 1

      oGet:cText( ( dbfFormasPago )->cCodPago )

      if ValType( oGet2 ) == "O"
         oGet2:cText( ( dbfFormasPago )->cDesPago )
      end

   end

   if !Empty( oFont )
      oFont:End()
   end

   OrdClearScope( oBrw, dbfFormasPago )

   SetBrwOpt( "BrwFPago", ( dbfFormasPago )->( OrdNumber() ) )

   if lClose
      ( dbfFormasPago )->( dbCloseArea() )
   else
      ( dbfFormasPago )->( OrdSetFocus( nOrd ) )
   end

   oGet:SetFocus()

RETURN ( oDlg:nResult == 1 )



function IsFPago( cPatEmp )

   local nFields

   local oBlock
   local oError

   local IsFPago     := .F.
   local dbfFormasPago

   IIF( cPatEmp == nil, cPatEmp := cPatGrp(), ) ;

   if !lExistTable( cPatEmp + "Fpago.Dbf" )
      mkFpago()
   end

   if !lExistIndex( cPatEmp + "Fpago.Cdx" )
      rxFpago()
   end





   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., cDriver(), cPatEmp + "FPago.Dbf", cCheckArea( "FPAGO", @dbfFormasPago ), .F. )

      if !( dbfFormasPago )->( netErr() )

         nFields        := ( dbfFormasPago )->( fCount() )

         ( dbfFormasPago )->( dbCloseArea() )

         if nFields <> len( aItmFpago() )

            dbCreate( cPatEmpTmp() + "FPago.Dbf", aSqlStruct( aItmFpago() ), cDriver() )
            appDbf( cPatEmp, cPatEmpTmp(), "Fpago" )

            fEraseTable( cPatEmp + "FPago.Dbf" )
            fRenameTable( cPatEmpTmp() + "FPago.Dbf", cPatEmp + "FPago.Dbf" )

            rxFpago()

         end

      end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )





   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "FPAGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      ( dbfFormasPago )->( __dbLocate( { || ( dbfFormasPago )->cCodPago == "00" } ) )

      if !( dbfFormasPago )->( Found() )

         ( dbfFormasPago )->( dbAppend() )
         ( dbfFormasPago )->cCodPago     := "00"
         ( dbfFormasPago )->cDesPago     := "Contado"
         ( dbfFormasPago )->nTipPgo      := 1
         ( dbfFormasPago )->lEmtRec      := .T.
         ( dbfFormasPago )->nCobRec      := 1
         ( dbfFormasPago )->nPlazos      := 1
         ( dbfFormasPago )->nPlaUno      := 0
         ( dbfFormasPago )->nDiaPla      := 0
         ( dbfFormasPago )->lShwTpv      := .T.
         ( dbfFormasPago )->nImgTpv      := 1
         ( dbfFormasPago )->nPosTpv      := 1
         ( dbfFormasPago )->( dbUnLock() )

      else

         if !( dbfFormasPago )->lShwTpv .AND. ( dbfFormasPago )->( dbRLock() )

            ( dbfFormasPago )->lShwTpv   := .T.
            ( dbfFormasPago )->nImgTpv   := 1
            ( dbfFormasPago )->nPosTpv   := 1

            ( dbfFormasPago )->( dbUnLock() )

         end

      end

      IsFPago                             := .T.

      ( dbfFormasPago )->( dbCloseArea() )

   RECOVER USING oError

      msgStop( "Imposible abrir base de datos de formas de pago." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

return ( IsFPago )



FUNCTION rxFPago( cPath, oMeter )

   local dbfFormasPago

   IIF( cPath == nil, cPath := cPatGrp(), ) ;

   if !lExistTable( cPath + "FPago.Dbf" )
      mkFPago( cPath )
   end

   fEraseIndex( cPath + "FPago.Cdx" )

   dbUseArea( .T., cDriver(), cPath + "FPAGO.DBF", cCheckArea( "FPAGO", @dbfFormasPago ), .F. )
   if !( dbfFormasPago )->( neterr() )
      ( dbfFormasPago )->( __dbPack() )

      ( dbfFormasPago )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFormasPago )->( ordCreate( cPath + "FPAGO.CDX", "cCodPago", "Field->cCodPago", {|| Field->cCodPago }, ) )

      ( dbfFormasPago )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFormasPago )->( ordCreate( cPath + "FPAGO.CDX", "CDESPAGO", "Field->CDESPAGO", {|| Field->CDESPAGO } ) )

      ( dbfFormasPago )->( ordCondSet("!Deleted() .and. Field->lShwTpv", {||!Deleted() .AND. Field->lShwTpv} ) )
      ( dbfFormasPago )->( ordCreate( cPath + "FPAGO.CDX", "nPosTpv", "Str( Field->nPosTpv )", {|| Str( Field->nPosTpv ) } ) )

      ( dbfFormasPago )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFormasPago )->( ordCreate( cPath + "FPAGO.CDX", "CCODPGOBIG", "UPPER( Field->CCODPAGO )", {|| UPPER( Field->CCODPAGO ) }, ) )

      ( dbfFormasPago )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfFormasPago )->( ordCreate( cPath + "FPAGO.CDX", "CDESPGOBIG", "UPPER( Field->CDESPAGO )", {|| UPPER( Field->CDESPAGO ) } ) )

      ( dbfFormasPago )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de formas de pago", "Reindexando formas de pago" )
   end

RETURN NIL



FUNCTION mkFPago( cPath, lAppend, cPathOld )

   local dbfFormasPago

   IIF( cPath == nil, cPath := cPatGrp(), ) ;
   IIF( lAppend == nil, lAppend := .F., ) ;

   dbCreate( cPath + "FPAGO.DBF", aSqlStruct( aItmFPago() ), cDriver() )

   if lAppend .AND. lIsDir( cPathOld )
      dbUseArea( .T., cDriver(), cPath + "Fpago.Dbf", cCheckArea( "Fpago", @dbfFormasPago ), .F. )
      ( dbfFormasPago )->( __dbApp( cPathOld + "Fpago.Dbf" ) )
      ( dbfFormasPago )->( dbCloseArea() )
   end

   rxFPago( cPath )

RETURN .T.



function aItmFPago()

   local aBase := {}

   aAdd( aBase, { "CCODPAGO",  "C",   2,   0, "Código de la forma de pago"                             ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "CDESPAGO",  "C", 150,   0, "Descripción de forma de pago"                           ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NTIPPGO",   "N",   1,   0, "Tipo de la forma de pago"                               ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPCTCOM",   "N",   6,   2, "Porcentaje de comisión de la forma de pago"             ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "LEMTREC",   "L",   1,   0, "Emitir recibos de la forma de pago"                     ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NCOBREC",   "N",   1,   0, "Recibos como cobrado de la forma de pago"               ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "CCTACOBRO", "C",  12,   0, "Cuenta contabilidad de forma de pago"                   ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "CCTAGAS",   "C",  12,   0, "Cuenta contabilidad de gastos"                          ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "LESPERADOC","L",   1,   0, "No imprimir fecha de vencimiento"                       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPLAZOS",   "N",   3,   0, "Número plazos de aplazamiento"                          ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPLAUNO",   "N",   3,   0, "Numero de días hasta el primer pago"                    ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NDIAPLA",   "N",   3,   0, "Número de dias entre plazos"                            ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "lShwTpv",   "L",   1,   0, "Lógico mostrar en TPV"                                  ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "nImgTpv",   "N",   1,   0, "Número de la imagen a mostrar en TPV"                   ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "nPosTpv",   "N",   4,   1, "Posición para mostrar en TPV"                           ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NTIPOAPL",  "N",   1,   0, "Tipo de aplazamiento de la forma de pago"               ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NIMPAPL",   "N",  16,   6, "Importe de aplzamiento de la forma de pago"             ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPORC1",    "N",   6,   2, "Porcentaje del primer aplazamiento de la forma de pago" ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NAPL1",     "N",   3,   0, "Dias del primer aplazamiento de la forma de pago"       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPORC2",    "N",   6,   2, "Porcentaje del segundo aplazamiento de forma de pago"   ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NAPL2",     "N",   3,   0, "Dias del segundo aplazamiento de la forma de pago"      ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPORC3",    "N",   6,   2, "Porcentaje del tercer aplazamiento de forma de pago"    ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NAPL3",     "N",   3,   0, "Dias del tercer aplazamiento de la forma de pago"       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPORC4",    "N",   6,   2, "Porcentaje del cuarto aplazamiento de forma de pago"    ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NAPL4",     "N",   3,   0, "Dias del cuarto aplazamiento de la forma de pago"       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NPORC5",    "N",   6,   2, "Porcentaje del quinto aplazamiento de forma de pago"    ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "NAPL5",     "N",   3,   0, "Dias del quinto aplazamiento de la forma de pago"       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cCodXml",   "C", 100,   0, "Código de pago para facturae"                           ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "nEntIni",   "N",   6,   2, "Porcentaje de entrega inicial de la forma de pago"      ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "nPctDto",   "N",   6,   2, "Porcentaje de descuento de la forma de pago"            ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "lUtlBnc",   "L",   1,   0, "Utilizar entidad bancaria"                              ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cBanco",   "C",   50,   0, "Entidad bancaria"                                       ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cEntBnc",  "C",    4,   0, "Entidad de la cuenta"                                   ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cSucBnc",  "C",    4,   0, "Sucursal de la cuenta"                                  ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cDigBnc",  "C",    2,   0, "Dígito de control de la cuenta"                         ,  "",   "", "( cDbfPgo )" } )
   aAdd( aBase, { "cCtaBnc",  "C",   10,   0, "Cuenta bancaria"                                        ,  "",   "", "( cDbfPgo )" } )

return ( aBase )



function aLittleResourceFormaPago()

   local aResources := {}

   aAdd( aResources, "Money2_16" )
   aAdd( aResources, "Creditcards_16" )
   aAdd( aResources, "MoneyBag_16" )
   aAdd( aResources, "Percent_16" )
   aAdd( aResources, "ShoppingBasket_16" )

return ( aResources )



function aBigResourceFormaPago()

   local aResources := {}

   aAdd( aResources, "Money2_32" )
   aAdd( aResources, "Creditcards_32" )
   aAdd( aResources, "MoneyBag_32" )
   aAdd( aResources, "Percent_32" )
   aAdd( aResources, "ShoppingBasket_32" )

return ( aResources )



function aPressResourceFormaPago()

   local aResources := {}

   aAdd( aResources, "Money2_32_Pressed" )
   aAdd( aResources, "Creditcards_32_Pressed" )
   aAdd( aResources, "MoneyBag_32_Pressed" )
   aAdd( aResources, "Percent_32_Pressed" )
   aAdd( aResources, "ShoppingBasket_32_Pressed" )

return ( aResources )



function aTextoResourceFormaPago()

   local aResources  := {}

   aAdd( aResources, "Dinero" )
   aAdd( aResources, "Tarjeta de credito" )
   aAdd( aResources, "Bolsa de dinero" )
   aAdd( aResources, "Porcentaje" )
   aAdd( aResources, "Cesta de compra" )

return ( aResources )



function aCreateButtons( dbfFormasPago )

   local n           := 1
   local nOrd
   local oButton
   local aButtons    := {}

   aBigResource      := aBigResourceFormaPago()
   aPressResource    := aPressResourceFormaPago()

   nOrd              := ( dbfFormasPago )->( OrdSetFocus( "nPosTpv" ) )

   ( dbfFormasPago )->( dbGoTop() )
   while len( aButtons ) < 5 .AND. !( dbfFormasPago )->( eof() )

      oButton                 := TButtonPago()
      oButton:cBigResource    := aBigResource[ Min( Max( ( dbfFormasPago )->nImgTpv, 1 ), len( aBigResource ) ) ]
      oButton:cPressResource  := aPressResource[ Min( Max( ( dbfFormasPago )->nImgTpv, 1 ), len( aPressResource ) ) ]
      oButton:cText           := Rtrim( ( dbfFormasPago )->cDesPago )
      oButton:cCode           := Rtrim( ( dbfFormasPago )->cCodPago )

      aAdd( aButtons, oButton )

      ( dbfFormasPago )->( dbSkip() )

   end

   ( dbfFormasPago )->( OrdSetFocus( nOrd ) )

Return ( aButtons )



_HB_CLASS TButtonPago ; UTILITY FUNCTION TButtonPago(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TButtonPago" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oButton} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oButton" }, .F., .F. ), )
   _HB_MEMBER { oSay} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSay" }, .F., .F. ), )

   _HB_MEMBER { cBigResource} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cBigResource" }, .F., .F. ), )
   _HB_MEMBER { cPressResource} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cPressResource" }, .F., .F. ), )
   _HB_MEMBER { cText} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cText" }, .F., .F. ), )
   _HB_MEMBER { cCode} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cCode" }, .F., .F. ), )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TButtonPago ;





FUNCTION BrwFPago( oGet, oGet2, lBigStyle )

    local oDlg
   local oSayTit
   local oBtn
    local oGet1
    local cGet1
    local oBrw
   local nOrd        := GetBrwOpt( "BrwFPago" )
    local oCbxOrd
   local aCbxOrd     := { "Código", "Nombre" }
   local cCbxOrd     := "Código"
   local nLevel      := nLevelUsr( "01039" )
   local oSayText
   local cSayText    := "Formas de pago"
   local cReturn     := Space( 2 )

   nOrd              := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd           := aCbxOrd[ nOrd ]

   IIF( lBigStyle == nil, lBigStyle := .F., ) ;

   if !OpenFiles()
      Return .F.
   end

   nOrd              := ( dbfFormasPago )->( OrdSetFocus( nOrd ) )
   ( dbfFormasPago )->( dbGoTop() )

   if lBigStyle
      oDlg = TDialog():New(,,,, "Seleccionar formas de pago", "BIGHELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDlg = TDialog():New(,,,, "Seleccionar formas de pago", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   end






        oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfFormasPago ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfFormasPago ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfFormasPago )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:refresh(), oGet1:SetFocus(), oCbxOrd:refresh() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfFormasPago
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Formas de pago"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodPago"
         :bEditValue       := {|| ( dbfFormasPago )->cCodPago }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cDesPago"
         :bEditValue       := {|| ( dbfFormasPago )->cDesPago }
         :nWidth           := 200
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )

      if lBigStyle
         oBrw:nHeaderHeight   := 36
         oBrw:nFooterHeight   := 36
         oBrw:nLineHeight     := 36
      end

   if ( "PDA" $ cParamsMain() )



      oSayText := TSay():ReDefine( 100, {|| cSayText}, oDlg,,,, .F.,, .F., .F. )

   end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

      if !( "PDA" $ cParamsMain() )





         TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfFormasPago ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. !IsReport() )},,, .F. )





         TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfFormasPago ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. !IsReport() )},,, .F. )

         if nAnd( nLevel, 2 ) <> 0 .AND. !IsReport()
            oDlg:AddFastKey( 113, {|| WinAppRec( oBrw, bEdit, dbfFormasPago ) } )
         end

         if nAnd( nLevel, 4 ) <> 0 .AND. !IsReport()
            oDlg:AddFastKey( 114, {|| WinEdtRec( oBrw, bEdit, dbfFormasPago ) } )
         end

      end

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )


   if oDlg:nResult == 1

      cReturn     := ( dbfFormasPago )->cCodPago

      if IsObject( oGet )
         oGet:cText( ( dbfFormasPago )->cCodPago )
      end

      if IsObject( oGet2 )
         oGet2:cText( ( dbfFormasPago )->cDesPago )
      end

   end

   OrdClearScope( oBrw, dbfFormasPago )

   SetBrwOpt( "BrwFPago", ( dbfFormasPago )->( OrdNumber() ) )

   CloseFiles()

   if IsObject( oGet )
      oGet:SetFocus()
   end

RETURN ( cReturn )





FUNCTION cFpago( oGet, dbfFormasPago, oGetNombre, oGetPorcentajeEntrega, oGetPorcentajeDescuento )

   local nOrd
   local lClose   := .F.
   local lValid   := .F.
   local xValor   := Upper( oGet:varGet() )

   if Empty( xValor )
      if IsObject( oGetNombre )
         oGetNombre:cText( "" )
      end
      return .T.
   end

   if ( Alltrim( xValor ) == Replicate( "Z", len( Alltrim( xValor ) ) ) )
      return .T.
   end

   if Empty( dbfFormasPago )

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPago.Dbf" ), ( cCheckArea( "FPAGO", @dbfFormasPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPago.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      lClose      := .T.

   else

      nOrd        := ( dbfFormasPago )->( ordSetFocus( "cCodPago" ) )

   end

   if ( dbfFormasPago )->( dbSeek( xValor ) )

      oGet:cText( ( dbfFormasPago )->cCodPago )

      if IsObject( oGetNombre )
         oGetNombre:cText( ( dbfFormasPago )->cDesPago )
      end

      if IsObject( oGetPorcentajeEntrega )
         oGetPorcentajeEntrega:cText( ( dbfFormasPago )->nEntIni )
      end

      if IsObject( oGetPorcentajeDescuento )
         oGetPorcentajeDescuento:cText( ( dbfFormasPago )->nPctDto )
      end

      lValid      := .T.

   else

      MsgStop( "Forma de pago " + xValor + " no encontrada" )

   end

   if lClose
      ( dbfFormasPago )->( dbCloseArea() )
   else
      ( dbfFormasPago )->( ordSetFocus( nOrd ) )
   end

Return ( lValid )



Static Function ChangePosition( lInc )

   local aPos
   local nPos     := 1
   local aRec     := {}
   local nRec     := ( dbfFormasPago )->( Recno() )
   local nOrd     := ( dbfFormasPago )->( OrdSetFocus( "nPosTpv" ) )

   CursorWait()

   do case
      case IsTrue( lInc )

         if ( dbfFormasPago )->( dbRLock() )
            ( dbfFormasPago )->nPosTpv   := ( dbfFormasPago )->nPosTpv + 1.5
         end
         ( dbfFormasPago )->( dbUnLock() )

      case IsFalse( lInc )

         if ( dbfFormasPago )->( dbRLock() )
            ( dbfFormasPago )->nPosTpv   := ( dbfFormasPago )->nPosTpv - 1.5
         end
         ( dbfFormasPago )->( dbUnLock() )

   end



   ( dbfFormasPago )->( dbGoTop() )
   while !( dbfFormasPago )->( eof() )

      if ( dbfFormasPago )->lShwTpv
         aAdd( aRec, { ( dbfFormasPago )->( Recno() ), nPos++ } )
      end

      ( dbfFormasPago )->( dbSkip() )

   end



   for each aPos in aRec

      ( dbfFormasPago )->( dbGoTo( aPos[ 1 ] ) )

      if ( dbfFormasPago )->( dbRLock() )
         ( dbfFormasPago )->nPosTpv      := aPos[ 2 ]
         ( dbfFormasPago )->( dbUnLock() )
      end

   next



   CursorWE()

   ( dbfFormasPago )->( dbGoTo( nRec ) )
   ( dbfFormasPago )->( OrdSetFocus( nOrd ) )

Return ( nil )

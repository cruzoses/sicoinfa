#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 31 ".\Prg\Articulo.prg"
memvar cDbfArt
memvar cDbfDiv
memvar cDbfOfe
memvar cDbfBar

static pThread

static oWndBrw
static dbfProv
static dbfCatalogo
static dbfCategoria
static dbfTemporada
static dbfFamPrv
static dbfTMov
static dbfTarPreT
static dbfTarPreL
static dbfTarPreS
static dbfOfe
static dbfAlmT
static dbfPro
static dbfTblPro
static dbfDoc
static dbfFlt

static filTmpPrv
static dbfTmpPrv
static filTmpVta
static dbfTmpVta
static filTmpKit
static dbfTmpKit
static filTmpOfe
static dbfTmpOfe
static filTmpImg
static dbfTmpImg
static filTmpCodebar
static dbfTmpCodebar
static filTmpSubCta
static dbfTmpSubCta
static filTmpSubCom
static dbfTmpSubCom

static oStock
static oTankes
static oTipArt
static oGrpFam
static oCatalogo
static oNewImp
static oBandera
static oCosto
static oUndMedicion
static oFraPub
static oFabricante

static oActiveX

static cCatOld
static cPrvOld
static oMenu
static aBmpTipCat
static aStrTipCat

static aBenefSobre         := { "Costo", "Venta" }

static cCodigoFamilia

static lOpenFiles          := .F.
static lExternal           := .F.

static nLabels             := 1

static lEuro               := .F.

static bEdit               := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtRec( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdit2              := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtRec2( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtDet             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtDet( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtVta             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtVta( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtKit             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtKit( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }
static bEdtImg             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode          | EdtImg( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode ) }
static bEdtCod             := { |aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt | EdtCodebar( aTmp, aGet, dbf, oBrw, bWhen, bValid, nMode, cCodArt ) }

static oCbxPrecio

static dbfArticulo
static dbfFam

static filArticulo
static tmpArticulo

static dbfCodebar
static dbfArtPrv
static dbfArtVta
static dbfArtKit
static dbfArtLbl
static dbfDiv
static dbfIva
static dbfImg

static dbfAlbPrvT
static dbfAlbPrvL
static dbfFacPrvT
static dbfFacPrvL
static dbfRctPrvL

static dbfAlbCliT
static dbfAlbCliL
static dbfFacCliL
static dbfFacRecL
static dbfTikCliL
static dbfProLin
static dbfProMat
static dbfHisMov
static dbfPedPrvL
static dbfPedCliL
static dbfUbicaT
static dbfUbicaL

static oSeccion

static dbfTImp

static cPouDiv
static cPorDiv
static cPouChg
static cPinDiv
static cPirDiv
static nDecDiv
static cPpvDiv
static nDpvDiv
static nDwbDiv
static cPicEsc
static cPicUnd
static cPwbDiv
static cPwrDiv

static oTimerBrw

static cOldCodeBar   := ""
static aOldCodeBar   := {}









Static Function aItmCom()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo"            , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodDiv",   "C",  3, 0, "Código de divisa"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 10, 0, "Código de primera propiedad"   , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 10, 0, "Código de segunda propiedad"   , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 10, 0, "Valor de primera propiedad"    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 10, 0, "Valor de segunda propiedad"    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreCom",   "N", 16, 6, "Precio de compras"             , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 16, 6, "Valor del punto"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto"           , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



STATIC FUNCTION OpenFiles( lExt, cPath )

   local oError
   local oBlock

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de artículos" )
      Return ( .F. )
   end

   CursorWait()

   IIF( lExt == nil, lExt := .F., ) ;
   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   lExternal      := lExt

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oMsgText( "Abriendo ficheros artículos" )

      lOpenFiles  := .T.

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      CacheRecords( dbfArticulo )

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatPrv() + "PROVEE.DBF" ), ( cCheckArea( "PROVEE", @dbfProv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatPrv() + "PROVEE.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "CATALOGO.DBF" ), ( cCheckArea( "CATALOGO", @dbfCatalogo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "CATALOGO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "CATEGORIAS.DBF" ), ( cCheckArea( "CATEGORIA", @dbfCategoria ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "CATEGORIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "Temporadas.Dbf" ), ( cCheckArea( "TEMPORADA", @dbfTemporada ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "Temporadas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFam ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FamPrv.Dbf" ), ( cCheckArea( "FAMPRV", @dbfFamPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "FamPrv.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TMOV.DBF" ), ( cCheckArea( "TMOV", @dbfTMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TMOV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPRET.DBF" ), ( cCheckArea( "TARPRET", @dbfTarPreT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPRET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CCODART" )

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtLbl.Dbf" ), ( cCheckArea( "ArtLbl", @dbfArtLbl ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtLbl.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @dbfImg ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PRO.DBF" ), ( cCheckArea( "PRO", @dbfPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "PRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CTIPO" )

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CNFFLT.DBF" ), ( cCheckArea( "CNFFLT", @dbfFlt ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CNFFLT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cStkFast" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cStkFast" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FacRecL.DBF" ), ( cCheckArea( "FacRecL", @dbfFacRecL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FacRecL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CSTKFAST" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "HISMOV.DBF" ), ( cCheckArea( "HISMOV", @dbfHisMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "HISMOV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRefMov" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "AlbPrvT", @dbfAlbPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "AlbCliT", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDPROVL.DBF" ), ( cCheckArea( "PedPrvL", @dbfPedPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PedCliL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cRef" )

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "UBICAT.DBF" ), ( cCheckArea( "UBICAT", @dbfUbicaT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "UBICAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "UBICAL.DBF" ), ( cCheckArea( "UBICAL", @dbfUbicaL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "UBICAL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIPIMP.DBF" ), ( cCheckArea( "TIPIMP", @dbfTImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIPIMP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      oBandera             := TBandera():New()

      oStock               := TStock():Create( cPatGrp() )

      if !oStock:lOpenFiles()
         lOpenFiles        := .F.
      else

         oStock:cKit       := dbfArtKit

         oStock:cPedCliL   := dbfPedCliL
         oStock:cAlbCliT   := dbfAlbCliT
         oStock:cAlbCliL   := dbfAlbCliL
         oStock:cFacCliL   := dbfFacCliL
         oStock:cFacRecL   := dbfFacRecL
         oStock:cTikL      := dbfTikCliL

         oStock:cProducL   := dbfProLin
         oStock:cProducM   := dbfProMat
         oStock:cHisMov    := dbfHisMov

         oStock:cPedPrvL   := dbfPedPrvL
         oStock:cAlbPrvT   := dbfAlbPrvT
         oStock:cAlbPrvL   := dbfAlbPrvL
         oStock:cFacPrvL   := dbfFacPrvL
         oStock:cRctPrvL   := dbfRctPrvL

      end

      oTankes              := TTankes():Create( cPath )
      if !oTankes:OpenFiles()
         lOpenFiles        := .F.
      end

      oTipArt              := TTipArt():Create( cPatArt() )
      if !oTipArt:OpenFiles()
         lOpenFiles        := .F.
      end

      oGrpFam              := TGrpFam():Create( cPatArt() )
      if !oGrpFam:OpenFiles()
         lOpenFiles        := .F.
      end

      oFabricante          := TFabricantes():Create( cPatArt() )
      if !oFabricante:OpenFiles()
         lOpenFiles        := .F.
      end

      oCatalogo            := TCatalogo():Create()
      if !oCatalogo:OpenFiles()
         lOpenFiles        := .F.
      end

      oNewImp              := TNewImp():Create( cPath )
      if !oNewImp:OpenFiles()
         lOpenFiles        := .F.
      end

      oUndMedicion         := UniMedicion():Create( cPatGrp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles        := .F.
      end

      oFraPub              := TFrasesPublicitarias():Create( cPatArt() )
      if !oFraPub:OpenFiles()
         lOpenFiles        := .F.
      end

      oSeccion             := TSeccion():Create( cPath )
      if !oSeccion:OpenFiles()
         lOpenFiles        := .F.
      end





      aStrTipCat           := aStrTipoCategoria()





      cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
      cPorDiv              := cPorDiv( cDivEmp(), dbfDiv )
      cPwbDiv              := cPwbDiv( cDivEmp(), dbfDiv )
      cPwrDiv              := cPwrDiv( cDivEmp(), dbfDiv )
      cPouChg              := cPouDiv( cDivChg(), dbfDiv )
      cPinDiv              := cPinDiv( cDivEmp(), dbfDiv )
      cPirDiv              := cPirDiv( cDivEmp(), dbfDiv )
      nDecDiv              := nDouDiv( cDivEmp(), dbfDiv )
      nDwbDiv              := nDwbDiv( cDivEmp(), dbfDiv )
      cPpvDiv              := cPpvDiv( cDivEmp(), dbfDiv )
      nDpvDiv              := nDpvDiv( cDivEmp(), dbfDiv )
      cPicEsc              := MasEsc()
      cPicUnd              := MasUnd()





      oMsgText( "Ficheros de artículos abiertos" )

   RECOVER USING oError

      lOpenFiles           := .F.

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de artículos" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

   CursorWE()

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles( lDestroy )

    IIF( lDestroy == nil, lDestroy := .F., ) ;

   if oWndBrw <> nil

      if !Empty( oWndBrw:oBrw )
         oWndBrw:oBrw:End()
      end

      if lDestroy
         oWndBrw     := nil
      end

   end

   if dbfArticulo <> nil
      ( dbfArticulo )->( dbCloseArea() )
   end

   if dbfProv <> nil
      ( dbfProv )->( dbCloseArea() )
   end

   if dbfCatalogo <> nil
      ( dbfCatalogo )->( dbCloseArea() )
   end

   if dbfCategoria <> nil
      ( dbfCategoria )->( dbCloseArea() )
   end

   if dbfTemporada <> nil
      ( dbfTemporada )->( dbCloseArea() )
   end

   if dbfIva <> nil
      ( dbfIva )->( dbCloseArea() )
   end

   if dbfFam <> nil
      ( dbfFam )->( dbCloseArea() )
   end

   if dbfFamPrv <> nil
      ( dbfFamPrv )->( dbCloseArea() )
   end

   if dbfTMov <> nil
      ( dbfTMov )->( dbCloseArea() )
   end

   if dbfArtPrv <> nil
      ( dbfArtPrv )->( dbCloseArea() )
   end

   if dbfArtLbl <> nil
      ( dbfArtLbl )->( dbCloseArea() )
   end

   if dbfTarPreT <> nil
      ( dbfTarPreT )->( dbCloseArea() )
   end

   if dbfTarPreL <> nil
      ( dbfTarPreL )->( dbCloseArea() )
   end

   if dbfTarPreS <> nil
      ( dbfTarPreS )->( dbCloseArea() )
   end

   if dbfOfe <> nil
      ( dbfOfe )->( dbCloseArea() )
   end

   if dbfImg <> nil
      ( dbfImg )->( dbCloseArea() )
   end

   if dbfDiv <> nil
      ( dbfDiv )->( dbCloseArea() )
   end

   if dbfArtVta <> nil
      ( dbfArtVta )->( dbCloseArea() )
   end

   if dbfAlmT <> nil
      ( dbfAlmT )->( dbCloseArea() )
   end

   if dbfArtKit <> nil
      ( dbfArtKit )->( dbCloseArea() )
   end

   if dbfTblPro <> nil
      ( dbfTblPro )->( dbCloseArea() )
   end

   if dbfPro <> nil
      ( dbfPro )->( dbCloseArea() )
   end

   if dbfCodebar <> nil
      ( dbfCodebar )->( dbCloseArea() )
   end

   if dbfAlbPrvL <> nil
      ( dbfAlbPrvL )->( dbCloseArea() )
   end

   if dbfFacPrvL <> nil
      ( dbfFacPrvL )->( dbCloseArea() )
   end

   if dbfRctPrvL <> nil
      ( dbfRctPrvL )->( dbCloseArea() )
   end

   if dbfAlbCliL <> nil
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if dbfFacCliL <> nil
      ( dbfFacCliL )->( dbCloseArea() )
   end

   if dbfFacRecL <> nil
      ( dbfFacRecL )->( dbCloseArea() )
   end

   if dbfTikCliL <> nil
      ( dbfTikCliL )->( dbCloseArea() )
   end

   if dbfProLin <> nil
      ( dbfProLin )->( dbCloseArea() )
   end

   if dbfProMat <> nil
      ( dbfProMat )->( dbCloseArea() )
   end

   if dbfHisMov <> nil
      ( dbfHisMov )->( dbCloseArea() )
   end

   if dbfAlbPrvT <> nil
      ( dbfAlbPrvT )->( dbCloseArea() )
   end

   if dbfAlbCliT <> nil
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if dbfPedPrvL <> nil
      ( dbfPedPrvL )->( dbCloseArea() )
   end

   if dbfPedCliL <> nil
      ( dbfPedCliL )->( dbCloseArea() )
   end

   if dbfUbicaT <> nil
      ( dbfUbicaT )->( dbCloseArea() )
   end

   if dbfUbicaL <> nil
      ( dbfUbicaL )->( dbCloseArea() )
   end

   if dbfTImp <> nil
      ( dbfTImp )->( dbCloseArea() )
   end

   if !Empty( oStock )
      oStock:end()
   end

   if !Empty( oTankes )
      oTankes:end()
   end

   if !Empty( oGrpFam )
      oGrpFam:end()
   end

   if !Empty( oTipArt )
      oTipArt:end()
   end

   if !Empty( oFabricante )
      oFabricante:end()
   end

   if !Empty( oCatalogo )
      oCatalogo:end()
   end

   if !Empty( oNewImp )
      oNewImp:end()
   end

   if !Empty( oUndMedicion )
      oUndMedicion:end()
   end

   if !Empty( oFraPub )
      oFraPub:end()
   end

   if !Empty( oSeccion )
      oSeccion:End()
   end

   if !Empty( dbfDoc )
      ( dbfDoc )->( dbCloseArea() )
   end

   if !Empty( dbfFlt )
      ( dbfFlt )->( dbCloseArea() )
   end

   dbfArticulo    := nil
   dbfProv        := nil
   dbfCatalogo    := nil
   dbfIva         := nil
   dbfFam         := nil
   dbfFamPrv      := nil
   dbfArtPrv      := nil
   oStock         := nil
   dbfTMov        := nil
   dbfTarPreT     := nil
   dbfTarPreL     := nil
   dbfTarPreS     := nil
   dbfOfe         := nil
   dbfImg         := nil
   dbfDiv         := nil
   dbfArtVta      := nil
   oBandera       := nil
   dbfAlmT        := nil
   dbfArtKit      := nil
   dbfArtLbl      := nil
   dbfTblPro      := nil
   dbfPro         := nil
   dbfCodebar     := nil
   oTankes        := nil
   oTipArt        := nil
   oCatalogo      := nil
   oNewImp        := nil
   oFraPub        := nil
   dbfDoc         := nil
   dbfFlt         := nil
   dbfCategoria   := nil
   dbfTemporada   := nil
   dbfAlbPrvL     := nil
   dbfFacPrvL     := nil
   dbfAlbCliL     := nil
   dbfFacCliL     := nil
   dbfFacRecL     := nil
   dbfTikCliL     := nil
   dbfProLin      := nil
   dbfProMat      := nil
   dbfHisMov      := nil
   dbfAlbPrvT     := nil
   dbfAlbCliT     := nil
   dbfPedPrvL     := nil
   dbfPedCliL     := nil
   dbfUbicaT      := nil
   dbfUbicaL      := nil
   dbfTImp        := nil

   lOpenFiles     := .F.

RETURN ( .T. )



Function Articulo( oMenuItem, oWnd, bOnInit )

   local oSnd
   local oRpl
   local oTct
   local oDel
   local nLevel
   local oBtnEur
   local oRotor

   IIF( oMenuItem == nil, oMenuItem := "01014", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;
   IIF( bOnInit == nil, bOnInit := nil, ) ;

   if oWndBrw == nil





      nLevel            := nLevelUsr( oMenuItem )
      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return .F.
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles( .F. )
         return .F.
      end

      CursorWait()





      AddMnuNext( "Artículos", ProcName() )






















      oWndBrw := TShell():New( 0, 0, 22, 80, "Artículos",, oWnd,,, .F.,,, ( dbfArticulo ),,,,, {"Código",    "Nombre", "Código familia", "Proveedor" , "No obsoletos + Código", "No obsoletos + Nombre", "Categoría" , "Posición táctil" , "Públicar" , "Código web"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfArticulo ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEdit, dbfArticulo ) )}, {||( WinDelRec( oWndBrw:oBrw, dbfArticulo, {|| DelDetalle( ( dbfArticulo )->Codigo ) } ) )}, {||( WinDupRec( oWndBrw:oBrw, bEdit, dbfArticulo ) )}, nil, nLevel, "Cube_Yellow_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Escandallos"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfArticulo )->lKitArt }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "BmpKit" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfArticulo )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Lbl16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código de barras"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| dbSeekInOrd( ( dbfArticulo )->Codigo, "cCodArt", dbfCodebar ) }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Remotecontrol_16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Táctil"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfArticulo )->lIncTcl }
         :nWidth           := 18
         :lHide            := .T.
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Tactil16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Posición táctil"
         :cSortOrder       := "nPosTpv"
         :bEditValue       := {|| if( ( dbfArticulo )->lIncTcl, Trans( ( dbfArticulo )->nPosTpv, "999" ), "" ) }
         :nWidth           := 80
         :lHide            := .T.
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Públicar"
         :cSortOrder       := "lPubInt"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfArticulo )->lPubInt }
         :nWidth           := 20
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "SndInt16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Codigo"
         :bEditValue       := {|| ( dbfArticulo )->Codigo }
         :nWidth           := 100
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Nombre"
         :bEditValue       := {|| ( dbfArticulo )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código familia"
         :cSortOrder       := "cFamCod"
         :bEditValue       := {|| ( dbfArticulo )->Familia }
         :nWidth           := 60
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre familia"
         :bEditValue       := {|| RetFamilia( (dbfArticulo)->Familia, dbfFam ) }
         :nWidth           := 140
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Categoría"
         :cSortOrder       := "cCodCate"
         :bStrData         := {|| RetFld( ( dbfArticulo )->cCodCate, dbfCategoria, "cTipo" ) }
         :bBmpData         := {|| nBitmapTipoCategoria( RetFld( ( dbfArticulo )->cCodCate, dbfCategoria, "cTipo" ) ) }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         AddResourceTipoCategoria( hb_QWith() )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Temporada"
         :cSortOrder       := "cCodTemp"
         :bStrData         := {|| RetFld( ( dbfArticulo )->cCodTemp, dbfTemporada, "cNombre" ) }
         :bBmpData         := {|| nBitmapTipoTemporada( RetFld( ( dbfArticulo )->cCodTemp, dbfTemporada, "cTipo" ) ) }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         AddResourceTipoTemporada( hb_QWith() )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Stocks"
         :bStrData         := {|| Trans( oStock:nTotStockAct( ( dbfArticulo )->Codigo, , , , , lEscandallo( dbfArticulo ), ( dbfArticulo )->nKitStk, ( dbfArticulo )->nCtlStock ), cPicUnd ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + Space( 1 ) +  cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + Space( 1 ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + Space( 1 ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + Space( 1 ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + Space( 1 ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + Space( 1 ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Proveedor"
         :bStrData         := {|| if( !Empty( ( dbfArticulo )->cPrvHab ), AllTrim( ( dbfArticulo )->cPrvHab ) + " - " + RetProvee( ( dbfArticulo )->cPrvHab, dbfProv ), "" ) }
         :nWidth           := 200
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Referencia de proveedor"
         :bStrData         := {|| cRefArtPrv( ( dbfArticulo )->Codigo, ( dbfArticulo )->cPrvHab, dbfArtPrv ) }
         :nWidth           := 100
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código web"
         :cSortOrder       := "cCodWeb"
         :bStrData         := {|| ( dbfArticulo )->cCodWeb }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
         :lHide            := .T.
      end

      if ( oUser():lCostos() )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Costo"
         :bStrData         := {|| if( oUser():lNotCostos(), "", nCosto( nil, dbfArticulo, dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      end

      oWndBrw:cHtmlHelp    := "Articulos"
      oWndBrw:bToolTip     := {|| dlgTooltip( ( dbfArticulo )->Codigo, oWndBrw:oBrw ) }

      if uFieldEmpresa( "lShwPop" )
         oWndBrw:oBrw:bChange    := {|| if( !Empty( oWndBrw ), oWndBrw:CheckExtendInfo(), ) }
      else
         oWndBrw:oBrw:bChange    := {|| oWndBrw:DestroyTooltip() }
         aAdd( oWndBrw:aFastKey, { 32, {|| if( !Empty( oWndBrw ), oWndBrw:ShowExtendInfo(), ) } } )
      end

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()





      oWndBrw:NewAt( "BUS",,, {||( SearchProveedor( oWndBrw ) )}, "Buscar e(x)tendido", "X",,,,, .F. )







      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






        oWndBrw:NewAt( "DUP",,, {||( oWndBrw:RecDup() )}, "(D)uplicar", "D",,, 2,, .F. )






        oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






        oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfArticulo ) )}, "(Z)oom", "Z",,, 8,, .F. )







      oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )







         oWndBrw:NewAt( "DEL",,, {||( TDeleleteObsoletos():New(), oWndBrw:Refresh() )}, "Sin movimientos",,,, 16, oDel, .F. )





        oBtnEur := oWndBrw:NewAt( "BAL_EURO",,, {||( SetPtsEur( oWndBrw, oBtnEur ) )}, "Mo(n)eda", "N",,,,, .F. )






      oWndBrw:NewAt( "INFO",,, {||( BrwVtaComArt( ( dbfArticulo )->Codigo, ( dbfArticulo )->Nombre, dbfDiv, dbfIva, dbfAlmT, dbfArticulo ) )}, "(I)nforme artículo", "I",,, 8,, .F. )






        oWndBrw:NewAt( "IMP",,, {||( TInfArtFam():New( "Listado de artículos" ):Play( .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva, dbfFam, oStock, oWndBrw ) )}, "Lis(t)ado", "T",,, 32,, .F. )






      oWndBrw:NewAt( "Document_Chart_",,, {||( TFastVentasArticulos():New():Play() )}, "Rep(o)rting", "O",,, 32,, .F. )






      oWndBrw:NewAt( "RemoteControl_",,, {||( TArticuloLabelGenerator():Create() )}, "Eti(q)uetas", "Q",,, 32,, .F. )

      if oUser():lAdministrador()






         oWndBrw:NewAt( "CHGPRE",,, {||( ChgPrc( dbfArticulo, oWndBrw ) )}, "(C)ambiar precios", "C",,, 4,, .F. )






         oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmArt(), dbfArticulo ):ChgFields(), oWndBrw:Refresh() )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







            oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmKit(), dbfArtKit ):ChgFields(), oWndBrw:Refresh() )}, "Lineas escandallos",,,, 4, oRpl, .F. )







            oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmVta(), dbfArtVta ):ChgFields(), oWndBrw:Refresh() )}, "Ventas por propiedades",,,, 4, oRpl, .F. )

      end








      oSnd := oWndBrw:NewAt( "Lbl",, "Seleccionar registros para ser enviados", {||ChangelSndDoc()}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "Lbl",,, {||( lSelectAll( oWndBrw, dbfArticulo, dbfFam ) )}, "Todos",,,, 4, oSnd, .F. )







         oWndBrw:NewAt( "Lbl",,, {||( lSelectAll( oWndBrw, dbfArticulo, dbfFam, .F. ) )}, "Ninguno",,,, 4, oSnd, .F. )






      oWndBrw:NewAt( "SNDINT",,, {||( ChangePublicar() )}, "P(u)blicar", "U",,, 4,, .F. )







      oTct := oWndBrw:NewAt( "TACTIL",,, {||( ChangeField( dbfArticulo, "lIncTcl", !( dbfArticulo )->lIncTcl, oWndBrw ) )}, "Táct(i)l", "I",, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "Up",,, {||( ChangePosition( .F. ), oWndBrw:Select() )}, "S(u)bir posición",,,, 32, oTct, .F. )






         oWndBrw:NewAt( "Down",,, {||( ChangePosition( .T. ), oWndBrw:Select() )}, "Ba(j)ar posición",,,, 32, oTct, .F. )

      if ( "VI" $ cParamsMain() )





      oWndBrw:NewAt( "BMPEXPTAR",,, {||( GetDisk() )}, "Infortisa",,,, 4,, .F. )





      oWndBrw:NewAt( "BMPEXPTAR",,, {||( ExcelWirex( dbfArticulo, dbfFam ) )}, "Wirex",,,, 4,, .F. )

      end





      oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,,, 4,, .F. )







         oWndBrw:NewAt( "Clipboard_empty_businessman_",,, {||( PedPrv( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir pedido a proveedor",,,, 4, oRotor, .T. )







         oWndBrw:NewAt( "Document_plain_businessman_",,, {||( AlbPrv( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir albarán de proveedor",,,, 4, oRotor, .T. )







         oWndBrw:NewAt( "Document_businessman_",,, {||( FacPrv( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir factura de proveedor",,,, 4, oRotor, .T. )







         oWndBrw:NewAt( "Notebook_user1_",,, {||( PreCli( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir presupuesto de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Clipboard_empty_user1_",,, {||( PedCli( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir pedido de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Document_plain_user1_",,, {||( AlbCli( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir albarán de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Document_user1_",,, {||( FactCli( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir factura de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Cashier_user1_",,, {||( FrontTpv( nil, oWnd, nil, ( dbfArticulo )->Codigo ) )}, "Añadir tiket de cliente",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Pencil_Package_",,, {||( AppMovAlm( ( dbfArticulo )->Codigo, 1 ) )}, "Añadir movimiento entre almacenes",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Pencil_Package_",,, {||( AppMovAlm( ( dbfArticulo )->Codigo, 2 ) )}, "Añadir movimiento de regularización de almacenes simple",,,, 4, oRotor, .T. )






         oWndBrw:NewAt( "Pencil_Package_",,, {||( AppMovAlm( ( dbfArticulo )->Codigo, 3 ) )}, "Añadir movimiento de regularización de almacenes por objetivo",,,, 4, oRotor, .T. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:End() )}, "(S)alir", "S",,,,, .T. )

      oWndBrw:oActiveFilter:aTField       := aItmArt()
      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt
      oWndBrw:oActiveFilter:cTipFilter    := "20"

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles( .T. ) )},, oWndBrw:bLButtonUp )

      if !Empty( bOnInit )
         Eval( bOnInit )
      end

      bOnInit     := nil

      CursorWE()

   else

      oWndBrw:SetFocus()

   end

RETURN ( .T. )



STATIC FUNCTION EdtRec( aTmp, aGet, dbfArticulo, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oFld
   local oBlock
   local oError
   local oBrwDiv
   local oBrwCtaCom
   local oBrwCodebar
   local aBtnDiv        := Array( 8 )
   local oBrwOfe
   local oBrwImg
   local oBrwStk
   local oBrwPrv
   local oBrwKit
   local bmpImage
   local oSayWeb        := Array(  6 )
   local oSay           := Array( 23 )
   local cSay           := Array( 23 )
   local oFnt
   local aBar           := { "Ean13", "Code39", "Code128" }
   local aBnfSobre      := { "Costo", "Venta" }
   local cDivUse        := cDivEmp()
   local oGetSubCta
   local cGetSubCta     := ""
   local oGetSaldo
   local nGetSaldo      := 0
   local oBrwCtaVta
   local nGetDebe       := 0
   local nGetHaber      := 0
   local oGetCtaCom
   local cGetCtaCom     := ""
   local nDebCom        := 0
   local nHabCom        := 0
   local oGetSalCom
   local nGetSalCom     := 0
   local oGetCtaTrn
   local cGetCtaTrn     := ""
   local oGetSalTrn
   local nGetSalTrn     := 0
   local cSubCtaAnt
   local cSubCtaAntCom
   local oNombre
   local oBtnMoneda
   local oValorPunto
   local oValorTot
   local oValorDto
   local oNom1
   local oNom2
   local oNom3
   local aBtn           := Array( 14 )
   local oBmpCategoria
   local oBmpTemporada
   local cCbxPrecio     := "Ventas"
   local nTotStkAct     := 0
   local nTotStkPdr     := 0
   local nTotStkPde     := 0
   local oBmpGeneral
   local oBmpPrecios
   local oBmpDescripciones
   local oBmpPropiedades
   local oBmpLogistica
   local oBmpStocks
   local oBmpContabilidad
   local oBmpOfertas
   local oBmpEscandallos
   local oBmpWeb
   local oBmpUbicaciones
   local oBmpImagenes
   local aImpComanda    := aTiposImpresoras( dbfTImp )
   local oImpComanda1
   local oImpComanda2
   local cImpComanda1
   local cImpComanda2

   cCatOld              := aTmp[ ( dbfArticulo )->( fieldpos( "cCodCat" ) ) ]
   cPrvOld              := aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ]

   CursorWait()

   if BeginTrans( aTmp, nMode )
      Return .F.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   do case
   case nMode == 1

      aTmp[ ( dbfArticulo )->( fieldpos( "nLabel"    ) ) ]  := 1
      aTmp[ ( dbfArticulo )->( fieldpos( "nCtlStock" ) ) ]  := 1
      aTmp[ ( dbfArticulo )->( fieldpos( "lLote"     ) ) ]  := .F.
      aTmp[ ( dbfArticulo )->( fieldpos( "Codigo"    ) ) ]  := Space( 18 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc"   ) ) ]  := uFieldEmpresa( "lIvaInc" )
      aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva"   ) ) ]  := cDefIva()
      aTmp[ ( dbfArticulo )->( fieldpos( "cCodTemp"  ) ) ]  := uFieldEmpresa( "cDefTem" )

      aTmp[ ( dbfArticulo )->( fieldpos( "nImpCom1"  ) ) ]  := 1
      aTmp[ ( dbfArticulo )->( fieldpos( "nImpCom2"  ) ) ]  := 1

      aTmp[ ( dbfArticulo )->( fieldpos( "nFacCnv"   ) ) ]  := 1

      if nDefBnf( 1 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef1"    ) ) ]  := nDefBnf( 1 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr1"  ) ) ]  := nDefSbr( 1 )
      end

      if nDefBnf( 2 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef2"    ) ) ]  := nDefBnf( 2 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf2"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr2"  ) ) ]  := nDefSbr( 2 )
      end

      if nDefBnf( 3 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef3"    ) ) ]  := nDefBnf( 3 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf3"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr3"  ) ) ]  := nDefSbr( 3 )
      end

      if nDefBnf( 4 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef4"    ) ) ]  := nDefBnf( 4 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf4"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr4"  ) ) ]  := nDefSbr( 4 )
      end

      if nDefBnf( 5 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef5"    ) ) ]  := nDefBnf( 5 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf5"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr5"  ) ) ]  := nDefSbr( 5 )
      end

      if nDefBnf( 6 ) <> 0
      aTmp[ ( dbfArticulo )->( fieldpos( "Benef6"    ) ) ]  := nDefBnf( 6 )
      aTmp[ ( dbfArticulo )->( fieldpos( "lBnf6"     ) ) ]  := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr6"  ) ) ]  := nDefSbr( 6 )
      end

      aTmp[ ( dbfArticulo )->( fieldpos( "nDuracion" ) ) ]  := 0
      aTmp[ ( dbfArticulo )->( fieldpos( "nTipDur" ) ) ]    := 1

   case nMode == 4

      aTmp[ ( dbfArticulo )->( fieldpos( "Codigo"   ) ) ]   := NextKey( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo )
      aTmp[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ]   := uFieldEmpresa( "cDefTem" )
      aTmp[ ( dbfArticulo )->( fieldpos( "CodeBar"  ) ) ]   := ""

   end

   if Empty( aTmp[ ( dbfArticulo )->( fieldpos( "nTipBar" ) ) ] )
      aTmp[ ( dbfArticulo )->( fieldpos( "nTipBar" ) ) ]    := 1
   else
      if aTmp[ ( dbfArticulo )->( fieldpos( "nTipBar" ) ) ] > 3
         aTmp[ ( dbfArticulo )->( fieldpos( "nTipBar" ) ) ] := 3
      end
   end

   cImpComanda1    := if( Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp1" ) ) ] ), "No imprimir", AllTrim( aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp1" ) ) ] ) )
   cImpComanda2    := if( Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp2" ) ) ] ), "No imprimir", AllTrim( aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp2" ) ) ] ) )

   cSay[7]         := aBar[ aTmp[ ( dbfArticulo )->( fieldpos( "nTipBar" ) ) ] ]
   cSay[6]         := ""

   cSay[11]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[12]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[13]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[14]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[15]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[16]        := aBnfSobre[ Max( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]

   cSubCtaAnt      := aTmp[ ( dbfArticulo )->( fieldpos( "cCtaVta" ) ) ]
   cSubCtaAntCom   := aTmp[ ( dbfArticulo )->( fieldpos( "cCtaCom" ) ) ]
   cCodigoFamilia  := aTmp[ ( dbfArticulo )->( fieldpos( "Familia" ) ) ]





   CursorWE()





   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "artículo : " + Rtrim( aTmp[ ( dbfArticulo )->( fieldpos( "Nombre" ) ) ] ), "ARTICULO",, .F.,,,,,, .F.,,,,,, .F., )



























      oFld := TFolder():ReDefine( 300, {"&General", "&Precios", "&Descripciones", "P&ropiedades", "Imagenes", "&Logística", "&Stocks", "Co&ntabilidad", "&Ofertas", "&Escandallos", "&Web", "&Ubicaciones"}, { "ART_1","ART_5","ART_2","ART_20","ART_12","ART_14","ART_3","ART_15","ART_4","ART_6","ART_13","ART_10" }, oDlg,,,,, .F., )










   oBmpGeneral := TBitmap():ReDefine( 500, "Cube_Yellow_Alpha_48",, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )









   aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( CheckValid( aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo, 1, nMode ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:cText( NextKey( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo ) ) )}, nil, "Bot",, )






   aGet[( dbfArticulo )->( fieldpos( "Nombre" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "Nombre" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "Nombre" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ActTitle( nKey, nFlags, Self, nMode, oDlg ) ) }, .F., .F.,,,,,, nil,,, )





   oBrwCodebar                   := IXBrowse():New( oFld:aDialogs[1] )

   oBrwCodebar:bClrSel           := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwCodebar:bClrSelFocus      := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrwCodebar:lRecordSelector   := .F.
   oBrwCodebar:cAlias            := dbfTmpCodebar
   oBrwCodebar:nMarqueeStyle     := 6

   oBrwCodebar:CreateFromResource( 330 )
   oBrwCodebar:lHScroll          := .F.

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Df. Defecto"
         :bStrData               := {|| "" }
         :bEditValue             := {|| ( dbfTmpCodebar )->lDefBar }
         :nWidth                 := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwCodebar:AddCol() )
         :cHeader                := "Código"
         :bEditValue             := {|| ( dbfTmpCodebar )->cCodBar }
         :nWidth                 := 120
      end

      if nMode <> 3
         oBrwCodebar:bLDblClick  := {|| WinEdtRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) }
      end





   aBtn[2] := TButton():ReDefine( 300, {||( WinAppRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





   aBtn[3] := TButton():ReDefine( 310, {||( WinEdtRec( oBrwCodebar, bEdtCod, dbfTmpCodebar, , , aTmp ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )





   aBtn[4] := TButton():ReDefine( 320, {||( WinDelRec( oBrwCodebar, dbfTmpCodebar ) )}, oFld:aDialogs[1],,, .F., {||         ( nMode <> 3 )},,, .F. )




   TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )














   aGet[( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    (  cTiva(   aGet[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ], dbfIva, oSay[2] ), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ]:lValid(), .T. )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwIva( aGet[( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ], nil , oSay[2] ) )}, nil, "LUPA",, )




   oSay[2] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ] := TGetHlp():ReDefine( 272, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!", {||    ( oNewImp:Existe( aGet[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ], oSay[ 10 ], "cNomImp", .T., .T., "0" ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oNewImp:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ], "cCodImp" ) )}, nil, "LUPA",, )




   oSay[10] := TGetHlp():ReDefine( 273, { | u | If( PCount()==0, cSay[10], cSay[10]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( ExpFamilia( aTmp[ ( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ], oSay[ 3 ], aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[ ( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ], oSay[ 3 ] ) )}, nil, "LUPA",, )





   oSay[3] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cSay[3], cSay[3]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )












   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, 361 )

   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:bValid  := {|| cProp( aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:oHelpText ) }
   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:bHelp   := {|| brwProp( aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:oHelpText ) }

   TBtnBmp():ReDefine( 362, "Printer_pencil_16",,,,,{|| brwSelectPropiedad( aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ], @aTmp[ ( dbfArticulo )->( fieldpos( "mValPrp1" ) ) ] ) }, oFld:aDialogs[1], .F., , .F., "Seleccionar propiedades" )








   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:= u ) }, oFld:aDialogs[1],, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, 371 )

   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:bValid  := {|| cProp( aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:oHelpText ) }
   aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:bHelp   := {|| brwProp( aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:oHelpText ) }

   TBtnBmp():ReDefine( 372, "Printer_pencil_16",,,,,{|| brwSelectPropiedad( aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ], @aTmp[ ( dbfArticulo )->( fieldpos( "mValPrp2" ) ) ] ) }, oFld:aDialogs[1], .F., , .F., "Seleccionar propiedades" )



   oNombre := TSay():ReDefine( 888, {|| "Tipo artículo"}, oFld:aDialogs[1],,,, .F.,, .F., .F. )







   aGet[ ( dbfArticulo )->( fieldpos( "CCODTIP" ) ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CCODTIP" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CCODTIP" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( oTipArt:Existe( aGet[ ( dbfArticulo )->( fieldpos( "CCODTIP" ) ) ], oSay[9] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oTipArt:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "CCODTIP" ) ) ] ) )}, nil, "LUPA",, )





   oSay[9] := TGetHlp():ReDefine( 271, { | u | If( PCount()==0, cSay[9], cSay[9]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )







   aGet[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 391 )

   aGet[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ]:bValid := {|| ( aGet[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ], oFabricante:GetAlias() ) ), .T. ) }
   aGet[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ]:bHelp  := {|| oFabricante:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "cCodFab" ) ) ] ) }












   aGet[ ( dbfArticulo )->( fieldpos( "CCODCATE" ) ) ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCODCATE" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCODCATE" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( cCategoria( aGet[ ( dbfArticulo )->( fieldpos( "CCODCATE" ) ) ], dbfCategoria, oSay[ 17 ], oBmpCategoria ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCategoria( aGet[ ( dbfArticulo )->( fieldpos( "CCODCATE" ) ) ], oSay[ 17 ], oBmpCategoria ) )}, nil, "LUPA",, )





   oSay[ 17 ] := TGetHlp():ReDefine( 351, { | u | If( PCount()==0, cSay[ 17 ], cSay[ 17 ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )




   oBmpCategoria := TBitmap():ReDefine( 352,,, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )









   aGet[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ] := TGetHlp():ReDefine( 355, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( cTemporada( aGet[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ], dbfTemporada, aGet[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ]:oHelpText, oBmpTemporada ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwTemporada( aGet[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodTemp" ) ) ]:oHelpText, oBmpTemporada ) )}, nil, "LUPA",, 356 )




   oBmpTemporada := TBitmap():ReDefine( 357,,, oFld:aDialogs[1],,, .F., .F.,,, .F.,,, .T. )




   TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LINCTCL" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LINCTCL" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




   TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CDESTCL" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CDESTCL" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )
















   aGet[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ]:= u ) }, oFld:aDialogs[1],,, {||    ( ChgBmp( cImgArticulo ( aTmp ), bmpImage ) )},,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( cImgArticulo ( aTmp ), bmpImage ) ) }, .F., .F.,,,,, {|Self|( GetBmp( aGet[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ], bmpImage ) )}, nil, "Lupa",, )










   aGet[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ] := TGetHlp():ReDefine( 225, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ]:= u ) }, oFld:aDialogs[1],, "999", {||    ( aTmp[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ] >= 0 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ] <= 999 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      ( 0 )}, {||      ( 99 )},, nil,,, )





   oImpComanda1 := TComboBox():ReDefine( 450, { | u | If( PCount()==0, cImpComanda1, cImpComanda1:= u ) }, aImpComanda, oFld:aDialogs[1],,,,,,, .F., {||        ( nMode <> 3 )},,,,, )





   oImpComanda2 := TComboBox():ReDefine( 460, { | u | If( PCount()==0, cImpComanda2, cImpComanda2:= u ) }, aImpComanda, oFld:aDialogs[1],,,,,,, .F., {||        ( nMode <> 3 )},,,,, )




   TCheckBox():ReDefine( 280, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lTipAcc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lTipAcc" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lAutSer" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lAutSer" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )




   aGet[ ( dbfArticulo )->( fieldpos( "lObs" ) )] := TCheckBox():ReDefine( 139, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lObs" ) )], aTmp[ ( dbfArticulo )->( fieldpos( "lObs" ) )]:= u ) }, oFld:aDialogs[1],,,,,,, .F.,, .F. )





   aGet[ ( dbfArticulo )->( fieldpos( "lNumSer" ) ) ] := TCheckBox():ReDefine( 136, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lNumSer" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lNumSer" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )


   bmpImage             := TImage():ReDefine( 500,, cFileBmpName( cImgArticulo ( aTmp ) ), oDlg,,, .F., .T.,,, .F.,, )

   bmpImage:SetColor( , GetSysColor( 15 ) )
   bmpImage:bLClicked   := {|| ShowImage( bmpImage ) }
   bmpImage:bRClicked   := {|| ShowImage( bmpImage ) }










   oBmpPrecios := TBitmap():ReDefine( 500, "Symbol_euro_Alpha_48",, oFld:aDialogs[2],,, .F., .F.,,, .F.,,, .T. )
















      aGet[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ]:= u ) }, oFld:aDialogs[2],, cPinDiv, {||    (  aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ]:lValid(), aEval( oSayWeb, {|o| if( o <> nil, o:Refresh(), ) } ), .T. )},,,,,, .F., {||     ( !lEscandallo( aTmp ) .AND. nMode <> 3 )}, {|nKey,nFlags,Self| (  ::lValid() ) }, .F., .T.,,,,,, nil,,, )




      oCosto := TSay():ReDefine( 111, {||   nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit )}, oFld:aDialogs[2], cPinDiv,,, .F.,, .F., .F. )








      aBtnDiv[ 5 ] := TButton():ReDefine( 510, {||( CodificacionProveedor( aTmp, nMode ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )






      oCbxPrecio := TComboBox():ReDefine( 610, { | u | If( PCount()==0, cCbxPrecio, cCbxPrecio:= u ) }, { "Ventas", "Alquiler" }, oFld:aDialogs[2],,, {|Self|( StartDlg( aGet, aTmp, nMode, oSay, oDlg, oCosto, aBtnDiv, oFnt, oBtnMoneda, aBtn, bmpImage ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )








   oSay[ 18 ] := TSay():ReDefine( 171, {|| cSay[ 18 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



   oSay[ 19 ] := TSay():ReDefine( 211, {|| cSay[ 19 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



   oSay[ 20 ] := TSay():ReDefine( 251, {|| cSay[ 20 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



   oSay[ 21 ] := TSay():ReDefine( 291, {|| cSay[ 21 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



   oSay[ 22 ] := TSay():ReDefine( 331, {|| cSay[ 22 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )



   oSay[ 23 ] := TSay():ReDefine( 371, {|| cSay[ 23 ]}, oFld:aDialogs[2],,,, .F.,, .F., .F. )








      aGet[ ( dbfArticulo )->( fieldpos( "LBNF1" ) ) ] := TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF1" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )


















      aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 11 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef1"  ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVenta1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva1") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oSayWeb[ 1 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )











      oSay[ 11 ] := TComboBox():ReDefine( 165, { | u | If( PCount()==0, cSay[ 11 ], cSay[ 11 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva1") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta1" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )



















      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 11 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF1"  ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA1") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ], oSayWeb[ 1 ], aTmp[ ( dbfArticulo )->( fieldpos( "lMarAju" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cMarAju" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA1" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 11 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA1") ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF1"  ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP" ) ) ], oSayWeb[ 1 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )









      aGet[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ] := TCheckBox():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 12 ] := TComboBox():ReDefine( 205, { | u | If( PCount()==0, cSay[ 12 ], cSay[ 12 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf2"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva2") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta2" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )


















   aGet[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 12 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2"    ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA2"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 12 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA2"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 12 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF2"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA2"  ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 2 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )









      aGet[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ] := TCheckBox():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 13 ] := TComboBox():ReDefine( 245, { | u | If( PCount()==0, cSay[ 13 ], cSay[ 13 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf3"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva3") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta3" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )


















   aGet[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 13 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3"    ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA3"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 13 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA3"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 13 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF3"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA3"  ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 3 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )









   aGet[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ] := TCheckBox():ReDefine( 270, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 14 ] := TComboBox():ReDefine( 285, { | u | If( PCount()==0, cSay[ 14 ], cSay[ 14 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf4"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva4") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta4" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )


















   aGet[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 14 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4"    ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA4"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ] := TGetHlp():ReDefine( 290, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 14 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA4"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 14 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF4"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA4"  ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 4 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )









   aGet[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ] := TCheckBox():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )











   oSay[ 15 ] := TComboBox():ReDefine( 325, { | u | If( PCount()==0, cSay[ 15 ], cSay[ 15 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf5"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva5") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta5" ) ) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 )},,,,, )


















   aGet[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 15 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5"    ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF5"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA5"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 15 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA5"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF5"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 15 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF5"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA5"  ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 5 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )










   aGet[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ] := TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||        ( nMode <> 3 )}, .F. )











   oSay[ 16 ] := TComboBox():ReDefine( 365, { | u | If( PCount()==0, cSay[ 16 ], cSay[ 16 ]:= u ) }, aBnfSobre, oFld:aDialogs[2],,, {|Self|(  if (  aTmp[ ( dbfArticulo )->( fieldpos( "lBnf6"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ]:lValid(), ), if (  aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva6") ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "pVenta6" ) ) ]:lValid() ) )},,,, .F., {||        ( nMode <> 3 )},,,,, )


















   aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99", {||    ( lCalPre(   oSay[ 16 ]:nAt <= 1, if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6"    ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA6"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ] := TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   oSay[ 16 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA6"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )

















   aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   oSay[ 16 ]:nAt <= 1, aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC"  ) ) ], if( !lEscandallo( aTmp ), aTmp[ ( dbfArticulo )->( fieldpos( "pCosto"  ) ) ], nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit ) ) , aTmp[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "BENEF6"   ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA"  ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "PVENTA6"  ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "CCODIMP"  ) ) ], oSayWeb[ 6 ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )











   aGet[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPpvDiv, {||    ( aGet[ ( dbfArticulo )->( fieldpos( "NPNVIVA1" ) ) ]:cText( ( aTmp[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ] * nIva( dbfIva, aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) )] ) / 100 ) + aTmp[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ] ), .T. )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )







   aGet[ ( dbfArticulo )->( fieldpos( "NPNVIVA1" ) ) ] := TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NPNVIVA1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NPNVIVA1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPpvDiv, {||    ( aGet[ ( dbfArticulo )->( fieldpos( "NPNTVER1" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "NPNVIVA1" ) ) ] / ( 1 + nIva( dbfIva, aTmp[ ( dbfArticulo )->( fieldpos( "TIPOIVA" ) )] ) / 100 ) ), .T. )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "LIVAINC" ) ) ], nMode ) )},, .F., .F.,,,,,, nil,,, )






   aGet[ ( dbfArticulo )->( fieldpos( "PVPREC" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "PVPREC" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "PVPREC" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







   aGet[ ( dbfArticulo )->( fieldpos( "NRENMIN" ) ) ] := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NRENMIN" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NRENMIN" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,, {|| 0}, {|| 100},, nil,,, )




















      aGet[ ( dbfArticulo )->( fieldpos( "pAlq1" ) ) ] := TGetHlp():ReDefine( 620, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq1"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva1") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva1" ) ) ] := TGetHlp():ReDefine( 680, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva1" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva1") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq1"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















         aGet[ ( dbfArticulo )->( fieldpos( "pAlq2" ) ) ] := TGetHlp():ReDefine( 630, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq2"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva2") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ] := TGetHlp():ReDefine( 690, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva2") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq2"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















         aGet[ ( dbfArticulo )->( fieldpos( "pAlq3" ) ) ] := TGetHlp():ReDefine( 640, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq3"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva3") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ] := TGetHlp():ReDefine( 700, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva3") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq3"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















         aGet[ ( dbfArticulo )->( fieldpos( "pAlq4" ) ) ] := TGetHlp():ReDefine( 650, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq4"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva4") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ] := TGetHlp():ReDefine( 710, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva4") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq4"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















         aGet[ ( dbfArticulo )->( fieldpos( "pAlq5" ) ) ] := TGetHlp():ReDefine( 660, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq5"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva5") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ] := TGetHlp():ReDefine( 720, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva5") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq5"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















         aGet[ ( dbfArticulo )->( fieldpos( "pAlq6" ) ) ] := TGetHlp():ReDefine( 670, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlq6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlq6"   ) ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva6") ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )
















      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ] := TGetHlp():ReDefine( 730, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ]:= u ) }, oFld:aDialogs[2],, cPouDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "pAlqIva6") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "pAlq6"   ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .F.,,,,,, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt1" ) ) ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt1" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt2" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt2" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt3" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt3" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt4" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt4" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt5" ) ) ] := TGetHlp():ReDefine( 450, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt5" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )













      aGet[ ( dbfArticulo )->( fieldpos( "nDtoArt6" ) ) ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoArt6" ) ) ]:= u ) }, oFld:aDialogs[2],, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )





      aGet[ ( dbfArticulo )->( fieldpos( "lMarAju" ) ) ] := TCheckBox():ReDefine( 470, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lMarAju" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lMarAju" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





















      aGet[ ( dbfArticulo )->( fieldpos( "cMarAju" ) ) ] := TComboBox():ReDefine( 480, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cMarAju" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cMarAju" ) ) ]:= u ) }, {  "#,#0", "#,#5", "#,10", "#,20", "#,50", "#,90", "#,95", "#,99", "#,00", "1,00", "5,00", "9,00", "10,00", "20,00", "50,00", "100,00" }, oFld:aDialogs[2],,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "lMarAju" ) ) ] )},,,,, )









      oBmpDescripciones := TBitmap():ReDefine( 500, "Document_Text_Alpha_48",, oFld:aDialogs[3],,, .F., .F.,,, .F.,,, .T. )




      TMultiGet():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Descrip" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Descrip" ) ) ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||         ( nMode <> 3 )}, .F.,, )





      aGet[ ( dbfArticulo )->( fieldpos( "mComent" ) ) ] := TMultiGet():ReDefine( 370, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "mComent" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "mComent" ) ) ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )




      TCheckBox():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lMosCom" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lMosCom" ) ) ]:= u ) }, oFld:aDialogs[3],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )









      aGet[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ] := TGetHlp():ReDefine( 195, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ] := TGetHlp():ReDefine( 196, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oBmpPropiedades := TBitmap():ReDefine( 510, "Bookmark_Silver_Alpha_48",, oFld:aDialogs[4],,, .F., .F.,,, .F.,,, .T. )

      oBrwDiv                 := IXBrowse():New( oFld:aDialogs[4] )

      oBrwDiv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDiv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDiv:cAlias          := dbfTmpVta
      oBrwDiv:nMarqueeStyle   := 5
      oBrwDiv:cName           := "Articulos.Propiedades"

         with object ( oBrwDiv:AddCol() )
            :cHeader          := "Prop. 1"
            :bEditValue       := {|| ( dbfTmpVta )->cValPr1 }
            :nWidth           := 40
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := "Prop. 2"
            :bEditValue       := {|| ( dbfTmpVta )->cValPr2 }
            :nWidth           := 40
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := "Costo"
            :bEditValue       := {|| ( dbfTmpVta )->nPreCom }
            :nWidth           := 100
            :cEditPicture     := cPinDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta1 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva1 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta2 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva2 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta3 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva3 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta4 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva4 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta5 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva5 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
            :bEditValue       := {|| ( dbfTmpVta )->nPreVta6 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwDiv:AddCol() )
            :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + Space( 1 ) + "IVA"
            :bEditValue       := {|| ( dbfTmpVta )->nPreIva6 }
            :nWidth           := 100
            :cEditPicture     := cPouDiv
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         if nMode <> 3
            oBrwDiv:bLDblClick   := {|| WinEdtRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) }
         end

         oBrwDiv:CreateFromResource( 430 )





   aBtnDiv[ 1 ] := TButton():ReDefine( 500, {||( WinAppRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( !Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ] ) .AND. nMode <> 3 )},,, .F. )





   aBtnDiv[ 2 ] := TButton():ReDefine( 501, {||( WinEdtRec( oBrwDiv, bEdtVta, dbfTmpVta, , , aTmp ) )}, oFld:aDialogs[4],,, .F., {||     ( !Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ] ) .AND. nMode <> 3 )},,, .F. )





   aBtnDiv[ 3 ] := TButton():ReDefine( 502, {||( dbDelRec( oBrwDiv, dbfTmpVta ) )}, oFld:aDialogs[4],,, .F., {||     ( !Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ] ) .AND. nMode <> 3 )},,, .F. )









   oBmpLogistica := TBitmap():ReDefine( 500, "Truck_Red_Alpha_48",, oFld:aDialogs[6],,, .F., .F.,,, .F.,,, .T. )







   aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ] := TGetHlp():ReDefine( 420, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 425 )

      aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:bValid := {|| ( aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ], oFraPub:GetAlias() ) ), .T. ) }
      aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:bHelp  := {|| oFraPub:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ] ) }











   aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, 431 )

      aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ]:bValid   := {|| oSeccion:Existe( aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ]:oHelpText, "cDesSec", .T., .T., "0" ) }
      aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ]:bHelp    := {|| oSeccion:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "cCodSec" ) ) ] ) }




   TCheckBox():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LLOTE" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LLOTE" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cLote" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cLote" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "lLote" ) ) ] )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfArticulo )->( fieldpos( "NDURACION" ) ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NDURACION" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NDURACION" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      100},, nil,,, )






   aGet[ ( dbfArticulo )->( fieldpos( "NTIPDUR" ) ) ] := TComboBox():ReDefine( 251, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NTIPDUR" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NTIPDUR" ) ) ]:= u ) }, { "Dia (s)", "Mes (es)", "Año (s)" }, oFld:aDialogs[6],,,,,,, .F., {||     ( nMode <> 3 )},,,,, )






   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NCAJENT" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NCAJENT" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NUNICAJA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NUNICAJA" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )










   aGet[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ]:= u ) }, oFld:aDialogs[6],, "@!", {||    ( oUndMedicion:Existe( aGet[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ]:oHelpText, "cNombre" ), lValidUndMedicion( aTmp, aGet ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( oUndMedicion:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ] ) )}, nil, "LUPA",, 254 )








   aGet[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ]:= u ) }, oFld:aDialogs[6],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 141, )








   aGet[( dbfArticulo )->( fieldpos( "NALTART" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NALTART" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NALTART" ) ) ]:= u ) }, oFld:aDialogs[6],, MasUnd(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 151, )








   aGet[( dbfArticulo )->( fieldpos( "NANCART" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NANCART" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NANCART" ) ) ]:= u ) }, oFld:aDialogs[6],, MasUnd(),,,,,,, .F., {||    ( nMode <> 3 )},, .F., .T.,,,,,, nil,, 161, )






   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NPESOKG" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NPESOKG" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CUNDDIM" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CUNDDIM" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NVOLUMEN" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NVOLUMEN" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CVOLUMEN" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CVOLUMEN" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )














   TGetHlp():ReDefine( 300, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NLNGCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NLNGCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CUNDCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CUNDCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 320, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NALTCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NALTCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NANCCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NANCCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NPESCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NPESCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 350, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CCAJPES" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CCAJPES" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






   TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NVOLCAJ" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NVOLCAJ" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 370, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CCAJVOL" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CCAJVOL" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







   TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NCAJPLT" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NCAJPLT" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NBASPLT" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NBASPLT" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TGetHlp():ReDefine( 400, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NALTPLT" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NALTPLT" ) ) ]:= u ) }, oFld:aDialogs[6],, cPicUnd,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )




   TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CUNDPLT" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CUNDPLT" ) ) ]:= u ) }, oFld:aDialogs[6],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lFacCnv" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lFacCnv" ) ) ]:= u ) }, oFld:aDialogs[6],, {||( ChangeFactorConversion( aTmp, aGet ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )






   aGet[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ]:= u ) }, oFld:aDialogs[6],, "@E 999,999.999999",,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "lFacCnv" ) ) ] )},, .F., .F.,,,,,, nil,,, )










   oBmpStocks := TBitmap():ReDefine( 500, "Package_Alpha_48",, oFld:aDialogs[7],,, .F., .F.,,, .F.,,, .T. )




   TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ]:= u ) }, oFld:aDialogs[7],, { 101, 102, 103 },,,,, .F., {||     ( nMode <> 3 )}, )








   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NMINIMO" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NMINIMO" ) ) ]:= u ) }, oFld:aDialogs[7],, cPicUnd, {||    aTmp[( dbfArticulo )->( fieldpos( "NMINIMO" ) ) ] >= 0}, "N/W*",,,,, .F., {||     ( aTmp[( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ] <= 1 .AND. nMode <> 3 )},, .F., .T.,,, {|| 0},,, nil,,, )








   TGetHlp():ReDefine( 115, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "nMaximo" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "nMaximo" ) ) ]:= u ) }, oFld:aDialogs[7],, cPicUnd, {||    aTmp[( dbfArticulo )->( fieldpos( "nMaximo" ) ) ] >= 0}, "N/W*",,,,, .F., {||     ( aTmp[( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ] <= 1 .AND. nMode <> 3 )},, .F., .T.,,, {|| 0},,, nil,,, )








   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NCNTACT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NCNTACT" ) ) ]:= u ) }, oFld:aDialogs[7],, "@E 999,999,999,999", {||    aTmp[ ( dbfArticulo )->( fieldpos( "NCNTACT" ) ) ] >= 0}, "N/W*",,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .T.,,, {|| 1},,, nil,,, )




   TCheckBox():ReDefine( 127, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LMSGMOV" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LMSGMOV" ) ) ]:= u ) }, oFld:aDialogs[7],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 126, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LMSGVTA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LMSGVTA" ) ) ]:= u ) }, oFld:aDialogs[7],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 128, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LMSGSER" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LMSGSER" ) ) ]:= u ) }, oFld:aDialogs[7],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




   TCheckBox():ReDefine( 125, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LNOTVTA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LNOTVTA" ) ) ]:= u ) }, oFld:aDialogs[7],,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





   oBrwStk                 := IXBrowse():New( oFld:aDialogs[7] )

   oBrwStk:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwStk:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwStk:lFooter         := .T.
   oBrwStk:lHScroll        := .F.
   oBrwStk:lRecordSelector := .F.
   oBrwStk:nMarqueeStyle   := 5
   oBrwStk:cName           := "Artículo.Stocks"

   oBrwStk:bRClicked       := {| nRow, nCol, nFlags | oBrwStk:RButtonDown( nRow, nCol, nFlags ) }

   oBrwStk:SetArray( oStock:aStocks, , , .F. )

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Código"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cCodigoAlmacen, "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Almacén"
         :nWidth              := 120
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), RetAlmacen( oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cCodigoAlmacen, dbfAlmT ), "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Prop. 1"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cValorPropiedad1, "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Prop. 2"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cValorPropiedad2, "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Lote"
         :nWidth              := 60
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cLote, "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Num. serie"
         :nWidth              := 60
         :bStrData            := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:cNumeroSerie, "" ) }
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Unidades"
         :nWidth              := 80
         :bEditValue          := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:nUnidades, 0 ) }
         :bFooter             := {|| nStockUnidades( oBrwStk ) }
         :cEditPicture        := MasUnd()
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Pdt. recibir"
         :bEditValue          := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:nPendientesRecibir, 0 ) }
         :bFooter             := {|| nStockPendiente( oBrwStk ) }
         :nWidth              := 70
         :cEditPicture        := cPicUnd
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

      with object ( oBrwStk:AddCol() )
         :cHeader             := "Pdt. entregar"
         :bEditValue          := {|| if( !Empty( oBrwStk:aArrayData ), oBrwStk:aArrayData[ oBrwStk:nArrayAt ]:nPendientesEntregar, 0 ) }
         :bFooter             := {|| nStockEntregar( oBrwStk ) }
         :nWidth              := 70
         :cEditPicture        := cPicUnd
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

   oBrwStk:CreateFromResource( 130 )







   aGet[( dbfArticulo )->( fieldpos( "CCODTNK" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "CCODTNK" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "CCODTNK" ) ) ]:= u ) }, oFld:aDialogs[7],,, {||    ( oTankes:Existe( aGet[ ( dbfArticulo )->( fieldpos( "CCODTNK" ) ) ], oSay[ 8 ], "cNomTnk", .T., .T., "0" ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "NCTLSTOCK" ) ) ] == 2 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( oTankes:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "CCODTNK" ) ) ] ) )}, nil, "LUPA",, )






   oSay[8] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cSay[8], cSay[8]:= u ) }, oFld:aDialogs[7],,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )




   TCheckBox():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LCOMBUS" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LCOMBUS" ) ) ]:= u ) }, oFld:aDialogs[7],,,,,,, .F., {||         ( nMode <> 3 )}, .F. )









   oBmpContabilidad := TBitmap():ReDefine( 500, "Folder2_red_Alpha_48",, oFld:aDialogs[8],,, .F., .F.,,, .F.,,, .T. )










   aGet[ ( dbfArticulo )->( fieldpos( "GRPVENT" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "GRPVENT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "GRPVENT" ) ) ]:= u ) }, oFld:aDialogs[8],, ( Replicate( "9", 9 ) ), {||    ( cGrpVenta( aGet[ ( dbfArticulo )->( fieldpos( "GRPVENT" ) ) ], , oSay[1] ) )}, "N/W*",,,,, .F., {||     ( !empty( cRutCnt() ) .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwGrpVenta( aGet[ ( dbfArticulo )->( fieldpos( "GRPVENT" ) ) ], , oSay[1] ) )}, nil, "LUPA",, )






   oSay[1] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSay[1], cSay[1]:= u ) }, oFld:aDialogs[8],,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )









   aGet[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ]:= u ) }, oFld:aDialogs[8],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuenta( aGet, aTmp, @nGetDebe, @nGetHaber, oGetSaldo, oGetSubCta, cSubCtaAnt, oBrwCtaVta, dbfTmpSubCta ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ], oGetSubCta ) )}, nil, "LUPA",, )





   oGetSubCta := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oFld:aDialogs[8],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   oGetSaldo := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, nGetSaldo, nGetSaldo:= u ) }, oFld:aDialogs[8],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   oBrwCtaVta                 := IXBrowse():New( oFld:aDialogs[8] )

   oBrwCtaVta:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwCtaVta:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwCtaVta:lFooter         := .T.

   oBrwCtaVta:cAlias          := dbfTmpSubCta

   oBrwCtaVta:nMarqueeStyle   := 5
   oBrwCtaVta:cName           := "Artículo.Contabilidad cuenta de ventas"

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Asiento"
      :bEditValue       := {|| Trans( ( dbfTmpSubCta )->nAsiento, "9999999" ) }
      :nWidth           := 40
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Fecha"
      :bEditValue       := {|| Dtoc( ( dbfTmpSubCta )->dFecha ) }
      :nWidth           := 80
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Concepto"
      :bEditValue       := {|| ( dbfTmpSubCta )->cConcepto }
      :nWidth           := 180
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Debe"
      :bEditValue       := {|| ( dbfTmpSubCta )->nDebe }
      :bFooter          := {|| nGetDebe }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Haber"
      :bEditValue       := {|| ( dbfTmpSubCta )->nHaber }
      :bFooter          := {|| nGetHaber }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Concepto"
      :bEditValue       := {|| ( dbfTmpSubCta )->cDeparta }
      :nWidth           := 80
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Factura"
      :bEditValue       := {|| Trans( ( dbfTmpSubCta )->nFactura, "9999999" ) }
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := "Base"
      :bEditValue       := {|| ( dbfTmpSubCta )->nBase }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaVta:AddCol() )
      :cHeader          := cImp()
      :bEditValue       := {|| ( dbfTmpSubCta )->nIva }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   oBrwCtaVta:bRClicked    := {| nRow, nCol, nFlags | oBrwCtaVta:RButtonDown( nRow, nCol, nFlags ) }

   oBrwCtaVta:CreateFromResource( 120 )









   aGet[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ]:= u ) }, oFld:aDialogs[8],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( lValidaSubcuentaCompras( aGet, aTmp, @nDebCom, @nHabCom, oGetSalCom, oGetCtaCom, cSubCtaAntCom, oBrwCtaCom, dbfTmpSubCom ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ], oGetCtaCom ) )}, nil, "LUPA",, )




   oGetCtaCom := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cGetCtaCom, cGetCtaCom:= u ) }, oFld:aDialogs[8],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   oGetSalCom := TGetHlp():ReDefine( 132, { | u | If( PCount()==0, nGetSalCom, nGetSalCom:= u ) }, oFld:aDialogs[8],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )

   oBrwCtaCom                 := IXBrowse():New( oFld:aDialogs[8] )

   oBrwCtaCom:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwCtaCom:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwCtaCom:lFooter         := .T.
   oBrwCtaCom:cAlias          := dbfTmpSubCom
   oBrwCtaCom:nMarqueeStyle   := 5
   oBrwCtaCom:cName           := "Artículo.Contabilidad cuenta de compras"

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Asiento"
      :bEditValue       := {|| Trans( ( dbfTmpSubCom )->nAsiento, "9999999" ) }
      :nWidth           := 40
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Fecha"
      :bEditValue       := {|| Dtoc( ( dbfTmpSubCom )->dFecha ) }
      :nWidth           := 80
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Concepto"
      :bEditValue       := {|| ( dbfTmpSubCom )->cConcepto }
      :nWidth           := 180
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Debe"
      :bEditValue       := {|| ( dbfTmpSubCom )->nDebe }
      :bFooter          := {|| nDebCom }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Haber"
      :bEditValue       := {|| ( dbfTmpSubCom )->nHaber }
      :bFooter          := {|| nHabCom }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Concepto"
      :bEditValue       := {|| ( dbfTmpSubCom )->cDeparta }
      :nWidth           := 80
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Factura"
      :bEditValue       := {|| Trans( ( dbfTmpSubCom )->nFactura, "9999999" ) }
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := "Base"
      :bEditValue       := {|| ( dbfTmpSubCom )->nBase }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwCtaCom:AddCol() )
      :cHeader          := cImp()
      :bEditValue       := {|| ( dbfTmpSubCom )->nIva }
      :nWidth           := 80
      :cEditPicture     := cPorDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   oBrwCtaCom:bRClicked    := {| nRow, nCol, nFlags | oBrwCtaCom:RButtonDown( nRow, nCol, nFlags ) }

   oBrwCtaCom:CreateFromResource( 140 )

















   aGet[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ]:= u ) }, oFld:aDialogs[8],, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ], {  aTmp[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NOMBRE"  ) ) ] }, oGetCtaTrn, nil, nil, nil, nil, oGetSalTrn ) )},,,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTATRN" ) ) ], oGetCtaTrn ) )}, nil, "LUPA",, )




   oGetCtaTrn := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cGetCtaTrn, cGetCtaTrn:= u ) }, oFld:aDialogs[8],,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )





   oGetSalTrn := TGetHlp():ReDefine( 152, { | u | If( PCount()==0, nGetSalTrn, nGetSalTrn:= u ) }, oFld:aDialogs[8],, cPorDiv,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )










   oBmpOfertas := TBitmap():ReDefine( 510, "Star2_Red_Alpha_48",, oFld:aDialogs[9],,, .F., .F.,,, .F.,,, .T. )

   oBrwOfe                 := IXBrowse():New( oFld:aDialogs[9] )

   oBrwOfe:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwOfe:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwOfe:cAlias          := dbfTmpOfe
   oBrwOfe:nMarqueeStyle   := 5
   oBrwOfe:cName           := "Artículo.Ofertas"

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Oferta"
      :bEditValue       := {|| ( dbfTmpOfe )->cDesOfe }
      :nWidth           := 140
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Inicio"
      :bEditValue       := {|| Dtoc( ( dbfTmpOfe )->dIniOfe ) }
      :nWidth           := 80
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Fin"
      :bEditValue       := {|| Dtoc( ( dbfTmpOfe )->dFinOfe ) }
      :nWidth           := 80
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 1"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe1 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 1 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva1 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 2"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe2 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 2 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva2 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 3"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe3 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 3 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva3 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 4"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe4 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 4 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva4 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 5"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe5 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 5 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva5 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 6"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreOfe6 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Precio 6 " + "IVA"
      :bEditValue       := {|| ( dbfTmpOfe )->nPreIva6 }
      :nWidth           := 90
      :cEditPicture     := cPouDiv
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Unidades"
      :bEditValue       := {|| ( dbfTmpOfe )->nMaxOfe }
      :nWidth           := 60
      :cEditPicture     := "@E 999,999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwOfe:AddCol() )
      :cHeader          := "Tipo"
      :bEditValue       := {|| Trans( ( dbfTmpOfe )->nUnvOfe, "@E 999" ) + " x " + Trans( ( dbfTmpOfe )->nUncOfe, "@E 999" ) }
      :nWidth           := 40
   end

   if nMode <> 3
      oBrwOfe:bLDblClick  := {|| EdtOfeArt( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) }
   end

   oBrwOfe:bRClicked    := {| nRow, nCol, nFlags | oBrwOfe:RButtonDown( nRow, nCol, nFlags ) }

   oBrwOfe:CreateFromResource( 100 )





   aBtn[8] := TButton():ReDefine( 500, {||( AppOfeArt( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[9],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[9] := TButton():ReDefine( 501, {||( EdtOfeArt( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[9],,, .F., {||     ( nMode <> 3 )},,, .F. )





   aBtn[10] := TButton():ReDefine( 502, {||( DelOfeArt( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], oBrwOfe, dbfTmpOfe ) )}, oFld:aDialogs[9],,, .F., {||     ( nMode <> 3 )},,, .F. )










   oBmpEscandallos := TBitmap():ReDefine( 510, "Components_Alpha_48",, oFld:aDialogs[10],,, .F., .F.,,, .F.,,, .T. )





   TCheckBox():ReDefine( 136, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ]:= u ) }, oFld:aDialogs[10],, {||( ChgKit( aTmp, aGet, oCosto ) )},,,,, .F., {||     ( nMode <> 3 )}, .F. )









   TCheckBox():ReDefine( 135, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ]:= u ) }, oFld:aDialogs[10],, {||(  ChgKit( aTmp, aGet, oCosto ), if( aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ], (  aGet[ ( dbfArticulo )->( fieldpos( "nKitImp" ) ) ]:Set( 1 ), aGet[ ( dbfArticulo )->( fieldpos( "nKitStk" ) ) ]:Set( 1 ), aGet[ ( dbfArticulo )->( fieldpos( "nKitPrc" ) ) ]:Set( 1 ) ), ) )},,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ] .AND. nMode <> 3 )}, .F. )






   aGet[ ( dbfArticulo )->( fieldpos( "nKitImp" ) ) ] := TComboBox():ReDefine( 137, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nKitImp" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nKitImp" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[10],,,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ] .AND. !aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ] .AND. nMode <> 3 )},,,,, )






   aGet[ ( dbfArticulo )->( fieldpos( "nKitStk" ) ) ] := TComboBox():ReDefine( 138, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nKitStk" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nKitStk" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[10],,,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ] .AND. !aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ] .AND. nMode <> 3 )},,,,, )






   aGet[ ( dbfArticulo )->( fieldpos( "nKitPrc" ) ) ] := TComboBox():ReDefine( 139, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nKitPrc" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nKitPrc" ) ) ]:= u ) }, { "Todos", "Compuesto", "Componentes" }, oFld:aDialogs[10],,,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ] .AND. !aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ].AND. nMode <> 3 )},,,,, )





   aBtn[11] := TButton():ReDefine( 500, {||( WinAppRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[12] := TButton():ReDefine( 501, {||( WinEdtRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   aBtn[13] := TButton():ReDefine( 502, {||( dbDelRec( oBrwKit, dbfTmpKit ), Eval( oBrwKit:bValid ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   oBtnMoneda := TButton():ReDefine( 503, {||(  if( cDivUse == cDivEmp(), cDivUse := cDivChg(), cDivUse := cDivEmp() ), oBrwKit:Refresh() )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 504, {||( dbSwapUp( dbfTmpKit, oBrwKit ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )





   TButton():ReDefine( 505, {||( dbSwapDown( dbfTmpKit, oBrwKit ) )}, oFld:aDialogs[10],,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "LKITART" ) ) ] )},,, .F. )

   oBrwKit                 := IXBrowse():New( oFld:aDialogs[10] )

   oBrwKit:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwKit:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwKit:lFooter         := .T.
   oBrwKit:cAlias          := dbfTmpKit
   oBrwKit:nMarqueeStyle   := 5
   oBrwKit:cName           := "Artículo.Kits"

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Código"
      :bEditValue       := {|| ( dbfTmpKit )->cRefKit }
      :nWidth           := 80
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Artículo"
      :bEditValue       := {|| ( dbfTmpKit )->cDesKit }
      :nWidth           := 160
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Unidades"
      :bEditValue       := {|| ( dbfTmpKit )->nUndKit }
      :nWidth           := 70
      :cEditPicture     := "@E 999,999.999999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Ud"
      :bEditValue       := {|| Upper( ( dbfTmpKit )->cUnidad ) }
      :nWidth           := 30
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Factor"
      :bEditValue       := {|| nFactorConversion( ( dbfTmpKit )->cRefKit, dbfArticulo ) }
      :nWidth           := 70
      :cEditPicture     := "@E 999,999.999999"
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Costo"
      :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, dbfArticulo, dbfArtKit, .F., cDivUse, dbfDiv ) }
      :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Total"
      :bEditValue       := {|| nCosto( ( dbfTmpKit )->cRefKit, dbfArticulo, dbfArtKit, .F., cDivUse, dbfDiv ) * nFactorConversion( ( dbfTmpKit )->cRefKit, dbfArticulo ) * ( dbfTmpKit )->nUndKit }
      :bFooter          := {|| nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit, .T., cDivUse, dbfDiv ) }
      :cEditPicture     := cPinDiv( cDivEmp(), dbfDiv )
      :nWidth           := 80
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
      :nFootStrAlign    := 1
   end

   with object ( oBrwKit:AddCol() )
      :cHeader          := "Div"
      :bEditValue       := {|| cSimDiv( cDivUse, dbfDiv ) }
      :nWidth           := 30
   end

   if nMode <> 3
      oBrwKit:bLDblClick  := {|| WinEdtRec( oBrwKit, bEdtKit, dbfTmpKit, , , aTmp ),  Eval( oBrwKit:bValid ) }
   end







      oBrwKit:bValid      := {|| oCosto:Refresh(), aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ]:lValid() }

   oBrwKit:bRClicked       := {| nRow, nCol, nFlags | oBrwKit:RButtonDown( nRow, nCol, nFlags ) }

   oBrwKit:CreateFromResource( 180 )










   oBmpWeb := TBitmap():ReDefine( 500, "Earth2_Alpha_48",, oFld:aDialogs[11],,, .F., .F.,,, .F.,,, .T. )





   TCheckBox():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "LPUBINT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "LPUBINT" ) ) ]:= u ) }, oFld:aDialogs[11],, {||( ChangePublicar( aTmp ) )},,,,, .F., {||         ( nMode <> 3 )}, .F. )


















   aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:= u ) }, oFld:aDialogs[11],, cPouDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )












   aGet[ ( dbfArticulo )->( fieldpos( "nDtoInt1" ) ) ] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nDtoInt1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoInt1" ) ) ]:= u ) }, oFld:aDialogs[11],, "@E 999.99",,,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lPubInt" ) ) ] .AND. nMode <> 3 )}, {|nKey,nFlags,Self| ( CalDtoWeb(   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaWeb"  ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva"  ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nDtoInt1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "nImpInt1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "nImpIva1" ) ) ] ) ) }, .F., .T.,,, {|| 0}, {|| 100},, nil,,, )















   aGet[ ( dbfArticulo )->( fieldpos( "nImpInt1" ) ) ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nImpInt1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nImpInt1" ) ) ]:= u ) }, oFld:aDialogs[11],, cPwbDiv, {||    ( CalBnfPts(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "nImpInt1") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "nImpIva1") ) ], nDwbDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( !aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ] .AND. aTmp[ ( dbfArticulo )->( fieldpos( "lPubInt" ) ) ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )















   aGet[ ( dbfArticulo )->( fieldpos( "nImpIva1" ) ) ] := TGetHlp():ReDefine( 123, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nImpIva1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nImpIva1" ) ) ]:= u ) }, oFld:aDialogs[11],, cPwbDiv, {||    ( CalBnfIva(   .F., aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], 0, aTmp[ ( dbfArticulo )->( fieldpos( "nImpIva1") ) ], nil, aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "nImpInt1") ) ], nDwbDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ] .AND. aTmp[ ( dbfArticulo )->( fieldpos( "lPubInt" ) ) ] .AND. nMode <> 3 )},, .F., .F.,,,,,, nil,,, )











   aGet[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ]:= u ) }, oFld:aDialogs[11],, "9", {||    ( ( aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] >= 1 .AND. aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] <= 6 ), ChangeTarWeb( aGet, aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      1}, {||      6},, nil,,, )

   aGet[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ]:bChange  := {|| ChangeTarWeb( aGet, aTmp ) }




   TRadMenu():Redefine( { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT" ) ) ]:= u ) }, oFld:aDialogs[11],, { 180, 181, 182 },,,,, .F., {||     ( nMode <> 3 )}, )







   TGetHlp():ReDefine( 183, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT1" ) ) ]:= u ) }, oFld:aDialogs[11],, "@E 99",, "N/W*",,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT" ) ) ] == 3 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TGetHlp():ReDefine( 184, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT2" ) ) ]:= u ) }, oFld:aDialogs[11],, "@E 99",, "N/W*",,,,, .F., {||     ( aTmp[ ( dbfArticulo )->( fieldpos( "NINFENT" ) ) ] == 3 .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NMESGRT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NMESGRT" ) ) ]:= u ) }, oFld:aDialogs[11],, "@E 99",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )







   TMultiGet():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "MDESTEC" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "MDESTEC" ) ) ]:= u ) }, oFld:aDialogs[11],,,,,,, .F., {||     ( nMode <> 3 )}, .F.,, )














   TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "cCodWeb" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "cCodWeb" ) ) ]:= u ) }, oFld:aDialogs[11],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









   oBmpubicaciones := TBitmap():ReDefine( 500, "Forklift_Alpha_48",, oFld:aDialogs[12],,, .F., .F.,,, .F.,,, .T. )




   aGet[ ( dbfArticulo )->( fieldpos( "dFecVta" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "dFecVta" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "dFecVta" ) ) ]:= u ) }, oFld:aDialogs[12],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfArticulo )->( fieldpos( "dFinVta" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "dFinVta" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "dFinVta" ) ) ]:= u ) }, oFld:aDialogs[12],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )













   aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbica( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbicacion( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ]:oHelpText ) )}, nil, "LUPA",, 511 )









   aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ] := TGetHlp():ReDefine( 520, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbica( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbicacion( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ]:oHelpText ) )}, nil, "LUPA",, 521 )









   aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbica( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ]:oHelpText ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbicacion( aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ], dbfUbicaT, aGet[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ]:oHelpText ) )}, nil, "LUPA",, 531 )









   aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbicaLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ], dbfUbicaL ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbiLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI1" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI1" ) ) ], dbfUbicaL ) )}, nil, "LUPA",, 541 )









   aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ] := TGetHlp():ReDefine( 550, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbicaLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ], dbfUbicaL ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbiLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI2" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI2" ) ) ], dbfUbicaL ) )}, nil, "LUPA",, 551 )









   aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ] := TGetHlp():ReDefine( 560, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ]:= u ) }, oFld:aDialogs[12],,, {||    ( cUbicaLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ], dbfUbicaL ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwUbiLin( aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ], aGet[ ( dbfArticulo )->( fieldpos( "CVALUBI3" ) ) ]:oHelpText, aTmp[ ( dbfArticulo )->( fieldpos( "CCODUBI3" ) ) ], dbfUbicaL ) )}, nil, "LUPA",, 561 )










   oBmpImagenes := TBitmap():ReDefine( 510, "Photo_landscape2_48_alpha",, oFld:aDialogs[5],,, .F., .F.,,, .F.,,, .T. )





   TButton():ReDefine( 500, {||( WinAppRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 501, {||( WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 502, {||( WinDelRec( oBrwImg, dbfTmpImg ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 503, {||( dbSwapUp( dbfTmpImg, oBrwImg ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 504, {||( dbSwapDown( dbfTmpImg, oBrwImg ) )}, oFld:aDialogs[5],,, .F., {||     ( nMode <> 3 )},,, .F. )

   oBrwImg                 := IXBrowse():New( oFld:aDialogs[5] )

   oBrwImg:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwImg:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwImg:cAlias          := dbfTmpImg
   oBrwImg:nMarqueeStyle   := 6
   oBrwImg:cName           := "Artículo.Imagenes"

   with object ( oBrwImg:AddCol() )
      :cHeader             := "Seleccionada"
      :bStrData            := {|| "" }
      :bEditValue          := {|| ( dbfTmpImg )->lDefImg }
      :nWidth              := 20
      :SetCheck( { "Sel16", "Nil16" } )
   end

   with object ( oBrwImg:AddCol() )
      :cHeader             := "Imagen"
      :bEditValue          := {|| ( dbfTmpImg )->cImgArt }
      :nWidth              := 400
   end

   with object ( oBrwImg:AddCol() )
      :cHeader             := "Nombre"
      :bEditValue          := {|| ( dbfTmpImg )->cNbrArt }
      :nWidth              := 400
   end

   if nMode <> 3
      oBrwImg:bLDblClick   := {|| WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) }
   end

   oBrwImg:bRClicked       := {| nRow, nCol, nFlags | oBrwImg:RButtonDown( nRow, nCol, nFlags ) }

   oBrwImg:CreateFromResource( 100 )










   aBtn[1] := TButton():ReDefine( 1, {||( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode, oImpComanda1, oImpComanda2, aImpComanda ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3

      oFld:aDialogs[1]:AddFastKey( 113, {|| aBtn[ 2 ]:Click() } )
      oFld:aDialogs[1]:AddFastKey( 114, {|| aBtn[ 3 ]:Click() } )
      oFld:aDialogs[1]:AddFastKey( 115, {|| aBtn[ 4 ]:Click() } )

      oFld:aDialogs[9]:AddFastKey( 113, {|| aBtn[ 8 ]:Click() } )
      oFld:aDialogs[9]:AddFastKey( 114, {|| aBtn[ 9 ]:Click() } )
      oFld:aDialogs[9]:AddFastKey( 115, {|| aBtn[ 10]:Click() } )

      oFld:aDialogs[10]:AddFastKey( 113, {|| if( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ], aBtn[ 11 ]:Click(), ) } )
      oFld:aDialogs[10]:AddFastKey( 114, {|| if( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ], aBtn[ 12 ]:Click(), ) } )
      oFld:aDialogs[10]:AddFastKey( 115, {|| if( aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ], aBtn[ 13 ]:Click(), ) } )

      oFld:aDialogs[5]:AddFastKey( 113, {|| WinAppRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 114, {|| WinEdtRec( oBrwImg, bEdtImg, dbfTmpImg, aTmp ) } )
      oFld:aDialogs[5]:AddFastKey( 115, {|| WinDelRec( oBrwImg, dbfTmpImg ) } )

      oDlg:AddFastKey(  116, {|| EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode, oImpComanda1, oImpComanda2, aImpComanda ) } )

   end

   oDlg:bStart    := {|| StartDlg( aGet, aTmp, nMode, oSay, oDlg, oCosto, aBtnDiv, oFnt, oBtnMoneda, aBtn, bmpImage, oBrwPrv, oBrwDiv, oBrwStk, oBrwKit, oBrwOfe, oBrwCtaVta, oBrwCtaCom, oBrwCodeBar, oBrwImg ) }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|(  KillTrans( oBrwPrv, oBrwDiv, oBrwStk, oBrwCtaVta, oBrwCtaCom, oBrwOfe, oBrwKit ) )},, {|Self|(  EdtRecMenu( aTmp, aGet, oSay, oDlg, oFld, aBar, cSay, nMode ) )}, oDlg:bRClicked,,, )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos ",  )

   end

   ErrorBlock( oBlock )

   CursorWait()

   if !Empty( oMenu )
      oMenu:End()
   end

   if !Empty( oBmpCategoria )
      oBmpCategoria:End()
   end

   if !Empty( oBmpGeneral )
      oBmpGeneral:End()
   end

   if !Empty( oBmpPrecios )
      oBmpPrecios:End()
   end

   if !Empty( oBmpDescripciones )
      oBmpDescripciones:End()
   end

   if !Empty( oBmpPropiedades )
      oBmpPropiedades:End()
   end

   if !Empty( oBmpLogistica )
      oBmpLogistica:End()
   end

   if !Empty( oBmpStocks )
      oBmpStocks:End()
   end

   if !Empty( oBmpContabilidad )
      oBmpContabilidad:End()
   end

   if !Empty( oBmpOfertas )
      oBmpOfertas:End()
   end

   if !Empty( oBmpEscandallos )
      oBmpEscandallos:End()
   end

   if !Empty( oBmpWeb )
      oBmpWeb:End()
   end

   if !Empty( oBmpUbicaciones )
      oBmpUbicaciones:End()
   end

   if !Empty( oBmpImagenes )
      oBmpImagenes:End()
   end

   CursorWE()

Return ( oDlg:nResult == 1 )



static function CodificacionProveedor( aTmp, nMode )

   local oDlg
   local oBrwPrv

   oDlg = TDialog():New(,,,,, "ART_PROVEEDOR",, .F.,,,,,, .F.,,,,,, .F., )

   oBrwPrv                 := IXBrowse():New( oDlg )

   oBrwPrv:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwPrv:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwPrv:cAlias          := dbfTmpPrv

   oBrwPrv:nMarqueeStyle   := 5
   oBrwPrv:cName           := "Precios de compras de articulos"

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Df. Defecto"
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTmpPrv )->lDefPrv }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpPrv )->cCodPrv }
         :nWidth           := 60
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Proveedor"
         :bEditValue       := {|| RetProvee( ( dbfTmpPrv )->cCodPrv, dbfProv ) }
         :nWidth           := 145
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Referencia"
         :bEditValue       := {|| ( dbfTmpPrv )->cRefPrv }
         :nWidth           := 80
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( ( dbfTmpPrv )->cDivPrv, dbfDiv ) }
         :nWidth           := 30
      end

      if !oUser():lNotCostos()

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| ( dbfTmpPrv )->nImpPrv }
         :nWidth           := 80
         :cEditPicture     := cPirDiv( cDivEmp(), dbfDiv )
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "% Dto."
         :bEditValue       := {|| ( dbfTmpPrv )->nDtoPrv }
         :nWidth           := 40
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "% Prm."
         :bEditValue       := {|| ( dbfTmpPrv )->nDtoPrm }
         :nWidth           := 40
         :cEditPicture     := "@E 999.99"
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      if !oUser():lNotCostos()

      with object ( oBrwPrv:AddCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| nTotImpPrv( dbfTmpPrv, dbfDiv, .T. )}
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      end

      if nMode <> 3
         oBrwPrv:bLDblClick   := {|| if( !oUser():lNotCostos(), WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) }
      end

      oBrwPrv:CreateFromResource( 100 )





      TButton():ReDefine( 500, {||( if( !oUser():lNotCostos(), WinAppRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 501, {||( if( !oUser():lNotCostos(), WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




      TButton():ReDefine( 503, {||( if( !oUser():lNotCostos(), WinZooRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 502, {||( DelPrv( aTmp, oBrwPrv, dbfTmpPrv ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 550, {||( oDlg:End( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 560, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 113, {|| if( !oUser():lNotCostos(), WinAppRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) } )
      oDlg:AddFastKey( 114, {|| if( !oUser():lNotCostos(), WinEdtRec( oBrwPrv, bEdtDet, dbfTmpPrv, aTmp ), ) } )
      oDlg:AddFastKey( 115, {|| DelPrv( aTmp, oBrwPrv, dbfTmpPrv ) } )

      oDlg:AddFastKey(  116, {|| oDlg:End( 1 ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

return ( nil )



STATIC FUNCTION EdtRec2( aTmp, aGet, dbfArticulo, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oBtn
   local oSay  := Array( 4 )
   local cSay  := Array( 4 )
   local oValorPunto
   local oValorDto
   local oValorTot

   do case
      case nMode == 1
         aTmp[ ( dbfArticulo )->( fieldpos( "Codigo"    ) ) ]  := Space( 18 )
         aTmp[ ( dbfArticulo )->( fieldpos( "nLabel"    ) ) ]  := 1
         aTmp[ ( dbfArticulo )->( fieldpos( "nCtlStock" ) ) ]  := 1
         aTmp[ ( dbfArticulo )->( fieldpos( "lLote"     ) ) ]  := .F.
         aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva"   ) ) ]  := cDefIva()
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1"     ) ) ]  := .T.
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf2"     ) ) ]  := .T.
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf3"     ) ) ]  := .T.
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf4"     ) ) ]  := .T.
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf5"     ) ) ]  := .T.
         aTmp[ ( dbfArticulo )->( fieldpos( "lBnf6"     ) ) ]  := .T.

      case nMode == 4
         aTmp[ ( dbfArticulo )->( fieldpos( "Codigo"    ) ) ]  := NextKey( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo )

   end

   cCatOld     := aTmp[ ( dbfArticulo )->( fieldpos( "cCodCat" ) ) ]
   cPrvOld     := aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ]



   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "artículo : " + Rtrim( aTmp[( dbfArticulo )->( fieldpos( "NOMBRE" ) ) ] ), "FASTART",, .F.,,,,,, .F.,,,,,, .F., )











   aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:= u ) }, oDlg,, "@!", {||    ( CheckValid( aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo, 1, nMode ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:cText( NextKey( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfArticulo ) ) )}, nil, "Bot",, )





   aGet[( dbfArticulo )->( fieldpos( "Nombre" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "Nombre" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "Nombre" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| ( ActTitle( nKey, nFlags, Self, nMode, oDlg ) ) }, .F., .F.,,,,,, nil,,, )









   aGet[( dbfArticulo )->( fieldpos( "Familia" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[( dbfArticulo )->( fieldpos( "Familia" ) ) ], aTmp[( dbfArticulo )->( fieldpos( "Familia" ) ) ]:= u ) }, oDlg,,, {||    ( cFamilia( aGet[( dbfArticulo )->( fieldpos( "Familia" ) ) ], dbfFam, oSay[1] ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFamilia( aGet[( dbfArticulo )->( fieldpos( "Familia" ) ) ], oSay[1] ) )}, nil, "LUPA",, )




   oSay[1] := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSay[1], cSay[1]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











   aGet[ ( dbfArticulo )->( fieldpos( "cCodCat" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "cCodCat" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "cCodCat" ) ) ]:= u ) }, oDlg,,, {||    ( CargaValorCat( aTmp, aGet, oSay, oValorPunto, oValorDto, oValorTot, nMode, .T. ), oCatalogo:lValid( aGet[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ], oSay[2] ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( CargaValorCat( aTmp, aGet, oSay, oValorPunto, oValorDto, oValorTot, nMode, .T. ) ) }, .F., .F.,,,,, {|Self|( oCatalogo:Buscar( aGet[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ], oSay[2], "cCodCata" ) )}, nil, "LUPA",, )




   oSay[2] := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSay[2], cSay[2]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )











   aGet[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ]:= u ) }, oDlg,, ( RetPicCodPrvEmp() ), {||    ( CargaProveedor( aGet[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ], oSay[ 4 ], oValorPunto, dbfProv ) )},,,,,, .F., {||     ( Empty( aTmp[( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ] ) )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ] ) )}, nil, "LUPA",, )




   oSay[4] := TGetHlp():ReDefine( 141, { | u | If( PCount()==0, cSay[4], cSay[4]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )



   oSay[3] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSay[3], cSay[3]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ]:= u ) }, oDlg,, cPinDiv, {||    ( oValorTot:Refresh(), .T. )},,,,,, .F.,,, .F., .F.,,,,,, nil,,, )







   oValorPunto := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NPUNTOS" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NPUNTOS" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F.,, {|nKey,nFlags,Self| ( oValorTot:Refresh() ) }, .F., .F.,,,,,, nil,,, )









   oValorDto := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfArticulo )->( fieldpos( "NDTOPNT" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NDTOPNT" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,, {|nKey,nFlags,Self| ( oValorTot:Refresh() ) }, .F., .T.,,,,,, nil,,, )








   oValorTot := TSay():ReDefine( 190, {||   nPunt2Euro( aTmp, dbfArticulo )}, oDlg, cPinDiv, "N/W*",, .F.,, .F., .F. )






   oBtn := TButton():ReDefine( 1, {||( EndTrans2( aTmp, aGet, oSay, oDlg, nMode ) )}, oDlg,,, .F.,,,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| EndTrans2( aTmp, aGet, oSay, oDlg, nMode ) } )

   oDlg:bStart := {|| aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:SetFocus() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( aGet[( dbfArticulo )->( fieldpos( "FAMILIA" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ]:lValid(), aGet[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ]:lValid() )}, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



Static function lValidaSubcuenta( aGet, aTmp, nGetDebe, nGetHaber, oGetSaldo, oGetSubCta, cSubCtaAnt, oBrwCta, dbfTmpSubCta )








   if MkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ], { aTmp[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NOMBRE"  ) ) ] }, oGetSubCta, nil, nil, @nGetDebe, @nGetHaber, oGetSaldo )

      if aTmp[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ] <> cSubCtaAnt
         LoadSubCta( aTmp[ ( dbfArticulo )->( fieldpos( "CCTAVTA" ) ) ], cRutCnt(), dbfTmpSubCta )
         oBrwCta:Refresh()
      end

      Return .T.

   end

Return .F.



Static function lValidaSubcuentaCompras( aGet, aTmp, nGetDebe, nGetHaber, oGetSaldo, oGetSubCom, cSubCtaAntCom, oBrwCom, dbfTmpSubCom )








   if MkSubCta( aGet[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ], { aTmp[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "NOMBRE"  ) ) ] }, oGetSubCom, nil, nil, @nGetDebe, @nGetHaber, oGetSaldo )

      if aTmp[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ] <> cSubCtaAntCom
         LoadSubCta( aTmp[ ( dbfArticulo )->( fieldpos( "CCTACOM" ) ) ], cRutCnt(), dbfTmpSubCom )
         oBrwCom:Refresh()
      end

      Return .T.

   end

Return .F.



Static Function StartDlg( aGet, aTmp, nMode, oSay, oDlg, oCosto, aBtnDiv, oFnt, oBtnMoneda, aBtn, bmpImage, oBrwPrv, oBrwDiv, oBrwStk, oBrwKit, oBrwOfe, oBrwCtaVta, oBrwCtaCom, oBrwCodeBar, oBrwImg )

   CursorWait()

   oDlg:Disable()

   EvalGet( aGet, nMode )

   ChgKit( aTmp, aGet, oCosto )

   oSay[ 18 ]:SetText( uFieldEmpresa( "cTxtTar1", "Precio 1" ) )

   if uFieldEmpresa( "lShwTar2" )
      oSay[ 19 ]:SetText( uFieldEmpresa( "cTxtTar2", "Precio 2" ) )
   else
      oSay[ 12 ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf2" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) )   ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta2" ) )  ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq2" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar3" )
      oSay[ 20 ]:SetText( uFieldEmpresa( "cTxtTar3", "Precio 3" ) )
   else
      oSay[ 13 ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf3" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) )   ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta3" ) )  ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq3" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar4" )
      oSay[ 21 ]:SetText( uFieldEmpresa( "cTxtTar4", "Precio 4" ) )
   else
      oSay[ 14 ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf4" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) )   ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta4" ) )  ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq4" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar5" )
      oSay[ 22 ]:SetText( uFieldEmpresa( "cTxtTar5", "Precio 5" ) )
   else
      oSay[ 15 ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf5" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) )   ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta5" ) )  ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq5" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ]:Hide()
   end

   if uFieldEmpresa( "lShwTar6" )
      oSay[ 23 ]:SetText( uFieldEmpresa( "cTxtTar6", "Precio 6" ) )
   else
      oSay[ 16 ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf6" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) )   ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta6" ) )  ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva6" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq6" ) )    ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ]:Hide()
   end

   aGet[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]:SetFocus()

   oBtnMoneda:Show()

   IXBrowse():OpenData()

   if !Empty( oBrwPrv )
      oBrwPrv:LoadData()
   end

   if !Empty( oBrwDiv )
      oBrwDiv:LoadData()
   end

   if !Empty( oBrwStk )
      oBrwStk:LoadData()
   end

   if !Empty( oBrwKit )
      oBrwKit:LoadData()
   end

   if !Empty( oBrwOfe )
      oBrwOfe:LoadData()
   end

   if !Empty( oBrwCtaVta )
      oBrwCtaVta:LoadData()
   end

   if !Empty( oBrwCtaCom )
      oBrwCtaCom:LoadData()
   end

   if !Empty( oBrwImg )
      oBrwImg:LoadData()
   end

   IXBrowse():CloseData()

















   if oCbxPrecio:nAt == 1

      oSay[ 11 ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta1" ) )  ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva1" ) ) ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf1" ) )    ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) )   ]:Show()

      if uFieldEmpresa( "lShwTar2" )
         oSay[ 12 ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVenta2" ) )  ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva2" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "lBnf2" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) )   ]:Show()
      end

      if uFieldEmpresa( "lShwTar3" )
         oSay[ 13 ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVenta3" ) )  ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva3" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "lBnf3" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) )   ]:Show()
      end

      if uFieldEmpresa( "lShwTar4" )
         oSay[ 14 ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVenta4" ) )  ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva4" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "lBnf4" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) )   ]:Show()
      end

      if uFieldEmpresa( "lShwTar5" )
         oSay[ 15 ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVenta5" ) )  ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva5" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "lBnf5" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) )   ]:Show()
      end

      if uFieldEmpresa( "lShwTar6" )
         oSay[ 16 ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVenta6" ) )  ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva6" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "lBnf6" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) )   ]:Show()
      end

      aGet[ ( dbfArticulo )->( fieldpos( "pAlq1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlq6" ) ) ]:Hide()

      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ]:Hide()

   else

      aGet[ ( dbfArticulo )->( fieldpos( "pAlq1" ) )    ]:Show()
      aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva1" ) ) ]:Show()

      if uFieldEmpresa( "lShwTar2" )
         aGet[ ( dbfArticulo )->( fieldpos( "pAlq2" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva2" ) ) ]:Show()
      end

      if uFieldEmpresa( "lShwTar3" )
         aGet[ ( dbfArticulo )->( fieldpos( "pAlq3" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva3" ) ) ]:Show()
      end

      if uFieldEmpresa( "lShwTar4" )
         aGet[ ( dbfArticulo )->( fieldpos( "pAlq4" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva4" ) ) ]:Show()
      end

      if uFieldEmpresa( "lShwTar5" )
         aGet[ ( dbfArticulo )->( fieldpos( "pAlq5" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva5" ) ) ]:Show()
      end

      if uFieldEmpresa( "lShwTar6" )
         aGet[ ( dbfArticulo )->( fieldpos( "pAlq6" ) )    ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "pAlqIva6" ) ) ]:Show()
      end

      aGet[ ( dbfArticulo )->( fieldpos( "pVenta1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "PVenta3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVenta6" ) ) ]:Hide()

      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "pVtaIva6" ) ) ]:Hide()

      aGet[ ( dbfArticulo )->( fieldpos( "lBnf1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "lBnf6" ) ) ]:Hide()

      aGet[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ]:Hide()

      oSay[ 11 ]:Hide()
      oSay[ 12 ]:Hide()
      oSay[ 13 ]:Hide()
      oSay[ 14 ]:Hide()
      oSay[ 15 ]:Hide()
      oSay[ 16 ]:Hide()

   end



   if nMode <> 1

      if aTmp[ ( dbfArticulo )->( fieldpos( "nCtlStock" ) ) ] <= 1
         oStock:aStockArticulo( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], nil, oBrwStk )
      end

      if nMode <> 3



         if !oUser():lCambiarPrecio()

            aGet[ ( dbfArticulo )->( FieldPos( "pVenta1" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva1") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVenta2" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva2") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVenta3" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva3") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVenta4" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva4") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVenta5" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva5") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVenta6" ) ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( FieldPos( "pVtaIva6") ) ]:HardDisable()

            aGet[ ( dbfArticulo )->( fieldpos( "nPntVer1") ) ]:HardDisable()
            aGet[ ( dbfArticulo )->( fieldpos( "nPnvIva1") ) ]:HardDisable()

            aGet[ ( dbfArticulo )->( fieldpos( "PvpRec"  ) ) ]:HardDisable()

         end

         if oUser():lNotRentabilidad()

            aGet[ ( dbfArticulo )->( fieldpos( "Benef1"  ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "Benef2"  ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "Benef3"  ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "Benef4"  ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "Benef5"  ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "Benef6"  ) ) ]:Hide()

            aGet[ ( dbfArticulo )->( fieldpos( "lBnf1"   ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "lBnf2"   ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "lBnf3"   ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "lBnf4"   ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "lBnf5"   ) ) ]:Hide()
            aGet[ ( dbfArticulo )->( fieldpos( "lBnf6"   ) ) ]:Hide()

            oSay[ 11 ]:Hide()
            oSay[ 12 ]:Hide()
            oSay[ 13 ]:Hide()
            oSay[ 14 ]:Hide()
            oSay[ 15 ]:Hide()
            oSay[ 16 ]:Hide()

         end

      end

   end

   if oUser():lNotCostos()
      aGet[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ]:Hide()
      oCosto:Hide()
   end

   oDlg:Enable()

   CursorWE()

Return ( .T. )



Static Function BeginTrans( aTmp, nMode )

   local lErrors     := .F.
   local cCodArt
   local cCodSubCta
   local cCodSubCom
   local aItmSubCta
   local oError
   local oBlock

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   aItmSubCta        := {}

   cCodArt           := aTmp[ ( dbfArticulo )->( fieldpos( "Codigo"  ) ) ]
   cCodSubCta        := aTmp[ ( dbfArticulo )->( fieldpos( "cCtaVta" ) ) ]
   cCodSubCom        := aTmp[ ( dbfArticulo )->( fieldpos( "cCtaCom" ) ) ]

   aAdd( aItmSubCta, { "nAsiento",  "N",  6, 0, "Asiento"    } )
   aAdd( aItmSubCta, { "dFecha",    "D",  8, 0, "Fecha"      } )
   aAdd( aItmSubCta, { "cConcepto", "C", 25, 0, "Concepto"   } )
   aAdd( aItmSubCta, { "nDebe",     "N", 16, 2, "Debe"       } )
   aAdd( aItmSubCta, { "nHaber",    "N", 16, 2, "Haber"      } )
   aAdd( aItmSubCta, { "cDeparta",  "C",  6, 0, "Departa"    } )
   aAdd( aItmSubCta, { "nFactura",  "N",  8, 0, "Factura"    } )
   aAdd( aItmSubCta, { "nBase",     "N", 16, 2, "Base"       } )
   aAdd( aItmSubCta, { "nIva",      "N",  5, 2, "I.V.A"      } )

   filTmpPrv         := cGetNewFileName( cPatTmp() + "PrvArt" )
   filTmpVta         := cGetNewFileName( cPatTmp() + "VtaArt" )
   filTmpKit         := cGetNewFileName( cPatTmp() + "KitArt" )
   filTmpOfe         := cGetNewFileName( cPatTmp() + "OfeArt" )
   filTmpImg         := cGetNewFileName( cPatTmp() + "ArtImg" )
   filTmpCodebar     := cGetNewFileName( cPatTmp() + "ArtCodebar" )
   filTmpSubCta      := cGetNewFileName( cPatTmp() + "TmpSubCta" )
   filTmpSubCom      := cGetNewFileName( cPatTmp() + "TmpSubCom" )





   dbCreate( filTmpPrv, aSqlStruct( aItmArtPrv() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpPrv, cCheckArea( "PrvArt", @dbfTmpPrv ), .F. )

   if !NetErr()

      ( dbfTmpPrv )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpPrv )->( OrdCreate( filTmpPrv, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfTmpPrv )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
      ( dbfTmpPrv )->( OrdCreate( filTmpPrv, "cRefPrv", "cCodPrv + cRefPrv", {|| Field->cCodPrv + Field->cRefPrv } ) )

      if nMode <> 1 .AND. ( dbfArtPrv )->( dbSeek( cCodArt ) )
         while ( dbfArtPrv )->cCodArt == cCodArt .AND. !( dbfArtPrv )->( eof() )
            dbPass( dbfArtPrv, dbfTmpPrv, .T. )
            ( dbfArtPrv )->( dbSkip() )
         end
         ( dbfTmpPrv )->( dbGoTop() )
      end

   end

   dbCreate( filTmpVta, aSqlStruct( aItmVta() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpVta, cCheckArea( "VtaArt", @dbfTmpVta ), .F. )
   ( dbfTmpVta )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpVta )->( OrdCreate( filTmpVta, "cCodArt", "cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2", {|| Field->cCodArt + Field->cCodPr1 + Field->cCodPr2 + Field->cValPr1 + Field->cValPr2 } ) )

   if nMode <> 1 .AND. ( dbfArtVta )->( dbSeek( cCodArt ) )
      while ( dbfArtVta )->cCodArt == cCodArt .AND. !( dbfArtVta )->( eof() )
         dbPass( dbfArtVta, dbfTmpVta, .T. )
         ( dbfArtVta )->( dbSkip() )
      end
      ( dbfTmpVta )->( dbGoTop() )
   end

   dbCreate( filTmpKit, aSqlStruct( aItmKit() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpKit, cCheckArea( "KitArt", @dbfTmpKit ), .F. )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "cCodKit", "cCodKit", {|| Field->cCodKit } ) )

   ( dbfTmpKit )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpKit )->( OrdCreate( filTmpKit, "cRefKit", "cRefKit", {|| Field->cRefKit } ) )

   ( dbfTmpKit )->( OrdSetFocus( "Recno" ) )

   if nMode <> 1 .AND. ( dbfArtKit )->( dbSeek( cCodArt ) )
      while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )
         dbPass( dbfArtKit, dbfTmpKit, .T. )
         ( dbfArtKit )->( dbSkip() )
      end
      ( dbfTmpKit )->( dbGoTop() )
   end






   dbCreate( filTmpOfe, aSqlStruct( aItmOfe() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpOfe, cCheckArea( "OfeArt", @dbfTmpOfe ), .F. )

   ( dbfTmpOfe )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpOfe )->( OrdCreate( filTmpOfe, "cArtOfe", "cArtOfe", {|| Field->cArtOfe } ) )

   if nMode <> 1 .AND. ( dbfOfe )->( dbSeek( cCodArt ) )
      while ( dbfOfe )->cArtOfe == cCodArt .AND. ( dbfOfe )->nTblOfe < 2 .AND. !( dbfOfe )->( eof() )
         dbPass( dbfOfe, dbfTmpOfe, .T. )
         ( dbfOfe )->( dbSkip() )
      end
      ( dbfTmpOfe )->( dbGoTop() )
   end





   dbCreate( filTmpImg, aSqlStruct( aItmImg() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpImg, cCheckArea( "ImgArt", @dbfTmpImg ), .F. )

   ( dbfTmpImg )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpImg )->( OrdCreate( filTmpImg, "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

   if nMode <> 1 .AND. ( dbfImg )->( dbSeek( cCodArt ) )
      while ( dbfImg )->cCodArt == cCodArt .AND. !( dbfImg )->( eof() )
         dbPass( dbfImg, dbfTmpImg, .T. )
         ( dbfImg )->( dbSkip() )
      end
      ( dbfTmpImg )->( dbGoTop() )
   end





   dbCreate( filTmpCodebar, aSqlStruct( aItmBar() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpCodebar, cCheckArea( "CodBar", @dbfTmpCodebar ), .F. )

   ( dbfTmpCodebar )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpCodebar )->( OrdCreate( filTmpCodebar, "cCodBar", "cCodBar", {|| Field->cCodBar } ) )

   if nMode <> 1 .AND. ( dbfCodebar )->( dbSeek( cCodArt ) )
      while ( dbfCodebar )->cCodArt == cCodArt .AND. !( dbfCodebar )->( eof() )
         dbPass( dbfCodebar, dbfTmpCodebar, .T. )
         ( dbfCodebar )->( dbSkip() )
      end
      ( dbfTmpCodebar )->( dbGoTop() )
   end





   dbCreate( filTmpSubCta, aSqlStruct( aItmSubCta ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpSubCta, cCheckArea( "TmpSubCta", @dbfTmpSubCta ), .F. )

   ( dbfTmpSubCta )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpSubCta )->( OrdCreate( filTmpSubCta, "dFecha", "dFecha", {|| Field->dFecha } ) )

   dbCreate( filTmpSubCom, aSqlStruct( aItmSubCta ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), filTmpSubCom, cCheckArea( "TmpSubCom", @dbfTmpSubCom ), .F. )

   ( dbfTmpSubCom )->( OrdCondSet( "!Deleted()", {||!Deleted()} ) )
   ( dbfTmpSubCom )->( OrdCreate( filTmpSubCom, "dFecha", "dFecha", {|| Field->dFecha } ) )

   if nMode <> 1
      LoadSubCta( cCodSubCta, cRutCnt(), dbfTmpSubCta )
      LoadSubCta( cCodSubCom, cRutCnt(), dbfTmpSubCom )
   end





   aOldCodeBar    := aDbfToArr( dbfTmpCodebar, 2 )

   RECOVER USING oError

      msgStop( "Imposible crear tablas temporales " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

Return ( lErrors )



Static Function EndTrans( aTmp, aGet, oSay, oDlg, aTipBar, cTipBar, nMode, oImpComanda1, oImpComanda2, aImpComanda )

   local i
   local cCod
   local cCodArt
   local oError
   local oBlock
   local nTipBar
   local aCodeBar    := {}
   local lChange     := .F.





   cCod              := aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]

   if Empty( cCod ) .AND. ( nMode == 1 .OR. nMode == 4 )
      MsgStop( "Código no puede estar vacio" )
      return nil
   end

   if dbSeekInOrd( cCod, "Codigo", dbfArticulo ) .AND. ( nMode == 1 .OR. nMode == 4 )
      msgStop( "Código ya existe" )
      return nil
   end

   DisableAcceso()

   oDlg:Disable()

   oMsgText( "Archivando" )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      BeginTransaction()

      aTmp[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ] := GetSysDate()





      if nMode == 2

         while ( dbfArtPrv )->( dbSeek( cCod ) ) .AND. !( dbfArtPrv )->( eof() )
            if dbLock( dbfArtPrv )
               ( dbfArtPrv )->( dbDelete() )
               ( dbfArtPrv )->( dbUnLock() )
            end
         end

         while ( dbfArtVta )->( dbSeek( cCod ) ) .AND. !( dbfArtVta )->( eof() )
            if dbLock( dbfArtVta )
               ( dbfArtVta )->( dbDelete() )
               ( dbfArtVta )->( dbUnLock() )
            end
         end

         while ( dbfArtKit )->( dbSeek( cCod ) ) .AND. !( dbfArtKit )->( eof() )
            if dbLock( dbfArtKit )
               ( dbfArtKit )->( dbDelete() )
               ( dbfArtKit )->( dbUnLock() )
            end
         end

         while ( dbfOfe )->( dbSeek( cCod ) ) .AND. !( dbfOfe )->( eof() )
            if dbLock( dbfOfe )
               ( dbfOfe )->( dbDelete() )
               ( dbfOfe )->( dbUnLock() )
            end
         end

         while ( dbfImg )->( dbSeek( cCod ) ) .AND. !( dbfImg )->( eof() )
            if dbLock( dbfImg )
               ( dbfImg )->( dbDelete() )
               ( dbfImg )->( dbUnLock() )
            end
         end





         ( dbfTmpCodebar )->( dbGoTop() )

         aCodeBar       := aDbfToArr( dbfTmpCodebar, 2 )

         while ( dbfCodebar )->( dbSeek( cCod ) ) .AND. !( dbfCodebar )->( eof() )
            if dbLock( dbfCodebar )
               ( dbfCodebar )->( dbDelete() )
               ( dbfCodebar )->( dbUnLock() )
            end
         end

      end





      ( dbfTmpPrv )->( OrdSetFocus( 0 ) )
      ( dbfTmpPrv )->( dbGoTop() )
      while !( dbfTmpPrv )->( eof() )
         ( dbfTmpPrv )->cCodArt  := cCod
          dbPass( dbfTmpPrv, dbfArtPrv, .T. )
         ( dbfTmpPrv )->( dbSkip() )
      end

      ( dbfTmpVta )->( OrdSetFocus( 0 ) )
      ( dbfTmpVta )->( dbGoTop() )
      while !( dbfTmpVta )->( eof() )
         ( dbfTmpVta )->cCodArt  := cCod
          dbPass( dbfTmpVta, dbfArtVta, .T. )
         ( dbfTmpVta )->( dbSkip() )
      end

      ( dbfTmpKit )->( OrdSetFocus( 0 ) )
      ( dbfTmpKit )->( dbGoTop() )
      while !( dbfTmpKit )->( eof() )
         ( dbfTmpKit )->cCodKit := cCod
          dbPass( dbfTmpKit, dbfArtKit, .T. )
         ( dbfTmpKit )->( dbSkip() )
      end

      ( dbfTmpOfe )->( OrdSetFocus( 0 ) )
      ( dbfTmpOfe )->( dbGoTop() )
      while !( dbfTmpOfe )->( eof() )
         ( dbfTmpOfe )->cArtOfe := cCod
          dbPass( dbfTmpOfe, dbfOfe, .T. )
         ( dbfTmpOfe )->( dbSkip() )
      end

      ( dbfTmpImg )->( OrdSetFocus( 0 ) )
      ( dbfTmpImg )->( dbGoTop() )
      while !( dbfTmpImg )->( eof() )
         ( dbfTmpImg )->cCodArt := cCod
          dbPass( dbfTmpImg, dbfImg, .T. )
         ( dbfTmpImg )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( OrdSetFocus( 0 ) )
      ( dbfTmpCodebar )->( dbGoTop() )

      while !( dbfTmpCodebar )->( eof() )

         ( dbfTmpCodebar )->cCodArt := cCod

         if ( dbfTmpCodebar )->lDefBar
            cCodArt                                             := ( dbfTmpCodebar )->cCodBar
            nTipBar                                             := ( dbfTmpCodebar )->nTipBar
            aTmp[ ( dbfArticulo )->( fieldpos( "CodeBar"  ) ) ] := ( dbfTmpCodebar )->cCodBar
         end

         if !Empty( ( dbfTmpCodebar )->cValPr1 ) .AND. At( Alltrim( aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp1" ) ) ] ), Alltrim( ( dbfTmpCodebar )->cValPr1 ) ) == 0
            aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp1" ) ) ]   := Alltrim( aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp1" ) ) ] ) + Alltrim( ( dbfTmpCodebar )->cValPr1 ) + ","
         end

         if !Empty( ( dbfTmpCodebar )->cValPr2 ) .AND. At( Alltrim( aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp2" ) ) ] ), Alltrim( ( dbfTmpCodebar )->cValPr2 ) ) == 0
            aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp2" ) ) ]   := Alltrim( aTmp[ ( dbfArticulo )->( FieldPos( "mValPrp2" ) ) ] ) + Alltrim( ( dbfTmpCodebar )->cValPr2 ) + ","
         end

         dbPass( dbfTmpCodebar, dbfCodebar, .T. )

         ( dbfTmpCodebar )->( dbSkip() )

      end





      aTmp[ ( dbfArticulo )->( fieldpos( "lLabel"  ) ) ]       := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "lSndDoc" ) ) ]       := .T.
      aTmp[ ( dbfArticulo )->( fieldpos( "cCodUsr" ) ) ]       := cCurUsr()
      aTmp[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ]       := GetSysDate()
      aTmp[ ( dbfArticulo )->( fieldpos( "cTimChg" ) ) ]       := Time()
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr1") ) ]       := oSay[ 11 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr2") ) ]       := oSay[ 12 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr3") ) ]       := oSay[ 13 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr4") ) ]       := oSay[ 14 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr5") ) ]       := oSay[ 15 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr6") ) ]       := oSay[ 16 ]:nAt
      aTmp[ ( dbfArticulo )->( fieldpos( "nPosTpv" ) ) ]       -= 0.5

      aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp1" ) ) ]      := aImpComanda[ oImpComanda1:nAt ]
      aTmp[ ( dbfArticulo )->( fieldpos( "cTipImp2" ) ) ]      := aImpComanda[ oImpComanda2:nAt ]

      if !Empty( oActiveX )
         aTmp[ ( dbfArticulo )->( fieldpos( "mDesTec" ) ) ]    := oActiveX:DocumentHTML
      end





      if Len( aCodeBar ) <> Len( aOldCodeBar )
         lChange     := .T.
      end

      for i := 1 to Len( aCodeBar )
         if aScan( aOldCodeBar, aCodeBar[ i ] ) == 0
            lChange  := .T.
         end
      next

      if lChange
         aTmp[ ( dbfArticulo )->( fieldpos( "dChgBar" ) ) ] := GetSysDate()
      end





      ChangePublicar( aTmp )





      WinGather( aTmp, aGet, dbfArticulo, nil, nMode )

      CommitTransaction()





   RECOVER USING oError

      RollBackTransaction()

      msgStop( "Imposible actualizar bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )





   oMsgText()

   oDlg:Enable()
   oDlg:End( 1 )

   EnableAcceso()

Return ( .T. )



Static Function KillTrans( oBrwPrv, oBrwDiv, oBrwStk, oBrwCta, oBrwCom, oBrw2, oBrw5 )





   if !Empty( dbfTmpPrv ) .AND. ( dbfTmpPrv )->( Used() )
      ( dbfTmpPrv )->( dbCloseArea() )
   end

   if !Empty( dbfTmpVta ) .AND. ( dbfTmpVta )->( Used() )
      ( dbfTmpVta )->( dbCloseArea() )
   end

   if !Empty( dbfTmpKit ) .AND. ( dbfTmpKit )->( Used() )
      ( dbfTmpKit )->( dbCloseArea() )
   end

   if !Empty( dbfTmpOfe ) .AND. ( dbfTmpOfe )->( Used() )
      ( dbfTmpOfe )->( dbCloseArea() )
   end

   if !Empty( dbfTmpImg ) .AND. ( dbfTmpImg )->( Used() )
      ( dbfTmpImg )->( dbCloseArea() )
   end

   if !Empty( dbfTmpCodebar ) .AND. ( dbfTmpCodebar )->( Used() )
      ( dbfTmpCodebar )->( dbCloseArea() )
   end

   if !Empty( dbfTmpSubCta ) .AND. ( dbfTmpSubCta )->( Used() )
      ( dbfTmpSubCta )->( dbCloseArea() )
   end

   if !Empty( dbfTmpSubCom ) .AND. ( dbfTmpSubCom )->( Used() )
      ( dbfTmpSubCom )->( dbCloseArea() )
   end

   dbfTmpCodebar  := nil
   dbfTmpSubCta   := nil
   dbfTmpSubCom   := nil
   dbfTmpPrv      := nil
   dbfTmpVta      := nil
   dbfTmpKit      := nil
   dbfTmpOfe      := nil
   dbfTmpImg      := nil

   dbfErase( filTmpPrv     )
   dbfErase( filTmpVta     )
   dbfErase( filTmpKit     )
   dbfErase( filTmpOfe     )
   dbfErase( filTmpImg     )
   dbfErase( filTmpCodebar )
   dbfErase( filTmpSubCta  )
   dbfErase( filTmpSubCom  )

Return .T.



static function ChgKit( aTmp, aGet, oCosto )

   if aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt") ) ] .AND. !aTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc") ) ]
      aGet[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ]:Hide()
      oCosto:Show()
      oCosto:Disable()
   else
      aGet[ ( dbfArticulo )->( fieldpos( "pCosto" ) ) ]:Show()
      oCosto:Hide()
   end

RETURN ( .T. )



STATIC FUNCTION StdCol( lIvaInc, nMode )

RETURN ( lIvaInc .AND. nMode <> 3 )



STATIC FUNCTION ActTitle( nKey, nFlags, aGet, nMode, oDlg )

    aGet:assign()
   oDlg:cTitle( LblTitle( nMode ) + " artículo : " + Rtrim( aGet:varGet() ) + Chr( nKey ) )

RETURN NIL







STATIC FUNCTION EdtDet( aTmp, aGet, dbfArtPrv, oBrw, bWhen, bValid, nMode )

    local oDlg
   local oSay1
   local cSay1
   local oBmpDiv
   local oTotal
   local lOldPrvDef                                      := aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]
   local lOldRefPrv                                      := aTmp[ ( dbfTmpPrv )->( fieldPos( "cRefPrv" ) ) ]

   if nMode == 1



      ( dbfTmpPrv )->( dbGoTop() )

      if ( dbfTmpPrv )->( Eof() )
         aTmp[ ( dbfTmpPrv )->( FieldPos( "lDefPrv" ) ) ]   := .T.
      end

      aTmp[ ( dbfTmpPrv )->( fieldpos( "cDivPrv" ) ) ]      := cDivEmp()

   end

    oDlg = TDialog():New(,,,, LblTitle( nMode ) + "codificaciones de proveedores", "ARTPRV",, .F.,,,,,, .F.,,,,,, .F., )









   aGet[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ]:= u ) }, oDlg,, ( Replicate( "X", RetNumCodPrvEmp() ) ), {||    ( cProvee( aGet[ ( dbfTmpPrv )->( fieldpos( "CCODPRV" ) ) ], dbfProv, oSay1 ) )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .F.,,,,, {|Self|( BrwProvee( aGet[ ( dbfTmpPrv )->( fieldpos( "CCODPRV" ) ) ], oSay1 ) )}, nil, "LUPA",, )




    oSay1 := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cSay1, cSay1:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





   aGet[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRV" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ] := TGetHlp():ReDefine( 145, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NDTOPRM" ) ) ]:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )













   aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ]:= u ) }, oDlg,, "@!", {||    cDiv( aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], oBmpDiv, nil, nil, nil, dbfDiv, oBandera )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], oBmpDiv, nil, dbfDiv, oBandera )}, nil, "LUPA",, )





    oBmpDiv := TBitmap():ReDefine( 151, ( cBmpDiv( aTmp[ ( dbfTmpPrv )->( fieldPos( "CDIVPRV" ) ) ], dbfDiv ) ),, oDlg,,, .F., .F.,,, .F., {||     ( nMode <> 3 )},, .F. )








   aGet[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "NIMPPRV" ) ) ]:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( oTotal:Refresh() ) }, .F., .T.,,,,,, nil,,, )




   oTotal := TSay():ReDefine( 170, {|| nTmpImpPrv( aTmp, dbfTmpPrv, dbfDiv, .T. )}, oDlg,, "N/W*",, .F.,, .F., .F. )





   aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ] := TCheckBox():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ], aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )





    TButton():ReDefine( 1, {||( EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, bWhen, lOldRefPrv ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, bWhen, lOldRefPrv ) } )

   oDlg:bStart := {|| if( aTmp[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ], aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:Disable(), aGet[ ( dbfTmpPrv )->( fieldPos( "lDefPrv" ) ) ]:Enable() ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted := {|hDC,cPS|( EvalGet( aGet ) )}, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION EdtVta( aTmp, aGet, dbfTmpVta, oBrw, bWhen, bValid, nMode, aArt )

    local oDlg
   local oBtnOk
   local oBtnCancel
   local oSayPr1
   local oSayPr2
   local oSayVp1
   local oSayVp2
   local cSayPr1           := ""
   local cSayPr2           := ""
   local cSayVp1           := ""
   local cSayVp2           := ""
   local cSay              := Array( 6 )
   local oSay              := Array( 6 )
   local aBnfSobre         := aBenefSobre
   local oTotPnt
   local oImgArt
   local oBrwPrp1
   local oBrwPrp2
   local aValPrp1          := {}
   local aValPrp2          := {}
   local lColorPrp1        := .F.
   local lColorPrp2        := .F.
   local oTodasPrp1
   local oNingunaPrp1
   local oTodasPrp2
   local oNingunaPrp2

   if nMode == 1
      aTmp[ ( dbfTmpVta )->( FieldPos( "CCODART" ) ) ]   := aArt[ ( dbfArticulo )->( fieldpos( "Codigo") ) ]
      aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ]   := aArt[ ( dbfArticulo )->( fieldpos( "cCodPrp1") ) ]
      aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ]   := aArt[ ( dbfArticulo )->( fieldpos( "cCodPrp2") ) ]
   end





   aValPrp1                := aLlenaPropiedades( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR1" ) ) ], nMode )
   aValPrp2                := aLlenaPropiedades( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR2" ) ) ], nMode )





   lColorPrp1              := retFld( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ], dbfPro, "lColor" )
   lColorPrp2              := retFld( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ], dbfPro, "lColor" )





   cSay[1]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[2]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[3]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[4]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[5]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[6]                 := aBnfSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "precios por propiedades", "PREDIV",, .F.,,,,,, .F.,,,,,, .F., )





      oBrwPrp1                        := TXBrowse():New( oDlg )

      oBrwPrp1:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp1:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp1:SetArray( aValPrp1, , , .F. )

      oBrwPrp1:nMarqueeStyle          := 5
      oBrwPrp1:lRecordSelector        := .F.
      oBrwPrp1:lHScroll               := .F.

      oBrwPrp1:CreateFromResource( 100 )

      oBrwPrp1:bRClicked   := {|| SeleccionPropiedad( aValPrp1, oBrwPrp1, oBrwPrp1:nArrayAt ) }

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := "S"
         :bStrData         := {|| "" }
         :bEditValue       := {|| if( Len( aValPrp1 ) <> 0, aValPrp1[ oBrwPrp1:nArrayAt ]:lSel, .F. ) }
         :nWidth           := 16
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := retFld( aValPrp1[ oBrwPrp1:nArrayAt ]:cCodPrp, dbfPro )
         :bStrData         := {|| aValPrp1[ oBrwPrp1:nArrayAt ]:cDesPrp }
         :nWidth           := if( lColorPrp1, 103, 119 )
      end

      if lColorPrp1

      with object ( oBrwPrp1:AddCol() )
         :cHeader          := "C"
         :bStrData         := {|| "" }
         :nWidth           := 16
         :bClrStd          := {|| { nRGB( 0, 0, 0), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor } }
         :bClrSel          := {|| { nRGB( 0, 0, 0), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor } }
         :bClrSelFocus     := {|| { nRGB( 0, 0, 0), aValPrp1[ oBrwPrp1:nArrayAt ]:nColor } }
      end

      end




      oTodasPrp1 := TButton():ReDefine( 111, {||( lSelAllPrp( aValPrp1, oBrwPrp1, .T. ) )}, oDlg,,, .F.,,,, .F. )




      oNingunaPrp1 := TButton():ReDefine( 112, {||( lSelAllPrp( aValPrp1, oBrwPrp1, .F. ) )}, oDlg,,, .F.,,,, .F. )





      oBrwPrp2                        := TXBrowse():New( oDlg )

      oBrwPrp2:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp2:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp2:SetArray( aValPrp2, , , .F. )

      oBrwPrp2:nMarqueeStyle          := 5
      oBrwPrp2:lRecordSelector        := .F.
      oBrwPrp2:lHScroll               := .F.

      oBrwPrp2:CreateFromResource( 110 )

      oBrwPrp2:bRClicked   := {|| SeleccionPropiedad( aValPrp2, oBrwPrp2, oBrwPrp2:nArrayAt ) }

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := "S"
         :bStrData         := {|| "" }
         :bEditValue       := {|| if( Len( aValPrp2 ) <> 0, aValPrp2[ oBrwPrp2:nArrayAt ]:lSel, .F. ) }
         :nWidth           := 16
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := if( Len( aValPrp2 ) <> 0, retFld( aValPrp2[ oBrwPrp2:nArrayAt ]:cCodPrp, dbfPro ), "" )
         :bStrData         := {|| if( Len( aValPrp2 ) <> 0, aValPrp2[ oBrwPrp2:nArrayAt ]:cDesPrp, "" ) }
         :nWidth           := if( lColorPrp2, 103, 119 )
      end

      if lColorPrp2

      with object ( oBrwPrp2:AddCol() )
         :cHeader          := "C"
         :bStrData         := {|| "" }
         :nWidth           := 16
         :bClrStd          := {|| { nRGB( 0, 0, 0), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor } }
         :bClrSel          := {|| { nRGB( 0, 0, 0), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor } }
         :bClrSelFocus     := {|| { nRGB( 0, 0, 0), aValPrp2[ oBrwPrp2:nArrayAt ]:nColor } }
      end

      end




      oTodasPrp2 := TButton():ReDefine( 113, {||( lSelAllPrp( aValPrp2, oBrwPrp2, .T. ) )}, oDlg,,, .F.,,,, .F. )




      oNingunaPrp2 := TButton():ReDefine( 114, {||( lSelAllPrp( aValPrp2, oBrwPrp2, .F. ) )}, oDlg,,, .F.,,,, .F. )









      aGet[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] := TCheckBox():ReDefine( 200, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ] := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ]:= u ) }, oDlg,, cPinDiv, {||    (  aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:lValid(), .T. )},,,,,, .F., {||     ( !aArt[ ( dbfArticulo )->( fieldPos( "lKitArt") ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,, 401, )








      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ] := TCheckBox():ReDefine( 300, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    (  lCalPre( oSay[ 1 ]:nAt <= 1, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 1 ] := TComboBox():ReDefine( 320, { | u | If( PCount()==0, cSay[ 1 ], cSay[ 1 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf1"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 1 ]:nAt <= 1, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 1 ]:nAt <= 1, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva1") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef1"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta1") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ] := TCheckBox():ReDefine( 350, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ] := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( lCalPre(   oSay[ 2 ]:nAt <= 2, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 2 ] := TComboBox():ReDefine( 370, { | u | If( PCount()==0, cSay[ 2 ], cSay[ 2 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf2"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ] := TGetHlp():ReDefine( 380, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 2 ]:nAt <= 2, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ] := TGetHlp():ReDefine( 390, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 2 ]:nAt <= 2, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva2") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef2"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta2") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ] := TCheckBox():ReDefine( 400, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ] := TGetHlp():ReDefine( 410, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( lCalPre(  oSay[ 3 ]:nAt <= 3, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 3 ] := TComboBox():ReDefine( 420, { | u | If( PCount()==0, cSay[ 3 ], cSay[ 3 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf3"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ] := TGetHlp():ReDefine( 430, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 3 ]:nAt <= 3, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ] := TGetHlp():ReDefine( 440, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 3 ]:nAt <= 3, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva3") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef3"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta3") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ] := TCheckBox():ReDefine( 450, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ] := TGetHlp():ReDefine( 460, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( lCalPre(   oSay[ 4 ]:nAt <= 4, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 4 ] := TComboBox():ReDefine( 470, { | u | If( PCount()==0, cSay[ 4 ], cSay[ 4 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf4"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4")) ]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ] := TGetHlp():ReDefine( 480, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 4 ]:nAt <= 4, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ] := TGetHlp():ReDefine( 490, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 4 ]:nAt <= 4, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva4") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef4"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta4") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ] := TCheckBox():ReDefine( 500, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ] := TGetHlp():ReDefine( 510, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( lCalPre(   oSay[ 5 ]:nAt <= 5, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 5 ] := TComboBox():ReDefine( 520, { | u | If( PCount()==0, cSay[ 5 ], cSay[ 5 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf5"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ] := TGetHlp():ReDefine( 530, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 5 ]:nAt <= 5, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ] := TGetHlp():ReDefine( 540, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 5 ]:nAt <= 5, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva5") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef5"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta5") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )









      aGet[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ] := TCheckBox():ReDefine( 550, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, .F. )

















      aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ] := TGetHlp():ReDefine( 560, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:= u ) }, oDlg,, "@E 999.99", {||    ( lCalPre(   oSay[ 6 ]:nAt <= 6, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6"   ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6" ) ) ] .AND. nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )








      oSay[ 6 ] := TComboBox():ReDefine( 570, { | u | If( PCount()==0, cSay[ 6 ], cSay[ 6 ]:= u ) }, aBnfSobre, oDlg,,, {|Self|( if( aTmp[ ( dbfTmpVta )->( fieldpos( "lBnf6"  ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6" ) ) ]:lValid(), aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") )]:lValid() ) )},,,, .F., {||     ( nMode <> 3 .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )},,,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ] := TGetHlp():ReDefine( 580, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfPts(   oSay[ 6 ]:nAt <= 6, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( !aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )

















      aGet[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ] := TGetHlp():ReDefine( 590, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6" ) ) ]:= u ) }, oDlg,, cPouDiv, {||    ( CalBnfIva(   oSay[ 6 ]:nAt <= 6, aArt[ (dbfArticulo)->( fieldpos( "lIvaInc" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreCom" ) ) ], aTmp[ ( dbfTmpVta )->( fieldpos( "nPreIva6") ) ], aGet[ ( dbfTmpVta )->( fieldpos( "Benef6"  ) ) ], aArt[ (dbfArticulo)->( fieldpos( "TipoIva" ) ) ], aGet[ ( dbfTmpVta )->( fieldpos( "nPreVta6") ) ], nDecDiv, aArt[ (dbfArticulo)->( fieldpos( "cCodImp" ) ) ] ) )},,,,,, .F., {||     ( stdCol( aArt[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ], nMode ) .AND. aTmp[ ( dbfTmpVta )->( fieldpos( "lProProp" ) ) ] )}, {|nKey,nFlags,Self| ( ::lValid() ) }, .F., .T.,,,,,, nil,,, )












      oImgArt := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( FieldPos( "cImgWeb" ) ) ], aTmp[ ( dbfTmpVta )->( FieldPos( "cImgWeb" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( oImgArt ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oImgArt ) )}, nil, "Lupa",, )




      aGet[ ( dbfTmpVta )->( fieldPos( "cToolTip" ) ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[ ( dbfTmpVta )->( fieldPos( "cToolTip" ) ) ], aTmp[ ( dbfTmpVta )->( fieldPos( "cToolTip" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )









      oBtnOk := TButton():ReDefine( 1, {||( EndEdtVta( aValPrp1, aValPrp2, aTmp, aGet, oSay, cSay, oBrw, oDlg, dbfTmpVta, nMode, oBrwPrp1, oBrwPrp2 ) )}, oDlg,,, .F.,,,, .F. )





      oBtnCancel := TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| StartEdtVta( aTmp, aGet, nMode, oBrwPrp1, oBrwPrp2, oTodasPrp1, oNingunaPrp1, oTodasPrp2, oNingunaPrp2, oBtnOk, oBtnCancel )  }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



static function aLlenaPropiedades( cCodigoPropiedad, nValPrp, nMode )

   local aValores    := {}
   local nRec        := ( dbfTblPro )->( Recno() )
   local nOrdAnt     := ( dbfTblPro )->( OrdSetFocus( "cPro" ) )
   local oTemporal

   if ( dbfTblPro )->( dbSeek( cCodigoPropiedad ) )

      while ( dbfTblPro )->cCodPro == cCodigoPropiedad .AND. !( dbfTblPro )->( Eof() )

         if ( nMode <> 2 ) .OR. ( ( nMode == 2 ) .AND. ( ( dbfTblPro )->cCodTbl == nValPrp ) )

            oTemporal                     := SValorPropiedades()
            oTemporal:cCodPrp             := cCodigoPropiedad
            oTemporal:cValPrp             := ( dbfTblPro )->cCodTbl
            oTemporal:cDesPrp             := ( dbfTblPro )->cDesTbl
            oTemporal:nColor              := ( dbfTblPro )->nColor
            oTemporal:lSel                := ( ( dbfTblPro )->cCodTbl == nValPrp )

            aAdd( aValores, oTemporal )

         end

         ( dbfTblPro )->( dbSkip() )

      end

   end

   ( dbfTblPro )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTblPro )->( dbGoTo( nRec ) )

return aValores



static function SeleccionPropiedad( aValPrp, oBrwPrp, nPos )

   aValPrp[ nPos ]:lSel   := !aValPrp[ nPos ]:lSel

   if !Empty( oBrwPrp )
      oBrwPrp:Refresh()
   end

Return .T.



static function lSelAllPrp( aValPrp, oBrwPrp, lVal )

   local n := 0

   for n:= 1 to Len( aValPrp )
      aValPrp[ n ]:lSel    := lVal
   next

   if !Empty( oBrwPrp )
      oBrwPrp:Refresh()
   end

return .T.



Static Function EndEdtVta( aValPrp1, aValPrp2, aTmp, aGet, oSay, cSay, oBrw, oDlg, dbfTmpVta, nMode, oBrwPrp1, oBrwPrp2 )

   local aVal1
   local aVal2
   local nContAdd    := 0
   local nContEdt    := 0

   if nMode == 1

      do case
         case Len( aValPrp1 ) <> 0 .AND. Len( aValPrp2 ) == 0

            for each aVal1 in aValPrp1

               if aVal1:lsel

                  if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODART" ) ) ] + aVal1:cCodPrp + Space( 10 ) + aVal1:cValPrp + Space( 10 ) ) )

                     aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ] := aVal1:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR1" ) ) ] := aVal1:cValPrp

                     WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                     nContEdt++

                  else

                     aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ] := aVal1:cCodPrp
                     aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR1" ) ) ] := aVal1:cValPrp

                     WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                     nContAdd++

                  end

               end

            next

            msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

            lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

         case Len( aValPrp1 ) <> 0 .AND. Len( aValPrp2 ) <> 0

            for each aVal1 in aValPrp1

               for each aVal2 in aValPrp2

                  if aVal1:lSel .AND. aVal2:lSel

                     if ( dbfTmpVta )->( dbSeek( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODART" ) ) ] + aVal1:cCodPrp + aVal2:cCodPrp + aVal1:cValPrp + aVal2:cValPrp ) )

                        aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ] := aVal1:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR1" ) ) ] := aVal1:cValPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ] := aVal2:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR2" ) ) ] := aVal2:cValPrp

                        WinGather( aTmp, , dbfTmpVta, oBrw, 2, , .F. )

                        nContEdt++

                     else

                        aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ] := aVal1:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR1" ) ) ] := aVal1:cValPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ] := aVal2:cCodPrp
                        aTmp[ ( dbfTmpVta )->( FieldPos( "CVALPR2" ) ) ] := aVal2:cValPrp

                        WinGather( aTmp, , dbfTmpVta, oBrw, 1, , .F. )

                        nContAdd++

                     end

                  end

               next

            next

            msgWait( "He añadido " + AllTrim( Str( nContAdd ) ) + " registros y he modificado " + AllTrim( Str( nContEdt ) ) + " registros", "Proceso terminado con éxito", 2 )

            lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

      end

   else

      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1") ) ]   := oSay[ 1 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2") ) ]   := oSay[ 2 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3") ) ]   := oSay[ 3 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4") ) ]   := oSay[ 4 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5") ) ]   := oSay[ 5 ]:nAt
      aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6") ) ]   := oSay[ 6 ]:nAt

      WinGather( aTmp, aGet, dbfTmpVta, oBrw, nMode )

      oDlg:End( 1 )

   end

   if !Empty( oBrw )
      oBrw:Refresh()
   end

RETURN ( nil )



static function lLimpiarPantalla( aValPrp1, aValPrp2, aTmp, aGet, oBrwPrp1, oBrwPrp2, oSay, cSay, dbfTmpVta )

   local aValPrp
   local cCodArt           := aTmp[ ( dbfTmpVta )->( FieldPos( "CCODART" ) ) ]
   local cCodPrp1          := aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ]
   local cCodPrp2          := aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ]





   for each aValPrp in aValPrp1
      aValPrp:lSel         := .F.
   next

   if !Empty( oBrwPrp1 )
      oBrwPrp1:Refresh()
   end

   for each aValPrp in aValPrp2
      aValPrp:lSel         := .F.
   next

   if !Empty( oBrwPrp2 )
      oBrwPrp2:Refresh()
   end





   aCopy( dbBlankRec( dbfTmpVta ), aTmp )

   aTmp[ ( dbfTmpVta )->( FieldPos( "CCODART" ) ) ]   := cCodArt
   aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR1" ) ) ]   := cCodPrp1
   aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ]   := cCodPrp2

   cSay[1]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr1" ) ) ], 1 ) ]
   cSay[2]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr2" ) ) ], 1 ) ]
   cSay[3]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr3" ) ) ], 1 ) ]
   cSay[4]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr4" ) ) ], 1 ) ]
   cSay[5]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr5" ) ) ], 1 ) ]
   cSay[6]                 := aBenefSobre[ Max( aTmp[ ( dbfTmpVta )->( fieldpos( "nBnfSbr6" ) ) ], 1 ) ]

   if !Empty( aGet )
      aEval( aGet, {| o | if( !Empty( o ), o:Refresh(), ) } )
   end

   if !Empty( oSay )
      aEval( oSay, {| o | if( !Empty( o ), o:Refresh(), ) } )
   end

return ( .T. )






STATIC FUNCTION EdtCodebar( aTmp, aGet, dbfTmpCodebar, oBrw, bWhen, bValid, nMode, aArt )

    local oDlg
   local cOldCodebar                                     := aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]

   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ]  := aArt[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]
   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ]  := aArt[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "codigos de barras", "ArtCode",, .F.,,,,,, .F.,,,,,, .F., )






      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( lCalEan13( aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ] ) )}, nil, "Calc_16",, )





      aGet[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ] := TCheckBox():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ], aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )














      aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lPrpAct(   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr1" ) ) ] ) )}, nil, "LUPA", 122, 121 )










      aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:= u ) }, oDlg,, "@!", {||    ( lPrpAct(   aTmp[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ], dbfTblPro ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( brwPrpAct( aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ], aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:oHelpText, aTmp[ ( dbfTmpCodebar )->( FieldPos( "cCodPr2" ) ) ] ) )}, nil, "LUPA", 132, 131 )




      TButton():ReDefine( 1, {||( SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode ) } )


      oDlg:bStart          := {||   aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr1" ) ) ]:lValid(), aGet[ ( dbfTmpCodebar )->( FieldPos( "cValPr2" ) ) ]:lValid() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Static Function SaveCodebar( aTmp, aGet, cOldCodebar, oBrw, oDlg, dbfTmpCodebar, nMode )

   local nRec
   local lDef  := .F.





   if dbSeekCodebar( aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], dbfTmpCodebar, cOldCodebar, .T. )
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()
      return .F.
   end





   if dbSeekInOrd( aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ], "cCodBar", dbfCodebar )



      if ( dbfCodebar )->cCodArt <> aTmp[ ( dbfTmpCodebar )->( fieldPos( "cCodArt" ) ) ] .AND. !ApoloMsgNoYes( "El código de barras se ha introducido para el artículo: "  + AllTrim( ( dbfCodebar )->cCodArt ) + " - " + AllTrim( RetFld( ( dbfCodebar )->cCodArt, dbfArticulo ) ) ,"¿Desea introducirlo en éste artículo?" )

         aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
         aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()

         return .F.

      end

   end

   if aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]

      nRec     := ( dbfTmpCodebar )->( Recno() )

      ( dbfTmpCodebar )->( dbGoTop() )
      while !( dbfTmpCodebar )->( eof() )
         ( dbfTmpCodebar )->lDefBar  := .F.
         ( dbfTmpCodebar )->( dbSkip() )
      end

      ( dbfTmpCodebar )->( dbGoTo( nRec ) )

      lDef     := .T.

   end

   WinGather( aTmp, aGet, dbfTmpCodebar, oBrw, nMode )

   if lEntCon() .AND. nMode == 1
      MsgWait( "Código de barras aceptado", , 0.1 )

      if lDef
         aTmp[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ] := .F.
         aGet[ ( dbfTmpCodebar )->( fieldpos( "lDefBar" ) ) ]:Refresh()
      end

      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SetFocus()
      aGet[ ( dbfTmpCodebar )->( fieldPos( "cCodBar" ) ) ]:SelectAll()
   else
      oDlg:end( 1 )
   end

Return .T.



Function dbSeekCodebar( cCodBar, dbfCodebar, cCodExc, lMessage )

   local lSeek
   local nOrdenAnterior
   local nRegistroAnterior

   IIF( cCodExc == nil, cCodExc := "", ) ;
   IIF( lMessage == nil, lMessage := .T., ) ;

   if Empty( cCodBar )
      if lMessage
         MsgBeepWait( "Código de barras no puede estar vacío", "Atención", 1 )
      end
      return .T.
   end

   nRegistroAnterior       := ( dbfCodebar )->( Recno() )
   nOrdenAnterior          := ( dbfCodebar )->( OrdSetFocus( "cCodBar" ) )

   lSeek                   := !( dbfCodebar )->( dbSeek( cCodBar ) ) .OR. cCodBar == cCodExc
   lSeek                   := !lSeek

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )
   ( dbfCodebar )->( dbGoTo( nRegistroAnterior ) )

   if lMessage .AND. lSeek
      MsgBeepWait( "Código de barras ya existe", "Atención", 1 )
   end

Return ( lSeek )



Static Function StartEdtVta( aTmp, aGet, nMode, oBrwPrp1, oBrwPrp2, oTodasPrp1, oNingunaPrp1, oTodasPrp2, oNingunaPrp2, oBtnOk, oBtnCancel )

   if nMode == 1

      if !Empty( oBtnOk )
         SetWindowText( oBtnOk:hWnd, "Añadir" )
      end

      if !Empty( oBtnCancel )
         SetWindowText( oBtnCancel:hWnd, "Salir" )
      end

   else

      if !Empty( oBtnOk )
         SetWindowText( oBtnOk:hWnd, "Aceptar" )
      end

      if !Empty( oBtnCancel )
         SetWindowText( oBtnCancel:hWnd, "Cancelar" )
      end

   end

   if !Empty( oBrwPrp1 ) .AND. !Empty( oTodasPrp1 ) .AND. !Empty( oNingunaPrp1 )

      if nMode == 2

         oBrwPrp1:Disable()
         oTodasPrp1:Disable()
         oNingunaPrp1:Disable()

      end

   end

   if !Empty( oBrwPrp2 ) .AND. !Empty( oTodasPrp2 ) .AND. !Empty( oNingunaPrp2 )

      if !Empty( aTmp[ ( dbfTmpVta )->( FieldPos( "CCODPR2" ) ) ] )

         oBrwPrp2:Show()
         oTodasPrp2:Show()
         oNingunaPrp2:Show()

         if nMode == 2

            oBrwPrp2:Disable()
            oTodasPrp2:Disable()
            oNingunaPrp2:Disable()

         end

      else

         oBrwPrp2:Hide()
         oTodasPrp2:Hide()
         oNingunaPrp2:Hide()

      end

   end

Return nil



STATIC FUNCTION EdtKit( aTmp, aGet, dbfTmpKit, oBrw, bWhen, bValid, nMode, aTmpArt )

    local oDlg
   local oCos
   local nCos     := 0
   local oValorTot
   local oBtnOk

   if nMode <> 1
      nCos        := nCosto( aTmp[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ], dbfArticulo, dbfArtKit, )
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "escandallos", "ARTKIT",, .F.,,,,,, .F.,,,,,, .F., )










      aGet[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ]:= u ) }, oDlg,, "@!", {||    ( ChkCodKit( aGet, oCos, dbfTmpKit ) )}, "N/W*",,,,, .F., {||         ( nMode == 1 )},, .F., .F.,,,,, {|Self|BrwSelArticulo( aGet[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ], nil, .F., .F., .F. )}, nil, "LUPA",, )






      aGet[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "CDESKIT" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "NUNDKIT" ) ) ]:= u ) }, oDlg,, "@E 999,999.999999",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )

      aGet[ ( dbfTmpKit )->( fieldpos( "nUndKit" ) ) ]:bHelp   := {|| Calculadora( 0, aGet[ ( dbfTmpKit )->( fieldpos( "nUndKit" ) ) ], .F. ) }






      aGet[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "CUNIDAD" ) ) ]:= u ) }, oDlg,, "@!",,,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oCos := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nCos, nCos:= u ) }, oDlg,, cPinDiv,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "lAplDto" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "lAplDto" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||         ( nMode <> 3 )}, .F. )




      TCheckBox():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpKit )->( fieldpos( "lExcPro" ) ) ], aTmp[ ( dbfTmpKit )->( fieldpos( "lExcPro" ) ) ]:= u ) }, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )




      oBtnOk := TButton():ReDefine( 1, {||( lPreSaveKit( aGet, aTmp, dbfTmpKit, dbfArticulo, oBrw, nMode, oDlg, aTmpArt ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )


   oDlg:AddFastKey( 116, {|| oBtnOk:Click() } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



Function lPreSaveKit( aGet, aTmp, dbfTmpKit, dbfArticulo, oBrw, nMode, oDlg, aTmpArt, nCos )

   if Empty( aTmp[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ] )
      msgstop( "El código no puede estar vacío" )
      aGet[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ]:SetFocus()
      Return .F.
   end

   if aTmp[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ] == aTmpArt[ ( dbfArticulo )->( FieldPos( "Codigo" ) ) ]
      MsgStop( "El código es el mismo que el del escandallo", "No se puede introducir" )
      aGet[ ( dbfTmpKit )->( fieldpos( "CREFKIT" ) ) ]:SetFocus()
      Return .F.
   end

   if IsMuebles() .AND. nCos <> nil
      aTmp[ ( dbfTmpKit )->( fieldpos( "nPreKit" ) ) ] := nCos
   end

   WinGather( aTmp, aGet, dbfTmpKit, oBrw, nMode )

return ( oDlg:end( 1 ) )



Static Function ChkCodKit( aGet, oCos, dbfTmpKit )

    local lRet        := .F.
   local cRefKit  := aGet[ ( dbfTmpKit )->( fieldpos( "cRefKit" ) ) ]:varGet()
   local nRecKit  := ( dbfTmpKit   )->( recno() )
    local nRecArt    := ( dbfArticulo )->( recno() )

   if dbSeekInOrd( cRefKit, "Codigo", dbfArticulo )

      if dbSeekInOrd( cRefKit, "cRefKit", dbfTmpKit )

         msgStop( "Código duplicado" )

      else

         aGet[ ( dbfTmpKit )->( fieldpos( "cDesKit" ) ) ]:cText( ( dbfArticulo )->Nombre  )
         aGet[ ( dbfTmpKit )->( fieldpos( "cUnidad" ) ) ]:cText( ( dbfArticulo )->cUnidad )

         oCos:cText( ( dbfArticulo )->pCosto )

         lRet     := .T.

      end

   else

      msgStop( "Código no existe" )

   end

    ( dbfArticulo )->( dbGoTo( nRecArt ) )
   ( dbfTmpKit   )->( dbGoTo( nRecKit ) )

Return ( lRet )



STATIC FUNCTION GetDisk()

    local oDlg
    local oFileName
    local cFileName
    local oProvee
   local cProvee     := Space( 12 )
    local oProvName
   local cProvName   := ""
    local oTipIva
    local cTipIva
    local oIvaName
    local cIvaName
   local nPrc        := 0
    local oPrc
   local oPctBnf1
   local oPctBnf2
   local oPctBnf3
   local oPctBnf4
   local oPctBnf5
   local oPctBnf6
   local nPctBnf1    := 0
    local nPctBnf2        := 0
   local nPctBnf3    := 0
   local nPctBnf4    := 0
   local nPctBnf5    := 0
   local nPctBnf6    := 0
   local lEnd        := .T.

   oDlg = TDialog():New(,,,,, "Infortisa",, .F.,,,,,, .F.,,,,,, .F., )





      oFileName := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFileName, cFileName:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,, {|Self|( oFileName:cText( cGetFile( "*.dbf", "Selección de fichero" ) ) )}, nil, "FOLDER",, )




      oPctBnf1 := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, nPctBnf1, nPctBnf1:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




        oPctBnf2 := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, nPctBnf2, nPctBnf2:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf3 := TGetHlp():ReDefine( 112, { | u | If( PCount()==0, nPctBnf3, nPctBnf3:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf4 := TGetHlp():ReDefine( 113, { | u | If( PCount()==0, nPctBnf4, nPctBnf4:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf5 := TGetHlp():ReDefine( 114, { | u | If( PCount()==0, nPctBnf5, nPctBnf5:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      oPctBnf6 := TGetHlp():ReDefine( 115, { | u | If( PCount()==0, nPctBnf6, nPctBnf6:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )







      oTipIva := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cTipIva, cTipIva:= u ) }, oDlg,, "@!", {||    ( cTiva( oTipIva, dbfIva, oIvaName ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( oTipIva, nil , oIvaName ) )}, nil, "LUPA",, )




        oIvaName := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cIvaName, cIvaName:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )







      oProvee := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cProvee, cProvee:= u ) }, oDlg,, ( Replicate( "X", RetNumCodPrvEmp() ) ), {||    ( cProvee( oProvee, , oProvName ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwProvee( oProvee, oProvName, .F. ) )}, nil, "LUPA",, )




        oProvName := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cProvName, cProvName:= u ) }, oDlg,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )






      oPrc := TMeter():ReDefine( 140, { | u | If( PCount()==0, nPrc, nPrc:= u ) }, ( dbfArticulo )->( lastrec() ), oDlg, .F.,, "Procesando", .F.,,,, )





        TButton():ReDefine( 500, {||(If( ImpTarifa( cFileName, nPctBnf1, nPctBnf2, nPctBnf3, nPctBnf4, nPctBnf5, nPctBnf6, cTipIva, cProvee, oPrc, @lEnd  ), ( oDlg:end( 1 ) ), ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|lEnd},,, oDlg:bRClicked,,, )

   oWndBrw:Refresh()

RETURN NIL



Static Function ImpTarifa( cFileName, nPctBnf1, nPctBnf2, nPctBnf3, nPctBnf4, nPctBnf5, nPctBnf6, cTipIva, cProvee, oPrc, lEnd )

   local oBlock
   local oError
   local dbfExt
   local nPctIva  := 0
   local cCodFam  := ""
   local cCodArt  := ""
   local cNomArt  := ""
   local aStaArt  := aGetStatus( dbfArticulo, .T. )
   local aStaPrv  := aGetStatus( dbfArtPrv )

   ( dbfArtPrv )->( OrdSetFocus( "cRefPrv" ) )

    CursorWait()

   lEnd              := .F.

   if File ( cFileName )

      oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

      dbUseArea( .T., ( cLocalDriver() ), ( cFileName ), ( cCheckArea( "EXTFIL", @dbfExt ) ), if(.F. .OR. .F., !.F., NIL), .F.,, )

      nPctIva        := nIva( dbfIva, cTipIva )
      oPrc:nTotal    := ( dbfExt )->( LastRec() + 1 )

      while !( dbfExt )->( Eof() )





         cCodFam     := cCodFamPrv( cProvee, ( dbfExt )->CodSubFami, dbfFamPrv )
         cCodArt     := Rtrim( cCodFam ) + "." + ( dbfExt )->Codigo

         if !( dbfArticulo )->( dbSeek( cCodArt ) )
            ( dbfArticulo  )->( dbAppend() )
            cNomArt  := OemToAnsi( ( dbfExt )->Titulo )
         else
            ( dbfArticulo )->( dbRLock() )
            cNomArt  := ( dbfArticulo )->Nombre
         end





         ( dbfArticulo )->Codigo  := cCodArt
         ( dbfArticulo )->Nombre  := cNomArt
         ( dbfArticulo )->Familia := cCodFam
         ( dbfArticulo )->pCosto  := ( dbfExt )->Precio

         ( dbfArticulo )->Benef1  := nPctBnf1
         ( dbfArticulo )->Benef2  := nPctBnf2
         ( dbfArticulo )->Benef3  := nPctBnf3
         ( dbfArticulo )->Benef4  := nPctBnf4
         ( dbfArticulo )->Benef5  := nPctBnf5
         ( dbfArticulo )->Benef6  := nPctBnf6

         ( dbfArticulo )->pVenta1 := ( ( dbfArticulo )->PCOSTO * nPctBnf1 / 100 ) + ( dbfArticulo )->PCOSTO
         ( dbfArticulo )->pVenta2 := ( ( dbfArticulo )->PCOSTO * nPctBnf2 / 100 ) + ( dbfArticulo )->PCOSTO
         ( dbfArticulo )->pVenta3 := ( ( dbfArticulo )->PCOSTO * nPctBnf3 / 100 ) + ( dbfArticulo )->PCOSTO
         ( dbfArticulo )->pVenta4 := ( ( dbfArticulo )->PCOSTO * nPctBnf4 / 100 ) + ( dbfArticulo )->PCOSTO
         ( dbfArticulo )->pVenta5 := ( ( dbfArticulo )->PCOSTO * nPctBnf5 / 100 ) + ( dbfArticulo )->PCOSTO
         ( dbfArticulo )->pVenta6 := ( ( dbfArticulo )->PCOSTO * nPctBnf6 / 100 ) + ( dbfArticulo )->PCOSTO

         ( dbfArticulo )->pVtaIva1:= Round( ( ( dbfArticulo )->PVENTA1 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA1, nDecDiv )
         ( dbfArticulo )->pVtaIva2:= Round( ( ( dbfArticulo )->PVENTA2 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA2, nDecDiv )
         ( dbfArticulo )->pVtaIva3:= Round( ( ( dbfArticulo )->PVENTA3 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA3, nDecDiv )
         ( dbfArticulo )->pVtaIva4:= Round( ( ( dbfArticulo )->PVENTA4 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA4, nDecDiv )
         ( dbfArticulo )->pVtaIva5:= Round( ( ( dbfArticulo )->PVENTA5 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA5, nDecDiv )
         ( dbfArticulo )->pVtaIva6:= Round( ( ( dbfArticulo )->PVENTA6 * nPctIva / 100 ) + ( dbfArticulo )->PVENTA6, nDecDiv )

         ( dbfArticulo )->TipoIva := cTipIva
         ( dbfArticulo )->lObs    := .F.

         ( dbfArticulo )->( dbUnLock() )

         oPrc:Set( ( dbfExt )->( RecNo() ) )





         if !( dbfArtPrv )->( dbSeek( cProvee + ( dbfExt )->Codigo ) )
            ( dbfArtPrv )->( dbAppend() )
         else
            ( dbfArtPrv )->( dbRLock() )
         end

         ( dbfArtPrv )->cCodArt  := cCodArt
         ( dbfArtPrv )->cCodPrv  := cProvee
         ( dbfArtPrv )->cRefPrv  := ( dbfExt )->Codigo
         ( dbfArtPrv )->cDivPrv  := cDivEmp()

         ( dbfArtPrv )->( dbUnLock() )

         ( dbfExt )->( dbSkip() )

         oPrc:Set( ( dbfExt )->( RecNo() ) )

         SysRefresh()

      end

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de articulos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      ( dbfExt )->( dbClosearea() )

   else

      MsgStop( "El fichero no existe" )

   end

   SetStatus( dbfArticulo, aStaArt )
   SetStatus( dbfArtPrv,   aStaPrv )

   CursorWE()

   lEnd           := .T.

Return .T.







Function CalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

    local nIvaPct
   local nNewPre  := 0
   local nNewIva  := 0





   if !lSobreCoste .AND. nBnf >= 100
      Return nNewPre
   end

   if lBnf .AND. nCosto <> 0

      if ValType( uTipIva ) == "C"
         nIvaPct  := nIva( dbfIva, uTipIva )
      else
         nIvaPct  := uTipIva
      end

      if lSobreCoste
         nNewPre  := Round( ( nCosto * nBnf / 100 ) + nCosto, nDecDiv )
      else
         nNewPre  := Round( Div( nCosto, ( 1 - ( nBnf / 100 ) ) ), nDecDiv )
      end

      if oGetPrePts <> nil
         oGetPrePts:cText( nNewPre )
      end





      nNewIva     := nNewPre





      if !Empty( cCodImp ) .AND. !Empty( oNewImp )
         nNewIva  += oNewImp:nValImp( cCodImp, .T., nIvaPct )
      end

      nNewIva     += Round( ( nNewIva * nIvaPct / 100 ), nDecDiv )

      if oGetIvaPts <> nil
         oGetIvaPts:cText( nNewIva )
      end

   end

   if oSay <> nil
      oSay:Refresh()
   end

Return nNewPre



Function lCalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

   CalPre( lSobreCoste, nCosto, lBnf, nBnf, uTipIva, oGetPrePts, oGetIvaPts, nDecDiv, cCodImp, oSay )

return .T.



Function cImgArticulo( aTmp )

   local cImagenArt

   if !Empty ( aTmp[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ] )
      cImagenArt  := aTmp[ ( dbfArticulo )->( fieldpos( "cImagen" ) ) ]
   else
      cImagenArt  := cFirstImage( aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ], dbfImg )
   end

   if Empty( GetPath( cImagenArt ) )
      cImagenArt  := uFieldEmpresa( "cDirImg" ) + "\" + cImagenArt
   end

return cImagenArt







Function CalBnfPts( lSobreCoste, lIvaInc, nCosto, nPrePts, oBnf, uTipIva, oGetIvaPts, nDecDiv, cCodImp, oSay, lMargenAjuste, cMargenAjuste )

    local nNewBnf
   local nIvaPct
   local nNewIva  := nPrePts

   if lIvaInc
      return .T.
   end

   if nCosto <> 0

      nPrePts     := Round( nPrePts, nDecDiv )

      nNewBnf     := nPorcentajeBeneficio( lSobreCoste, nPrePts, nCosto )















      if nNewBnf > 0 .AND. nNewBnf < 999
            oBnf:cText( nNewBnf )
      else
            oBnf:cText( 0 )
      end

   end





   if ValType( uTipIva ) == "C"
      nIvaPct     := nIva( dbfIva, uTipIva )
   else
      nIvaPct     := uTipIva
   end





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nNewIva     += oNewImp:nValImp( cCodImp, .T., nIvaPct )
   end





   nNewIva        += ( nNewIva * nIvaPct / 100 )







   if oGetIvaPts <> nil
        oGetIvaPts:cText( nNewIva )
   end

   if oSay <> nil
      oSay:Refresh()
   end

Return .T.







Function CalBnfIva( lSobreCoste, lIvaInc, nCosto, nPrePtsIva, oBnf, uTipIva, oGetBas, nDecDiv, cCodImp, oSay )

    local nNewBnf
    local nNewPre
    local nIvaPct

   if !lIvaInc
      Return .T.
   end

   if ValType( uTipIva ) == "C"
      nIvaPct     := nIva( dbfIva, uTipIva )
   else
      nIvaPct     := uTipIva
   end

   nPrePtsIva     := Round( nPrePtsIva, nDecDiv )





   nNewPre        := Round( nPrePtsIva / ( 1 + nIvaPct / 100 ), nDecDiv )





   if !Empty( cCodImp ) .AND. !Empty( oNewImp )
      nNewPre     -= oNewImp:nValImp( cCodImp, lIvaInc , nIvaPct )
   end





   oGetBas:cText( nNewPre )





   if nCosto <> 0

      nNewBnf     := nPorcentajeBeneficio( lSobreCoste, nNewPre, nCosto )









      if nNewBnf > 0 .AND. nNewBnf < 999
            oBnf:cText( nNewBnf )
      else
            oBnf:cText( 0 )
      end

   end

   if oSay <> nil
      oSay:Refresh()
   end

Return .T.



Static Function nPorcentajeBeneficio( lSobreCoste, nPrecioVenta, nPrecioCosto )

   local nPorcentajeBeneficio := 0

   if lSobreCoste
      nPorcentajeBeneficio    := ( Div( nPrecioVenta, nPrecioCosto ) - 1 ) * 100
   else
      nPorcentajeBeneficio    := ( 1 - Div( nPrecioCosto, nPrecioVenta ) ) * 100
   end

Return ( nPorcentajeBeneficio )



Static Function CalDtoWeb( nImpVta, cTipIva, nDtoInt, oImpInt, oImpIva )

   local nImpWeb  := nImpVta - ( nImpVta * nDtoInt / 100 )

   oImpInt:cText( nImpWeb )
   oImpIva:cText( ( nImpWeb * nIva( dbfIva, cTipIva ) / 100 ) + nImpWeb )

return .T.







































































































































































































































































FUNCTION BrwFamiliaArticulo( oGet, oGet2, lCodeBar, lAppend )

   local oDlg
   local oBrw
   local oBrwFam
   local cPouDiv
   local oGetArticulo
   local cGetArticulo:= Space( 100 )
   local oGetFamilia
   local cGetFamilia := Space( 100 )
   local oCbxFamilia
   local cCbxFamilia := "Nombre"
   local aCbxFamilia := { "Código", "Nombre" }
   local oCbxOrd
   local cCbxOrd     := "Familia + Código"
   local aCbxOrd     := { "Código", "Nombre", "Familia + Código", "Familia + Nombre" }
   local nLevel      := nLevelUsr( "01014" )

   IIF( lCodeBar == nil, lCodeBar := .F., ) ;

   if !OpenFiles( .T. )
      return nil
   end

   ( dbfFam      )->( OrdSetFocus( "cNomFam" ) )
   ( dbfArticulo )->( OrdSetFocus( "cFamCod" ) )

   cPouDiv           := cPouDiv( cDivEmp(), dbfDiv )

   oDlg = TDialog():New(,,,, "Artículos", "HELPARTFAM",, .F.,,,,,, .F.,,,,,, .F., )






      oGetFamilia := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, cGetFamilia, cGetFamilia:= u ) }, oDlg,, "@!",,,,,,, .F.,, {|nKey,nFlags,Self| ( if( AutoSeek( nKey, nFlags, Self, oBrwFam, dbfFam, .T. ), SeekFamilia( dbfFam, dbfArticulo, oCbxOrd, oBrw ), ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxFamilia := TComboBox():ReDefine( 107, { | u | If( PCount()==0, cCbxFamilia, cCbxFamilia:= u ) }, aCbxFamilia, oDlg,,, {|Self|( ( dbfFam )->( ordSetFocus( oCbxFamilia:nAt ) ), ( dbfFam )->( dbGoTop() ), oBrwFam:Refresh() )},,,, .F.,,,,,, )

      oBrwFam                 := IXBrowse():New( oDlg )

      oBrwFam:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFam:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFam:cAlias          := dbfFam
      oBrwFam:nMarqueeStyle   := 5
      oBrwFam:cName           := "Browse.Familias en artículos"

      with object ( oBrwFam:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCodFam"
         :bEditValue       := {|| ( dbfFam )->cCodFam }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxFamilia:Set( oCol:cHeader ) }
      end

      with object ( oBrwFam:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomFam"
         :bEditValue       := {|| ( dbfFam )->cNomFam }
         :nWidth           := 120
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxFamilia:Set( oCol:cHeader ) }
      end

      oBrwFam:bChange      := {|| SeekFamilia( dbfFam, dbfArticulo, oCbxOrd, oBrw ) }

      oBrwFam:CreateFromResource( 103 )






      oGetArticulo := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGetArticulo, cGetArticulo:= u ) }, oDlg,, "@!",,,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfArticulo, .T., if( ( dbfArticulo )->( OrdSetFocus() ) $ "CFAMCOD CFAMNOM", ( dbfFam )->cCodFam, ) ) ) }, .F., .F.,,,,,, nil, "FIND",, )






      oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfArticulo )->( ordSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGetArticulo:SetFocus() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfArticulo
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.Artículos"

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "Codigo"
         :bEditValue       := {|| ( dbfArticulo )->Codigo }
         :nWidth           := 90
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "Nombre"
         :bEditValue       := {|| ( dbfArticulo )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end









      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      if oUser():lCostos()

      with object ( oBrw:AddCol() )
         :cHeader          := "Costo"
         :bStrData         := {|| nCosto( nil, dbfArticulo, dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )





      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfArticulo ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 )},,, .F. )





      TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfArticulo ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 )},,, .F. )




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 113,       {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdit, dbfArticulo ), ) } )
      oDlg:AddFastKey( 114,       {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdit, dbfArticulo ), ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

      oDlg:bStart := {|| oBrwFam:Load(), oBrw:Load() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if lCodeBar
         oGet:cText( ( dbfArticulo )->CodeBar )
      else
         oGet:cText( ( dbfArticulo )->Codigo )
      end

      if oGet2 <> nil
         oGet2:cText( ( dbfArticulo )->Nombre )
      end

   end

   CloseFiles()





   oBrw:CloseData()

RETURN oDlg:nResult == 1



Static Function SeekFamilia( dbfFam, dbfArticulo, oCbxOrd, oBrw )

   ( dbfArticulo )->( OrdScope( 0, nil ) )
   ( dbfArticulo )->( OrdScope( 1, nil ) )

   if !Empty( ( dbfFam )->cCodFam ) .AND. ( dbfArticulo )->( dbSeek( ( dbfFam )->cCodFam ) )

      ( dbfArticulo )->( OrdScope( 0, ( dbfFam )->cCodFam ) )
      ( dbfArticulo )->( OrdScope( 1, ( dbfFam )->cCodFam ) )

   end

   ( dbfArticulo )->( dbGoTop() )

   oCbxOrd:Set( "Familia + Código" )

   oBrw:Refresh()

Return .T.



FUNCTION cArticulo( aGet, dbfArticulo, aGet2, lCodeBar )

   local oBlock
   local oError
    local nOrdAnt
    local lClose         := .F.
    local lValid        := .F.
    local cCodArt        := aGet:varGet()

    IIF( lCodeBar == nil, lCodeBar := .F., ) ;

    IF Empty( cCodArt )
        RETURN .T.
    end

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

    IF dbfArticulo == NIL
      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
        lClose := .T.
    end

    IF lCodeBar
        nOrdAnt    := ( dbfArticulo )->( ordSetFocus( "CODEBAR" ) )
   ELSE
      nOrdAnt  := ( dbfArticulo )->( ordSetFocus( "CODIGO" ) )
    end

    IF (dbfArticulo)->( DbSeek( cCodArt ) )

        IF lCodeBar
            aGet:cText( (dbfArticulo)->CODEBAR )
        ELSE
            aGet:cText( (dbfArticulo)->CODIGO )
        end

      IF aGet2 <> nil
            aGet2:cText( (dbfArticulo)->NOMBRE )
        end

      lValid   := .T.

    ELSE

      msgStop( "Artículo no encontrado", "Cadena buscada : " + cCodArt )

    end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   IF lClose
        ( dbfArticulo )->( dbCloseArea() )
    end

    IF lCodeBar
        ( dbfArticulo )->( ordSetFocus( nOrdAnt ) )
    end

RETURN lValid



STATIC FUNCTION CheckValid( aGet, dbf, nTag, nMode )

    Local nOldTag
   Local xClave   := aGet:VarGet()
   Local lReturn  := .T.

    IIF( nTag == nil, nTag := 1, ) ;
   IIF( dbf == nil, dbf := Alias(), ) ;

   if ( nMode == 1 ) .OR. ( nMode == 4 )

      if Empty( xClave )
         Return .F.
      end





      nOldTag     := ( dbf )->( OrdSetFocus( nTag ) )

      if Existe( xClave, dbf )
         MsgStop( "Clave existente" )
         lReturn  := .F.
      else
         aGet:cText( xClave )
      end

      ( dbf )->( OrdSetFocus( nOldTag ) )

   end

RETURN lReturn



STATIC FUNCTION DelDetalle( cCodArt )

   local nOrdAnt  := ( dbfArtPrv )->( OrdSetFocus( 1 ) )

   InitWait()





   if ( dbfArtPrv )->( dbSeek( cCodArt ) )

      while ( ( dbfArtPrv )->cCodArt == cCodArt )

         if dbLock( dbfArtPrv )
            ( dbfArtPrv )->( dbDelete() )
            ( dbfArtPrv )->( dbUnLock() )
         end

         ( dbfArtPrv )->( dbSkip( 1 ) )

      end

   end

   ( dbfArtPrv )->( OrdSetFocus( nOrdAnt ) )






   if ( dbfCodebar )->( dbSeek( cCodArt ) )

      while ( dbfCodebar )->cCodArt == cCodArt .AND. !( dbfCodebar )->( eof() )

         if dbLock( dbfCodebar )
            ( dbfCodebar )->( dbDelete() )
            ( dbfCodebar )->( dbUnLock() )
         end

         ( dbfCodebar )->( dbSkip() )

      end

   end





   if ( dbfOfe )->( dbSeek( cCodArt ) )

      while ( dbfOfe )->cArtOfe == cCodArt .AND. !( dbfOfe )->( eof() )

         if dbLock( dbfOfe )
            ( dbfOfe )->( dbDelete() )
            ( dbfOfe )->( dbUnLock() )
         end

         ( dbfOfe )->( dbSkip() )

      end

   end





   while ( dbfOfe )->( dbSeek( cCodArt ) )
      if dbLock( dbfOfe )
         ( dbfOfe )->( dbDelete() )
         ( dbfOfe )->( dbUnLock() )
      end
   end





   if ( dbfArtKit )->( dbSeek( cCodArt ) )

      while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )

         if dbLock( dbfArtKit )
            ( dbfArtKit )->( dbDelete() )
            ( dbfArtKit )->( dbUnLock() )
         end

         ( dbfArtKit )->( dbSkip() )

      end

   end





   if ( dbfArtVta )->( dbSeek( cCodArt ) )

      while ( dbfArtVta )->cCodArt == cCodArt .AND. !( dbfArtVta )->( eof() )

         if dbLock( dbfArtVta )
            ( dbfArtVta )->( dbDelete() )
            ( dbfArtVta )->( dbUnLock() )
         end

         ( dbfArtVta )->( dbSkip() )

      end

   end

   EndWait()

RETURN NIL














































FUNCTION AppRefPrv( cRefPrv, cCodPrv, cCodArt, nDtoPrv, nDtoPrm, cDivPrv, nImpPrv, dbfArtPrv )

   local nOrdAnt

   if nImpPrv <= 0
      Return nil
   end

   nOrdAnt        := ( dbfArtPrv )->( OrdSetFocus( "cCodPrv" ) )





   if !( dbfArtPrv)->( dbSeek( cCodPrv + cCodArt ) )
      if dbAppe( dbfArtPrv )
         ( dbfArtPrv )->cCodArt  := cCodArt
         ( dbfArtPrv )->cCodPrv  := cCodPrv
         ( dbfArtPrv )->cRefPrv  := cRefPrv
         ( dbfArtPrv )->nDtoPrv  := nDtoPrv
         ( dbfArtPrv )->nDtoPrm  := nDtoPrm
         ( dbfArtPrv )->cDivPrv  := cDivPrv
         ( dbfArtPrv )->nImpPrv  := nImpPrv
         ( dbfArtPrv )->( dbUnLock() )
      end
   else
      if dbLock( dbfArtPrv )
         ( dbfArtPrv )->nDtoPrv  := nDtoPrv
         ( dbfArtPrv )->nDtoPrm  := nDtoPrm
         ( dbfArtPrv )->cDivPrv  := cDivPrv
         ( dbfArtPrv )->nImpPrv  := nImpPrv
         ( dbfArtPrv )->( dbUnLock() )
      end
   end

   ( dbfArtPrv )->( OrdSetFocus( nOrdAnt ) )

Return nil



Function nRetPreCosto( dbfArticulo, cCodArt )

    local nPreCos     := 0
    local nOrdAnt     := ( dbfArticulo )->( OrdSetFocus( 1 ) )
    local nRecno     := ( dbfArticulo )->( RecNo() )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      nPreCos     := ( dbfArticulo )->pCosto
   end

    ( dbfArticulo )->( dbGoTo( nRecno ) )
    ( dbfArticulo )->( OrdSetFocus( nOrdAnt ) )

Return nPreCos



FUNCTION nUnitEnt( dbfLine )

    local nUnits
   local nCajas   := (dbfLine)->nCanEnt

   if nCajas == 0
      nCajas      := 1
   end

   if lCalCaj()
      nUnits      := nCajas * ( dbfLine )->nUniCaja
   else
      nUnits      := ( dbfLine )->nUniCaja
   end

RETURN ( nUnits )






Static Function SetPtsEur( oWndBrw, oBtnEur )

   lEuro          := !lEuro

   oWndBrw:Refresh()
   oWndBrw:SetFocus()

Return nil







FUNCTION retPvd( cCodArt, cCodDiv, nChgDiv, dbfArt, dbfDiv )

    local nPvp            := 0

    IIF( nChgDiv == nil, nChgDiv := 0, ) ;

    IF ( dbfArt )->( dbSeek( cCodArt ) )

    nPvp  := ( dbfArt )->PVTAIVA1





        IF ( dbfDiv )->( dbSeek( ( dbfArt )->CODIGO + cCodDiv ) )

      nPvp  := ( dbfDiv )->NPVDDIV

        ELSE





            IF nChgDiv <> 0
            nPvp := Div( nPvp, nChgDiv )
            end

        end

    end

RETURN ( nPvp )







FUNCTION retPvp( cCodArt, cCodDiv, nChgDiv, dbfArt, dbfDiv )

    local nPvp            := 0

    IIF( nChgDiv == nil, nChgDiv := 0, ) ;

    IF ( dbfArt )->( dbSeek( cCodArt ) )

        nPvp    := ( dbfArt )->PVTAIVA3





        IF ( dbfDiv )->( dbSeek( ( dbfArt )->CODIGO + cCodDiv ) )

         nPvp  := ( dbfDiv )->nPvpDiv

        ELSE





            IF nChgDiv <> 0
            nPvp := Div( nPvp, nChgDiv )
            end

        end

    end

RETURN ( nPvp )



FUNCTION RetImg( cCodArt, dbfArt )

   local cImg        := ""
   local nOrd        := ( dbfArt )->( OrdSetFocus( 1 ) )

   if ( dbfArt )->( dbSeek( cCodArt ) )
      cImg           := ( dbfArt )->cImagen
   end

   ( dbfArt )->( OrdSetFocus( nOrd ) )

RETURN ( cImg )




STATIC FUNCTION ChgPrc( dbfArticulo, oWndBrw )

    local oDlg
   local nOrd           := ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
   local nRec           := ( dbfArticulo )->( Recno() )
   local oMtr
   local nMtr           := 0
   local cFam           := Space( 8 )
    local oFam
   local cTxtFam        := "Todas"
    local oTxtFam
   local cTipIva        := Space( 1 )
    local oTipIva
   local cTxtIva        := "Todos"
    local oTxtIva
   local lCosto         := .F.
   local lTarifa1       := .F.
   local lTarifa2       := .F.
   local lTarifa3       := .F.
   local lTarifa4       := .F.
   local lTarifa5       := .F.
   local lTarifa6       := .F.
   local lPesVol        := .F.
   local oRad
   local nRad           := 1
   local nPctInc        := 0
   local nUndInc        := 0
   local lRnd           := .F.
   local oMargenAjuste
   local lMargenAjuste  := .F.
   local cMargenAjuste  := ""
   local nDec           := nRouDiv( cDivEmp(), dbfDiv )
   local aComBox        :=  { "Precio actual", "Precio costo", "Precio 1", "Precio 2", "Precio 3", "Precio 4", "Precio 5", "Precio 6" }
   local oComBox
   local cComBox        := "Precio actual"
   local cArtOrg
   local cArtDes
   local oArtOrg
   local oArtDes
   local oSayArtOrg
   local oSayArtDes
   local cSayArtOrg
   local cSayArtDes
   local oGetTip
   local cGetTip        := Space(3)
   local oTxtTip
   local cTxtTip        := "Todos"





    oDlg = TDialog():New(,,,,, "CHGPRE",, .F.,,,,,, .F.,,,,,, .F., )

   cArtOrg              := dbFirst( dbfArticulo, 1 )
   cArtDes              := dbLast ( dbfArticulo, 1 )
   cSayArtOrg           := dbFirst( dbfArticulo, 2 )
   cSayArtDes           := dbLast ( dbfArticulo, 2 )






   oArtOrg := TGetHlp():ReDefine( 60, { | u | If( PCount()==0, cArtOrg, cArtOrg:= u ) }, oDlg,,, {||    cArticulo( oArtOrg, dbfArticulo, oSayArtOrg )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwSelArticulo( oArtOrg, oSayArtOrg, .F., .F., .F. )}, nil, "LUPA",, )




   oSayArtOrg := TGetHlp():ReDefine( 70, { | u | If( PCount()==0, cSayArtOrg, cSayArtOrg:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oArtDes := TGetHlp():ReDefine( 80, { | u | If( PCount()==0, cArtDes, cArtDes:= u ) }, oDlg,,, {||    cArticulo( oArtDes, dbfArticulo, oSayArtDes )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwSelArticulo( oArtDes, oSayArtDes, .F., .F., .F. )}, nil, "LUPA",, )




   oSayArtDes := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, cSayArtDes, cSayArtDes:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oFam := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cFam, cFam:= u ) }, oDlg,,, {||     ( cFamilia( oFam, , oTxtFam ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFamilia( oFam, oTxtFam ) )}, nil, "LUPA",, )




    oTxtFam := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cTxtFam, cTxtFam:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






   oGetTip := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cGetTip, cGetTip:= u ) }, oDlg,,, {||    ( oTipArt:Existe( oGetTip, oTxtTip, "cNomTip", .T., .T., "0" ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( oTipArt:Buscar( oGetTip, oTxtTip ) )}, nil, "LUPA",, )





   oTxtTip := TGetHlp():ReDefine( 301, { | u | If( PCount()==0, cTxtTip, cTxtTip:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )







    oTipIva := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cTipIva, cTipIva:= u ) }, oDlg,, "@!", {||    ( cTiva( oTipIva, dbfIva, oTxtIva ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwIva( oTipIva, nil, oTxtIva ) )}, nil, "LUPA",, )





    oTxtIva := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cTxtIva, cTxtIva:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )



   TCheckBox():ReDefine( 160, { | u | If( PCount()==0, lCosto, lCosto:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 161, { | u | If( PCount()==0, lTarifa1, lTarifa1:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 162, { | u | If( PCount()==0, lTarifa2, lTarifa2:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 163, { | u | If( PCount()==0, lTarifa3, lTarifa3:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 164, { | u | If( PCount()==0, lTarifa4, lTarifa4:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 165, { | u | If( PCount()==0, lTarifa5, lTarifa5:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 166, { | u | If( PCount()==0, lTarifa6, lTarifa6:= u ) }, oDlg,,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( 168, { | u | If( PCount()==0, lPesVol, lPesVol:= u ) }, oDlg,,,,,,, .F.,, .F. )



   oRad := TRadMenu():Redefine( { | u | If( PCount()==0, nRad, nRad:= u ) }, oDlg,, { 170, 172 },,,,, .F.,, )






    TGetHlp():ReDefine( 171, { | u | If( PCount()==0, nPctInc, nPctInc:= u ) }, oDlg,, "@E 999.99",,,,,,, .F., {||        ( nRad == 1 )},, .F., .T.,,,,,, nil,,, )





    TGetHlp():ReDefine( 173, { | u | If( PCount()==0, nUndInc, nUndInc:= u ) }, oDlg,, cPouDiv,,,,,,, .F., {||        ( nRad == 2 )},, .F., .F.,,,,,, nil,,, )



    TCheckBox():ReDefine( 180, { | u | If( PCount()==0, lRnd, lRnd:= u ) }, oDlg,,,,,,, .F.,, .F. )






    TGetHlp():ReDefine( 190, { | u | If( PCount()==0, nDec, nDec:= u ) }, oDlg,, "@E 9",,,,,,, .F., {||     lRnd},, .F., .T.,,,,,, nil,,, )



   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, lMargenAjuste, lMargenAjuste:= u ) }, oDlg,,,,,,, .F.,, .F. )





















   oMargenAjuste := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cMargenAjuste, cMargenAjuste:= u ) }, {  "#,#0", "#,#5", "#,10", "#,20", "#,50", "#,90", "#,95", "#,99", "#,00", "1,00", "5,00", "9,00", "10,00", "20,00", "50,00", "100,00" }, oDlg,,,,,,, .F., {||     lMargenAjuste},,,,, )





   oComBox := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cComBox, cComBox:= u ) }, aComBox, oDlg,,,,,,, .F.,,,,,, )

   oMtr        := TMeter():ReDefine( 220, { | u | if( pCount() == 0, nMtr, nMtr := u ) }, ( dbfArticulo )->( lastrec() ), oDlg, .F., , "Procesando", .F., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )




   TButton():ReDefine( 1, {||( mkChgPrc( cFam, cGetTip, cTipIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw ))}, oDlg,,, .F.,,,, .F. )





    TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| mkChgPrc( cFam, cGetTip, cTipIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw ) } )

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( dbfArticulo )->( OrdSetFocus( nOrd ) )
   ( dbfArticulo )->( dbGoTo( nRec ) )

   oWndBrw:Refresh()

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION mkChgPrc( cFam, cGetTip, cIva, lCosto, lTarifa1, lTarifa2, lTarifa3, lTarifa4, lTarifa5, lTarifa6, lPesVol, nRad, nPctInc, nUndInc, lRnd, nDec, lMargenAjuste, cMargenAjuste, oComBox, cArtOrg, cArtDes, oMtr, oDlg, oWndBrw )

   local nIva
   local cExpFlt
   local nCounter := 0
   local nPrecio  := oComBox:nAt
   local nRecAct  := ( dbfArticulo )->( RecNo() )

   if !lCosto .AND. !lTarifa1 .AND. !lTarifa2 .AND. !lTarifa3 .AND. !lTarifa4 .AND. !lTarifa5 .AND. !lTarifa6 .AND. !lPesVol
      msgStop( "No ha elegido ningúna tarifa a cambiar." )
      Return .F.
   end

   oDlg:Disable()

   cExpFlt        := "!Deleted() "
   cExpFlt        += '.and. Codigo >= "' + cArtOrg + '"'
   cExpFlt        += '.and. Codigo <= "' + cArtDes + '"'

   if !Empty( cFam )
      cExpFlt     += '.and. Familia == "' + cFam + '"'
   end

   if !Empty( cGetTip )
      cExpFlt     += '.and. cCodTip == "' + cGetTip + '"'
   end

   if !Empty( cIva )
      cExpFlt     += '.and. TipoIva == "' + cIva + '"'
   end

   if CreateFastFilter( cExpFlt, dbfArticulo, .F., oMtr )

      if ApoloMsgNoYes( "Se van a reemplazar " + Alltrim( Trans( ( dbfArticulo )->( OrdKeyCount() ), "9999999" ) ) + " registros.", "¿Desea continuar?" )

         oMtr:SetTotal( ( dbfArticulo )->( OrdKeyCount() ) )

         ( dbfArticulo )->( dbGoTop() )
         while !( dbfArticulo )->( eof() )





            nIva                                      := nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100





            if dbLock( dbfArticulo )

               if lCosto





                  if nRad == 1

                     ( dbfArticulo )->pCosto          := nVal2Change( nPrecio, ( dbfArticulo )->pCosto )
                     ( dbfArticulo )->pCosto          += ( dbfArticulo )->pCosto * nPctInc / 100

                  else

                     ( dbfArticulo )->pCosto          := nVal2Change( nPrecio, ( dbfArticulo )->pCosto )
                     ( dbfArticulo )->pCosto          += nUndInc

                  end





                  if lRnd
                     ( dbfArticulo )->pCosto          := Round( ( dbfArticulo )->pCosto, nDec )
                  end





                  if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                     ( dbfArticulo )->pCosto          := nAjuste( ( dbfArticulo )->pCosto, ( dbfArticulo )->cMarAju )
                  elseif lMargenAjuste
                     ( dbfArticulo )->pCosto          := nAjuste( ( dbfArticulo )->pCosto, cMargenAjuste )
                  end

                  if ( dbfArticulo )->lBnf1
                     ( dbfArticulo )->pVenta1         := CalPre( ( dbfArticulo )->nBnfSbr1 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef1, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva1        := ( ( dbfArticulo )->pVenta1 * nIva ) + ( dbfArticulo )->pVenta1
                  end

                  if ( dbfArticulo )->lBnf2
                     ( dbfArticulo )->pVenta2         := CalPre( ( dbfArticulo )->nBnfSbr2 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef2, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva2        := ( ( dbfArticulo )->pVenta2 * nIva ) + ( dbfArticulo )->pVenta2
                  end

                  if ( dbfArticulo )->lBnf3
                     ( dbfArticulo )->pVenta3         := CalPre( ( dbfArticulo )->nBnfSbr3 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef3, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva3        := ( ( dbfArticulo )->pVenta3 * nIva ) + ( dbfArticulo )->pVenta3
                  end

                  if ( dbfArticulo )->lBnf4
                     ( dbfArticulo )->pVenta4         := CalPre( ( dbfArticulo )->nBnfSbr4 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef4, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva4        := ( ( dbfArticulo )->pVenta4 * nIva ) + ( dbfArticulo )->pVenta4
                  end

                  if ( dbfArticulo )->lBnf5
                     ( dbfArticulo )->pVenta5         := CalPre( ( dbfArticulo )->nBnfSbr5 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef5, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva5        := ( ( dbfArticulo )->pVenta5 * nIva ) + ( dbfArticulo )->pVenta5
                  end

                  if ( dbfArticulo )->lBnf6
                     ( dbfArticulo )->pVenta6         := CalPre( ( dbfArticulo )->nBnfSbr6 <= 1, ( dbfArticulo )->pCosto, .T., ( dbfArticulo )->Benef6, ( dbfArticulo )->TipoIva, nil, nil, nDecDiv, ( dbfArticulo )->cCodImp )
                     ( dbfArticulo )->pVtaIva6        := ( ( dbfArticulo )->pVenta6 * nIva ) + ( dbfArticulo )->pVenta6
                  end

               end





               if lTarifa1

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf1     := .T.
                           ( dbfArticulo )->Benef1    := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr1     := 1
                        ( dbfArticulo )->pVenta1      := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva1     := ( dbfArticulo )->pVenta1 + ( ( dbfArticulo )->pVenta1 * nIva )

                     else





                        ( dbfArticulo )->pVenta1      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta1 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr1  := 1
                           ( dbfArticulo )->pVenta1   += ( dbfArticulo )->pVenta1 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr1  := 2
                           ( dbfArticulo )->pVenta1   += ( dbfArticulo )->pVenta1 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf1           := .F.
                     ( dbfArticulo )->pVenta1         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta1 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta1      := Round( ( dbfArticulo )->pVenta1, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta1      := nAjuste( ( dbfArticulo )->pVenta1, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta1      := nAjuste( ( dbfArticulo )->pVenta1, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva1        := ( ( dbfArticulo )->pVenta1 * nIva ) + ( dbfArticulo )->pVenta1

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva1        := ( ( dbfArticulo )->pVenta1 * nIva ) + ( dbfArticulo )->pVenta1

                     if lRnd
                        ( dbfArticulo )->pVtaIva1     := Round( ( dbfArticulo )->pVtaIva1, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva1     := nAjuste( ( dbfArticulo )->pVtaIva1, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva1     := nAjuste( ( dbfArticulo )->pVtaIva1, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta1         := Round( ( dbfArticulo )->pVtaIva1 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf1 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr1 <= 1
                        ( dbfArticulo )->pVenta1      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef1 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta1      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef1 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva1        := ( ( dbfArticulo )->pVenta1 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta1

                  end

               end





               if lTarifa2

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf2  := .T.
                           ( dbfArticulo )->Benef2 := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr2  := 1
                        ( dbfArticulo )->pVenta2   := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva2  := ( dbfArticulo )->pVenta2 + ( ( dbfArticulo )->pVenta2 * nIva )

                     else





                        ( dbfArticulo )->pVenta2      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta2 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr2  := 1
                           ( dbfArticulo )->pVenta2   += ( dbfArticulo )->pVenta2 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr2  := 2
                           ( dbfArticulo )->pVenta2   += ( dbfArticulo )->pVenta2 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf2           := .F.
                     ( dbfArticulo )->pVenta2         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta2 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta2      := Round( ( dbfArticulo )->pVenta2, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta2      := nAjuste( ( dbfArticulo )->pVenta2, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta2      := nAjuste( ( dbfArticulo )->pVenta2, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva2        := ( ( dbfArticulo )->pVenta2 * nIva ) + ( dbfArticulo )->pVenta2

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva2        := ( ( dbfArticulo )->pVenta2 * nIva ) + ( dbfArticulo )->pVenta2

                     if lRnd
                        ( dbfArticulo )->pVtaIva2     := Round( ( dbfArticulo )->pVtaIva2, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva2     := nAjuste( ( dbfArticulo )->pVtaIva2, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva2     := nAjuste( ( dbfArticulo )->pVtaIva2, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta2         := Round( ( dbfArticulo )->pVtaIva2 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf2 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr2 <= 1
                        ( dbfArticulo )->pVenta2      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef2 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta2      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef2 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva2        := ( ( dbfArticulo )->pVenta2 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta2

                  end

               end





               if lTarifa3

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf3  := .T.
                           ( dbfArticulo )->Benef3 := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr3  := 1
                        ( dbfArticulo )->pVenta3   := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva3  := ( dbfArticulo )->pVenta3 + ( ( dbfArticulo )->pVenta3 * nIva )

                     else





                        ( dbfArticulo )->pVenta3      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta3 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr3  := 1
                           ( dbfArticulo )->pVenta3   += ( dbfArticulo )->pVenta3 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr3  := 2
                           ( dbfArticulo )->pVenta3   += ( dbfArticulo )->pVenta3 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf3           := .F.
                     ( dbfArticulo )->pVenta3         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta3 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta3      := Round( ( dbfArticulo )->pVenta3, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta3      := nAjuste( ( dbfArticulo )->pVenta3, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta3      := nAjuste( ( dbfArticulo )->pVenta3, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva3        := ( ( dbfArticulo )->pVenta3 * nIva ) + ( dbfArticulo )->pVenta3

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva3        := ( ( dbfArticulo )->pVenta3 * nIva ) + ( dbfArticulo )->pVenta3

                     if lRnd
                        ( dbfArticulo )->pVtaIva3     := Round( ( dbfArticulo )->pVtaIva3, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva3     := nAjuste( ( dbfArticulo )->pVtaIva3, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva3     := nAjuste( ( dbfArticulo )->pVtaIva3, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta3         := Round( ( dbfArticulo )->pVtaIva3 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf3 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr3 <= 1
                        ( dbfArticulo )->pVenta3      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef3 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta3      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef3 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva3        := ( ( dbfArticulo )->pVenta3 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta3

                  end

               end

               if lTarifa4

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf4  := .T.
                           ( dbfArticulo )->Benef4 := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr4  := 1
                        ( dbfArticulo )->pVenta4   := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva4  := ( dbfArticulo )->pVenta4 + ( ( dbfArticulo )->pVenta4 * nIva )

                     else





                        ( dbfArticulo )->pVenta4      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta4 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr4  := 1
                           ( dbfArticulo )->pVenta4   += ( dbfArticulo )->pVenta4 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr4  := 2
                           ( dbfArticulo )->pVenta4   += ( dbfArticulo )->pVenta4 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf4           := .F.
                     ( dbfArticulo )->pVenta4         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta4 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta4      := Round( ( dbfArticulo )->pVenta4, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta4      := nAjuste( ( dbfArticulo )->pVenta4, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta4      := nAjuste( ( dbfArticulo )->pVenta4, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva4        := ( ( dbfArticulo )->pVenta4 * nIva ) + ( dbfArticulo )->pVenta4

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva4        := ( ( dbfArticulo )->pVenta4 * nIva ) + ( dbfArticulo )->pVenta4

                     if lRnd
                        ( dbfArticulo )->pVtaIva4     := Round( ( dbfArticulo )->pVtaIva4, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva4     := nAjuste( ( dbfArticulo )->pVtaIva4, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva4     := nAjuste( ( dbfArticulo )->pVtaIva4, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta4         := Round( ( dbfArticulo )->pVtaIva4 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf4 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr4 <= 1
                        ( dbfArticulo )->pVenta4      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef4 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta4      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef4 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva4        := ( ( dbfArticulo )->pVenta4 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta4

                  end

               end





               if lTarifa5

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf5  := .T.
                           ( dbfArticulo )->Benef5 := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr5  := 1
                        ( dbfArticulo )->pVenta5   := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva5  := ( dbfArticulo )->pVenta5 + ( ( dbfArticulo )->pVenta5 * nIva )

                     else





                        ( dbfArticulo )->pVenta5      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta5 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr5  := 1
                           ( dbfArticulo )->pVenta5   += ( dbfArticulo )->pVenta5 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr5  := 2
                           ( dbfArticulo )->pVenta5   += ( dbfArticulo )->pVenta5 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf5           := .F.
                     ( dbfArticulo )->pVenta5         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta5 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta5      := Round( ( dbfArticulo )->pVenta5, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta5      := nAjuste( ( dbfArticulo )->pVenta5, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta5      := nAjuste( ( dbfArticulo )->pVenta5, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva5        := ( ( dbfArticulo )->pVenta5 * nIva ) + ( dbfArticulo )->pVenta5

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva5        := ( ( dbfArticulo )->pVenta5 * nIva ) + ( dbfArticulo )->pVenta5

                     if lRnd
                        ( dbfArticulo )->pVtaIva5     := Round( ( dbfArticulo )->pVtaIva5, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva5     := nAjuste( ( dbfArticulo )->pVtaIva5, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva5     := nAjuste( ( dbfArticulo )->pVtaIva5, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta5         := Round( ( dbfArticulo )->pVtaIva5 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf5 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr5 <= 1
                        ( dbfArticulo )->pVenta5      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef5 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta5      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef5 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva5        := ( ( dbfArticulo )->pVenta5 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta5

                  end

               end





               if lTarifa6

                  if nRad == 1





                     if nPrecio == 2

                        if !lMargenAjuste
                           ( dbfArticulo )->lBnf6  := .T.
                           ( dbfArticulo )->Benef6 := nPctInc
                        end





                        ( dbfArticulo )->nBnfSbr6  := 1
                        ( dbfArticulo )->pVenta6   := ( dbfArticulo )->pCosto + ( ( dbfArticulo )->pCosto * nPctInc / 100 )
                        ( dbfArticulo )->pVtaIva6  := ( dbfArticulo )->pVenta6 + ( ( dbfArticulo )->pVenta6 * nIva )

                     else





                        ( dbfArticulo )->pVenta6      := nVal2Change( nPrecio, ( dbfArticulo )->pVenta6 )

                        if !( dbfArticulo )->lIvaInc





                           ( dbfArticulo )->nBnfSbr6  := 1
                           ( dbfArticulo )->pVenta6   += ( dbfArticulo )->pVenta6 * nPctInc / 100

                        else





                           ( dbfArticulo )->nBnfSbr6  := 2
                           ( dbfArticulo )->pVenta6   += ( dbfArticulo )->pVenta6 * nPctInc / 100

                        end

                     end

                  else

                     ( dbfArticulo )->lBnf6           := .F.
                     ( dbfArticulo )->pVenta6         := nVal2Change( nPrecio, ( dbfArticulo )->pVenta6 ) + nUndInc

                  end





                  if !( dbfArticulo )->lIvaInc

                     if lRnd
                        ( dbfArticulo )->pVenta6      := Round( ( dbfArticulo )->pVenta6, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVenta6      := nAjuste( ( dbfArticulo )->pVenta6, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVenta6      := nAjuste( ( dbfArticulo )->pVenta6, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVtaIva6        := ( ( dbfArticulo )->pVenta6 * nIva ) + ( dbfArticulo )->pVenta6

                  end





                  if ( dbfArticulo )->lIvaInc

                     ( dbfArticulo )->pVtaIva6        := ( ( dbfArticulo )->pVenta6 * nIva ) + ( dbfArticulo )->pVenta6

                     if lRnd
                        ( dbfArticulo )->pVtaIva6     := Round( ( dbfArticulo )->pVtaIva6, nDec )
                     end

                     if ( dbfArticulo )->lMarAju .AND. !Empty( ( dbfArticulo )->cMarAju )
                        ( dbfArticulo )->pVtaIva6     := nAjuste( ( dbfArticulo )->pVtaIva6, ( dbfArticulo )->cMarAju )
                     elseif lMargenAjuste
                        ( dbfArticulo )->pVtaIva6     := nAjuste( ( dbfArticulo )->pVtaIva6, cMargenAjuste )
                     end

                     ( dbfArticulo )->pVenta6         := Round( ( dbfArticulo )->pVtaIva6 / ( 1 + nIva ), nDecDiv )

                  end





                  if ( dbfArticulo )->lBnf6 .AND. nPctInc == 0

                     if ( dbfArticulo )->nBnfSbr6 <= 1
                        ( dbfArticulo )->pVenta6      := Round( ( ( dbfArticulo )->pCosto * ( dbfArticulo )->Benef6 / 100 ) + ( dbfArticulo )->pCosto, nDec )
                     else
                        ( dbfArticulo )->pVenta6      := Round( ( ( dbfArticulo )->pCosto / ( 1 - ( ( dbfArticulo )->Benef6 / 100 ) ) ), nDec )
                     end

                     ( dbfArticulo )->pVtaIva6        := ( ( dbfArticulo )->pVenta6 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ) + ( dbfArticulo )->pVenta6

                  end

               end





               if lPesVol

                  if nRad == 1
                     ( dbfArticulo )->nImpPes      += nVal2Change( nPrecio, ( dbfArticulo )->nImpPes ) * nPctInc / 100
                  else
                     ( dbfArticulo )->nImpPes      += nVal2Change( nPrecio, ( dbfArticulo )->nImpPes ) + nUndInc
                  end

                  if lRnd
                     ( dbfArticulo )->nImpPes      := Round( ( dbfArticulo )->nImpPes, nDec )
                  end

               end

               ( dbfArticulo )->lSndDoc            := .T.

               nCounter++

               ( dbfArticulo )->( dbUnLock() )

            end

            ( dbfArticulo )->( dbSkip() )

            oMtr:Set( ( dbfArticulo )->( OrdKeyNo() ) )

         end

         oMtr:Set( ( dbfArticulo )->( LastRec() ) )

      end

      DestroyFastFilter( dbfArticulo )

      MsgInfo( "Total de registros cambiados " + Trans( nCounter, "999999999" ) )

   end

    ( dbfArticulo )->( dbGoto( nRecAct ) )

   oWndBrw:Refresh()

   oDlg:Enable()

Return .T.



Static Function nVal2Change( nPrecio, nImporte )

   local nVal2Change := 0

   do case
      case nPrecio == 1
         nVal2Change := nImporte
      case nPrecio == 2
         nVal2Change := ( dbfArticulo )->pCosto
      case nPrecio == 3
         nVal2Change := ( dbfArticulo )->pVenta1
      case nPrecio == 4
         nVal2Change := ( dbfArticulo )->pVenta2
      case nPrecio == 5
         nVal2Change := ( dbfArticulo )->pVenta3
      case nPrecio == 6
         nVal2Change := ( dbfArticulo )->pVenta4
      case nPrecio == 7
         nVal2Change := ( dbfArticulo )->pVenta5
      case nPrecio == 8
         nVal2Change := ( dbfArticulo )->pVenta6
   end

RETURN nVal2Change



FUNCTION retCode( cCbaArt, dbfArticulo )

   local lFound
   local cRet  := ""
   local nOrd  := ( dbfArticulo )->( ordSetFocus( "Codigo" ) )

   lFound      := ( dbfArticulo )->( dbSeek( cCbaArt ) )
   if lFound
      cRet     := ( dbfArticulo )->CODIGO
   end

   ( dbfArticulo )->( OrdSetFocus( nOrd ) )





   if !lFound
      nOrd     := ( dbfArticulo )->( ordSetFocus( "CodeBar" ) )

      if ( dbfArticulo )->( dbSeek( cCbaArt ) )
         cRet  := ( dbfArticulo )->CODIGO
      end

      ( dbfArticulo )->( OrdSetFocus( nOrd ) )
   end

RETURN ( cRet )



STATIC FUNCTION lSelArt( lSel, oBrw, dbf, dbfFam )

   IIF( lSel == nil, lSel := !( dbf )->lSndDoc, ) ;

   if dbLock( dbf )
      ( dbf )->lSndDoc  := lSel
      ( dbf )->( dbUnlock() )
   end

   if lSel .AND. ( dbfFam )->( dbSeek( ( dbf )->Familia ) )
      if dbLock( dbfFam )
         ( dbfFam )->lSelDoc := lSel
         ( dbf )->( dbUnlock() )
      end
   end

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL







STATIC FUNCTION lSelectAll( oBrw, dbf, dbfFam, lSel, lTop )

   local nRecAct  := ( dbf )->( Recno() )

   IIF( lSel == nil, lSel := .T., ) ;
   IIF( lTop == nil, lTop := .T., ) ;

   CreateWaitMeter( nil, nil, ( dbf )->( OrdKeyCount() ) )

   if lTop
      ( dbf )->( dbGoTop() )
   end

   while !( dbf )->( eof() )
      lSelArt( lSel, nil, dbf, dbfFam )
      RefreshWaitMeter( ( dbf )->( OrdKeyNo() ) )
      ( dbf )->( dbSkip() )
   end

   ( dbf )->( dbGoTo( nRecAct ) )

   EndWaitMeter()

   if oBrw <> nil
      oBrw:Refresh()
      oBrw:SetFocus()
   end

RETURN NIL




function nLastDay( nMes )

   local cMes     := Str( if( nMes == 12, 1, nMes + 1 ), 2 )
   local cAno     := Str( if( nMes == 12, Year( Date() ) + 1, Year( Date() ) ) )

return ( Ctod( "01/" + cMes + "/" + cAno ) - 1 )



function nFirstDay( nMes )

return ( Ctod( "01/" + Str( nMes, 2 ) + "/" + Str( Year( date() ) ) ) )






function nPdtRecibir( cRef, nUnd, lInc, dbfArticulo )

   local nOrd     := ( dbfArticulo )->( ordSetFocus( 1 ) )

   IIF( lInc == nil, lInc := .T., ) ;

   if ( dbfArticulo )->( dbSeek( cRef ) ) .AND. dbLock( dbfArticulo )
      ( dbfArticulo )->nPdtRec   += if( lInc, nUnd, - nUnd )
      ( dbfArticulo )->( dbUnlock() )
   end

   ( dbfArticulo )->( ordSetFocus( nOrd ) )

return nil






static function lTstFacCnv( aGet, aTmp, oSay )

   if aTmp[( dbfArticulo )->( fieldpos( "LFACCNV" ) ) ]
      return .T.
   else
      aGet[( dbfArticulo )->( fieldpos( "CFACCNV" ) ) ]:cText( Space( 2 ) )
      aGet[( dbfArticulo )->( fieldpos( "CFACCNV" ) ) ]:lValid()
      oSay[5]:cText( "" )
   end

return .F.



FUNCTION EdmArt( cCodRut, cPathTo, oStru, oTipArt )

   local oBlock
   local oError
   local n           := 0
   local cChr
   local fTar
   local cFilEdm
   local cFilOdb
   local nWrote
   local nRead
   local dbf
   local dbfTIva

   IIF( cCodRut == nil, cCodRut := "001", ) ;
   IIF( cPathTo == nil, cPathTo := "C:\INTERS~1\", ) ;

   cCodRut           := SubStr( cCodRut, -3 )

   cFilEdm           := cPathTo + "EARTI" + cCodRut + ".TXT"
   cFilOdb           := cPathTo + "EARTI" + cCodRut + ".ODB"





   IF file( cFilEdm )
      fErase( cFilEdm )
   end

   fTar              := fCreate( cFilEdm )





   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbf ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfTIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   oStru:oMetUno:cText   := "Artículos"
   oStru:oMetUno:SetTotal( ( dbf )->( LastRec() ) )

   while !( dbf )->( eof() )

      if oTipArt:oDbf:Seek( ( dbf )->cCodTip ) .AND. oTipArt:oDbf:lSelect

         cChr  := "+"
         cChr  += EdmRjust( (dbf)->CODIGO, Space( 1 ), 13 )
         cChr  += EdmSubStr( (dbf)->NOMBRE, 1, 30 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA1, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA2, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA3, "@ 9999.99" ), 1, 7 )
         cChr  += EdmSubStr( Trans( (dbf)->PVENTA4, "@ 9999.99" ), 1, 7 )
         cChr  += cCodTerIva( (dbf)->TipoIva, dbfTIva ) + ","
         cChr  += EdmSubStr( Trans( (dbf)->NUNICAJA, "@ 99999" ), 1, 5 )
         cChr  += EdmSubStr( Trans( (dbf)->NPNTVER1, "@ 9999.99" ), 1, 7, .F. )
         cChr  += Chr(13)+Chr(10)

         nWrote:= fwrite( fTar, cChr, nRead )

         oStru:oMetUno:Set( ( dbf )->( ++n ) )







      end

      (dbf)->( dbSkip() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbf     )->( dbCloseArea() )
   ( dbfTIva )->( dbCloseArea() )

   fClose( fTar    )

   if file( FullCurDir() + "CONVER.EXE" )
      WinExec( FullCurDir() + "CONVER.EXE " + cFilEdm + " " + cFilOdb + " 44 -x", 6 )
   end

RETURN NIL



Function cRetPreArt( cCodArt, nTarifa, cCodDiv, lIvaInc, dbfArticulo, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes )

   local nPreArt           := 0
   local aDbfSta           := aGetStatus( dbfArticulo )

   IIF( lBuscaImportes == nil, lBuscaImportes := uFieldEmpresa( "lBusImp" ), ) ;





   ( dbfArticulo )->( ordSetFocus( "CodeBar" ) )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      cCodArt              := ( dbfArticulo )->Codigo
   end

   ( dbfArticulo )->( ordSetFocus( "Codigo" ) )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      nPreArt              := nRetPreArt( nTarifa, cCodDiv, lIvaInc, dbfArticulo, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes )
   end

   SetStatus( dbfArticulo, aDbfSta )

Return ( nPreArt )



FUNCTION nRetPreIva( nTarifa, cCodDiv, dbfArticulo, dbfDiv )

   local nPre        := 0

   IIF( nTarifa == nil, nTarifa := 1, ) ;

   while .T.

      do case
         case nTarifa == 1
            nPre  := ( dbfArticulo )->pVtaIva1
         case nTarifa == 2
            nPre  := ( dbfArticulo )->pVtaIva2
         case nTarifa == 3
            nPre  := ( dbfArticulo )->pVtaIva3
         case nTarifa == 4
            nPre  := ( dbfArticulo )->pVtaIva4
         case nTarifa == 5
            nPre  := ( dbfArticulo )->pVtaIva5
         case nTarifa == 6
            nPre  := ( dbfArticulo )->pVtaIva6
      end

      if nPre == 0 .AND. nTarifa > 1 .AND. lBuscaImportes()
         nTarifa--
         loop
      else
         exit
      end

   end





return ( nPre )



FUNCTION nPreMedCom( cCodArt, cCodAlm, dbfAlbPrvT, dbfAlbPrvL, dbfFacPrvT, dbfFacPrvL, nDiv, nDecOut, nDerOut, dbfHisMov )

   local nPreMed  := 0
   local nTotUni  := 0
   local nTotPre  := 0
   local nOrdAlb  := ( dbfAlbPrvL )->( ordSetFocus( "cRef" ) )
   local nOrdFac  := ( dbfFacPrvL )->( ordSetFocus( "cRef" ) )
   local nOrdMov  := ( dbfHisMov )->( ordSetFocus( "cRefMov" ) )

   if nDiv == 0
      nDiv        := 1
   end

   if ( dbfAlbPrvL )->( dbSeek( cCodArt ) )

      while ( dbfAlbPrvL )->cRef == cCodArt .AND. !( dbfAlbPrvL )->( Eof() )


         if !lFacAlbPrv( ( dbfAlbPrvL )->cSerAlb + Str( ( dbfAlbPrvL )->nNumAlb ) + ( dbfAlbPrvL )->cSufAlb, dbfAlbPrvT ) .AND.  ( dbfAlbPrvL )->cAlmLin == cCodAlm .OR. Empty( cCodAlm )

            nTotUni += nTotNAlbPrv( dbfAlbPrvL )
            nTotPre += nImpLAlbPrv( dbfAlbPrvT, dbfAlbPrvL, nDecOut, nDerOut, nDiv )

         end

         ( dbfAlbPrvL )->( dbSkip() )

      end

   end

   if ( dbfFacPrvL )->( dbSeek( cCodArt ) )

      while ( dbfFacPrvL )->cRef == cCodArt .AND. !( dbfFacPrvL )->( Eof() )

         if ( dbfFacPrvL )->cAlmLin == cCodAlm .OR. Empty( cCodAlm )

            nTotUni += nTotNFacPrv( dbfFacPrvL )
            nTotPre += nImpLFacPrv( dbfFacPrvT, dbfFacPrvL, nDecOut, nDerOut, nDiv )

         end

         ( dbfFacPrvL )->( dbSkip() )

      end

   end

   if ( dbfHisMov )->( dbSeek( cCodArt ) )

      while ( dbfHisMov )->cRefMov == cCodArt .AND. !( dbfHisMov )->( Eof() )

         if ( dbfHisMov )->cAliMov == cCodAlm .OR. Empty( cCodAlm )

            nTotUni += nTotNMovAlm( dbfHisMov )
            nTotPre += ( dbfHisMov )->nPreDiv

         end

         ( dbfHisMov )->( dbSkip() )

      end

   end

   if nTotUni <> 0
      nPreMed     := Round( Div( Div( nTotPre, nTotUni ), nDiv ), nDecOut )
   end

   ( dbfAlbPrvL )->( ordSetFocus( nOrdAlb ) )
   ( dbfFacPrvL )->( ordSetFocus( nOrdFac ) )
   ( dbfHisMov )->( ordSetFocus( nOrdMov ) )

return ( nPreMed )



Function nCostoTmp( aTmp, dbfTmpKit, dbfArticulo, dbfArtKit, lPic, cDivRet, dbfDiv )

   local nCosto   := 0
   local nOrdArt  := ( dbfArticulo )->( OrdSetFocus( 1 ) )
   local nRecArt  := ( dbfArticulo )->( Recno() )
   local nRecKit  := ( dbfTmpKit )->( Recno() )

   IIF( lPic == nil, lPic := .F., ) ;

   if aTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ]

      ( dbfTmpKit )->( dbGoTop() )
      while !( dbfTmpKit )->( eof() )
         nCosto   += nCosto( ( dbfTmpKit )->cRefKit, dbfArticulo, dbfArtKit ) * nFactorConversion( ( dbfTmpKit )->cRefKit, dbfArticulo ) * ( dbfTmpKit )->nUndKit
         ( dbfTmpKit )->( dbSkip() )
      end

   end

   ( dbfArticulo )->( OrdSetFocus( nOrdArt ) )
   ( dbfArticulo )->( dbGoTo( nRecArt ) )
   ( dbfTmpKit   )->( dbGoTo( nRecKit ) )

   if dbfDiv <> nil
      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto   := nCnv2Div( nCosto, cDivEmp(), cDivRet, dbfDiv )
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end
   end

Return ( nCosto )



Function nCostoLin( cCodArt, dbfArticulo, dbfArtKit, lPic, cDivRet, dbfDiv )

   local nCosto

   IIF( lPic == nil, lPic := .F., ) ;

   nCosto         := nCosto( cCodArt, dbfArticulo, dbfArtKit, .F., cDivRet, dbfDiv, lPic )
   nCosto         *= ( dbfArtKit )->nUndKit

   if dbfDiv <> nil

      if cDivRet <> nil .AND. cDivRet <> cDivEmp()

         nCosto   := nCnv2Div( nCosto, cDivEmp(), cDivRet, dbfDiv )
         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end

      else

         if lPic
            nCosto:= Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end

      end

   end

return ( nCosto )



function CalPosTactil( oMeter, lMessage )

   local oBlock
   local oError
   local nDouDiv
   local nRouDiv
   local dbfArticulo
   local dbfTikL
   local dbfDiv

   IIF( lMessage == nil, lMessage := .T., ) ;

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if oMeter <> nil .AND. lMessage
      oMeter:nTotal  := ( dbfTikL )->( LastRec() )
   end

   nDouDiv           := nDouDiv( cDivEmp(), dbfDiv )
   nRouDiv           := nRouDiv( cDivEmp(), dbfDiv )

   ( dbfArticulo )->( dbGoTop() )
   while !( dbfArticulo )->( eof() )

      if dbLock( dbfArticulo )
         ( dbfArticulo )->nPosTcl   := 0
         ( dbfArticulo )->( dbUnLock() )
      end

      ( dbfArticulo )->( dbSkip() )
   end

   ( dbfTikL )->( dbGoTop() )
   while !( dbfTikL )->( eof() )

      if ( dbfArticulo )->( dbSeek( ( dbfTikL )->cCbaTil ) )
         if dbLock( dbfArticulo )
            ( dbfArticulo )->nPosTcl   +=  nTotNTpv( dbfTikL )
            ( dbfArticulo )->( dbUnLock() )
         end
      end





      if oMeter <> nil .AND. lMessage
         oMeter:Set( ( dbfTikL )->( OrdKeyNo() ) )
      end

      sysrefresh()

      ( dbfTikL )->( dbSkip() )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfArticulo)->( dbCloseArea() )
   ( dbfTikL    )->( dbCloseArea() )
   ( dbfDiv     )->( dbCloseArea() )

   dbfDiv      := NIL
   dbfTikL     := NIL
   dbfArticulo := NIL

return nil



Function SearchProveedor( oWndBrw )

   local nSea     := 1
    local oDlg
   local nOrd     := ( dbfArtPrv )->( OrdSetFocus( "cRefPrv" ) )
   local oGetPrv
   local cGetPrv  := dbFirst( dbfProv )
   local oSayPrv
   local cSayPrv  := dbFirst( dbfProv, 2 )
   local oGetArt
   local cGetArt  := Space( 18 )
   local oGetBar
   local cGetBar  := Space( 18 )

   oDlg = TDialog():New(,,,,, "SEARCH",, .F.,,,,,, .F.,,,,,, .F., )



      TRadMenu():Redefine( { | u | If( PCount()==0, nSea, nSea:= u ) }, oDlg,, { 120, 121 },,,,, .F.,, )




      oGetBar := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetBar, cGetBar:= u ) }, oDlg,,,,,,,,, .F., {||     ( nSea == 1 )},, .F., .F.,,,,,, nil,,, )







      oGetPrv := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetPrv, cGetPrv:= u ) }, oDlg,,, {||    ( cProvee( oGetPrv, dbfProv, oSayPrv ) )},,,,,, .F., {||     ( nSea == 2 )},, .F., .F.,,,,, {|Self|( BrwProvee( oGetPrv, oSayPrv ) )}, nil, "LUPA",, )




      oSayPrv := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, cSayPrv, cSayPrv:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      oGetArt := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cGetArt, cGetArt:= u ) }, oDlg,,,,,,,,, .F., {||     ( nSea == 2 )},, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( 500, {||( PosProveedor( nSea, cGetPrv, cGetArt, cGetBar, dbfArtPrv, dbfCodeBar, oWndBrw ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart    := {|| oGetBar:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   ( dbfArtPrv )->( OrdSetFocus( nOrd ) )

RETURN NIL



Static Function PosProveedor( nSea, cGetPrv, cGetArt, cGetBar, dbfArtPrv, dbfCodeBar, oWndBrw )

   local nCod
   local nOrd

   if nSea == 1

      if dbSeekInOrd( cGetBar, "cCodBar", dbfCodeBar )
         if dbSeekInOrd( ( dbfCodeBar )->cCodArt, "Codigo", dbfArticulo )
            oWndBrw:Refresh()
         else
            msgStop( "Artículo " + Rtrim( ( dbfCodeBar )->cCodArt ) + " no encontrado." )
         end
      else
         if dbSeekInOrd( cGetBar, "CodeBar", dbfArticulo )
            oWndBrw:Refresh()
         else
            msgStop( "Código de barras " + Rtrim( cGetBar ) + " no encontrado." )
         end
      end

   else

      if ( dbfArtPrv )->( dbSeek( cGetPrv + cGetArt ) )
         nOrd  := ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
         if !( dbfArticulo )->( dbSeek( ( dbfArtPrv )->cCodArt ) )
            msgStop( "Artículo " + Rtrim( ( dbfArtPrv )->cCodArt ) + " no encontrado." )
         else
            oWndBrw:Refresh()
         end
         ( dbfArticulo )->( OrdSetFocus( nOrd ) )
      end

   end

RETURN NIL







Function cCodeBar( cCodArticulo, dbfCodebar )

   local cCodeBar          := ""
   local nOrdenAnterior    := ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

   if ( dbfCodebar )->( dbSeek( cCodArticulo ) )
      cCodeBar             := ( dbfCodebar )->cCodBar
   end

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )

Return ( cCodeBar )



Function bGenEdtArticulo( cCodArt )

   local bGen
   local cDoc           := by( cCodArt )

   bGen                 := {|| EdtArticulo( cDoc ) }

return ( bGen )



Function EdtArticulo( cCodArt, lOpenBrowse )

   local oBlock
   local oError
   local nLevel         := nLevelUsr( "01014" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if lOpenBrowse

      if Articulo()
         if dbSeekInOrd( cCodArt, "Codigo", dbfArticulo )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra artículo" )
         end
      end

   else

      if OpenFiles( .T. )
         if dbSeekInOrd( cCodArt, "Codigo", dbfArticulo )
            WinEdtRec( oWndBrw, bEdit, dbfArticulo )
         else
            MsgStop( "No se encuentra artículo con código " + Rtrim( cCodArt ) )
         end
         CloseFiles()
      end

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error editando artículo" )

   end

   ErrorBlock( oBlock )

RETURN .T.



Function AppArticulo( lOpenBrowse )

   local oBlock
   local oError
   local nLevel         := nLevelUsr( "01014" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 2 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if lOpenBrowse

         if Articulo()
            oWndBrw:RecAdd()
         end

      else

         if OpenFiles( .T. )
            WinAppRec( oWndBrw, bEdit, dbfArticulo )
            CloseFiles()
         end

      end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Error añadiendo artículo" )

   end

   ErrorBlock( oBlock )

RETURN .T.



FUNCTION InfArticulo( cCodArt, oBrw )

   local nLevel   := nLevelUsr( "01014" )

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if !OpenFiles( .T. )
      CloseFiles()
      return nil
   end

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      BrwVtaComArt( ( dbfArticulo )->Codigo, ( dbfArticulo )->Nombre, dbfDiv, dbfIva, dbfAlmT, dbfArticulo )
   else
      MsgStop( "No se encuentra artículo" )
   end

   if oBrw <> nil
      oBrw:Refresh()
   end

   CloseFiles()

RETURN .T.



FUNCTION CargaValorCat( aTmp, aGet, oSay, oValorPunto, oValorDto, oValorTot, nMode, lFastMode )

   local nOrdAnt

   IIF( lFastMode == nil, lFastMode := .F., ) ;

   if !lFastMode



      if cCatOld <> aTmp[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ]                       .AND. ( dbfCatalogo )->( dbSeek( aTmp[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ] ) )   .AND. !(dbfCatalogo)->lObsCat

         if ApoloMsgNoYes(  "¿ Desea actualizar los datos del artículo con los datos del catálogo ?", "Elija una opción" )

            nOrdAnt     := ( dbfTmpPrv )->( OrdSetFocus( "CREFPRV" ) )

            aTmp[ ( dbfArticulo )->( fieldpos( "NPUNTOS" ) ) ]  := ( dbfCatalogo )->nValPunt
            aTmp[ ( dbfArticulo )->( fieldpos( "NDTOPNT" ) ) ]  := ( dbfCatalogo )->nDtoPunt

            if ( dbfTmpPrv )->( dbSeek( ( dbfCatalogo )->cCodProv + Space( 18 ) ) )

               ( dbfTmpPrv )->( dbGoTop() )
               while !( dbfTmpPrv )->( Eof () )
                  if ( dbfTmpPrv )->cCodPrv + ( dbfTmpPrv )->cRefPrv == ( dbfCatalogo )->cCodProv + Space( 18 )
                     ( dbfTmpPrv )->lDefPrv  := .T.
                  else
                     ( dbfTmpPrv )->lDefPrv  := .F.
                  end
               ( dbfTmpPrv )->( dbSkip() )
               end

            else

               ( dbfTmpPrv )->( dbGoTop() )
               while !( dbfTmpPrv )->( Eof () )
                  ( dbfTmpPrv )->lDefPrv  := .F.
               ( dbfTmpPrv )->( dbSkip() )
               end

               ( dbfTmpPrv )->( dbAppend() )
               ( dbfTmpPrv )->cCodPrv        := ( dbfCatalogo )->cCodProv
               ( dbfTmpPrv )->lDefPrv        := .T.

            end

            aTmp[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ]  := ( dbfCatalogo )->cCodProv



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF1"    ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF1"   ) ) ] := ( dbfCatalogo )->Benef1
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR1" ) ) ] := ( dbfCatalogo )->nBnfSbr1
               oSay[ 11 ]:Select( Max( ( dbfCatalogo )->nBnfSbr1, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF1" ) ) ]:lValid()
            end



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ]   := ( dbfCatalogo )->Benef2
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR2" ) ) ] := ( dbfCatalogo )->nBnfSbr2
               oSay[ 12 ]:Select( Max( ( dbfCatalogo )->nBnfSbr2, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ]:lValid()
            end



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ]   := ( dbfCatalogo)->Benef3
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR3" ) ) ] := ( dbfCatalogo )->nBnfSbr3
               oSay[ 13 ]:Select( Max( ( dbfCatalogo )->nBnfSbr3, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ]:lValid()
            end



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ]   := ( dbfCatalogo )->Benef4
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR4" ) ) ] := ( dbfCatalogo )->nBnfSbr4
               oSay[ 14 ]:Select( Max( ( dbfCatalogo )->nBnfSbr4, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ]:lValid()
            end



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ]   := ( dbfCatalogo )->Benef5
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR5" ) ) ] := ( dbfCatalogo )->nBnfSbr5
               oSay[ 15 ]:Select( Max( ( dbfCatalogo )->nBnfSbr5, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ]:lValid()
            end



            if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ]
               aTmp[ ( dbfArticulo )->( fieldpos( "BENEF6" ) ) ]   := ( dbfCatalogo )->Benef6
               aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR6" ) ) ] := ( dbfCatalogo )->nBnfSbr6
               oSay[ 16 ]:Select( Max( ( dbfCatalogo )->nBnfSbr6, 1 ) )
               aGet[ ( dbfArticulo )->( fieldpos( "BENEF6" ) ) ]:lValid()
            end

         end

      end



      oValorPunto:Refresh()

      oValorDto:Refresh()

      oValorTot:Refresh()

      aGet[ ( dbfArticulo )->( fieldpos( "BENEF1" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "BENEF6" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA1" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA2" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA3" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA4" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA5" ) ) ]:Refresh()
      aGet[ ( dbfArticulo )->( fieldpos( "PVTAIVA6" ) ) ]:Refresh()

      ( dbfTmpPrv )->( OrdSetFocus( nOrdAnt ) )

   else


      if cCatOld <> aTmp[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ]                     .AND. ( dbfCatalogo )->( dbSeek( aTmp[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ] ) )

         aTmp[ ( dbfArticulo )->( fieldpos( "NPUNTOS" ) ) ]  := ( dbfCatalogo )->nValPunt
         aTmp[ ( dbfArticulo )->( fieldpos( "NDTOPNT" ) ) ]  := ( dbfCatalogo )->nDtoPunt
         aTmp[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) ) ]  := ( dbfCatalogo )->cCodProv
         oSay[4]:cText( RetProvee( ( dbfCatalogo )->cCodProv ) )



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF1" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF1" ) ) ]   := ( dbfCatalogo )->Benef1
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR1" ) ) ] := ( dbfCatalogo )->nBnfSbr1
         end



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF2" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF2" ) ) ]   := ( dbfCatalogo )->Benef2
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR2" ) ) ] := ( dbfCatalogo )->nBnfSbr2
         end



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF3" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF3" ) ) ]   := ( dbfCatalogo)->Benef3
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR3" ) ) ] := ( dbfCatalogo )->nBnfSbr3
         end



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF4" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF4" ) ) ]   := ( dbfCatalogo )->Benef4
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR4" ) ) ] := ( dbfCatalogo )->nBnfSbr4
         end



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF5" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF5" ) ) ]   := ( dbfCatalogo )->Benef5
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR5" ) ) ] := ( dbfCatalogo )->nBnfSbr5
         end



         if aTmp[ ( dbfArticulo )->( fieldpos( "LBNF6" ) ) ]
            aTmp[ ( dbfArticulo )->( fieldpos( "BENEF6" ) ) ]   := ( dbfCatalogo )->Benef6
            aTmp[ ( dbfArticulo )->( fieldpos( "NBNFSBR6" ) ) ] := ( dbfCatalogo )->nBnfSbr6
         end

      end

      oValorPunto:Refresh()

      oValorDto:Refresh()

      oValorTot:Refresh()

      aGet[ ( dbfArticulo )->( fieldpos( "CPRVHAB" ) )]:Refresh()

      oSay[4]:Refresh()

   end

   cCatOld  := aTmp[ ( dbfArticulo )->( fieldpos( "CCODCAT" ) ) ]

RETURN .T.



function SynArt( cPath )

   local cCod     := ""
   local nCosto   := 0
   local nOrdAnt

   IIF( cPath == nil, cPath := cPatArt(), ) ;

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfArtKit ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFam ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @dbfImg ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRefFec" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "cRefFec" )

   oNewImp              := TNewImp():Create( cPatEmp() )
   if oNewImp:OpenFiles()

      ( dbfArticulo )->( dbGoTop() )

      while !( dbfArticulo )->( eof() )

         if !( dbfArticulo )->lKitArt

            while ( dbfArtKit )->( dbSeek( ( dbfArticulo )->Codigo ) )
               ( dbfArtKit )->( dbDelete() )
            end

         end





         if !Empty( ( dbfArticulo )->cPrvHab )

            if !( dbfArtPrv )->( dbSeek( ( dbfArticulo )->Codigo + ( dbfArticulo )->cPrvHab ) )

               if ( dbfArtPrv )->( dbSeek( ( dbfArticulo )->Codigo ) )

                  while ( dbfArtPrv )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfArtPrv )->( eof() )

                     ( dbfArtPrv )->lDefPrv   := .F.

                     ( dbfArtPrv )->( dbSkip() )

                  end

                  ( dbfArtPrv )->( dbAppend() )
                  ( dbfArtPrv )->cCodArt         := ( dbfArticulo )->Codigo
                  ( dbfArtPrv )->cCodPrv         := ( dbfArticulo )->cPrvHab
                  ( dbfArtPrv )->cDivPrv         := cDivEmp()
                  ( dbfArtPrv )->lDefPrv         := .T.
                  ( dbfArtPrv )->( dbUnLock() )

               end

            end

         end





         do case
            case Empty( ( dbfArticulo )->LastChg ) .AND. Empty( ( dbfArticulo )->dFecChg )

               ( dbfArticulo )->LastChg := GetSysDate()
               ( dbfArticulo )->dFecChg := GetSysDate()
               ( dbfArticulo )->( dbUnLock() )

            case Empty( ( dbfArticulo )->LastChg )

               ( dbfArticulo )->LastChg := ( dbfArticulo )->dFecChg

            case Empty( ( dbfArticulo )->dFecChg )

               ( dbfArticulo )->dFecChg := ( dbfArticulo )->LastChg

         end






         if uFieldEmpresa( "lActCos" )

            nCosto                     := nCostoUltimaCompra( ( dbfArticulo )->Codigo, dbfAlbPrvL, dbfFacPrvL )
            if nCosto <> 0
               ( dbfArticulo )->pCosto := nCosto
            end

         end





         nCosto                        := ( dbfArticulo )->pCosto

         if ( dbfArticulo )->lBnf1 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta1   := CalPre( if( ( dbfArticulo )->nBnfSbr1 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef1, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva1  := ( dbfArticulo )->pVenta1 + Round( ( ( dbfArticulo )->pVenta1 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArticulo )->lBnf2 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta2   := CalPre( if( ( dbfArticulo )->nBnfSbr2 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef2, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva2  := ( dbfArticulo )->pVenta2 + Round( ( ( dbfArticulo )->pVenta2 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArticulo )->lBnf3 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta3   := CalPre( if( ( dbfArticulo )->nBnfSbr3 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef3, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva3  := ( dbfArticulo )->pVenta3 + Round( ( ( dbfArticulo )->pVenta3 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArticulo )->lBnf4 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta4   := CalPre( if( ( dbfArticulo )->nBnfSbr4 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef4, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva4  := ( dbfArticulo )->pVenta4 + Round( ( ( dbfArticulo )->pVenta4 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArticulo )->lBnf5 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta5   := CalPre( if( ( dbfArticulo )->nBnfSbr5 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef5, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva5  := ( dbfArticulo )->pVenta5 + Round( ( ( dbfArticulo )->pVenta5 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end

         if ( dbfArticulo )->lBnf6 .AND. nCosto <> 0
            ( dbfArticulo )->pVenta6   := CalPre( if( ( dbfArticulo )->nBnfSbr6 <= 1, .T., .F. ), nCosto, .T., ( dbfArticulo )->Benef6, ( dbfArticulo )->TipoIva, nil, nil, nDouDiv( cDivEmp(), dbfDiv ), ( dbfArticulo )->cCodImp, nil )
            ( dbfArticulo )->pVtaIva6  := ( dbfArticulo )->pVenta6 + Round( ( ( dbfArticulo )->pVenta6 * nIva( dbfIva, ( dbfArticulo )->TipoIva ) / 100 ), nDouDiv( cDivEmp(), dbfDiv ) )
         end





         if !( dbfArticulo )->lCodPrp

            if ( dbfFam )->( dbSeek( ( dbfArticulo )->Familia ) )

               if Empty( ( dbfArticulo )->cCodPrp1 ) .AND. !Empty( ( dbfFam )->cCodPrp1 )
                  ( dbfArticulo )->cCodPrp1  := ( dbfFam )->cCodPrp1
               end

               if Empty( ( dbfArticulo )->cCodPrp2 ) .AND. !Empty( ( dbfFam )->cCodPrp2 )
                  ( dbfArticulo )->cCodPrp2  := ( dbfFam )->cCodPrp2
               end

            end

            ( dbfArticulo )->lCodPrp         := .T.

         end





         if Empty( ( dbfArticulo )->Codebar )

            nOrdAnt                           := ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

            if ( dbfCodebar )->( dbSeek( ( dbfArticulo )->Codigo ) )
               ( dbfArticulo )->CodeBar      := ( dbfCodebar )->cCodBar
            end

             ( dbfCodebar )->( OrdSetFocus( nOrdAnt ) )

         end





         if ( dbfArticulo )->nFacCnv == 0
            ( dbfArticulo )->nFacCnv := 1
         end





         if !Empty( ( dbfArticulo )->cImagenWeb )

            ( dbfImg )->( __dbLocate( { || Rtrim( ( dbfImg )->cImgArt ) == Rtrim( ( dbfArticulo )->cImagenWeb ) } ) )
            if !( dbfImg )->( Found() )

               ( dbfImg )->( dbAppend() )
               ( dbfImg )->cCodArt   := ( dbfArticulo )->Codigo
               ( dbfImg )->cImgArt   := ( dbfArticulo )->cImagenWeb
               ( dbfImg )->( dbUnLock() )

            end

         end





         if !dbSeekInOrd( ( dbfArticulo )->Codigo, "lDefImg", dbfImg )

            if dbSeekInOrd( ( dbfArticulo )->Codigo, "cCodArt", dbfImg )
               ( dbfImg )->lDefImg     := .T.
            end

         end





         if ( dbfArticulo )->nTarWeb   < 1
            ( dbfArticulo )->nTarWeb   := 1
         end

         ( dbfArticulo )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         if !( dbfArticulo )->( dbSeek( ( dbfCodebar )->cCodArt ) )
            ( dbfCodebar )->( dbDelete() )
         end

         ( dbfCodebar )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         if Empty( ( dbfCodebar )->cCodBar )
            ( dbfCodebar )->( dbDelete() )
         end

         ( dbfCodebar )->( dbSkip() )

         SysRefresh()

      end






      ( dbfCodebar )->( OrdSetFocus( "cArtBar" ) )

      ( dbfCodebar )->( dbGoTop() )
      while !( dbfCodebar )->( eof() )

         cCod  := ( dbfCodebar )->cCodArt + ( dbfCodebar )->cCodBar

         ( dbfCodebar )->( dbSkip() )

         if ( dbfCodebar )->cCodArt + ( dbfCodebar )->cCodBar == cCod
            ( dbfCodebar )->( dbDelete() )
         end

         SysRefresh()

      end






      ( dbfOfe )->( dbGoTop() )

      while !( dbfOfe )->( eof() )

         if ( dbfOfe )->nTblOfe < 1

            if dbLock( dbfOfe )
               ( dbfOfe )->nTblOfe     := 1
               ( dbfOfe )->( dbUnLock() )
            end

         end

         ( dbfOfe )->( dbSkip() )

         SysRefresh()

      end

   end





   ( dbfArticulo )->( dbCloseArea() )
   ( dbfArtKit   )->( dbCloseArea() )
   ( dbfArtPrv   )->( dbCloseArea() )
   ( dbfFam      )->( dbCloseArea() )
   ( dbfCodebar  )->( dbCloseArea() )
   ( dbfImg      )->( dbCloseArea() )
   ( dbfOfe      )->( dbCloseArea() )
   ( dbfAlbPrvL  )->( dbCloseArea() )
   ( dbfFacPrvL  )->( dbCloseArea() )

   if !Empty( oNewImp )
      oNewImp:End()
   end

return nil



Static Function EndTrans2( aTmp, aGet, oSay, oDlg, nMode )

   local cCod     := aTmp[ ( dbfArticulo )->( fieldpos( "Codigo" ) ) ]





   if Empty( cCod )
      MsgStop( "Código no puede estar vacío" )
      return nil
   end

   if Empty( aTmp[( dbfArticulo )->( fieldpos( "Nombre" ) ) ] )
      MsgStop( "Descripción no puede estar vacío" )
      return nil
   end

   if Empty( oSay[3]:varGet() )
      MsgStop( "Referencia artículo-proveedor no puede estar vacía" )
      return nil
   end

   if ( dbfArticulo )->( dbSeek( cCod ) )
      msgStop( "Código ya existe" )
      return nil
   end





   aTmp[ ( dbfArticulo )->( fieldpos( "Codebar" ) ) ] := cCod
   aTmp[ ( dbfArticulo )->( fieldpos( "lSndDoc" ) ) ] := .T.
   aTmp[ ( dbfArticulo )->( fieldpos( "dFecChg" ) ) ] := GetSysDate()
   aTmp[ ( dbfArticulo )->( fieldpos( "LastChg" ) ) ] := GetSysDate()
   aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ] := cDefIva()
   aTmp[ ( dbfArticulo )->( fieldpos( "lIvaInc" ) ) ] := .F.













   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta1" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr1" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva1") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr1" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef1" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta2" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr2" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva2") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr2" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef2" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta3" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr3" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva3") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr3" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef3" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta4" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr4" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva4") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr4" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef4" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta5" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr5" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva5") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr5" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef5" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVenta6" ) ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr6" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[1]









   aTmp[ ( dbfArticulo )->( fieldpos( "pVtaIva6") ) ] := aCalPrePnt( aTmp[ ( dbfArticulo )->( fieldpos( "nBnfSbr6" ) ) ] <= 1, nPunt2Euro( aTmp, dbfArticulo ), aTmp[ ( dbfArticulo )->( fieldpos( "lBnf6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "Benef6" ) ) ], aTmp[ ( dbfArticulo )->( fieldpos( "TipoIva" ) ) ], nDecDiv, aTmp[ ( dbfArticulo )->( fieldpos( "cCodImp" ) ) ], oNewImp, dbfIva )[2]

   if !Empty( aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ] )

      ( dbfArtPrv )->( dbAppend() )
      ( dbfArtPrv )->cCodArt        := cCod
      ( dbfArtPrv )->cCodPrv        := aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ]
      ( dbfArtPrv )->cRefPrv        := oSay[3]:varGet()
      ( dbfArtPrv )->lDefPrv        := .T.
      ( dbfArtPrv )->( dbUnlock() )

   end



   WinGather( aTmp, aGet, dbfArticulo, nil, nMode )

Return ( oDlg:end( 1 ) )



Static Function EndDetalle( aTmp, aGet, dbfTmpPrv, oBrw, nMode, oDlg, lOldPrvDef, aTmpArt, lOldRefPrv )

   if Empty( aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] )
      msgStop( "El código de proveedor no puede estar vacío" )
      return nil
   end

   if lExixteDetalle( aTmp, dbfTmpPrv, lOldRefPrv )
      msgStop( "La referencia de proveedor ya existe" )
      aGet[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]:SetFocus()
      return nil
   end





   if lOldPrvDef <> aTmp[ ( dbfTmpPrv )->( FieldPos( "lDefPrv" ) ) ]
      lSelPrvDef( aTmp, dbfTmpPrv, oBrw, aTmpArt )
   end

   WinGather( aTmp, aGet, dbfTmpPrv, oBrw, nMode )

Return ( oDlg:end( 1 ) )



Static Function lExixteDetalle( aTmp, dbfTmpPrv, lOldRefPrv )

   local nRecno   := ( dbfTmpPrv )->( RecNo() )
   local nOrdTmp  := ( dbfTmpPrv )->( ordSetFocus( "CREFPRV" ) )
   local lExiste  := .F.

   if lOldRefPrv <> aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ]

      ( dbfTmpPrv )->( dbGoTop() )

      if !( dbfTmpPrv )->( dbSeek( aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ] + aTmp[ ( dbfTmpPrv )->( fieldPos( "CREFPRV" ) ) ] ) )
         lExiste := .F.
      else
         lExiste := .T.
      end

   end

   ( dbfTmpPrv )->( ordSetFocus( nOrdTmp ) )
   ( dbfTmpPrv )->( dbGoto( nRecno ) )

Return ( lExiste )



_HB_CLASS TArticuloSenderReciver ; UTILITY FUNCTION TArticuloSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TArticuloSenderReciver" , {TSenderReciverItem():classh} ) ) ; ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @TArticuloSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @TArticuloSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER RestoreData(); IIF( .F., s_oClass:ModMethod( "RestoreData", @TArticuloSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RestoreData", @TArticuloSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SendData(); IIF( .F., s_oClass:ModMethod( "SendData", @TArticuloSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SendData", @TArticuloSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ReciveData(); IIF( .F., s_oClass:ModMethod( "ReciveData", @TArticuloSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReciveData", @TArticuloSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Process(); IIF( .F., s_oClass:ModMethod( "Process", @TArticuloSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Process", @TArticuloSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CleanRelation( cCodArt); IIF( .F., s_oClass:ModMethod( "CleanRelation", @TArticuloSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CleanRelation", @TArticuloSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TArticuloSenderReciver ;



UTILITY STATIC function TArticuloSenderReciver_CreateData() ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local oBlock
   local oError
   local tmpKit
   local tmpOfe
   local tmpImg
   local tmpArtVta
   local tmpArtPrv
   local tmpArticulo
   local tmpCodebar
   local lSnd        := .F.
   local cFileName

   if ::oSender:lServer
      cFileName      := "Art" + StrZero( ::nGetNumberToSend(), 6 ) + ".All"
   else
      cFileName      := "Art" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()
   end

   If !OpenFiles( .F. )
      Return Nil
   end

   ::oSender:SetText( "Seleccionando artículos" )





   mkArticulo( cPatSnd() )
   mkOferta(   cPatSnd() )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @tmpArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @tmpArtPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @tmpArtVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @tmpKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @tmpImg ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @tmpOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @tmpCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfArticulo )->( lastrec() )
   end

   ( dbfArticulo )->( OrdSetFocus( "SndCod" ) )
   ( dbfArticulo )->( dbGoTop() )

   while !( dbfArticulo )->( eof() )

      if ( dbfArticulo )->lSndDoc

         ::oSender:SetText( AllTrim( ( dbfArticulo )->Codigo ) + "; " + AllTrim( ( dbfArticulo )->Nombre ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVtaIva1, PicOut() ) ) )

         lSnd     := .T.

         dbPass( dbfArticulo, tmpArticulo, .T. )





         if ( dbfCodebar )->( dbSeek( ( dbfArticulo )->Codigo ) )

            while ( dbfCodebar )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfCodebar )->( eof() )

               dbPass( dbfCodebar, tmpCodebar, .T. )
               ( dbfCodebar )->( dbSkip( 1 ) )

            end

         end





         if ( dbfArtPrv )->( dbSeek( ( dbfArticulo )->Codigo ) )

            while ( dbfArtPrv )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfArtPrv )->( eof() )

               dbPass( dbfArtPrv, tmpArtPrv, .T. )
               ( dbfArtPrv )->( dbSkip( 1 ) )

            end

         end





         if ( dbfArtVta )->( dbSeek( ( dbfArticulo )->CODIGO ) )

            while ( dbfArtVta )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfArtVta )->( eof() )

               dbPass( dbfArtVta, tmpArtVta, .T. )
               ( dbfArtVta )->( dbSkip( 1 ) )

            end

         end





         if ( dbfArtKit )->( dbSeek( ( dbfArticulo )->CODIGO ) )

            while ( dbfArtKit )->cCodKit == ( dbfArticulo )->Codigo .AND. !( dbfArtKit )->( eof() )

               dbPass( dbfArtKit, tmpKit, .T. )
               ( dbfArtKit )->( dbSkip( 1 ) )

            end

         end





         if ( dbfOfe )->( dbSeek( ( dbfArticulo )->Codigo ) )

            while ( dbfOfe )->cArtOfe == ( dbfArticulo )->Codigo .AND. !( dbfOfe )->( eof() )

               dbPass( dbfOfe, tmpOfe, .T. )
               ( dbfOfe )->( dbSkip( 1 ) )

            end

         end





         if ( dbfImg )->( dbSeek( ( dbfArticulo )->Codigo ) )
            while ( dbfImg )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfImg )->( eof() )
               dbPass( dbfImg, tmpImg, .T. )
               ( dbfImg )->( dbSkip( 1 ) )
            end
         end

      end

      ( dbfArticulo )->( dbSkip() )

      if !Empty( ::oSender:oMtr )
         ::oSender:oMtr:Set( ( dbfArticulo )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( tmpArticulo )->( dbCloseArea() )
   ( tmpArtPrv   )->( dbCloseArea() )
   ( tmpArtVta   )->( dbCloseArea() )
   ( tmpKit      )->( dbCloseArea() )
   ( tmpOfe      )->( dbCloseArea() )
   ( tmpImg      )->( dbCloseArea() )
   ( tmpCodebar  )->( dbCloseArea() )

   CloseFiles()





   if lSnd

      ::oSender:SetText( "Comprimiendo artículos" )

      if ::oSender:lZipData( cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay artículos para enviar" )

   end

Return ( Self )



UTILITY STATIC function TArticuloSenderReciver_RestoreData() ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local oBlock
   local oError
   local dbfArticulo

   if ::lSuccesfullSend





      oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         dbUseArea( .T., ( cDriver() ), ( cPatArt() + "Articulo.Dbf" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatArt() + "Articulo.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
         ( dbfArticulo )->( ordSetFocus( "SndCod" ) )

         while !( dbfArticulo )->( Eof() )

            if ( dbfArticulo )->( dbRLock() )
               ( dbfArticulo )->lSndDoc   := .F.
               ( dbfArticulo )->( dbRUnlock() )
            end

            ( dbfArticulo )->( dbSkip() )

         end

      RECOVER USING oError

         msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      ( dbfArticulo )->( dbCloseArea() )

   end

Return ( Self )



UTILITY STATIC function TArticuloSenderReciver_SendData() ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local cFileName

   if ::oSender:lServer
      cFileName         := "Art" + StrZero( ::nGetNumberToSend(), 6 ) + ".All"
   else
      cFileName         := "Art" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()
   end

   if File( cPatOut() + cFileName )

      if ftpSndFile( cPatOut() + cFileName, cFileName, 2000, ::oSender )
         ::IncNumberToSend()
         ::lSuccesfullSend := .T.
         ::oSender:SetText( "Ficheros de artículos enviados " + cFileName )
      else
         ::oSender:SetText( "ERROR fichero de artículos no enviado" )
      end

   end

Return ( Self )



UTILITY STATIC function TArticuloSenderReciver_ReciveData() ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local n
   local aExt

   if ::oSender:lServer
      aExt              := aRetDlgEmp()
   else
      aExt              := { "All" }
   end

   ::oSender:SetText( "Recibiendo artículos" )

   for n := 1 to len( aExt )
      FtpGetFiles( "Art*." + aExt[ n ], cPatIn(), 2000, ::oSender )
   next

   ::oSender:SetText( "Artículos recibidos" )

Return ( Self )



UTILITY STATIC function TArticuloSenderReciver_Process() ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   local m
   local aFiles
   local tmpMov
   local tmpKit
   local tmpOfe
   local tmpCodebar
   local tmpArtPrv
   local tmpArtDiv
   local tmpArticulo
   local oBlock
   local oError





   aFiles                     := Directory( cPatIn() + "Art*.*" )

   for m := 1 to len( aFiles )

      oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )

      BEGIN SEQUENCE





      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )







         if lExistTable( cPatSnd() + "Articulo.Dbf" )     .AND. lExistTable( cPatSnd() + "ProvArt.Dbf"  )     .AND. lExistTable( cPatSnd() + "ArtDiv.Dbf"   )     .AND. lExistTable( cPatSnd() + "ArtKit.Dbf"   )     .AND. lExistTable( cPatSnd() + "Oferta.Dbf"   )     .AND. lExistTable( cPatSnd() + "ArtCodebar.Dbf" )   .AND. OpenFiles( .F. )

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @tmpArticulo ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @tmpArtPrv ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @tmpArtDiv ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @tmpKit ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @tmpOfe ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @tmpCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArticulo )->( lastrec() )
            end

            while !( tmpArticulo )->( eof() )

               if ( dbfArticulo )->( dbSeek( ( tmpArticulo )->Codigo ) )
                  if !::oSender:lServer
                     ::CleanRelation( ( tmpArticulo )->Codigo )
                     dbPass( tmpArticulo, dbfArticulo )
                     ::oSender:SetText( "Reemplazado : " + AllTrim( ( dbfArticulo )->Codigo ) + "; " + AllTrim( ( dbfArticulo )->Nombre ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVtaIva1, PicOut() ) ) )
                  else
                     ::oSender:SetText( "Desestimado : " + AllTrim( ( dbfArticulo )->Codigo ) + "; " + AllTrim( ( dbfArticulo )->Nombre ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVtaIva1, PicOut() ) ) )
                  end
               else
                     ::CleanRelation( ( tmpArticulo )->Codigo )
                     dbPass( tmpArticulo, dbfArticulo, .T. )
                     ::oSender:SetText( "Añadido     : " + AllTrim( ( dbfArticulo )->Codigo ) + "; " + AllTrim( ( dbfArticulo )->Nombre ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVenta1, PicOut() ) ) + "; " + AllTrim( Trans( ( dbfArticulo )->pVtaIva1, PicOut() ) ) )
               end

               ( tmpArticulo )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpArticulo )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArtPrv )->( LastRec() )
            end

            while !( tmpArtPrv )->( eof() )

               if ( dbfArtPrv )->( dbSeek( ( tmpArtPrv )->cCodArt ) )
                  if !::oSender:lServer
                     dbPass( tmpArtPrv, dbfArtPrv )
                  end
               else
                  dbPass( tmpArtPrv, dbfArtPrv, .T. )
               end

               ( tmpArtPrv )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( (tmpArtPrv)->( recno() ) )
               end

               SysRefresh()

            end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpArtDiv )->( lastrec() )
            end

            while !( tmpArtDiv )->( eof() )

               if ( dbfArtVta )->( dbSeek( ( tmpArtDiv )->CCODART ) )
                  if !::oSender:lServer
                     dbPass( tmpArtDiv, dbfArtVta )
                  end
               else
                  dbPass( tmpArtDiv, dbfArtVta, .T. )
               end

               ( tmpArtDiv )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpArtDiv )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpArtDiv )->( lastrec() ) )
            end





            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := (tmpKit)->( lastrec() )
            end

            while !( tmpKit )->( eof() )

               if ( dbfArtKit )->( dbSeek( ( tmpKit )->CCODKIT ) )
                  if !::oSender:lServer
                     dbPass( tmpKit, dbfArtKit )
                  end
               else
                  dbPass( tmpKit, dbfArtKit, .T. )
               end

               ( tmpKit )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpKit )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end





            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpOfe )->( lastrec() )
            end

            while !( tmpOfe )->( eof() )

               if ( dbfOfe )->( dbSeek( ( tmpOfe )->cArtOfe ) )
                  if !::oSender:lServer
                     dbPass( tmpOfe, dbfOfe )
                  end
               else
                  dbPass( tmpOfe, dbfOfe, .T. )
               end

               ( tmpOfe )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpOfe )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpOfe )->( lastrec() ) )
            end





            ( dbfCodebar )->( OrdSetFocus( "cArtBar" ) )

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpCodebar )->( lastrec() )
            end

            while !( tmpCodebar )->( eof() )

               if ( dbfCodebar )->( dbSeek( ( tmpCodebar )->cCodArt + ( tmpCodebar )->cCodBar ) ) .AND. !::oSender:lServer
                  dbPass( tmpCodebar, dbfCodebar )
               else
                  dbPass( tmpCodebar, dbfCodebar, .T. )
               end

               ( tmpCodebar )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpCodebar )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            ( dbfCodebar )->( OrdSetFocus( "cCodArt" ) )

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:Set( ( tmpCodebar )->( lastrec() ) )
            end

            ( tmpArticulo )->( dbCloseArea() )
            ( tmpCodebar  )->( dbCloseArea() )
            ( tmpArtPrv   )->( dbCloseArea() )
            ( tmpMov      )->( dbCloseArea() )
            ( tmpArtDiv   )->( dbCloseArea() )
            ( tmpKit      )->( dbCloseArea() )
            ( tmpOfe      )->( dbCloseArea() )

            CloseFiles()

            ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

         else

            ::oSender:SetText( "Faltan ficheros" )

            if !lExistTable( cPatSnd() + "Articulo.Dbf"   )
               ::oSender:SetText( "Falta" + cPatSnd() + "Articulo.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ProvArt.Dbf"    )
               ::oSender:SetText( "Falta" + cPatSnd() + "ProvArt.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtDiv.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtDiv.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtKit.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtKit.Dbf" )
            end

            if !lExistTable( cPatSnd() + "Oferta.Dbf"     )
               ::oSender:SetText( "Falta" + cPatSnd() + "Oferta.Dbf" )
            end

            if !lExistTable( cPatSnd() + "ArtCodebar.Dbf" )
               ::oSender:SetText( "Falta" + cPatSnd() + "ArtCodebar.Dbf" )
            end

         end

      else

         ::oSender:SetText( "Error en el fichero comprimido" )

      end

      RECOVER USING oError

         ( tmpArticulo )->( dbCloseArea() )
         ( tmpCodebar  )->( dbCloseArea() )
         ( tmpArtPrv   )->( dbCloseArea() )
         ( tmpMov      )->( dbCloseArea() )
         ( tmpArtDiv   )->( dbCloseArea() )
         ( tmpKit      )->( dbCloseArea() )
         ( tmpOfe      )->( dbCloseArea() )

         ::oSender:SetText( "Error procesando fichero " + aFiles[ m, 1 ] )
         ::oSender:SetText( ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

   next

Return ( Self )



UTILITY STATIC function TArticuloSenderReciver_CleanRelation( cCodArt) ; local Self AS CLASS TArticuloSenderReciver := QSelf() AS CLASS TArticuloSenderReciver

   while ( dbfArtPrv )->( dbSeek( cCodArt ) )
      dbDel( dbfArtPrv )
   end

   SysRefresh()

   while ( dbfArtVta )->( dbSeek( cCodArt ) )
      dbDel( dbfArtVta )
   end

   SysRefresh()

   while ( dbfArtKit )->( dbSeek( cCodArt ) )
      dbDel( dbfArtKit )
   end

   SysRefresh()

   while ( dbfOfe )->( dbSeek( cCodArt ) )
      dbDel( dbfOfe )
   end

   SysRefresh()

   while ( dbfCodeBar )->( dbSeek( cCodArt ) )
      dbDel( dbfCodeBar )
   end

   SysRefresh()

Return ( Self )



Static Function EdtRecMenu( aTmp, aGet, oSay, oDlg, oFld, aBar, cSay, nMode )

   oMenu := MenuBegin( .F.,,, .F., .F. )

      MenuAddItem( "&1. Rotor",, .F.,,,,,,,,, .F.,,, .F. )

         MenuBegin( .F.,,, .F., .F. )




            MenuAddItem( "&1. Informe del artículo", "Muestra el informe del artículo", .F.,, {|oMenuItem|( BrwVtaComArt( ( dbfArticulo )->Codigo, ( dbfArticulo )->Nombre, dbfDiv, dbfIva, dbfAlmT, dbfArticulo ) )},, "info16",,,,, .F.,,, .F. )




            MenuAddItem( "&2. Informe de artículo en escandallo", "Muestra el informe del artículo en escandallo", .F.,, {|oMenuItem|( BrwVtaComArt( ( dbfTmpKit )->cRefKit, ( dbfTmpKit )->cDesKit, dbfDiv, dbfIva, dbfAlmT, dbfArticulo ) )},, "info16",,,,, .F.,,, .F. )

            if !lExternal

            MenuAddItem()




            MenuAddItem( "&3. Añadir pedido a proveedor", "Añade un pedido a proveedor", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), PedPrv( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Clipboard_empty_businessman_16",,,,, .F.,,, .F. )




            MenuAddItem( "&4. Añadir albarán de proveedor", "Añade un albarán de proveedor", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), AlbPrv( nil , nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Document_plain_businessman_16",,,,, .F.,,, .F. )




            MenuAddItem( "&5. Añadir factura de proveedor", "Añade una factura de proveedor", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), FacPrv( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Document_businessman_16",,,,, .F.,,, .F. )




            MenuAddItem( "&6. Añadir presupuesto de cliente", "Añade un presupuesto de cliente", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), PreCli( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Notebook_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&7. Añadir pedido de cliente", "Añade un pedido de cliente", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), PedCli( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Clipboard_empty_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&8. Añadir albarán de cliente", "Añade un albarán de cliente", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), AlbCli( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Document_plain_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&9. Añadir factura de cliente", "Añade una factura de cliente", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), FactCli( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Document_user1_16",,,,, .F.,,, .F. )




            MenuAddItem( "&A. Añadir tiket de cliente", "Añade un tiket de cliente", .F.,, {|oMenuItem|( if( !Empty( EndTrans( aTmp, aGet, oSay, oDlg, aBar, cSay[7], nMode ) ), FrontTpv( nil, nil, nil, ( dbfArticulo )->Codigo ), ) )},, "Cashier_user1_16",,,,, .F.,,, .F. )

            MenuAddItem()





            MenuAddItem( "&B. Añadir movimiento entre almacenes", "Realizar un nuevo movimiento entre almacenes", .F.,, {|oMenuItem|( AppMovAlm( ( dbfArticulo )->Codigo, 1 ) )},, "Pencil_Package_16",,,,, .F.,,, .F. )




            MenuAddItem( "&C. Añadir movimiento de regularización de almacenes simple", "Realizar un nuevo movimiento de regularización de almacenes simple", .F.,, {|oMenuItem|( AppMovAlm( ( dbfArticulo )->Codigo, 2 ) )},, "Pencil_Package_16",,,,, .F.,,, .F. )




            MenuAddItem( "&D. Añadir movimiento de regularización de almacenes por objetivo", "Realizar un nuevo movimiento de regularización de almacenes por objetivo", .F.,, {|oMenuItem|( AppMovAlm( ( dbfArticulo )->Codigo, 3 ) )},, "Pencil_Package_16",,,,, .F.,,, .F. )
            end

         MenuEnd()

   MenuEnd()

   oDlg:SetMenu( oMenu )

   if !Empty( oActiveX )
      oActiveX:DocumentHTML      := aTmp[ ( dbfArticulo )->( fieldpos( "MDESTEC" ) ) ]
      oActivex:LocalizationFile  := FullCurDir() + "Spanish.xml"
      oActivex:BorderStyle       := 0
   end









Return ( oMenu )




Static Function lSelPrvDef( aTmp, dbfTmpPrv, oBrw, aTmpArt )

   local nRec := ( dbfTmpPrv )->( RecNo() )

   ( dbfTmpPrv )->( dbGoTop() )

   while !( dbfTmpPrv )->( Eof() )
         ( dbfTmpPrv )->lDefPrv  := .F.
      ( dbfTmpPrv )->( dbSkip() )
   end

   ( dbfTmpPrv )->( dbGoto( nRec ) )

   aTmpArt[ ( dbfArticulo )->( fieldPos( "CPRVHAB" ) ) ]  := aTmp[ ( dbfTmpPrv )->( fieldPos( "CCODPRV" ) ) ]

   oBrw:Refresh()

Return .T.




Static Function DelPrv( aTmp, oBrwPrv, dbfTmpPrv )



   if !( dbfTmpPrv )->lDefPrv

      dbDelRec( oBrwPrv, dbfTmpPrv )

   else

      if dbDelRec( oBrwPrv, dbfTmpPrv )




         ( dbfTmpPrv )->( dbGoTop() )

         if !( dbfTmpPrv )->( Eof() )

            ( dbfTmpPrv )->lDefPrv  := .T.

            aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ]       := ( dbfTmpPrv )->cCodPrv

         else

            aTmp[ ( dbfArticulo )->( fieldpos( "cPrvHab" ) ) ]       := Space( 12 )

         end

      end

   end

   oBrwPrv:Refresh()

Return ( .T. )



Function lEscandallo( uTmpArticulo )

   if Valtype( uTmpArticulo ) == "C"
      Return ( ( uTmpArticulo )->lKitArt .AND. !( uTmpArticulo )->lKitAsc )
   else
      Return ( uTmpArticulo[ ( dbfArticulo )->( Fieldpos( "lKitArt" ) ) ] .AND. !uTmpArticulo[ ( dbfArticulo )->( Fieldpos( "lKitAsc" ) ) ] )
   end

Return ( .F. )

















































































































































































































































































Static Function lValidUndMedicion( aTmp, aGet )



   if Empty( aTmp[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ] )

      aGet[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "NALTART" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "NANCART" ) ) ]:Hide()

   end

   if oUndMedicion:oDbf:SeekInOrd( aTmp[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ], "CCODMED" )

      aGet[ ( dbfArticulo )->( fieldpos( "CUNIDAD" ) ) ]:oHelpText:cText( oUndMedicion:oDbf:cNombre )



      aGet[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "NALTART" ) ) ]:Hide()
      aGet[ ( dbfArticulo )->( fieldpos( "NANCART" ) ) ]:Hide()



      if oUndMedicion:oDbf:nDimension >= 1

         aGet[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "NLNGART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim1 )

      end



      if oUndMedicion:oDbf:nDimension >= 2

         aGet[ ( dbfArticulo )->( fieldpos( "NALTART" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "NALTART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim2 )

      end



      if oUndMedicion:oDbf:nDimension >= 3

         aGet[ ( dbfArticulo )->( fieldpos( "NANCART" ) ) ]:Show()
         aGet[ ( dbfArticulo )->( fieldpos( "NANCART" ) ) ]:oSay:SetText( oUndMedicion:oDbf:cTextoDim3 )

      end

   end

Return .T.



Static Function CargaProveedor( oGet, oSay, oValorPunto, dbfPrv )

   local lCarga   := .T.

   if cProvee( oGet, dbfProv, oSay[ 4 ] )
      oValorPunto:cText( ( dbfPrv )->nValPunt )
   else
      lCarga      := .F.
   end

Return ( lCarga )



Function ExpFamilia( cCodFam, oSayFamilia, aGet )

   if Empty( cCodFam )
      Return .T.
   end

   if dbSeekInOrd( cCodFam, "cCodFam", dbfFam )

      oSayFamilia:cText( ( dbfFam )->cNomFam )

      if cCodFam <> cCodigoFamilia



         if ( !Empty( ( dbfFam )->cCodPrp1 ) .AND. aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:VarGet() <> ( dbfFam )->cCodPrp1 ) .OR. ( !Empty( ( dbfFam )->cCodPrp2 ) .AND. aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:VarGet() <> ( dbfFam )->cCodPrp2 ) .OR. ( !Empty( ( dbfFam )->cCodFra  ) .AND. aGet[ ( dbfArticulo )->( fieldpos( "cCodFra"  ) ) ]:VarGet() <> ( dbfFam )->cCodFra  )

            if ApoloMsgNoYes( "¿ Desea importar las propiedades y frases publicitarias de la familia ?" )

               aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:cText( ( dbfFam )->cCodPrp1 )
               aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ]:lValid()

               aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:cText( ( dbfFam )->cCodPrp2 )
               aGet[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ]:lValid()

               aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:cText( ( dbfFam )->cCodFra )
               aGet[ ( dbfArticulo )->( fieldpos( "cCodFra" ) ) ]:lValid()

            end

         end

      else

         cCodigoFamilia := cCodFam

      end

   else

      msgStop( "Familia no encontrada" )

      Return .F.

   end

Return .T.




_HB_CLASS TArticuloLabelGenerator ; UTILITY FUNCTION TArticuloLabelGenerator(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TArticuloLabelGenerator" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )
   _HB_MEMBER { oFld} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFld" }, .F., .F. ), )

   _HB_MEMBER { oCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCriterio" }, .F., .F. ), )
   _HB_MEMBER { cCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCriterio" }, .F., .F. ), )
   _HB_MEMBER { aCriterio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aCriterio" }, .F., .F. ), )

   _HB_MEMBER { oFamiliaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFamiliaInicio" }, .F., .F. ), )
   _HB_MEMBER { cFamiliaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFamiliaInicio" }, .F., .F. ), )

   _HB_MEMBER { oFamiliaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFamiliaFin" }, .F., .F. ), )
   _HB_MEMBER { cFamiliaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFamiliaFin" }, .F., .F. ), )

   _HB_MEMBER { oFechaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFechaInicio" }, .F., .F. ), )
   _HB_MEMBER { dFechaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dFechaInicio" }, .F., .F. ), )

   _HB_MEMBER { oFechaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFechaFin" }, .F., .F. ), )
   _HB_MEMBER { dFechaFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dFechaFin" }, .F., .F. ), )

   _HB_MEMBER { oInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oInicio" }, .F., .F. ), )
   _HB_MEMBER { oFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFin" }, .F., .F. ), )

   _HB_MEMBER { oFormatoLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFormatoLabel" }, .F., .F. ), )
   _HB_MEMBER { cFormatoLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFormatoLabel" }, .F., .F. ), )

   _HB_MEMBER { nFilaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nFilaInicio" }, .F., .F. ), )
   _HB_MEMBER { nColumnaInicio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColumnaInicio" }, .F., .F. ), )

   _HB_MEMBER { cFileTmpLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFileTmpLabel" }, .F., .F. ), )
   _HB_MEMBER { cAreaTmpLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cAreaTmpLabel" }, .F., .F. ), )

   _HB_MEMBER { oBrwLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwLabel" }, .F., .F. ), )

   _HB_MEMBER { nCantidadLabels} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCantidadLabels" }, .F., .F. ), )
   _HB_MEMBER { nUnidadesLabels} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nUnidadesLabels" }, .F., .F. ), )

   _HB_MEMBER { oMtrLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMtrLabel" }, .F., .F. ), )
   _HB_MEMBER { nMtrLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMtrLabel" }, .F., .F. ), )

   _HB_MEMBER { oFilter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFilter" }, .F., .F. ), )

   _HB_MEMBER { hBmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hBmp" }, .F., .F. ), )

   _HB_MEMBER { oBtnListado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnListado" }, .F., .F. ), )
   _HB_MEMBER { oBtnFilter} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnFilter" }, .F., .F. ), )
   _HB_MEMBER { oBtnSiguiente} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnSiguiente" }, .F., .F. ), )
   _HB_MEMBER { oBtnAnterior} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnAnterior" }, .F., .F. ), )
   _HB_MEMBER { oBtnCancel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBtnCancel" }, .F., .F. ), )

   _HB_MEMBER { aSearch} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aSearch" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TArticuloLabelGenerator_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TArticuloLabelGenerator_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TArticuloLabelGenerator_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TArticuloLabelGenerator_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lDefault(); IIF( .F., s_oClass:ModMethod( "lDefault", @TArticuloLabelGenerator_lDefault(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lDefault", @TArticuloLabelGenerator_lDefault(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER BotonAnterior(); IIF( .F., s_oClass:ModMethod( "BotonAnterior", @TArticuloLabelGenerator_BotonAnterior(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BotonAnterior", @TArticuloLabelGenerator_BotonAnterior(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER BotonSiguiente(); IIF( .F., s_oClass:ModMethod( "BotonSiguiente", @TArticuloLabelGenerator_BotonSiguiente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BotonSiguiente", @TArticuloLabelGenerator_BotonSiguiente(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER PutLabel(); IIF( .F., s_oClass:ModMethod( "PutLabel", @TArticuloLabelGenerator_PutLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PutLabel", @TArticuloLabelGenerator_PutLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectAllLabels(); IIF( .F., s_oClass:ModMethod( "SelectAllLabels", @TArticuloLabelGenerator_SelectAllLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectAllLabels", @TArticuloLabelGenerator_SelectAllLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectPropertiesLabels(); IIF( .F., s_oClass:ModMethod( "SelectPropertiesLabels", @TArticuloLabelGenerator_SelectPropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectPropertiesLabels", @TArticuloLabelGenerator_SelectPropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SavePropertiesLabels(); IIF( .F., s_oClass:ModMethod( "SavePropertiesLabels", @TArticuloLabelGenerator_SavePropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SavePropertiesLabels", @TArticuloLabelGenerator_SavePropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LoadPropertiesLabels(); IIF( .F., s_oClass:ModMethod( "LoadPropertiesLabels", @TArticuloLabelGenerator_LoadPropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LoadPropertiesLabels", @TArticuloLabelGenerator_LoadPropertiesLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectCriterioLabels(); IIF( .F., s_oClass:ModMethod( "SelectCriterioLabels", @TArticuloLabelGenerator_SelectCriterioLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectCriterioLabels", @TArticuloLabelGenerator_SelectCriterioLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER PutStockLabels(); IIF( .F., s_oClass:ModMethod( "PutStockLabels", @TArticuloLabelGenerator_PutStockLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PutStockLabels", @TArticuloLabelGenerator_PutStockLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddLabel(); IIF( .F., s_oClass:ModMethod( "AddLabel", @TArticuloLabelGenerator_AddLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddLabel", @TArticuloLabelGenerator_AddLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DelLabel(); IIF( .F., s_oClass:ModMethod( "DelLabel", @TArticuloLabelGenerator_DelLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DelLabel", @TArticuloLabelGenerator_DelLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER EditLabel(); IIF( .F., s_oClass:ModMethod( "EditLabel", @TArticuloLabelGenerator_EditLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EditLabel", @TArticuloLabelGenerator_EditLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER FilterLabel(); IIF( .F., s_oClass:ModMethod( "FilterLabel", @TArticuloLabelGenerator_FilterLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "FilterLabel", @TArticuloLabelGenerator_FilterLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ChangeCriterio(); IIF( .F., s_oClass:ModMethod( "ChangeCriterio", @TArticuloLabelGenerator_ChangeCriterio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ChangeCriterio", @TArticuloLabelGenerator_ChangeCriterio(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPrintLabels(); IIF( .F., s_oClass:ModMethod( "lPrintLabels", @TArticuloLabelGenerator_lPrintLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPrintLabels", @TArticuloLabelGenerator_lPrintLabels(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER InitLabel( oLabel); IIF( .F., s_oClass:ModMethod( "InitLabel", @TArticuloLabelGenerator_InitLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InitLabel", @TArticuloLabelGenerator_InitLabel(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lCreateTemporal(); IIF( .F., s_oClass:ModMethod( "lCreateTemporal", @TArticuloLabelGenerator_lCreateTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lCreateTemporal", @TArticuloLabelGenerator_lCreateTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER PrepareTemporal(); IIF( .F., s_oClass:ModMethod( "PrepareTemporal", @TArticuloLabelGenerator_PrepareTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PrepareTemporal", @TArticuloLabelGenerator_PrepareTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DestroyTemporal(); IIF( .F., s_oClass:ModMethod( "DestroyTemporal", @TArticuloLabelGenerator_DestroyTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DestroyTemporal", @TArticuloLabelGenerator_DestroyTemporal(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SelectColumn( oCombo); IIF( .F., s_oClass:ModMethod( "SelectColumn", @TArticuloLabelGenerator_SelectColumn(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SelectColumn", @TArticuloLabelGenerator_SelectColumn(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TArticuloLabelGenerator ;



UTILITY STATIC function TArticuloLabelGenerator_lDefault() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oError
   local oBlock
   local lError         := .F.

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::cCriterio          := "Ningún criterio"
   ::aCriterio          := { "Ningún criterio", "Todos los registros", "Familia", "Fecha modificación" }

   ::cFamiliaInicio    := ( dbfArticulo )->Familia
   ::cFamiliaFin       := ( dbfArticulo )->Familia

   ::dFechaInicio       := Ctod( "01/" + Str( Month( Date() ), 2 ) + "/" + Str( Year( Date() ), 4 ) )
   ::dFechaFin          := GetSysDate()

   ::cFormatoLabel      := GetPvProfString( "Etiquetas", "Articulo", Space( 3 ), cPatEmp() + "Empresa.Ini" )
   if len( ::cFormatoLabel ) < 3
      ::cFormatoLabel   := Space( 3 )
   end

   ::nMtrLabel          := 0

   ::nFilaInicio        := 1
   ::nColumnaInicio     := 1

   ::nCantidadLabels    := 1
   ::nUnidadesLabels    := 1

   ::aSearch            := { "Código", "Nombre" }

   RECOVER USING oError

      lError            := .T.

      msgStop( "Error en la creación de generador de etiquetas" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return ( !lError )



UTILITY STATIC function TArticuloLabelGenerator_Create() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oGetOrd
   local cGetOrd     := Space( 100 )
    local oCbxOrd
   local cCbxOrd     := "Código"
   local aCbxOrd     := { "Código", "Nombre" }

   if ::lDefault()

      ::oDlg = TDialog():New(,,,,, "SelectLabels_0",, .F.,,,,,, .F.,,,,,, .F., )





         ::oFld := TPages():Redefine( 10, ::oDlg, {"SelectLabels_3", "SelectLabels_2"},,,, )









         TBitmap():ReDefine( 500, "EnvioEtiquetas",, ::oDlg,,, .F., .F.,,, .F.,,, .F. )



         ::oCriterio := TComboBox():ReDefine( 90, { | u | If( PCount()==0, ::cCriterio, ::cCriterio:= u ) }, ::aCriterio, ::oFld:aDialogs[1],,,,,,, .F.,,,,,, )

         ::oCriterio:bChange        := {|| ::ChangeCriterio() }





         ::oFamiliaInicio := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::cFamiliaInicio, ::cFamiliaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 101 )

         ::oFamiliaInicio:bValid    := {|| cFamilia( ::oFamiliaInicio, dbfFam, ::oFamiliaInicio:oHelpText ), .T. }
         ::oFamiliaInicio:bHelp     := {|| BrwFamilia( ::oFamiliaInicio, ::oFamiliaInicio:oHelpText ) }



         ::oInicio := TSay():ReDefine( 102,, ::oFld:aDialogs[1],,,, .F.,, .F., .F. )





         ::oFamiliaFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cFamiliaFin, ::cFamiliaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 111 )

         ::oFamiliaFin:bValid       := {|| cFamilia( ::oFamiliaFin, dbfFam, ::oFamiliaFin:oHelpText ), .T. }
         ::oFamiliaFin:bHelp        := {|| BrwFamilia( ::oFamiliaFin, ::oFamiliaFin:oHelpText ) }



         ::oFin := TSay():ReDefine( 112,, ::oFld:aDialogs[1],,,, .F.,, .F., .F. )




         ::oFechaInicio := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::dFechaInicio, ::dFechaInicio:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




         ::oFechaFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::dFechaFin, ::dFechaFin:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         ::oFormatoLabel := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::cFormatoLabel, ::cFormatoLabel:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, 161 )

            ::oFormatoLabel:bValid  := {|| cDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, dbfDoc, "AR" ) }
            ::oFormatoLabel:bHelp   := {|| BrwDocumento( ::oFormatoLabel, ::oFormatoLabel:oHelpText, "AR" ) }

         TBtnBmp():ReDefine( 220, "Printer_pencil_16",,,,,{|| EdtDocumento( ::cFormatoLabel ) }, ::oFld:aDialogs[1], .F., , .F., "Modificar formato de etiquetas" )





         TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::nFilaInicio, ::nFilaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





         TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::nColumnaInicio, ::nColumnaInicio:= u ) }, ::oFld:aDialogs[1],, "999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



         TRadMenu():Redefine( { | u | If( PCount()==0, ::nCantidadLabels, ::nCantidadLabels:= u ) }, ::oFld:aDialogs[1],, { 200, 201 },,,,, .F.,, )








         TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::nUnidadesLabels, ::nUnidadesLabels:= u ) }, ::oFld:aDialogs[1],, "99999",,,,,,, .F., {||     ( ::nCantidadLabels == 1 )},, .F., .T.,,, {||      1}, {||      99999},, nil,,, )









         oGetOrd := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, cGetOrd, cGetOrd:= u ) }, ::oFld:aDialogs[2],,,,,,,,, .F.,,, .F., .F.,,,,,, nil, "FIND",, )

         oGetOrd:bChange   := {| nKey, nFlags, oGet | AutoSeek( nKey, nFlags, oGet, ::oBrwLabel, dbfArticulo ) }
         oGetOrd:bValid    := {|| ( dbfArticulo )->( OrdScope( 0, nil ) ), ( dbfArticulo )->( OrdScope( 1, nil ) ), ::oBrwLabel:Refresh(), .T. }





         oCbxOrd := TComboBox():ReDefine( 210, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, ::oFld:aDialogs[2],,,,,,, .F.,,,,,, )

         oCbxOrd:bChange   := {|| ::SelectColumn( oCbxOrd ) }




         TButton():ReDefine( 100, {||( ::PutLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 110, {||( ::SelectAllLabels( .T. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 120, {||( ::SelectAllLabels( .F. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 220, {||( ::SelectPropertiesLabels( .F. ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 130, {||( ::AddLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 140, {||( ::DelLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 150, {||( ::EditLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 160, {||( WinEdtRec( ::oBrwLabel, bEdit, dbfArticulo ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         TButton():ReDefine( 165, {||( WinZooRec( ::oBrwLabel, bEdit, dbfArticulo ) )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )




         ::oBtnFilter := TButton():ReDefine( 170, {||( ::FilterLabel() )}, ::oFld:aDialogs[2],,, .F.,,,, .F. )

         ::oBrwLabel                 := TXBrowse():New( ::oFld:aDialogs[2] )

         ::oBrwLabel:nMarqueeStyle   := 5
         ::oBrwLabel:nColSel         := 2

         ::oBrwLabel:lHScroll        := .F.
         ::oBrwLabel:cAlias          := dbfArticulo

         ::oBrwLabel:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         ::oBrwLabel:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
         ::oBrwLabel:bLDblClick      := {|| ::PutLabel() }

         ::oBrwLabel:CreateFromResource( 180 )

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Sl. Seleccionada"
            :bEditValue       := {|| ( dbfArticulo )->lLabel }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Código"
            :bEditValue       := {|| ( dbfArticulo )->Codigo }
            :nWidth           := 80
            :cSortOrder       := "Codigo"
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "Nombre"
            :bEditValue       := {|| ( dbfArticulo )->Nombre }
            :nWidth           := 280
            :cSortOrder       := "Nombre"
            :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end

         with object ( ::oBrwLabel:AddCol() )
            :cHeader          := "N. etiquetas"
            :bEditValue       := {|| ( dbfArticulo )->nLabel }
            :cEditPicture     := "@E 99,999"
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
            :nEditType        := 1
            :bOnPostEdit      := {|o,x| if( dbDialogLock( dbfArticulo ), ( ( dbfArticulo )->nLabel := x, ( dbfArticulo )->( dbUnlock() ) ), ) }
         end






         ::oMtrLabel := TMeter():ReDefine( 190, { | u | If( PCount()==0, ::nMtrLabel, ::nMtrLabel:= u ) }, ( dbfArticulo )->( lastrec() ), ::oFld:aDialogs[2], .F.,, "", .F.,,,, )

         ::oMtrLabel:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
         ::oMtrLabel:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )








         ::oBtnListado := TButton():ReDefine( 40, {||( TInfArtFam():New( "Listado de artículos seleccionados para etiquetas" ):Play( .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva, dbfFam, oStock, oWndBrw ) )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnAnterior := TButton():ReDefine( 20, {||( ::BotonAnterior() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnSiguiente := TButton():ReDefine( 30, {||( ::BotonSiguiente() )}, ::oDlg,,, .F.,,,, .F. )




         ::oBtnCancel := TButton():ReDefine( 2, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::oBtnAnterior:Hide(), ::ChangeCriterio(), ::oFormatoLabel:lValid() }

      ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

      ::End()

   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_BotonAnterior() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oFld:GoPrev()

   ::oBtnAnterior:Hide()

   SetWindowText( ::oBtnSiguiente:hWnd, "Siguien&te >" )

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_BotonSiguiente() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   do case
      case ::oFld:nOption == 1

         if Empty( ::cFormatoLabel )

            MsgStop( "Debe cumplimentar un formato de etiquetas" )

         else

            ::oFld:GoNext()
            ::oBtnAnterior:Show()

            if ::oCriterio:nAt <> 1
               ::SelectCriterioLabels()
            end

            SetWindowText( ::oBtnSiguiente:hWnd, "&Terminar" )

         end

      case ::oFld:nOption == 2

         if ::lPrintLabels()

            SetWindowText( ::oBtnCancel:hWnd, "&Cerrar" )

         end

   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_End() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   WritePProString( "Etiquetas", "Articulo", ::cFormatoLabel, cPatEmp() + "Empresa.Ini" )

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_PutLabel() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if dbLock( dbfArticulo )
      ( dbfArticulo )->lLabel := !( dbfArticulo )->lLabel
      ( dbfArticulo )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_SelectAllLabels( lSelect) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

    local n            := 0
   local nRecno   := ( dbfArticulo )->( Recno() )

    CursorWait()

   ::oDlg:Disable()

   ( dbfArticulo )->( dbGoTop() )
   while !( dbfArticulo )->( eof() )

      if ( dbfArticulo )->lLabel <> lSelect

         if dbLock( dbfArticulo )
            ( dbfArticulo )->lLabel := lSelect
            ( dbfArticulo )->( dbUnLock() )
         end

      end

      ( dbfArticulo )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ( dbfArticulo )->( dbGoTo( nRecno ) )

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ::oDlg:Enable()

   CursorArrow()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_SelectCriterioLabels() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

    local n            := 0
   local nRecno   := ( dbfArticulo )->( Recno() )

    CursorWait()

   ( dbfArticulo )->( dbGoTop() )
   while !( dbfArticulo )->( eof() )

      if dbLock( dbfArticulo )

         do case
            case ::oCriterio:nAt == 2

               ::PutStockLabels()

            case ::oCriterio:nAt == 3 .AND. ( dbfArticulo )->Familia >= ::cFamiliaInicio .AND. ( dbfArticulo )->Familia <= ::cFamiliaFin

               ::PutStockLabels()

            case ::oCriterio:nAt == 4 .AND. ( dbfArticulo )->LastChg >= ::dFechaInicio .AND. ( dbfArticulo )->LastChg <= ::dFechaFin

               ::PutStockLabels()

            otherwise

               ( dbfArticulo )->lLabel    := .F.
               ( dbfArticulo )->nLabel    := 1

         end

         ( dbfArticulo )->( dbUnLock() )

      end

      ( dbfArticulo )->( dbSkip() )

      ::oMtrLabel:Set( ++n )

   end

   ::oBrwLabel:Refresh()

   ::oMtrLabel:Set( 0 )
   ::oMtrLabel:Refresh()

   ( dbfArticulo )->( dbGoTo( nRecno ) )

    CursorArrow()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_PutStockLabels() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local o
   local aStock
   local nStock                        := 0

   ( dbfArticulo )->lLabel             := .T.

   if ::nCantidadLabels == 1

      ( dbfArticulo )->nLabel          := ::nUnidadesLabels

   else

      if !Empty( ( dbfArticulo )->cCodPrp1 ) .OR. !Empty( ( dbfArticulo )->cCodPrp2 )





         while ( dbfArtLbl )->( dbSeek( ( dbfArticulo )->Codigo ) ) .AND. !( dbfArtLbl )->( eof() )
            if dbLock( dbfArtLbl )
               ( dbfArtLbl )->( dbDelete() )
               ( dbfArtLbl )->( dbUnLock() )
            end
         end





         aStock                        := oStock:aStockArticulo( ( dbfArticulo )->Codigo, , , .F., .F. )

         for each o in aStock

            if dbAppe( dbfArtLbl )
               ( dbfArtLbl )->cCodArt  := o:cCodigo
               ( dbfArtLbl )->cCodPr1  := o:cCodigoPropiedad1
               ( dbfArtLbl )->cCodPr2  := o:cCodigoPropiedad2
               ( dbfArtLbl )->cValPr1  := o:cValorPropiedad1
               ( dbfArtLbl )->cValPr2  := o:cValorPropiedad2
               ( dbfArtLbl )->nUndLbl  := o:nUnidades
               ( dbfArtLbl )->( dbUnLock() )
            end

            nStock                     += o:nUnidades

         next

         ( dbfArticulo )->nLabel       := Max( nStock, 0 )

      else

         nStock                        := oStock:nStockArticulo( ( dbfArticulo )->Codigo, , , .F., .F. )

         ( dbfArticulo )->nLabel       := Max( nStock, 0 )

      end

   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_SelectPropertiesLabels() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local oDlg
   local aTblPrp
   local oBrwPrp

   if !Empty( ( dbfArticulo )->cCodPrp1 ) .OR. !Empty( ( dbfArticulo )->cCodPrp2 )

      aTblPrp                       := LoadPropertiesTable( ( dbfArticulo )->Codigo, nCosto( ( dbfArticulo )->Codigo, dbfArticulo, dbfArtKit ), ( dbfArticulo )->cCodPrp1, ( dbfArticulo )->cCodPrp2, dbfPro, dbfTblPro, dbfArtVta )

      ::LoadPropertiesLabels( aTblPrp )

      oDlg = TDialog():New(,,,,, "Propiedades",, .F.,,,,,, .F.,,,,,, .F., )

      oBrwPrp                       := TXBrowse():New( oDlg )

      oBrwPrp:nDataType             := 2

      oBrwPrp:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwPrp:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwPrp:lHScroll              := .T.
      oBrwPrp:lVScroll              := .T.

      oBrwPrp:nMarqueeStyle         := 3
      oBrwPrp:lRecordSelector       := .F.
      oBrwPrp:lFastEdit             := .T.
      oBrwPrp:nFreeze               := 1
      oBrwPrp:lFooter               := .T.

      oBrwPrp:SetArray( aTblPrp )

      for n := 1 to len( aTblPrp[ 1 ] )

         with object ( oBrwPrp:aCols[ n ] )

            :cHeader          := aTblPrp[ oBrwPrp:nArrayAt, n ]:cHead

            if IsNil( aTblPrp[ oBrwPrp:nArrayAt, n ]:Value )
               :bEditValue    := bGenEditText( aTblPrp, oBrwPrp, n )
               :nWidth        := 80
               :bFooter       := {|| "Total" }
            else
               :bEditValue    := bGenEditValue( aTblPrp, oBrwPrp, n )
               :cEditPicture  := MasUnd()
               :nWidth        := 60
               :nEditType     := 1
               :nTotal        := 0
               :bOnPostEdit   := {| oCol, xVal, nKey | aTblPrp[ oBrwPrp:nArrayAt, oBrwPrp:nColSel + oBrwPrp:nColOffset - 1 ]:Value := xVal }
            end

         end

      next

      oBrwPrp:MakeTotals()

      oBrwPrp:CreateFromResource( 100 )




      TButton():ReDefine( 1, {||( ::SavePropertiesLabels( aTblPrp, oDlg ) )}, oDlg,,, .F.,,,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| ::SavePropertiesLabels( aTblPrp, oDlg ) } )

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   else

      MsgStop( "Este artículo no tiene propiedades." )

   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_SavePropertiesLabels( aTblPrp, oDlg) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local o
   local a
   local n  := 0
   local c  := ""

   while ( dbfArtLbl )->( dbSeek( ( dbfArticulo )->Codigo ) ) .AND. !( dbfArtLbl )->( eof() )
      if dbLock( dbfArtLbl )
         ( dbfArtLbl )->( dbDelete() )
         ( dbfArtLbl )->( dbUnLock() )
      end
   end

   for each a in ( aTblPrp )

      for each o in ( a )

         if IsNum( o:Value ) .AND. ( o:Value <> 0 )

            if dbAppe( dbfArtLbl )
               ( dbfArtLbl )->cCodArt  := o:cCodigo
               ( dbfArtLbl )->cCodPr1  := o:cCodigoPropiedad1
               ( dbfArtLbl )->cCodPr2  := o:cCodigoPropiedad2
               ( dbfArtLbl )->cValPr1  := o:cValorPropiedad1
               ( dbfArtLbl )->cValPr2  := o:cValorPropiedad2
               ( dbfArtLbl )->nUndLbl  := o:Value
               ( dbfArtLbl )->( dbUnLock() )
            end

            n  += o:Value

         end

      next

   next

   if dbLock( dbfArticulo )
      ( dbfArticulo )->nLabel := n
      ( dbfArticulo )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

   oDlg:end( 1 )

Return ( .T. )



UTILITY STATIC function TArticuloLabelGenerator_LoadPropertiesLabels( aTblPrp) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local o
   local a

   if ( dbfArtLbl )->( dbSeek( ( dbfArticulo )->Codigo ) )

      while ( dbfArtLbl )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfArtLbl )->( eof() )

         for each a in ( aTblPrp )

            for each o in ( a )





               if Rtrim( o:cCodigo )            == Rtrim( ( dbfArtLbl )->cCodArt )  .AND.  Rtrim( o:cCodigoPropiedad1 )  == Rtrim( ( dbfArtLbl )->cCodPr1 )  .AND.  Rtrim( o:cCodigoPropiedad2 )  == Rtrim( ( dbfArtLbl )->cCodPr2 )  .AND.  Rtrim( o:cValorPropiedad1 )   == Rtrim( ( dbfArtLbl )->cValPr1 )  .AND.  Rtrim( o:cValorPropiedad2 )   == Rtrim( ( dbfArtLbl )->cValPr2 )

                  o:Value  := ( dbfArtLbl )->nUndLbl

               end

            next

         next

         ( dbfArtLbl )->( dbSkip() )

      end

   end

Return ( aTblPrp )



Static Function bGenEditText( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:cText } )



Static Function bGenEditValue( aTblPrp, oBrwPrp, n )

Return ( {|| aTblPrp[ oBrwPrp:nArrayAt, n ]:Value } )



UTILITY STATIC function TArticuloLabelGenerator_AddLabel() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if dbLock( dbfArticulo )
      ( dbfArticulo )->nLabel++
      ( dbfArticulo )->( dbUnLock() )
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_DelLabel() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if ( dbfArticulo )->nLabel > 1
      if dbLock( dbfArticulo )
         ( dbfArticulo )->nLabel--
         ( dbfArticulo )->( dbUnLock() )
      end
   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_EditLabel() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oBrwLabel:aCols[ 4 ]:Edit()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_FilterLabel() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if Empty( ::oFilter )
      ::oFilter      := TDlgFlt():New( aItmArt(), dbfArticulo )
   end

   if !Empty( ::oFilter )

      ::oFilter:Resource()

      if ::oFilter:cExpFilter <> nil
         SetWindowText( ::oBtnFilter:hWnd, "Filtro activo" )
      else
         SetWindowText( ::oBtnFilter:hWnd, "Filtrar" )
      end

   end

   ::oBrwLabel:Refresh()
   ::oBrwLabel:SetFocus()

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_ChangeCriterio() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   ::oFamiliaInicio:Hide()
   ::oFamiliaFin:Hide()

   ::oInicio:Hide()
   ::oFin:Hide()

   ::oFechaInicio:Hide()
   ::oFechaFin:Hide()

   do case
      case ::oCriterio:nAt == 3

         ::oFamiliaInicio:Show()
         ::oFamiliaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

      case ::oCriterio:nAt == 4

         ::oFechaInicio:Show()
         ::oFechaFin:Show()
         ::oInicio:Show()
         ::oFin:Show()

   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_lCreateTemporal() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local nRec
   local oBlock
   local oError
   local nBlancos
   local lCreateTemporal   := .T.
   local lCloseArticulo    := .F.
   local lCloseLabel       := .F.

   oBlock                  := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      tmpArticulo          := "LblArt"
      filArticulo          := cGetNewFileName( cPatTmp() + "LblAlb" )

      dbCreate( filArticulo, aSqlStruct( aItmArt() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), filArticulo, tmpArticulo, .F. )

      ( tmpArticulo )->( OrdCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( tmpArticulo )->( OrdCreate( filArticulo, "Codigo", "Codigo", {|| Field->Codigo } ) )

      if Empty( dbfArticulo )
         dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
         lCloseArticulo    := .T.
      end

      if Empty( dbfArtLbl )
         dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtLbl.Dbf" ), ( cCheckArea( "ArtLbl", @dbfArtLbl ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatArt() + "ArtLbl.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end
         lCloseLabel       := .T.
      end





      nRec                 := ( dbfArticulo )->( Recno() )

      ( dbfArticulo )->( dbGoTop() )
      while !( dbfArticulo )->( eof() )

         if ( dbfArticulo )->lLabel

            if ( dbfArtLbl )->( dbSeek( ( dbfArticulo )->Codigo ) )

               while ( dbfArtLbl )->cCodArt == ( dbfArticulo )->Codigo .AND. !( dbfArtLbl )->( eof() )

                  for n := 1 to ( ( dbfArtLbl )->nUndLbl )

                     dbPass( dbfArticulo, tmpArticulo, .T. )

                     ( tmpArticulo )->cCodPrp1  := ( dbfArtLbl )->cCodPr1
                     ( tmpArticulo )->cCodPrp2  := ( dbfArtLbl )->cCodPr2
                     ( tmpArticulo )->cValPrp1  := ( dbfArtLbl )->cValPr1
                     ( tmpArticulo )->cValPrp2  := ( dbfArtLbl )->cValPr2

                  next

                  ( dbfArtLbl )->( dbSkip() )

               end

            else

               for n := 1 to ( dbfArticulo )->nLabel
                  dbPass( dbfArticulo, tmpArticulo, .T. )
               next

            end

         end

         ( dbfArticulo )->( dbSkip() )

      end

      ( dbfArticulo )->( dbGoTo( nRec ) )

      ( tmpArticulo )->( dbGoTop() )





      if lCloseArticulo
         ( dbfArticulo )->( dbCloseArea() )
         dbfArticulo       := nil
      end

      if lCloseLabel
         ( dbfArtLbl )->( dbCloseArea() )
         dbfArtLbl         := nil
      end

   RECOVER USING oError

      lCreateTemporal      := .F.

      MsgStop( "Imposible abrir ficheros de artículos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lCreateTemporal )



UTILITY STATIC function TArticuloLabelGenerator_PrepareTemporal( oFr) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local n
   local nBlancos       := 0
   local nPaperHeight   := oFr:GetProperty( "MainPage", "PaperHeight" ) * 3.77953
   local nHeight        := oFr:GetProperty( "CabeceraColumnas", "Height" )
   local nColumns       := oFr:GetProperty( "MainPage", "Columns" )
   local nItemsInColumn := int( nPaperHeight / nHeight )

   nBlancos             := ( ::nColumnaInicio - 1 ) * nItemsInColumn
   nBlancos             += ( ::nFilaInicio - 1 )

   for n := 1 to nBlancos
      dbPass( dbBlankRec( dbfArticulo ), tmpArticulo, .T. )
   next

   ( tmpArticulo )->( dbGoTop() )

Return ( .T. )



UTILITY STATIC function TArticuloLabelGenerator_DestroyTemporal() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   if ( tmpArticulo )->( Used() )
      ( tmpArticulo )->( dbCloseArea() )
   end

   dbfErase( filArticulo )

Return ( .T. )



UTILITY STATIC function TArticuloLabelGenerator_lPrintLabels() ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oFr

   if !::lCreateTemporal()
      Return .F.
   end

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )






   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      ::PrepareTemporal( oFr )





      oFr:PrepareReport()






      oFr:ShowPreparedReport()

   end





   oFr:DestroyFr()





   ::DestroyTemporal()

Return .T.



UTILITY STATIC function TArticuloLabelGenerator_InitLabel( oLabel) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local nStartRow

   if ::nFilaInicio > 1
      nStartRow            := oLabel:nStartRow
      nStartRow            += ( ::nFilaInicio - 1 ) * ( oLabel:nLblHeight + oLabel:nVSeparator )

      if nStartRow < oLabel:nBottomRow
         oLabel:nStartRow  := nStartRow
      end
   end

   if ::nColumnaInicio > 1 .AND. ::nColumnaInicio <= oLabel:nLblOnLine
      oLabel:nLblCurrent   := ::nColumnaInicio
   end

Return ( Self )



UTILITY STATIC function TArticuloLabelGenerator_SelectColumn( oCombo) ; local Self AS CLASS TArticuloLabelGenerator := QSelf() AS CLASS TArticuloLabelGenerator

   local oCol
   local cOrd                    := oCombo:VarGet()

   if ::oBrwLabel <> nil

      with object ::oBrwLabel

         for each oCol in :aCols

            if Eq( cOrd, oCol:cHeader )
               oCol:cOrder       := "A"
               oCol:SetOrder()
            else
               oCol:cOrder       := " "
            end

         next

      end

      ::oBrwLabel:Refresh()

   end

Return ( Self )




Static Function lLabel( dbfTmpLbl )

   oMsgProgress():Deltapos( 1 )

Return ( ( dbfTmpLbl )->lLabel )



Static Function SkipLabel( dbfArticulo, oMtr )

   if ( dbfArticulo )->lLabel .AND. ( dbfArticulo )->nLabel > nLabels
      ++nLabels
   else
      nLabels  := 1
      ( dbfArticulo )->( dbSkip() )
   end

   if !Empty( oMtr )
      oMtr:Set( ( dbfArticulo )->( ordKeyNo() ) )
   end

Return ( ( dbfArticulo )->( Recno() ) )



Function nPreArtPrv( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nImpPrv
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom



Function nDtoArtPrv( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nDtoPrv
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom



Function nPrmArtPrv( cCodPrv, cCodArt, dbfPrvArt )

   local nPreCom  := 0
   local nRec     := ( dbfPrvArt )->( Recno() )

   if dbSeekInOrd( cCodPrv + cCodArt, "cCodPrv", dbfPrvArt )
      nPreCom     := ( dbfPrvArt )->nDtoPrm
   end

   ( dbfPrvArt )->( dbGoTo( nRec ) )

Return nPreCom


























































































































































































































































































































































































































































































_HB_CLASS pdaArticuloSenderReciver ; UTILITY FUNCTION pdaArticuloSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "pdaArticuloSenderReciver" , { HBObject():Classh } ) ) ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @pdaArticuloSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @pdaArticuloSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CleanRelation(); IIF( .F., s_oClass:ModMethod( "CleanRelation", @pdaArticuloSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CleanRelation", @pdaArticuloSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS pdaArticuloSenderReciver ;



UTILITY STATIC function pdaArticuloSenderReciver_CreateData( oPgrActual, oSayStatus, cPatPreVenta) ; local Self AS CLASS pdaArticuloSenderReciver := QSelf() AS CLASS pdaArticuloSenderReciver

   local tmpKit
   local tmpOfe
   local tmpArtVta
   local tmpArtPrv
   local tmpArticulo
   local tmpCodebar
   local tmpImg
   local dbfKit
   local dbfOfe
   local dbfArtVta
   local dbfArtPrv
   local dbfArticulo
   local dbfCodebar
   local dbfImg
   local lExist         := .F.
   local cFileName
   local cPatPc         := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROVART.DBF" ), ( cCheckArea( "PROVART", @dbfArtPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTKIT", @dbfKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtImg.Dbf" ), ( cCheckArea( "ArtImg", @dbfImg ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ArtImg.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., cDriver(), cPatPc + "ARTICULO.Dbf", cCheckArea( "ARTICULO", @tmpArticulo ), .T. )
   ( tmpArticulo )->( ordListAdd( cPatPc + "ARTICULO.Cdx" ) )
   ( tmpArticulo )->( OrdSetFocus( "lSndDoc" ) )

   dbUseArea( .T., cDriver(), cPatPc + "PROVART.Dbf", cCheckArea( "PROVART", @tmpArtPrv ), .T. )
   ( tmpArtPrv )->( ordListAdd( cPatPc + "PROVART.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTDIV.Dbf", cCheckArea( "ARTDIV", @tmpArtVta ), .T. )
   ( tmpArtVta )->( ordListAdd( cPatPc + "ARTDIV.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTKIT.Dbf", cCheckArea( "ARTKIT", @tmpKit ), .T. )
   ( tmpKit )->( ordListAdd( cPatPc + "ARTKIT.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "OFERTA.Dbf", cCheckArea( "OFERTA", @tmpOfe ), .T. )
   ( tmpOfe )->( ordListAdd( cPatPc + "OFERTA.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTCODEBAR.Dbf", cCheckArea( "CODEBAR", @tmpCodebar ), .T. )
   ( tmpCodebar )->( ordListAdd( cPatPc + "ARTCODEBAR.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ArtImg.Dbf", cCheckArea( "ArtImg", @tmpImg ), .T. )
   ( tmpImg )->( ordListAdd( cPatPc + "ArtImg.Cdx" ) )

   if !Empty( oPgrActual )
      oPgrActual:SetRange( 0, ( tmpArticulo )->( OrdKeyCount() ) )
   end

   ( tmpArticulo )->( dbGoTop() )
   while !( tmpArticulo )->( eof() )

      if ( tmpArticulo )->lSndDoc

         ::CleanRelation( ( tmpArticulo )->Codigo, dbfArtPrv, dbfArtVta, dbfKit, dbfOfe, dbfCodeBar )

         if dbLock( tmpArticulo )
            ( tmpArticulo )->lSndDoc       := .F.
            ( tmpArticulo )->( dbUnlock() )
         end

         if ( dbfArticulo )->( dbSeek( ( tmpArticulo )->Codigo ) )
            dbPass( tmpArticulo, dbfArticulo, .F. )
         else
            dbPass( tmpArticulo, dbfArticulo, .T. )
         end





         if ( tmpCodebar )->( dbSeek( ( tmpArticulo )->Codigo ) )
            while ( tmpCodebar )->cCodArt == ( tmpArticulo )->Codigo .AND. !( tmpCodebar )->( eof() )
               dbPass( tmpCodebar, dbfCodebar, .F. )
               ( tmpCodebar )->( dbSkip() )
            end
         end





         if ( tmpArtPrv )->( dbSeek( ( tmpArticulo )->Codigo ) )
            while ( tmpArtPrv )->cCodArt == ( tmpArticulo )->Codigo .AND. !( tmpArtPrv )->( eof() )
               dbPass( tmpArtPrv, dbfArtPrv, .F. )
               ( tmpArtPrv )->( dbSkip() )
            end
         end





         if ( tmpArtVta )->( dbSeek( ( tmpArticulo )->CODIGO ) )
            while ( tmpArtVta )->cCodArt == ( tmpArticulo )->Codigo .AND. !( tmpArtVta )->( eof() )
               dbPass( tmpArtVta, dbfArtVta, .F. )
               ( tmpArtVta )->( dbSkip() )
            end
         end





         if ( tmpKit )->( dbSeek( ( tmpArticulo )->CODIGO ) )
            while ( tmpKit )->cCodKit == ( tmpArticulo )->Codigo .AND. !( tmpKit )->( eof() )
               dbPass( tmpKit, dbfKit, .F. )
               ( tmpKit )->( dbSkip() )
            end
         end





         if ( tmpOfe )->( dbSeek( ( tmpArticulo )->Codigo ) )
            while ( tmpOfe )->cArtOfe == ( tmpArticulo )->Codigo .AND. !( tmpOfe )->( eof() )
               dbPass( tmpOfe, dbfOfe, .F. )
               ( tmpOfe )->( dbSkip() )
            end
         end





         if ( tmpImg )->( dbSeek( ( tmpArticulo )->Codigo ) )
            while ( tmpImg )->cArtOfe == ( tmpArticulo )->Codigo .AND. !( tmpImg )->( eof() )
               dbPass( tmpImg, dbfOfe, .F. )
               ( tmpImg )->( dbSkip() )
            end
         end

      end

      ( tmpArticulo )->( dbSkip() )

      if !Empty( oSayStatus )
         oSayStatus:SetText( "Sincronizando Artículos " + Alltrim( Str( ( tmpArticulo )->( OrdKeyNo() ) ) ) + " de " + Alltrim( Str( ( tmpArticulo )->( OrdKeyCount() ) ) ) )
      end

      SysRefresh()

      if !Empty( oPgrActual )
         oPgrActual:SetPos( ( tmpArticulo )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   ( tmpArticulo )->( dbCloseArea() )
   ( tmpArtPrv   )->( dbCloseArea() )
   ( tmpArtVta   )->( dbCloseArea() )
   ( tmpKit      )->( dbCloseArea() )
   ( tmpOfe      )->( dbCloseArea() )
   ( tmpImg      )->( dbCloseArea() )
   ( tmpCodebar  )->( dbCloseArea() )
   ( dbfArticulo )->( dbCloseArea() )
   ( dbfArtPrv   )->( dbCloseArea() )
   ( dbfArtVta   )->( dbCloseArea() )
   ( dbfKit      )->( dbCloseArea() )
   ( dbfOfe      )->( dbCloseArea() )
   ( dbfCodebar  )->( dbCloseArea() )

Return ( Self )



UTILITY STATIC function pdaArticuloSenderReciver_CleanRelation( CodArt, dbfArtPrv, dbfArtVta, dbfKit, dbfOfe, dbfCodeBar) ; local Self AS CLASS pdaArticuloSenderReciver := QSelf() AS CLASS pdaArticuloSenderReciver

   if !Empty( dbfArtPrv ) .AND. ( dbfArtPrv )->( Used() )
      while ( dbfArtPrv )->( dbSeek( CodArt ) )
         dbDel( dbfArtPrv )
      end
   end

   if !Empty( dbfArtVta ) .AND. ( dbfArtVta )->( Used() )
      while ( dbfArtVta )->( dbSeek( CodArt ) )
         dbDel( dbfArtVta )
      end
   end

   if !Empty( dbfKit ) .AND. ( dbfKit )->( Used() )
      while ( dbfKit )->( dbSeek( CodArt ) )
         dbDel( dbfKit )
      end
   end

   if !Empty( dbfOfe ) .AND. ( dbfOfe )->( Used() )
      while ( dbfOfe )->( dbSeek( CodArt ) )
         dbDel( dbfOfe )
      end
   end

   if !Empty( dbfImg ) .AND. ( dbfImg )->( Used() )
      while ( dbfImg )->( dbSeek( CodArt ) )
         dbDel( dbfImg )
      end
   end

   if !Empty( dbfCodeBar ) .AND. ( dbfCodeBar )->( Used() )
      while ( dbfCodeBar )->( dbSeek( CodArt ) )
         dbDel( dbfCodeBar )
      end
   end

Return ( Self )


_HB_CLASS pdaPCArtSenderReciver ; UTILITY FUNCTION pdaPCArtSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "pdaPCArtSenderReciver" , { HBObject():Classh } ) ) ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @pdaPCArtSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @pdaPCArtSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CleanRelation(); IIF( .F., s_oClass:ModMethod( "CleanRelation", @pdaPCArtSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CleanRelation", @pdaPCArtSenderReciver_CleanRelation(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS pdaPCArtSenderReciver ;



UTILITY STATIC function pdaPCArtSenderReciver_CreateData( oPgrActual, oSayStatus, cPatPreVenta) ; local Self AS CLASS pdaPCArtSenderReciver := QSelf() AS CLASS pdaPCArtSenderReciver

   local lExist         := .F.
   local pcKit
   local pcOfe
   local pcArtVta
   local pcArtPrv
   local pcArticulo
   local pcCodebar
   local pdaKit
   local pdaOfe
   local pdaArtVta
   local pdaArtPrv
   local pdaArticulo
   local pdaCodebar
   local cPatPc         := if( Empty( cPatPreVenta ), cPatPc(), cPatPreVenta )

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @pcArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( pcArticulo )->( OrdSetFocus( "lSndDoc" ) )

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "PROVART.DBF" ), ( cCheckArea( "PROVART", @pcArtPrv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "PROVART.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @pcArtVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "ARTKIT.DBF" ), ( cCheckArea( "ARTKIT", @pcKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @pcOfe ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatPc + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @pcCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatPc + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end





   dbUseArea( .T., cDriver(), cPatPc + "ARTICULO.Dbf", cCheckArea( "ARTICULO", @pdaArticulo ), .T. )
   ( pdaArticulo )->( ordListAdd( cPatPc + "ARTICULO.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "PROVART.Dbf", cCheckArea( "PROVART", @pdaArtPrv ), .T. )
   ( pdaArtPrv )->( ordListAdd( cPatPc + "PROVART.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTDIV.Dbf", cCheckArea( "ARTDIV", @pdaArtVta ), .T. )
   ( pdaArtVta )->( ordListAdd( cPatPc + "ARTDIV.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTKIT.Dbf", cCheckArea( "ARTKIT", @pdaKit ), .T. )
   ( pdaKit )->( ordListAdd( cPatPc + "ARTKIT.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "OFERTA.Dbf", cCheckArea( "OFERTA", @pdaOfe ), .T. )
   ( pdaOfe )->( ordListAdd( cPatPc + "OFERTA.Cdx" ) )

   dbUseArea( .T., cDriver(), cPatPc + "ARTCODEBAR.Dbf", cCheckArea( "CODEBAR", @pdaCodebar ), .T. )
   ( pdaCodebar )->( ordListAdd( cPatPc + "ARTCODEBAR.Cdx" ) )


   if !Empty( oPgrActual )
      oPgrActual:SetRange( 0, ( pdaArticulo )->( OrdKeyCount() ) )
   end

   ( pdaArticulo )->( dbGoTop() )

   while !( pdaArticulo )->( eof() )

      if ( pdaArticulo )->lSndDoc

         ::CleanRelation( ( pcArticulo )->Codigo, pdaArtPrv, pdaArtVta, pdaKit, pdaOfe, pdaCodeBar )

         if !( pcArticulo )->( dbSeek( ( pdaArticulo )->Codigo ) )

            if dbLock( pdaArticulo )
               ( pdaArticulo )->lSndDoc  := .F.
               ( pdaArticulo )->( dbUnLock() )
            end

            dbPass( pdaArticulo, pcArticulo, .T. )

            if ( pdaArtPrv )->( dbSeek( ( pdaArticulo )->Codigo ) )
               while ( pdaArtPrv )->cCodArt == ( pdaArticulo )->Codigo .AND. !( pdaArtPrv )->( eof() )
                  dbPass( pdaArtPrv, pcArtPrv, .T. )
                  ( pdaArtPrv )->( dbSkip() )
               end
            end

            if ( pdaArtVta )->( dbSeek( ( pdaArticulo )->Codigo ) )
               while ( pdaArtVta )->cCodArt == ( pdaArticulo )->Codigo .AND. !( pdaArtVta )->( eof() )
                  dbPass( pdaArtVta, pcArtVta, .T. )
                  ( pdaArtVta )->( dbSkip() )
               end
            end

            if ( pdaKit )->( dbSeek( ( pdaArticulo )->Codigo ) )
               while ( pdaKit )->cCodKit == ( pdaArticulo )->Codigo .AND. !( pdaKit )->( eof() )
                  dbPass( pdaKit, pcKit, .T. )
                  ( pdaKit )->( dbSkip() )
               end
            end

            if ( pdaOfe )->( dbSeek( ( pdaArticulo )->Codigo ) )
               while ( pdaOfe )->cArtOfe == ( pdaArticulo )->Codigo .AND. !( pdaOfe )->( eof() )
                  dbPass( pdaOfe, pcOfe, .T. )
                  ( pdaOfe )->( dbSkip() )
               end
            end

            if ( pdaCodebar )->( dbSeek( ( pdaArticulo )->Codigo ) )
               while ( pdaCodebar )->cCodArt == ( pdaArticulo )->Codigo .AND. !( pdaCodebar )->( eof() )
                  dbPass( pdaCodebar, pcCodebar, .T. )
                  ( pdaCodebar )->( dbSkip() )
               end
            end

         end

      end

      ( pdaArticulo )->( dbSkip() )

      if !Empty( oSayStatus )
         oSayStatus:SetText( "Sincronizando Artículos " + Alltrim( Str( ( pdaArticulo )->( OrdKeyNo() ) ) ) + " de " + Alltrim( Str( ( pdaArticulo )->( OrdKeyCount() ) ) ) )
      end

      SysRefresh()

      if !Empty( oPgrActual )
         oPgrActual:SetPos( ( pdaArticulo )->( OrdKeyNo() ) )
      end

      SysRefresh()

   end

   ( pcKit       )->( dbCloseArea() )
   ( pcOfe       )->( dbCloseArea() )
   ( pcArtVta    )->( dbCloseArea() )
   ( pcArtPrv    )->( dbCloseArea() )
   ( pcArticulo  )->( dbCloseArea() )
   ( pcCodebar   )->( dbCloseArea() )
   ( pdaKit      )->( dbCloseArea() )
   ( pdaOfe      )->( dbCloseArea() )
   ( pdaArtVta   )->( dbCloseArea() )
   ( pdaArtPrv   )->( dbCloseArea() )
   ( pdaArticulo )->( dbCloseArea() )
   ( pdaCodebar  )->( dbCloseArea() )

Return ( Self )



UTILITY STATIC function pdaPCArtSenderReciver_CleanRelation( CodArt, pdaArtPrv, pdaArtVta, pdaKit, pdaOfe, pdaCodeBar) ; local Self AS CLASS pdaPCArtSenderReciver := QSelf() AS CLASS pdaPCArtSenderReciver

   while ( pdaArtPrv )->( dbSeek( CodArt ) )
      dbDel( pdaArtPrv )
   end

   while ( pdaArtVta )->( dbSeek( CodArt ) )
      dbDel( pdaArtVta )
   end

   while ( pdaKit )->( dbSeek( CodArt ) )
      dbDel( pdaKit )
   end

   while ( pdaOfe )->( dbSeek( CodArt ) )
      dbDel( pdaOfe )
   end

   while ( pdaCodeBar )->( dbSeek( CodArt ) )
      dbDel( pdaCodeBar )
   end

   SysRefresh()

Return Self







Function IsArticulo( cPath )

   IIF( cPath == nil, cPath := cPatArt(), ) ;

   if !lExistTable( cPath + "Articulo.Dbf" )
      dbCreate( cPath + "Articulo.Dbf",   aSqlStruct( aItmArt() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtDiv.Dbf" )
      dbCreate( cPath + "ArtDiv.Dbf",     aSqlStruct( aItmVta() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtKit.Dbf" )
      dbCreate( cPath + "ArtKit.Dbf",     aSqlStruct( aItmKit() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtCodebar.Dbf" )
      dbCreate( cPath + "ArtCodebar.Dbf", aSqlStruct( aItmBar() ), cDriver() )
   end

   if !lExistTable( cPath + "ProvArt.Dbf" )
      dbCreate( cPath + "ProvArt.Dbf",    aSqlStruct( aItmArtPrv() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtLbl.Dbf" )
      dbCreate( cPath + "ArtLbl.Dbf",     aSqlStruct( aItmLbl() ), cDriver() )
   end

   if !lExistTable( cPath + "ArtImg.Dbf" )
      dbCreate( cPath + "ArtImg.Dbf",     aSqlStruct( aItmImg() ), cDriver() )
   end







   if !lExistIndex( cPath + "Articulo.Cdx"   )  .OR.  !lExistIndex( cPath + "ArtDiv.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtKit.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtCodebar.Cdx" )  .OR.  !lExistIndex( cPath + "ProvArt.Cdx"    )  .OR.  !lExistIndex( cPath + "ArtLbl.Cdx"     )  .OR.  !lExistIndex( cPath + "ArtImg.Cdx"     )

      rxArticulo( cPath )

   end

Return ( .T. )



FUNCTION mkArticulo( cPath, lAppend, cPathOld, oMeter, lMovAlm )

    IIF( lAppend == nil, lAppend := .F., ) ;
    IIF( lMovAlm == nil, lMovAlm := .T., ) ;
   IIF( cPath == nil, cPath := cPatArt(), ) ;

   if !Empty( oMeter )
        oMeter:cText    := "Generando Bases"
        sysrefresh()
   end

   if !lExistTable( cPath + "Articulo.Dbf" )
      dbCreate( cPath + "Articulo.Dbf",   aSqlStruct( aItmArt() ),      cDriver() )
   end

   if !lExistTable( cPath + "ArtDiv.Dbf" )
      dbCreate( cPath + "ArtDiv.Dbf",     aSqlStruct( aItmVta() ),      cDriver() )
   end

   if !lExistTable( cPath + "ArtKit.Dbf" )
      dbCreate( cPath + "ArtKit.Dbf",     aSqlStruct( aItmKit() ),      cDriver() )
   end

   if !lExistTable( cPath + "ArtCodebar.Dbf" )
      dbCreate( cPath + "ArtCodebar.Dbf", aSqlStruct( aItmBar() ),      cDriver() )
   end

   if !lExistTable( cPath + "ProvArt.Dbf" )
      dbCreate( cPath + "ProvArt.Dbf",    aSqlStruct( aItmArtPrv() ),   cDriver() )
   end

   if !lExistTable( cPath + "ArtLbl.Dbf" )
      dbCreate( cPath + "ArtLbl.Dbf",     aSqlStruct( aItmLbl() ),      cDriver() )
   end

   if !lExistTable( cPath + "ArtImg.Dbf" )
      dbCreate( cPath + "ArtImg.Dbf",     aSqlStruct( aItmImg() ),      cDriver() )
   end





   if lAppend .AND. lIsDir( cPathOld )

      AppDbf( cPathOld, cPath, "Articulo"    )
      AppDbf( cPathOld, cPath, "ArtDiv"      )
      AppDbf( cPathOld, cPath, "ProvArt"     )
      AppDbf( cPathOld, cPath, "ArtCodebar"  )
      AppDbf( cPathOld, cPath, "ArtKit"      )
      AppDbf( cPathOld, cPath, "ArtLbl"      )
      AppDbf( cPathOld, cPath, "ArtImg"      )

      if lMovAlm
         AppDbf( cPathOld, cPath, "MovAlm"   )
      end

   end

   rxArticulo( cPath, oMeter )

RETURN .T.



FUNCTION rxArticulo( cPath, oMeter, lRecPrc )

   local dbfCodebar
   local dbfArticulo

   IIF( cPath == nil, cPath := cPatArt(), ) ;
   IIF( lRecPrc == nil, lRecPrc := .F., ) ;







   if !lExistTable( cPath + "Articulo.Dbf"   ) .OR.  !lExistTable( cPath + "ProvArt.Dbf"    ) .OR.  !lExistTable( cPath + "ArtDiv.Dbf"     ) .OR.  !lExistTable( cPath + "ArtKit.Dbf"     ) .OR.  !lExistTable( cPath + "ArtCodebar.Dbf" ) .OR.  !lExistTable( cPath + "ArtLbl.Dbf"     ) .OR.  !lExistTable( cPath + "ArtImg.Dbf"     )

      mkArticulo( cPath )

   end

   fErase( cPath + "Articulo.Cdx"   )
   fErase( cPath + "ProvArt.Cdx"    )
   fErase( cPath + "ArtDiv.Cdx"     )
   fErase( cPath + "ArtKit.Cdx"     )
   fErase( cPath + "ArtCodebar.Cdx" )
   fErase( cPath + "ArtLbl.Cdx"     )
   fErase( cPath + "ArtImg.Cdx"     )

   dbUseArea( .T., cDriver(), cPath + "ARTICULO.DBF", cCheckArea( "ARTICULO", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )

      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "Codigo", "Codigo", {|| Field->Codigo } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "Nombre", "UPPER( NOMBRE )", {|| UPPER( Field->NOMBRE ) } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CFAMCOD", "FAMILIA + CODIGO", {|| Field->FAMILIA + Field->CODIGO }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CPRVHAB", "CPRVHAB", {|| Field->CPRVHAB }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. !lObs", {|| !Deleted() .AND. !Field->lObs }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CODOBS", "CODIGO", {|| Field->CODIGO } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. !lObs", {|| !Deleted() .AND. !Field->lObs }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "NOMOBS", "UPPER( NOMBRE )", {|| UPPER( Field->NOMBRE ) } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CCODCATE", "CCODCATE", {|| Field->CCODCATE }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CCODTEMP", "CCODTEMP", {|| Field->CCODTEMP }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CFAMNOM", "FAMILIA + NOMBRE", {|| Field->FAMILIA + Field->NOMBRE }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. lIncTcl", {|| !Deleted() .AND. Field->lIncTcl }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "nPosTpv", "Field->Familia + Str( Field->nPosTpv )", {|| Field->Familia + Str( Field->nPosTpv ) } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. lIncTcl", {|| !Deleted() .AND. Field->lIncTcl }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "nNomTpv", "Field->Familia + Field->NOMBRE ", {|| Field->Familia + Field->NOMBRE } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "FAMILIA", "FAMILIA", {|| Field->FAMILIA }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. lIncTcl .and. nPosTpv != 0", {|| !Deleted() .AND. Field->lIncTcl .AND. Field->nPosTpv <> 0 }, , , , , , , , , .T. ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "NPOSTCL", "NPOSTCL", {|| Field->nPosTcl }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "NCTLSTOCK", "NCTLSTOCK", {|| Field->NCTLSTOCK }, ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "lSndDoc", "lSndDoc", {|| Field->lSndDoc } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted() .and. lSndDoc", {|| !Deleted() .AND. Field->lSndDoc }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "SNDCOD", "CODIGO", {|| Field->Codigo } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "MOVART", "Padl( RTrim( Field->CODIGO ), 18 )", {|| Padl( RTrim( Field->CODIGO ), 18 ) } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "cCodTnk", "Field->cCodTnk", {|| Field->cCodTnk } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTICULO.CDX", "CodeBar", "Field->CodeBar", {|| Field->CodeBar } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "cCodUsr", "Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg", {|| Field->cCodUsr + Dtos( Field->dFecChg ) + Field->cTimChg } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "cCodWeb", "Str( Field->cCodWeb, 11 )", {|| Str( Field->cCodWeb, 11 ) } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted() .and. lPubInt", {|| !Deleted() .AND. Field->lPubInt }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "Articulo.Cdx", "lPubInt", "lPubInt", {|| Field->lPubInt } ) )

      ( dbfArticulo )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )

   end





   dbUseArea( .T., cDriver(), cPath + "PROVART.DBF", cCheckArea( "PROVART", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )

      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "PROVART.CDX", "CCODART", "CCODART", {|| Field->CCODART } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "PROVART.CDX", "CCODPRV", "CCODPRV + CCODART", {|| Field->CCODPRV + Field->CCODART } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "PROVART.CDX", "cRefPrv", "cCodPrv + cRefPrv", {|| Field->CCODPRV + Field->CREFPRV } ) )

      ( dbfArticulo )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )

   end





   dbUseArea( .T., cDriver(), cPath + "ARTDIV.DBF", cCheckArea( "ARTDIV", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )
      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtDiv.Cdx", "cCodArt", "CCODART + CCODPR1 + CCODPR2 + CVALPR1 + CVALPR2", {|| Field->CCODART + Field->CCODPR1 + Field->CCODPR2 + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtDiv.Cdx", "cValPrp", "CCODART + CVALPR1 + CVALPR2", {|| Field->CCODART + Field->CVALPR1 + Field->CVALPR2 } ) )

      ( dbfArticulo )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver(), cPath + "ARTKIT.DBF", cCheckArea( "ARTKIT", @dbfArticulo ), .F. )
   if !( dbfArticulo )->( neterr() )
      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTKIT.CDX", "CCODKIT", "CCODKIT", {|| Field->CCODKIT } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTKIT.CDX", "CCODREF", "CCODKIT + CREFKIT", {|| Field->CCODKIT + Field->CREFKIT } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ARTKIT.CDX", "CREFKIT", "CREFKIT", {|| Field->CREFKIT } ) )

      ( dbfArticulo )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver(), cPath + "ArtCodebar.Dbf", cCheckArea( "ARTICULO", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )

      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtCodebar.Cdx", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtCodebar.Cdx", "cCodBar", "cCodBar", {|| Field->cCodBar } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtCodebar.Cdx", "cArtBar", "cCodArt + cCodBar", {|| Field->cCodArt + Field->cCodBar } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted() .and. lDefBar", {|| !Deleted() .AND. Field->lDefBar }  ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtCodebar.Cdx", "cDefArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArticulo )->( dbCloseArea() )

   else

      msgStop( "Imposible abrir en modo exclusivo la tabla de codigos de barras" )

   end





   dbUseArea( .T., cDriver(), cPath + "ArtLbl.Dbf", cCheckArea( "ArtLbl", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )
      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet("!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtLbl.Cdx", "cCodArt", "cCodArt + cCodPr1 + cCodPr2 + cValPr1 + cValPr2", {|| Field->cCodArt + Field->cCodPr1 + Field->cCodPr2 + Field->cValPr1 + Field->cValPr2 } ) )

      ( dbfArticulo )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end





   dbUseArea( .T., cDriver(), cPath + "ArtImg.Dbf", cCheckArea( "ArtImg", @dbfArticulo ), .F. )

   if !( dbfArticulo )->( neterr() )
      ( dbfArticulo )->( __dbPack() )

      ( dbfArticulo )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtImg.Cdx", "cCodArt", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArticulo )->( ordCondSet( "!Deleted() .and. lDefImg", {|| !Deleted() .AND. Field->lDefImg } ) )
      ( dbfArticulo )->( ordCreate( cPath + "ArtImg.Cdx", "lDefImg", "cCodArt", {|| Field->cCodArt } ) )

      ( dbfArticulo )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de artículos" )
   end


















































RETURN NIL



function aItmArt()

   local aBase  := {}

   aAdd( aBase, { "Codigo",    "C", 18, 0, "Código del artículo" ,                    "'@!'",               "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Nombre",    "C",100, 0, "Nombre del artículo",                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesTik",   "C", 20, 0, "Descripción para el tiket" ,              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pCosto",    "N", 15, 6, "Precio de costo" ,                        "PicIn()",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PvpRec",    "N", 15, 6, "Precio venta recomendado" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf1",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 1","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LBNF2",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 2","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LBNF3",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 3","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LBNF4",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 4","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LBNF5",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 5","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LBNF6",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 6","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF1",    "N",  6, 2, "Porcentaje de beneficio precio 1" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF2",    "N",  6, 2, "Porcentaje de beneficio precio 2" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF3",    "N",  6, 2, "Porcentaje de beneficio precio 3" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF4",    "N",  6, 2, "Porcentaje de beneficio precio 4" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF5",    "N",  6, 2, "Porcentaje de beneficio precio 5" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "BENEF6",    "N",  6, 2, "Porcentaje de beneficio precio 6" ,       "'@EZ 99.99'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR1",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 1","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR2",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 2","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR3",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 3","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR4",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 4","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR5",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 5","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBNFSBR6",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 6","",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA1",   "N", 15, 6, "Precio de venta precio 1" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA2",   "N", 15, 6, "Precio de venta precio 2" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA3",   "N", 15, 6, "Precio de venta precio 3" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA4",   "N", 15, 6, "Precio de venta precio 4" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA5",   "N", 15, 6, "Precio de venta precio 5" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVENTA6",   "N", 15, 6, "Precio de venta precio 6" ,               "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA1",  "N", 15, 6, "Precio de venta precio 1 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA2",  "N", 15, 6, "Precio de venta precio 2 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA3",  "N", 15, 6, "Precio de venta precio 3 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA4",  "N", 15, 6, "Precio de venta precio 4 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA5",  "N", 15, 6, "Precio de venta precio 5 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PVTAIVA6",  "N", 15, 6, "Precio de venta precio 6 " + cImp() + " incluido" ,  "PicOut()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ1",     "N", 15, 6, "Precio de alquiler precio 1" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ2",     "N", 15, 6, "Precio de alquiler precio 2" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ3",     "N", 15, 6, "Precio de alquiler precio 3" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ4",     "N", 15, 6, "Precio de alquiler precio 4" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ5",     "N", 15, 6, "Precio de alquiler precio 5" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQ6",     "N", 15, 6, "Precio de alquiler precio 6" ,               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA1",  "N", 15, 6, "Precio de alquiler precio 1 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA2",  "N", 15, 6, "Precio de alquiler precio 2 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA3",  "N", 15, 6, "Precio de alquiler precio 3 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA4",  "N", 15, 6, "Precio de alquiler precio 4 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA5",  "N", 15, 6, "Precio de alquiler precio 5 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "PALQIVA6",  "N", 15, 6, "Precio de alquiler precio 6 " + cImp() + " incluido" ,    "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPNTVER1",  "N", 15, 6, "Contribución punto verde" ,                               "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPNVIVA1",  "N", 15, 6, "Contribución punto verde " + cImp() + " inc.",            "PicOut()",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NACTUAL",   "N", 15, 6, "Número de artículos" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCAJENT",   "N", 15, 6, "Número de cajas por defecto" ,            "MasUnd()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NUNICAJA",  "N", 15, 6, "Número de unidades por defecto" ,         "MasUnd()",           "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NMINIMO",   "N", 15, 6, "Número de stock mínimo" ,                 "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NMAXIMO",   "N", 15, 6, "Número de stock maximo" ,                 "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCNTACT",   "N", 15, 6, "Número del contador" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTIN",    "D",  8, 0, "Fecha ultima entrada" ,                   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTCHG",   "D",  8, 0, "Fecha de creación" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LASTOUT",   "D",  8, 0, "Fecha ultima salida" ,                    "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "TIPOIVA",   "C",  1, 0, "Código tipo de " + cImp(),                "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LIVAINC",   "L",  1, 0, "Lógico " + cImp() + " incluido (S/N)" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "FAMILIA",   "C", 16, 0, "Código de la familia del artículo" ,      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CSUBFAM",   "C",  8, 0, "Código de la subfamilia del artículo" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "GRPVENT",   "C",  9, 0, "Código del grupo de ventas" ,             "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTAVTA",   "C", 12, 0, "Código de la cuenta de ventas" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTACOM",   "C", 12, 0, "Código de la cuenta de compras" ,         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCTATRN",   "C", 12, 0, "Código de la cuenta de portes" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CODEBAR",   "C", 20, 0, "Código de barras" ,                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NTIPBAR",   "N",  2, 0, "Tipo de código de barras" ,               "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "DESCRIP",   "M", 10, 0, "Descripción larga" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LLABEL",    "L",  1, 0, "Lógico de selección de etiqueta",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLABEL",    "N",  5, 0, "Número de etiquetas a imprimir",          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCTLSTOCK", "N",  1, 0, "Control de stock ( 1, 2, 3 )",            "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LSELPRE",   "L",  1, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NSELPRE",   "N",  5, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NTIPPRE",   "N",  1, 0, "",                                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPESOKG",   "N", 16, 6, "Peso del artículo" ,                      "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNIDAD",   "C",  2, 0, "Unidad de medición del peso" ,            "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NVOLUMEN",  "N", 16, 6, "Volumen del artículo" ,                   "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CVOLUMEN",  "C",  2, 0, "Unidad de medición del volumen" ,         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLNGART",   "N", 16, 6, "Largo del artículo" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTART",   "N", 16, 6, "Alto del artículo" ,                      "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NANCART",   "N", 16, 6, "Ancho del artículo" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDDIM",   "C",  2, 0, "Unidad de medición de las longitudes" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPPES",   "N", 15, 6, "Importe de peso/volumen del articulo" ,   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CIMAGEN",   "C",250, 0, "Fichero de imagen" ,                      "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lSndDoc",   "L",  1, 0, "Lógico para envios" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodUsr",   "C",  3, 0, "Código de usuario que realiza el cambio" ,"",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFecChg",   "D",  8, 0, "Fecha de cambio" ,                        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTimChg",   "C",  5, 0, "Hora de cambio" ,                         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lKitArt",   "L",  1, 0, "Lógico de escandallos" ,                  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lKitAsc",   "L",  1, 0, "Lógico de asociado" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitImp",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitStk",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nKitPrc",   "N",  1, 0, "" ,                                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lAutSer",   "L",  1, 0, "Lógico de autoserializar" ,               "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LOBS",      "L",  1, 0, "Lógico de obsoleto" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LNUMSER",   "L",  1, 0, "Lógico solicitar numero de serie" ,       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CPRVHAB",   "C", 12, 0, "Proveedor habitual" ,                     "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LFACCNV",   "L",  1, 0, "Usar factor de conversión" ,              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CFACCNV",   "C",  2, 0, "Código del factor de conversión" ,        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTNK",   "C",  3, 0, "Código del tanque de combustible" ,       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTIP",   "C",  3, 0, "Código del tipo de artículo" ,            "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LTIPACC",   "L",  1, 0, "Lógico de acceso por unidades o importe", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LCOMBUS",   "L",  1, 0, "Lógico si el artículo es del tipo combustible", "",             "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODIMP",   "C",  3, 0, "Código del impuesto especiales",          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LMSGVTA",   "L",  1, 0, "Lógico para avisar en venta sin stock",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LNOTVTA",   "L",  1, 0, "Lógico para no permitir venta sin stock", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLOTE",     "N",  9, 0, "",                                        "'999999999'",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CLOTE",     "C", 12, 0, "Número de lote",                          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LLOTE",     "L",  1, 0, "Lote (S/N)",                              "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBINT",   "L",  1, 0, "Lógico para publicar en internet (S/N)",  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBOFE",   "L",  1, 0, "Lógico para publicar como oferta (S/N)",  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUBPOR",   "L",  1, 0, "Lógico para publicar como oferta de portada(S/N)",  "",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT1",  "N",  6, 2, "Descuento de oferta para tienda web 1",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT1",  "N", 15, 6, "Precio del producto en oferta 1",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA1",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 1", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT2",  "N",  6, 2, "Descuento de oferta para tienda web 2",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT2",  "N", 15, 6, "Precio del producto en oferta 2",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA2",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 2", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT3",  "N",  6, 2, "Descuento de oferta para tienda web 3",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT3",  "N", 15, 6, "Precio del producto en oferta 3",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA3",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 3", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT4",  "N",  6, 2, "Descuento de oferta para tienda web 4",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT4",  "N", 15, 6, "Precio del producto en oferta 4",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA4",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 4", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT5",  "N",  6, 2, "Descuento de oferta para tienda web 5",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT5",  "N", 15, 6, "Precio del producto en oferta 5",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA5",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 5", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOINT6",  "N",  6, 2, "Descuento de oferta para tienda web 6",   "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPINT6",  "N", 15, 6, "Precio del producto en oferta 6",         "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NIMPIVA6",  "N", 15, 6, "Precio del producto en oferta con " + cImp() + " 6", "",        "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NMESGRT",   "N",  2, 0, "Meses de garantía",                       "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NINFENT",   "N",  1, 0, "Información de entrega",                  "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NINFENT1",  "N",  3, 0, "Dias en entregar la mercancia ( desde )", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NINFENT2",  "N",  3, 0, "Dias en entregar la mercancia ( hasta )", "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "MDESTEC",   "M", 10, 0, "Descripción técnica del artículo",        "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NLNGCAJ",   "N", 16, 6, "Largo de la caja" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTCAJ",   "N", 16, 6, "Alto de la caja" ,                        "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NANCCAJ",   "N", 16, 6, "Ancho de la caja" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDCAJ",   "C",  2, 0, "Unidad de medición de la caja" ,          "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPESCAJ",   "N", 16, 6, "Peso de la caja" ,                        "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCAJPES",   "C",  2, 0, "Unidad de medición del peso de la caja" , "",                   "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NVOLCAJ",   "N", 16, 6, "Volumen de la caja" ,                     "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCAJVOL",   "C",  2, 0, "Unidad de medición del volumen de la caja","",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NCAJPLT",   "N", 16, 6, "Número de cajas por palets" ,             "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NBASPLT",   "N", 16, 6, "Base del palet" ,                         "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "NALTPLT",   "N", 16, 6, "Altura del palet" ,                       "'@E 999,999.999999'","", "( cDbfArt )", nil } )
   aAdd( aBase, { "CUNDPLT",   "C",  2, 0, "Unidad de medición de la altura del palet","",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LINCTCL",   "L",  1, 0, "Incluir en pantalla táctil",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CDESTCL",   "C", 20, 0, "Descripción en pantalla táctil",           "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CDESCMD",   "M", 10, 0, "Descripción para comanda",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPOSTCL",   "N", 16, 6, "Posición en pantalla táctil",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODCAT",   "C",  4, 0, "Código del catálogo del artículo" ,        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NPUNTOS",   "N", 16, 6, "Puntos del catalogo" ,                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NDTOPNT",   "N",  6, 2, "Dto. del catalogo" ,                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "NRENMIN",   "N",  6, 2, "Rentabilidad mínima" ,                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODCATE",  "C",  3, 0, "Código de categoría",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODTEMP",  "C",  3, 0, "Código de la temporada",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LECOTASA",  "L",  1, 0, "Lógico para usar ECOTASA",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LMOSCOM",   "L",  1, 0, "Lógico mostrar comentario" ,               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "MCOMENT",   "M", 10, 0, "Comentario a mostrar" ,                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LPUNTO",    "L",  1, 0, "Lógico para trabajar con puntos" ,         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODPRP1",  "C", 10, 0, "Código de la primera propiedad" ,          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODPRP2",  "C", 10, 0, "Código de la segunda propiedad" ,          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lCodPrp",   "L",  1, 0, "" ,                                        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodFra",   "C",  3, 0, "Código de frases publiciarias",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodWeb",   "N", 11, 0, "Código del producto en la web",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPosTpv",   "N", 10, 2, "Posición para mostrar en TPV táctil",      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDuracion", "N",  3, 0, "Duración del producto",                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nTipDur",   "N",  1, 0, "Tipo duración (dia, mes, año)",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodFab",   "C",  3, 0, "Código del fabricante",                    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpCom1",  "N",  1, 0, "Impresora de comanda 1",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpCom2",  "N",  1, 0, "Impresora de comanda 2",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "LMSGMOV",   "L",  1, 0, "Lógico para avisar en movimientos sin stock","",                "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImagenWeb","C",250, 0, "Imagen para la web",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cChgBar",   "D",  8, 0, "Fecha de cambio de código de barras",      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODUBI1",  "C",  5, 0, "Código primera ubicación",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODUBI2",  "C",  5, 0, "Código segunda ubicación",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CCODUBI3",  "C",  5, 0, "Código tercera ubicación",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CVALUBI1",  "C",  5, 0, "Valor primera ubicación",                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CVALUBI2",  "C",  5, 0, "Valor segunda ubicación",                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "CVALUBI3",  "C",  5, 0, "Valor tercera ubicación",                  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFecVta",   "D",  8, 0, "Fecha de puesta a la venta",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dFinVta",   "D",  8, 0, "Fecha de fin de la venta",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lMsgSer",   "L",  1, 0, "Avisar en ventas por series sin stock",    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPrp1",  "C", 10, 0, "Valor de la primera propiedad",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPrp2",  "C", 10, 0, "Valor de la segunda propiedad",            "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "mValPrp1",  "M", 10, 0, "Valores seleccionables de la primera propiedad", "",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "mValPrp2",  "M", 10, 0, "Valores seleccionables de la segunda propiedad", "",            "", "( cDbfArt )", nil } )
   aAdd( aBase, { "dChgBar",   "D",  8, 0, "Fecha de cambio de codigos de barras",     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodSus",   "C", 18, 0, "Código del artículo al que se sustituye" , "'@!'",              "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPor",   "C", 18, 0, "Código del artículo por el que es sustituido" , "'@!'",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt1",  "N",  6, 2, "Primer descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt2",  "N",  6, 2, "Segundo descuento de artículo",            "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt3",  "N",  6, 2, "Tercer descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt4",  "N",  6, 2, "Cuarto descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt5",  "N",  6, 2, "Quinto descuento de artículo",             "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoArt6",  "N",  6, 2, "Sexto descuento de artículo",              "@EZ 99.99",         "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lMarAju",   "L",  1, 0, "Lógico para utilizar el margen de ajuste", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cMarAju",   "C",  5, 0, "Cadena descriptiva del margen de ajuste",  "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nTarWeb",   "N",  1, 0, "Tarifa a aplicar en la Web" ,              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "pVtaWeb",   "N", 16, 6, "Precio venta en la Web",                   "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTipImp1",  "C", 50, 0, "Tipo impresora comanda 1",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cTipImp2",  "C", 50, 0, "Tipo impresora comanda 2",                 "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefPrv",   "C", 18, 0, "Referencia del proveedor al artículo" ,    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodSec",   "C",  3, 0, "Código de la sección para producción" ,    "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nFacCnv",   "N", 16, 6, "Factor de conversión" ,                    "",                  "", "( cDbfArt )", nil } )

return ( aBase )



Function aItmKit()

   local aBase := {}

   aAdd( aBase, { "cCodKit",   "C", 18, 0, "Código del contenedor"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefKit",   "C", 18, 0, "Código de artículo escandallo"       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndKit",   "N", 16, 6, "Unidades de escandallo"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreKit",   "N", 16, 6, "Precio de escandallo"                , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDesKit",   "C", 50, 0, "Descripción del escandallo"          , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cUniDad",   "C",  2, 0, "Unidad de medición"                  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 16, 6, ""                                    , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lAplDto",   "L",  1, 0, "Lógico aplicar descuentos"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lExcPro",   "L",  1, 0, "Lógico para excluir de producción"   , "",                  "", "( cDbfArt )", nil } )

return ( aBase )



Function aItmVta()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodDiv",   "C",  3, 0, "Código de divisa",                         "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 10, 0, "Código de primera propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 10, 0, "Código de segunda propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 10, 0, "Valor de primera propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 10, 0, "Valor de segunda propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreCom",   "N", 16, 6, "Precio de compras",                        "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nValPnt",   "N", 16, 6, "Valor del punto",                          "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPnt",   "N",  6, 2, "Descuento del punto",                      "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf1",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 1", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf2",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 2", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf3",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 3", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf4",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 4", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf5",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 5", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lBnf6",     "L",  1, 0, "Lógico aplicar porcentaje de beneficio 6", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef1",    "N",  6, 2, "Porcentaje de beneficio precio 1" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef2",    "N",  6, 2, "Porcentaje de beneficio precio 2" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef3",    "N",  6, 2, "Porcentaje de beneficio precio 3" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef4",    "N",  6, 2, "Porcentaje de beneficio precio 4" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef5",    "N",  6, 2, "Porcentaje de beneficio precio 5" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "Benef6",    "N",  6, 2, "Porcentaje de beneficio precio 6" ,        "'@EZ 99.99'",       "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr1",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 1", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr2",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 2", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr3",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 3", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr4",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 4", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr5",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 5", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nBnfSbr6",  "N",  1, 0, "Beneficio sobre el costo o sobre venta 6", "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta1",  "N", 16, 6, "Precio de venta 1"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta2",  "N", 16, 6, "Precio de venta 2"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta3",  "N", 16, 6, "Precio de venta 3"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta4",  "N", 16, 6, "Precio de venta 4"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta5",  "N", 16, 6, "Precio de venta 5"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreVta6",  "N", 16, 6, "Precio de venta 6"                       , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva1",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 1"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva2",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 2"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva3",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 3"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva4",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 4"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva5",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 5"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nPreIva6",  "N", 16, 6, "Precio de venta " + cImp() + " incl. 6"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lProProp",  "L",  1, 0, "Lógico precio por propiedades"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImgWeb",   "C",250, 0, "Imagen para la web de estas propiedades" , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cToolTip",  "C",250, 0, "Tooltip para las imagenes de la web"     , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodImgWeb","N", 11, 0, "Código de la imagen para la web"         , "",                  "", "( cDbfArt )", 0 } )

Return ( aBase )



Function aItmArtPrv()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código del artículo referenciado"  , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPrv",   "C", 12, 0, "Código del proveedor"              , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cRefPrv",   "C", 18, 0, "Referencia del proveedor al artículo" , "",               "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPrv",   "N",  6, 2, "Descuento del proveedor"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nDtoPrm",   "N",  6, 2, "Descuento por promoción"           , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cDivPrv",   "C",  3, 0, "Código de la divisa"               , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nImpPrv",   "N", 19, 6, "Importe de compra"                 , "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "lDefPrv",   "L",  1, 0, "Lógico de proveedor por defecto"   , "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmLbl()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C", 18, 0, "Código de artículo",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr1",   "C", 10, 0, "Código de primera propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodPr2",   "C", 10, 0, "Código de segunda propiedad",              "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr1",   "C", 10, 0, "Valor de primera propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cValPr2",   "C", 10, 0, "Valor de segunda propiedad",               "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "nUndLbl",   "N", 16, 6, "Precio de compras",                        "",                  "", "( cDbfArt )", nil } )

Return ( aBase )



Function aItmImg()

   local aBase := {}

   aAdd( aBase, { "cCodArt",   "C",  18, 0, "Código del artículo",                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cImgArt",   "C", 240, 0, "Imagen del artículo",                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cNbrArt",   "C", 240, 0, "Nombre de la imagen",                     "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cHtmArt",   "M",  10, 0, "HTML de la imagen",                       "",                  "", "( cDbfArt )", nil } )
   aAdd( aBase, { "cCodWeb",   "N",  11, 0, "Código de artículo para la web",          "",                  "", "( cDbfArt )", 0 } )
   aAdd( aBase, { "lDefImg",   "L",   1, 0, "Lógico para imágen por defecto",          "",                  "", "( cDbfArt )", .F. } )

Return ( aBase )







FUNCTION lStockComponentes( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := ( uArticulo )->lKitArt .AND. ( ( uArticulo )->nKitStk <= 1 .OR. ( uArticulo )->nKitStk == 3 )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := uArticulo:lKitArt .AND. ( uArticulo:nKitStk <= 1 .OR. uArticulo:nKitStk == 3 )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )







FUNCTION lPreciosComponentes( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := ( ( uArticulo )->nKitPrc <= 1 .OR. ( uArticulo )->nKitPrc == 3 )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := ( uArticulo:nKitPrc <= 1 .OR. uArticulo:nKitPrc == 3 )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )







FUNCTION lImprimirComponente( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := !( ( uArticulo )->lKitArt .AND. ( ( uArticulo )->nKitImp <= 1 .OR. ( uArticulo )->nKitImp == 3 ) )
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := !( uArticulo:lKitArt .AND. ( uArticulo:nKitImp <= 1 .OR. uArticulo:nKitImp == 3 ) )
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )



Function nRetPreArt( nTarifa, cCodDiv, lIvaInc, dbfArticulo, dbfDiv, dbfArtKit, dbfIva, lBuscaImportes, oTarifa )

   local nIva
   local nPre              := 0
   local nPreIva           := 0
   local nPreCos           := nil

   IIF( nTarifa == nil, nTarifa := 1, ) ;
   IIF( lIvaInc == nil, lIvaInc := .F., ) ;
   IIF( lBuscaImportes == nil, lBuscaImportes := lBuscaImportes(), ) ;

   if nTarifa == 0
      nTarifa        := 1
   end

   while .T.

      if ( dbfArticulo )->lKitArt

         nIva        := nIva( dbfIva, ( dbfArticulo )->TipoIva )

         do case
            case nTarifa == 1
               if ( dbfArticulo )->lBnf1
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef1 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva1
                  nPre     := ( dbfArticulo )->pVenta1
               end

            case nTarifa == 2
               if ( dbfArticulo )->lBnf2
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef2 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva2
                  nPre     := ( dbfArticulo )->Pventa2
               end

            case nTarifa == 3
               if ( dbfArticulo )->lBnf3
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef3 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva3
                  nPre     := ( dbfArticulo )->Pventa3
               end

            case nTarifa == 4
               if ( dbfArticulo )->lBnf4
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef4 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva4
                  nPre     := ( dbfArticulo )->Pventa4
               end

            case nTarifa == 5
               if ( dbfArticulo )->lBnf5
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef5 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva5
                  nPre     := ( dbfArticulo )->Pventa5
               end

            case nTarifa == 6
               if ( dbfArticulo )->lBnf6
                  if Empty( nPreCos )
                  nPreCos  := nCosto( nil, dbfArticulo, dbfArtKit )
                  end
                  nPre     := ( nPreCos * ( dbfArticulo )->Benef6 / 100 ) + nPreCos
                  nPreIva  := ( nPre * nIva / 100 ) + nPre
               else
                  nPreIva  := ( dbfArticulo )->pVtaIva6
                  nPre     := ( dbfArticulo )->Pventa6
               end

         end

      else

         do case
            case nTarifa == 1
               nPre     := ( dbfArticulo )->pVenta1
               nPreIva  := ( dbfArticulo )->pVtaIva1
            case nTarifa == 2
               nPre     := ( dbfArticulo )->pVenta2
               nPreIva  := ( dbfArticulo )->pVtaIva2
            case nTarifa == 3
               nPre     := ( dbfArticulo )->pVenta3
               nPreIva  := ( dbfArticulo )->pVtaIva3
            case nTarifa == 4
               nPre     := ( dbfArticulo )->pVenta4
               nPreIva  := ( dbfArticulo )->pVtaIva4
            case nTarifa == 5
               nPre     := ( dbfArticulo )->pVenta5
               nPreIva  := ( dbfArticulo )->pVtaIva5
            case nTarifa == 6
               nPre     := ( dbfArticulo )->pVenta6
               nPreIva  := ( dbfArticulo )->pVtaIva6
         end

      end

      if ( nPre == 0 .OR. nPreIva == 0 ) .AND. nTarifa > 1 .AND. lBuscaImportes
         nTarifa--
         loop
      else
         exit
      end

   end

   if oTarifa <> nil
      oTarifa:cText( nTarifa )
   end







Return ( if( lIvaInc, nPreIva, nPre ) )



Function nCosto( uTmp, dbfArticulo, dbfArtKit, lPic, cDivRet, dbfDiv )

   local oError
   local oBlock
   local nCosto      := 0
   local cCodArt     := ""
   local lKitArt     := .F.
   local nOrdArt
   local nOrdKit
   local nRecArt
   local nRecKit

   IIF( lPic == nil, lPic := .F., ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   nOrdArt           := ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
   nOrdKit           := ( dbfArtKit   )->( OrdSetFocus( "cCodKit" ) )
   nRecArt           := ( dbfArticulo )->( Recno() )
   nRecKit           := ( dbfArtKit   )->( Recno() )

   do case
      case IsArray( uTmp )
         cCodArt     := uTmp[ ( dbfArticulo )->( fieldpos( "Codigo"  ) ) ]
         lKitArt     := uTmp[ ( dbfArticulo )->( fieldpos( "lKitArt" ) ) ] .AND. !uTmp[ ( dbfArticulo )->( fieldpos( "lKitAsc" ) ) ]
      case IsChar( uTmp ) .AND. ( dbfArticulo )->( dbSeek( uTmp ) )
         cCodArt     := ( dbfArticulo )->Codigo
         lKitArt     := ( dbfArticulo )->lKitArt .AND. !( dbfArticulo )->lKitAsc
      case Empty( uTmp )
         cCodArt     := ( dbfArticulo )->Codigo
         lKitArt     := ( dbfArticulo )->lKitArt .AND. !( dbfArticulo )->lKitAsc
   end

   if lKitArt

      if ( dbfArtKit )->( dbSeek( cCodArt ) )
         while ( dbfArtKit )->cCodKit == cCodArt .AND. !( dbfArtKit )->( eof() )
            nCosto   += nCosto( ( dbfArtKit )->cRefKit, dbfArticulo, dbfArtKit ) * nFactorConversion( ( dbfArtKit )->cRefKit, dbfArticulo ) * ( dbfArtKit )->nUndKit
            ( dbfArtKit )->( dbSkip() )
         end
      end

   else

      nCosto         += pCosto( dbfArticulo )

   end

   ( dbfArticulo )->( OrdSetFocus( nOrdArt ) )
   ( dbfArtKit   )->( OrdSetFocus( nOrdKit ) )
   ( dbfArticulo )->( dbGoTo( nRecArt ) )
   ( dbfArtKit   )->( dbGoTo( nRecKit ) )

   if dbfDiv <> nil

      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto      := nCnv2Div( nCosto, cDivEmp(), cDivRet, dbfDiv )
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end

   end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

return ( nCosto )



Function pCosto( dbfArticulo, lPic, cDivRet, dbfDiv, lFacCnv )

   local nCosto      := 0

   IIF( lPic == nil, lPic := .F., ) ;
   IIF( lFacCnv == nil, lFacCnv := .T., ) ;

   nCosto            := ( dbfArticulo )->pCosto

   if ( dbfArticulo )->lFacCnv .AND. ( dbfArticulo )->nFacCnv <> 0
      nCosto         *= ( dbfArticulo )->nFacCnv
   end

   if dbfDiv <> nil
      if cDivRet <> nil .AND. cDivRet <> cDivEmp()
         nCosto      := nCnv2Div( nCosto, cDivEmp(), cDivRet, dbfDiv )
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivRet, dbfDiv ) )
         end
      else
         if lPic
            nCosto   := Trans( nCosto, cPinDiv( cDivEmp(), dbfDiv ) )
         end
      end
   end

return ( nCosto )



Static Function nFactorConversion( cCodArt, dbfArticulo )

Return ( NotCero( RetFld( cCodArt, dbfArticulo, "nFacCnv" ) ) )






FUNCTION lKitAsociado( cCodArt, uArticulo )

   local aSta
   local lTmp     := .F.

   do case
   case IsChar( uArticulo )

      aSta        := aGetStatus( uArticulo, .T. )

      if ( uArticulo )->( dbSeek( cCodArt ) )
         lTmp     := ( uArticulo )->lKitArt .AND. ( uArticulo )->lKitAsc
      end

      SetStatus( uArticulo, aSta )

   case IsObject( uArticulo )

      uArticulo:GetStatus( .T. )

      if uArticulo:Seek( cCodArt )
         lTmp     := uArticulo:lKitArt .AND. uArticulo:lKitAsc
      end

      uArticulo:SetStatus()

   end

RETURN ( lTmp )



function GraLotArt( cCodArt, dbfArticulo, cLote )

   local nOrdSetFocus   := ( dbfArticulo )->( ordSetFocus( "CODIGO" ) )






   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      if ( dbfArticulo )->( dbRLock() )
         ( dbfArticulo )->cLote  := cLote
         ( dbfArticulo )->( dbRUnLock() )
      end
   end

   ( dbfArticulo )->( ordSetFocus( nOrdSetFocus ) )

RETURN NIL


function lAccArticulo()

return ( nAnd( nLevelUsr( "01014" ), 1 ) == 0 )



Function BrwArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, oBtn, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad )

   if !IsPda() .AND. !IsReport()
      if ValType( oUser() ) == "O" .AND. oUser():lSelectorFamilia()
         Return ( BrwFamiliaArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend ) )
      end
   end

Return ( BrwSelArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, nil, oBtn, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad ) )



Function BrwSelArticulo( oGetCodigo, oGetNombre, lCodeBar, lAppend, lEdit, oBtnSaveLine, oGetLote, oGetCodPrp1, oGetCodPrp2, oGetValPrp1, oGetValPrp2, oGetFecCad )

    local oDlg
   local oBtn
    local oBrw
   local oFont
    local aGet1
    local cGet1
   local nOrd           := GetBrwOpt( "BrwArticulo" )
   local nLevel         := nLevelUsr( "01014" )
   local oCbxOrd
   local aCbxOrd        := { "Código", "Nombre" }
   local cCbxOrd
   local Ordenes        := { "CodObs", "NomObs" }
   local oSayText
   local cSayText       := "Listado de artículos"
   local oBmpImage
   local oBrwStock
   local cTxtOrigen     := ""
   local lCloseFiles    := .F.
   local oTreeInfo
   local oImageListInfo
   local nRecAnt
   local cReturn        := Space( 18 )
   local lPropiedades   := .F.
   local oBtnAceptarpropiedades

   nOrd                 := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd              := aCbxOrd[ nOrd ]

   IIF( lCodeBar == nil, lCodeBar := .F., ) ;
   IIF( lAppend == nil, lAppend := .T., ) ;
   IIF( lEdit == nil, lEdit := .T., ) ;

   if !lOpenFiles

      lCloseFiles       := .T.

      if !OpenFiles( .T. )
         return nil
      end

   else

      nRecAnt           := ( dbfArticulo )->( Recno() )

   end

   if !Empty( oGetCodigo )
      cTxtOrigen        := oGetCodigo:VarGet()
   end





   if !Empty( cTxtOrigen ) .AND. !( dbfArticulo )->( dbSeek( cTxtOrigen ) )
      ( dbfArticulo )->( OrdSetFocus( Ordenes[ nOrd ] ) )
      ( dbfArticulo )->( dbGoTop() )
   else
      ( dbfArticulo )->( OrdSetFocus( Ordenes[ nOrd ] ) )
   end





   if IsReport()
      oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   else
      if !uFieldEmpresa( "lNStkAct" )
         oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRYDUPSTK",, .F.,,,,,, .F.,,,,,, .F., )
      else
         oDlg = TDialog():New(,,,, "Seleccionar artículos", "HELPENTRYDUP",, .F.,,,,,, .F.,,,,,, .F., )
      end
   end






        aGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||    ( OrdClearScope( oBrw, dbfArticulo ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( SpecialSeek( nKey, nFlags, aGet1, oBrw, oCbxOrd, dbfArticulo, dbfCodebar ) ) }, .F., .F.,,,,,, nil,,, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfArticulo)->( OrdSetFocus( Ordenes[ oCbxOrd:nAt ] ) ), ( dbfArticulo )->( dbGoTop() ), oBrw:refresh(), aGet1:SetFocus(), oCbxOrd:refresh() )},,,, .F.,,,,,, )

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfArticulo
      oBrw:nMarqueeStyle   := 6
      oBrw:cName           := "Browse.Artículos selección"
      oBrw:Cargo           := {}

      with object ( oBrw:AddCol() )
         :cHeader          := ""
         :bEditValue       := {|| aScan( oBrw:Cargo, Eval( oBrw:bBookMark ) ) > 0 }
         :nWidth           := 20
         :SetCheck( { "Send", "Nil16" }, {|| SelectArticulo( oBrw ) } )
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "CodObs"
         :bEditValue       := {|| if( lCodeBar, ( dbfArticulo )->CodeBar, ( dbfArticulo )->Codigo ) }
         :nWidth           := 90
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "NomObs"
         :bEditValue       := {|| ( dbfArticulo )->Nombre }
         :nWidth           := 260
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ), aGet1:SetFocus() }
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Tipo"
         :bEditValue       := {|| AllTrim( oRetFld( ( dbfArticulo )->cCodTip, oTipart:oDbf ) ) }
         :nWidth           := 150
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Proveedor"
         :bStrData         := {|| if( !Empty( ( dbfArticulo )->cPrvHab ), AllTrim( ( dbfArticulo )->cPrvHab ) + " - " + RetProvee( ( dbfArticulo )->cPrvHab, dbfProv ), "" ) }
         :nWidth           := 220
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar1", "Precio 1" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 1, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar2", "Precio 2" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 2, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar3", "Precio 3" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 3, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar4", "Precio 4" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 4, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar5", "Precio 5" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 5, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" )
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .F., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader          := uFieldEmpresa( "cTxtTar6", "Precio 6" ) + " " + cImp() + " inc."
         :bStrData         := {|| TransPrecio( nRetPreArt( 6, nil, .T., dbfArticulo, dbfDiv, dbfArtKit, dbfIva ), lEuro ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      if ( oUser():lCostos() )

      with object ( oBrw:AddCol() )
         :cHeader          := "Costo"
         :bStrData         := {|| nCosto( nil, dbfArticulo, dbfArtKit, .T., if( lEuro, cDivChg(), cDivEmp() ), dbfDiv ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )

      if !IsReport() .AND. !uFieldEmpresa( "lNStkAct" )
         oBrw:bChange      := {|| ChangeBrwArt( oBrwStock, oBmpImage, oBrw ) }
      end

      if !IsReport()







         oBmpImage := TImage():ReDefine( 300,,, oDlg,,, .F., .F.,,, .F.,, )

         oBmpImage:SetColor( , GetSysColor( 15 ) )

         oBmpImage:bLClicked  := {|| ShowImage( oBmpImage ) }
         oBmpImage:bRClicked  := {|| ShowImage( oBmpImage ) }





         if !uFieldEmpresa( "lNStkAct" )

            oBrwStock                        := IXBrowse():New( oDlg )

            oBrwStock:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
            oBrwStock:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

            oBrwStock:SetArray( oStock:aStocks, , , .F. )

            oBrwStock:lFooter                := .T.
            oBrwStock:lHScroll               := .F.
            oBrwStock:nMarqueeStyle          := 5
            oBrwStock:cName                  := "Browse.Artículos.Stock"
            oBrwStock:lRecordSelector        := .F.

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Código"
               :nWidth              := 40
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoAlmacen, "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Almacén"
               :nWidth              := 120
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), RetAlmacen( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoAlmacen, dbfAlmT ), "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Prop. 1"
               :nWidth              := 40
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad1, "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Prop. 2"
               :nWidth              := 40
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad2, "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Lote"
               :nWidth              := 60
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cLote, "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Caducidad"
               :nWidth              := 60
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:dFechaCaducidad, "" ) }
               :lHide               := .T.
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Num. serie"
               :nWidth              := 60
               :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cNumeroSerie, "" ) }
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Unidades"
               :nWidth              := 80
               :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nUnidades, 0 ) }
               :bFooter             := {|| nStockUnidades( oBrwStock ) }
               :cEditPicture        := MasUnd()
               :nDataStrAlign       := 1
               :nHeadStrAlign       := 1
               :nFootStrAlign       := 1
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Pdt. recibir"
               :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nPendientesRecibir, 0 ) }
               :bFooter             := {|| nStockPendiente( oBrwStock ) }
               :nWidth              := 70
               :cEditPicture        := cPicUnd
               :nDataStrAlign       := 1
               :nHeadStrAlign       := 1
               :nFootStrAlign       := 1
            end

            with object ( oBrwStock:AddCol() )
               :cHeader             := "Pdt. entregar"
               :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nPendientesEntregar, 0 ) }
               :bFooter             := {|| nStockEntregar( oBrwStock ) }
               :nWidth              := 70
               :cEditPicture        := cPicUnd
               :nDataStrAlign       := 1
               :nHeadStrAlign       := 1
               :nFootStrAlign       := 1
            end

            oBrwStock:CreateFromResource( 320 )

         end

      end

   if !IsReport() .AND. !uFieldEmpresa( "lNStkAct" )




      oBtnAceptarpropiedades := TButton():ReDefine( 550, {||( lPropiedades   := .T., if( lPresaveBrwSelArticulo( oBrwStock, ( dbfArticulo )->lMsgVta ), oDlg:end( 1 ), ) )}, oDlg,,, .F.,,,, .F. )

   end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





















      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfArticulo ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. lAppend .AND. !IsReport() )},,, .F. )

   if !IsReport()





      TButton():ReDefine( 502, {||( WinDupRec( oBrw, bEdit, dbfArticulo ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. lAppend .AND. !IsReport() )},,, .F. )

         if lAppend
            oDlg:AddFastKey( 113, {|| if( nAnd( nLevel, 2 ) <> 0, WinAppRec( oBrw, bEdit, dbfArticulo ), ) } )
         end

   end





      TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfArticulo ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. lEdit .AND. !IsReport() )},,, .F. )

         if lEdit .AND. !IsReport()
            oDlg:AddFastKey( 114, {|| if( nAnd( nLevel, 4 ) <> 0, WinEdtRec( oBrw, bEdit, dbfArticulo ), ) } )
         end

      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 117,       {|| lPropiedades   := .T., if( lPresaveBrwSelArticulo( oBrwStock, ( dbfArticulo )->lMsgVta ), oDlg:end( 1 ), ) } )
      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )

      oDlg:bStart       := {|| StartBrwSelArticulo( oGetLote, oBrw, oBrwStock, oBtnAceptarpropiedades, oBmpImage ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if lCodeBar
         cReturn        := ( dbfArticulo )->CodeBar
      else
         cReturn        := ( dbfArticulo )->Codigo
      end

      if !Empty( oGetCodigo )
         oGetCodigo:cText( cReturn )
      end

      if !Empty( oGetNombre )
         oGetNombre:cText( ( dbfArticulo )->Nombre )
      end

      if !Empty( oBrwStock ) .AND. lPropiedades

         if !Empty( oGetLote )
            oGetLote:cText( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cLote )
         end

         if !Empty( oGetCodPrp1 )
            oGetCodPrp1 := oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoPropiedad1
         end

         if !Empty( oGetCodPrp2 )
            oGetCodPrp2 := oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoPropiedad2
         end

         if !Empty( oGetValPrp1 )
            oGetValPrp1:cText( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad1 )
            oGetValPrp1:lValid()
            oGetValPrp1:SetFocus()
         end

         if !Empty( oGetValPrp2 )
            oGetValPrp2:cText( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad2 )
            oGetValPrp2:lValid()
            oGetValPrp2:SetFocus()
         end

         if !Empty( oGetFecCad )
            oGetFecCad:cText( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:dFechaCaducidad )
         end

      end

   end

   DestroyFastFilter( dbfArticulo )

   SetBrwOpt( "BrwArticulo", if( ( dbfArticulo )->( OrdSetFocus() ) == "CodObs", 1, 2 ) )

   if lCloseFiles

      CloseFiles()

   else

      ( dbfArticulo )->( dbGoTo( nRecAnt ) )

   end

   if oBmpImage <> nil
      oBmpImage:End()
   end

   if !Empty( oGetCodigo )
      oGetCodigo:SetFocus()
   end

RETURN ( cReturn )



static function lPresaveBrwSelArticulo( oBrwStock, lMsgVta )

   if lMsgVta .AND. oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nUnidades < 0
      msginfo( "No hay stock suficiente para realizar la venta" )
      return .F.
   end

return .T.



Static Function StartBrwSelArticulo( oGetLote, oBrw, oBrwStock, oBtnAceptarpropiedades, oBmpImage )

   if !Empty( oBrw )
      oBrw:Load()
   end

   if !Empty( oBrwStock )
      oBrwStock:Load()
   end

   if !IsReport()
      LoadBrwArt( oBrwStock, oBmpImage )
   end

   if !Empty( oBtnAceptarpropiedades )
      if Empty( oGetLote )
         oBtnAceptarpropiedades:Hide()
      else
         oBtnAceptarpropiedades:Show()
      end
   end

RETURN ( nil )



Static Function InsertBrwSelArticulo( oGet, lCodeBar, oBtn )

   local lOk
   local cReturn

   lOk            := .T.

   if lCodeBar
      cReturn     := ( dbfArticulo )->CodeBar
   else
      cReturn     := ( dbfArticulo )->Codigo
   end

   if !Empty( oGet )
      oGet:cText( cReturn )
      lOk         := oGet:lOldValid()
   end

   if lOk .AND. !Empty( oBtn )
      oBtn:Click()
   end

RETURN ( cReturn )






Static Function ChangeBrwArt( oBrwStock, oBmpImage, oBrw )

   if !Empty( oTimerBrw )
      oTimerBrw:End()
      oTimerBrw    := nil
   endif

   oTimerBrw             := TTimer():New( 900, {|| LoadBrwArt( oBrwStock, oBmpImage ) }, )
   oTimerBrw:hWndOwner   := oBrw:hWnd
   oTimerBrw:Activate()

Return .T.



Static Function LoadBrwArt( oBrwStock, oBmpImage )

   local oBlock
   local oError

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      if !uFieldEmpresa( "lNStkAct" )
         if !Empty( oTimerBrw )
            oTimerBrw:End()
            oTimerBrw    := nil
         endif
      end

      CursorWait()





      if oBmpImage <> nil
         oBmpImage:LoadBMP( cFileBmpName( ( dbfArticulo )->cImagen, .T. ) )
         oBmpImage:Refresh()
      end





      if !uFieldEmpresa( "lNStkAct" ) .AND. ( ( dbfArticulo )->nCtlStock <= 1 )
         oStock:aStockArticulo( ( dbfArticulo )->Codigo, , oBrwStock )
      end

   RECOVER USING oError

   end

   ErrorBlock( oBlock )

   CursorWE()

Return .T.





STATIC FUNCTION TransPrecio( nImporte, lChg )

   IIF( lChg == nil, lChg := .F., ) ;

   IF lChg
      nImporte    := nCnv2Div( nImporte, cDivEmp(), cDivChg(), dbfDiv )
    end

RETURN ( Trans( nImporte, if( lChg, cPouChg, cPouDiv ) ) )



Static Function SpecialSeek( nKey, nFlags, oGet, oBrw, oCbx, dbfArticulo, dbfCodebar )

   local nRecno
   local xCadena     := ""
   local lResult     := AutoSeek( nKey, nFlags, oGet, oBrw, dbfArticulo, .T. )

   if !lResult

      nRecno         := ( dbfArticulo )->( Recno() )




      xCadena        := Rtrim( oGet:cText() )


      if dbSeekInOrd( xCadena, "CodeBar", dbfArticulo )

         lResult     := .T.

      else


         if dbSeekInOrd( xCadena, "cCodBar", dbfCodeBar )                  .AND. dbSeekInOrd( ( dbfCodeBar )->cCodArt, "Codigo", dbfArticulo )

            lResult  := .T.

         end

      end

      if !lResult
         nRecno      := ( dbfArticulo )->( dbGoTo( nRecno ) )
      end

   end

   if lResult
      if !Empty( oBrw:bChange )
         Eval( oBrw:bChange )
      end
   end

   oBrw:Refresh()

Return ( lResult )



FUNCTION RetFamArt( cCodArt, uArt )

   local oBlock
   local oError
   local lClose   := .F.
   local cTemp    := Space( 8 )

   oBlock         := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ( uArt ) == NIL
      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @uArt ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if Valtype( uArt ) == "O"
      if uArt:Seek( cCodArt )
         cTemp    := uArt:Familia
      end
   else
      if ( uArt )->( DbSeek( cCodArt ) )
         cTemp    := ( uArt )->Familia
      end
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( uArt )->( dbCloseArea() )
   end

RETURN cTemp







FUNCTION lStockCompuestos( cCodArt, dbfArticulo )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArticulo, .T. )

   if ( dbfArticulo )->( DbSeek( cCodArt ) )
      lTmp        := ( dbfArticulo )->lKitArt .AND. ( dbfArticulo )->nKitStk <= 2
   end

   SetStatus( dbfArticulo, aSta )

RETURN ( lTmp )







FUNCTION lPreciosCompuestos( cCodArt, dbfArticulo )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArticulo, .T. )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      lTmp        := ( dbfArticulo )->lKitArt .AND. ( dbfArticulo )->nKitPrc <= 2
   end

   SetStatus( dbfArticulo, aSta )

RETURN ( lTmp )






FUNCTION lImprimirCompuesto( cCodArt, dbfArticulo )

   local lTmp     := .F.
   local aSta     := aGetStatus( dbfArticulo, .T. )

   if ( dbfArticulo )->( DbSeek( cCodArt ) )
      lTmp        := !( ( dbfArticulo )->lKitArt .AND. ( dbfArticulo )->nKitImp <= 2 )
   end

   SetStatus( dbfArticulo, aSta )

RETURN ( lTmp )






Function cSeekCodebar( cCodBar, dbfCodebar, dbfArticulo )

   local n
   local cCodigo
   local cPropiedades         := ""
   local nOrdenAnterior

   if IsObject( dbfCodebar )
      dbfCodebar              := dbfCodebar:cAlias
   end

   if IsObject( dbfArticulo )
      dbfArticulo             := dbfArticulo:cAlias
   end



   n                          := At( ".", cCodBar )
   if n <> 0
      cCodigo                 := SubStr( cCodBar, 1, n - 1 )
      cPropiedades            := SubStr( cCodBar, n )
   else
      cCodigo                 := cCodBar
   end



   cCodigo                    := Alltrim( cCodigo )

   if dbSeekInOrd( cCodigo, "Codigo", dbfArticulo ) .OR. dbSeekInOrd( Upper( cCodigo ), "Codigo", dbfArticulo )
      Return ( cCodBar )
   end



   nOrdenAnterior          := ( dbfCodebar )->( OrdSetFocus( "cCodBar" ) )

   if ( dbfCodebar )->( dbSeek( cCodigo ) ) .OR. ( dbfCodebar )->( dbSeek( Upper( cCodigo ) ) )

      cCodigo              := ( dbfCodebar )->cCodArt

      if Empty( cPropiedades )

         if !Empty( ( dbfCodebar )->cValPr1 )
            cPropiedades   += "." + Rtrim( ( dbfCodebar )->cValPr1 )
         end

         if !Empty( ( dbfCodebar )->cValPr2 )
            cPropiedades   += "." + Rtrim( ( dbfCodebar )->cValPr2 )
         end

      end

   end

   ( dbfCodebar )->( OrdSetFocus( nOrdenAnterior ) )
















   if !Empty( cPropiedades )
      cCodBar                 := Rtrim( cCodigo ) + cPropiedades
   else
      cCodBar                 := cCodigo
   end

Return ( cCodBar )



Static Function SeekPrvArt( nKey, nFlags, oGet, oBrw, dbfArtPrv, dbfArticulo, oGetPrv )

   local nRecno      := ( dbfArticulo )->( Recno() )
   local cProvee     := oGetPrv:VarGet()
   local nOrdAnt     := ( dbfArtPrv )->( OrdSetFocus( "CREFPRV" ) )
   local lResult     := AutoSeek( nKey, nFlags, oGet, nil, dbfArtPrv, .T., cProvee )

   if lResult
      if dbSeekInOrd( ( dbfArtPrv )->cCodArt, "Codigo", dbfArticulo )
         lResult  := .T.
         oBrw:Refresh()
      end
   else
      nRecno      := ( dbfArticulo )->( dbGoTo( nRecno ) )
   end

   if oBrw <> nil
      oBrw:Refresh()
   end

   ( dbfArtPrv )->( OrdSetFocus( nOrdAnt ) )

Return ( lResult )



Static Function lChgOrdDbf( nOption, dbfArticulo, aCbxOrd, oCbxOrd, oBrw, oBrwPrv )

   local nOrd

   do case
      case nOption == 1

         SetBrwOpt( "BrwArticulo", ( dbfArticulo )->( OrdNumber() ) )
         ( dbfArticulo )->( OrdSetFocus( "Codigo" ) )
         ( dbfArticulo )->( dbGoTop() )

         oBrwPrv:Refresh()

      case nOption == 2

         nOrd        := Min( Max( GetBrwOpt( "BrwArticulo" ), 1 ), len( aCbxOrd ) )
         oCbxOrd:nAt := nOrd

         ( dbfArticulo )->( OrdSetFocus( nOrd ) )
         ( dbfArticulo )->( dbGoTop() )

         oBrw:Refresh()

   end

Return ( .T. )



FUNCTION retArticulo( cCodArt, dbfArticulo )

   local oBlock
   local oError
   local nRecno
   local lClose   := .F.
    local cTemp        := Space( 30 )

   oBlock            := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if ( dbfArticulo ) == NIL
      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ValType( dbfArticulo ) == "O"
      nRecno      := dbfArticulo:Recno()
      If dbfArticulo:Seek( cCodArt )
         cTemp    := Rtrim( dbfArticulo:Nombre )
      end
      dbfArticulo:GoTo( nRecno )
   else
      nRecno      := ( dbfArticulo )->( Recno() )
      if ( dbfArticulo )->( DbSeek( cCodArt ) )
         cTemp    := Rtrim( ( dbfArticulo )->Nombre )
      end
      ( dbfArticulo )->( dbGoTo( nRecno ) )
   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos de agentes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if lClose
      ( dbfArticulo )->( dbCloseArea() )
   end

RETURN ( cTemp )
#line 17183 ".\Prg\Articulo.prg"
Static Function DataReport( oFr, lTemporal )

   local oError
   local oBlock

   oBlock               := ErrorBlock( { | oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   oFr:ClearDataSets()

   if lTemporal
      oFr:SetWorkArea(  "Artículos", ( tmpArticulo )->( Select() ), .F., { 0, 0, 0 } )
   else
      oFr:SetWorkArea(  "Artículos", ( dbfArticulo )->( Select() ), .F., { 0, 0, 0 } )
   end
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Familias", ( dbfFam )->( Select() ) )
   oFr:SetFieldAliases( "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(     "Categoria", ( dbfCategoria )->( Select() ) )
   oFr:SetFieldAliases( "Categoria", cItemsToReport( aItmCategoria() ) )

   oFr:SetWorkArea(     "Ofertas", ( dbfOfe )->( Select() ) )
   oFr:SetFieldAliases( "Ofertas", cItemsToReport( aItmOfe() ) )

   oFr:SetWorkArea(     "Temporada", ( dbfTemporada )->( Select() ) )
   oFr:SetFieldAliases( "Temporada", cItemsToReport( aItmTemporada() ) )

   oFr:SetWorkArea(     "Códigos de barras", ( dbfCodebar )->( Select() ) )
   oFr:SetFieldAliases( "Códigos de barras", cItemsToReport( aItmBar() ) )

   oFr:SetWorkArea(     "Tipo artículo",  oTipArt:Select() )
   oFr:SetFieldAliases( "Tipo artículo",  cObjectsToReport( oTipArt:oDbf ) )

   oFr:SetWorkArea(     "Fabricante",  oFabricante:Select() )
   oFr:SetFieldAliases( "Fabricante",  cObjectsToReport( oFabricante:oDbf ) )

   oFr:SetWorkArea(     "Unidad de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidad de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetWorkArea(     "Precios por propiedades", ( dbfArtVta )->( Select() ) )
   oFr:SetFieldAliases( "Precios por propiedades", cItemsToReport( aItmVta() ) )

   if lTemporal
      oFr:SetMasterDetail( "Artículos",   "Precios por propiedades", {|| ( tmpArticulo )->Codigo + ( tmpArticulo )->cCodPrp1 + ( tmpArticulo )->cCodPrp2 + ( tmpArticulo )->cValPrp1 + ( tmpArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Ofertas",                 {|| ( tmpArticulo )->Codigo + ( tmpArticulo )->cCodPrp1 + ( tmpArticulo )->cCodPrp2 + ( tmpArticulo )->cValPrp1 + ( tmpArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Familias",                {|| ( tmpArticulo )->Familia } )
      oFr:SetMasterDetail( "Artículos",   "Categoria",               {|| ( tmpArticulo )->cCodCate } )
      oFr:SetMasterDetail( "Artículos",   "Temporada",               {|| ( tmpArticulo )->cCodTemp } )
      oFr:SetMasterDetail( "Artículos",   "Tipo artículo",           {|| ( tmpArticulo )->cCodTip } )
      oFr:SetMasterDetail( "Artículos",   "Fabricante",              {|| ( tmpArticulo )->cCodFab } )
      oFr:SetMasterDetail( "Artículos",   "Unidad de medición",      {|| ( tmpArticulo )->cUnidad } )
      oFr:SetMasterDetail( "Artículos",   "Códigos de barras",       {|| ( tmpArticulo )->Codigo } )
   else
      oFr:SetMasterDetail( "Artículos",   "Precios por propiedades", {|| ( dbfArticulo )->Codigo + ( dbfArticulo )->cCodPrp1 + ( dbfArticulo )->cCodPrp2 + ( dbfArticulo )->cValPrp1 + ( dbfArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Ofertas",                 {|| ( dbfArticulo )->Codigo + ( dbfArticulo )->cCodPrp1 + ( dbfArticulo )->cCodPrp2 + ( dbfArticulo )->cValPrp1 + ( dbfArticulo )->cValPrp2 } )
      oFr:SetMasterDetail( "Artículos",   "Familias",                {|| ( dbfArticulo )->Familia } )
      oFr:SetMasterDetail( "Artículos",   "Categoria",               {|| ( dbfArticulo )->cCodCate } )
      oFr:SetMasterDetail( "Artículos",   "Temporada",               {|| ( dbfArticulo )->cCodTemp } )
      oFr:SetMasterDetail( "Artículos",   "Tipo artículo",           {|| ( dbfArticulo )->cCodTip } )
      oFr:SetMasterDetail( "Artículos",   "Fabricante",              {|| ( dbfArticulo )->cCodFab } )
      oFr:SetMasterDetail( "Artículos",   "Unidad de medición",      {|| ( dbfArticulo )->cUnidad } )
      oFr:SetMasterDetail( "Artículos",   "Códigos de barras",       {|| ( dbfArticulo )->Codigo } )
   end

   oFr:SetResyncPair(   "Artículos",      "Precios por propiedades" )
   oFr:SetResyncPair(   "Artículos",      "Ofertas" )
   oFr:SetResyncPair(   "Artículos",      "Familias" )
   oFr:SetResyncPair(   "Artículos",      "Categoria" )
   oFr:SetResyncPair(   "Artículos",      "Temporada" )
   oFr:SetResyncPair(   "Artículos",      "Tipo artículo" )
   oFr:SetResyncPair(   "Artículos",      "Fabricante" )
   oFr:SetResyncPair(   "Artículos",      "Unidad de medición" )
   oFr:SetResyncPair(   "Artículos",      "Códigos de barras" )

   RECOVER USING oError

      msgStop( "Imposible crear data report" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end
   ErrorBlock( oBlock )

Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Artículos" )





   oFr:AddVariable(     "Artículos",      "Código de barras para primera propiedad",  "CallHbFunc('cArtBarPrp1')" )
   oFr:AddVariable(     "Artículos",      "Código de barras para segunda propiedad",  "CallHbFunc('cArtBarPrp2')" )

Return nil



Function DesignReportArticulo( oFr, dbfDoc )

   local oLabel
   local nOrdAnt
   local lOpen    := .F.
   local lFlag    := .F.





   if lOpenFiles
      lFlag       := .T.
   else
      if Openfiles()
         lFlag    := .T.
         lOpen    := .T.
      else
         lFlag    := .F.
      end
   end

   nOrdAnt        := ( dbfArticulo )->( OrdSetFocus( "Cod" ) )

   if lFlag

      oLabel      := TArticuloLabelGenerator()

      if oLabel:lCreateTemporal()





         DataReport( oFr, .T. )





         if !Empty( ( dbfDoc )->mReport )

            oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

         else

            oFr:AddPage(         "MainPage" )

            oFr:AddBand(         "CabeceraColumnas",  "MainPage",       6 )
            oFr:SetProperty(     "CabeceraColumnas",  "Top",            200 )
            oFr:SetProperty(     "CabeceraColumnas",  "Height",         100 )
            oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet",        "Artículos" )

         end





         VariableReport( oFr )





         oFr:DesignReport()





         oFr:DestroyFr()





         oLabel:DestroyTemporal()

      else

         lFlag    := .F.

      end

   end

   if lOpen
      CloseFiles()
   end

Return ( lFlag )



Function PrintReportArticulo( nDevice, nCopies, cPrinter, dbfDoc )

   local oFr

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;
   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, .T. )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.





Static Function dlgToolTip( cCodArt, oBrw )

   local oBmpImage
   local oBrwStock
   local oTreeInfo
   local oImageListInfo
   local oDlgToolTip





   oDlgToolTip = TDialog():New(,,,,, "ArtToolTip",, .F.,,,,, oBrw, .F.,,,,,, .F., )








      oBmpImage := TImage():ReDefine( 110,, cFileBmpName( ( dbfArticulo )->cImagen, .T. ), oDlgToolTip,,, .F., .F.,,, .F.,, )

      oBmpImage:SetColor( , GetSysColor( 15 ) )

      oBmpImage:bLClicked              := {|| ShowImage( oBmpImage ) }
      oBmpImage:bRClicked              := {|| ShowImage( oBmpImage ) }





      oTreeInfo                        := TTreeView():Redefine( 120, oDlgToolTip )

      oImageListInfo                   := TImageList():New( 16, 16 )

      oImageListInfo:AddMasked( TBitmap():Define( "Cube_yellow_16" ),   ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
      oImageListInfo:AddMasked( TBitmap():Define( "Star_Red_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )
      oImageListInfo:AddMasked( TBitmap():Define( "Calendar_16" ),      ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )





      oBrwStock                        := IXBrowse():New( oDlgToolTip )

      oBrwStock:bClrSel                := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwStock:bClrSelFocus           := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwStock:SetArray( oStock:aStocks, , , .F. )

      oBrwStock:lFooter                := .T.
      oBrwStock:lHScroll               := .F.
      oBrwStock:nMarqueeStyle          := 5
      oBrwStock:cName                  := "Tooltip artículos"
      oBrwStock:lRecordSelector        := .F.

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Código"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoAlmacen, "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Almacén"
         :nWidth              := 120
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), RetAlmacen( oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cCodigoAlmacen, dbfAlmT ), "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Prop. 1"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad1, "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Prop. 2"
         :nWidth              := 40
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cValorPropiedad2, "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Lote"
         :nWidth              := 60
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cLote, "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Num. serie"
         :nWidth              := 60
         :bStrData            := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:cNumeroSerie, "" ) }
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Unidades"
         :nWidth              := 80
         :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nUnidades, 0 ) }
         :bFooter             := {|| nStockUnidades( oBrwStock ) }
         :cEditPicture        := MasUnd()
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Pdt. recibir"
         :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nPendientesRecibir, 0 ) }
         :bFooter             := {|| nStockPendiente( oBrwStock ) }
         :nWidth              := 70
         :cEditPicture        := cPicUnd
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

      with object ( oBrwStock:AddCol() )
         :cHeader             := "Pdt. entregar"
         :bEditValue          := {|| if( !Empty( oBrwStock:aArrayData ), oBrwStock:aArrayData[ oBrwStock:nArrayAt ]:nPendientesEntregar, 0 ) }
         :bFooter             := {|| nStockEntregar( oBrwStock ) }
         :nWidth              := 70
         :cEditPicture        := cPicUnd
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
         :nFootStrAlign       := 1
      end

      oBrwStock:CreateFromResource( 100 )

   oDlgToolTip:bStart   := {|| startToolTip( cCodArt, oBrwStock, oTreeInfo, oImageListInfo ) }

Return ( oDlgToolTip )



Static Function startToolTip( cCodArt, oBrwStock, oTreeInfo, oImageListInfo )

   CursorWait()

   oTreeInfo:SetImageList( oImageListInfo )

   switch ( nTipoOferta() )
      case 1
         oTreeInfo:Add( "Artículo actualmente en oferta por importes.", 1 )
      case 2
         oTreeInfo:Add( "Artículo actualmente en oferta de tipo X*Y.", 1 )
   end

   oTreeInfo:Add( "Fecha de creación " + Dtoc( ( dbfArticulo )->LastChg ), 2 )

   if !Empty( ( dbfArticulo )->dFecChg )
      oTreeInfo:Add( "Última modificación " + Dtoc( ( dbfArticulo )->dFecChg ), 2 )
   end





   if ( ( dbfArticulo )->nCtlStock <= 1 )

      oStock:aStockArticulo( cCodArt, , oBrwStock )





      if ( dbfArticulo )->nMinimo > nStockUnidades( oBrwStock )
         oTreeInfo:Add( "Stock bajo minimos, stock actual " + Alltrim( Trans( nStockUnidades( oBrwStock ), MasUnd() ) ) + "; minimo " + Alltrim( Trans( ( dbfArticulo )->nMinimo, MasUnd() ) ) + "." , 0 )
      end

   end

   CursorWE()

Return nil



Static Function nTipoOferta()

   local nOferta     := 0

   if ( dbfOfe )->( dbSeek( ( dbfArticulo )->Codigo ) )

      while ( dbfOfe )->cArtOfe == ( dbfArticulo )->Codigo .AND. !( dbfOfe )->( eof() )






         if ( GetSysDate() >= ( dbfOfe )->dIniOfe .OR. Empty( ( dbfOfe )->dIniOfe ) ) .AND.  ( GetSysDate() <= ( dbfOfe )->dFinOfe .OR. Empty( ( dbfOfe )->dFinOfe ) )

            nOferta  := ( dbfOfe )->nTipOfe

            exit

         end

         ( dbfOfe )->( dbSkip() )

      end

   end

Return ( nOferta )



Static Function ChangePosition( lInc )

   local aPos
   local nPos     := 1
   local aRec     := {}
   local nRec     := ( dbfArticulo )->( Recno() )
   local nOrd     := ( dbfArticulo )->( OrdSetFocus( "nPosTpv" ) )
   local cFam     := ( dbfArticulo )->Familia

   CursorWait()

   do case
      case IsTrue( lInc )

         if ( dbfArticulo )->( dbRLock() )
            ( dbfArticulo )->nPosTpv   := ( dbfArticulo )->nPosTpv + 1.5
         end
         ( dbfArticulo )->( dbUnLock() )

      case IsFalse( lInc )

         if ( dbfArticulo )->( dbRLock() )
            ( dbfArticulo )->nPosTpv   := ( dbfArticulo )->nPosTpv - 1.5
         end
         ( dbfArticulo )->( dbUnLock() )

   end



   ( dbfArticulo )->( dbGoTop() )
   while !( dbfArticulo )->( eof() )

      if cFam == ( dbfArticulo )->Familia .AND. ( dbfArticulo )->lIncTcl
         aAdd( aRec, { ( dbfArticulo )->( Recno() ), nPos++ } )
      end

      ( dbfArticulo )->( dbSkip() )

   end



   for each aPos in aRec

      ( dbfArticulo )->( dbGoTo( aPos[ 1 ] ) )

      if ( dbfArticulo )->( dbRLock() )
         ( dbfArticulo )->nPosTpv      := aPos[ 2 ]
         ( dbfArticulo )->( dbUnLock() )
      end

   next



   CursorWE()

   ( dbfArticulo )->( dbGoTo( nRec ) )
   ( dbfArticulo )->( OrdSetFocus( nOrd ) )

Return ( nil )



Function ChangePublicar( aTmp )

   local nRec

   if Empty( aTmp )

      for each nRec in ( oWndBrw:oBrw:aSelected )

         ( dbfArticulo )->( dbGoTo( nRec ) )

         if ( dbfArticulo )->( dbRLock() )
            ( dbfArticulo )->lPubInt   := !( dbfArticulo )->lPubInt
            ( dbfArticulo )->lSndDoc   := ( dbfArticulo )->lPubInt
            ( dbfArticulo )->cCodWeb   := 0
            ( dbfArticulo )->( dbCommit() )
            ( dbfArticulo )->( dbUnLock() )
         end

         if ( dbfArticulo )->lPubInt
            ChangeFamiliaInt(       ( dbfArticulo )->Familia   )
            ChangePropiedadesInt(   ( dbfArticulo )->cCodPrp1  )
            ChangePropiedadesInt(   ( dbfArticulo )->cCodPrp2  )
            ChangeFabricantesInt(   ( dbfArticulo )->cCodFab   )
            ChangeTipArtInt(        ( dbfArticulo )->cCodTip   )
         end

      next

   else

      if aTmp[ ( dbfArticulo )->( fieldpos( "lPubInt" ) ) ]
         ChangeFamiliaInt(       aTmp[ ( dbfArticulo )->( fieldpos( "Familia"  ) ) ] )
         ChangePropiedadesInt(   aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp1" ) ) ] )
         ChangePropiedadesInt(   aTmp[ ( dbfArticulo )->( fieldpos( "cCodPrp2" ) ) ] )
         ChangeFabricantesInt(   aTmp[ ( dbfArticulo )->( fieldpos( "cCodFab"  ) ) ] )
         ChangeTipArtInt(        aTmp[ ( dbfArticulo )->( fieldpos( "cCodTip"  ) ) ] )
      else
         aTmp[ ( dbfArticulo )->( fieldpos( "cCodWeb"  ) ) ]   := 0
      end

   end

   if !Empty( oWndBrw )
      oWndBrw:Refresh( .T. )
   end

Return nil



static function ChangeFamiliaInt( cCodFam )

   local nRec

   if !Empty( cCodFam )

      nRec  := ( dbfFam )->( Recno() )

      if dbSeekInOrd( cCodFam, "CCODFAM", dbfFam )

         if ( dbfFam )->( dbRLock() )
            ( dbfFam )->lPubInt   := .T.
            ( dbfFam )->lSelDoc   := .T.
            ( dbfFam )->( dbCommit() )
            ( dbfFam )->( dbUnLock() )
         end

         if !Empty( ( dbfFam )->cCodGrp )
            ChangeGrpFamInt( ( dbfFam )->cCodGrp )
         end

      end

      ( dbfFam )->( dbGoto( nRec ) )

   end

return nil


static function ChangePropiedadesInt( cCodPro )

   local nRec

   if !Empty( cCodPro )

      nRec  := ( dbfPro )->( Recno() )

      if dbSeekInOrd( cCodPro, "CCODPRO", dbfPro )

         if ( dbfPro )->( dbRLock() )
            ( dbfPro )->lPubInt   := .T.
            ( dbfPro )->lSndDoc   := .T.
            ( dbfPro )->( dbCommit() )
            ( dbfPro )->( dbUnLock() )
         end

      end

      ( dbfPro )->( dbGoto( nRec ) )

   end

return nil


static function ChangeFabricantesInt( cCodFab )

   local nRec

   if !Empty( cCodFab )

      nRec  := oFabricante:oDbf:Recno()

      if oFabricante:oDbf:SeekInOrd( cCodFab, "CCODFAB" )

         oFabricante:oDbf:Load()
         oFabricante:oDbf:lPubInt   := .T.
         oFabricante:oDbf:lSndDoc   := .T.
         oFabricante:oDbf:Save()

      end

      oFabricante:oDbf:GoTo( nRec )

   end

return nil


static function ChangeTipArtInt( cCodTip )

   local nRec

   if !Empty( cCodTip )

      nRec  := oTipart:oDbf:Recno()

      if oTipart:oDbf:SeekInOrd( cCodTip, "CCODTIP" )

         oTipart:oDbf:Load()
         oTipart:oDbf:lPubInt   := .T.
         oTipart:oDbf:lSelect   := .T.
         oTipart:oDbf:Save()

      end

      oTipart:oDbf:GoTo( nRec )

   end

return nil


static function ChangeGrpFamInt( cCodGrp )

   local nRec

   if !Empty( cCodGrp )

      nRec  := oGrpFam:oDbf:Recno()

      if oGrpFam:oDbf:SeekInOrd( cCodGrp, "CCODGRP" )

         oGrpFam:oDbf:Load()
         oGrpFam:oDbf:lPubInt   := .T.
         oGrpFam:oDbf:lSndDoc   := .T.
         oGrpFam:oDbf:Save()

      end

      oGrpFam:oDbf:GoTo( nRec )

   end

return nil



Function ChangelSndDoc( aTmp )

   local nRec

   for each nRec in ( oWndBrw:oBrw:aSelected )

      ( dbfArticulo )->( dbGoTo( nRec ) )

      if ( dbfArticulo )->( dbRLock() )
         ( dbfArticulo )->lSndDoc   := !( dbfArticulo )->lSndDoc
         ( dbfArticulo )->( dbCommit() )
         ( dbfArticulo )->( dbUnLock() )
      end

   next

   oWndBrw:Refresh()

Return nil





function dFechaCaducidad( dFechaDocumento, nDiasCaducidad, nTipoPeriodo )

   local dFecCad

   do case

      case  nTipoPeriodo <= 1

         dFecCad  := dFechaDocumento + nDiasCaducidad

      case  nTipoPeriodo == 2

         dFecCad  := dFechaDocumento + ( nDiasCaducidad * 30 )

      case  nTipoPeriodo == 3

         dFecCad  := dFechaDocumento + ( nDiasCaducidad * 365 )

   end

return ( dFecCad )



Function nStockBrowse( oBrwStock, nPos )

   local nStock   := 0

   IIF( nPos == nil, nPos := 6, ) ;

   if !Empty( oBrwStock ) .AND. !Empty( oBrwStock:aArrayData )
      aEval( oBrwStock:aArrayData, {|a| nStock += a[ nPos ] } )
   end

Return ( nStock )



Function nStockUnidades( oBrwStock )

   local nStock   := 0

   if !Empty( oBrwStock ) .AND. !Empty( oBrwStock:aArrayData )
      aEval( oBrwStock:aArrayData, {|a| nStock += a:nUnidades } )
   end

Return ( nStock )



Function nStockPendiente( oBrwStock )

   local nStock   := 0

   if !Empty( oBrwStock ) .AND. !Empty( oBrwStock:aArrayData )
      aEval( oBrwStock:aArrayData, {|a| nStock += a:nPendientesRecibir } )
   end

Return ( nStock )



Function nStockEntregar( oBrwStock )

   local nStock   := 0

   if !Empty( oBrwStock ) .AND. !Empty( oBrwStock:aArrayData )
      aEval( oBrwStock:aArrayData, {|a| nStock += a:nPendientesEntregar } )
   end

Return ( nStock )



FUNCTION cArtBarPrp1( uArt, uTblPro )

   local cBarPrp1    := ""

   IIF( uArt == nil, uArt := if( !Empty( tmpArticulo ), tmpArticulo, dbfArticulo ), ) ;
   IIF( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArt )->cCodPrp1 + ( uArt )->cValPrp1, "cCodPro", uTblPro )
      cBarPrp1       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp1 )



FUNCTION cArtBarPrp2( uArt, uTblPro )

   local cBarPrp2    := ""

   IIF( uArt == nil, uArt := if( !Empty( tmpArticulo ), tmpArticulo, dbfArticulo ), ) ;
   IIF( uTblPro == nil, uTblPro := dbfTblPro, ) ;

   if dbSeekInOrd( ( uArt )->cCodPrp2 + ( uArt )->cValPrp2, "cCodPro", uTblPro )
      cBarPrp2       := ( uTblPro )->nBarTbl
   end

RETURN ( cBarPrp2 )



Static Function SelectArticulo( oBrw )

   local nScan
   local uBook := Eval( oBrw:bBookMark )

   nScan       := aScan( oBrw:Cargo, uBook )
   if nScan == 0
      aAdd( oBrw:Cargo, uBook )
   else
      aDel( oBrw:Cargo, nScan, .T. )
   end

Return nil



Static Function EdtImg( aTmp, aGet, dbfTmpImg, oBrw, aArt, bValid, nMode )

   local oDlg
   local oFld
   local oImgArt
   local oImgBmp





   if nMode == 1

      ( dbfTmpImg )->( dbGoTop() )
      if ( dbfTmpImg )->( Eof() )
         aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ]   := .T.
      end

   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "imagenes de artículos", "Imagenes",, .F.,,,,,, .F.,,,,,, .F., )







      oFld := TFolder():ReDefine( 100, {"&Principal", "&HTML"}, { "Imagenes_1","Imagenes_2" }, oDlg,,,,, .F., )








      oImgArt := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )}, {|nKey,nFlags,Self| ( ChgBmp( oImgArt, oImgBmp ) ) }, .F., .F.,,,,, {|Self|( GetBmp( oImgArt, oImgBmp ) )}, nil, "Lupa",, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cNbrArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cNbrArt" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      TCheckBox():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( fieldpos( "lDefImg" ) ) ], aTmp[ ( dbfTmpImg )->( fieldpos( "lDefImg" ) ) ]:= u ) }, oFld:aDialogs[1],,,,,,, .F., {||     ( nMode <> 3 .AND. !aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ] )}, .F. )




      oImgBmp := TImage():ReDefine( 110,, cFileBmpName( aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ] ), oFld:aDialogs[1],,, .F., .T.,,, .F.,, )

      oImgBmp:SetColor( , GetSysColor( 15 ) )
      oImgBmp:bLClicked := {|| ShowImage( oImgBmp ) }
      oImgBmp:bRClicked := {|| ShowImage( oImgBmp ) }




      TButton():ReDefine( 3, {||( ShowImage( oImgBmp ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpImg )->( FieldPos( "cHtmArt" ) ) ], aTmp[ ( dbfTmpImg )->( FieldPos( "cHtmArt" ) ) ]:= u ) }, oFld:aDialogs[2],,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:bStart := {|| oImgArt:SetFocus() }

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

Return ( oDlg:nResult == 1 )



static function EndEdtImg( aTmp, dbfTmpImg, oBrw, nMode, oDlg )

   local nRec
   local aTemporal   := aTmp[ ( dbfTmpImg )->( FieldPos( "cImgArt" ) ) ]
   local lTemporal   := aTmp[ ( dbfTmpImg )->( FieldPos( "lDefImg" ) ) ]

   WinGather( aTmp, nil, dbfTmpImg, oBrw, nMode )

   if lTemporal

      nRec              := ( dbfTmpImg )->( RecNo() )

      ( dbfTmpImg )->( dbGoTop() )
      while !( dbfTmpImg )->( Eof() )

         if AllTrim( ( dbfTmpImg )->cImgArt ) <> AllTrim( aTemporal )
            ( dbfTmpImg )->lDefImg := .F.
         else
            ( dbfTmpImg )->lDefImg := .T.
      end

         ( dbfTmpImg )->( dbSkip() )

      end

      ( dbfTmpImg )->( dbGoto( nRec ) )

   end

   if !Empty( oBrw )
      oBrw:Refresh()
   end

   oDlg:end( 1 )

Return ( .T. )



Function cFirstImage( cCodigoArticulo, dbfImage )

   local cFirstImage   := ""

   if dbSeekInOrd( cCodigoArticulo, "cCodArt", dbfImage )
      cFirstImage      := ( dbfImage )->cImgArt
   end

Return ( cFirstImage )



Function ChangeTarWeb( aGet, aTmp )

   do case
      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 1
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA1" ) ) ] )

      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 2
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA2" ) ) ] )

      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 3
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA3" ) ) ] )

      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 4
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA4" ) ) ] )

      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 5
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA5" ) ) ] )

      case aTmp[ ( dbfArticulo )->( fieldpos( "nTarWeb" ) ) ] == 6
           aGet[ ( dbfArticulo )->( fieldpos( "pVtaWeb" ) ) ]:cText( aTmp[ ( dbfArticulo )->( fieldpos( "PVENTA6" ) ) ] )

   end

   Eval( aGet[ ( dbfArticulo )->( fieldpos( "nDtoInt1" ) ) ]:bChange )

Return ( .T. )



Function nCostoUltimaCompra( cCodArt, dbfAlbPrvL, dbfFacPrvL )

   local nCosto   := 0




















   do case
      case  ( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. ( dbfFacPrvL )->( dbSeek( cCodArt ) )

         if ( dbfAlbPrvL )->dFecAlb > ( dbfFacPrvL )->dFecFac
            nCosto   := ( dbfAlbPrvL )->nPreCom
         else
            nCosto   := ( dbfFacPrvL )->nPreCom
         end

      case  !( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. ( dbfFacPrvL )->( dbSeek( cCodArt ) )

         nCosto   := ( dbfFacPrvL )->nPreCom

      case  ( dbfAlbPrvL )->( dbSeek( cCodArt ) ) .AND. !( dbfFacPrvL )->( dbSeek( cCodArt ) )

         nCosto   := ( dbfAlbPrvL )->nPreCom

   end

return( nCosto )



_HB_CLASS SValorPropiedades ; UTILITY FUNCTION SValorPropiedades(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "SValorPropiedades" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { cCodPrp} ; IIF( !.F., s_oClass:AddMultiData(, Space( 10 ), nScope + IIF( .F., 32, 0 ), { "cCodPrp" }, .F., .F. ), )
   _HB_MEMBER { cValPrp} ; IIF( !.F., s_oClass:AddMultiData(, Space( 10 ), nScope + IIF( .F., 32, 0 ), { "cValPrp" }, .F., .F. ), )
   _HB_MEMBER { cDesPrp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cDesPrp" }, .F., .F. ), )
   _HB_MEMBER { nColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColor" }, .F., .F. ), )
   _HB_MEMBER { lSel} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lSel" }, .F., .F. ), )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS SValorPropiedades ;



Static Function ChangeFactorConversion( aTmp, aGet )

   if aTmp[ ( dbfArticulo )->( fieldpos( "lFacCnv" ) ) ]

      if aTmp[ ( dbfArticulo )->( fieldpos( "nPesoKg" ) ) ] <> 0

         aGet[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 / aTmp[ ( dbfArticulo )->( fieldpos( "nPesoKg" ) ) ] )

      else

         if aTmp[ ( dbfArticulo )->( fieldpos( "nVolumen" ) ) ] <> 0
            aGet[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 / aTmp[ ( dbfArticulo )->( fieldpos( "nVolumen" ) ) ] )
         end

      end

   else

      aGet[ ( dbfArticulo )->( fieldpos( "nFacCnv" ) ) ]:cText( 1 )

   end

Return ( .T. )

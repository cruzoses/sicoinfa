#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 15 ".\Prg\Lqdalm.prg"
static nLevel
static dbfExtAgeT
static dbfExtAgeL
static dbfDepAgeT
static dbfDepAgeL
static dbfAlbCliT
static dbfAlbCliL
static dbfArticulo
static dbfAlmT
static dbfDiv
static dbfTVta
static dbfClient
static dbfIva
static dbfKit
static dbfTarPreL
static dbfTarPreS
static dbfPromoT
static dbfPromoL
static dbfPromoC
static dbfCliAtp
static dbfCount
static cPicUnd
static cNewFil
static dbfNewFil








static aDbf     := { { "CCODALM", "C",  3, 0, "Código del almacen" }, { "CNOMALM", "C", 20, 0, "Nombre del almacen" }, { "CCODART", "C", 18, 0, "Código del artículo" }, { "CNOMART", "C", 50, 0, "Nombre del artículo" }, { "CCODFAM", "C", 16, 0, "Código de la família" }, { "CTIPMOV", "C",  2, 0, "Tipo de movimiento" }, { "NENTART", "N", 16, 6, "Unidades entregadas" }, { "NABNART", "N", 16, 6, "Unidades vendidas" }, { "NEXTART", "N", 16, 6, "Unidades en existencias" } }



STATIC FUNCTION OpenFiles()

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIT", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "CREF" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "EXTAGET.DBF" ), ( cCheckArea( "EXTAGET", @dbfExtAgeT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "EXTAGET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "EXTAGEL.DBF" ), ( cCheckArea( "EXTAGEL", @dbfExtAgeL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "EXTAGEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "CREF" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "DEPAGET.DBF" ), ( cCheckArea( "DEPAGET", @dbfDepAgeT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "DEPAGET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "DEPAGEL.DBF" ), ( cCheckArea( "DEPAGEL", @dbfDepAgeL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "DEPAGEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "CREF" )

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlmT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TVTA.DBF" ), ( cCheckArea( "TVTA", @dbfTVta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TVTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOT.DBF" ), ( cCheckArea( "PROMOT", @dbfPromoT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOL.DBF" ), ( cCheckArea( "PROMOL", @dbfPromoL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "PROMOC.DBF" ), ( cCheckArea( "PROMOC", @dbfPromoC ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "PROMOC.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   cNewFil  := cGetNewFileName( cPatTmp() + "LQDALM"  )
   dbCreate( cNewFil, aDbf, cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFil, cCheckArea( "LQDALM", @dbfNewFil ), .F. )
   if !( dbfNewFil )->( neterr() )
      ( dbfNewFil )->( ordCreate( cPatTmp() + "LQDALM.CDX", "CCODALM", "Field->CCODALM", {|| Field->CCODALM } ) )
      ( dbfNewFil )->( ordListAdd( cPatTmp() + "LQDALM.CDX" ) )
   end

   cPicUnd     := MasUnd()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

Return ( lOpen )



STATIC FUNCTION CloseFiles()





   if !Empty( dbfNewFil )
      ( dbfNewFil )->( dbCloseArea() )
   end

   if File( cNewFil )
      fErase( cNewFil )
   end

   if !Empty( dbfAlbCliT )
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if !Empty( dbfAlbCliT )
      ( dbfAlbCliL )->( dbCloseArea() )
   end

   if !Empty( dbfExtAgeT )
      ( dbfExtAgeT )->( dbCloseArea() )
   end

   if !Empty( dbfExtAgeL )
      ( dbfExtAgeL )->( dbCloseArea() )
   end

   if !Empty( dbfExtAgeT )
      ( dbfDepAgeT )->( dbCloseArea() )
   end

   if !Empty( dbfDepAgeL )
      ( dbfDepAgeL )->( dbCloseArea() )
   end

   if !Empty( dbfArticulo )
      ( dbfArticulo )->( dbCloseArea() )
   end

   if !Empty( dbfAlmT )
      ( dbfAlmT )->( dbCloseArea() )
   end

   if !Empty( dbfDiv )
      ( dbfDiv )->( dbCloseArea() )
   end

   if !Empty( dbfTVta )
      ( dbfTVta )->( dbCloseArea() )
   end

   if !Empty( dbfClient )
      ( dbfClient )->( dbCloseArea() )
   end

   if !Empty( dbfIva )
      ( dbfIva )->( dbCloseArea() )
   end

   if !Empty( dbfTarPreL )
      ( dbfTarPreL )->( dbCloseArea() )
   end

   if !Empty( dbfTarPreS )
      ( dbfTarPreS )->( dbCloseArea() )
   end

   if !Empty( dbfPromoT )
      ( dbfPromoT )->( dbCloseArea() )
   end

   if !Empty( dbfPromoL )
      ( dbfPromoL )->( dbCloseArea() )
   end

   if !Empty( dbfPromoC )
      ( dbfPromoC )->( dbCloseArea() )
   end

   if !Empty( dbfCliAtp )
      ( dbfCliAtp )->( dbCloseArea() )
   end

   if !Empty( dbfKit )
      ( dbfKit )->( dbCloseArea() )
   end

   if !Empty( dbfCount )
      ( dbfCount )->( dbCloseArea() )
   end

   dbfNewFil   := nil
   dbfAlbCliT  := nil
   dbfAlbCliL  := nil
   dbfExtAgeT  := nil
   dbfExtAgeL  := nil
   dbfDepAgeT  := nil
   dbfDepAgeL  := nil
   dbfArticulo := nil
   dbfAlmT     := nil
   dbfDiv      := nil
   dbfTVta     := nil
   dbfClient   := nil
   dbfIva      := nil
   dbfTarPreL  := nil
   dbfTarPreS  := nil
   dbfPromoT   := nil
   dbfPromoL   := nil
   dbfPromoC   := nil
   dbfCliAtp   := nil
   dbfKit      := nil
   dbfCount    := nil

Return .T.



FUNCTION LqdAlm( oMenuItem, oWnd )

   local oDlg
   local oFld
   local oTree
   local oBrwLqd
   local oGetAlmDes
   local oGetAlmHas
   local cGetAlmDes
   local cGetAlmHas
   local oSayAlmDes
   local oSayAlmHas
   local cSayAlmDes
   local cSayAlmHas
   local oMetMsg
   local oMetLqd
   local nMetMsg        := 0
   local nMetLqd        := 0
   local dIniFecLqd     := Ctod( "01/" + Str( Month( Date() ), 2 ) + "/" + Str( Year( Date() ), 4 ) )
   local dFinFecLqd     := Date()

   IIF( oMenuItem == nil, oMenuItem := "01052", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;





   nLevel               := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return nil
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return nil
   end





   AddMnuNext( "Liquidación de depositos", ProcName() )

   cGetAlmDes := dbFirst( dbfAlmT )
   cGetAlmHas := dbLast( dbfAlmT )





   oDlg = TDialog():New(,,,, "Liquidación de depositos", "LQDALM",, .F.,,,,, oWnd(), .F.,,,,,, .F., )





      oFld := TFolder():ReDefine( 200, {"&Fecha", "Liquidación"}, { "LQDALM_1","LQDALM_2" }, oDlg,,,,, .F., )

      oFld:aEnable := { .T., .F. }








      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, dIniFecLqd, dIniFecLqd:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, dFinFecLqd, dFinFecLqd:= u ) }, oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )







      oGetAlmDes := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cGetAlmDes, cGetAlmDes:= u ) }, oFld:aDialogs[1],,, {||    cAlmacen( oGetAlmDes, dbfAlmT, oSayAlmDes )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oGetAlmDes, oSayAlmDes )}, nil, "LUPA",, )





      oSayAlmDes := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cSayAlmDes, cSayAlmDes:= u ) }, oFld:aDialogs[1],,,, "N/W*",,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )






      oGetAlmHas := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cGetAlmHas, cGetAlmHas:= u ) }, oFld:aDialogs[1],,, {||    cAlmacen( oGetAlmHas, dbfAlmT, oSayAlmHas )},,,,,, .F.,,, .F., .F.,,,,, {|Self|BrwAlmacen( oGetAlmHas, oSayAlmHas )}, nil, "LUPA",, )




      oSayAlmHas := TGetHlp():ReDefine( 131, { | u | If( PCount()==0, cSayAlmHas, cSayAlmHas:= u ) }, oFld:aDialogs[1],,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oMetMsg := TMeter():ReDefine( 140, { | u | If( PCount()==0, nMetMsg, nMetMsg:= u ) },, oFld:aDialogs[1], .F.,,, .T.,,,, )




        TButton():ReDefine( 519, {||( mkLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, oBrwLqd, oTree, oMetMsg, oFld ) )}, oFld:aDialogs[1],,, .F.,,,, .F. )




        TButton():ReDefine( 510, {||(  oDlg:end() )}, oFld:aDialogs[1],,, .F.,,,, .F. )





      oBrwLqd                 := IXBrowse():New( oFld:aDialogs[2] )

      oBrwLqd:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLqd:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLqd:cAlias          := dbfNewFil
      oBrwLqd:nMarqueeStyle   := 5
      oBrwLqd:cName           := "Linea de liquidación detalle"

      oBrwLqd:CreateFromResource( 100 )

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Alm. Almacén"
         :bEditValue          := {|| ( dbfNewFil )->cCodAlm }
         :nWidth              := 30
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Cod. artículo"
         :bEditValue          := {|| Rtrim( ( dbfNewFil )->cCodArt ) }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Nom. artículo"
         :bEditValue          := {|| ( dbfNewFil )->cNomArt }
         :nWidth              := 180
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Mov. tipo de movimiento"
         :bEditValue          := {|| ( dbfNewFil )->cTipMov }
         :nWidth              := 30
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Entradas"
         :bEditValue          := {|| nUnd2Caj( ( dbfNewFil )->nEntArt, ( dbfNewFil )->cCodArt, dbfArticulo, cPicUnd ) }
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Ventas"
         :bEditValue          := {|| nUnd2Caj( ( dbfNewFil )->nAbnArt, ( dbfNewFil )->cCodArt, dbfArticulo, cPicUnd ) }
         :nWidth              := 45
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Existencias"
         :bEditValue          := {|| nUnd2Caj( ( dbfNewFil )->nExtArt, ( dbfNewFil )->cCodArt, dbfArticulo, cPicUnd ) }
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLqd:AddCol() )
         :cHeader             := "Saldo"
         :bEditValue          := {|| nUnd2Caj( ( dbfNewFil )->nEntArt - ( dbfNewFil )->nAbnArt - ( dbfNewFil )->nExtArt, ( dbfNewFil )->cCodArt, dbfArticulo, cPicUnd ) }
         :nWidth              := 45
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end




      oMetLqd := TMeter():ReDefine( 150, { | u | If( PCount()==0, nMetLqd, nMetLqd:= u ) },, oFld:aDialogs[2], .F.,,, .T.,,,, )




      TButton():ReDefine( 508, {||( ImpLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, 1, dbfNewFil ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




        TButton():ReDefine( 505, {||( ImpLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, 2, dbfNewFil ) )}, oFld:aDialogs[2],,, .F.,,,, .F. )




      TButton():ReDefine( 519, {||( genLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, oMetLqd ), oDlg:end() )}, oFld:aDialogs[2],,, .F.,,,, .F. )




        TButton():ReDefine( 510, {||( oDlg:end() )}, oFld:aDialogs[2],,, .F.,,,, .F. )

      oDlg:bStart  := {|| oBrwLqd:Load() }




   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( CloseFiles() )},, {|Self|( oGetAlmDes:lValid(), oGetAlmHas:lValid() )}, oDlg:bRClicked,,, )





    oBrwLqd:CloseData()

RETURN ( NIL )



STATIC FUNCTION mkLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, oBrwLqd, oTree, oMetMsg, oFld )

   local n
   local nEntArt  := 0
   local nAbnArt  := 0
   local nExtArt  := 0

   oFld:aDialogs[1]:disable()





   ( dbfAlmT )->( dbSeek( cGetAlmDes ) )

   WHILE ( dbfAlmT )->CCODALM <= cGetAlmHas .AND. !( dbfAlmT )->( eof() )

      oMetMsg:cText := rtrim( ( dbfAlmT )->CCODALM + " - " + ( dbfAlmT )->CNOMALM )
      n  := 1

      ( dbfArticulo )->( dbGoTop() )

      oMetMsg:setTotal( ( dbfArticulo )->( lastrec() + 1 ) )

      WHILE !( dbfArticulo )->( eof() )





         ( dbfTVta )->( dbGoTop() )

         while !( dbfTVta )->( eof() )

            nEntArt  := nEntArt( ( dbfAlmT )->CCODALM, ( dbfArticulo )->CODIGO, ( dbfTVta )->cCodMov, dIniFecLqd, dFinFecLqd )
            nAbnArt  := nAbnArt( ( dbfAlmT )->CCODALM, ( dbfArticulo )->CODIGO, ( dbfTVta )->cCodMov, dIniFecLqd, dFinFecLqd )
            nExtArt  := nExtArt( ( dbfAlmT )->CCODALM, ( dbfArticulo )->CODIGO, ( dbfTVta )->cCodMov, dIniFecLqd, dFinFecLqd )

            IF nEntArt <> 0 .OR. nAbnArt <> 0 .OR. nExtArt <> 0

               ( dbfNewFil )->( dbAppend() )
               ( dbfNewFil )->CCODALM  := ( dbfAlmT )->CCODALM
               ( dbfNewFil )->CNOMALM  := ( dbfAlmT )->CNOMALM
               ( dbfNewFil )->CCODART  := ( dbfArticulo )->CODIGO
               ( dbfNewFil )->cCodFam  := ( dbfArticulo )->Familia
               ( dbfNewFil )->CNOMART  := ( dbfArticulo )->NOMBRE
               ( dbfNewFil )->cTipMov  := ( dbfTVta )->cCodMov
               ( dbfNewFil )->NENTART  := nEntArt
               ( dbfNewFil )->NABNART  := nAbnArt
               ( dbfNewFil )->NEXTART  := nExtArt
               ( dbfNewFil )->NEXTART  := nExtArt

            end

            ( dbfTVta )->( dbSkip() )

         end

         ( dbfArticulo )->( dbSkip() )

         oMetMsg:set( n++ )

      end

      ( dbfAlmT )->( dbSkip() )

   end

   oFld:aDialogs[1]:enable()

   oFld:aEnable := { .F., .T. }
   oFld:SetOption( 2 )
   oBrwLqd:Refresh()





   oBrwLqd:goTop()

RETURN NIL






STATIC FUNCTION nEntArt( cCodAlm, cCodArt, cTipMov, dFecIni, dFecFin )

   local nValRet  := 0




   IF ( dbfDepAgeL )->( dbSeek( cCodArt ) )

      WHILE ( dbfDepAgeL )->CREF == cCodArt .AND. !( dbfDepAgeL )->( eof() )





         IF ( dbfDepAgeT )->( dbSeek( ( dbfDepAgeL )->cSerDep + Str( ( dbfDepAgeL )->NNUMDEP ) + ( dbfDepAgeL )->cSufDep ) )









            IF ( dbfDepAgeT )->cCodAlm == cCodAlm .AND.  ( dbfDepAgeT )->dFecDep >= dFecIni .AND.  ( dbfDepAgeT )->dFecDep <= dFecFin .AND.  ( dbfDepAgeL )->cTipMov == cTipMov .AND.  !(dbfDepAgeT )->lLiqDep





               nValRet  += nUnitEnt( dbfDepAgeL ) * nVtaUnd( ( dbfDepAgeL )->cTipMov, dbfTVta )

            end

         end

         ( dbfDepAgeL )->( dbSkip() )

      end

   end

RETURN ( nValRet )







STATIC FUNCTION nAbnArt( cCodAlm, cCodArt, cTipMov, dFecIni, dFecFin )

   local nValRet  := 0





   if ( dbfAlbCliL )->( dbSeek( cCodArt ) )

      while ( dbfAlbCliL )->cRef == cCodArt .AND. !( dbfAlbCliL )->( eof() )





         if ( dbfAlbCliT )->( dbSeek( ( dbfAlbCliL )->CSERALB + Str( ( dbfAlbCliL )->NNUMALB ) + ( dbfAlbCliL )->CSUFALB ) )










            if ( dbfAlbCliT )->cCodAlm == cCodAlm  .AND.  ( dbfAlbCliT )->dFecAlb >= dFecIni  .AND.  ( dbfAlbCliT )->dFecAlb <= dFecFin  .AND.  ( dbfAlbCliL )->cTipMov == cTipMov  .AND.  !(dbfAlbCliT )->lGenLqd             .AND.  ( dbfAlbCliT )->lFacturado





               nValRet  += nUnitEnt( dbfAlbCliL ) * nVtaUnd( ( dbfAlbCliL )->CTIPMOV, dbfTVta )

            end

         end

         ( dbfAlbCliL )->( dbSkip() )

      end

   end

RETURN ( nValRet )







STATIC FUNCTION nExtArt( cCodAlm, cCodArt, cTipMov, dFecIni, dFecFin )

   local nValRet  := 0





   IF ( dbfExtAgeL )->( dbSeek( cCodArt ) )

      WHILE ( dbfExtAgeL )->cRef == cCodArt .AND. !( dbfExtAgeL )->( eof() )





         IF ( dbfExtAgeT )->( dbSeek( ( dbfExtAgeL )->cSerExt + Str( ( dbfExtAgeL )->NNUMEXT ) + ( dbfExtAgeL )-> cSufExt ) )









            IF ( dbfExtAgeT )->cCodAlm == cCodAlm .AND.  ( dbfExtAgeT )->dFecExt >= dFecIni .AND.  ( dbfExtAgeT )->dFecExt <= dFecFin .AND.  ( dbfExtAgeL )->cTipMov == cTipMov .AND.  !(dbfExtAgeT )->lLiqExt

               nValRet  += nUnitEnt( dbfExtAgeL )

            end

         end

         ( dbfExtAgeL )->( dbSkip() )

      end

   end

RETURN ( nValRet )



STATIC FUNCTION EdtRec( aTmp, aGet, dbfDepAgeT, oBrw, bWhen, bValid, nMode )

   local oDlg

   oDlg = TDialog():New(,,,, lblTitle( nMode ) + "lineas de liquidación", "EDTEXT",, .F.,,,,,, .F.,,,,,, .F., )





      aGet[1] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[1], aTmp[1]:= u ) }, oDlg,,,, "N/W",,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[3] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[3], aTmp[3]:= u ) }, oDlg,,,, "N/W",,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )





      aGet[4] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[4], aTmp[4]:= u ) }, oDlg,,,, "N/W",,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[5] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[5], aTmp[5]:= u ) }, oDlg,, cPicUnd,, "N/W",,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[6] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[6], aTmp[6]:= u ) }, oDlg,, cPicUnd,, "N/W",,,,, .F., {||      ( .F. )},, .F., .F.,,,,,, nil,,, )






      aGet[7] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[7], aTmp[7]:= u ) }, oDlg,, cPicUnd,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )






      aGet[8] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[8], aTmp[8]:= u ) }, oDlg,, CPICUND,, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( WinGather( aTmp, aGet, dbfDepAgeT, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )




        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION GenLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, oMetMsg )

   local cCodCli
   local nDepAge
   local nTarifa  := 1
   local cSerAlb  := "A"
   local nUni     := 0
   local nMod     := 0
   local n        := 1
   local cAlmCur  := " "





   oMetMsg:cText  := "Liquidando depositos..."
   oMetMsg:setTotal( ( dbfDepAgeT )->( lastrec() + 1 ) )

   ( dbfDepAgeT )->( dbGoTop() )

   WHILE !( dbfDepAgeT )->( eof() )



      IF !(dbfDepAgeT )->LLIQDEP                .AND.  ( dbfDepAgeT )->DFECDEP >= dIniFecLqd  .AND.  ( dbfDepAgeT )->DFECDEP <= dFinFecLqd

         ( dbfDepAgeT )->( dbRLock() )
         ( dbfDepAgeT )->LLIQDEP := .T.
         ( dbfDepAgeT )->( dbUnLock() )

      end

      ( dbfDepAgeT )->( dbSkip() )

      oMetMsg:set( n++ )

   end





   n              := 1
   oMetMsg:cText  := "Liquidando existencias..."
   oMetMsg:setTotal( ( dbfExtAgeT )->( lastrec() + 1 ) )

   ( dbfExtAgeT )->( dbGoTop() )

   WHILE !( dbfExtAgeT )->( eof() )



      IF !( dbfExtAgeT )->LLIQEXT               .AND.  ( dbfExtAgeT )->DFECEXT >= dIniFecLqd  .AND.  ( dbfExtAgeT )->DFECEXT <= dFinFecLqd

         ( dbfExtAgeT )->( dbRLock() )
         ( dbfExtAgeT )->LLIQEXT := .T.
         ( dbfExtAgeT )->( dbUnLock() )

      end

      ( dbfExtAgeT )->( dbSkip() )
      oMetMsg:set( n++ )

   end





   n              := 1
   oMetMsg:cText  := "Nuevos depositos..."
   oMetMsg:setTotal( ( dbfNewFil )->( lastrec() + 1 ) )

   ( dbfNewFil )->( dbGoTop() )

   WHILE !( dbfNewFil )->( eof() )

      IF cAlmCur <> ( dbfNewFil )->CCODALM





         nDepAge                 := nNewDoc( "A", dbfDepAgeT, "NDEPAGE", , dbfCount )

         ( dbfDepAgeT )->( dbAppend() )
         ( dbfDepAgeT )->CSERDEP := "A"
         ( dbfDepAgeT )->NNUMDEP := nDepAge
         ( dbfDepAgeT )->CSUFDEP := RetSufEmp()
         ( dbfDepAgeT )->DFECDEP := date()
         ( dbfDepAgeT )->CCODALM := ( dbfNewFil )->CCODALM
         ( dbfDepAgeT )->CNOMALM := ( dbfNewFil )->CNOMALM
         ( dbfDepAgeT )->CDIVDEP := cDivEmp()
         ( dbfDepAgeT )->NVDVDEP := nChgDiv( ( dbfDepAgeT )->CDIVDEP, dbfDiv )
         ( dbfDepAgeT )->CDIRALM := ""
         ( dbfDepAgeT )->CPOBALM := ""
         ( dbfDepAgeT )->CPRVALM := ""
         ( dbfDepAgeT )->CPOSALM := ""





         cAlmCur  := ( dbfNewFil )->CCODALM

      end







      if ( dbfArticulo )->( dbSeek( ( dbfNewFil )->CCODART ) )                            .AND. ( dbfNewFil )->cTipMov <= "01"                                                   .AND. ( dbfNewFil )->NENTART - ( dbfNewFil )->NABNART - ( dbfNewFil )->NEXTART <> 0

         nUni                    := ( dbfNewFil )->NEXTART
         nMod                    := Mod( nUni, ( dbfArticulo )->nUniCaja )

         if nMod == 0
            ( dbfDepAgeL )->( dbAppend())
            ( dbfDepAgeL )->CSERDEP    := "A"
            ( dbfDepAgeL )->NNUMDEP    := nDepAge
            ( dbfDepAgeL )->CSUFDEP    := RetSufEmp()
            ( dbfDepAgeL )->CREF       := ( dbfNewFil )->CCODART
            ( dbfDepAgeL )->CDETALLE   := ( dbfNewFil )->CNOMART
            ( dbfDepAgeL )->cTipMov    := ( dbfNewFil )->cTipMov
            ( dbfDepAgeL )->NCANENT    := nUni / ( dbfArticulo )->nUniCaja
            ( dbfDepAgeL )->NUNICAJA   := ( dbfArticulo )->nUniCaja
         else
            ( dbfDepAgeL )->( dbAppend())
            ( dbfDepAgeL )->CSERDEP    := "A"
            ( dbfDepAgeL )->NNUMDEP    := nDepAge
            ( dbfDepAgeL )->CSUFDEP    := RetSufEmp()
            ( dbfDepAgeL )->CREF       := ( dbfNewFil )->CCODART
            ( dbfDepAgeL )->CDETALLE   := ( dbfNewFil )->CNOMART
            ( dbfDepAgeL )->cTipMov    := ( dbfNewFil )->cTipMov
            ( dbfDepAgeL )->NCANENT    := if( nMod == 0, 1, nMod )
            ( dbfDepAgeL )->NUNICAJA   := ( dbfArticulo )->nUniCaja

            ( dbfDepAgeL )->( dbAppend())
            ( dbfDepAgeL )->CSERDEP    := "A"
            ( dbfDepAgeL )->NNUMDEP    := nDepAge
            ( dbfDepAgeL )->CSUFDEP    := RetSufEmp()
            ( dbfDepAgeL )->CREF       := ( dbfNewFil )->CCODART
            ( dbfDepAgeL )->CDETALLE   := ( dbfNewFil )->CNOMART
            ( dbfDepAgeL )->cTipMov    := ( dbfNewFil )->cTipMov
            ( dbfDepAgeL )->NCANENT    := 1
            ( dbfDepAgeL )->NUNICAJA   := nUni - ( nMod * ( dbfArticulo )->nUniCaja )
         end

      end

      ( dbfNewFil )->( dbSkip() )

      oMetMsg:set( n++ )

   end





   cAlmCur        := " "
   n              := 1
   oMetMsg:cText  := "Nuevos albaranes..."
   oMetMsg:setTotal( ( dbfNewFil )->( lastrec() + 1 ) )

   ( dbfNewFil )->( dbGoTop() )

   WHILE !( dbfNewFil )->( eof() )

      IF cAlmCur <> ( dbfNewFil )->CCODALM





         cCodCli                 := RetCliAlm( ( dbfNewFil )->CCODALM, dbfAlmT )

         if ( dbfClient )->( dbSeek( cCodCli ) )
            cSerAlb              := if( Empty( ( dbfClient )->SERIE ), "A", ( dbfClient )->SERIE )
            nTarifa              := ( dbfClient )->nTarifa
         end
         nDepAge                 := nNewDoc( cSerAlb, dbfAlbCliT, "NALBCLI", , dbfCount )





         ( dbfAlbCliT )->( dbAppend() )

         ( dbfAlbCliT )->CSERALB := cSerAlb
         ( dbfAlbCliT )->NNUMALB := nDepAge
         ( dbfAlbCliT )->CSUFALB := RetSufEmp()
         ( dbfAlbCliT )->DFECALB := Date()
         ( dbfAlbCliT )->CCODALM := ( dbfNewFil )->CCODALM
         ( dbfAlbCliT )->CDIVALB := cDivEmp()
         ( dbfAlbCliT )->NVDVALB := nChgDiv( ( dbfDepAgeT )->CDIVDEP, dbfDiv )
         ( dbfAlbCliT )->lGenLqd := .T.





         ( dbfAlbCliT )->CCODCLI := cCodCli
         ( dbfAlbCliT )->nTarifa := nTarifa
         ( dbfAlbCliT )->CNOMCLI := ( dbfClient )->TITULO
         ( dbfAlbCliT )->CDIRCLI := ( dbfClient )->DOMICILIO
         ( dbfAlbCliT )->CPOBCLI := ( dbfClient )->POBLACION
         ( dbfAlbCliT )->CPRVCLI := ( dbfClient )->PROVINCIA
         ( dbfAlbCliT )->CPOSCLI := ( dbfClient )->CODPOSTAL
         ( dbfAlbCliT )->CDNICLI := ( dbfClient )->NIF
         ( dbfAlbCliT )->CCODTAR := ( dbfClient )->CCODTAR
         ( dbfAlbCliT )->CCODPAGO:= ( dbfClient )->CODPAGO
         ( dbfAlbCliT )->CCODRUT := ( dbfClient )->CCODRUT
         ( dbfAlbCliT )->CCODAGE := ( dbfClient )->CAGENTE
         ( dbfAlbCliT )->LMAYOR  := ( dbfClient )->LMAYORISTA
         ( dbfAlbCliT )->LRECARGO:= ( dbfClient )->LREQ
         ( dbfAlbCliT )->NDTOESP := ( dbfClient )->NDTOESP
         ( dbfAlbCliT )->NDPP    := ( dbfClient )->NDPP





         cAlmCur                 := ( dbfNewFil )->CCODALM

      end






      if ( dbfArticulo )->( dbSeek( ( dbfNewFil )->CCODART ) )

         nUni                    := ( dbfNewFil )->NENTART - ( dbfNewFil )->NABNART - ( dbfNewFil )->NEXTART

         if nUni <> 0

            nMod                 := Mod( nUni, ( dbfArticulo )->nUniCaja )

            if nMod == 0
               ( dbfAlbCliL )->( dbAppend())
               ( dbfAlbCliL )->CSERALB    := cSerAlb
               ( dbfAlbCliL )->NNUMALB    := nDepAge
               ( dbfAlbCliL )->CSUFALB    := RetSufEmp()
               ( dbfAlbCliL )->CREF       := ( dbfNewFil )->CCODART
               ( dbfAlbCliL )->CDETALLE   := ( dbfNewFil )->CNOMART
               ( dbfAlbCliL )->cTipMov    := ( dbfNewFil )->cTipMov
               ( dbfAlbCliL )->NCANENT    := nUni / ( dbfArticulo )->nUniCaja
               ( dbfAlbCliL )->NUNICAJA   := ( dbfArticulo )->nUniCaja

            else

               ( dbfAlbCliL )->( dbAppend())
               ( dbfAlbCliL )->CSERALB    := cSerAlb
               ( dbfAlbCliL )->NNUMALB    := nDepAge
               ( dbfAlbCliL )->CSUFALB    := RetSufEmp()
               ( dbfAlbCliL )->CREF       := ( dbfNewFil )->CCODART
               ( dbfAlbCliL )->CDETALLE   := ( dbfNewFil )->CNOMART
               ( dbfAlbCliL )->cTipMov    := ( dbfNewFil )->cTipMov
               ( dbfAlbCliL )->NCANENT    := if( nMod == 0, 1, nMod )
               ( dbfAlbCliL )->NUNICAJA   := ( dbfArticulo )->nUniCaja

               ( dbfAlbCliL )->( dbAppend())
               ( dbfAlbCliL )->CSERALB    := cSerAlb
               ( dbfAlbCliL )->NNUMALB    := nDepAge
               ( dbfAlbCliL )->CSUFALB    := RetSufEmp()
               ( dbfAlbCliL )->CREF       := ( dbfNewFil )->CCODART
               ( dbfAlbCliL )->CDETALLE   := ( dbfNewFil )->CNOMART
               ( dbfAlbCliL )->cTipMov    := ( dbfNewFil )->cTipMov
               ( dbfAlbCliL )->NCANENT    := 1
               ( dbfAlbCliL )->NUNICAJA   := nUni - ( nMod * ( dbfArticulo )->nUniCaja )

            end





            ( dbfAlbCliL )->CDETALLE   := ( dbfArticulo )->NOMBRE
            ( dbfAlbCliL )->NPESOKG    := ( dbfArticulo )->NPESOKG
            ( dbfAlbCliL )->CUNIDAD    := ( dbfArticulo )->CUNIDAD
            ( dbfAlbCliL )->NIVA       := nIva( dbfIva, (dbfArticulo)->TIPOIVA )





            do case
            case lSeekAtpArt( cCodCli + ( dbfNewFil )->cCodArt, , , ( dbfAlbCliT )->dFecAlb, dbfCliAtp )

               ( dbfAlbCliL )->nPreUnit   := ( dbfCliAtp )->NPRCART
               ( dbfAlbCliL )->nDto       := ( dbfCliAtp )->NDTOART
               ( dbfAlbCliL )->nDtoPrm    := ( dbfCliAtp )->NDPRART
               ( dbfAlbCliL )->nComAge    := ( dbfCliAtp )->NCOMAGE

            case !Empty( ( dbfAlbCliT )->cCodTar ) .AND. ( dbfAlbCliL )->nPreUnit == 0

               ( dbfAlbCliL )->nPreUnit   := RetPrcTar( ( dbfNewFil )->CCODART, ( dbfAlbCliT )->CCODTAR, Space( 5 ), Space( 5 ), Space( 5 ), Space( 5 ), dbfTarPreL, ( dbfAlbCliT )->nTarifa )
               ( dbfAlbCliL )->nDtoPrm    := RetPctTar( ( dbfNewFil )->CCODART, ( dbfNewFil )->cCodFam, ( dbfAlbCliT )->cCodTar, Space( 5 ), Space( 5 ), Space( 5 ), Space( 5 ), dbfTarPreL )
               ( dbfAlbCliL )->nComAge    := RetComTar( ( dbfNewFil )->CCODART, ( dbfNewFil )->cCodFam, ( dbfAlbCliT )->cCodTar, Space( 5 ), Space( 5 ), Space( 5 ), Space( 5 ), ( dbfAlbCliT )->CCODAGE, dbfTarPreL, dbfTarPreS )





            case ( dbfAlbCliL )->nPreUnit == 0

               ( dbfAlbCliL )->nPreUnit   := nRetPreArt( ( dbfAlbCliT )->nTarifa, ( dbfAlbCliT )->cDivAlb, .F., dbfArticulo, dbfDiv, dbfKit, dbfIva )
               ( dbfAlbCliL )->nPntVer    := ( dbfArticulo )->nPntVer1 / ( dbfAlbCliT )->nVdvAlb

            end

         end

      end

      ( dbfNewFil )->( dbSkip() )

      oMetMsg:set( n++ )

   end

RETURN NIL



static function ImpLqdAlm( dIniFecLqd, dFinFecLqd, cGetAlmDes, cGetAlmHas, nDevice, dbfNewFil )

   local oReport
   local nRec     := ( dbfNewFil )->( RecNo() )
   local oFont1   := TFont():New( "Courier New", 0, -10, .F., .T. )
   local oFont2   := TFont():New( "Courier New", 0, -10, .F., .F. )
   local oFont3   := TFont():New( "Courier New", 0, -10, .F., .F. )

   ( dbfNewFil )->( dbGoTop() )

   IF nDevice == 1









        oReport := RptBegin({{||    "Informe de liquidación de almacenes"}, {|| ""}}, {{||   "Periodo : " + dToC( dIniFecLqd ) + " -> " + dToC( dFinFecLqd )}, {|| "Almacen : " + cGetAlmDes + " -> " + cGetAlmHas} , {|| "Fecha   : " + dToC( Date() )}}, {{||   "Página  : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2, oFont3}, {}, .F.,,,, .T.,,, "Liquidación de almacen",,, UPPER("CENTERED") )

    ELSE









      oReport := RptBegin({{||    "Informe de liquidación de almacenes"}, {|| ""}}, {{||   "Periodo : " + dToC( dIniFecLqd ) + " -> " + dToC( dFinFecLqd )}, {|| "Almacen : " + cGetAlmDes + " -> " + cGetAlmHas} , {|| "Fecha   : " + dToC( Date() )}}, {{||   "Página  : " + str( oReport:nPage, 3 )}}, {oFont1, oFont2, oFont3}, {}, .F.,,, .T., .F.,,, "Liquidación de almacen",,, UPPER("CENTERED") )

    end




   RptAddColumn( {{||   "Almacen"}}, , {{||     ( dbfNewFil )->CCODALM}}, 8, {} , {||     2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )




   RptAddColumn( {{||   "Artículo"}}, , {{||     Rtrim( ( dbfNewFil )->CCODART )+ " - " + ( dbfNewFil )->CNOMART}}, 45, {} , {||     2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )




   RptAddColumn( {{||   "Mov."}}, , {{||     ( dbfNewFil )->cTipMov}}, 4, {} , {||     2}, .F., ,, .F., .F.,, .F., .F.,,, .F., )






   RptAddColumn( {{||   "Entradas"}}, , {{||     nUnd2Caj( ( dbfNewFil )->NENTART, ( dbfNewFil )->CCODART, dbfArticulo )}}, 9, {cPicUnd} , {||     2}, .T., ,, .F., .F.,, .F., .F.,,, .F., )






   RptAddColumn( {{||   "Ventas"}}, , {{||     nUnd2Caj( ( dbfNewFil )->NABNART, ( dbfNewFil )->CCODART, dbfArticulo )}}, 9, {cPicUnd} , {||     2}, .T., ,, .F., .F.,, .F., .F.,,, .F., )






   RptAddColumn( {{||   "Existencias"}}, , {{||     nUnd2Caj( ( dbfNewFil )->NEXTART, ( dbfNewFil )->CCODART, dbfArticulo )}}, 9, {cPicUnd} , {||     2}, .T., ,, .F., .F.,, .F., .F.,,, .F., )






   RptAddColumn( {{||   "Saldo"}}, , {{||     nUnd2Caj( ( dbfNewFil )->NENTART - ( dbfNewFil )->NABNART - ( dbfNewFil )->NEXTART, ( dbfNewFil )->CCODART, dbfArticulo )}}, 9, {cPicUnd} , {||     2}, .T., ,, .F., .F.,, .F., .F.,,, .F., )

   RptEnd()

   IF !Empty( oReport ) .AND. oReport:lCreated
        oReport:Margin( 0, 2, 2 )
      oReport:bSkip     := {|| ( dbfNewFil )->( dbSkip() ) }
   end

   oReport:Activate(, {|| !( dbfNewFil )->( eof() )},,,,,,,,,,,, )

    oFont1:end()
    oFont2:end()
    oFont3:end()

   ( dbfNewFil )->( dbGoTop( nRec ) )

return nil



static function nUnd2Caj( nUnd, cCodArt, dbfArt, cPicUnd )

   local nCaj  := 1

   if ( dbfArt )->( dbSeek( cCodArt ) )
      if ( dbfArt )->nUniCaja <> 0
         nCaj  := nUnd / ( dbfArt )->nUniCaja
      end
   end

return ( if( cPicUnd <> nil, Trans( nCaj, cPicUnd ), nCaj ) )

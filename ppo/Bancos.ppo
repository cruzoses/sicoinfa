#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Bancos.prg"
_HB_CLASS TBancos ; UTILITY FUNCTION TBancos(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TBancos" , {TMant():classh} ) ) ; ;

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Banc_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )

   _HB_MEMBER { cBitmap} ; IIF( !.F., s_oClass:AddMultiData(, ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ), nScope + IIF( .F., 32, 0 ), { "cBitmap" }, .F., .F. ), )

   _HB_MEMBER Create( cPath) AS CLASS TBancos; IIF( .F., s_oClass:ModMethod( "Create", @TBancos_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TBancos_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TBancos; IIF( .F., s_oClass:ModMethod( "New", @TBancos_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TBancos_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TBancos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TBancos_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TBancos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TBancos_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenService( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TBancos_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenService", @TBancos_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseService(); IIF( .F., s_oClass:ModMethod( "CloseService", @TBancos_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseService", @TBancos_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TBancos_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TBancos_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TBancos_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TBancos_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( oGet, nMode); IIF( .F., s_oClass:ModMethod( "lPreSave", @TBancos_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TBancos_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TBancos ;



UTILITY STATIC function TBancos_Create( cPath) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   IIF( cPath == nil, cPath := cPatGrp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



UTILITY STATIC function TBancos_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   IIF( cPath == nil, cPath := cPatGrp(), ) ;
   IIF( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   else
      ::nLevel          := nLevelUsr( "01106" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lAutoButtons       := .T.
   ::lCreateShell       := .F.

   ::cBitmap            := ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) )

RETURN ( Self )



UTILITY STATIC function TBancos_OpenFiles( lExclusive) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de bancos" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TBancos_CloseFiles() ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   ::oDbf               := nil

RETURN .T.



UTILITY STATIC function TBancos_OpenService( lExclusive) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de bancos" )

      ::CloseService()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TBancos_CloseService() ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   if !Empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:End()
   end

RETURN ( .T. )



UTILITY STATIC function TBancos_DefineFiles( cPath, cDriver) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "Bancos.Dbf", "Bancos" ):New( "Bancos.Dbf", "Bancos", ( cDriver ), "Bancos de empresa", ( cPath ) )

      ::oDbf:AddField( "cCodBnc", "C", 4, 0, "@!",,,, "Código", .F., 60, .F., {} )
      ::oDbf:AddField( "cNomBnc", "C", 50, 0, "@!",,,, "Nombre", .F., 300, .F., {} )
      ::oDbf:AddField( "cNomSuc", "C", 50, 0,,,,, "Nombre sucursal", .F.,, .T., {} )
      ::oDbf:AddField( "cDirBnc", "C", 35, 0,,,,, "Domicilio del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cPobBnc", "C", 25, 0,,,,, "Población del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cProBnc", "C", 20, 0,,,,, "Provincia del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cPosBnc", "C", 15, 0,,,,, "Código postal del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cTlfBnc", "C", 20, 0,,,,, "Teléfono del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cFaxBnc", "C", 20, 0,,,,, "Fax del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cPCoBnc", "C", 35, 0,,,,, "Persona de contacto", .F.,, .T., {} )
      ::oDbf:AddField( "cEntBnc", "C", 4, 0, "@!",,,, "Entidad", .F., 60, .F., {} )
      ::oDbf:AddField( "cOfiBnc", "C", 4, 0, "@!",,,, "Oficina", .F., 60, .F., {} )

      ::oDbf:AddIndex( "cCodBnc", "Bancos.Cdx", "cCodBnc",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNomBnc", "Bancos.Cdx", "cNomBnc",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TBancos_Resource( nMode) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

    local oDlg
   local oGet  := Array( 14 )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "banco", "Bancos",, .F.,,,,,, .F.,,,,,, .F., )






      oGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:cCodBnc, ::oDbf:cCodBnc:= u ) }, oDlg,, "@!", {||    NotValid( oGet[ 1 ], ::oDbf:cAlias, .T., "0" )},,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cNomBnc, ::oDbf:cNomBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 3 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cNomSuc, ::oDbf:cNomSuc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 4 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:cDirBnc, ::oDbf:cDirBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 5 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:cPobBnc, ::oDbf:cPobBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 6 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oDbf:cProBnc, ::oDbf:cProBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 7 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbf:cPosBnc, ::oDbf:cPosBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 8 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:cTlfBnc, ::oDbf:cTlfBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 9 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, ::oDbf:cFaxBnc, ::oDbf:cFaxBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oGet[ 10 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbf:cPCoBnc, ::oDbf:cPCoBnc:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oGet[ 11 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oDbf:cEntBnc, ::oDbf:cEntBnc:= u ) }, oDlg,, "9999",,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      oGet[ 12 ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::oDbf:cOfiBnc, ::oDbf:cOfiBnc:= u ) }, oDlg,, "9999",,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 500, {||( if( ::lPreSave( oGet, nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( oGet, nMode ), oDlg:end( 1 ), ) } )
   end

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TBancos_lPreSave( oGet, nMode) ; local Self AS CLASS TBancos := QSelf() AS CLASS TBancos

   if ( nMode == 1 .OR. nMode == 4 ) .AND. !oGet[ 1 ]:lValid()
      Return .F.
   end

   if Empty( ::oDbf:cNomBnc )
      MsgStop( "El nombre del banco no puede estar vacío." )
      oGet[ 2 ]:SetFocus()
      Return .F.
   end

RETURN .T.







_HB_CLASS TCuentasBancarias ; UTILITY FUNCTION TCuentasBancarias(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TCuentasBancarias" , {TMant():classh} ) ) ; ;

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "office-building_address_book_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )

   _HB_MEMBER { oPais} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPais" }, .F., .F. ), )
   _HB_MEMBER { oBanco} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBanco" }, .F., .F. ), )

   _HB_MEMBER { oPedCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPedCliP" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliP" }, .F., .F. ), )
   _HB_MEMBER { oFacCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliP" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvP" }, .F., .F. ), )

   _HB_MEMBER { lBreak} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lBreak" }, .F., .F. ), )

   _HB_MEMBER { oGetSaldoActual} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetSaldoActual" }, .F., .F. ), )
   _HB_MEMBER { nGetSaldoActual} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGetSaldoActual" }, .F., .F. ), )

   _HB_MEMBER Create( cPath) AS CLASS TCuentasBancarias; IIF( .F., s_oClass:ModMethod( "Create", @TCuentasBancarias_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TCuentasBancarias_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS TCuentasBancarias; IIF( .F., s_oClass:ModMethod( "New", @TCuentasBancarias_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TCuentasBancarias_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TCuentasBancarias_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TCuentasBancarias_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TCuentasBancarias_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TCuentasBancarias_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenService( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TCuentasBancarias_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenService", @TCuentasBancarias_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseService(); IIF( .F., s_oClass:ModMethod( "CloseService", @TCuentasBancarias_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseService", @TCuentasBancarias_CloseService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TCuentasBancarias_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TCuentasBancarias_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @TCuentasBancarias_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TCuentasBancarias_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TCuentasBancarias_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TCuentasBancarias_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lEndResource( oGet, nMode); IIF( .F., s_oClass:ModMethod( "lEndResource", @TCuentasBancarias_lEndResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lEndResource", @TCuentasBancarias_lEndResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lLoadBanco( aGet, nMode); IIF( .F., s_oClass:ModMethod( "lLoadBanco", @TCuentasBancarias_lLoadBanco(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lLoadBanco", @TCuentasBancarias_lLoadBanco(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nSaldoActual(); IIF( .F., s_oClass:ModMethod( "nSaldoActual", @TCuentasBancarias_nSaldoActual(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nSaldoActual", @TCuentasBancarias_nSaldoActual(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER nSaldoSesion( cCta, cTurRec); IIF( .F., s_oClass:ModMethod( "nSaldoSesion", @TCuentasBancarias_nSaldoSesion(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nSaldoSesion", @TCuentasBancarias_nSaldoSesion(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TCuentasBancarias ;



UTILITY STATIC function TCuentasBancarias_Create( cPath) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   IIF( cPath == nil, cPath := cPatGrp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



UTILITY STATIC function TCuentasBancarias_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   IIF( cPath == nil, cPath := cPatGrp(), ) ;
   IIF( oWndParent == nil, oWndParent := GetWndFrame(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   else
      ::nLevel          := nLevelUsr( "01106" )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::lAutoButtons       := .T.
   ::lCreateShell       := .F.

RETURN ( Self )



UTILITY STATIC function TCuentasBancarias_OpenFiles( lExclusive) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oPedCliP := DbfServer( "PedCliP.Dbf", "PedCliP" ):NewOpen( "PedCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliP:AddBag( "PedCliP.Cdx" ) ; ::oPedCliP:AddBag( ) ; ::oPedCliP:AutoIndex()

      ::oAlbCliP := DbfServer( "AlbCliP.Dbf", "AlbCliP" ):NewOpen( "AlbCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliP:AddBag( "AlbCliP.Cdx" ) ; ::oAlbCliP:AddBag( ) ; ::oAlbCliP:AutoIndex()

      ::oFacCliP := DbfServer( "FacCliP.Dbf", "FacCliP" ):NewOpen( "FacCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliP:AddBag( "FacCliP.Cdx" ) ; ::oFacCliP:AddBag( ) ; ::oFacCliP:AutoIndex()

      ::oFacPrvP := DbfServer( "FacPrvP.Dbf", "FacPrvP" ):NewOpen( "FacPrvP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FacPrvP.Cdx" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

      ::oDbf:Activate( .F., !( lExclusive ) )

      ::oPais           := TPais():Create( cPatDat() )
      ::oPais:OpenFiles()

      ::oBanco          := TBancos():Create()
      ::oBanco:OpenFiles()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de cuentas bancarias" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TCuentasBancarias_CloseFiles() ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   if !Empty( ::oPedCliP ) .AND. ( ::oPedCliP:Used() )
      ::oPedCliP:end()
   end

   if !Empty( ::oAlbCliP ) .AND. ( ::oAlbCliP:Used() )
      ::oAlbCliP:end()
   end

   if !Empty( ::oFacCliP )
      ::oFacCliP:End()
   end

   if !Empty( ::oFacPrvP )
      ::oFacPrvP:End()
   end

   if !Empty( ::oPais )
      ::oPais:End()
   end

   if !Empty( ::oBanco )
      ::oBanco:End()
   end

   if ::oDbf <> nil .AND. ::oDbf:Used()
      ::oDbf:End()
   end

   ::oDbf         := nil
   ::oFacCliP     := nil
   ::oFacPrvP     := nil
   ::oPais        := nil
   ::oBanco       := nil

RETURN .T.



UTILITY STATIC function TCuentasBancarias_OpenService( lExclusive) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de bancos" )

      ::CloseService()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TCuentasBancarias_CloseService() ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   if !Empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:End()
   end

RETURN ( .T. )



UTILITY STATIC function TCuentasBancarias_DefineFiles( cPath, cDriver) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "EmpBnc.Dbf", "EmpBnc" ):New( "EmpBnc.Dbf", "EmpBnc", ( cDriver ), "Cuentas bancarias", ( cPath ) )

      ::oDbf:AddField( "cCodBnc", "C", 3, 0, "@!",,,, "Código", .F., 60, .F., {} )
      ::oDbf:AddField( "cEntBnc", "C", 4, 0,,,,, "Entidad bancaria", .F.,, .T., {} )
      ::oDbf:AddField( "cSucBnc", "C", 4, 0,,,,, "Sucursal bancaria", .F.,, .T., {} )
      ::oDbf:AddField( "cDigBnc", "C", 2, 0,,,,, "Dígito control", .F.,, .T., {} )
      ::oDbf:AddField( "cCtaBnc", "C", 10, 0,,,,, "Cuenta", .F.,, .T., {} )
      ::oDbf:AddField( "cNomBnc", "C", 50, 0,,,,, "Nombre del banco", .F.,, .F., {} )


      ::oDbf:AddField( "bCtaBnc", "B", 14, 0,,,, {|| ::oDbf:cEntBnc + "-" + ::oDbf:cSucBnc + "-" + ::oDbf:cDigBnc + "-" + ::oDbf:cCtaBnc }, "Cuenta bancaria", .F., 150, .F., {} )

      ::oDbf:AddField( "cDirBnc", "C", 35, 0,,,,, "Domicilio del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cPobBnc", "C", 25, 0,,,,, "Población del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cProBnc", "C", 20, 0,,,,, "Provincia del banco", .F.,, .T., {} )
      ::oDbf:AddField( "cCPBnc", "C", 15, 0,,,,, "Código postal", .F.,, .T., {} )
      ::oDbf:AddField( "cTlfBnc", "C", 20, 0, "@!",,,, "Teléfono", .F., 60, .F., {} )
      ::oDbf:AddField( "cFaxBnc", "C", 20, 0, "@!",,,, "Fax", .F., 60, .F., {} )
      ::oDbf:AddField( "cPContBnc", "C", 35, 0,,,,, "Persona de contacto", .F., 160, .F., {} )
      ::oDbf:AddField( "cPaiBnc", "C", 4, 0, "@!",,,, "Pais", .F., 120, .F., {} )
      ::oDbf:AddField( "nSalIni", "N", 16, 0,,,,, "Saldo inicial", .F.,, .T., {} )

      ::oDbf:AddIndex( "cCodBnc", "EmpBnc.Cdx", "cCodBnc",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cCtaBnc", "EmpBnc.Cdx", "cEntBnc + cSucBnc + cDigBnc + cCtaBnc",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TCuentasBancarias_Activate() ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   if nAnd( ::nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      Return ( Self )
   end





   if ::oWndParent <> nil
      ::oWndParent:CloseAll()
   end

   if Empty( ::oDbf ) .OR. !::oDbf:Used()
      ::lOpenFiles      := ::OpenFiles()
   end





   if ::lOpenFiles

      if !::lCreateShell
         ::CreateShell( ::nLevel )
      end

      ::oWndBrw:GralButtons( Self )






      ::oWndBrw:NewAt( "Document_Chart_",,, {||( TFastCuentasBancarias():New():Play() )}, "Rep(o)rting", "O",,, 32,, .F. )

      ::oWndBrw:EndButtons( Self )

      if ::cHtmlHelp <> nil
         ::oWndBrw:cHtmlHelp  := ::cHtmlHelp
      end

      ::oWndBrw:Activate( , , , , , , , , , , , , , , , , {|| ::CloseFiles() } )

   end

RETURN ( Self )



UTILITY STATIC function TCuentasBancarias_Resource( nMode) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

    local oDlg
   local oBmp
   local cBmp
   local aGet
   local oSayPai
   local cSayPai
   local oBmpBancos

   aGet           := Array( ::oDbf:FieldCount() )
   cBmp           := ::oPais:cBmp( ::oDbf:cPaiBnc )
   cSayPai        := ::oPais:cNombre( ::oDbf:cPaiBnc )

   ::lBreak       := .F.

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "cuentas bancarias", "BancoEmpresa",, .F.,,,,,, .F.,,,,,, .F., )





      oBmpBancos := TBitmap():ReDefine( 600, "Office_Building_48_Alpha",, oDlg,,, .F., .F.,,, .F.,,, .T. )







      aGet[ ::oDbf:FieldPos( "cCodBnc" ) ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, ::oDbf:cCodBnc, ::oDbf:cCodBnc:= u ) }, oDlg,, "@!", {||    ( NotValid( aGet[ ::oDbf:FieldPos( "cCodBnc" ) ], ::oDbf:cAlias, .T., "0" ) )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "cNomBnc" ) ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, ::oDbf:cNomBnc, ::oDbf:cNomBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "Lupa",, )

      aGet[ ::oDbf:FieldPos( "cNomBnc" ) ]:bHelp   := {|| ::lLoadBanco( aGet, nMode ) }





      aGet[ ::oDbf:FieldPos( "cDirBnc" ) ] := TGetHlp():ReDefine( 210, { | u | If( PCount()==0, ::oDbf:cDirBnc, ::oDbf:cDirBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cPobBnc" ) ] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, ::oDbf:cPobBnc, ::oDbf:cPobBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cCPBnc" ) ] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, ::oDbf:cCPBnc, ::oDbf:cCPBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cProBnc" ) ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, ::oDbf:cProBnc, ::oDbf:cProBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "cPaiBnc" ) ] := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, ::oDbf:cPaiBnc, ::oDbf:cPaiBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil, "LUPA",, )

         aGet[ ::oDbf:FieldPos( "cPaiBnc" ) ]:bValid  := {|| ::oPais:GetPais( ::oDbf:cPaiBnc, oSayPai, oBmp ) }
         aGet[ ::oDbf:FieldPos( "cPaiBnc" ) ]:bHelp   := {|| ::oPais:Buscar( aGet[ ::oDbf:FieldPos( "cPaiBnc" ) ] ) }




      oBmp := TBitmap():ReDefine( 301, cBmp,, oDlg,,, .F., .F.,,, .F.,,, .F. )





      oSayPai := TGetHlp():ReDefine( 302, { | u | If( PCount()==0, cSayPai, cSayPai:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .T.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cTlfBnc" ) ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, ::oDbf:cTlfBnc, ::oDbf:cTlfBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cFaxBnc" ) ] := TGetHlp():ReDefine( 260, { | u | If( PCount()==0, ::oDbf:cFaxBnc, ::oDbf:cFaxBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      aGet[ ::oDbf:FieldPos( "cPContBnc" ) ] := TGetHlp():ReDefine( 270, { | u | If( PCount()==0, ::oDbf:cPContBnc, ::oDbf:cPContBnc:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "cEntBnc" ) ] := TGetHlp():ReDefine( 310, { | u | If( PCount()==0, ::oDbf:cEntBnc, ::oDbf:cEntBnc:= u ) }, oDlg,,, {||    ( lCalcDC( ::oDbf:cEntBnc, ::oDbf:cSucBnc, ::oDbf:cDigBnc, ::oDbf:cCtaBnc, aGet[ ::oDbf:FieldPos( "cDigBnc" ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "cSucBnc" ) ] := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, ::oDbf:cSucBnc, ::oDbf:cSucBnc:= u ) }, oDlg,,, {||    ( lCalcDC( ::oDbf:cEntBnc, ::oDbf:cSucBnc, ::oDbf:cDigBnc, ::oDbf:cCtaBnc, aGet[ ::oDbf:FieldPos( "cDigBnc" ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "cDigBnc" ) ] := TGetHlp():ReDefine( 330, { | u | If( PCount()==0, ::oDbf:cDigBnc, ::oDbf:cDigBnc:= u ) }, oDlg,,, {||    ( lCalcDC( ::oDbf:cEntBnc, ::oDbf:cSucBnc, ::oDbf:cDigBnc, ::oDbf:cCtaBnc, aGet[ ::oDbf:FieldPos( "cDigBnc" ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ ::oDbf:FieldPos( "cCtaBnc" ) ] := TGetHlp():ReDefine( 340, { | u | If( PCount()==0, ::oDbf:cCtaBnc, ::oDbf:cCtaBnc:= u ) }, oDlg,, "9999999999", {||    ( lCalcDC( ::oDbf:cEntBnc, ::oDbf:cSucBnc, ::oDbf:cDigBnc, ::oDbf:cCtaBnc, aGet[ ::oDbf:FieldPos( "cDigBnc" ) ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      aGet[ ::oDbf:FieldPos( "nSalIni" ) ] := TGetHlp():ReDefine( 350, { | u | If( PCount()==0, ::oDbf:nSalIni, ::oDbf:nSalIni:= u ) }, oDlg,, cPorDiv(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )






      ::oGetSaldoActual := TGetHlp():ReDefine( 360, { | u | If( PCount()==0, ::nGetSaldoActual, ::nGetSaldoActual:= u ) }, oDlg,, cPorDiv(),,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )

      TBtnBmp():ReDefine( 361, "Recycle_16",,,,, {|| ::nSaldoActual() }, oDlg, .F., , .F. )









      TButton():ReDefine( 500, {||( ::lEndResource( aGet, oDlg, nMode ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 550, {||( ::lBreak := .T., SysRefresh(), oDlg:End() )}, oDlg,,, .F.,,,, .T. )





      if ( nMode <> 3 )
         oDlg:AddFastKey( 116, {|| ::lEndResource( aGet, oDlg, nMode ) } )
      end

      oDlg:bStart := {|| ::nSaldoActual() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:end()
   end

   if !Empty( oBmpBancos )
      oBmpBancos:end()
   end

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TCuentasBancarias_lEndResource( aGet, oDlg, nMode) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   if ( nMode == 1 .OR. nMode == 4 ) .AND. !aGet[ ::oDbf:FieldPos( "cCodBnc" ) ]:lValid()
      Return .F.
   end

   if Empty( ::oDbf:cNomBnc )
      MsgStop( "El nombre del banco no puede estar vacío." )
      aGet[ ::oDbf:FieldPos( "cNomBnc" ) ]:SetFocus()
      Return .F.
   end

   if Empty( ::oDbf:cCtaBnc )
      MsgStop( "La cuenta del banco no puede estar vacío." )
      aGet[ ::oDbf:FieldPos( "cCtaBnc" ) ]:SetFocus()
      Return .F.
   end

   oDlg:End( 1 )

RETURN .T.



UTILITY STATIC function TCuentasBancarias_lLoadBanco( aGet, nMode) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   local cBanco   := ""
   local cCuenta  := ""

   ::oBanco:Buscar( aGet[ ::oDbf:FieldPos( "cNomBnc" ) ], "cCodBnc" )

   cBanco         := aGet[ ::oDbf:FieldPos( "cNomBnc" ) ]:VarGet()

   aGet[ ::oDbf:FieldPos( "cNomBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cNomBnc" ) )
   aGet[ ::oDbf:FieldPos( "cDirBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cDirBnc" ) )
   aGet[ ::oDbf:FieldPos( "cPobBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cPobBnc" ) )
   aGet[ ::oDbf:FieldPos( "cProBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cProBnc" ) )
   aGet[ ::oDbf:FieldPos( "cCPBnc" )  ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cPosBnc" ) )
   aGet[ ::oDbf:FieldPos( "cTlfBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cTlfBnc" ) )
   aGet[ ::oDbf:FieldPos( "cFaxBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cFaxBnc" ) )
   aGet[ ::oDbf:FieldPos( "cPContBnc")]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cPcoBnc" ) )
   aGet[ ::oDbf:FieldPos( "cEntBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cEntBnc" ) )
   aGet[ ::oDbf:FieldPos( "cSucBnc" ) ]:cText( oRetFld( cBanco, ::oBanco:oDbf, "cOfiBnc" ) )
   aGet[ ::oDbf:FieldPos( "cDigBnc" ) ]:cText( Space( 2 ) )
   aGet[ ::oDbf:FieldPos( "cCtaBnc" ) ]:cText( Space( 10 ) )

Return .T.



UTILITY STATIC function TCuentasBancarias_nSaldoActual( cCta) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   local nOrd
   local nSaldo      := 0

   IIF( cCta == nil, cCta := ::oDbf:cEntBnc + ::oDbf:cSucBnc + ::oDbf:cDigBnc + ::oDbf:cCtaBnc, ) ;

   if Empty( cCta )
      Return ( nSaldo )
   end

   CursorWait()





   nOrd              := ::oDbf:OrdSetFocus( "cCtaBnc" )

   if ::oDbf:Seek( cCta )
      nSaldo         := ::oDbf:nSalIni
   end

   ::oDbf:OrdSetFocus( nOrd )





   nOrd              := ::oPedCliP:OrdSetFocus( "lCtaBnc" )

   if ::oPedCliP:Seek( cCta )

      while !::lBreak .AND. ::oPedCliP:cEntEmp + ::oPedCliP:cSucEmp + ::oPedCliP:cDigEmp + ::oPedCliP:cCtaEmp == cCta .AND. !::oPedCliP:Eof()

         nSaldo      += ::oPedCliP:nImporte

         ::oPedCliP:Skip()

      end

   end

   ::oPedCliP:OrdSetFocus( nOrd )





   nOrd              := ::oAlbCliP:OrdSetFocus( "lCtaBnc" )

   if ::oAlbCliP:Seek( cCta )

      while !::lBreak .AND. ::oAlbCliP:cEntEmp + ::oAlbCliP:cSucEmp + ::oAlbCliP:cDigEmp + ::oAlbCliP:cCtaEmp == cCta .AND. !::oAlbCliP:Eof()

         nSaldo      += ::oAlbCliP:nImporte

         ::oAlbCliP:Skip()

      end

   end

   ::oAlbCliP:OrdSetFocus( nOrd )





   nOrd              := ::oFacCliP:OrdSetFocus( "lCtaBnc" )

   if ::oFacCliP:Seek( cCta )

      while !::lBreak .AND. ::oFacCliP:cEntEmp + ::oFacCliP:cSucEmp + ::oFacCliP:cDigEmp + ::oFacCliP:cCtaEmp == cCta .AND. !::oFacCliP:Eof()

         nSaldo      += ::oFacCliP:nImporte

         ::oFacCliP:Skip()

      end

   end

   ::oFacCliP:OrdSetFocus( nOrd )





   nOrd              := ::oFacPrvP:OrdSetFocus( "lCtaBnc" )

   if ::oFacPrvP:Seek( cCta )

      while !::lBreak .AND. ::oFacPrvP:cEntEmp + ::oFacPrvP:cSucEmp + ::oFacPrvP:cDigEmp + ::oFacPrvP:cCtaEmp == cCta .AND. !::oFacPrvP:Eof()

         nSaldo      -= ::oFacPrvP:nImporte

         ::oFacPrvP:Skip()

      end

   end

   ::oFacPrvP:OrdSetFocus( nOrd )

   if !Empty( ::oGetSaldoActual )
      ::oGetSaldoActual:cText( nSaldo )
   end

   CursorWE()

Return ( nSaldo )



UTILITY STATIC function TCuentasBancarias_nSaldoSesion( cCta, cTurRec) ; local Self AS CLASS TCuentasBancarias := QSelf() AS CLASS TCuentasBancarias

   local nOrd
   local nSaldo      := 0

   if Empty( cCta )
      Return ( nSaldo )
   end

   if Empty( cTurRec )
      Return ( nSaldo )
   end

   CursorWait()





   nOrd              := ::oDbf:OrdSetFocus( "cCtaBnc" )

   if ::oDbf:Seek( cCta )
      nSaldo         := ::oDbf:nSalIni
   end

   ::oDbf:OrdSetFocus( nOrd )





   nOrd              := ::oFacCliP:OrdSetFocus( "lCtaBnc" )

   if ::oFacCliP:Seek( cCta )

      while !::lBreak .AND. ::oFacCliP:cEntEmp + ::oFacCliP:cSucEmp + ::oFacCliP:cDigEmp + ::oFacCliP:cCtaEmp == cCta .AND. !::oFacCliP:Eof()

         if ::oFacCliP:cTurRec <> cTurRec
            nSaldo   += ::oFacCliP:nImporte
         end

         ::oFacCliP:Skip()

      end

   end

   ::oFacCliP:OrdSetFocus( nOrd )





   nOrd              := ::oFacPrvP:OrdSetFocus( "lCtaBnc" )

   if ::oFacPrvP:Seek( cCta )

      while !::lBreak .AND. ::oFacPrvP:cEntEmp + ::oFacPrvP:cSucEmp + ::oFacPrvP:cDigEmp + ::oFacPrvP:cCtaEmp == cCta .AND. !::oFacPrvP:Eof()

         if ::oFacPrvP:cTurRec <> cTurRec
            nSaldo   -= ::oFacPrvP:nImporte
         end

         ::oFacPrvP:Skip()

      end

   end

   ::oFacPrvP:OrdSetFocus( nOrd )

   if !Empty( ::oGetSaldoActual )
      ::oGetSaldoActual:cText( nSaldo )
   end

   CursorWE()

Return ( nSaldo )








_HB_CLASS TFastCuentasBancarias ; UTILITY FUNCTION TFastCuentasBancarias(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFastCuentasBancarias" , {TFastReportInfGen():classh} ) ) ; ;

   _HB_MEMBER { cResource} ; IIF( !.F., s_oClass:AddMultiData(, "FastReportArticulos", nScope + IIF( .F., 32, 0 ), { "cResource" }, .F., .F. ), )

   _HB_MEMBER { oPedCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPedCliP" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliP" }, .F., .F. ), )
   _HB_MEMBER { oFacCliP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliP" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvP} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvP" }, .F., .F. ), )

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TFastCuentasBancarias_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TFastCuentasBancarias_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TFastCuentasBancarias_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TFastCuentasBancarias_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TFastCuentasBancarias_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TFastCuentasBancarias_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TFastCuentasBancarias_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TFastCuentasBancarias_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TFastCuentasBancarias_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TFastCuentasBancarias_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER lValidRegister(); IIF( .F., s_oClass:ModMethod( "lValidRegister", @TFastCuentasBancarias_lValidRegister(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValidRegister", @TFastCuentasBancarias_lValidRegister(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DataReport( oFr); IIF( .F., s_oClass:ModMethod( "DataReport", @TFastCuentasBancarias_DataReport(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DataReport", @TFastCuentasBancarias_DataReport(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER StartDialog(); IIF( .F., s_oClass:ModMethod( "StartDialog", @TFastCuentasBancarias_StartDialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "StartDialog", @TFastCuentasBancarias_StartDialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER BuildTree( oTree, lSubNode); IIF( .F., s_oClass:ModMethod( "BuildTree", @TFastCuentasBancarias_BuildTree(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "BuildTree", @TFastCuentasBancarias_BuildTree(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPedidosClientes(); IIF( .F., s_oClass:ModMethod( "AddPedidosClientes", @TFastCuentasBancarias_AddPedidosClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPedidosClientes", @TFastCuentasBancarias_AddPedidosClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddAlbaranesClientes(); IIF( .F., s_oClass:ModMethod( "AddAlbaranesClientes", @TFastCuentasBancarias_AddAlbaranesClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlbaranesClientes", @TFastCuentasBancarias_AddAlbaranesClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddRecibosClientes(); IIF( .F., s_oClass:ModMethod( "AddRecibosClientes", @TFastCuentasBancarias_AddRecibosClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRecibosClientes", @TFastCuentasBancarias_AddRecibosClientes(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddRecibosProveedores(); IIF( .F., s_oClass:ModMethod( "AddRecibosProveedores", @TFastCuentasBancarias_AddRecibosProveedores(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRecibosProveedores", @TFastCuentasBancarias_AddRecibosProveedores(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CalculaSaldo(); IIF( .F., s_oClass:ModMethod( "CalculaSaldo", @TFastCuentasBancarias_CalculaSaldo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CalculaSaldo", @TFastCuentasBancarias_CalculaSaldo(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER TreeReportingChanged(); IIF( .F., s_oClass:ModMethod( "TreeReportingChanged", @TFastCuentasBancarias_TreeReportingChanged(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "TreeReportingChanged", @TFastCuentasBancarias_TreeReportingChanged(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFastCuentasBancarias ;



UTILITY STATIC function TFastCuentasBancarias_lResource( cFld) ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   ::lNewInforme     := .T.
   ::lDefCondiciones := .F.

   if !::NewResource()
      return .F.
   end

   if !::lGrupoEntidadesBancarias( .T. )
      return .F.
   end

   if !::lGrupoCliente( .T. )
      return .F.
   end

   if !::lGrupoProveedor( .T. )
      return .F.
   end

RETURN .T.



UTILITY STATIC function TFastCuentasBancarias_OpenFiles() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local lOpen    := .T.
   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      ::oPedCliP := DbfServer( "PedCliP.Dbf", "PedCliP" ):NewOpen( "PedCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliP:AddBag( "PedCliP.Cdx" ) ; ::oPedCliP:AddBag( ) ; ::oPedCliP:AutoIndex()

      ::oAlbCliP := DbfServer( "AlbCliP.Dbf", "AlbCliP" ):NewOpen( "AlbCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliP:AddBag( "AlbCliP.Cdx" ) ; ::oAlbCliP:AddBag( ) ; ::oAlbCliP:AutoIndex()

      ::oFacCliP := DbfServer( "FacCliP.Dbf", "FacCliP" ):NewOpen( "FacCliP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliP:AddBag( "FacCliP.Cdx" ) ; ::oFacCliP:AddBag( ) ; ::oFacCliP:AutoIndex()

      ::oFacPrvP := DbfServer( "FacPrvP.Dbf", "FacPrvP" ):NewOpen( "FacPrvP.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvP:AddBag( "FacPrvP.Cdx" ) ; ::oFacPrvP:AddBag( ) ; ::oFacPrvP:AutoIndex()

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de informes de cuentas bancarias." )

      ::CloseFiles()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TFastCuentasBancarias_CloseFiles() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   if !Empty( ::oPedCliP ) .AND. ( ::oPedCliP:Used() )
      ::oPedCliP:end()
   end

   if !Empty( ::oAlbCliP ) .AND. ( ::oAlbCliP:Used() )
      ::oAlbCliP:end()
   end

   if !Empty( ::oFacCliP ) .AND. ( ::oFacCliP:Used() )
      ::oFacCliP:end()
   end

   if !Empty( ::oFacPrvP ) .AND. ( ::oFacPrvP:Used() )
      ::oFacPrvP:end()
   end

   if !Empty( ::oCuentasBancarias )
      ::oCuentasBancarias:End()
   end

RETURN .T.



UTILITY STATIC function TFastCuentasBancarias_Create( uParam) ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   ::AddField( "cTipDoc",  "C", 30, 0, {|| "" },   "Tipo de documento"                             )
   ::AddField( "cSerFac" , "C",  1, 0, {|| "" },   "Serie de recibo"                               )
   ::AddField( "nNumFac",  "N",  9, 0, {|| "" },   "Número de recibo"                              )
   ::AddField( "cSufFac",  "C",  2, 0, {|| "" },   "Sufijo de recibo"                              )
   ::AddField( "cCodCli",  "C", 12, 0, {|| "@!" }, "Código cliente"                                )
   ::AddField( "cCodPrv",  "C", 12, 0, {|| "@!" }, "Código proveedor"                              )
   ::AddField( "dCobRec",  "D",  8, 0, {|| "" },   "Fecha de cobro"                                )
   ::AddField( "dEmiRec",  "D",  8, 0, {|| "" },   "Fecha de emisión"                              )
   ::AddField( "cCodCta",  "C",  3, 0, {|| "" },   "Código de la cuenta bancaria"                  )
   ::AddField( "cEntEmp",  "C",  4, 0, {|| "@!" }, "Entidad de la cuenta de la empresa"            )
   ::AddField( "cSucEmp",  "C",  4, 0, {|| "@!" }, "Sucursal de la cuenta de la empresa"           )
   ::AddField( "cDigEmp",  "C",  2, 0, {|| "@!" }, "Dígito de control de la cuenta de la empresa"  )
   ::AddField( "cCtaEmp",  "C", 10, 0, {|| "@!" }, "Cuenta bancaria de la empresa"                 )
   ::AddField( "nTotImp",  "N", 16, 6, {|| "" },   "Importe recibo"                                )
   ::AddField( "nSalImp",  "N", 16, 6, {|| "" },   "Saldo recibo"                                  )

   ::AddTmpIndex( "cCtaEmp", "cCodCta + Dtos( dCobRec )" )

RETURN ( self )



UTILITY STATIC function TFastCuentasBancarias_lGenerate() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   ::oDbf:Zap()

   do case
      case ::cTypeName == "Informe de cuentas bancarias"

         ::AddPedidosClientes()

         ::AddAlbaranesClientes()

         ::AddRecibosClientes()

         ::AddRecibosProveedores()

         ::CalculaSaldo()

   end

RETURN ( ::oDbf:LastRec() > 0 )



UTILITY STATIC function TFastCuentasBancarias_lValidRegister( cCtaBnc) ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   if ( cCtaBnc >= ::oGrupoCuentasBancarias:Cargo:Desde .AND. cCtaBnc <= ::oGrupoCuentasBancarias:Cargo:Hasta )
      Return ( .T. )
   end

RETURN ( .F. )



UTILITY STATIC function TFastCuentasBancarias_AddPedidosClientes() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local cExp
   local cCta

   ::oPedCliP:OrdSetFocus( "dEntrega" )

   cExp              := '!lPasado .and. dEntrega >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrega <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) .and. '
   cExp              += 'cCodCli >= "' + ::oGrupoCliente:Cargo:Desde + '" .and. cCodCli <= "' + ::oGrupoCliente:Cargo:Hasta + '"'

   ::oPedCliP:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oPedCliP:cFile ), ::oPedCliP:OrdKey(), ( cExp ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando recibos de clientes"
   ::oMtrInf:SetTotal( ::oPedCliP:OrdKeyCount() )

   ::oPedCliP:GoTop()
   while !::lBreak .AND. !::oPedCliP:Eof()

      cCta           := oRetFld( ::oPedCliP:cEntEmp + ::oPedCliP:cSucEmp + ::oPedCliP:cDigEmp + ::oPedCliP:cCtaEmp, ::oCuentasBancarias:oDbf, "cCodBnc", "cCtaBnc" )

      if ::lValidRegister( cCta )

         ::oDbf:Append()

         ::oDbf:cCodPrv := ""
         ::oDbf:cCodCta := cCta
         ::oDbf:cTipDoc := "Entregas pedidos"
         ::oDbf:cSerFac := ::oPedCliP:cSerPed
         ::oDbf:nNumFac := ::oPedCliP:nNumPed
         ::oDbf:cSufFac := ::oPedCliP:cSufPed
         ::oDbf:cCodCli := ::oPedCliP:cCodCli
         ::oDbf:dEmiRec := ::oPedCliP:dEntrega
         ::oDbf:dCobRec := ::oPedCliP:dEntrega
         ::oDbf:cEntEmp := ::oPedCliP:cEntEmp
         ::oDbf:cSucEmp := ::oPedCliP:cSucEmp
         ::oDbf:cDigEmp := ::oPedCliP:cDigEmp
         ::oDbf:cCtaEmp := ::oPedCliP:cCtaEmp
         ::oDbf:nTotImp := ::oPedCliP:nImporte

         ::oDbf:Save()

      end

      ::oPedCliP:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oPedCliP:IdxDelete( cCurUsr(), GetFileNoExt( ::oPedCliP:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_AddAlbaranesClientes() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local cExp
   local cCta

   ::oAlbCliP:OrdSetFocus( "dEntrega" )

   cExp              := '!lPasado .and. dEntrega >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrega <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) .and. '
   cExp              += 'cCodCli >= "' + ::oGrupoCliente:Cargo:Desde + '" .and. cCodCli <= "' + ::oGrupoCliente:Cargo:Hasta + '"'

   ::oAlbCliP:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oAlbCliP:cFile ), ::oAlbCliP:OrdKey(), ( cExp ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando recibos de clientes"
   ::oMtrInf:SetTotal( ::oAlbCliP:OrdKeyCount() )

   ::oAlbCliP:GoTop()
   while !::lBreak .AND. !::oAlbCliP:Eof()

      cCta           := oRetFld( ::oAlbCliP:cEntEmp + ::oAlbCliP:cSucEmp + ::oAlbCliP:cDigEmp + ::oAlbCliP:cCtaEmp, ::oCuentasBancarias:oDbf, "cCodBnc", "cCtaBnc" )

      if ::lValidRegister( cCta )

         ::oDbf:Append()

         ::oDbf:cCodPrv := ""
         ::oDbf:cCodCta := cCta
         ::oDbf:cTipDoc := "Entregas albraranes"
         ::oDbf:cSerFac := ::oAlbCliP:cSerAlb
         ::oDbf:nNumFac := ::oAlbCliP:nNumAlb
         ::oDbf:cSufFac := ::oAlbCliP:cSufAlb
         ::oDbf:cCodCli := ::oAlbCliP:cCodCli
         ::oDbf:dEmiRec := ::oAlbCliP:dEntrega
         ::oDbf:dCobRec := ::oAlbCliP:dEntrega
         ::oDbf:cEntEmp := ::oAlbCliP:cEntEmp
         ::oDbf:cSucEmp := ::oAlbCliP:cSucEmp
         ::oDbf:cDigEmp := ::oAlbCliP:cDigEmp
         ::oDbf:cCtaEmp := ::oAlbCliP:cCtaEmp
         ::oDbf:nTotImp := ::oAlbCliP:nImporte

         ::oDbf:Save()

      end

      ::oAlbCliP:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oAlbCliP:IdxDelete( cCurUsr(), GetFileNoExt( ::oAlbCliP:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_AddRecibosClientes() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local cExp
   local cCta

   ::oFacCliP:OrdSetFocus( "dEntrada" )

   cExp              := 'lCobrado .and. dEntrada >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrada <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) .and. '
   cExp              += 'cCodCli >= "' + ::oGrupoCliente:Cargo:Desde + '" .and. cCodCli <= "' + ::oGrupoCliente:Cargo:Hasta + '"'

   ::oFacCliP:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacCliP:cFile ), ::oFacCliP:OrdKey(), ( cExp ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando recibos de clientes"
   ::oMtrInf:SetTotal( ::oFacCliP:OrdKeyCount() )

   ::oFacCliP:GoTop()
   while !::lBreak .AND. !::oFacCliP:Eof()

      cCta           := oRetFld( ::oFacCliP:cEntEmp + ::oFacCliP:cSucEmp + ::oFacCliP:cDigEmp + ::oFacCliP:cCtaEmp, ::oCuentasBancarias:oDbf, "cCodBnc", "cCtaBnc" )

      if ::lValidRegister( cCta )

         ::oDbf:Append()

         ::oDbf:cCodPrv := ""
         ::oDbf:cCodCta := cCta
         ::oDbf:cTipDoc := "Recibos clientes"
         ::oDbf:cSerFac := ::oFacCliP:cSerie
         ::oDbf:nNumFac := ::oFacCliP:nNumFac
         ::oDbf:cSufFac := ::oFacCliP:cSufFac
         ::oDbf:cCodCli := ::oFacCliP:cCodCli
         ::oDbf:dEmiRec := ::oFacCliP:dPreCob
         ::oDbf:dCobRec := ::oFacCliP:dEntrada
         ::oDbf:cEntEmp := ::oFacCliP:cEntEmp
         ::oDbf:cSucEmp := ::oFacCliP:cSucEmp
         ::oDbf:cDigEmp := ::oFacCliP:cDigEmp
         ::oDbf:cCtaEmp := ::oFacCliP:cCtaEmp
         ::oDbf:nTotImp := ::oFacCliP:nImporte

         ::oDbf:Save()

      end

      ::oFacCliP:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacCliP:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacCliP:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_AddRecibosProveedores() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local cExp
   local cCta

   ::oFacPrvP:OrdSetFocus( "dEntrada" )

   cExp              := 'lCobrado .and. dEntrada >= Ctod( "' + Dtoc( ::dIniInf ) + '" ) .and. dEntrada <= Ctod( "' + Dtoc( ::dFinInf ) + '" ) .and. '
   cExp              += 'cCodPrv >= "' + ::oGrupoCliente:Cargo:Desde + '" .and. cCodPrv <= "' + ::oGrupoCliente:Cargo:Hasta + '"'

   ::oFacPrvP:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oFacPrvP:cFile ), ::oFacPrvP:OrdKey(), ( cExp ), , , , , , , , .T. )

   ::oMtrInf:cText   := "Procesando recibos de proveedores"
   ::oMtrInf:SetTotal( ::oFacPrvP:OrdKeyCount() )

   ::oFacPrvP:GoTop()
   while !::lBreak .AND. !::oFacPrvP:Eof()

      cCta           := oRetFld( ::oFacPrvP:cEntEmp + ::oFacPrvP:cSucEmp + ::oFacPrvP:cDigEmp + ::oFacPrvP:cCtaEmp, ::oCuentasBancarias:oDbf, "cCodBnc", "cCtaBnc" )

      if ::lValidRegister( cCta )

         ::oDbf:Append()

         ::oDbf:cCodCli := ""
         ::oDbf:cCodCta := cCta
         ::oDbf:cTipDoc := "Recibos proveedores"
         ::oDbf:cCodPrv := ::oFacPrvP:cCodPrv
         ::oDbf:cSerFac := ::oFacPrvP:cSerFac
         ::oDbf:nNumFac := ::oFacPrvP:nNumFac
         ::oDbf:cSufFac := ::oFacPrvP:cSufFac
         ::oDbf:dEmiRec := ::oFacPrvP:dPreCob
         ::oDbf:dCobRec := ::oFacPrvP:dEntrada
         ::oDbf:cEntEmp := ::oFacPrvP:cEntEmp
         ::oDbf:cSucEmp := ::oFacPrvP:cSucEmp
         ::oDbf:cDigEmp := ::oFacPrvP:cDigEmp
         ::oDbf:cCtaEmp := ::oFacPrvP:cCtaEmp
         ::oDbf:nTotImp := - ::oFacPrvP:nImporte

         ::oDbf:Save()

      end

      ::oFacPrvP:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oFacPrvP:IdxDelete( cCurUsr(), GetFileNoExt( ::oFacPrvP:cFile ) )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_CalculaSaldo() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   local nSaldo         := 0
   local cCuenta        := ""

   ::oMtrInf:cText      := "Calcula saldo"
   ::oMtrInf:SetTotal( ::oDbf:OrdKeyCount() )

   ::oDbf:GoTop()
   while !::lBreak .AND. !::oDbf:Eof()

      if cCuenta <> ::oDbf:cCodCta
         cCuenta        := ::oDbf:cCodCta
         nSaldo         := oRetFld( cCuenta, ::oCuentasBancarias:oDbf, "nSalIni", "cCodBnc" )
      end

      ::oDbf:FieldPutByName( "nSalImp", ::oDbf:nTotImp + nSaldo )

      nSaldo            := ::oDbf:nSalImp

      ::oDbf:Skip()

      ::oMtrInf:AutoInc()

   end

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_StartDialog() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   ::CreateTreeImageList()

   ::BuildTree( ::oTreeReporting, .F. )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_BuildTree( oTree, lSubNode) ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   IIF( lSubNode == nil, lSubNode := .T., ) ;

   oTree:Select( oTree:Add( "Informe de cuentas bancarias", 17, "Informe de cuentas bancarias" ) )

RETURN ( Self )



UTILITY STATIC function TFastCuentasBancarias_DataReport( oFr) ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   ::oFastReport:SetWorkArea(       "Informe", ::oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Informe", cObjectsToReport( ::oDbf ) )

   ::oFastReport:SetWorkArea(       "Empresa", ::oDbfEmp:nArea )
   ::oFastReport:SetFieldAliases(   "Empresa", cItemsToReport( aItmEmp() ) )

   ::oFastReport:SetWorkArea(       "Cuentas bancarias", ::oCuentasBancarias:oDbf:nArea )
   ::oFastReport:SetFieldAliases(   "Cuentas bancarias", cObjectsToReport( ::oCuentasBancarias:oDbf ) )

   ::oFastReport:SetWorkArea(       "Clientes", ::oDbfCli:nArea )
   ::oFastReport:SetFieldAliases(   "Clientes", cItemsToReport( aItmCli() ) )

   ::oFastReport:SetWorkArea(       "Proveedores", ::oDbfPrv:nArea )
   ::oFastReport:SetFieldAliases(   "Proveedores", cItemsToReport( aItmPrv() ) )

   ::oFastReport:SetWorkArea(       "Recibos de clientes", ::oFacCliP:nArea )
   ::oFastReport:SetFieldAliases(   "Recibos de clientes", cItemsToReport( aItmRecCli() ) )

   ::oFastReport:SetWorkArea(       "Recibos de proveedores", ::oFacPrvP:nArea )
   ::oFastReport:SetFieldAliases(   "Recibos de proveedores", cItemsToReport( aItmRecPrv() ) )

   ::oFastReport:SetMasterDetail(   "Informe", "Empresa",               {|| cCodEmp() } )
   ::oFastReport:SetMasterDetail(   "Informe", "Cuentas bancarias",     {|| ::oDbf:cCodCta } )
   ::oFastReport:SetMasterDetail(   "Informe", "Clientes",              {|| ::oDbf:cCodCli } )
   ::oFastReport:SetMasterDetail(   "Informe", "Proveedores",           {|| ::oDbf:cCodPrv } )
   ::oFastReport:SetMasterDetail(   "Informe", "Recibos de clientes",   {|| ::oDbf:cSerFac + Str( ::oDbf:nNumFac, 9 ) + ::oDbf:cSufFac } )
   ::oFastReport:SetMasterDetail(   "Informe", "Recibos de proveedores",{|| ::oDbf:cSerFac + Str( ::oDbf:nNumFac, 9 ) + ::oDbf:cSufFac } )

   ::oFastReport:SetResyncPair(     "Informe", "Empresa" )
   ::oFastReport:SetResyncPair(     "Informe", "Cuentas bancarias" )
   ::oFastReport:SetResyncPair(     "Informe", "Cliente" )
   ::oFastReport:SetResyncPair(     "Informe", "Proveedores" )
   ::oFastReport:SetResyncPair(     "Informe", "Recibos de clientes" )
   ::oFastReport:SetResyncPair(     "Informe", "Recibos de proveedores" )

   ::AddVariable()

Return ( Self )



UTILITY STATIC function TFastCuentasBancarias_TreeReportingChanged() ; local Self AS CLASS TFastCuentasBancarias := QSelf() AS CLASS TFastCuentasBancarias

   if ::oTreeReporting:GetSelText() == "Listado"
      ::lHideFecha()
   else
      ::lShowFecha()
   end

Return ( Self )



Function isBancos()

   local oError
   local oBlock

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   with object ( TBancos():Create() )

      :DefineFiles()

      if !lExistTable( :oDbf:cFile )
         :oDbf:Create()
         :oDbf:Activate( .F., .F. )
         :oDbf:IdxFCheck()
      endif

      :End()

   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible al comprobar bancos" )

   end

   ErrorBlock( oBlock )

return nil

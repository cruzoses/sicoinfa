#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tdiacli.prg"
FUNCTION TDiaCli()

   local oInf
   local aCol  := {}
   local aIdx  := {}

   aAdd( aCol, { "CCODCLI", "C", 12, 0, {|| "@!" },          "Cli",                        .F., "Código cliente"            ,  8, .F.} )
   aAdd( aCol, { "CNOMCLI", "C", 50, 0, {|| "@!" },          "Nombre",                     .F., "Cliente"                   , 25, .F.} )
   aAdd( aCol, { "CNIFCLI", "C", 15, 0, {|| "@!" },          "Nif",                        .F., "Nif"                       , 10, .F.} )
   aAdd( aCol, { "CDOCMOV", "C", 14, 0, {|| "@!" },          "Documento",                  .T., "Documento"                 , 14, .F.} )
   aAdd( aCol, { "CTIPDOC", "C", 14, 0, {|| "@!" },          "Tipo",                       .T., "Tipo"                      , 14, .F.} )
   aAdd( aCol, { "DFECMOV", "D",  8, 0, {|| "@!" },          "Fecha",                      .T., "Fecha"                     ,  8, .F.} )
   aAdd( aCol, { "CDOMCLI", "C", 35, 0, {|| "@!" },          "Domicilio",                  .F., "Domicilio"                 , 25, .F.} )
   aAdd( aCol, { "CPOBCLI", "C", 35, 0, {|| "@!" },          "Poblacion",                  .F., "Población"                 , 20, .F.} )
   aAdd( aCol, { "CPROCLI", "C", 20, 0, {|| "@!" },          "Prov",                       .F., "Provincia"                 , 20, .F.} )
   aAdd( aCol, { "CCDPCLI", "C",  7, 0, {|| "@!" },          "CP",                         .F., "Cod. Postal"               ,  7, .F.} )
   aAdd( aCol, { "CTLFCLI", "C", 12, 0, {|| "@!" },          "Tlf",                        .F., "Teléfono"                  , 12, .F.} )
   aAdd( aCol, { "CDEFI01", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(1) },    .F., {|| oInf:cNameIniCli(1) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI02", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(2) },    .F., {|| oInf:cNameIniCli(2) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI03", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(3) },    .F., {|| oInf:cNameIniCli(3) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI04", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(4) },    .F., {|| oInf:cNameIniCli(4) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI05", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(5) },    .F., {|| oInf:cNameIniCli(5) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI06", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(6) },    .F., {|| oInf:cNameIniCli(6) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI07", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(7) },    .F., {|| oInf:cNameIniCli(7) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI08", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(8) },    .F., {|| oInf:cNameIniCli(8) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI09", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(9) },    .F., {|| oInf:cNameIniCli(9) }   , 50, .F.} )
   aAdd( aCol, { "CDEFI10", "C",100, 0, {|| "@!" },          {|| oInf:cNameIniCli(10)},    .F., {|| oInf:cNameIniCli(10)}   , 50, .F.} )
   aAdd( aCol, { "NBASIMP", "N", 16, 6, {|| oInf:cPicOut },  "Base Imponible",             .T., "Base Imponible"            , 10, .T.} )
   aAdd( aCol, { "NTOTIVA", "N", 16, 6, {|| oInf:cPicOut },  "IVA.",                       .T., "Total " + cImp()           , 10, .T.} )
   aAdd( aCol, { "NRECEQU", "N", 16, 6, {|| oInf:cPicOut },  "Rec.",                       .T., "Recargo Equivalencia"      , 10, .T.} )
   aAdd( aCol, { "NPREDIV", "N", 16, 6, {|| oInf:cPicOut },  "Importe",                    .T., "Importe"                   , 10, .T.} )

   aAdd( aIdx, { "CCODCLI", "CCODCLI" } )

   oInf  := TInfDiaCli():New( "Informe detallado de todas las operaciones de venta realizadas por un cliente", aCol, aIdx, "01045" )

   oInf:AddGroup( {|| oInf:oDbf:cCodCli }, {|| "Cliente  : " + Rtrim( oInf:oDbf:cCodCli ) + "-" + oRetFld( oInf:oDbf:cCodCli, oInf:oDbfCli ) }, {||"Total cliente..."} )

   oInf:Resource()
   oInf:Activate()

   oInf:End()

RETURN NIL



_HB_CLASS TInfDiaCli ; UTILITY FUNCTION TInfDiaCli(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfDiaCli" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS LOGIC lResumen} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lResumen" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lExcCero} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lExcCero" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lPresu} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lPresu" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lPedid} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lPedid" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lAlbar} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lAlbar" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lFactu} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lFactu" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lTiket} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lTiket" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC nEstado} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 1, nScope + IIF( .F., 32, 0 ), { "nEstado" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oPreCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oPreCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oPreCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oPreCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oPedCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oPedCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oPedCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oPedCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikeT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikeT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikeL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikeL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oHisMov} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oHisMov" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oDbfIva} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfIva" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oDbfFPago} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbfFPago" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacCliP} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacCliP" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfDiaCli_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfDiaCli_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfDiaCli_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfDiaCli_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( cFld); IIF( .F., s_oClass:ModMethod( "Resource", @TInfDiaCli_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TInfDiaCli_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfDiaCli_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfDiaCli_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfDiaCli ;



UTILITY STATIC function TInfDiaCli_OpenFiles() ; local Self AS CLASS TInfDiaCli := QSelf() AS CLASS TInfDiaCli

  local oBlock
  local oError
  local lOpen := .T.





   oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   ::oPreCliT := DbfServer( "PRECLIT.DBF", ):NewOpen( "PRECLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliT:AddBag( "PRECLIT.CDX" ) ; ::oPreCliT:AddBag( ) ; ::oPreCliT:AutoIndex()

   ::oPreCliL := DbfServer( "PRECLIL.DBF", ):NewOpen( "PRECLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPreCliL:AddBag( "PRECLIL.CDX" ) ; ::oPreCliL:AddBag( ) ; ::oPreCliL:AutoIndex()

   ::oPedCliT := DbfServer( "PEDCLIT.DBF", ):NewOpen( "PEDCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliT:AddBag( "PEDCLIT.CDX" ) ; ::oPedCliT:AddBag( ) ; ::oPedCliT:AutoIndex()

   ::oPedCliL := DbfServer( "PEDCLIL.DBF", ):NewOpen( "PEDCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oPedCliL:AddBag( "PEDCLIL.CDX" ) ; ::oPedCliL:AddBag( ) ; ::oPedCliL:AutoIndex()

   ::oAlbCliT := DbfServer( "ALBCLIT.DBF", ):NewOpen( "ALBCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.CDX" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT := DbfServer( "FACCLIT.DBF", ):NewOpen( "FACCLIT.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliT:AddBag( "FACCLIT.CDX" ) ; ::oFacCliT:AddBag( ) ; ::oFacCliT:AutoIndex()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   ::oTiket := DbfServer( "TIKET.DBF", ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTiket:AddBag( "TIKET.CDX" ) ; ::oTiket:AddBag( ) ; ::oTiket:AutoIndex()

   ::oTikel := DbfServer( "TIKEL.DBF", ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikel:AddBag( "TIKEL.CDX" ) ; ::oTikel:AddBag( ) ; ::oTikel:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oHisMov := DbfServer( "HISMOV.DBF", ):NewOpen( "HISMOV.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHisMov:AddBag( "HISMOV.CDX" ) ; ::oHisMov:AddBag( ) ; ::oHisMov:AutoIndex()

   ::oDbfIva := DbfServer( "TIVA.DBF", ):NewOpen( "TIVA.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIVA.CDX" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

   ::oDbfFPago := DbfServer( "FPAGO.DBF", ):NewOpen( "FPAGO.DBF",, ( cDriver() ),, ( cPatGrp() ), .F., .T., .F., .F. ) ; ::oDbfFPago:AddBag( "FPAGO.CDX" ) ; ::oDbfFPago:AddBag( ) ; ::oDbfFPago:AutoIndex()

   ::oFacCliP := DbfServer( "FACCLIP.DBF", ):NewOpen( "FACCLIP.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliP:AddBag( "FACCLIP.CDX" ) ; ::oFacCliP:AddBag( ) ; ::oFacCliP:AutoIndex()

   RECOVER USING oError

      lOpen := .F.

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TInfDiaCli_CloseFiles() ; local Self AS CLASS TInfDiaCli := QSelf() AS CLASS TInfDiaCli

   if !Empty( ::oPreCliT ) .AND. ::oPreCliT:Used()
      ::oPreCliT:End()
   end

   if !Empty( ::oPreCliL ) .AND. ::oPreCliL:Used()
      ::oPreCliL:End()
   end

   if !Empty( ::oPedCliT ) .AND. ::oPedCliT:Used()
      ::oPedCliT:End()
   end

   if !Empty( ::oPedCliL ) .AND. ::oPedCliL:Used()
      ::oPedCliL:End()
   end

   if !Empty( ::oFacCliT ) .AND. ::oFacCliT:Used()
      ::oFacCliT:End()
   end

   if !Empty( ::oFacCliL ) .AND. ::oFacCliL:Used()
      ::oFacCliL:End()
   end

   if !Empty( ::oTiket ) .AND. ::oTiket:Used()
      ::oTiket:End()
   end

   if !Empty( ::oTikel ) .AND. ::oTikel:Used()
      ::oTikel:End()
   end

   if !Empty( ::oDbfPago ) .AND. ::oDbfPago:Used()
      ::oDbfPago:End()
   end

   if !Empty( ::oFacCliP ) .AND. ::oFacCliP:Used()
      ::oFacCliP:End()
   end

RETURN ( Self )



UTILITY STATIC function TInfDiaCli_Resource( cFld) ; local Self AS CLASS TInfDiaCli := QSelf() AS CLASS TInfDiaCli

   if !::StdResource( "INF_GEN13" )
      return .F.
   end

   ::oDefCliInf( 110, 120, 130, 140 )





   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   ::oDefExcInf( 204 )

   ::oDefResInf( 202 )



   TCheckBox():ReDefine( ( 205 ), { | u | If( PCount()==0, ::lPresu, ::lPresu:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 206 ), { | u | If( PCount()==0, ::lPedid, ::lPedid:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 207 ), { | u | If( PCount()==0, ::lAlbar, ::lAlbar:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )



   TCheckBox():ReDefine( ( 208 ), { | u | If( PCount()==0, ::lFactu, ::lFactu:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   RETURN ( Self )






UTILITY STATIC function TInfDiaCli_lGenerate() ; local Self AS CLASS TInfDiaCli := QSelf() AS CLASS TInfDiaCli

   local lExcCero := .F.
   local aTot

   ::oDlg:Disable()

   ::oDbf:Zap()




   ::aHeader   := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Periodo     : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Cliente     : " + ::cCliOrg         + " > " + ::cCliDes         }, {|| "Documentos  : " + if( ::lPresu, "Presupuestos, ", "" ) +  if( ::lPedid, "Pedidos, ", "" ) +  if( ::lAlbar, "Albaranes, ", "" ) + if( ::lFactu, "Facturas, ", "" ) } }





   lExcCero := .F.

   ::oPreCliT:GoTop()

   ::oMtrInf:SetTotal( ::oPreCliT:Lastrec() )

   WHILE ! ::oPreCliT:Eof() .AND. ::lPresu






      IF ::oPreCliT:DFECPRE >= ::dIniInf                                                 .AND. ::oPreCliT:DFECPRE <= ::dFinInf                                                 .AND. ::oPreCliT:CCODCLI >= ::cCliOrg                                                 .AND. ::oPreCliT:CCODCLI <= ::cCliDes                                                 .AND. !( ::lExcCero .AND. ::oPreCliL:nPreUnit == 0 )                                  .AND. lChkSer( ::oPreCliT:CSERPRE, ::aSer )

         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oPreCliT:CCODCLI
         ::oDbf:CNOMCLI := ::oPreCliT:CNOMCLI
         ::oDbf:DFECMOV := ::oPreCliT:DFECPRE

         IF ::oDbfCli:Seek ( ::oPreCliT:CCODCLI )

            ::oDbf:CNIFCLI := ::oDbfCli:Nif
            ::oDbf:CDOMCLI := ::oDbfCli:Domicilio
            ::oDbf:CPOBCLI := ::oDbfCli:Poblacion
            ::oDbf:CPROCLI := ::oDbfCli:Provincia
            ::oDbf:CCDPCLI := ::oDbfCli:CodPostal
            ::oDbf:CTLFCLI := ::oDbfCli:Telefono
            ::oDbf:CDEFI01 := ::oDbfCli:CusRDef01
            ::oDbf:CDEFI02 := ::oDbfCli:CusRDef02
            ::oDbf:CDEFI03 := ::oDbfCli:CusRDef03
            ::oDbf:CDEFI04 := ::oDbfCli:CusRDef04
            ::oDbf:CDEFI05 := ::oDbfCli:CusRDef05
            ::oDbf:CDEFI06 := ::oDbfCli:CusRDef06
            ::oDbf:CDEFI07 := ::oDbfCli:CusRDef07
            ::oDbf:CDEFI08 := ::oDbfCli:CusRDef08
            ::oDbf:CDEFI09 := ::oDbfCli:CusRDef09
            ::oDbf:CDEFI10 := ::oDbfCli:CusRDef10

         end

         aTot           := aTotPreCli( (::oPreCliT:CSERPRE + Str( ::oPreCliT:NNUMPRE ) + ::oPreCliT:CSUFPRE ), ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oDbfFPago:cAlias, cDivEmp() )
         ::oDbf:NBASIMP := aTot[ 1 ]
         ::oDbf:NTOTIVA := aTot[ 2 ]
         ::oDbf:NRECEQU := aTot[ 3 ]
         ::oDbf:NPREDIV := aTot[ 4 ]
         ::oDbf:CTIPDOC := "Presupuesto"
         ::oDbf:CDOCMOV := ::oPreCliT:CSERPRE + "/" + Str( ::oPreCliT:NNUMPRE ) + "/" + ::oPreCliT:CSUFPRE

         ::oDbf:Save()

         end

      ::oPreCliT:Skip()

      ::oMtrInf:AutoInc()

      end





   lExcCero := .F.

   ::oPedCliT:GoTop()

   ::oMtrInf:SetTotal( ::oPedCliT:Lastrec() )

   WHILE ! ::oPedCliT:Eof() .AND. ::lPedid






      IF ::oPedCliT:DFECPED >= ::dIniInf                                                 .AND. ::oPedCliT:DFECPED <= ::dFinInf                                                 .AND. ::oPedCliT:CCODCLI >= ::cCliOrg                                                 .AND. ::oPedCliT:CCODCLI <= ::cCliDes                                                 .AND. !( ::lExcCero .AND. ::oPedCliL:nPreUnit == 0 )                                  .AND. lChkSer( ::oPedCliT:CSERPED, ::aSer )

         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oPedCliT:CCODCLI
         ::oDbf:CNOMCLI := ::oPedCliT:CNOMCLI
         ::oDbf:DFECMOV := ::oPedCliT:DFECPED

         IF ::oDbfCli:Seek ( ::oPedCliT:CCODCLI )

            ::oDbf:CNIFCLI := ::oDbfCli:Nif
            ::oDbf:CDOMCLI := ::oDbfCli:Domicilio
            ::oDbf:CPOBCLI := ::oDbfCli:Poblacion
            ::oDbf:CPROCLI := ::oDbfCli:Provincia
            ::oDbf:CCDPCLI := ::oDbfCli:CodPostal
            ::oDbf:CTLFCLI := ::oDbfCli:Telefono
            ::oDbf:CDEFI01 := ::oDbfCli:CusRDef01
            ::oDbf:CDEFI02 := ::oDbfCli:CusRDef02
            ::oDbf:CDEFI03 := ::oDbfCli:CusRDef03
            ::oDbf:CDEFI04 := ::oDbfCli:CusRDef04
            ::oDbf:CDEFI05 := ::oDbfCli:CusRDef05
            ::oDbf:CDEFI06 := ::oDbfCli:CusRDef06
            ::oDbf:CDEFI07 := ::oDbfCli:CusRDef07
            ::oDbf:CDEFI08 := ::oDbfCli:CusRDef08
            ::oDbf:CDEFI09 := ::oDbfCli:CusRDef09
            ::oDbf:CDEFI10 := ::oDbfCli:CusRDef10

          end

         aTot           := aTotPedCli( (::oPedCliT:CSERPED + Str( ::oPedCliT:NNUMPED ) + ::oPedCliT:CSUFPED ), ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oDbfFPago:cAlias, nil, ::cDivInf  )
         ::oDbf:NBASIMP := aTot [ 1 ] - aTot [ 5 ] - aTot [ 6 ]
         ::oDbf:NTOTIVA := aTot [ 2 ]
         ::oDbf:NRECEQU := aTot [ 3 ]
         ::oDbf:NPREDIV := aTot [ 4 ]
         ::oDbf:CTIPDOC := "Pedidos"
         ::oDbf:CDOCMOV := ::oPedCliT:CSERPED + "/" + Str( ::oPedCliT:NNUMPED ) + "/" + ::oPedCliT:CSUFPED

         ::oDbf:Save()

      end

      ::oPedCliT:Skip()

      ::oMtrInf:AutoInc()

      end





   lExcCero := .F.

   ::oAlbCliT:GoTop()

   ::oMtrInf:SetTotal( ::oAlbCliT:Lastrec() )

   WHILE ! ::oAlbCliT:Eof() .AND. ::lAlbar






      IF ::oAlbCliT:DFECALB >= ::dIniInf                                                 .AND. ::oAlbCliT:DFECALB <= ::dFinInf                                                 .AND. ::oAlbCliT:CCODCLI >= ::cCliOrg                                                 .AND. ::oAlbCliT:CCODCLI <= ::cCliDes                                                 .AND. !( ::lExcCero .AND. ::oAlbCliL:nPreUnit == 0 )                                  .AND. lChkSer( ::oAlbCliT:CSERALB, ::aSer )

         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oAlbCliT:CCODCLI
         ::oDbf:CNOMCLI := ::oAlbCliT:CNOMCLI
         ::oDbf:DFECMOV := ::oAlbCliT:DFECALB

         IF ::oDbfCli:Seek ( ::oAlbCliT:CCODCLI )

            ::oDbf:CNIFCLI := ::oDbfCli:Nif
            ::oDbf:CDOMCLI := ::oDbfCli:Domicilio
            ::oDbf:CPOBCLI := ::oDbfCli:Poblacion
            ::oDbf:CPROCLI := ::oDbfCli:Provincia
            ::oDbf:CCDPCLI := ::oDbfCli:CodPostal
            ::oDbf:CTLFCLI := ::oDbfCli:Telefono
            ::oDbf:CDEFI01 := ::oDbfCli:CusRDef01
            ::oDbf:CDEFI02 := ::oDbfCli:CusRDef02
            ::oDbf:CDEFI03 := ::oDbfCli:CusRDef03
            ::oDbf:CDEFI04 := ::oDbfCli:CusRDef04
            ::oDbf:CDEFI05 := ::oDbfCli:CusRDef05
            ::oDbf:CDEFI06 := ::oDbfCli:CusRDef06
            ::oDbf:CDEFI07 := ::oDbfCli:CusRDef07
            ::oDbf:CDEFI08 := ::oDbfCli:CusRDef08
            ::oDbf:CDEFI09 := ::oDbfCli:CusRDef09
            ::oDbf:CDEFI10 := ::oDbfCli:CusRDef10

         end

         aTot           := aTotAlbCli( ::oAlbCliT:CSERALB + Str( ::oAlbCliT:NNUMALB ) + ::oAlbCliT:CSUFALB, ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::cDivInf  )

         ::oDbf:NBASIMP := aTot[ 1 ] - aTot[ 5 ] - aTot[ 6 ]
         ::oDbf:NTOTIVA := aTot[ 2 ]
         ::oDbf:NRECEQU := aTot[ 3 ]
         ::oDbf:NPREDIV := aTot[ 4 ]
         ::oDbf:CTIPDOC := "Albaran"
         ::oDbf:CDOCMOV := ::oAlbCliT:CSERALB + "/" + Str( ::oAlbCliT:NNUMALB ) + "/" + ::oAlbCliT:CSUFALB

         ::oDbf:Save()

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end





   lExcCero := .F.

   ::oFacCliT:GoTop()

   ::oMtrInf:SetTotal( ::oFacCliT:Lastrec() )

   WHILE ! ::oFacCliT:Eof() .AND. ::lFactu






      IF ::oFacCliT:DFECFAC >= ::dIniInf                                                 .AND. ::oFacCliT:DFECFAC <= ::dFinInf                                                 .AND. ::oFacCliT:CCODCLI >= ::cCliOrg                                                 .AND. ::oFacCliT:CCODCLI <= ::cCliDes                                                 .AND. !( ::lExcCero .AND. ::oFacCliL:nPreUnit == 0 )                                  .AND. lChkSer( ::oFacCliT:CSERIE, ::aSer )

         ::oDbf:Append()

         ::oDbf:CCODCLI := ::oFacCliT:CCODCLI
         ::oDbf:CNOMCLI := ::oFacCliT:CNOMCLI
         ::oDbf:DFECMOV := ::oFacCliT:DFECFAC

         IF ::oDbfCli:Seek ( ::oFacCliT:CCODCLI )

            ::oDbf:CNIFCLI := ::oDbfCli:Nif
            ::oDbf:CDOMCLI := ::oDbfCli:Domicilio
            ::oDbf:CPOBCLI := ::oDbfCli:Poblacion
            ::oDbf:CPROCLI := ::oDbfCli:Provincia
            ::oDbf:CCDPCLI := ::oDbfCli:CodPostal
            ::oDbf:CTLFCLI := ::oDbfCli:Telefono
            ::oDbf:CDEFI01 := ::oDbfCli:CusRDef01
            ::oDbf:CDEFI02 := ::oDbfCli:CusRDef02
            ::oDbf:CDEFI03 := ::oDbfCli:CusRDef03
            ::oDbf:CDEFI04 := ::oDbfCli:CusRDef04
            ::oDbf:CDEFI05 := ::oDbfCli:CusRDef05
            ::oDbf:CDEFI06 := ::oDbfCli:CusRDef06
            ::oDbf:CDEFI07 := ::oDbfCli:CusRDef07
            ::oDbf:CDEFI08 := ::oDbfCli:CusRDef08
            ::oDbf:CDEFI09 := ::oDbfCli:CusRDef09
            ::oDbf:CDEFI10 := ::oDbfCli:CusRDef10

          end

         aTot           := aTotFacCli( (::oFacCliT:CSERIE + Str( ::oFacCliT:NNUMFAC ) + ::oFacCliT:CSUFFAC ), ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::oDbfIva:cAlias, ::oDbfDiv:cAlias, ::oFacCliP:cAlias, cDivEmp() )
         ::oDbf:NBASIMP := aTot [ 1 ] - aTot[5] - aTot[6]
         ::oDbf:NTOTIVA := aTot [ 2 ]
         ::oDbf:NRECEQU := aTot [ 3 ]
         ::oDbf:NPREDIV := aTot [ 4 ]
         ::oDbf:CTIPDOC := "Factura"
         ::oDbf:CDOCMOV := ::oFacCliT:CSERIE + "/" + Str( ::oFacCliT:NNUMFAC ) + "/" + ::oFacCliT:CSUFFAC

         ::oDbf:Save()

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end













































































































   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

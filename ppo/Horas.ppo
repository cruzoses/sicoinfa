#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Horas.prg"
_HB_CLASS THoras ; UTILITY FUNCTION THoras(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "THoras" , {TMANT():classh} ) ) ; ;

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Worker2_Clock_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )
   _HB_MEMBER { cBitmap} ; IIF( !.F., s_oClass:AddMultiData(, ( 250 + ( 161 * 256 ) + ( 52 * 65536 ) ), nScope + IIF( .F., 32, 0 ), { "cBitmap" }, .F., .F. ), )

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @THoras_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @THoras_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @THoras_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @THoras_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @THoras_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @THoras_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @THoras_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @THoras_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @THoras_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @THoras_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPresave( nMode); IIF( .F., s_oClass:ModMethod( "lPresave", @THoras_lPresave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPresave", @THoras_lPresave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS THoras ;



UTILITY STATIC function THoras_OpenFiles(lExclusive) ; local Self AS CLASS THoras := QSelf() AS CLASS THoras

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function THoras_CloseFiles() ; local Self AS CLASS THoras := QSelf() AS CLASS THoras

   if !Empty( ::oDbf )
      ::oDbf:end()
   end

   ::oDbf         := nil

RETURN .T.



UTILITY STATIC function THoras_DefineFiles( cPath, cDriver) ; local Self AS CLASS THoras := QSelf() AS CLASS THoras

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "Horas.Dbf", "Horas" ):New( "Horas.Dbf", "Horas", ( cDriver ), "Tipos de horas", ( cPath ) )

      ::oDbf:AddField( "cCodHra", "C", 3, 0,,,,, "Código", .F., 100, .F., {} )
      ::oDbf:AddField( "cDesHra", "C", 35, 0,,,,, "Nombre", .F., 400, .F., {} )

      ::oDbf:AddIndex( "cCodHra", "Horas.Cdx", "cCodHra",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cDesHra", "Horas.Cdx", "cDesHra",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function THoras_Resource( nMode) ; local Self AS CLASS THoras := QSelf() AS CLASS THoras

    local oDlg
   local oGet

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tipo de hora", "Horas",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cCodHra, ::oDbf:cCodHra:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias, .T., "0" )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cDesHra, ::oDbf:cDesHra:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 559, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:bStart := { || oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function THoras_lPresave( nMode) ; local Self AS CLASS THoras := QSelf() AS CLASS THoras

   if nMode == 1 .OR. nMode == 4

      if ::oDbf:SeekInOrd( ::oDbf:cCodHra, "CCODHRA",  )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodHra ) )
         return .F.
      end

   end

   if Empty( ::oDbf:cDesHra )
      MsgStop( "La descripción del tipo de hora no puede estar vacía." )
      Return .F.
   end

Return .T.

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 17 ".\Prg\Ttvitem.prg"
_HB_CLASS TTVItem ; UTILITY FUNCTION TTVItem(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TTVItem" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { hItem} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hItem" }, .F., .F. ), )
   _HB_MEMBER { oTree} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTree" }, .F., .F. ), )
   _HB_MEMBER { aItems} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aItems" }, .F., .F. ), )
   _HB_MEMBER { cPrompt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrompt" }, .F., .F. ), )
   _HB_MEMBER { nImage} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nImage" }, .F., .F. ), )
   _HB_MEMBER { bAction} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAction" }, .F., .F. ), )
   _HB_MEMBER { Cargo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "Cargo" }, .F., .F. ), )

   _HB_MEMBER New( hItem, oTree, bAction) AS CLASS TTVItem; IIF( .F., s_oClass:ModMethod( "New", @TTVItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TTVItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Add( cPrompt, nImage, bAction); IIF( .F., s_oClass:ModMethod( "Add", @TTVItem_Add(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Add", @TTVItem_Add(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DeleteBranches(); IIF( .F., s_oClass:ModMethod( "DeleteBranches", @TTVItem_DeleteBranches(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DeleteBranches", @TTVItem_DeleteBranches(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


   _HB_MEMBER Expand(); IIF( .F., s_oClass:ModInline( "Expand", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 2, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Expand", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 2, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


   _HB_MEMBER Colapse(); IIF( .F., s_oClass:ModInline( "Colapse", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 1, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Colapse", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 1, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


   _HB_MEMBER Toggle(); IIF( .F., s_oClass:ModInline( "Toggle", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 3, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Toggle", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 2, 3, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )


   _HB_MEMBER MakeVisible(); IIF( .F., s_oClass:ModInline( "MakeVisible", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 20, 0, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "MakeVisible", {|Self | Self, SendMessage( ::oTree:hWnd, 4352 + 20, 0, ::hItem ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetCheck(lOnOff); IIF( .F., s_oClass:ModInline( "SetCheck", {|Self,lOnOff | Self, ::oTree:SetCheck( Self, lOnOff ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetCheck", {|Self,lOnOff | Self, ::oTree:SetCheck( Self, lOnOff ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TTVItem ;



UTILITY STATIC function TTVItem_New( hItem, oTree, bAction, cPrompt, nImage) ; local Self AS CLASS TTVItem := QSelf() AS CLASS TTVItem

   ::aItems  = {}
   ::hItem   = hItem
   ::oTree   = oTree
   ::bAction = bAction
   ::cPrompt = cPrompt
   ::nImage  = nImage

return Self



UTILITY STATIC function TTVItem_Add( cPrompt, nImage, bAction) ; local Self AS CLASS TTVItem := QSelf() AS CLASS TTVItem


   local oItem := TTVItem():New( TVInsertItem( ::oTree:hWnd, cPrompt, ::hItem, nImage ), ::oTree, bAction, cPrompt, nImage )

   AAdd( ::aItems, oItem )

return oItem



UTILITY STATIC function TTVItem_DeleteBranches() ; local Self AS CLASS TTVItem := QSelf() AS CLASS TTVItem

   Aeval(::aItems, {|o| TVDeleteItem(::oTree:hWnd, o:hItem) } )

   ::aItems  = {}

return nil

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\ListUsr.prg"
_HB_CLASS ListUsr ; UTILITY FUNCTION ListUsr(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "ListUsr" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @ListUsr_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @ListUsr_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @ListUsr_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @ListUsr_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @ListUsr_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @ListUsr_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS ListUsr ;



UTILITY STATIC function ListUsr_Create() ; local Self AS CLASS ListUsr := QSelf() AS CLASS ListUsr

   ::AddField( "cCodUse",   "C",  3, 0, {|| "" },     "Cod.",              .T., "Código de usuario",              10, .F. )
   ::AddField( "cNbrUse",   "C", 30, 0, {|| "" },     "Usuario",           .T., "Nombre de usuario",              40, .F. )
   ::AddField( "cEmpUse",   "C",  2, 0, {|| "" },     "Empresa",           .F., "Empresa por defecto",             5, .F. )
   ::AddField( "cCajUse",   "C",  3, 0, {|| "" },     "Caja",              .F., "Caja por defecto",                5, .F. )
   ::AddField( "cAlmUse",   "C",  3, 0, {|| "" },     "Almacén",           .F., "Almacén por defecto",             5, .F. )
   ::AddField( "cFpgUse",   "C",  3, 0, {|| "" },     "F. Pago",           .F., "Forma de pago por defecto",       5, .F. )

   ::AddTmpIndex ( "cCodUse", "cCodUse" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function ListUsr_lResource( cFld) ; local Self AS CLASS ListUsr := QSelf() AS CLASS ListUsr

   if !::StdResource( "INF_USR01" )
      return .F.
   end

   ::oDefUsrInf( 70, 80, 90, 100, 60 )

   ::oMtrInf:SetTotal( ::oDbfUsr:Lastrec() )

   ::CreateFilter( aItmUsr(), ::oDbfUsr:cAlias )

RETURN .T.






UTILITY STATIC function ListUsr_lGenerate() ; local Self AS CLASS ListUsr := QSelf() AS CLASS ListUsr

   local cExpHead := ""

   ::oDlg:Disable()
   ::oBtnCancel:Enable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha    : " + Dtoc( Date() ) }, {|| "Usuarios : " + if( ::lAllUsr, "Todos", AllTrim( ::cUsrOrg ) + " > " + AllTrim( ::cUsrDes ) ) } }

   ::oDbfUsr:OrdSetFocus( "CCODUSE" )

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       := ::oFilter:cExpFilter
   else
      cExpHead       := ".t."
   end

   ::oDbfUsr:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oDbfUsr:cFile ), ::oDbfUsr:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   ::oDbfUsr:GoTop()

   while !::oDbfUsr:Eof()

      if ( ::lAllUsr .OR. ( ::oDbfUsr:cCodUse >= ::cUsrOrg .AND. ::oDbfUsr:cCodUse <= ::cUsrDes ) )

         ::oDbf:Append()

         ::oDbf:cCodUse  := ::oDbfUsr:cCodUse
         ::oDbf:cNbrUse  := ::oDbfUsr:cNbrUse
         ::oDbf:cEmpUse  := ::oDbfUsr:cEmpUse
         ::oDbf:cCajUse  := ::oDbfUsr:cCajUse
         ::oDbf:cAlmUse  := ::oDbfUsr:cAlmUse
         ::oDbf:cFpgUse  := ::oDbfUsr:cFpgUse

         ::oDbf:Save()

      end

      ::oDbfUsr:Skip()

      ::oMtrInf:AutoInc( ::oDbfUsr:OrdKeyNo() )

   end

   ::oDbfUsr:IdxDelete( cCurUsr(), GetFileNoExt( ::oDbfUsr:cFile ) )

   ::oMtrInf:AutoInc( ::oDbfUsr:LastRec() )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 3 ".\Prg\Webmap.prg"
_HB_CLASS WebMap ; UTILITY FUNCTION WebMap(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "WebMap" , { HBObject():Classh } ) ) ;
   _HB_MEMBER { aAddress} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aAddress" }, .F., .F. ) , )
   _HB_MEMBER { nZoomLevel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nZoomLevel" }, .F., .F. ) , )
   _HB_MEMBER { cMapType} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cMapType" }, .F., .F. ) , )
   _HB_MEMBER { oIe} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oIe" }, .F., .F. ) , )
   _HB_MEMBER { cLink} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cLink" }, .F., .F. ) , )
   _HB_MEMBER { cWhatsNear} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cWhatsNear" }, .F., .F. ) , )
   _HB_MEMBER New(); IIF( .F., s_oClass:ModMethod( "New", @WebMap_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @WebMap_New(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER ShowMap(); IIF( .F., s_oClass:ModMethod( "ShowMap", @WebMap_ShowMap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ShowMap", @WebMap_ShowMap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER ShowMapInWin(); IIF( .F., s_oClass:ModMethod( "ShowMapInWin", @WebMap_ShowMapInWin(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ShowMapInWin", @WebMap_ShowMapInWin(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddStop(); IIF( .F., s_oClass:ModMethod( "AddStop", @WebMap_AddStop(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddStop", @WebMap_AddStop(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddStopSep(); IIF( .F., s_oClass:ModMethod( "AddStopSep", @WebMap_AddStopSep(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddStopSep", @WebMap_AddStopSep(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER GenLink(); IIF( .F., s_oClass:ModMethod( "GenLink", @WebMap_GenLink(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GenLink", @WebMap_GenLink(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS WebMap ;

UTILITY STATIC function WebMap_New( xAddress, nZoomLevel) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   if nZoomLevel == nil

      ::nZoomLevel := 0
   else
      ::nZoomLevel := nZoomLevel
   endif
   ::cLink := ""
   ::cWhatsNear := ""

   do case
      case xAddress == nil
         ::aAddress := {}
      case valtype( xAddress ) == "A"
         ::aAddress := xAddress
      otherwise
         ::aAddress := { xAddress }
   endcase
RETURN( self )






UTILITY STATIC function WebMap_ShowMap() ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   ::GenLink()

   if ! empty( ::cLink )
      ShellExecute( 0, "open", ::cLink,,, 5 )
      sysrefresh()
   endif

RETURN nil







UTILITY STATIC function WebMap_ShowMapInWin() ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   local oWnd, oActiveX, oBar
   local cEvents := ""

   ::GenLink()

   if ! empty( ::cLink )


      oWnd := TWindow():New( 0, 0, 600, 800, "Google Map Demo in Fivewin window",,,,,,,,,,,, !.F., !.F., !.F., !.F., .T. )

      ::oIe          := TActiveX():New( oWnd, "Shell.Explorer" )

      oWnd:oClient   := ::oIe


      ::oIe:SetProp( "Visible", .T. )
      ::oIe:SetProp( "Toolbar", .T. )
      ::oIe:SetProp( "Statusbar", .T. )
      ::oIe:SetProp( "MenuBar", .T. )
      ::oIe:Do( "Navigate", ::cLink )
      sysrefresh()

      oWnd:Activate(, oWnd:bLClicked, oWnd:bRClicked, oWnd:bMoved, oWnd:bResized, oWnd:bPainted, oWnd:bKeyDown, oWnd:bInit,,,,,,,,,,, oWnd:bLButtonUp )

      sysrefresh()

   endif

RETURN nil







UTILITY STATIC function WebMap_AddStop( cAddress) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   if cAddress <> nil

      aadd( ::aAddress, strtran( trim( cAddress )," ", "+" ) )
   endif
RETURN nil












UTILITY STATIC function WebMap_AddStopSep( cStreet, cCity, cState, cZip, cCountry) ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap
   local cAddr2




   IIF( cStreet == nil, cStreet := "", ) ; IIF( cCity == nil, cCity := "", ); IIF( cState == nil, cState := "", ); IIF( cZip == nil, cZip := "", ); IIF( cCountry == nil, cCountry := "", );

   cAddr2 := ltrim( trim( cCity )+" " )
   cAddr2 += ltrim( trim( cState )+" " )
   cAddr2 += ltrim( trim( cZip )+" " )
   cAddr2 += ltrim( trim( cCountry ) )
   if at( ",", cAddr2 ) > 0

      cAddr2 := strtran( cAddr2,",", " " )

      cAddr2 := strtran( cAddr2,"  ", " " )
   endif
   do case
      case ! empty( cStreet ) .AND. ! empty( cAddr2 )
         ::AddStop( trim( cStreet)+", "+cAddr2 )
      case empty( cStreet ) .AND. ! empty( cAddr2 )
         ::AddStop( cAddr2 )
      case ! empty( cStreet ) .AND. empty( cAddr2 )
         ::AddStop( trim( cStreet) )
   endcase
RETURN nil







UTILITY STATIC function WebMap_GenLink() ; local Self AS CLASS WebMap := QSelf() AS CLASS WebMap

   local nCounter, nFor
   local cLink

   cLink := "http://maps.google.com/maps?"

   do case
      case len( ::aAddress ) = 0

         ::cMapType := "MAP"
      case len( ::aAddress ) > 1

         ::cMapType := "ROUTE"
      otherwise
         ::cMapType := "MAP"
   endcase

   for nFor := 1 to len( ::aAddress )
      do case
         case nFor = 1
            if ::cMapType = "ROUTE"
               cLink += "saddr="+::aAddress[ nFor ]
            else


               if empty( ::cWhatsNear )
                  cLink += "q="+::aAddress[ nFor ]
               else
                  cLink += "q="+::cWhatsNear
                  cLink += chr(38)+"near="+::aAddress[ nFor ]
               endif
            endif
         case nFor = 2
            cLink += chr(38)+"daddr="+::aAddress[ nFor ]
         otherwise
            cLink += ",+to:"+::aAddress[ nFor ]
      endcase

   next

   if ! empty( cLink )
      if ::nZoomLevel > 0
         cLink += chr(38)+"z="+ltrim( str( ::nZoomLevel ) )
      endif
   endif

   ::cLink := cLink

RETURN( ::cLink )

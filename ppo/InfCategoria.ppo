#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\InfCategoria.prg"
_HB_CLASS TListadoCategorias ; UTILITY FUNCTION TListadoCategorias(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TListadoCategorias" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER { dbfCategoria} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dbfCategoria" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TListadoCategorias_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TListadoCategorias_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TListadoCategorias_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TListadoCategorias_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TListadoCategorias_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TListadoCategorias_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TListadoCategorias ;



UTILITY STATIC function TListadoCategorias_Create( dbf) ; local Self AS CLASS TListadoCategorias := QSelf() AS CLASS TListadoCategorias

   ::AddField( "cCodigo",    "C",   3, 0, {|| "" },    "Código",   .T., "Código de categoría",   10, .F. )
   ::AddField( "cNombre",    "C",  50, 0, {|| "" },    "Nombre",   .T., "Nombre de categoría",   40, .F. )
   ::AddField( "cTipo",      "C",  30, 0, {|| "" },    "Tipo",     .T., "Tipo de categoría",     30, .F. )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

   ::dbfCategoria := dbf

RETURN ( Self )



UTILITY STATIC function TListadoCategorias_lResource( cFld) ; local Self AS CLASS TListadoCategorias := QSelf() AS CLASS TListadoCategorias

   if !::StdResource( "INF_CATEGORIA" )
      return .F.
   end

   ::oBtnFilter:Disable()

   ::lIntCatInf( 110, 120, 130, 140, 150, ::dbfCategoria )

   ::oMtrInf:SetTotal( ( ::dbfCategoria )->( Lastrec() ) )

RETURN ( .T. )



UTILITY STATIC function TListadoCategorias_lGenerate() ; local Self AS CLASS TListadoCategorias := QSelf() AS CLASS TListadoCategorias

   ::oDlg:Disable()
   ::oBtnCancel:Enable()

   ::oDbf:Zap()


   ::aHeader         := {  {|| "Fecha      : " + Dtoc( Date() ) }, {|| "Categorías : " + if( ::lAllCat, "Todos", AllTrim( ::cCatOrg ) + " > " + AllTrim( ::cCatDes ) ) } }

   ( ::dbfCategoria )->( OrdSetFocus( "Codigo" ) )

   ::oMtrInf:SetTotal( ( ::dbfCategoria )->( OrdKeyCount() ) )

   ( ::dbfCategoria )->( dbGoTop() )

   while !::lBreak .AND. !( ::dbfCategoria )->( Eof() )

      if ::lAllCat .OR. ( ( ::dbfCategoria )->cCodigo >= Rtrim( ::cCatOrg ) .AND. ( ::dbfCategoria )->cCodigo <= Rtrim( ::cCatDes ) )

         ::oDbf:Append()

         ::oDbf:cCodigo := ( ::dbfCategoria )->cCodigo
         ::oDbf:cNombre := ( ::dbfCategoria )->cNombre
         ::oDbf:cTipo   := ( ::dbfCategoria )->cTipo

         ::oDbf:Save()

      end

      ( ::dbfCategoria )->( dbSkip() )

      ::oMtrInf:AutoInc( ( ::dbfCategoria )->( OrdKeyNo() ) )

   end

   ::oMtrInf:AutoInc( ( ::dbfCategoria )->( LastRec() ) )

   ::oDlg:Enable()

   ::oBtnFilter:Disable()

RETURN ( ::oDbf:LastRec() > 0 )

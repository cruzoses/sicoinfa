#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 14 ".\Prg\Image.prg"
static hLib



_HB_CLASS TImage ; UTILITY FUNCTION TImage(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TImage" , {TBitmap():classh} ) ) ; ;

   _HB_MEMBER { nProgress} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nProgress" }, .F., .F. ), )
   _HB_MEMBER { nFormat} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nFormat" }, .F., .F. ), )

   _HB_MEMBER {AS CHARACTER cResFile} ; IIF( !.F., s_oClass:AddMultiClsData("CHARACTER", "freeimage.dll", nScope + IIF( .F., 32, 0 ) + 64, { "cResFile" }, .F. ), )
   _HB_MEMBER {AS LOGICAL lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData("LOGICAL",, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )



   _HB_MEMBER New( nTop, nLeft, nWidth, nHeight, cResName, cBmpFile, lNoBorder, oWnd, bLClicked, bRClicked, lScroll, lStretch, oCursor, cMsg, lUpdate, bWhen, lPixel, bValid, lDesign) AS CLASS TImage; IIF( .F., s_oClass:ModMethod( "New", @TImage_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TImage_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Define( cResName, cBmpFile, oWnd) AS CLASS TImage; IIF( .F., s_oClass:ModMethod( "Define", @TImage_Define(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Define", @TImage_Define(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LoadImage( cResName, cBmpFile); IIF( .F., s_oClass:ModMethod( "LoadImage", @TImage_LoadImage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LoadImage", @TImage_LoadImage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SaveImage( cFile, nFormat, nQuality); IIF( .F., s_oClass:ModMethod( "SaveImage", @TImage_SaveImage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SaveImage", @TImage_SaveImage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Progress( lProgress); IIF( .F., s_oClass:ModMethod( "Progress", @TImage_Progress(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Progress", @TImage_Progress(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LoadFromMemory( cBuffer, nWidth, nHeight); IIF( .F., s_oClass:ModMethod( "LoadFromMemory", @TImage_LoadFromMemory(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LoadFromMemory", @TImage_LoadFromMemory(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TImage ;





UTILITY STATIC function TImage_New( nTop, nLeft, nWidth, nHeight, cResName, cBmpFile, lNoBorder, oWnd, bLClicked, bRClicked, lScroll, lStretch, oCursor, cMsg, lUpdate, bWhen, lPixel, bValid, lDesign) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage





   ::nProgress = 1



   ::TBitmap:New( nTop, nLeft, nWidth, nHeight, cResName, cBmpFile, lNoBorder,  oWnd, bLClicked, bRClicked, lScroll, lStretch, oCursor,       cMsg, lUpdate, bWhen, lPixel, bValid, lDesign )
return Self




UTILITY STATIC function TImage_Define( cResName, cBmpFile, oWnd) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage

   local aBmpPal

   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ;

   ::oWnd     = oWnd
   ::nZoom    = 1
   ::hWnd     = 0
   ::hBitmap  = 0
   ::hPalette = 0

   ::hAlphaLevel = 255

   if ! Empty( cResName )
      aBmpPal    = PalBmpLoad( cResName )
      ::hBitmap  = aBmpPal[ 1 ]
      ::hPalette = aBmpPal[ 2 ]
      cBmpFile  = nil
   endif

   if ! Empty( cBmpFile ) .AND. File( cBmpFile )
      ::cBmpFile = cBmpFile
      ::hBitmap = FILoadImg( AllTrim( cBmpFile ), , ::cResFile )
   endif

   if ::hBitmap <> 0
      PalBmpNew( 0, ::hBitmap, ::hPalette )
   endif

   ::HasAlpha()

return Self



UTILITY STATIC function TImage_LoadImage( cResName, cBmpFile, cResFile) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage

   local lChanged := .F.
   local hOldBmp  := ::hBitmap
   local hOldPal  := ::hPalette
   local aBmpPal

   IIF( cResName == nil, cResName := ::cResName, ) ; IIF( cBmpFile == nil, cBmpFile := ::cBmpFile, );
   IIF( cResFile == nil, cResFile := ::cResFile, ) ;

   if ! Empty( cResName )
      aBmpPal    = PalBmpLoad( cResName )
      ::hBitmap  = aBmpPal[ 1 ]
      ::hPalette = aBmpPal[ 2 ]
      lChanged   = .T.
      cBmpFile   = nil
   elseif File( cBmpFile )
      ::hBitmap = FILoadImg( AllTrim( cBmpFile ), , cResFile )
      lChanged  := .T.
      cResName  := nil
   endif

   if lChanged

      ::cResName = cResName
      ::cBmpFile = cBmpFile

      if ! Empty( hOldBmp )
         PalBmpFree( hOldBmp, hOldPal )
      endif

      PalBmpNew( ::hWnd, ::hBitmap, ::hPalette )

   endif

   ::HasAlpha()

return lChanged



UTILITY STATIC function TImage_SaveImage( cFile, nFormat, nQuality) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage





   local hDib := DibFromBitmap( ::hBitmap )
   local cTempFile := cTempFile()
   local lSaved

   DibWrite( cTempFile, hDib )
   GloBalFree( hDib )
   lSaved = FIConvertImageFile( cTempFile, cFile, nFormat, nQuality )
   FErase( cTempFile )
return lSaved



UTILITY STATIC function TImage_Progress( lProgress) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage

   if ValType( lProgress ) == "L"
      if lProgress
         ::nProgress = 1
      else
         ::nProgress = 0
      endif
   endif

return nil



UTILITY STATIC function TImage_LoadFromMemory( cBuffer, nWidth, nHeight) ; local Self AS CLASS TImage := QSelf() AS CLASS TImage

   local hOldBmp := ::hBitmap
   local hOldPal := ::hPalette
   local nFormat
   local hResizedBitmap

   if ! Empty( hOldBmp )
      PalBmpFree( hOldBmp, hOldPal )
   endif

   ::hBitmap = FILoadFromMemory( cBuffer, @nFormat )

   IF valtype( nWidth ) == "N" .AND. valtype( nHeight ) == "N"
      IF nBmpWidth( ::hBitmap )>nWidth .OR. nBmpHeight( ::hBitmap )>nHeight
         hResizedBitmap := ResizeBmp( ::hBitmap, nWidth, nHeight )
         ::hBitmap      := hResizedBitmap
      endif
   elseif valtype( nWidth ) == "N"
      IF nBmpWidth( ::hBitmap ) > nWidth
         hResizedBitmap := ResizeBmp( ::hBitmap, nWidth, nBmpHeight( ::hBitmap ) / ( nBmpWidth( ::hBitmap ) /nWidth ) )
         ::hBitmap      := hResizedBitmap
      endif
   elseif valtype( nHeight )=="N"
      if nBmpHeight( ::hBitmap ) > nHeight
         hResizedBitmap := ResizeBmp( ::hBitmap, nBmpWidth( ::hBitmap ) / (nBmpHeight( ::hBitmap ) / nHeight ), nHeight )
         ::hBitmap      := hResizedBitmap
      endif
   endif

   PalBmpNew( ::hWnd, ::hBitmap, ::hPalette )
   ::nFormat   := nFormat
   ::HasAlpha()

return nil










function FILOADIMG( cFile, nFormat, cResFile )

   local hDib, hInfoH, hInfo, hBits, hWnd, hDC, hBmp

   if Upper( cFileExt( cFile ) ) = "BMP"
      return ReadBitmap( 0, cFile )
   endif

   if LoadFreeImage( cResFile ) > 32

      nFormat = FIGETFILETYPE( cFile, 0 )
      hDib    = FILOAD( nFormat, cFile, 0 )
      hInfoH  = FIGETINFOHEADER( hDib )
      hInfo   = FIGETINFO( hDib )
      hBits   = FIGETBITS( hDib )
      hWnd    = GETDESKTOPWINDOW()




        hDC = GETDC( hWnd )


      hBmp = CreateDiBitmap( hDC, hInfoH, 4, hBits, hInfo, 0 )

      ReleaseDC( hWnd, hDC )
      FIUNLOAD( hDib )

   endif

return hBmp



function FILoadFromMemory( cBuffer, nFormat )

   local hMem, nSize := Len( cBuffer ), hBmp := 0
   local hDib, hInfoH, hInfo, hBits, hWnd, hDC


   if LoadFreeImage() > 32

      hMem    = FI_OpenMemory( cBuffer, nSize )
      nFormat = FI_GetFileTypeFromMemory( hMem, 0 )
      hDib    = FI_LoadFromMemory( nFormat, hMem, 0 )
      hInfoH  = FIGETINFOHEADER( hDib )
      hInfo   = FIGETINFO( hDib )
      hBits   = FIGETBITS( hDib )
      hWnd    = GETDESKTOPWINDOW()




         hDC = GETDC( hWnd )


      hBmp = CreateDiBitmap( hDC, hInfoH, 4, hBits, hInfo, 0 )




         ReleaseDC( hWnd, hDC )


      FI_CloseMemory( hMem )

   endif


return hBmp



function FITypeFromMemory( cBuffer )

   local hMem, nFormat := -1
   local nSize    := Len( cBuffer )

   if LoadFreeImage() > 32

      hMem    = FI_OpenMemory( cBuffer, nSize )
      nFormat = FI_GetFileTypeFromMemory( hMem, 0 )
      FI_CloseMemory( hMem )

   endif

return nFormat



function FIConvertImageFile( cSrcFile, cDstFile, nDstFormat, nQuality )

   local nSrcFormat, hDib, hDib2, lOk := .F.

   IIF( nQuality == nil, nQuality := 0, ) ;

   if LoadFreeImage() > 32

      nSrcFormat = FIGETFILETYPE( cSrcFile, 0 )

      hDib = FILOAD( nSrcFormat, cSrcFile, 0 )
      hDib2 = FICNV24( hDib )
      lOk = FISAVE( nDstFormat, hDib2, cDstFile, nQuality )

      FIUNLOAD( hDib )
      FIUNLOAD( hDib2 )

   endif

return lOk



function LoadFreeImage( cResFile )

   IIF( cResFile == nil, cResFile := "freeimage.dll", ) ;

   if Empty( hLib )



         hLib = LoadLibrary( cResFile )


      if hLib <= 32
         MsgAlert( "Cannot load FreeImage.dll" )
         hLib  = 0
      endif

   endif

return hLib



function UnloadFreeImage()

   if hLib <> nil .AND. hLib > 32




         FreeLibrary( hLib )


      hLib  = nil

   endif

return nil



EXIT PROCEDURE ExitImage

   UnloadFreeImage()

return





function FISAVE( nFormat,hDib,cFileName,nFlags ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_Save@16" ) == .T., "FISAVE", "_FreeImage_Save@16" ), .T., 5,7,7,9,7 ) ; uResult = FWCallDLL( cFarProc,nFormat,hDib,cFileName,nFlags ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIGETWIDTH( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetWidth@4" ) == .T., "FIGETWIDTH", "_FreeImage_GetWidth@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FICONVTO32( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_ConvertTo32Bits@4" ) == .T., "FICONVTO32", "_FreeImage_ConvertTo32Bits@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FISETTRANSPARENT( hDib,lOnOff ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_SetTransparent@8" ) == .T., "FISETTRANSPARENT", "_FreeImage_SetTransparent@8" ), .T., 0,7,5 ) ; uResult = FWCallDLL( cFarProc,hDib,lOnOff ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIISTRANSPARENT( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_IsTransparent@4" ) == .T., "FIISTRANSPARENT", "_FreeImage_IsTransparent@4" ), .T., 5,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FICNV24( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_ConvertTo24Bits@4" ) == .T., "FICNV24", "_FreeImage_ConvertTo24Bits@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function GETDC32( hWnd ) ; local _hDLL := If( ValType( "user32.dll" ) == "N", "user32.dll", LoadLibrary( "user32.dll" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "GetDC" ) == .T., "GETDC32", "GetDC" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hWnd ) ; IIF( ValType( "user32.dll" ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( "user32.dll" ) == "C", "user32.dll", Str( "user32.dll" ) ) ) ; end ; return uResult


function RELEASEDC32( hWnd ) ; local _hDLL := If( ValType( "user32.dll" ) == "N", "user32.dll", LoadLibrary( "user32.dll" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "ReleaseDC" ) == .T., "RELEASEDC32", "ReleaseDC" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hWnd ) ; IIF( ValType( "user32.dll" ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( "user32.dll" ) == "C", "user32.dll", Str( "user32.dll" ) ) ) ; end ; return uResult



function WOWHANDLE16( nHandle,nHandleType ) ; local _hDLL := If( ValType( "wow32.dll" ) == "N", "wow32.dll", LoadLibrary( "wow32.dll" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "WOWHandle16" ) == .T., "WOWHANDLE16", "WOWHandle16" ), .T., 7,7,7 ) ; uResult = FWCallDLL( cFarProc,nHandle,nHandleType ) ; IIF( ValType( "wow32.dll" ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( "wow32.dll" ) == "C", "wow32.dll", Str( "wow32.dll" ) ) ) ; end ; return uResult


function FIGETFILETYPE( cFileName,nSize ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetFileType@8" ) == .T., "FIGETFILETYPE", "_FreeImage_GetFileType@8" ), .T., 7,9,7 ) ; uResult = FWCallDLL( cFarProc,cFileName,nSize ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FILOAD( nFormat,cFileName,nFlags ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_Load@12" ) == .T., "FILOAD", "_FreeImage_Load@12" ), .T., 7,7,9,7 ) ; uResult = FWCallDLL( cFarProc,nFormat,cFileName,nFlags ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIGETINFOHEADER( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetInfoHeader@4" ) == .T., "FIGETINFOHEADER", "_FreeImage_GetInfoHeader@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIGETINFO( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetInfo@4" ) == .T., "FIGETINFO", "_FreeImage_GetInfo@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIGETBITS( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetBits@4" ) == .T., "FIGETBITS", "_FreeImage_GetBits@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FIUNLOAD( hDib ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_Unload@4" ) == .T., "FIUNLOAD", "_FreeImage_Unload@4" ), .T., 0,7 ) ; uResult = FWCallDLL( cFarProc,hDib ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult



function FI_OpenMemory( cData,nSize ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_OpenMemory@8" ) == .T., "FI_OpenMemory", "_FreeImage_OpenMemory@8" ), .T., 7,9,7 ) ; uResult = FWCallDLL( cFarProc,cData,nSize ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FI_LoadFromMemory( nFormat,nStream,nFlags ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_LoadFromMemory@12" ) == .T., "FI_LoadFromMemory", "_FreeImage_LoadFromMemory@12" ), .T., 7,7,7,7 ) ; uResult = FWCallDLL( cFarProc,nFormat,nStream,nFlags ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult



function FI_CloseMemory( nStream ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_CloseMemory@4" ) == .T., "FI_CloseMemory", "_FreeImage_CloseMemory@4" ), .T., 7,7 ) ; uResult = FWCallDLL( cFarProc,nStream ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FI_GetFileTypeFromMemory( nStream,nSize ) ; local _hDLL := If( ValType( hLib ) == "N", hLib, LoadLibrary( "hLib" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_GetFileTypeFromMemory@8" ) == .T., "FI_GetFileTypeFromMemory", "_FreeImage_GetFileTypeFromMemory@8" ), .T., 7,7,7 ) ; uResult = FWCallDLL( cFarProc,nStream,nSize ) ; IIF( ValType( hLib ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( hLib ) == "C", hLib, Str( hLib ) ) ) ; end ; return uResult


function FI_SaveToMemory( nFormat,hDib,cStream,nFlags ) ; local _hDLL := If( ValType( "freeImage.dll" ) == "N", "freeImage.dll", LoadLibrary( "freeImage.dll" ) ) ; local uResult ; local cFarProc ; if Abs( _hDLL ) > 32 ; cFarProc = GetProcAdd( _hDLL, If( Empty( "_FreeImage_SaveToMemory@12" ) == .T., "FI_SaveToMemory", "_FreeImage_SaveToMemory@12" ), .T., 7,7,7,9,7 ) ; uResult = FWCallDLL( cFarProc,nFormat,hDib,cStream,nFlags ) ; IIF( ValType( "freeImage.dll" ) == "N",, FreeLibrary( _hDLL ) ) ; else ; MsgAlert( "Error code: " + LTrim( Str( _hDLL ) ) + " loading " + If( ValType( "freeImage.dll" ) == "C", "freeImage.dll", Str( "freeImage.dll" ) ) ) ; end ; return uResult

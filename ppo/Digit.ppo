#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 16 ".\Prg\Digit.prg"
FUNCTION CalcDigit( cCtaBanco, oCtaBanco )

   local cDc      := Space( 2 )
   local cEntidad := Substr( cCtaBanco, 1, 4 )
    local cSucursal:= Substr( cCtaBanco, 5, 4 )
    local cDigito    := Substr( cCtaBanco, 9, 2 )
    local cCuenta    := SubStr( cCtaBanco, 11   )

   if !Empty( cEntidad ) .AND. !Empty( cSucursal )

      cDc            := cDgtControl( cEntidad, cSucursal, cDigito, cCuenta )

      if oCtaBanco <> nil
         oCtaBanco:cText( cEntidad + cSucursal + cDc + cCuenta )
      end

   end

RETURN ( .T. )



FUNCTION lCalcDC( cEntidad, cSucursal, cDigito, cCuenta, oDigito )

   local cDC   := ""

   if !Empty( cEntidad ) .AND. !Empty( cSucursal )

      cDC   := cDgtControl( cEntidad, cSucursal, cDigito, cCuenta )

      if oDigito <> nil
         oDigito:cText( cDc )
      end

   end

RETURN ( .T. )









FUNCTION cDgtControl( cEntidad, cSucursal, cDigito, cCuenta )

    local i
    local cDc
    local cC1
    local cC2
    local cD1
    local cD2
    local nPesos    :={ 6, 3, 7, 9, 10, 5, 8, 4, 2, 1 }
   local nD1      := 0
    local nD2        := 0

   if Empty( cCuenta )
      Return ( cDigito )
   end

   cCuenta        := RJust( RTrim( cCuenta ), "0", 10 )

   cC1            := cEntidad + cSucursal
   cC2            := cCuenta

    for i    :=1 to len( cC1 )
      nD1         := nD1 + ( val( subStr( cC1, len( cC1 ) - i + 1, 1 ) ) * nPesos[ i ] )
    next

   nD1            := mod( nD1, 11 )
   nD1            := 11 - nD1





   if nD1 == 10
      nD1         := 1
    endif

   if nD1 == 11
      nD1         := 0
    endif

   cD1            := Trans( nD1, "#" )





    for i :=    1 to len( cC2 )
      nD2         := nD2+ ( val( substr( cC2, len( cC2 ) - i + 1, 1 ) ) * nPesos[ i ] )
    next

   nD2 := mod( nD2, 11 )
   nD2            := 11 -  nD2





   if nD2 == 10
      nD2         := 1
    endif

   if nD2 == 11
      nD2         := 0
    endif

   cD2            := Trans( nD2, "#" )
   cDc            := cD1 + cD2

RETURN ( cDc )

































FUNCTION RetNum( nNum, nUnd, nDec )

   local cChr
   local cLst

   IIF( nUnd == nil, nUnd := len( nNum ), ) ;
   IIF( nDec == nil, nDec := 2, ) ;

   nNum           := nNum * val( "1" + replicate( "0", nDec ) )

   cChr           := Str( Int( nNum ), nUnd )
   cChr           := StrTran( cChr, " ", "0" )





   IF nNum < 0

      cLst        := SubStr( cChr, -1 )

      DO CASE
         CASE cLst == "0"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "}"
         CASE cLst == "1"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "J"
         CASE cLst == "2"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "K"
         CASE cLst == "3"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "L"
         CASE cLst == "4"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "M"
         CASE cLst == "5"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "N"
         CASE cLst == "6"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "O"
         CASE cLst == "7"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "P"
         CASE cLst == "8"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "Q"
         CASE cLst == "9"
            cChr := SubStr( cChr, 1, len( cChr ) - 1 ) + "R"
      end

   end

RETURN ( cChr )



static function nValDec( num )

   local cDec  := Str( ( num - int( num ) ) * 1000000 )

   while len( cDec ) > 0 .AND. ( SubStr( cDec, -1 ) == "0" .OR. SubStr( cDec, -1 ) == "." )
      cDec := SubStr( cDec, 1, len( cDec ) - 1 )
   end

return ( Val( cDec ) )



FUNCTION Calculadora( nNumber, oGet, lBig )

   local oDialogo
   local cNumber
   local oNumber
   local nValue      := 0
   local cOperacion  := ""

   IIF( nNumber == nil, nNumber := oGet:VarGet(), ) ;
   IIF( lBig == nil, lBig := .T., ) ;

   cNumber           := Ltrim( Str( nNumber, 20 ) )

   if lBig
      oDialogo = TDialog():New(,,,,, "Calculadora",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDialogo = TDialog():New(,,,,, "CalculadoraLittle",, .F.,,,,,, .F.,,,,,, .F., )
   end

      oNumber := TGet():ReDefine( 100, { | u | If( PCount()==0, cNumber, cNumber:= u ) }, oDialogo,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cNumber", )

      TButton():ReDefine( 101, {||KeyCal("C", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 102, {||KeyCal("<", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 103, {||KeyCal("S", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 104, {||KeyCal("/", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 108, {||KeyCal("*", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 112, {||KeyCal("-", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 116, {||KeyCal("+", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 119, {||KeyCal("=", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 118, {||KeyCal(".", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 117, {||KeyCal("0", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 113, {||KeyCal("1", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 114, {||KeyCal("2", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 115, {||KeyCal("3", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 109, {||KeyCal("4", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 110, {||KeyCal("5", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 111, {||KeyCal("6", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 105, {||KeyCal("7", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 106, {||KeyCal("8", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( 107, {||KeyCal("9", @cNumber, oNumber, @cOperacion, @nValue )}, oDialogo,,, .F.,,,, .F. )

      TButton():ReDefine( ( 1 ), {||( oDialogo:End( 1 ) )}, oDialogo,,, .F.,,,, .F. )
      TButton():ReDefine( ( 2), {||( oDialogo:End() )}, oDialogo,,, .F.,,,, .F. )

      oDialogo:bKeydown   := { | nKey | KeyCal( nKey, @cNumber, oNumber, @cOperacion, @nValue ) }

   oDialogo:Activate( oDialogo:bLClicked, oDialogo:bMoved, oDialogo:bPainted, .T.,,, {|Self|oNumber:SelectAll()}, oDialogo:bRClicked,,, )

   if oDialogo:nResult == 1
      if !Empty( oGet )
         oGet:cText( Val( cNumber ) )
      end
   end

RETURN ( Val( cNumber ) )



FUNCTION KeyCal( cKey, cNumber, oNumber, cOperacion, nValue )

   IF VALTYPE(cKey) = "N"
      IF cKey =  96
         cKey = "0"
      ELSEIF cKey =  97
         cKey = "1"
      ELSEIF cKey =  98
         cKey = "2"
      ELSEIF cKey =  99
         cKey = "3"
      ELSEIF cKey = 100
         cKey = "4"
      ELSEIF cKey = 101
         cKey = "5"
      ELSEIF cKey = 102
         cKey = "6"
      ELSEIF cKey = 103
         cKey = "7"
      ELSEIF cKey = 104
         cKey = "8"
      ELSEIF cKey = 105
         cKey = "9"
      ELSEIF cKey = 106 .OR. cKey = 186
         cKey = "*"
      ELSEIF cKey = 107 .OR. cKey = 187
         cKey = "+"
      ELSEIF cKey = 109 .OR. cKey = 189
         cKey = "-"
      ELSEIF cKey = 110 .OR. cKey = 190
         cKey = "."
      ELSEIF cKey = 111 .OR. cKey = 191
         cKey = "/"
      ELSEIF cKey = 226
         cKey = "<"
      ELSE
         cKey = UPPER(CHR(cKey))
      ENDIF
   ENDIF

   DO CASE
      CASE AT(cKey,"+-*/=") > 0
           IF nValue <> 0
              IF VAL(cNumber) = 0 .AND. cOperacion = "/"
                 MsgStop(OemToAnsi("Divisi¢n por cero ..."))
                 cNumber = "0"
              ELSE
                 cNumber = LTRIM(STR(&(STR(nValue)+cOperacion+cNumber)))
              ENDIF
              nValue = 0
           ENDIF
           DO CASE
              CASE cKey = "+"
                 cOperacion = "+"
              CASE cKey = "-"
                 cOperacion = "-"
              CASE cKey = "*"
                 cOperacion = "*"
              CASE cKey = "/"
                 cOperacion = "/"
              CASE cKey = "="
                 cOperacion = "="
                 nValue = 0
           ENDCASE
           oNumber:Refresh()
           RETURN nil
      CASE cKey = "C"
           cNumber = "0"
           nValue  = 0
           cOperacion = "="
      CASE cKey = "<"
           cNumber = LEFT(cNumber,LEN(cNumber)-IF(RIGHT(cNumber,1)=".",2,1))
           IF EMPTY(cNumber)
              cNumber = "0"
           ENDIF
      CASE cKey = "S"
           IF AT("-",cNumber) > 0
              cNumber = STRTRAN(cNumber,"-","")
           ELSE
              cNumber = "-" + cNumber
           ENDIF
      CASE AT(cKey,"-01234567890.") > 0
           IF cOperacion <> "=" .AND. nValue = 0 .AND. !EMPTY(cOperacion)
              nValue = VAL(cNumber)
              cNumber = "0"
           ELSEIF cOperacion == "="
              nValue = 0
              cNumber = "0"
              cOperacion = ""
           ENDIF
           IF LEFT(cNumber,1) = "0"
              cNumber = SUBS(cNumber,2)
           ENDIF
           IF !( cKey = "." .AND. AT(".",cNumber) > 0 )
              cNumber += cKey
           ENDIF
      OTHERWISE


   ENDCASE

   oNumber:Refresh()

RETURN nil



Function MsgDebug( cText, cTitle )

Return ( MsgAlert( cText, cTitle ) )



_HB_CLASS TVirtualMoney ; UTILITY FUNCTION TVirtualMoney(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TVirtualMoney" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oGetActive} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetActive" }, .F., .F. ), )
   _HB_MEMBER { oGet500Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet500Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet200Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet200Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet100Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet100Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet50Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet50Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet20Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet20Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet10Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet10Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet5Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet5Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet2Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet2Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet1Euro} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet1Euro" }, .F., .F. ), )
   _HB_MEMBER { oGet050Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet050Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet020Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet020Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet010Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet010Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet005Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet005Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet002Euros} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet002Euros" }, .F., .F. ), )
   _HB_MEMBER { oGet001Euro} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGet001Euro" }, .F., .F. ), )

   _HB_MEMBER { nGet500Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet500Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet200Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet200Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet100Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet100Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet50Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet50Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet20Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet20Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet10Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet10Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet5Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet5Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet2Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet2Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet1Euro} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet1Euro" }, .F., .F. ), )
   _HB_MEMBER { nGet050Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet050Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet020Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet020Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet010Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet010Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet005Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet005Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet002Euros} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet002Euros" }, .F., .F. ), )
   _HB_MEMBER { nGet001Euro} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nGet001Euro" }, .F., .F. ), )

   _HB_MEMBER { oSayTotal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayTotal" }, .F., .F. ), )
   _HB_MEMBER { nSayTotal} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSayTotal" }, .F., .F. ), )

   _HB_MEMBER { cStream} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cStream" }, .F., .F. ), )

   _HB_MEMBER New(); IIF( .F., s_oClass:ModInline( "New", {|Self | Self, ( Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "New", {|Self | Self, ( Self ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER Dialog(); IIF( .F., s_oClass:ModMethod( "Dialog", @TVirtualMoney_Dialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Dialog", @TVirtualMoney_Dialog(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ClickMoneda(oGet); IIF( .F., s_oClass:ModInline( "ClickMoneda", {|Self,oGet | Self, ( ::PutFocus( oGet ), oGet:cText( oGet:VarGet() + 1 ), ::Total() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "ClickMoneda", {|Self,oGet | Self, ( ::PutFocus( oGet ), oGet:cText( oGet:VarGet() + 1 ), ::Total() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER PressKey( cNumero); IIF( .F., s_oClass:ModMethod( "PressKey", @TVirtualMoney_PressKey(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "PressKey", @TVirtualMoney_PressKey(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER PutFocus(oGet); IIF( .F., s_oClass:ModInline( "PutFocus", {|Self,oGet | Self, ( ::oGetActive := oGet ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "PutFocus", {|Self,oGet | Self, ( ::oGetActive := oGet ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetStream(); IIF( .F., s_oClass:ModMethod( "GetStream", @TVirtualMoney_GetStream(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetStream", @TVirtualMoney_GetStream(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER SetStream( cStream); IIF( .F., s_oClass:ModMethod( "SetStream", @TVirtualMoney_SetStream(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetStream", @TVirtualMoney_SetStream(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Total(); IIF( .F., s_oClass:ModMethod( "Total", @TVirtualMoney_Total(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Total", @TVirtualMoney_Total(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Clean(); IIF( .F., s_oClass:ModMethod( "Clean", @TVirtualMoney_Clean(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Clean", @TVirtualMoney_Clean(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TVirtualMoney ;



UTILITY STATIC function TVirtualMoney_Dialog( oGet) ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   local oDlg
   local oFnt        := TFont():New( "Arial", 12, 32, .F., .T. )
   local cResource   := "CashBig"

   if GetSysMetrics( 1 ) == 560

      oDlg = TDialog():New(,,,,, "CashBig_1024x576",, .F.,,,,,, .F.,,,,,, .F., )

   else

      oDlg = TDialog():New(,,,,, cResource,, .F.,,,,,, .F.,,,,,, .F., )

   end









      TButtonBmp():ReDefine( 800, {||( ::ClickMoneda( ::oGet500Euros ) )}, oDlg,,, .F.,,,, .F., "Img500Euros",, )






      ::oGet500Euros := TGet():ReDefine( 100, { | u | If( PCount()==0, ::nGet500Euros, ::nGet500Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet500Euros", )

      ::oGet500Euros:bValid      := {|| ::PutFocus( ::oGet500Euros ), ::Total() }
      ::oGet500Euros:bLostFocus  := {|| ::PutFocus( ::oGet500Euros ) }





      TButtonBmp():ReDefine( 801, {||( ::ClickMoneda( ::oGet200Euros ) )}, oDlg,,, .F.,,,, .F., "Img200Euros",, )






      ::oGet200Euros := TGet():ReDefine( 101, { | u | If( PCount()==0, ::nGet200Euros, ::nGet200Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet200Euros", )

      ::oGet200Euros:bValid      := {|| ::PutFocus( ::oGet200Euros ), ::Total() }
      ::oGet200Euros:bLostFocus  := {|| ::PutFocus( ::oGet200Euros ) }





      TButtonBmp():ReDefine( 802, {||( ::ClickMoneda( ::oGet100Euros ) )}, oDlg,,, .F.,,,, .F., "Img100Euros",, )






      ::oGet100Euros := TGet():ReDefine( 102, { | u | If( PCount()==0, ::nGet100Euros, ::nGet100Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet100Euros", )

      ::oGet100Euros:bValid      := {|| ::PutFocus( ::oGet100Euros ), ::Total() }
      ::oGet100Euros:bLostFocus  := {|| ::PutFocus( ::oGet100Euros ) }





      TButtonBmp():ReDefine( 803, {||( ::ClickMoneda( ::oGet50Euros ) )}, oDlg,,, .F.,,,, .F., "Img50Euros",, )






      ::oGet50Euros := TGet():ReDefine( 103, { | u | If( PCount()==0, ::nGet50Euros, ::nGet50Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet50Euros", )

      ::oGet50Euros:bValid       := {|| ::PutFocus( ::oGet50Euros ), ::Total() }
      ::oGet50Euros:bLostFocus   := {|| ::PutFocus( ::oGet50Euros ) }





      TButtonBmp():ReDefine( 804, {||( ::ClickMoneda( ::oGet20Euros ) )}, oDlg,,, .F.,,,, .F., "Img20Euros",, )






      ::oGet20Euros := TGet():ReDefine( 104, { | u | If( PCount()==0, ::nGet20Euros, ::nGet20Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet20Euros", )

      ::oGet20Euros:bValid       := {|| ::PutFocus( ::oGet20Euros ), ::Total() }
      ::oGet20Euros:bLostFocus   := {|| ::PutFocus( ::oGet20Euros ) }





      TButtonBmp():ReDefine( 805, {||( ::ClickMoneda( ::oGet10Euros ) )}, oDlg,,, .F.,,,, .F., "Img10Euros",, )






      ::oGet10Euros := TGet():ReDefine( 105, { | u | If( PCount()==0, ::nGet10Euros, ::nGet10Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet10Euros", )

      ::oGet10Euros:bValid       := {|| ::PutFocus( ::oGet10Euros ), ::Total() }
      ::oGet10Euros:bLostFocus   := {|| ::PutFocus( ::oGet10Euros ) }





      TButtonBmp():ReDefine( 806, {||( ::ClickMoneda( ::oGet5Euros ) )}, oDlg,,, .F.,,,, .F., "Img5Euros",, )






      ::oGet5Euros := TGet():ReDefine( 106, { | u | If( PCount()==0, ::nGet5Euros, ::nGet5Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet5Euros", )

      ::oGet5Euros:bValid        := {|| ::PutFocus( ::oGet5Euros ), ::Total() }
      ::oGet5Euros:bLostFocus    := {|| ::PutFocus( ::oGet5Euros ) }





      TButtonBmp():ReDefine( 807, {||( ::ClickMoneda( ::oGet2Euros ) )}, oDlg,,, .F.,,,, .F., "Img2Euros",, )






      ::oGet2Euros := TGet():ReDefine( 107, { | u | If( PCount()==0, ::nGet2Euros, ::nGet2Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet2Euros", )

      ::oGet2Euros:bValid        := {|| ::PutFocus( ::oGet2Euros ), ::Total() }
      ::oGet2Euros:bLostFocus    := {|| ::PutFocus( ::oGet2Euros ) }





      TButtonBmp():ReDefine( 808, {||( ::ClickMoneda( ::oGet1Euro ) )}, oDlg,,, .F.,,,, .F., "Img1Euro",, )






      ::oGet1Euro := TGet():ReDefine( 108, { | u | If( PCount()==0, ::nGet1Euro, ::nGet1Euro:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet1Euro", )

      ::oGet1Euro:bValid         := {|| ::PutFocus( ::oGet1Euro ), ::Total() }
      ::oGet1Euro:bLostFocus     := {|| ::PutFocus( ::oGet1Euro ) }





      TButtonBmp():ReDefine( 809, {||( ::ClickMoneda( ::oGet050Euros ) )}, oDlg,,, .F.,,,, .F., "Img50Cent",, )






      ::oGet050Euros := TGet():ReDefine( 109, { | u | If( PCount()==0, ::nGet050Euros, ::nGet050Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet050Euros", )

      ::oGet050Euros:bValid      := {|| ::PutFocus( ::oGet050Euros ), ::Total() }
      ::oGet050Euros:bLostFocus  := {|| ::PutFocus( ::oGet050Euros ) }





      TButtonBmp():ReDefine( 810, {||( ::ClickMoneda( ::oGet020Euros ) )}, oDlg,,, .F.,,,, .F., "Img20Cent",, )






      ::oGet020Euros := TGet():ReDefine( 110, { | u | If( PCount()==0, ::nGet020Euros, ::nGet020Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet020Euros", )

      ::oGet020Euros:bValid      := {|| ::PutFocus( ::oGet020Euros ), ::Total() }
      ::oGet020Euros:bLostFocus  := {|| ::PutFocus( ::oGet020Euros ) }





      TButtonBmp():ReDefine( 811, {||( ::ClickMoneda( ::oGet010Euros ) )}, oDlg,,, .F.,,,, .F., "Img10Cent",, )






      ::oGet010Euros := TGet():ReDefine( 111, { | u | If( PCount()==0, ::nGet010Euros, ::nGet010Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet010Euros", )

      ::oGet010Euros:bValid      := {|| ::PutFocus( ::oGet010Euros ), ::Total() }
      ::oGet010Euros:bLostFocus  := {|| ::PutFocus( ::oGet010Euros )  }





      TButtonBmp():ReDefine( 812, {||( ::ClickMoneda( ::oGet005Euros ) )}, oDlg,,, .F.,,,, .F., "Img5Cent",, )






      ::oGet005Euros := TGet():ReDefine( 112, { | u | If( PCount()==0, ::nGet005Euros, ::nGet005Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet005Euros", )

      ::oGet005Euros:bValid      := {|| ::PutFocus( ::oGet005Euros ), ::Total() }
      ::oGet005Euros:bLostFocus  := {|| ::PutFocus( ::oGet005Euros ) }





      TButtonBmp():ReDefine( 813, {||( ::ClickMoneda( ::oGet002Euros ) )}, oDlg,,, .F.,,,, .F., "Img2Cent",, )






      ::oGet002Euros := TGet():ReDefine( 113, { | u | If( PCount()==0, ::nGet002Euros, ::nGet002Euros:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet002Euros", )

      ::oGet002Euros:bValid      := {|| ::PutFocus( ::oGet002Euros ), ::Total() }
      ::oGet002Euros:bLostFocus  := {|| ::PutFocus( ::oGet002Euros ) }





      TButtonBmp():ReDefine( 814, {||( ::ClickMoneda( ::oGet001Euro ) )}, oDlg,,, .F.,,,, .F., "Img1Cent",, )






      ::oGet001Euro := TGet():ReDefine( 114, { | u | If( PCount()==0, ::nGet001Euro, ::nGet001Euro:= u ) }, oDlg,, "999",,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "::nGet001Euro", )

      ::oGet001Euro:bValid       := {|| ::PutFocus( ::oGet001Euro ), ::Total() }
      ::oGet001Euro:bLostFocus   := {|| ::PutFocus( ::oGet001Euro ) }





      TButtonBmp():ReDefine( 815, {||( ::Clean() )}, oDlg,,, .F.,,,, .F., "Img0Euros",, )










      ::oSayTotal := TSay():ReDefine( 300, {||      ::nSayTotal}, oDlg, "@E 999,999.99",,, .F., oFnt, .F., .F. )









      TButton():ReDefine( 202, {||( ::oGetActive:cText( 0 ), ::Total() )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 200, {||( ::PressKey( "0" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 203, {||( ::PressKey( "1" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 204, {||( ::PressKey( "2" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 205, {||( ::PressKey( "3" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 206, {||( ::PressKey( "4" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 207, {||( ::PressKey( "5" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 208, {||( ::PressKey( "6" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 209, {||( ::PressKey( "7" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 210, {||( ::PressKey( "8" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 211, {||( ::PressKey( "9" ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 1, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oFnt:End()

   if oDlg:nResult == 1

      if !Empty( oGet )
         oGet:cText( ::nSayTotal )
      end

   end

Return ( Self )



UTILITY STATIC function TVirtualMoney_Total() ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   ::nSayTotal    := ::nGet500Euros * 500
   ::nSayTotal    += ::nGet200Euros * 200
   ::nSayTotal    += ::nGet100Euros * 100
   ::nSayTotal    += ::nGet50Euros  * 50
   ::nSayTotal    += ::nGet20Euros  * 20
   ::nSayTotal    += ::nGet10Euros  * 10
   ::nSayTotal    += ::nGet5Euros   * 5
   ::nSayTotal    += ::nGet2Euros   * 2
   ::nSayTotal    += ::nGet1Euro
   ::nSayTotal    += ::nGet050Euros * 0.5
   ::nSayTotal    += ::nGet020Euros * 0.2
   ::nSayTotal    += ::nGet010Euros * 0.1
   ::nSayTotal    += ::nGet005Euros * 0.05
   ::nSayTotal    += ::nGet002Euros * 0.02
   ::nSayTotal    += ::nGet001Euro  * 0.01

   if !Empty( ::oSayTotal )
      ::oSayTotal:Refresh()
   end

Return ( .T. )



UTILITY STATIC function TVirtualMoney_Clean() ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   ::oGet500Euros:cText( 0 )
   ::oGet200Euros:cText( 0 )
   ::oGet100Euros:cText( 0 )
   ::oGet50Euros:cText( 0 )
   ::oGet20Euros:cText( 0 )
   ::oGet10Euros:cText( 0 )
   ::oGet5Euros:cText( 0 )
   ::oGet2Euros:cText( 0 )
   ::oGet1Euro:cText( 0 )
   ::oGet050Euros:cText( 0 )
   ::oGet020Euros:cText( 0 )
   ::oGet010Euros:cText( 0 )
   ::oGet005Euros:cText( 0 )
   ::oGet002Euros:cText( 0 )
   ::oGet001Euro:cText( 0 )

   ::Total()

Return ( .T. )



UTILITY STATIC function TVirtualMoney_PressKey( cKey) ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   local cNumber

   if !Empty( ::oGetActive )

      cNumber        := Str( ::oGetActive:VarGet() )

      if at( cKey, "01234567890." ) > 0

         if Left( cNumber, 1 ) = "0"
            cNumber  := Substr( cNumber, 2 )
         end

         if !( cKey == "." .AND. at(".",cNumber) > 0 )
            cNumber  += cKey
         endif

      end

      ::oGetActive:cText( Val( cNumber ) )

      ::Total()

   end

Return ( .T. )



UTILITY STATIC function TVirtualMoney_GetStream() ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   ::cStream   := StrZero( ::nGet500Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet200Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet100Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet50Euros , 3 ) + ";"
   ::cStream   += StrZero( ::nGet20Euros , 3 ) + ";"
   ::cStream   += StrZero( ::nGet10Euros , 3 ) + ";"
   ::cStream   += StrZero( ::nGet5Euros  , 3 ) + ";"
   ::cStream   += StrZero( ::nGet2Euros  , 3 ) + ";"
   ::cStream   += StrZero( ::nGet1Euro   , 3 ) + ";"
   ::cStream   += StrZero( ::nGet050Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet020Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet010Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet005Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet002Euros, 3 ) + ";"
   ::cStream   += StrZero( ::nGet001Euro , 3 ) + ";"

Return ( ::cStream )



UTILITY STATIC function TVirtualMoney_SetStream( cStream) ; local Self AS CLASS TVirtualMoney := QSelf() AS CLASS TVirtualMoney

   local aStream  := hb_aTokens( cStream, ";" )

   if len( aStream ) >= 15

      ::nGet500Euros    := Val( aStream[ 1 ] )
      ::nGet200Euros    := Val( aStream[ 2 ] )
      ::nGet100Euros    := Val( aStream[ 3 ] )
      ::nGet50Euros     := Val( aStream[ 4 ] )
      ::nGet20Euros     := Val( aStream[ 5 ] )
      ::nGet10Euros     := Val( aStream[ 6 ] )
      ::nGet5Euros      := Val( aStream[ 7 ] )
      ::nGet2Euros      := Val( aStream[ 8 ] )
      ::nGet1Euro       := Val( aStream[ 9 ] )
      ::nGet050Euros    := Val( aStream[ 10] )
      ::nGet020Euros    := Val( aStream[ 11] )
      ::nGet010Euros    := Val( aStream[ 12] )
      ::nGet005Euros    := Val( aStream[ 13] )
      ::nGet002Euros    := Val( aStream[ 14] )
      ::nGet001Euro     := Val( aStream[ 15] )

      IIF( !Empty( ::oGet500Euros ), ::oGet500Euros:Refresh(), )
      IIF( !Empty( ::oGet200Euros ), ::oGet200Euros:Refresh(), )
      IIF( !Empty( ::oGet100Euros ), ::oGet100Euros:Refresh(), )
      IIF( !Empty( ::oGet50Euros ), ::oGet50Euros:Refresh(), )
      IIF( !Empty( ::oGet20Euros ), ::oGet20Euros:Refresh(), )
      IIF( !Empty( ::oGet10Euros ), ::oGet10Euros:Refresh(), )
      IIF( !Empty( ::oGet5Euros ), ::oGet5Euros:Refresh(), )
      IIF( !Empty( ::oGet2Euros ), ::oGet2Euros:Refresh(), )
      IIF( !Empty( ::oGet1Euro ), ::oGet1Euro:Refresh(), )
      IIF( !Empty( ::oGet050Euros ), ::oGet050Euros:Refresh(), )
      IIF( !Empty( ::oGet020Euros ), ::oGet020Euros:Refresh(), )
      IIF( !Empty( ::oGet010Euros ), ::oGet010Euros:Refresh(), )
      IIF( !Empty( ::oGet005Euros ), ::oGet005Euros:Refresh(), )
      IIF( !Empty( ::oGet002Euros ), ::oGet002Euros:Refresh(), )
      IIF( !Empty( ::oGet001Euro ), ::oGet001Euro:Refresh(), )

   end

   ::Total()

Return ( .T. )



Function nVirtualNumKey( cBitmap, cTitle, nVar )

   local oGet
   local oDlg
   local oBmp
   local cVar

   IIF( nVar == nil, nVar := 0, ) ;

   IIF( cTitle == nil, cTitle := "Teclado virtual", ) ;

   cVar                 := Str( nVar, 2 )

   oDlg = TDialog():New(,,,, cTitle, "NumKey",, .F.,,,,,, .F.,,,,,, .F., )

      oBmp := TBitmap():ReDefine( 500, ( cBitmap ),, oDlg,,, .F., .F.,,, .F.,,, .T. )

      oGet := TGet():ReDefine( 100, { | u | If( PCount()==0, cVar, cVar:= u ) }, oDlg,, "99",,,,,,, .F.,,, .F., .F.,,,,,,, "cVar", )

      TButton():ReDefine( 101, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("1") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 102, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("2") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 103, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("3") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 104, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("4") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 105, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("5") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 106, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("6") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 107, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("7") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 108, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("8") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 109, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("9") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 110, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("0") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 150, {||( oGet:SetFocus(.T.), oGet:cText( "0" ) )}, oDlg,,, .F.,,,, .F. )

      TButtonBmp():ReDefine( 130, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F., "Check_32",, )

      oDlg:AddFastKey( 116, {|| oDlg:End( 1 ) } )

      oDlg:bStart       := {|| oGet:SetFocus( .T. ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if !Empty( oBmp )
      oBmp:End()

   end

Return ( Val( cVar ) )









FUNCTION RetPic( nUnd, nDec, lEsp )

   local n
    local cRetPic    := ""

   if Empty( nUnd )
      nUnd        := 1
   end

    IIF( nDec == nil, nDec := 0, ) ;
    IIF( lEsp == nil, lEsp := .T., ) ;





   for n := 1 to nUnd
      cRetPic     := "9" + cRetPic
      if n % 3 == 0
         cRetPic  := "," + cRetPic
      end
   next





    IF Left( cRetPic, 1 ) == ","
        cRetPic         := Substr( cRetPic, 2 )
    end





    IF lEsp
        cRetPic        := "@E " + cRetPic
    ELSE
        cRetPic        := "@R " + cRetPic
    end





    IF nDec > 0
        cRetPic        += "." + Replicate( "9", nDec )
    end

RETURN ( cRetPic )



FUNCTION CheckCif( oGet )

   local cCif     := oGet:varGet()
   local cNumero  := ""
   local cLetra   := ""

   if isDigit( cCif )

      do case
         case Len( RTrim( cCif ) ) < 9

            cCif     := RJust( RTrim( cCif ) + Cif( cCif ) , "0", 9 )
            oGet:cText( cCif )

         case Len( RTrim( cCif ) ) == 9

            cNumero  := Left( cCif, 9 - 1 )
            cLetra   := Right( cCif, 1 )

            if cLetra <> Cif( cNumero )
               cCif  := cNumero + Cif( cNumero )
               oGet:cText( cCif )
            end

      end

   end

RETURN .T.







FUNCTION Cif( cCif )

    LOCAL acLetras := {"R","W","A","G","M","Y","F","P","D","X","B","N","J","Z","S","Q","V","H","L","C","K","E","T"}
    LOCAL nPosition:= Val( cCif ) % 23





    IF nPosition == 0
        nPosition = 23
    end

RETURN ( acLetras[ nPosition ] )



function Num2Text( nNum, lMas, nDec )

   local cTxt
   local cDec

   IIF( lMas == nil, lMas := .T., ) ;
   IIF( nDec == nil, nDec := 2, ) ;

   cTxt              := Letras( int( nNum ), lMas )





   if int( nNum ) <> nNum

      cTxt  += " con "
      cDec  := Str( nNum - int( nNum ) )
      cDec  := SubStr( cDec, At( ".", cDec ) + 1, nDec )





      while len( cDec ) > 0 .AND. SubStr( cDec, 1, 1 ) == "0"

         cDec  := SubStr( cDec, 2 )
      end

      if len( cDec ) > 0
         cTxt  += Rtrim( Letras( Val( cDec ), lMas ) ) + Space( 1 ) + "Centimos"
      end

   end

return ( Upper( cTxt ) )



FUNCTION Letras( chk_num, lMas )

    local chk_list
    local chk_it
    local chk_out

   IIF( lMas == nil, lMas := .F., ) ;

    DO CASE

   CASE chk_num < 0
      RETURN "Negativo " + Num2Text( chk_num * -1, lMas )

    CASE chk_num < 11
        chk_list = { "Cero", "Uno", "Dos", "Tres", "Cuatro", "Cinco", "Seis", "Siete", "Ocho", "Nueve", "Diez" }
      RETURN chk_list[ chk_num + 1 ]

    CASE chk_num < 20
        chk_list = { "Once", "Doce", "Trece", "Catorce", "Quince", "Dieciseis", "Diecisiete", "Dieciocho", "Diecinueve" }
      RETURN chk_list[ chk_num - 10 ]

    CASE chk_num = 20
      RETURN "Veinte"

    CASE chk_num < 30
      RETURN "Venti" + If( chk_num > 20, Num2Text( chk_num - 20, lMas ), " ")

    CASE chk_num < 40
      RETURN "Treinta" + If( chk_num > 30, " y " + Num2Text( chk_num - 30, lMas ), " ")

    CASE chk_num < 50
      RETURN "Cuarenta" + If( chk_num > 40, " y " + Num2Text( chk_num - 40, lMas ), " ")

    CASE chk_num < 60
      RETURN "Cincuenta" + If( chk_num > 50, " y " + Num2Text( chk_num - 50, lMas ), " ")

    CASE chk_num < 70
      RETURN "Sesenta" + If( chk_num > 60, " y " + Num2Text( chk_num - 60, lMas ), " ")

    CASE chk_num < 80
      RETURN "Setenta" + If( chk_num > 70, " y " + Num2Text( chk_num - 70, lMas ), " ")

    CASE chk_num < 90
      RETURN "Ochenta" + If( chk_num > 80, " y " + Num2Text( chk_num - 80, lMas ), " ")

    CASE chk_num < 100
      RETURN "Noventa" + If( chk_num > 90, " y " + Num2Text( chk_num - 90, lMas ), " ")

    CASE chk_num < 1000
        chk_it  = Int( chk_num / 100 )
        chk_out = chk_num - ( chk_it * 100 )

        DO CASE
        CASE chk_num = 100
            RETURN "Cien"

        CASE chk_num < 200
            chk_it = "Ciento"

        CASE chk_num < 300
         chk_it = if( lMas, "Doscientos", "Doscientas" )

        CASE chk_num < 400
         chk_it = if( lMas, "Trescientos", "Trescientas" )

        CASE chk_num < 500
         chk_it = if( lMas, "Cuatrocientos", "Cuatrocientas" )

        CASE chk_num < 600
         chk_it = if( lMas, "Quinientos", "Quinientas" )

        CASE chk_num < 700
         chk_it = if( lMas, "Seiscientos", "Seiscientas" )

        CASE chk_num < 800
         chk_it = if( lMas, "Setecientos", "Setecientas" )

        CASE chk_num < 900
         chk_it = if( lMas, "Ochocientos" , "Ochocientas" )

        CASE chk_num < 1000
         chk_it = if( lMas, "Novecientos", "Novecientas" )

        end

      RETURN chk_it + If( chk_out > 0, " " + Num2Text( chk_out, lMas ), " ")

    CASE chk_num < 1000000
        chk_it  = Int( chk_num / 1000 )
        chk_out = chk_num - ( chk_it * 1000 )
      RETURN If( chk_it <> 1, Num2Text( chk_it, lMas ), "" ) + "Mil" + If( chk_out > 0, " " + Num2Text( chk_out, lMas ), " ")

    CASE chk_num < 1000000000
        chk_it  = Int( chk_num / 1000000 )
        chk_out = chk_num - ( chk_it * 1000000 )
      RETURN Num2Text( chk_it, lMas ) + "Millón" + If( chk_out > 0, ", " + Num2Text( chk_out, lMas )," ")

    CASE chk_num < 1000000000000
        chk_it  = INT( chk_num / 1000000000 )
        chk_out = chk_num - ( chk_it * 1000000000 )
      RETURN Num2Text( chk_it, lMas ) + "Billón" + If( chk_out > 0, ", " + Num2Text( chk_out, lMas )," ")

    ENDCASE

RETURN "Número no convertido"



Function CheckRut( oGet )

   local cNumero     := ""
   local cLetra      := ""
   local cRut        := Rtrim( oGet:varGet() )

   if isDigit( cRut )

      do case
         case Len( cRut ) < 9

            cRut     := Rtrim( RJust( cRut, "0", 9 ) )
            cRut     += Rut( cRut )

            oGet:cText( cRut )

         case Len( cRut ) == 9

            cNumero  := Left( cRut, 9 - 1 )
            cLetra   := Right( cRut, 1 )

            if cLetra <> Rut( cNumero )
               cRut  := cNumero + Rut( cNumero )
               oGet:cText( cRut )
            end

      end

   end

Return .T.



Function Rut( cRut )

   local nRut









   nRut     := (  Val( SubStr( cRut, 1, 1 ) ) * 4 + Val( SubStr( cRut, 2, 1 ) ) * 3 + Val( SubStr( cRut, 3, 1 ) ) * 2 + Val( SubStr( cRut, 4, 1 ) ) * 7 + Val( SubStr( cRut, 5, 1 ) ) * 6 + Val( SubStr( cRut, 6, 1 ) ) * 5 + Val( SubStr( cRut, 7, 1 ) ) * 4 + Val( SubStr( cRut, 8, 1 ) ) * 3 + Val( SubStr( cRut, 9, 1 ) ) * 2 ) % 11
   nRut     := 11 - nRut

   if nRut < 10
      nRut  := Str( nRut, 1 )
   elseif nRut == 10
      nRut  := "K"
   else
      nRut  := "0"
   end

Return ( nRut )



Function VirtualKey( lPassword, uGetKey, cTitle )

   local oGet
   local oDlg
   local cVar
   local oFnt        := TFont():New( "Arial", 12, 32, .F., .T. )

   IIF( lPassword == nil, lPassword := .F., ) ;
   IIF( cTitle == nil, cTitle := "Teclado virtual", ) ;

   do case
      case Valtype( uGetKey ) == "O"
         cVar        := uGetKey:VarGet()
      case Valtype( uGetKey ) == "C"
         cVar        := uGetKey
      otherwise
         cVar        := Space( 200 )
   end

   cVar              := Padr( cVar, 200 )

   if lPassword
      oDlg = TDialog():New(,,,, cTitle, "KEYBPASSWORD",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDlg = TDialog():New(,,,, cTitle, "KEYB",, .F.,,,,,, .F.,,,,,, .F., )
   end

      oGet := TGet():ReDefine( 100, { | u | If( PCount()==0, cVar, cVar:= u ) }, oDlg,,,,,, oFnt,,, .F.,,, .F., .F.,,,,,,, "cVar", )

      TButton():ReDefine( 101, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("1") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 102, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("2") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 103, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("3") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 104, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("4") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 105, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("5") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 106, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("6") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 107, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("7") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 108, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("8") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 109, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("9") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 110, {||( oGet:SetFocus(.T.), oGet:KeyChar( Asc("0") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 111, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("Q") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 112, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("W") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 113, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("E") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 114, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("R") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 115, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("T") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 116, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("Y") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 117, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("U") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 118, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("I") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 119, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("O") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 120, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("P") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 121, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("A") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 122, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("S") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 123, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("D") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 124, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("F") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 125, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("G") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 126, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("H") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 127, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("J") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 128, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("K") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 129, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("L") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 130, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("Ñ") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 131, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("Z") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 132, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("X") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 133, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("C") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 134, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("V") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 135, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("B") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 136, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("N") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 137, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("M") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 138, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC(",") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 139, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC(".") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 140, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC("-") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 150, {||( oGet:SetFocus(.T.), oGet:KeyDown( 8 ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 151, {||( oGet:SetFocus(.T.), oGet:KeyChar( ASC(" ") ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 1, {||( oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )

      TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

      oDlg:bStart := {|| oGet:SetFocus( .T. ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oFnt:End()

   if oDlg:nResult == 1

      if Valtype( uGetKey ) == "O"
         uGetKey:cText( cVar)
      end

      Return ( Rtrim( cVar ) )

   end

Return ( "" )

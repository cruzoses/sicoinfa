#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TiRemMov.prg"
_HB_CLASS TInfRemMov ; UTILITY FUNCTION TInfRemMov(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfRemMov" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER { nRemDes} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nRemDes" }, .F., .F. ), )
   _HB_MEMBER { nRemHas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nRemHas" }, .F., .F. ), )
   _HB_MEMBER { cSufDes} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSufDes" }, .F., .F. ), )
   _HB_MEMBER { cSufHas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSufHas" }, .F., .F. ), )
   _HB_MEMBER { oArtDbf} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oArtDbf" }, .F., .F. ), )
   _HB_MEMBER { oRemMovL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oRemMovL" }, .F., .F. ), )
   _HB_MEMBER { oRemMovT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oRemMovT" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfRemMov_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfRemMov_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfRemMov_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfRemMov_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfRemMov_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfRemMov_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfRemMov_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfRemMov_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfRemMov ;



UTILITY STATIC function TInfRemMov_Create() ; local Self AS CLASS TInfRemMov := QSelf() AS CLASS TInfRemMov

   ::AddField( "dFecMov", "D",  8, 0, {|| "@!" },      "Fecha",      .T., "Fecha",               8 )
   ::AddField( "cAliMov", "C",  3, 0, {|| "@!" },      "Ent",        .T., "Almacen entrada",     3 )
   ::AddField( "cAloMov", "C",  3, 0, {|| "@!" },      "Sal",        .T., "Almacen salida",      3 )
   ::AddField( "cRefMov", "C", 18, 0, {|| "@!" },      "Código",     .T., "Código",             14 )
   ::AddField( "cNomMov", "C",100, 0, {|| "@!" },      "Artículo",   .T., "Artículo",           40 )
   ::AddField( "cCodMov", "C",  2, 0, {|| "" },        "TM",         .T., "Tipo de movimiento",  2 )
   ::AddField( "cValPr1", "C", 10, 0, {|| "@!" },      "Prp.1",      .F., "Propiedad 1",         4 )
   ::AddField( "cValPr2", "C", 10, 0, {|| "@!" },      "Prp.2",      .F., "Propiedad 2",         4 )
   ::AddField( "cLote",   "C", 12, 0, {|| "@!" },      "Lote",       .F., "Lote",                7 )
   ::AddField( "nCajMov", "N", 19, 6, {|| MasUnd() },  "Caj.",       .F., "Caja",                8, .T. )
   ::AddField( "nUndMov", "N", 19, 6, {|| MasUnd() },  "Und.",       .F., "Unidades",            8, .T. )
   ::AddField( "nTotMov", "N", 19, 6, {|| MasUnd() },  "Tot. und.",  .T., "Total unidades",      8, .T. )
   ::AddField( "nPreDiv", "N", 19, 6, {|| ::cPicOut},  "Importe",    .T., "Importe",             8, .T. )
   ::AddField( "nTotImp", "N", 19, 6, {|| ::cPicOut},  "Tot. imp.",  .T., "Total importe",       8, .T. )
   ::AddField( "nNumRem", "N",  9, 0, {|| "" },        "Número",     .F., "Número",              9 )
   ::AddField( "cSufRem", "C",  2, 0, {|| "" },        "Sufijo",     .F., "Sufijo",              2 )

   ::AddTmpIndex( "cNumRem", "Str( nNumRem ) + cSufRem" )

   ::AddGroup( {|| Str( ::oDbf:nNumRem ) + ::oDbf:cSufRem }, {|| "Remesa : " + AllTrim( Str( ::oDbf:nNumRem ) ) + "/" + AllTrim( ::oDbf:cSufRem ) }, {|| "Total remesa..." } )

   ::oRemMovT  := ::xOthers[ 1 ]
   ::oRemMovL  := ::xOthers[ 2 ]
   ::oArtDbf   := ::xOthers[ 3 ]

RETURN ( Self )



UTILITY STATIC function TInfRemMov_OpenFiles() ; local Self AS CLASS TInfRemMov := QSelf() AS CLASS TInfRemMov

   ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

RETURN ( Self )



UTILITY STATIC function TInfRemMov_lResource( cFld) ; local Self AS CLASS TInfRemMov := QSelf() AS CLASS TInfRemMov

   ::nRemDes      := ::oRemMovT:nNumRem
   ::nRemHas      := ::oRemMovT:nNumRem
   ::cSufDes      := ::oRemMovT:cSufRem
   ::cSufHas      := ::oRemMovT:cSufRem

   ::lDefFecInf   := .F.
   ::lDefDivInf   := .F.
   ::lDefSerInf   := .F.

   if !::StdResource( "INF_GENORDCAR" )
      return .F.
   end

   ::lLoadDivisa()









   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::nRemDes, ::nRemDes:= u ) }, ::oFld:aDialogs[1],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cSufDes, ::cSufDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::nRemHas, ::nRemHas:= u ) }, ::oFld:aDialogs[1],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cSufHas, ::cSufHas:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

   ::CreateFilter(  , ::oRemMovT )

RETURN .T.






UTILITY STATIC function TInfRemMov_lGenerate() ; local Self AS CLASS TInfRemMov := QSelf() AS CLASS TInfRemMov

   local cExpHead := ""

   ::oDlg:Disable()
   ::oDbf:Zap()

   ::oRemMovT:GetStatus()


   ::aHeader      := {  {|| "Fecha  : " + Dtoc( Date() ) }, {|| "Rango  : " + AllTrim( Str( ::nRemDes ) ) + "/" + AllTrim( ::cSufDes ) + " > " + AllTrim( Str( ::nRemHas ) ) + "/" + AllTrim( ::cSufHas ) } }

   ::oRemMovT:OrdSetFocus( "CNUMREM" )

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       := ::oFilter:cExpFilter
   else
      cExpHead       := ".t."
   end

   ::oRemMovT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oRemMovT:cFile ), ::oRemMovT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   if ::oRemMovT:Seek( Str( ::nRemDes ) + ::cSufDes )

      while Str( ::oRemMovT:nNumRem ) + ::oRemMovT:cSufRem <= Str( ::nRemHas ) + ::cSufHas .AND. !::oRemMovT:eof()





         if ::oRemMovL:Seek( Str( ::oRemMovT:nNumRem ) + ::oRemMovT:cSufRem )

            while Str( ::oRemMovT:nNumRem ) + ::oRemMovT:cSufRem == Str( ::oRemMovL:nNumRem ) + ::oRemMovL:cSufRem .AND. !::oRemMovL:Eof()

               if ::oDbf:Append()
                  ::oDbf:Blank()

                  ::oDbf:dFecMov    := ::oRemMovL:dFecMov
                  ::oDbf:cAliMov    := ::oRemMovL:cAliMov
                  ::oDbf:cAloMov    := ::oRemMovL:cAloMov
                  ::oDbf:cRefMov    := ::oRemMovL:cRefMov
                  ::oDbf:cNomMov    := retArticulo( ::oRemMovL:cRefMov, ::oArtDbf:nArea )
                  ::oDbf:cCodMov    := ::oRemMovL:cCodMov
                  ::oDbf:cValPr1    := ::oRemMovL:cValPr1
                  ::oDbf:cValPr2    := ::oRemMovL:cValPr2
                  ::oDbf:cLote      := ::oRemMovL:cLote
                  ::oDbf:nCajMov    := ::oRemMovL:nCajMov
                  ::oDbf:nUndMov    := ::oRemMovL:nUndMov
                  ::oDbf:nTotMov    := nTotNMovAlm( ::oRemMovL )
                  ::oDbf:nTotImp    := nTotLMovAlm( ::oRemMovL )
                  ::oDbf:nPreDiv    := ::oRemMovL:nPreDiv
                  ::oDbf:nNumRem    := ::oRemMovL:nNumRem
                  ::oDbf:cSufRem    := ::oRemMovL:cSufRem

                  ::oDbf:Save()
               end

               ::oRemMovL:Skip()

            end

         end

         ::oRemMovT:Skip()

      end

   end

   ::oRemMovT:IdxDelete( cCurUsr(), GetFileNoExt( ::oRemMovT:cFile ) )

   ::oRemMovT:SetStatus()

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

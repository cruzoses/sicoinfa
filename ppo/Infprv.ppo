#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Infprv.prg"
_HB_CLASS TInfPrv ; UTILITY FUNCTION TInfPrv(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfPrv" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oEstado} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oEstado" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfPrv_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfPrv_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfPrv_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfPrv_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfPrv_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfPrv_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfPrv ;



UTILITY STATIC function TInfPrv_Create() ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   ::AddField( "Cod",       "C",  12, 0, {|| "" },          "Código",                      .T., "Código",                    10, .F. )
   ::AddField( "Titulo",    "C",  50, 0, {|| "" },          "Nombre",                      .T., "Nombre",                    30, .F. )
   ::AddField( "Nif",       "C",  15, 0, {|| "" },          "N.I.F.",                      .F., "N.I.F.",                    12, .F. )
   ::AddField( "Domicilio", "C", 100, 0, {|| "" },          "Domicilio",                   .T., "Domicilio",                 40, .F. )
   ::AddField( "Poblacion", "C",  35, 0, {|| "" },          "Población",                   .T., "Población",                 40, .F. )
   ::AddField( "Provincia", "C",  20, 0, {|| "" },          "Provincia" ,                  .T., "Provincia" ,                15, .F. )
   ::AddField( "CodPostal", "C",   7, 0, {|| "" },          "Cod. pos.",                   .T., "Código postal",              7, .F. )
   ::AddField( "Telefono",  "C",  20, 0, {|| "" },          "Teléfono",                    .T., "Teléfono",                  10, .F. )
   ::AddField( "Fax",       "C",  20, 0, {|| "" },          "Fax" ,                        .F., "Fax" ,                      10, .F. )
   ::AddField( "Fpago",     "C",   2, 0, {|| "" },          "Pg" ,                         .F., "Forma de pago" ,            10, .F. )
   ::AddField( "Diapago",   "N",   2, 0, {|| "" },          "Dia" ,                        .F., "Dia de pago" ,              10, .F. )
   ::AddField( "Banco",     "C",  50, 0, {|| "" },          "Banco" ,                      .F., "Banco" ,                    30, .F. )
   ::AddField( "DirBanco",  "C",  35, 0, {|| "" },          "Domicilio banco" ,            .F., "Domicilio banco" ,          25, .F. )
   ::AddField( "PobBanco",  "C",  25, 0, {|| "" },          "Población banco" ,            .F., "Población banco" ,          30, .F. )
   ::AddField( "cProBanco", "C",  20, 0, {|| "" },          "Provincia" ,                  .F., "Provincia banco" ,          15, .F. )
   ::AddField( "Cuenta",    "C",  20, 0, {|| "" },          "Cuenta" ,                     .F., "Cuenta banco" ,             10, .F. )
   ::AddField( "cDefI01",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(1) },        .F., {|| ::cNameIniPrv(1) },      50, .F. )
   ::AddField( "cDefI02",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(2) },        .F., {|| ::cNameIniPrv(2) },      50, .F. )
   ::AddField( "cDefI03",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(3) },        .F., {|| ::cNameIniPrv(3) },      50, .F. )
   ::AddField( "cDefI04",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(4) },        .F., {|| ::cNameIniPrv(4) },      50, .F. )
   ::AddField( "cDefI05",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(5) },        .F., {|| ::cNameIniPrv(5) },      50, .F. )
   ::AddField( "cDefI06",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(6) },        .F., {|| ::cNameIniPrv(6) },      50, .F. )
   ::AddField( "cDefI07",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(7) },        .F., {|| ::cNameIniPrv(7) },      50, .F. )
   ::AddField( "cDefI08",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(8) },        .F., {|| ::cNameIniPrv(8) },      50, .F. )
   ::AddField( "cDefI09",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(9) },        .F., {|| ::cNameIniPrv(9) },      50, .F. )
   ::AddField( "cDefI10",   "C", 100, 0, {|| "@!" },        {|| ::cNameIniPrv(10)},        .F., {|| ::cNameIniPrv(10)},      50, .F. )

   ::AddTmpIndex ( "cCodCod", "Cod" )
   ::AddTmpIndex ( "cCodTit", "Titulo" )
   ::AddTmpIndex ( "cCodPob", "Poblacion" )
   ::AddTmpIndex ( "cCodPrv", "Provincia" )
   ::AddTmpIndex ( "cCodCdp", "CodPostal" )
   ::AddTmpIndex ( "cCodTlf", "Telefono" )

   ::lDefFecInf   := .F.
   ::lDefSerInf   := .F.
   ::lDefDivInf   := .F.

RETURN ( Self )



UTILITY STATIC function TInfPrv_lResource( cFld) ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   local cEstado  := "Código"

   if !::StdResource( "INF_PRV01" )
      return .F.
   end




   ::oDefPrvInf( 110, 120, 130, 140, 600 )



   TCheckBox():ReDefine( 200, { | u | If( PCount()==0, ::lSalto, ::lSalto:= u ) }, ::oFld:aDialogs[1],,,,,,, .F.,, .F. )

   ::CreateFilter( aItmPrv(), ::oDbfPrv )




   ::oMtrInf:SetTotal( ::oDbfPrv:Lastrec() )









   ::oEstado := TComboBox():ReDefine( 218, { | u | If( PCount()==0, cEstado, cEstado:= u ) }, { "Código", "Nombre", "Población", "Provincia", "Código postal", "Teléfono" }, ::oFld:aDialogs[1],,,,,,, .F.,,,,,, )

RETURN .T.






UTILITY STATIC function TInfPrv_lGenerate() ; local Self AS CLASS TInfPrv := QSelf() AS CLASS TInfPrv

   ::oDlg:Disable()
   ::oDbf:Zap()


   ::aHeader      := {  {|| "Fecha       : " + Dtoc( Date() ) }, {|| "Proveedores : " + if( ::lAllPrv, "Todos", AllTrim( ::cPrvOrg ) + " > " + AllTrim( ::cPrvDes ) ) } }

   ::oDbfPrv:GoTop()
   WHILE !::oDbfPrv:Eof()


      if ( ::lAllPrv .OR. ( ::oDbfPrv:Cod >= ::cPrvOrg .AND. ::oDbfPrv:Cod <= ::cPrvDes ) ) .AND. ::EvalFilter()

         ::oDbf:Append()
         ::oDbf:Cod         := ::oDbfPrv:Cod
         ::oDbf:Titulo      := ::oDbfPrv:Titulo
         ::oDbf:Nif         := ::oDbfPrv:Nif
         ::oDbf:Domicilio   := ::oDbfPrv:Domicilio
         ::oDbf:Poblacion   := ::oDbfPrv:Poblacion
         ::oDbf:Provincia   := ::oDbfPrv:Provincia
         ::oDbf:CodPostal   := ::oDbfPrv:CodPostal
         ::oDbf:Telefono    := ::oDbfPrv:Telefono
         ::oDbf:Fax         := ::oDbfPrv:Fax
         ::oDbf:Fpago       := ::oDbfPrv:Fpago
         ::oDbf:Diapago     := ::oDbfPrv:Diapago
         ::oDbf:Banco       := ::oDbfPrv:Banco
         ::oDbf:Dirbanco    := ::oDbfPrv:Dirbanco
         ::oDbf:Pobbanco    := ::oDbfPrv:Pobbanco
         ::oDbf:Cprobanco   := ::oDbfPrv:Cprobanco
         ::oDbf:Cuenta      := ::oDbfPrv:Cuenta

         ::oDbf:Save()

      end

      ::oDbfPrv:Skip()

      ::oMtrInf:AutoInc( ::oDbfPrv:OrdKeyNo() )

   end

   ::oMtrInf:AutoInc( ::oDbfPrv:LastRec() )

   ::oDlg:Enable()

   ::oDbf:OrdSetFocus( ::oEstado:nAt )

RETURN ( ::oDbf:LastRec() > 0 )

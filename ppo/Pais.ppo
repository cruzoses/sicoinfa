#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\Pais.prg"
_HB_CLASS TPais ; UTILITY FUNCTION TPais(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TPais" , {TMant():classh} ) ) ; ;

   _HB_MEMBER {AS OBJECT oBan} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oBan" }, .F., .F. ), )

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Flag_spain_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )

   _HB_MEMBER { cBitmap} ; IIF( !.F., s_oClass:AddMultiData(, ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ), nScope + IIF( .F., 32, 0 ), { "cBitmap" }, .F., .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TPais_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TPais_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER OpenService(); IIF( .F., s_oClass:ModMethod( "OpenService", @TPais_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TPais_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TPais_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TPais_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TPais_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TPais_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TPais_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TPais_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER cNombre(cCod); IIF( .F., s_oClass:ModInline( "cNombre", {|Self,cCod | Self, ( oRetFld( cCod, ::oDbf, "cNomPai" ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "cNombre", {|Self,cCod | Self, ( oRetFld( cCod, ::oDbf, "cNomPai" ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER cBmp(cCod); IIF( .F., s_oClass:ModInline( "cBmp", {|Self,cCod | Self, ( ::oBan:hBandera( oRetFld( cCod, ::oDbf, "cResPai" ) ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "cBmp", {|Self,cCod | Self, ( ::oBan:hBandera( oRetFld( cCod, ::oDbf, "cResPai" ) ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetPais( cCodPai, oSay, oBmp); IIF( .F., s_oClass:ModMethod( "GetPais", @TPais_GetPais(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetPais", @TPais_GetPais(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( oCmb, oDlg, nMode); IIF( .F., s_oClass:ModMethod( "lPreSave", @TPais_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TPais_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TPais ;



UTILITY STATIC function TPais_OpenFiles(lExclusive) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local lOpen          := .T.
   local oError
   local oBlock

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

   ::oBan               := TBandera():New

   RECOVER USING oError

      lOpen             := .F.
      msgStop( ErrorMessage( oError ), "Imposible abrir todas las bases de datos de paises" )

   end

   ErrorBlock( oBlock )

   if !lOpen
      ::CloseFiles()
   end

RETURN ( lOpen )



UTILITY STATIC function TPais_DefineFiles( cPath, cDriver) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "PAIS.DBF", "Pais" ):New( "PAIS.DBF",, ( cDriver ), "Paises", ( cPath ) )

      ::oDbf:AddField( "CCODPAI", "C", 4, 0,, Space( 4 ),,, "Código", .F., 80, .F., {} )
      ::oDbf:AddField( "CNOMPAI", "C", 35, 0,, Space( 35),,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "CBNDPAI", "C", 4, 0,,,,, "", .F., 0, .T., {} )
      ::oDbf:AddField( "CRESPAI", "C", 8, 0,,,,, "", .F., 0, .T., {} )

      ::oDbf:AddIndex( "CCODPAI", "Pais.CDX", "CCODPAI",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "CNOMPAI", "Pais.CDX", "CNOMPAI",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function TPais_Resource( nMode) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local oDlg
   local oGet
   local oCmb
   local cCmb     := ::oBan:cBandera( ::oDbf:cResPai )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "paises", "PAIS",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::oDbf:CCODPAI, ::oDbf:CCODPAI:= u ) }, oDlg,, "@!", {||    ( RJustObj( oGet, "0" ), .T. )},,,,,, .T., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:CNOMPAI, ::oDbf:CNOMPAI:= u ) }, oDlg,,,,,,,,, .T., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )










        oCmb := TComboBox():ReDefine( 120, { | u | If( PCount()==0, cCmb, cCmb:= u ) }, ::oBan:aNomBan, oDlg,,,,,,, .F., {||     ( nMode <> 3 )}, ::oBan:aResBan,,,, )





      TButton():ReDefine( 1, {||(  ::lPreSave( oGet, oCmb, oDlg, nMode ) )}, oDlg,,, .F., {||     (  nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )




      TButton():ReDefine( 998, {||( GoHelp() )}, oDlg,,, .F.,,,, .F. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ::lPreSave( oGet, oCmb, oDlg, nMode ) } )
   end

   oDlg:AddFastKey( 112, {|| GoHelp() } )

   oDlg:bStart    := {|| oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TPais_lPreSave( oGet, oCmb, oDlg, nMode) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   local nCmb     := Max( Min( oCmb:nAt, len( ::oBan:aResBan ) ), 1 )

   ::oDbf:cResPai := ::oBan:aResBan[ nCmb ]

   if nMode == 1 .OR. nMode == 4

      oGet:lValid()

      if ::oDbf:SeekInOrd( ::oDbf:cCodPai, "cCodPai" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodPai ) )
         return .F.
      end

   end

   if Empty( ::oDbf:cNomPai )
      MsgStop( "La descripción del país no puede estar vacía." )
      Return .F.
   end

Return oDlg:end( 1 )



UTILITY STATIC function TPais_CloseFiles() ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   if !Empty( ::oDbf ) .AND. ::oDbf:Used()
      ::oDbf:end()
   end

   if !Empty( ::oBan )
      ::oBan:end()
   end

RETURN .T.



UTILITY STATIC function TPais_GetPais( cCodPai, oSay, oBmp) ; local Self AS CLASS TPais := QSelf() AS CLASS TPais

   if ::oDbf:Seek( cCodPai )

      ::oDbf:Load()

      oSay:cText( ::oDbf:cNomPai )

      oBmp:LoadImage( ::oDbf:cResPai )

      oBmp:Refresh()

   end

RETURN ( .T. )

#line 112 "\xHarbour\Include\HBClass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 15 ".\Prg\Tfield.prg"
_HB_CLASS TField ; UTILITY FUNCTION TField(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TField" , { HBObject():Classh } ) ) ;

    _HB_MEMBER {AS STRING cName, cType, cPict, cComment} ; IIF( !.F., s_oClass:AddMultiData( "STRING",, nScope + IIF( .F., 32, 0 ), { "cName" , "cType" , "cPict" , "cComment" }, .F., .F. ), )
    _HB_MEMBER {AS NUMERIC nPos, nLen, nDec} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC",, nScope + IIF( .F., 32, 0 ), { "nPos" , "nLen" , "nDec" }, .F., .F. ), )
    _HB_MEMBER {AS CODEBLOCK bSetGet, bValid, bString, bDirect} ; IIF( !.F., s_oClass:AddMultiData( "CODEBLOCK",, nScope + IIF( .F., 32, 0 ), { "bSetGet" , "bValid" , "bString" , "bDirect" }, .F., .F. ), )
    _HB_MEMBER {AS LOGICAL lCalculate, lOEM} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL",, nScope + IIF( .F., 32, 0 ), { "lCalculate" , "lOEM" }, .F., .F. ), )
    _HB_MEMBER {AS OBJECT oDbf} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oDbf" }, .F., .F. ), )

    _HB_MEMBER { LowVal, Val, HighVal, Cargo,  DefaultVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "LowVal" , "Val" , "HighVal" , "Cargo" , "DefaultVal" }, .F., .F. ), )

    _HB_MEMBER { lColAlign} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lColAlign" }, .F., .F. ), )
    _HB_MEMBER { nColSize} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColSize" }, .F., .F. ), )
    _HB_MEMBER { lHide} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lHide" }, .F., .F. ), )
    _HB_MEMBER { aBitmaps} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aBitmaps" }, .F., .F. ), )


    _HB_MEMBER New( oDbf, cName, cType, nLen, nDec, cPict, DefaultVal, bValid,  bSetGet, cComment, lColAlign, nColSize, lHide, aBitmaps) AS CLASS TField; IIF( .F., s_oClass:ModMethod( "New", @TField_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TField_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

    _HB_MEMBER Activate(); IIF( .F., s_oClass:ModMethod( "Activate", @TField_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TField_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

    _HB_MEMBER Destroy(); IIF( .F., s_oClass:ModInline( "Destroy", {|Self | Self, Self := nil, .T. }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Destroy", {|Self | Self, Self := nil, .T. }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

    _HB_MEMBER Blank(); IIF( .F., s_oClass:ModInline( "Blank", {|Self | Self, ::Val := ::LowVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Blank", {|Self | Self, ::Val := ::LowVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER Load(); IIF( .F., s_oClass:ModInline( "Load", {|Self | Self, ::Val := ( ::oDbf:nArea )->( eval( ::bSetGet ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Load", {|Self | Self, ::Val := ( ::oDbf:nArea )->( eval( ::bSetGet ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER Save(); IIF( .F., s_oClass:ModInline( "Save", {|Self | Self, ( ::oDbf:nArea )->( eval( ::bSetGet, ::Val ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Save", {|Self | Self, ( ::oDbf:nArea )->( eval( ::bSetGet, ::Val ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER SetHigh(); IIF( .F., s_oClass:ModInline( "SetHigh", {|Self | Self, ::Val := ::HighVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetHigh", {|Self | Self, ::Val := ::HighVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER SetLow(); IIF( .F., s_oClass:ModInline( "SetLow", {|Self | Self, ::Val := ::LowVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetLow", {|Self | Self, ::Val := ::LowVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER SetDefault(); IIF( .F., s_oClass:ModInline( "SetDefault", {|Self | Self, ::Val := ::DefaultVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetDefault", {|Self | Self, ::Val := ::DefaultVal }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER AsString(); IIF( .F., s_oClass:ModInline( "AsString", {|Self | Self, transform( ::Val, ::cPict ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "AsString", {|Self | Self, transform( ::Val, ::cPict ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER Valid(); IIF( .F., s_oClass:ModMethod( "Valid", @TField_Valid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Valid", @TField_Valid(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
    _HB_MEMBER GetVal(); IIF( .F., s_oClass:ModInline( "GetVal", {|Self | Self, ( ::oDbf:nArea )->( eval( ::bSetGet ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetVal", {|Self | Self, ( ::oDbf:nArea )->( eval( ::bSetGet ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER PutVal(Val); IIF( .F., s_oClass:ModInline( "PutVal", {|Self,Val | Self, ( ::oDbf:nArea )->( eval( ::bSetGet, Val ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "PutVal", {|Self,Val | Self, ( ::oDbf:nArea )->( eval( ::bSetGet, Val ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER GetString(); IIF( .F., s_oClass:ModInline( "GetString", {|Self | Self, transform( ( ::oDbf:nArea )->( eval( ::bSetGet ) ), if( ValType( ::cPict ) == "B", Eval( ::cPict, Self ), ::cPict ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetString", {|Self | Self, transform( ( ::oDbf:nArea )->( eval( ::bSetGet ) ), if( ValType( ::cPict ) == "B", Eval( ::cPict, Self ), ::cPict ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

    _HB_MEMBER FieldGet(); IIF( .F., s_oClass:ModInline( "FieldGet", {|Self | Self, ( ::oDbf:nArea )->( FieldGet( ::nPos ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "FieldGet", {|Self | Self, ( ::oDbf:nArea )->( FieldGet( ::nPos ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
    _HB_MEMBER FieldGetByName(); IIF( .F., s_oClass:ModMethod( "FieldGetByName", @TField__FieldGetByName(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "FieldGetByName", @TField__FieldGetByName(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TField ;




UTILITY STATIC function TField_New( oDbf, cName, cType, nLen, nDec, cPict, DefaultVal, bValid,  bSetGet, cComment, lColAlign, nColSize, lHide, aBitmaps) ; local Self AS CLASS TField := QSelf() AS CLASS TField

   local cDateFormat := ""

   cName := upper( cName )
   cType := upper( cType )

   ::oDbf := oDbf
   ::cName := cName
   ::cType := if( cType == NIL, "C", cType )
   ::nLen := if( nLen == NIL, 10, nLen )
   ::nDec := if( nDec == NIL, 0, nDec )
   ::cPict := if( cPict == NIL, "@", cPict )
   ::cComment := if( cComment == NIL, Self:cName, cComment )

   ::lColAlign := if( lColAlign == NIL, ( ::cType == "N" ), lColAlign )
   ::nColSize := if( nColSize == NIL, ( GetTextWidth( 0, replicate( "B", ::nLen ) ) ), nColSize )
   ::lHide := if( lHide == NIL, .F., lHide )
   ::aBitmaps := if( aBitmaps == NIL, {}, aBitmaps )

   ::nPos := len( ::oDbf:ATField ) + 1

   ::lCalculate := .F.

   do case
      case ::cType == "C"
           ::LowVal  := space( ::nLen )
           ::HighVal := replicate( "þ", ::nLen )
           if !empty( DefaultVal )
                DefaultVal := PADR( DefaultVal, ::nLen, " " )
           endif

      case ::cType  == "N"
           ::LowVal  := replicate( "0", ::nLen )
           ::HighVal := replicate( "9", ::nLen )
           if ::nDec > 0
                ::LowVal  := Stuff( ::LowVal,  ( ::nLen - ::nDec ), 1, "." )
                ::HighVal := Stuff( ::HighVal, ( ::nLen - ::nDec ), 1, "." )
           endif
           ::LowVal     := Val( ::LowVal )
           ::HighVal    := Val( ::HighVal )

      case ::cType == "L"
           ::nLen       := 1
           ::nDec       := 0
           ::LowVal     := .F.
           ::HighVal    := .T.

      case ::cType == "D"
           ::nLen       := 8
           ::nDec       := 0
           cDateFormat  := Set( 4, "dd/mm/yyyy" )
           ::LowVal     := CToD( "" )
           ::HighVal    := CToD( "31/12/2999" )
           Set( 4, cDateFormat )

      case ::cType == "M"
           ::LowVal     := ::HighVal := ::DefaultVal := ""
           ::nLen       := 10
           ::nDec       := 0
           ::oDbf:lMemo := .T.

      case ::cType == "B"
           ::lCalculate := .T.
           if bSetGet == nil
               bSetGet  := { || "" }
           end
           ::bSetGet := bSetGet
   endcase

   ::DefaultVal := if( DefaultVal == NIL, Self:LowVal, DefaultVal )
   ::bValid := if( bValid == NIL, { || .T. }, bValid )

   ::Val := ::LowVal

return( Self )



UTILITY STATIC function TField_Activate() ; local Self AS CLASS TField := QSelf() AS CLASS TField

    ::bSetGet := if( ::lCalculate, ::bSetGet, ( ::oDbf:nArea )->( FieldBlock( ::cName ) ) )
    ::bString := { || transform( if( ::oDbf:lBuffer, ::Val, ::GetVal() ), if( ValType( ::cPict ) == "B", Eval( ::cPict, Self ), ::cPict ) ) }
    ::bDirect := { || transform( ::FieldGetByName(), if( ValType( ::cPict ) == "B", Eval( ::cPict, Self ), ::cPict ) ) }

return( Self )



UTILITY STATIC function TField_Valid() ; local Self AS CLASS TField := QSelf() AS CLASS TField

    local lRet := .T.

    if !eval( ::bValid )
        lRet := ::oDbf:lValid := .F.
        ::oDbf:cFldInvalid  := ::cName
    endif

return( lRet )



UTILITY STATIC function TField__FieldGetByName() ; local Self AS CLASS TField := QSelf() AS CLASS TField

    local Val
    local nPos := ( ::oDbf:nArea )->( FieldPos( ::cName ) )

    if nPos <> 0
       Val     := ( ::oDbf:nArea )->( FieldGet( nPos ) )
    endif

return( Val )

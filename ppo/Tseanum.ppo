#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tseanum.prg"
_HB_CLASS TSeaNumSer ; UTILITY FUNCTION TSeaNumSer(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TSeaNumSer" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDbfIva} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfIva" }, .F., .F. ), )
   _HB_MEMBER { oDbfArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArt" }, .F., .F. ), )
   _HB_MEMBER { oDbfCli} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfCli" }, .F., .F. ), )
   _HB_MEMBER { oDbfPrv} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfPrv" }, .F., .F. ), )
   _HB_MEMBER { oDbfAlm} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAlm" }, .F., .F. ), )
   _HB_MEMBER { oDbfTmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfTmp" }, .F., .F. ), )

   _HB_MEMBER { oHisMovT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oHisMovT" }, .F., .F. ), )
   _HB_MEMBER { oMovSerS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMovSerS" }, .F., .F. ), )

   _HB_MEMBER { oAlbPrvT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbPrvT" }, .F., .F. ), )
   _HB_MEMBER { oAlbPrvL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbPrvL" }, .F., .F. ), )
   _HB_MEMBER { oAlbPrvS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbPrvS" }, .F., .F. ), )

   _HB_MEMBER { oFacPrvT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvT" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvL" }, .F., .F. ), )
   _HB_MEMBER { oFacPrvS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacPrvS" }, .F., .F. ), )

   _HB_MEMBER { oRctPrvT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oRctPrvT" }, .F., .F. ), )
   _HB_MEMBER { oRctPrvL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oRctPrvL" }, .F., .F. ), )
   _HB_MEMBER { oRctPrvS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oRctPrvS" }, .F., .F. ), )

   _HB_MEMBER { oAlbCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliT" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliL" }, .F., .F. ), )
   _HB_MEMBER { oAlbCliS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oAlbCliS" }, .F., .F. ), )

   _HB_MEMBER { oFacCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliT" }, .F., .F. ), )
   _HB_MEMBER { oFacCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliL" }, .F., .F. ), )
   _HB_MEMBER { oFacCliS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacCliS" }, .F., .F. ), )

   _HB_MEMBER { oFacRecT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacRecT" }, .F., .F. ), )
   _HB_MEMBER { oFacRecL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacRecL" }, .F., .F. ), )
   _HB_MEMBER { oFacRecS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFacRecS" }, .F., .F. ), )

   _HB_MEMBER { oTikCliT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTikCliT" }, .F., .F. ), )
   _HB_MEMBER { oTikCliL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTikCliL" }, .F., .F. ), )
   _HB_MEMBER { oTikCliS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTikCliS" }, .F., .F. ), )

   _HB_MEMBER { oProCabT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProCabT" }, .F., .F. ), )
   _HB_MEMBER { oProSerS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProSerS" }, .F., .F. ), )
   _HB_MEMBER { oMatSerS} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMatSerS" }, .F., .F. ), )

   _HB_MEMBER { oOperacion} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oOperacion" }, .F., .F. ), )

   _HB_MEMBER { oMetMsg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oMetMsg" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC nMetMsg} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 0, nScope + IIF( .F., 32, 0 ), { "nMetMsg" }, .F., .F. ), )

   _HB_MEMBER { oSayCompras} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayCompras" }, .F., .F. ), )
   _HB_MEMBER { nSayCompras} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSayCompras" }, .F., .F. ), )

   _HB_MEMBER { oSayVentas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayVentas" }, .F., .F. ), )
   _HB_MEMBER { nSayVentas} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSayVentas" }, .F., .F. ), )

   _HB_MEMBER { oSayProduccion} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayProduccion" }, .F., .F. ), )
   _HB_MEMBER { nSayProduccion} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSayProduccion" }, .F., .F. ), )

   _HB_MEMBER { oSayTotal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayTotal" }, .F., .F. ), )
   _HB_MEMBER { nSayTotal} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSayTotal" }, .F., .F. ), )

   _HB_MEMBER { oBrw} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrw" }, .F., .F. ), )

   _HB_MEMBER { cCodArt} ; IIF( !.F., s_oClass:AddMultiData(, Space( 18 ), nScope + IIF( .F., 32, 0 ), { "cCodArt" }, .F., .F. ), )
   _HB_MEMBER { cNumSer} ; IIF( !.F., s_oClass:AddMultiData(, Space( 100 ), nScope + IIF( .F., 32, 0 ), { "cNumSer" }, .F., .F. ), )
   _HB_MEMBER { cCodCli} ; IIF( !.F., s_oClass:AddMultiData(, Space( 12 ), nScope + IIF( .F., 32, 0 ), { "cCodCli" }, .F., .F. ), )
   _HB_MEMBER { cCodPrv} ; IIF( !.F., s_oClass:AddMultiData(, Space( 12 ), nScope + IIF( .F., 32, 0 ), { "cCodPrv" }, .F., .F. ), )
   _HB_MEMBER { cCodAlm} ; IIF( !.F., s_oClass:AddMultiData(, Space( 3 ), nScope + IIF( .F., 32, 0 ), { "cCodAlm" }, .F., .F. ), )

   _HB_MEMBER { lBlocked} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lBlocked" }, .F., .F. ), )

   _HB_MEMBER { oStock} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oStock" }, .F., .F. ), )
   _HB_MEMBER { dConsolidacion} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dConsolidacion" }, .F., .F. ), )

   _HB_MEMBER { aMovimiento} ; IIF( !.F., s_oClass:AddMultiClsData(, { "Entre almacenes", "Regularización", "Objetivos", "Consolidación" }, nScope + IIF( .F., 32, 0 ) + 64, { "aMovimiento" }, .F. ), )

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TSeaNumSer_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TSeaNumSer_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TSeaNumSer_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TSeaNumSer_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Activate( oMenuItem, oWnd, lStart); IIF( .F., s_oClass:ModMethod( "Activate", @TSeaNumSer_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Activate", @TSeaNumSer_Activate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Search( oNumSer); IIF( .F., s_oClass:ModMethod( "Search", @TSeaNumSer_Search(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Search", @TSeaNumSer_Search(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddMovAlm(); IIF( .F., s_oClass:ModMethod( "AddMovAlm", @TSeaNumSer_AddMovAlm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddMovAlm", @TSeaNumSer_AddMovAlm(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddAlbPrv(); IIF( .F., s_oClass:ModMethod( "AddAlbPrv", @TSeaNumSer_AddAlbPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlbPrv", @TSeaNumSer_AddAlbPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacPrv(); IIF( .F., s_oClass:ModMethod( "AddFacPrv", @TSeaNumSer_AddFacPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacPrv", @TSeaNumSer_AddFacPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddRctPrv(); IIF( .F., s_oClass:ModMethod( "AddRctPrv", @TSeaNumSer_AddRctPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRctPrv", @TSeaNumSer_AddRctPrv(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddAlbCli(); IIF( .F., s_oClass:ModMethod( "AddAlbCli", @TSeaNumSer_AddAlbCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlbCli", @TSeaNumSer_AddAlbCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacCli(); IIF( .F., s_oClass:ModMethod( "AddFacCli", @TSeaNumSer_AddFacCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacCli", @TSeaNumSer_AddFacCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddFacRec(); IIF( .F., s_oClass:ModMethod( "AddFacRec", @TSeaNumSer_AddFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacRec", @TSeaNumSer_AddFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddTikCli(); IIF( .F., s_oClass:ModMethod( "AddTikCli", @TSeaNumSer_AddTikCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddTikCli", @TSeaNumSer_AddTikCli(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddProSer(); IIF( .F., s_oClass:ModMethod( "AddProSer", @TSeaNumSer_AddProSer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddProSer", @TSeaNumSer_AddProSer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER AddMatSer(); IIF( .F., s_oClass:ModMethod( "AddMatSer", @TSeaNumSer_AddMatSer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddMatSer", @TSeaNumSer_AddMatSer(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Zoom(); IIF( .F., s_oClass:ModMethod( "Zoom", @TSeaNumSer_Zoom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Zoom", @TSeaNumSer_Zoom(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Visualizar(); IIF( .F., s_oClass:ModMethod( "Visualizar", @TSeaNumSer_Visualizar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Visualizar", @TSeaNumSer_Visualizar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Imprimir(); IIF( .F., s_oClass:ModMethod( "Imprimir", @TSeaNumSer_Imprimir(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Imprimir", @TSeaNumSer_Imprimir(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER nTreeImagen(); IIF( .F., s_oClass:ModMethod( "nTreeImagen", @TSeaNumSer_nTreeImagen(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "nTreeImagen", @TSeaNumSer_nTreeImagen(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   WITH OBJECT <|Self|;

      local cTexto   := ""

      if ::oHisMovT:Seek( Str( ::oMovSerS:nNumRem,9 ) + ::oMovSerS:cSufRem )
         cTexto      := ::aMovimiento[ Min( Max( ::oHisMovT:nTipMov, 1 ), 4 ) ]
      end

      Return ( cTexto )

   >; _HB_MEMBER cTextoMovimiento(); IIF( .F., s_oClass:ModInline( "cTextoMovimiento", HB_QWith(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "cTextoMovimiento", HB_QWith(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) ); END

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TSeaNumSer ;



UTILITY STATIC function TSeaNumSer_OpenFiles() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   local oBlock
   local oError
   local lOpenFiles     := .T.

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      ::oDbfIva := DbfServer( "TIva.Dbf", ):NewOpen( "TIva.Dbf",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfIva:AddBag( "TIva.Cdx" ) ; ::oDbfIva:AddBag( ) ; ::oDbfIva:AutoIndex()

      ::oDbfArt := DbfServer( "Articulo.Dbf", ):NewOpen( "Articulo.Dbf",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "Articulo.Cdx" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

      ::oDbfCli := DbfServer( "Client.Dbf", ):NewOpen( "Client.Dbf",, ( cDriver() ),, ( cPatCli() ), .F., .T., .F., .F. ) ; ::oDbfCli:AddBag( "Client.Cdx" ) ; ::oDbfCli:AddBag( ) ; ::oDbfCli:AutoIndex()

      ::oDbfPrv := DbfServer( "Provee.Dbf", ):NewOpen( "Provee.Dbf",, ( cDriver() ),, ( cPatPrv() ), .F., .T., .F., .F. ) ; ::oDbfPrv:AddBag( "Provee.Cdx" ) ; ::oDbfPrv:AddBag( ) ; ::oDbfPrv:AutoIndex()

      ::oHisMovT := DbfServer( "HisMov.Dbf", ):NewOpen( "HisMov.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oHisMovT:AddBag( "HisMov.Cdx" ) ; ::oHisMovT:AddBag( ) ; ::oHisMovT:AutoIndex()

      ::oMovSerS := DbfServer( "MovSer.Dbf", ):NewOpen( "MovSer.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMovSerS:AddBag( "MovSer.Cdx" ) ; ::oMovSerS:AddBag( ) ; ::oMovSerS:AutoIndex()
      ::oMovSerS:OrdSetFocus( "cNumSer" )

      ::oAlbPrvT := DbfServer( "AlbProvT.Dbf", ):NewOpen( "AlbProvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvT:AddBag( "AlbProvT.Cdx" ) ; ::oAlbPrvT:AddBag( ) ; ::oAlbPrvT:AutoIndex()

      ::oAlbPrvL := DbfServer( "AlbProvL.Dbf", ):NewOpen( "AlbProvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvL:AddBag( "AlbProvL.Cdx" ) ; ::oAlbPrvL:AddBag( ) ; ::oAlbPrvL:AutoIndex()

      ::oAlbPrvS := DbfServer( "AlbPrvS.Dbf", ):NewOpen( "AlbPrvS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbPrvS:AddBag( "AlbPrvS.Cdx" ) ; ::oAlbPrvS:AddBag( ) ; ::oAlbPrvS:AutoIndex()
      ::oAlbPrvS:OrdSetFocus( "cNumSer" )

      ::oFacPrvT := DbfServer( "FacPrvT.Dbf", ):NewOpen( "FacPrvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvT:AddBag( "FacPrvT.Cdx" ) ; ::oFacPrvT:AddBag( ) ; ::oFacPrvT:AutoIndex()

      ::oFacPrvL := DbfServer( "FacPrvL.Dbf", ):NewOpen( "FacPrvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvL:AddBag( "FacPrvL.Cdx" ) ; ::oFacPrvL:AddBag( ) ; ::oFacPrvL:AutoIndex()

      ::oFacPrvS := DbfServer( "FacPrvS.Dbf", ):NewOpen( "FacPrvS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacPrvS:AddBag( "FacPrvS.Cdx" ) ; ::oFacPrvS:AddBag( ) ; ::oFacPrvS:AutoIndex()
      ::oFacPrvS:OrdSetFocus( "cNumSer" )

      ::oRctPrvT := DbfServer( "RctPrvT.Dbf", ):NewOpen( "RctPrvT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvT:AddBag( "RctPrvT.Cdx" ) ; ::oRctPrvT:AddBag( ) ; ::oRctPrvT:AutoIndex()

      ::oRctPrvL := DbfServer( "RctPrvL.Dbf", ):NewOpen( "RctPrvL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvL:AddBag( "RctPrvL.Cdx" ) ; ::oRctPrvL:AddBag( ) ; ::oRctPrvL:AutoIndex()

      ::oRctPrvS := DbfServer( "RctPrvS.Dbf", ):NewOpen( "RctPrvS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oRctPrvS:AddBag( "RctPrvS.Cdx" ) ; ::oRctPrvS:AddBag( ) ; ::oRctPrvS:AutoIndex()
      ::oRctPrvS:OrdSetFocus( "cNumSer" )

      ::oAlbCliT := DbfServer( "AlbCliT.Dbf", ):NewOpen( "AlbCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "AlbCliT.Cdx" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

      ::oAlbCliL := DbfServer( "AlbCliL.Dbf", ):NewOpen( "AlbCliL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "AlbCliL.Cdx" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

      ::oAlbCliS := DbfServer( "AlbCliS.Dbf", ):NewOpen( "AlbCliS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliS:AddBag( "AlbCliS.Cdx" ) ; ::oAlbCliS:AddBag( ) ; ::oAlbCliS:AutoIndex()
      ::oAlbCliS:OrdSetFocus( "cNumSer" )

      ::oFacCliT := DbfServer( "FacCliT.Dbf", ):NewOpen( "FacCliT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliT:AddBag( "FacCliT.Cdx" ) ; ::oFacCliT:AddBag( ) ; ::oFacCliT:AutoIndex()

      ::oFacCliL := DbfServer( "FacCliL.Dbf", ):NewOpen( "FacCliL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FacCliL.Cdx" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()
      ::oFacCliL:OrdSetFocus( "cRef" )

      ::oFacCliS := DbfServer( "FacCliS.Dbf", ):NewOpen( "FacCliS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliS:AddBag( "FacCliS.Cdx" ) ; ::oFacCliS:AddBag( ) ; ::oFacCliS:AutoIndex()
      ::oFacCliS:OrdSetFocus( "cNumSer" )

      ::oFacRecT := DbfServer( "FacRecT.Dbf", ):NewOpen( "FacRecT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecT:AddBag( "FacRecT.Cdx" ) ; ::oFacRecT:AddBag( ) ; ::oFacRecT:AutoIndex()

      ::oFacRecL := DbfServer( "FacRecL.Dbf", ):NewOpen( "FacRecL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecL:AddBag( "FacRecL.Cdx" ) ; ::oFacRecL:AddBag( ) ; ::oFacRecL:AutoIndex()
      ::oFacRecL:OrdSetFocus( "cRef" )

      ::oFacRecS := DbfServer( "FacRecS.Dbf", ):NewOpen( "FacRecS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacRecS:AddBag( "FacRecS.Cdx" ) ; ::oFacRecS:AddBag( ) ; ::oFacRecS:AutoIndex()
      ::oFacRecS:OrdSetFocus( "cNumSer" )

      ::oTikCliT := DbfServer( "TikeT.Dbf", ):NewOpen( "TikeT.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TikeT.Cdx" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

      ::oTikCliL := DbfServer( "TikeL.Dbf", ):NewOpen( "TikeL.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TikeL.Cdx" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()
      ::oTikCliL:OrdSetFocus( "cCbaTil" )

      ::oTikCliS := DbfServer( "TikeS.Dbf", ):NewOpen( "TikeS.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliS:AddBag( "TikeS.Cdx" ) ; ::oTikCliS:AddBag( ) ; ::oTikCliS:AutoIndex()
      ::oTikCliS:OrdSetFocus( "cNumSer" )

      ::oDbfAlm := DbfServer( "Almacen.Dbf", ):NewOpen( "Almacen.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oDbfAlm:AddBag( "Almacen.Cdx" ) ; ::oDbfAlm:AddBag( ) ; ::oDbfAlm:AutoIndex()

      ::oProCabT := DbfServer( "ProCab.Dbf", ):NewOpen( "ProCab.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProCabT:AddBag( "ProCab.Cdx" ) ; ::oProCabT:AddBag( ) ; ::oProCabT:AutoIndex()

      ::oProSerS := DbfServer( "ProSer.Dbf", ):NewOpen( "ProSer.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oProSerS:AddBag( "ProSer.Cdx" ) ; ::oProSerS:AddBag( ) ; ::oProSerS:AutoIndex()
      ::oProSerS:OrdSetFocus( "cNumSer" )

      ::oMatSerS := DbfServer( "MatSer.Dbf", ):NewOpen( "MatSer.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oMatSerS:AddBag( "MatSer.Cdx" ) ; ::oMatSerS:AddBag( ) ; ::oMatSerS:AutoIndex()
      ::oMatSerS:OrdSetFocus( "cNumSer" )

      ::oOperacion := DbfServer( "Operacio.Dbf", ):NewOpen( "Operacio.Dbf",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oOperacion:AddBag( "Operacio.Cdx" ) ; ::oOperacion:AddBag( ) ; ::oOperacion:AutoIndex()

      ::oDbfTmp         := DbfServer( "SeaNum", SubStr( Str( Seconds() ), -6 ) ):New( "SeaNum", "SeaNum", cLocalDriver(), , cPatTmp() )

      ::oDbfTmp:AddField( "cTipDoc", "C", 40, 0 )
      ::oDbfTmp:AddField( "cNumDoc", "C", 12, 0 )
      ::oDbfTmp:AddField( "cDoc",    "C", 12, 0 )
      ::oDbfTmp:AddField( "cCodArt", "C", 18, 0 )
      ::oDbfTmp:AddField( "dFecDoc", "D",  8, 0 )
      ::oDbfTmp:AddField( "cCodCli", "C", 12, 0 )
      ::oDbfTmp:AddField( "cCliPrv", "C", 50, 0 )
      ::oDbfTmp:AddField( "cCodObr", "C", 10, 0 )
      ::oDbfTmp:AddField( "cCodAlm", "C",  3, 0 )
      ::oDbfTmp:AddField( "nNumLin", "N",  4, 0 )

      ::oDbfTmp:Create()
      ::oDbfTmp:Activate( .F., .F. )

      ::oDbfTmp:AddTmpIndex( "cTipDoc" , "SeaNum" , "cTipdoc" )
      ::oDbfTmp:AddTmpIndex( "cNumDoc" , "SeaNum" , "cNumDoc" )
      ::oDbfTmp:AddTmpIndex( "cDoc"    , "SeaNum" , "cDoc"    )
      ::oDbfTmp:AddTmpIndex( "cCodArt" , "SeaNum" , "cCodArt" )
      ::oDbfTmp:AddTmpIndex( "cCodCli" , "SeaNum" , "cCodCli" )
      ::oDbfTmp:AddTmpIndex( "cCliPrv" , "SeaNum" , "cCliPrv" )
      ::oDbfTmp:AddTmpIndex( "cCodObr" , "SeaNum" , "cCodObr" )
      ::oDbfTmp:AddTmpIndex( "cCodAlm" , "SeaNum" , "cCodAlm" )
      ::oDbfTmp:AddTmpIndex( "nNumLin" , "SeaNum" , "nNumLin" )
      ::oDbfTmp:AddTmpIndex( "dFecDoc" , "SeaNum" , "dFecDoc" )

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de números de serie" )

      ::CloseFiles()

      lOpenFiles     := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpenfiles )



UTILITY STATIC function TSeaNumSer_CloseFiles() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   if !Empty( ::oDbfIva )
      ::oDbfIva:End()
   end

   if !Empty( ::oDbfArt )
      ::oDbfArt:End()
   end

   if !Empty( ::oDbfCli )
      ::oDbfCli:End()
   end

   if !Empty( ::oDbfPrv )
      ::oDbfPrv:End()
   end

   if !Empty( ::oHisMovT )
      ::oHisMovT:End()
   end

   if !Empty( ::oMovSerS )
      ::oMovSerS:End()
   end

   if !Empty( ::oAlbPrvT )
      ::oAlbPrvT:End()
   end

   if !Empty( ::oAlbPrvL )
      ::oAlbPrvL:End()
   end

   if !Empty( ::oAlbPrvS )
      ::oAlbPrvS:End()
   end

   if !Empty( ::oFacPrvT )
      ::oFacPrvT:End()
   end

   if !Empty( ::oFacPrvL )
      ::oFacPrvL:End()
   end

   if !Empty( ::oFacPrvS )
      ::oFacPrvS:End()
   end

   if !Empty( ::oRctPrvT )
      ::oRctPrvT:End()
   end

   if !Empty( ::oRctPrvL )
      ::oRctPrvL:End()
   end

   if !Empty( ::oRctPrvS )
      ::oRctPrvS:End()
   end

   if !Empty( ::oAlbCliT )
      ::oAlbCliT:End()
   end

   if !Empty( ::oAlbCliL )
      ::oAlbCliL:End()
   end

   if !Empty( ::oAlbCliS )
      ::oAlbCliS:End()
   end

   if !Empty( ::oFacCliT )
      ::oFacCliT:End()
   end

   if !Empty( ::oFacCliL )
      ::oFacCliL:End()
   end

   if !Empty( ::oFacCliS )
      ::oFacCliS:End()
   end

   if !Empty( ::oFacRecT )
      ::oFacRecT:End()
   end

   if !Empty( ::oFacRecL )
      ::oFacRecL:End()
   end

   if !Empty( ::oFacRecS )
      ::oFacRecS:End()
   end

   if !Empty( ::oTikCliT )
      ::oTikCliT:End()
   end

   if !Empty( ::oTikCliL )
      ::oTikCliL:End()
   end

   if !Empty( ::oTikCliS )
      ::oTikCliS:End()
   end

   if !Empty( ::oDbfAlm )
      ::oDbfAlm:End()
   end

   if !Empty( ::oDbfTmp )
      ::oDbfTmp:End()
   end

   if !Empty( ::oProCabT )
      ::oProCabT:End()
   end

   if !Empty( ::oProSerS )
      ::oProSerS:End()
   end

   if !Empty( ::oMatSerS )
      ::oMatSerS:End()
   end

   if !Empty( ::oOperacion )
      ::oOperacion:End()
   end

   fErase( cPatTmp() + "SeaNum.Dbf" )
   fErase( cPatTmp() + "SeaNum.Cdx" )

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_Activate( oMenuItem, oWnd, lStart) ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   local oDlg
   local oBmp
   local nLevel
   local oCodArt
   local oCodAlm
   local oSayArt
   local cSayArt        := ""
   local oNumSer
   local oCodCli
   local oSayCli
   local cSayCli        := ""
   local oCodPrv
   local oSayPrv
   local cSayPrv        := ""
   local oBotonImprimir
   local oBotonVer
   local oBotonZoom
   local oBotonInforme
   local oBtnCancel
   local oBtnBuscar

   IIF( oMenuItem == nil, oMenuItem := "01022", ) ;



   nLevel            := nLevelUsr( oMenuItem )

   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return nil
   end



   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !::OpenFiles()
      return nil
    end

   oDlg = TDialog():New(,,,,, "SeaNumSer",, .F.,,,,, oWnd(), .F.,,,,,, .F., )




   oBmp := TBitmap():ReDefine( 800, "Package_Alpha_48",, oDlg,,, .F., .F.,,, .F.,,, .F. )







   oCodArt := TGetHlp():ReDefine( ( 100 ), { | u | If( PCount()==0, ::cCodArt, ::cCodArt:= u ) }, oDlg,,, {||    cArticulo( oCodArt, ::oDbfArt:cAlias, oSayArt )},,,,,, .F., {||     ( !::lBlocked )},, .F., .F.,,,,, {|Self|BrwArticulo( oCodArt, oSayArt )}, nil, "LUPA",, )




   oSayArt := TGetHlp():ReDefine( ( 101 ), { | u | If( PCount()==0, cSayArt, cSayArt:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




   oNumSer := TGetHlp():ReDefine( ( 110 ), { | u | If( PCount()==0, ::cNumSer, ::cNumSer:= u ) }, oDlg,,,,,,,,, .F., {||     ( !::lBlocked )},, .F., .F.,,,,,, nil,,, )







   oCodCli := TGetHlp():ReDefine( ( 120 ), { | u | If( PCount()==0, ::cCodCli, ::cCodCli:= u ) }, oDlg,,, {||    cClient( oCodCli, ::oDbfCli:cAlias, oSayCli )},,,,,, .F., {||     ( !::lBlocked )},, .F., .F.,,,,, {|Self|BrwClient( oCodCli, oSayCli )}, nil, "LUPA",, )




   oSayCli := TGetHlp():ReDefine( ( 121 ), { | u | If( PCount()==0, cSayCli, cSayCli:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )







   oCodPrv := TGetHlp():ReDefine( ( 130 ), { | u | If( PCount()==0, ::cCodPrv, ::cCodPrv:= u ) }, oDlg,,, {||    cProvee( oCodPrv, ::oDbfPrv:cAlias, oSayPrv )},,,,,, .F., {||     ( !::lBlocked )},, .F., .F.,,,,, {|Self|BrwProvee( oCodPrv, oSayPrv )}, nil, "LUPA",, )




   oSayPrv := TGetHlp():ReDefine( ( 131 ), { | u | If( PCount()==0, cSayPrv, cSayPrv:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )








   oCodAlm := TGetHlp():ReDefine( ( 160 ), { | u | If( PCount()==0, ::cCodAlm, ::cCodAlm:= u ) }, oDlg,,, {||    ( cAlmacen( oCodAlm, ::oDbfAlm:cAlias, oCodAlm:oHelpText ) )},,,,,, .F., {||     ( !::lBlocked )},, .F., .F.,,,,, {|Self|( BrwAlmacen( oCodAlm, oCodAlm:oHelpText ) )}, nil, "LUPA",, ( 161 ) )




   ::oSayCompras := TSay():ReDefine( ( 200 ), {|| ::nSayCompras}, oDlg, MasUnd(),,, .F.,, .F., .F. )




   ::oSayVentas := TSay():ReDefine( ( 201 ), {|| ::nSayVentas}, oDlg, MasUnd(),,, .F.,, .F., .F. )




   ::oSayProduccion := TSay():ReDefine( ( 202 ), {|| ::nSayProduccion}, oDlg, MasUnd(),,, .F.,, .F., .F. )




   ::oSayTotal := TSay():ReDefine( ( 203 ), {|| ::nSayTotal}, oDlg, MasUnd(),,, .F.,, .F., .F. )



   ::oBrw               := TXBrowse():New( oDlg )

   ::oBrw:bClrSel       := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   ::oBrw:bClrSelFocus  := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   ::oBrw:nMarqueeStyle := 5

   ::oBrw:SetODbf( ::oDbfTmp )

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Tipo de documento"
      :cSortOrder       := "cTipDoc"
      :bStrData         := {|| ::oDbfTmp:cTipDoc }
      :bBmpData         := {|| ::nTreeImagen() }
      :nWidth           := 120
      :AddResource( "Clipboard_empty_businessman_16"  )
      :AddResource( "Document_plain_businessman_16"   )
      :AddResource( "Document_businessman_16"         )
      :AddResource( "Document_navigate_cross_16"      )
      :AddResource( "Document_delete_16"              )
      :AddResource( "Clipboard_empty_user1_16"        )
      :AddResource( "Document_plain_user1_16"         )
      :AddResource( "Document_user1_16"               )
      :AddResource( "Cashier_user1_16"                )
      :AddResource( "Worker2_Form_Red_16"             )
      :AddResource( "Pencil_Package_16"               )
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Número"
      :cSortOrder       := "cNumDoc"
      :bStrData         := {|| Alltrim( ::oDbfTmp:cNumDoc ) }
      :nWidth           := 80
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Artículo"
      :cSortOrder       := "cCodArt"
      :bStrData         := {|| ::oDbfTmp:cCodArt }
      :nWidth           := 80
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Fecha"
      :cSortOrder       := "dFecDoc"
      :bStrData         := {|| Dtoc( ::oDbfTmp:dFecDoc ) }
      :nWidth           := 80
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Cliente/Proveedor"
      :cSortOrder       := "cCodCli"
      :bStrData         := {|| Rtrim( ::oDbfTmp:cCodCli ) + Space( 1 ) + Rtrim( ::oDbfTmp:cCliPrv ) }
      :nWidth           := 200
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Obra"
      :cSortOrder       := "cCodObr"
      :lHide            := .T.
      :bStrData         := {|| ::oDbfTmp:cCodObr }
      :nWidth           := 60
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Almacen"
      :cSortOrder       := "cCodAlm"
      :bStrData         := {|| ::oDbfTmp:cCodAlm }
      :nWidth           := 60
   end

   with object ( ::oBrw:AddCol() )
      :cHeader          := "Num."
      :bEditValue       := {|| Trans( ::oDbfTmp:nNumLin, "9999" ) }
      :nWidth           := 35
      :nDataStrAlign    := 1
      :nHeadStrAlign    := 1
   end

   ::oBrw:bRClicked     := {| nRow, nCol, nFlags | ::oBrw:RButtonDown( nRow, nCol, nFlags ) }
   ::oBrw:bLDblClick    := {|| ::Zoom() }

   ::oBrw:CreateFromResource( 140 )



   ::oMetMsg := TMeter():ReDefine( 150, { | u | If( PCount()==0, ::nMetMsg, ::nMetMsg:= u ) },, oDlg, .F.,,, .F.,,,, )





   oBtnBuscar := TButton():ReDefine( 500, {||( if( ::Search( oNumSer, oBtnCancel, oBtnBuscar ), ( oBotonImprimir:Show(), oBotonVer:Show(), oBotonZoom:Show(), oBotonInforme:Enable() ), ) )}, oDlg,,, .F., {||     ( !::lBlocked )},,, .F. )




   oBtnCancel := TButton():ReDefine( 510, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )




   oBotonImprimir := TButton():ReDefine( 540, {||( ::Imprimir() )}, oDlg,,, .F.,,,, .F. )




   oBotonVer := TButton():ReDefine( 530, {||( ::Visualizar() )}, oDlg,,, .F.,,,, .F. )




   oBotonZoom := TButton():ReDefine( 520, {||( ::Zoom() )}, oDlg,,, .F.,,,, .F. )




   oBotonInforme := TButton():ReDefine( 1, {||( TInfSeaNum():New( "Informe detallado de series", , , , , , ::oDbfTmp ):Play() )}, oDlg,,, .F.,,,, .F. )

   if IsTrue( lStart )
      oDlg:bStart := {|| if( ::Search( oNumSer, oBtnCancel, oBtnBuscar ), ( oBotonImprimir:Show(), oBotonVer:Show(), oBotonZoom:Show(), oBotonInforme:Enable() ), ) }
   end

   oDlg:AddFastKey( 116, {|| oBtnBuscar:Click() } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( oBotonImprimir:Hide(), oBotonVer:Hide(), oBotonZoom:Hide(), oBotonInforme:Disable() )}, oDlg:bRClicked,,, )

   ::CloseFiles()

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_Search( oNumSer, oBtnCancel, oBtnBuscar) ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   if Empty( ::cNumSer )
      MsgStop( "Debe introducir un número de serie" )
      oNumSer:SetFocus()
      Return ( .F. )
   end

   oBtnCancel:Disable()
   oBtnBuscar:Disable()

   CursorWait()

   ::oDbfTmp:Zap()

   ::nSayCompras        := 0
   ::nSayVentas         := 0
   ::nSayProduccion     := 0
   ::nSayTotal          := 0



   if !Empty( ::oStock )
      ::dConsolidacion  := ::oStock:GetConsolidacion( ::cCodArt )
   end



   ::oMetMsg:cText   := "Movimientos de almacen"

   ::oMetMsg:SetTotal( ::oMovSerS:LastRec() )

   if ::oMovSerS:Seek( ::cNumSer )

      while ( Rtrim( ::oMovSerS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oMovSerS:Eof()

         ::AddMovAlm()

         ::oMovSerS:Skip()

         ::oMetMsg:Set( ::oMovSerS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oMovSerS:LastRec() )



   ::oMetMsg:cText   := "Albaranes proveedor"

   ::oMetMsg:SetTotal( ::oAlbPrvS:LastRec() )

   if ::oAlbPrvS:Seek( ::cNumSer )

      while ( Rtrim( ::oAlbPrvS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oAlbPrvS:Eof()

         ::AddAlbPrv()

         ::oAlbPrvS:Skip()

         ::oMetMsg:Set( ::oAlbPrvS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oAlbPrvS:LastRec() )



   ::oMetMsg:cText   := "Facturas proveedor"

   ::oMetMsg:SetTotal( ::oFacPrvS:LastRec() )

   if ::oFacPrvS:Seek( ::cNumSer )

      while ( Rtrim( ::oFacPrvS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oFacPrvS:Eof()

         ::AddFacPrv()

         ::oFacPrvS:Skip()

         ::oMetMsg:Set( ::oFacPrvS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oFacPrvS:LastRec() )



   ::oMetMsg:cText   := "Facturas rectificativas de proveedor"

   ::oMetMsg:SetTotal( ::oRctPrvS:LastRec() )

   if ::oRctPrvS:Seek( ::cNumSer )

      while ( Rtrim( ::oRctPrvS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oRctPrvS:Eof()

         ::AddRctPrv()

         ::oRctPrvS:Skip()

         ::oMetMsg:Set( ::oRctPrvS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oRctPrvS:LastRec() )



   ::oMetMsg:cText   := "Albaranes de clientes"

   ::oMetMsg:SetTotal( ::oAlbCliS:LastRec() )

   if ::oAlbCliS:Seek( ::cNumSer )

      while ( Rtrim( ::oAlbCliS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oAlbCliS:Eof()

         ::AddAlbCli()

         ::oAlbCliS:Skip()

         ::oMetMsg:Set( ::oAlbCliS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oAlbCliS:LastRec() )



   ::oMetMsg:cText   := "Facturas clientes"

   ::oMetMsg:SetTotal( ::oFacCliL:LastRec() )

   if ::oFacCliS:Seek( ::cNumSer )

      while ( Rtrim( ::oFacCliS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oFacCliS:Eof()

         ::AddFacCli()

         ::oFacCliS:Skip()

         ::oMetMsg:Set( ::oFacCliS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oFacCliL:LastRec() )



   ::oMetMsg:cText   := "Facturas rectificativas de clientes"

   ::oMetMsg:SetTotal( ::oFacRecL:LastRec() )

   if ::oFacRecS:Seek( ::cNumSer )

      while ( Rtrim( ::oFacRecS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oFacRecS:Eof()

         ::AddFacRec()

         ::oFacRecS:Skip()

         ::oMetMsg:Set( ::oFacRecS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oFacRecL:LastRec() )



   ::oMetMsg:cText   := "Tikets de cliente"

   ::oMetMsg:SetTotal( ::oTikCliS:LastRec() )

   if ::oTikCliS:Seek( ::cNumSer )

      while ( Rtrim( ::oTikCliS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oTikCliS:Eof()

         ::AddTikCli()

         ::oTikCliS:Skip()

         ::oMetMsg:Set( ::oTikCliS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oTikCliS:LastRec() )



   ::oMetMsg:cText   := "Materiales producidos"

   ::oMetMsg:SetTotal( ::oProSerS:LastRec() )

   if ::oProSerS:Seek( ::cNumSer )

      while ( Rtrim( ::oProSerS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oProSerS:Eof()

         ::AddProSer()

         ::oProSerS:Skip()

         ::oMetMsg:Set( ::oProSerS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oProSerS:LastRec() )



   ::oMetMsg:cText   := "Materiales consumidos"

   ::oMetMsg:SetTotal( ::oMatSerS:LastRec() )

   if ::oMatSerS:Seek( ::cNumSer )

      while ( Rtrim( ::oMatSerS:cNumSer ) == Rtrim( ::cNumSer ) ) .AND. !::oMatSerS:Eof()

         ::AddMatSer()

         ::oMatSerS:Skip()

         ::oMetMsg:Set( ::oMatSerS:OrdKeyNo() )

      end

   end

   ::oMetMsg:Set( ::oMatSerS:LastRec() )



   ::oDbfTmp:GoTop()

   ::oMetMsg:cText   := "Proceso finalizado"

   ::oMetMsg:Set( 0 )
   ::oMetMsg:Refresh( .F. )



   ::oSayCompras:Refresh()
   ::oSayVentas:Refresh()
   ::oSayProduccion:Refresh()

   ::oSayTotal:SetText( ::nSayCompras - ::nSayVentas + ::nSayProduccion )

   ::oBrw:Refresh( .T. )

   CursorWE()

   oBtnCancel:Enable()

   if !::lBlocked
      oBtnBuscar:Enable()
   end

RETURN ( .T. )



UTILITY STATIC function TSeaNumSer_AddMovAlm() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer



   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oMovSerS:cCodArt ) ) )   .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oMovSerS:cAlmOrd ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oMovSerS:dFecRem >= ::dConsolidacion ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := ::cTextoMovimiento()
      ::oDbfTmp:cNumDoc := Str( ::oMovSerS:nNumRem,9 ) + "/" + ::oMovSerS:cSufRem
      ::oDbfTmp:cDoc    := Str( ::oMovSerS:nNumRem,9 ) + "/" + ::oMovSerS:cSufRem
      ::oDbfTmp:cCodArt := ::oMovSerS:cCodArt
      ::oDbfTmp:nNumLin := ::oMovSerS:nNumLin
      ::oDbfTmp:cCodAlm := ::oMovSerS:cAlmOrd
      ::oDbfTmp:dFecDoc := ::oMovSerS:dFecRem
      ::oDbfTmp:cCodCli := ""
      ::oDbfTmp:cCliPrv := ""
      ::oDbfTmp:Save()

      if ::oMovSerS:lUndNeg
         ::nSayCompras--
      else
         ::nSayCompras++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddAlbPrv() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oAlbPrvS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oAlbPrvS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oAlbPrvS:dFecAlb >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodPrv ) .OR. ( Rtrim( ::cCodPrv ) == Rtrim( oRetFld( ::oAlbPrvS:cSerAlb + Str( ::oAlbPrvS:nNumAlb ) + ::oAlbPrvS:cSufAlb, ::oAlbPrvT, "cCodPrv" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Albarán de proveedor"
      ::oDbfTmp:cNumDoc := ::oAlbPrvS:cSerAlb + "/" + Ltrim( Str( ::oAlbPrvS:nNumAlb ) ) + "/" + ::oAlbPrvS:cSufAlb
      ::oDbfTmp:cDoc    := ::oAlbPrvS:cSerAlb + Str( ::oAlbPrvS:nNumAlb ) + ::oAlbPrvS:cSufAlb
      ::oDbfTmp:cCodArt := ::oAlbPrvS:cRef
      ::oDbfTmp:nNumLin := ::oAlbPrvS:nNumLin
      ::oDbfTmp:cCodAlm := ::oAlbPrvS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oAlbPrvS:cSerAlb + Str( ::oAlbPrvS:nNumAlb ) + ::oAlbPrvS:cSufAlb, ::oAlbPrvT, "dFecAlb" )
      ::oDbfTmp:cCodCli := oRetFld( ::oAlbPrvS:cSerAlb + Str( ::oAlbPrvS:nNumAlb ) + ::oAlbPrvS:cSufAlb, ::oAlbPrvT, "cCodPrv" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oAlbPrvS:cSerAlb + Str( ::oAlbPrvS:nNumAlb ) + ::oAlbPrvS:cSufAlb, ::oAlbPrvT, "cNomPrv" )
      ::oDbfTmp:Save()

      if ::oAlbPrvS:lUndNeg
         ::nSayCompras--
      else
         ::nSayCompras++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddFacPrv() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oFacPrvS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oFacPrvS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oFacPrvS:dFecFac >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodPrv ) .OR. ( Rtrim( ::cCodPrv ) == Rtrim( oRetFld( ::oFacPrvS:cSerFac + Str( ::oFacPrvS:nNumFac ) + ::oFacPrvS:cSufFac, ::oFacPrvT, "cCodPrv" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Factura de proveedor"
      ::oDbfTmp:cNumDoc := ::oFacPrvS:cSerFac + "/" + Ltrim( Str( ::oFacPrvS:nNumFac ) ) + "/" + ::oFacPrvS:cSufFac
      ::oDbfTmp:cDoc    := ::oFacPrvS:cSerFac + Str( ::oFacPrvS:nNumFac ) + ::oFacPrvS:cSufFac
      ::oDbfTmp:cCodArt := ::oFacPrvS:cRef
      ::oDbfTmp:nNumLin := ::oFacPrvS:nNumLin
      ::oDbfTmp:cCodAlm := ::oFacPrvS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oFacPrvS:cSerFac + Str( ::oFacPrvS:nNumFac ) + ::oFacPrvS:cSufFac, ::oFacPrvT, "dFecFac" )
      ::oDbfTmp:cCodCli := oRetFld( ::oFacPrvS:cSerFac + Str( ::oFacPrvS:nNumFac ) + ::oFacPrvS:cSufFac, ::oFacPrvT, "cCodPrv" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oFacPrvS:cSerFac + Str( ::oFacPrvS:nNumFac ) + ::oFacPrvS:cSufFac, ::oFacPrvT, "cNomPrv" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oFacPrvS:lUndNeg
         ::nSayCompras--
      else
         ::nSayCompras++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddRctPrv() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oRctPrvS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oRctPrvS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oRctPrvS:dFecFac >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodPrv ) .OR. ( Rtrim( ::cCodPrv ) == Rtrim( oRetFld( ::oRctPrvS:cSerFac + Str( ::oRctPrvS:nNumFac ) + ::oRctPrvS:cSufFac, ::oRctPrvT, "cCodPrv" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Factura rectificativa de proveedor"
      ::oDbfTmp:cNumDoc := ::oRctPrvS:cSerFac + "/" + Ltrim( Str( ::oRctPrvS:nNumFac ) ) + "/" + ::oRctPrvS:cSufFac
      ::oDbfTmp:cDoc    := ::oRctPrvS:cSerFac + Str( ::oRctPrvS:nNumFac ) + ::oRctPrvS:cSufFac
      ::oDbfTmp:cCodArt := ::oRctPrvS:cRef
      ::oDbfTmp:nNumLin := ::oRctPrvS:nNumLin
      ::oDbfTmp:cCodAlm := ::oRctPrvS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oRctPrvS:cSerFac + Str( ::oRctPrvS:nNumFac ) + ::oRctPrvS:cSufFac, ::oRctPrvT, "dFecFac" )
      ::oDbfTmp:cCodCli := oRetFld( ::oRctPrvS:cSerFac + Str( ::oRctPrvS:nNumFac ) + ::oRctPrvS:cSufFac, ::oRctPrvT, "cCodPrv" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oRctPrvS:cSerFac + Str( ::oRctPrvS:nNumFac ) + ::oRctPrvS:cSufFac, ::oRctPrvT, "cNomPrv" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oRctPrvS:lUndNeg
         ::nSayCompras--
      else
         ::nSayCompras++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddAlbCli() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oAlbCliS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oAlbCliS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oAlbCliS:dFecAlb >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodPrv ) .OR. ( Rtrim( ::cCodPrv ) == Rtrim( oRetFld( ::oAlbCliS:cSerAlb + Str( ::oAlbCliS:nNumAlb ) + ::oAlbCliS:cSufAlb, ::oAlbCliT, "cCodPrv" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Albarán de cliente"
      ::oDbfTmp:cNumDoc := ::oAlbCliS:cSerAlb + "/" + Ltrim( Str( ::oAlbCliS:nNumAlb ) ) + "/" + ::oAlbCliS:cSufAlb
      ::oDbfTmp:cDoc    := ::oAlbCliS:cSerAlb + Str( ::oAlbCliS:nNumAlb ) + ::oAlbCliS:cSufAlb
      ::oDbfTmp:cCodArt := ::oAlbCliS:cRef
      ::oDbfTmp:nNumLin := ::oAlbCliS:nNumLin
      ::oDbfTmp:cCodAlm := ::oAlbCliS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oAlbCliS:cSerAlb + Str( ::oAlbCliS:nNumAlb ) + ::oAlbCliS:cSufAlb, ::oAlbCliT, "dFecAlb" )
      ::oDbfTmp:cCodCli := oRetFld( ::oAlbCliS:cSerAlb + Str( ::oAlbCliS:nNumAlb ) + ::oAlbCliS:cSufAlb, ::oAlbCliT, "cCodCli" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oAlbCliS:cSerAlb + Str( ::oAlbCliS:nNumAlb ) + ::oAlbCliS:cSufAlb, ::oAlbCliT, "cNomCli" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oAlbPrvS:lUndNeg
         ::nSayVentas--
      else
         ::nSayVentas++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddFacCli() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oFacCliS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oFacCliS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oFacCliS:dFecFac >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodCli ) .OR. ( Rtrim( ::cCodCli ) == Rtrim( oRetFld( ::oFacCliS:cSerFac + Str( ::oFacCliS:nNumFac ) + ::oFacCliS:cSufFac, ::oFacCliT, "cCodCli" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Factura de cliente"
      ::oDbfTmp:cNumDoc := ::oFacCliS:cSerFac + "/" + Ltrim( Str( ::oFacCliS:nNumFac ) ) + "/" + ::oFacCliS:cSufFac
      ::oDbfTmp:cDoc    := ::oFacCliS:cSerFac + Str( ::oFacCliS:nNumFac ) + ::oFacCliS:cSufFac
      ::oDbfTmp:cCodArt := ::oFacCliS:cRef
      ::oDbfTmp:nNumLin := ::oFacCliS:nNumLin
      ::oDbfTmp:cCodAlm := ::oFacCliS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oFacCliS:cSerFac + Str( ::oFacCliS:nNumFac ) + ::oFacCliS:cSufFac, ::oFacCliT, "dFecFac" )
      ::oDbfTmp:cCodCli := oRetFld( ::oFacCliS:cSerFac + Str( ::oFacCliS:nNumFac ) + ::oFacCliS:cSufFac, ::oFacCliT, "cCodCli" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oFacCliS:cSerFac + Str( ::oFacCliS:nNumFac ) + ::oFacCliS:cSufFac, ::oFacCliT, "cNomCli" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oFacPrvS:lUndNeg
         ::nSayVentas--
      else
         ::nSayVentas++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddFacRec() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oFacRecS:cRef ) ) )      .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oFacRecS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oFacRecS:dFecFac >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodCli ) .OR. ( Rtrim( ::cCodCli ) == Rtrim( oRetFld( ::oFacRecS:cSerFac + Str( ::oFacRecS:nNumFac ) + ::oFacRecS:cSufFac, ::oFacRecT, "cCodCli" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Factura rectificativa de cliente"
      ::oDbfTmp:cNumDoc := ::oFacRecS:cSerFac + "/" + Ltrim( Str( ::oFacRecS:nNumFac ) ) + "/" + ::oFacRecS:cSufFac
      ::oDbfTmp:cDoc    := ::oFacRecS:cSerFac + Str( ::oFacRecS:nNumFac ) + ::oFacRecS:cSufFac
      ::oDbfTmp:cCodArt := ::oFacRecS:cRef
      ::oDbfTmp:nNumLin := ::oFacRecS:nNumLin
      ::oDbfTmp:cCodAlm := ::oFacRecS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oFacRecS:cSerFac + Str( ::oFacRecS:nNumFac ) + ::oFacRecS:cSufFac, ::oFacRecT, "dFecFac" )
      ::oDbfTmp:cCodCli := oRetFld( ::oFacRecS:cSerFac + Str( ::oFacRecS:nNumFac ) + ::oFacRecS:cSufFac, ::oFacRecT, "cCodCli" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oFacRecS:cSerFac + Str( ::oFacRecS:nNumFac ) + ::oFacRecS:cSufFac, ::oFacRecT, "cNomCli" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oFacRecS:lUndNeg
         ::nSayVentas--
      else
         ::nSayVentas++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddTikCli() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer




   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oTikCliS:cCbaTil ) ) )   .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oTikCliS:cAlmLin ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oTikCliS:dFecTik >= ::dConsolidacion ) )       .AND. ( Empty( ::cCodCli ) .OR. ( Rtrim( ::cCodCli ) == Rtrim( oRetFld( ::oTikCliS:cSerTik + ::oTikCliS:cNumTik + ::oTikCliS:cSufTik, ::oTikCliT, "cCliTik" ) ) ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Tiket de cliente"
      ::oDbfTmp:cNumDoc := ::oTikCliS:cSerTik + "/" + Ltrim( ::oTikCliS:cNumTik ) + "/" + ::oTikCliS:cSufTik
      ::oDbfTmp:cDoc    := ::oTikCliS:cSerTik + ::oTikCliS:cNumTik + ::oTikCliS:cSufTik
      ::oDbfTmp:cCodArt := ::oTikCliS:cCbaTil
      ::oDbfTmp:nNumLin := ::oTikCliS:nNumLin
      ::oDbfTmp:cCodAlm := ::oTikCliS:cAlmLin
      ::oDbfTmp:dFecDoc := oRetFld( ::oTikCliS:cSerTik + ::oTikCliS:cNumTik + ::oTikCliS:cSufTik, ::oTikCliT, "dFecTik" )
      ::oDbfTmp:cCodCli := oRetFld( ::oTikCliS:cSerTik + ::oTikCliS:cNumTik + ::oTikCliS:cSufTik, ::oTikCliT, "cCodCli" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oTikCliS:cSerTik + ::oTikCliS:cNumTik + ::oTikCliS:cSufTik, ::oTikCliT, "cNomCli" )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oTikCliS:lUndNeg
         ::nSayVentas--
      else
         ::nSayVentas++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddProSer() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer



   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oProSerS:cCodArt ) ) )   .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oProSerS:cAlmOrd ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oProSerS:dFecOrd >= ::dConsolidacion ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Materiales producidos"
      ::oDbfTmp:cNumDoc := ::oProSerS:cSerOrd + "/" + Ltrim( Str( ::oProSerS:nNumOrd ) ) + "/" + ::oProSerS:cSufOrd
      ::oDbfTmp:cDoc    := ::oProSerS:cSerOrd + Str( ::oProSerS:nNumOrd ) + ::oProSerS:cSufOrd
      ::oDbfTmp:cCodArt := ::oProSerS:cCodArt
      ::oDbfTmp:nNumLin := ::oProSerS:nNumLin
      ::oDbfTmp:cCodAlm := ::oProSerS:cAlmOrd
      ::oDbfTmp:dFecDoc := oRetFld( ::oProSerS:cSerOrd + Str( ::oProSerS:nNumOrd ) + ::oProSerS:cSufOrd, ::oProCabT, "dFecOrd" )
      ::oDbfTmp:cCodCli := oRetFld( ::oProSerS:cSerOrd + Str( ::oProSerS:nNumOrd ) + ::oProSerS:cSufOrd, ::oProCabT, "cCodOpe" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oDbfTmp:cCodCli, ::oOperacion )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oProSerS:lUndNeg
         ::nSayProduccion--
      else
         ::nSayProduccion++
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_AddMatSer() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer



   if ( Empty( ::cCodArt ) .OR. ( Rtrim( ::cCodArt ) == Rtrim( ::oMatSerS:cCodArt ) ) )   .AND. ( Empty( ::cCodAlm ) .OR. ( Rtrim( ::cCodAlm ) == Rtrim( ::oMatSerS:cAlmOrd ) ) )   .AND. ( Empty( ::dConsolidacion ) .OR. ( ::oMatSerS:dFecOrd >= ::dConsolidacion ) )

      ::oDbfTmp:Append()
      ::oDbfTmp:cTipDoc := "Materiales consumidos"
      ::oDbfTmp:cNumDoc := ::oMatSerS:cSerOrd + "/" + Ltrim( Str( ::oMatSerS:nNumOrd ) ) + "/" + ::oMatSerS:cSufOrd
      ::oDbfTmp:cDoc    := ::oMatSerS:cSerOrd + Str( ::oMatSerS:nNumOrd ) + ::oMatSerS:cSufOrd
      ::oDbfTmp:cCodArt := ::oMatSerS:cCodArt
      ::oDbfTmp:nNumLin := ::oMatSerS:nNumLin
      ::oDbfTmp:cCodAlm := ::oMatSerS:cAlmOrd
      ::oDbfTmp:dFecDoc := oRetFld( ::oMatSerS:cSerOrd + Str( ::oMatSerS:nNumOrd ) + ::oMatSerS:cSufOrd, ::oProCabT, "dFecOrd" )
      ::oDbfTmp:cCodCli := oRetFld( ::oMatSerS:cSerOrd + Str( ::oMatSerS:nNumOrd ) + ::oMatSerS:cSufOrd, ::oProCabT, "cCodOpe" )
      ::oDbfTmp:cCliPrv := oRetFld( ::oDbfTmp:cCodCli, ::oOperacion )
      ::oDbfTmp:cCodObr := ""
      ::oDbfTmp:Save()

      if ::oMatSerS:lUndNeg
         ::nSayProduccion++
      else
         ::nSayProduccion--
      end

   end

RETURN ( Self )



UTILITY STATIC function TSeaNumSer_Zoom() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

    do case
      case AllTrim( ::oDbfTmp:cTipDoc ) == "Pedido a proveedor"
         ZooPedPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Albarán de proveedor"
         ZooAlbPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura de proveedor"
         ZooFacPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de proveedor"
         ZooRctPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Pedido de cliente"
         ZooPedCli( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Albarán de cliente"
         ZooAlbCli( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura de cliente"
         ZooFacCli( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de cliente"
         ZooFacRec( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Tiket de cliente"
         ZooTikCli( ::oDbfTmp:cDoc )
   endcase

return( Self )



UTILITY STATIC function TSeaNumSer_Visualizar() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   do case
      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido a proveedor"
         VisPedPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de proveedor"
         VisAlbPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de proveedor"
         VisFacPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de proveedor"
         VisRctPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido de cliente"
         VisPedCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de cliente"
         VisAlbCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de cliente"
         VisFacCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Tiket de cliente"
         VisTikCli( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de cliente"
         VisFacRec( ::oDbfTmp:cDoc )
   endcase

return( nil )



UTILITY STATIC function TSeaNumSer_Imprimir() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   do case
      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido a proveedor"
         PrnPedPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de proveedor"
         PrnAlbPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de proveedor"
         PrnFacPrv( ::oDbfTmp:cDoc )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de proveedor"
         PrnRctPrv( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido de cliente"
         PrnPedCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de cliente"
         PrnAlbCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de cliente"
         PrnFacCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Tiket de cliente"
         PrnTikCli( ::oDbfTmp:cDoc )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de cliente"
         PrnFacRec( ::oDbfTmp:cDoc )

   endcase

return( nil )



UTILITY STATIC function TSeaNumSer_nTreeImagen() ; local Self AS CLASS TSeaNumSer := QSelf() AS CLASS TSeaNumSer

   do case
      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido a proveedor"
         Return ( 1 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de proveedor"
         Return ( 2 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de proveedor"
         Return ( 3 )

      case AllTrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de proveedor"
         Return ( 4 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura rectificativa de cliente"
         Return ( 5 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Pedido de cliente"
         Return ( 6 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Albarán de cliente"
         Return ( 7 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Factura de cliente"
         Return ( 8 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Tiket de cliente"
         Return ( 9 )

      case Alltrim( ::oDbfTmp:cTipDoc ) == "Materiales producidos" .OR. Alltrim( ::oDbfTmp:cTipDoc ) == "Materiales consumidos"
         Return ( 10 )

      case aScan( ::aMovimiento, Alltrim( ::oDbfTmp:cTipDoc ) ) <> 0
         Return ( 11 )

   end

Return ( 1 )









_HB_CLASS TNumerosSerie ; UTILITY FUNCTION TNumerosSerie(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TNumerosSerie" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { oDlg} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDlg" }, .F., .F. ), )

   _HB_MEMBER { cCodArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCodArt" }, .F., .F. ), )
   _HB_MEMBER { cCodAlm} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCodAlm" }, .F., .F. ), )
   _HB_MEMBER { nNumLin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nNumLin" }, .F., .F. ), )

   _HB_MEMBER { oBrwSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oBrwSer" }, .F., .F. ), )
   _HB_MEMBER { aNumSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aNumSer" }, .F., .F. ), )
   _HB_MEMBER { aValSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aValSer" }, .F., .F. ), )
   _HB_MEMBER { cPreFix} ; IIF( !.F., s_oClass:AddMultiData(, Space( 18 ), nScope + IIF( .F., 32, 0 ), { "cPreFix" }, .F., .F. ), )
   _HB_MEMBER { oSerIni} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSerIni" }, .F., .F. ), )
   _HB_MEMBER { nSerIni} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSerIni" }, .F., .F. ), )
   _HB_MEMBER { oSerFin} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSerFin" }, .F., .F. ), )
   _HB_MEMBER { nSerFin} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nSerFin" }, .F., .F. ), )
   _HB_MEMBER { oNumGen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oNumGen" }, .F., .F. ), )
   _HB_MEMBER { nNumGen} ; IIF( !.F., s_oClass:AddMultiData(, 0, nScope + IIF( .F., 32, 0 ), { "nNumGen" }, .F., .F. ), )
   _HB_MEMBER { oSaySer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSaySer" }, .F., .F. ), )
   _HB_MEMBER { cSaySer} ; IIF( !.F., s_oClass:AddMultiData(, "", nScope + IIF( .F., 32, 0 ), { "cSaySer" }, .F., .F. ), )
   _HB_MEMBER { oProSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oProSer" }, .F., .F. ), )
   _HB_MEMBER { nProSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nProSer" }, .F., .F. ), )

   _HB_MEMBER { uTmpSer} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "uTmpSer" }, .F., .F. ), )

   _HB_MEMBER { aTmp} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aTmp" }, .F., .F. ), )
   _HB_MEMBER { nMode} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nMode" }, .F., .F. ), )

   _HB_MEMBER { oStock} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oStock" }, .F., .F. ), )

   _HB_MEMBER { nTotalUnidades} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTotalUnidades" }, .F., .F. ), )

   _HB_MEMBER { lAutoSerializacion} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lAutoSerializacion" }, .F., .F. ), )

   _HB_MEMBER { lCompras} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lCompras" }, .F., .F. ), )
   _HB_MEMBER { lTicket} ; IIF( !.F., s_oClass:AddMultiData(, .F., nScope + IIF( .F., 32, 0 ), { "lTicket" }, .F., .F. ), )

   _HB_MEMBER Resource(); IIF( .F., s_oClass:ModMethod( "Resource", @TNumerosSerie_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TNumerosSerie_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GenerarSeries(); IIF( .F., s_oClass:ModMethod( "GenerarSeries", @TNumerosSerie_GenerarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GenerarSeries", @TNumerosSerie_GenerarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lChequearSeries(); IIF( .F., s_oClass:ModMethod( "lChequearSeries", @TNumerosSerie_lChequearSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lChequearSeries", @TNumerosSerie_lChequearSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lValidarSeries(); IIF( .F., s_oClass:ModMethod( "lValidarSeries", @TNumerosSerie_lValidarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lValidarSeries", @TNumerosSerie_lValidarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SalvarSeries(); IIF( .F., s_oClass:ModMethod( "SalvarSeries", @TNumerosSerie_SalvarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SalvarSeries", @TNumerosSerie_SalvarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lChequearSalvarSeries(); IIF( .F., s_oClass:ModInline( "lChequearSalvarSeries", {|Self | Self, ( if( ::lChequearSeries(), ::SalvarSeries(), ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "lChequearSalvarSeries", {|Self | Self, ( if( ::lChequearSeries(), ::SalvarSeries(), ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER EliminarSeries(); IIF( .F., s_oClass:ModMethod( "EliminarSeries", @TNumerosSerie_EliminarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EliminarSeries", @TNumerosSerie_EliminarSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lStockSeries(); IIF( .F., s_oClass:ModInline( "lStockSeries", {|Self | Self, ( !::lUnidadesNegativas() .AND. !::lCompras ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "lStockSeries", {|Self | Self, ( !::lUnidadesNegativas() .AND. !::lCompras ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER InfoSeries(); IIF( .F., s_oClass:ModMethod( "InfoSeries", @TNumerosSerie_InfoSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "InfoSeries", @TNumerosSerie_InfoSeries(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AutoSerializa(); IIF( .F., s_oClass:ModMethod( "AutoSerializa", @TNumerosSerie_AutoSerializa(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AutoSerializa", @TNumerosSerie_AutoSerializa(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lUnidadesNegativas(); IIF( .F., s_oClass:ModInline( "lUnidadesNegativas", {|Self | Self, ( ::nTotalUnidades < 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "lUnidadesNegativas", {|Self | Self, ( ::nTotalUnidades < 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER nAbsUnidades(); IIF( .F., s_oClass:ModInline( "nAbsUnidades", {|Self | Self, ( Abs( ::nTotalUnidades ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nAbsUnidades", {|Self | Self, ( Abs( ::nTotalUnidades ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TNumerosSerie ;



UTILITY STATIC function TNumerosSerie_Resource() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local n

   if ::nAbsUnidades() == 0
      MsgStop( "No hay unidades para asignar números de serie." )
      Return ( Self )
   end

   n                       := 1
   ::aNumSer               := Afill( Array( ::nAbsUnidades() ), Space( 30 ) )
   ::aValSer               := Afill( Array( ::nAbsUnidades() ), .F. )

   do case
   case IsChar( ::uTmpSer )

      if ::lTicket

         if ( ::uTmpSer )->( dbSeek( Str( ::nNumLin, 4 ) + ::cCodArt ) )
            while ( Str( ( ::uTmpSer )->nNumLin, 4 ) + ( ::uTmpSer )->cCbaTil == Str( ::nNumLin, 4 ) + ::cCodArt ) .AND. !( ::uTmpSer )->( Eof() )
               if ( n <= ::nAbsUnidades() )
                  ::aNumSer[ n ] := ( ::uTmpSer )->cNumSer
               end
               ( ::uTmpSer )->( dbSkip() )
               n++
            end
         end

      else

         if ( ::uTmpSer )->( dbSeek( Str( ::nNumLin, 4 ) + ::cCodArt ) )
            while ( Str( ( ::uTmpSer )->nNumLin, 4 ) + ( ::uTmpSer )->cRef == Str( ::nNumLin, 4 ) + ::cCodArt ) .AND. !( ::uTmpSer )->( Eof() )
               if ( n <= ::nAbsUnidades() )
                  ::aNumSer[ n ] := ( ::uTmpSer )->cNumSer
               end
               ( ::uTmpSer )->( dbSkip() )
               n++
            end
         end

      end

   case IsObject( ::uTmpSer )

      if ::uTmpSer:Seek( Str( ::nNumLin, 4 ) + ::cCodArt )
         while ( Str( ::uTmpSer:nNumLin, 4 ) + ::uTmpSer:cCodArt == Str( ::nNumLin, 4 ) + ::cCodArt ) .AND. ! ::uTmpSer:Eof()
            if ( n <= ::nAbsUnidades() )
               ::aNumSer[ n ] := ::uTmpSer:cNumSer
            end
            ::uTmpSer:Skip()
            n++
         end
      end

   end

   ::oDlg = TDialog():New(,,,,, "VtaNumSer",, .F.,,,,,, .F.,,,,,, .F., )



      TCheckBox():ReDefine( 200, { | u | If( PCount()==0, ::lAutoSerializacion, ::lAutoSerializacion:= u ) }, ::oDlg,,,,,,, .F.,, .F. )





      TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::nTotalUnidades, ::nTotalUnidades:= u ) }, ::oDlg,, MasUnd(),,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cPreFix, ::cPreFix:= u ) }, ::oDlg,,,,,,,,, .F., {||     ( ::nMode <> 3 .AND. !::lAutoSerializacion )},, .F., .F.,,,,,, nil,,, )







      ::oSerIni := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::nSerIni, ::nSerIni:= u ) }, ::oDlg,, "99999999999999999999", {||    ( ::oSerFin:cText( ::nSerIni + ::nAbsUnidades() ), .T. )},,,,,, .F., {||     ( ::nMode <> 3 .AND. !::lAutoSerializacion )},, .F., .T.,,,,,, nil,,, )





      ::oSerFin := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::nSerFin, ::nSerFin:= u ) }, ::oDlg,, "99999999999999999999",,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )






      ::oNumGen := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::nNumGen, ::nNumGen:= u ) }, ::oDlg,, "99999999999999999999",,,,,,, .F., {||     ( ::nMode <> 3 .AND. !::lAutoSerializacion )},, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 500, {||( ::GenerarSeries() )}, ::oDlg,,, .F., {||     ( ::nMode <> 3 .AND. !::lAutoSerializacion )},,, .F. )

      ::oBrwSer                  := TXBrowse():New( ::oDlg )

      ::oBrwSer:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      ::oBrwSer:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      ::oBrwSer:lHScroll         := .F.
      ::oBrwSer:lRecordSelector  := .T.
      ::oBrwSer:lFastEdit        := .T.

      ::oBrwSer:nMarqueeStyle    := 3

      ::oBrwSer:SetArray( ::aNumSer, , , .F. )

      ::oBrwSer:nColSel          := 2

      with object ( ::oBrwSer:addCol() )
         :cHeader             := "N."
         :bStrData            := {|| Trans( ::oBrwSer:nArrayAt, "999999" ) }
         :nWidth              := 60
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( ::oBrwSer:addCol() )
         :cHeader             := "Serie"
         :bEditValue          := {|| ::aNumSer[ ::oBrwSer:nArrayAt ] }

         if ::lStockSeries()
            :nWidth           :=  220
            :bOnPostEdit      := {|o,x| ::aNumSer[ ::oBrwSer:nArrayAt ] := x, ::aValSer[ ::oBrwSer:nArrayAt ] := ::oStock:lValidNumeroSerie( ::cCodArt, ::cCodAlm, x ) }
         else
            :nWidth           :=  240
            :bOnPostEdit      := {|o,x| ::aNumSer[ ::oBrwSer:nArrayAt ] := x }
         end

         if ::nMode <> 3
            :nEditType        := 1
         end
      end

      if ::lStockSeries()

         with object ( ::oBrwSer:addCol() )
            :cHeader          := "Es."
            :nHeadBmpNo       := 4
            :bStrData         := {|| "" }
            :bBmpData         := {|| if( ::aValSer[ ::oBrwSer:nArrayAt ], 3, 1 ) }
            :nWidth           := 20
            :bLDClickData     := {|| ::InfoSeries( ::aNumSer[ ::oBrwSer:nArrayAt ], ::oStock ) }
            :AddResource( "Bullet_Square_Red_16" )
            :AddResource( "Bullet_Square_Yellow_16" )
            :AddResource( "Bullet_Square_Green_16" )
            :AddResource( "Informacion_16" )
         end

      end

      ::oBrwSer:CreateFromResource( 150 )



      ::oSaySer := TSay():ReDefine( 230, {|| ::cSaySer}, ::oDlg,,,, .F.,, .F., .F. )

      ::oProSer   := TMeter():ReDefine( 240, { | u | if( pCount() == 0, ::nProSer, ::nProSer := u ) }, 10, ::oDlg, .F., , , .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )





      TButton():ReDefine( 510, {||( ::lChequearSalvarSeries() )}, ::oDlg,,, .F., {||     ( ::nMode <> 3 )},,, .F. )




      TButton():ReDefine( 520, {||( ::oDlg:End() )}, ::oDlg,,, .F.,,,, .F. )

      ::oDlg:bStart  := {|| ::lValidarSeries() }

      ::oDlg:AddFastKey( 116, {|| ::lChequearSalvarSeries() } )

   ::oDlg:Activate( ::oDlg:bLClicked, ::oDlg:bMoved, ::oDlg:bPainted, .T.,,,, ::oDlg:bRClicked,,, )

Return ( nil )



UTILITY STATIC function TNumerosSerie_GenerarSeries() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local n
   local nChg  := 1

   CursorWait()

   ::oDlg:Disable()

   if Empty( ::nNumGen )
      aEval( ::aNumSer, {| a, n | ::aNumSer[ n ] := Padr( Rtrim( ::cPreFix ) + Ltrim( Str( ::nSerIni + n - 1 ) ), 30 ) } )
   else
      for n := 1 to len( ::aNumSer )
         if Empty( ::aNumSer[ n ] )
            ::aNumSer[ n ]    := Padr( Rtrim( ::cPreFix ) + Ltrim( Str( ::nSerIni + nChg - 1 ) ), 30 )
            nChg++
         end
         if nChg == ::nNumGen
            exit
         end
      next
   end

   ::oBrwSer:Refresh()

   ::lValidarSeries()

   ::oDlg:Enable()

   CursorWE()

Return ( self )



UTILITY STATIC function TNumerosSerie_lChequearSeries() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local l
   local n
   local lValid            := .T.

   if !::lStockSeries()
      Return ( lValid )
   end

   CursorWait()

   if !Empty( ::oProSer )
      ::oProSer:Show()
      ::oProSer:SetTotal( ::nAbsUnidades() )
   end

   for each l in ::aValSer

      if IsFalse( l )

         lValid            := .F.
         n                 := hb_EnumIndex()
         exit

      else

         if !Empty( ::oProSer )
            ::oProSer:Set( hb_EnumIndex() )
         end

      end

   next

   if !lValid

      if uFieldEmpresa( "lSerNoCom" )
         msgStop( "Hay números de serie sin stock para su venta." )
      else
         lValid            := ApoloMsgNoYes( "Hay números de serie sin stock para su venta.", "¿Desea continuar con la venta?" )
      end

      if !Empty( ::oBrwSer ) .AND. IsNum( n )
         ::oBrwSer:nArrayAt  := n
         ::oBrwSer:Refresh()
      end

   end

   if !Empty( ::oProSer )
      ::oProSer:Hide()
   end

   CursorWE()

Return ( lValid )



UTILITY STATIC function TNumerosSerie_lValidarSeries() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local n
   local lValid         := .T.

   if ::lStockSeries()

      CursorWait()



      if !Empty( ::oProSer )
         ::oProSer:Show()
         ::oProSer:SetTotal( ::nAbsUnidades() )
      end

      if !Empty( ::oSaySer )
         ::oSaySer:SetText( "Calculando disponibilidad del stock..." )
      end

      for n := 1 to ::nAbsUnidades()

         if !Empty( ::aNumSer[ n ] )

            ::aValSer[ n ] := ::oStock:lValidNumeroSerie( ::cCodArt, ::cCodAlm, ::aNumSer[ n ] )

            if !::aValSer[ n ]
               lValid      := .F.
            end

         else

            lValid         := .F.

         end

         if !Empty( ::oProSer ) .AND. ( Mod( n, int( ::nAbsUnidades() / 100 ) ) == 0 )
            ::oProSer:Set( n )
         end

      next

      if !Empty( ::oBrwSer )
         ::oBrwSer:Refresh()
      end

      if !Empty( ::oProSer )
         ::oProSer:Set( 0 )
         ::oProSer:Hide()
      end

      if !Empty( ::oSaySer )
         ::oSaySer:SetText( "" )
      end



      if !Empty( ::oBrwSer )
         ::oBrwSer:SetFocus()
      end

      CursorWE()

   end

Return ( lValid )



UTILITY STATIC function TNumerosSerie_SalvarSeries() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local cNumSer
   local nTotUnd              := len( ::aNumSer )

   ::oDlg:Disable()

   ::EliminarSeries()

   if !Empty( ::oProSer )
      ::oProSer:SetTotal( nTotUnd )
   end

   for each cNumSer in ::aNumSer

      do case
      case IsChar( ::uTmpSer )

         ( ::uTmpSer )->( dbAppend() )
         if ::lTicket
         ( ::uTmpSer )->cCbaTil  := ::cCodArt
         else
         ( ::uTmpSer )->cRef     := ::cCodArt
         end
         ( ::uTmpSer )->cAlmLin  := ::cCodAlm
         ( ::uTmpSer )->nNumLin  := ::nNumLin
         ( ::uTmpSer )->cNumSer  := cNumSer
         ( ::uTmpSer )->lUndNeg  := ::lUnidadesNegativas()

      case IsObject( ::uTmpSer )

         ::uTmpSer:Append()
         ::uTmpSer:cCodArt       := ::cCodArt
         ::uTmpSer:cAlmOrd       := ::cCodAlm
         ::uTmpSer:nNumLin       := ::nNumLin
         ::uTmpSer:cNumSer       := cNumSer
         ::uTmpSer:lUndNeg       := ::lUnidadesNegativas()
         ::uTmpSer:Save()

      end

      if !Empty( ::oProSer ) .AND. ( Mod( hb_enumindex(), int( nTotUnd / 100 ) ) == 0 )
         ::oProSer:Set( hb_enumindex() )
      end

   next

   ::oDlg:Enable()
   ::oDlg:End()

Return ( Self )



UTILITY STATIC function TNumerosSerie_EliminarSeries() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   do case
   case IsChar( ::uTmpSer )

      while ( ( ::uTmpSer )->( dbSeek( Str( ::nNumLin, 4 ) + ::cCodArt ) ) ) .AND. !( ::uTmpSer )->( Eof() )
         ( ::uTmpSer )->( dbDelete() )
      end

   case IsObject( ::uTmpSer )

      while ( ::uTmpSer:Seek( Str( ::nNumLin, 4 ) + ::cCodArt ) ) .AND. ! ::uTmpSer:Eof()
         ::uTmpSer:Delete()
      end

   end

Return ( nil )



UTILITY STATIC function TNumerosSerie_InfoSeries( cNumSer, oStock) ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   if Empty( cNumSer )
      MsgStop( "Número de serie esta vacio." )
      Return ( Self )
   end

   with object ( TSeaNumSer() )
      :lBlocked   := .T.
      :cCodArt    := ::cCodArt
      :cCodAlm    := ::cCodAlm
      :cNumSer    := cNumSer
      :oStock     := oStock
      :Activate( , , .T. )
   end

Return ( Self )



UTILITY STATIC function TNumerosSerie_AutoSerializa() ; local Self AS CLASS TNumerosSerie := QSelf() AS CLASS TNumerosSerie

   local cNumSer
   local nNumSer

   if ::nAbsUnidades() == 0
      MsgStop( "No hay unidades para asignar números de serie." )
      Return ( Self )
   end

   nNumSer                 := uFieldEmpresa( "nAutSer" )

   ::aNumSer               := Afill( Array( ::nAbsUnidades() ), Space( 30 ) )
   ::aValSer               := Afill( Array( ::nAbsUnidades() ), .F. )

   for each cNumSer in ::aNumSer

      do case
      case IsChar( ::uTmpSer )

         ( ::uTmpSer )->( dbAppend() )
         ( ::uTmpSer )->cNumSer  := Alltrim( Str( nNumSer ) )
         ( ::uTmpSer )->cRef     := ::cCodArt
         ( ::uTmpSer )->cAlmLin  := ::cCodAlm
         ( ::uTmpSer )->nNumLin  := ::nNumLin
         ( ::uTmpSer )->lUndNeg  := ::lUnidadesNegativas()

      case IsObject( ::uTmpSer )

         ::uTmpSer:Append()
         ::uTmpSer:cNumSer       := Alltrim( Str( nNumSer ) )
         ::uTmpSer:cCodArt       := ::cCodArt
         ::uTmpSer:cAlmOrd       := ::cCodAlm
         ::uTmpSer:nNumLin       := ::nNumLin
         ::uTmpSer:lUndNeg       := ::lUnidadesNegativas()
         ::uTmpSer:Save()

      end

      ++nNumSer

   next

   SetFieldEmpresa( nNumSer, "nAutSer" )

Return ( Self )

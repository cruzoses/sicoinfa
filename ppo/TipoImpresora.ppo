#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 5 ".\Prg\TipoImpresora.prg"
static oWndBrw
static bEdit      := { |aTmp, aGet, dbfTImp, oBrw, bWhen, bValid, nMode | EdtRec( aTmp, aGet, dbfTImp, oBrw, bWhen, bValid, nMode ) }
static dbfTImp





STATIC FUNCTION OpenFiles()

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

      DisableAcceso()

      if !lExistTable( cPatDat() + "TIPIMP.DBF" )
         mkTImp( cPatDat() )
      end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIPIMP.DBF" ), ( cCheckArea( "TIPIMP", @dbfTImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIPIMP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      EnableAcceso()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      EnableAcceso()

      CloseFiles ()

      lOpen       := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )






STATIC FUNCTION CloseFiles()

   DisableAcceso()

   if dbfTImp <> nil
      ( dbfTImp ) -> ( dbCloseArea() )
   end

   dbfTImp  := nil
   oWndBrw  := nil

   EnableAcceso()

RETURN .T.







FUNCTION TipoImpresoras( oMenuItem, oWnd )

   local nLevel

   IIF( oMenuItem == nil, oMenuItem := "01115", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;

   if oWndBrw == NIL





      nLevel            := nLevelUsr( oMenuItem )

      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end





      if !OpenFiles()
         return Nil
      end

      DisableAcceso()





      AddMnuNext( "Tipos de impresoras", ProcName() )











      oWndBrw := TShell():New( 2, 10, 18, 70, "Tipos de impresoras",, oWnd,,, .F.,,, ( dbfTImp ),,,,, {"Tipos de impresoras"}, {||( WinAppRec( oWndBrw:oBrw, bEdit, dbfTImp ) )},, {||( WinDelRec( oWndBrw:oBrw, dbfTImp ) )},, nil, nLevel, "printer_view_16", ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) ),,, .T. )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Tipo de impresora"
         :cSortOrder       := "cTipImp"
         :bEditValue       := {|| ( dbfTImp )->cTipImp }
         :nWidth           := 800
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      oWndBrw:CreateXFromCode()





      oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

      oWndBrw:AddSeaBar()








      oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )







      oWndBrw:NewAt( "ZOOM",,, {||( WinZooRec( oWndBrw:oBrw, bEdit, dbfTImp ) )}, "(Z)oom", "Z",,, 8,, .F. )







      oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )





      oWndBrw:NewAt( "END",,, {||( oWndBrw:end() )}, "(S)alir", "S",,,,, .F. )

      oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

      EnableAcceso()

   else

      oWndBrw:SetFocus()

   end

RETURN NIL






STATIC FUNCTION EdtRec( aTmp, aGet, dbfTImp, oBrw, bWhen, bValid, nMode )

   local oDlg

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "tipos de impresoras", "SITUACION",, .F.,,,,,, .F.,,,,,, .F., )





   aGet[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ], aTmp[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





   TButton():ReDefine( 500, {||( EndTrans( aTmp, aGet, dbfTImp, oBrw, nMode, oDlg ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





   TButton():ReDefine( 550, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )



   if nMode <> 3
      oDlg:AddFastKey( 116, {|| EndTrans( aTmp, aGet, dbfTImp, oBrw, nMode, oDlg ) } )
   end

   oDlg:bStart := {|| aGet[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ]:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )






STATIC FUNCTION EndTrans( aTmp, aGet, dbfSitua, oBrw, nMode, oDlg )



   if nMode == 1 .OR. nMode == 4
      if Existe( Upper( aTmp[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ] ), dbfTImp, "cTipImp" )
         msgStop( "Tipo de impresora existente" )
         aGet[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ]:SetFocus()
         return nil
      end
   end

   if Empty( aTmp[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ] )
      MsgStop( "El tipo de impresora no puede estar vacío" )
      aGet[ ( dbfTImp )->( FieldPos( "cTipImp" ) ) ]:SetFocus()
      return nil
   end



   WinGather( aTmp, aGet, dbfTImp, oBrw, nMode )

RETURN ( oDlg:end( 1 ) )






FUNCTION mkTImp( cPath, lAppend, cPathOld, oMeter )

   local dbfTImp

   IIF( cPath == nil, cPath := cPatDat(), ) ;
   IIF( lAppend == nil, lAppend := .F., ) ;

   if !lExistTable( cPath + "TipImp.Dbf" )
      dbCreate( cPath + "TipImp.Dbf", { { "cTipImp", "C", 50, 0 } }, cDriver() )
   end

   if lExistIndex( cPath + "TipImp.Cdx" )
      fErase( cPath + "TipImp.Cdx" )
   end

   if lAppend .AND. lIsDir( cPathOld )

      if file( cPathOld + "TipImp.Dbf" )

         dbUseArea( .T., cDriver(), "TipImp.Dbf", cCheckArea( "TipImp", @dbfTImp ), .F. )
         ( dbfTImp )->( __dbApp( cPathOld + "TipImp.Dbf" ) )

      end

   end

   ( dbfTImp )->( dbCloseArea() )

RETURN .T.







FUNCTION rxTImp( cPath, oMeter )

   local dbfTImp

   IIF( cPath == nil, cPath := cPatDat(), ) ;

   IF !lExistTable( cPath + "TipImp.DBF" )
      dbCreate( cPath + "TipImp.Dbf", { { "cTipImp", "C", 50, 0 } }, cDriver() )
   end

   IF lExistIndex( cPath + "TIPIMP.CDX" )
      fErase( cPath + "TIPIMP.CDX" )
   end

   if lExistTable( cPath + "TIPIMP.DBF" )
      dbUseArea( .T., cDriver(), cPath + "TIPIMP.DBF", cCheckArea( "TIPIMP", @dbfTImp ), .F. )

      if !( dbfTImp )->( neterr() )
         ( dbfTImp )->( __dbPack() )

         ( dbfTImp )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
         ( dbfTImp )->( ordCreate( cPath + "TIPIMP.CDX", "cTipImp", "Upper( Field->cTipImp )", {|| Upper( Field->cTipImp ) } ) )

         ( dbfTImp )->( dbCloseArea() )
      else

         msgStop( "Imposible abrir en modo exclusivo tipos de impresoras" )

      end

   end

RETURN NIL



FUNCTION IsTipImp()

   local oError
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   if !lExistTable( cPatDat() + "TipImp.Dbf" )
      mkTImp( cPatDat() )
   end

   if !lExistIndex( cPatDat() + "TipImp.Cdx" )
      rxTImp( cPatDat() )
   end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TipImp.Dbf" ), ( cCheckArea( "TipImp", @dbfTImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )


   ( dbfTImp )->( __dbLocate( { || Rtrim( ( dbfTImp )->cTipImp ) == "General" } ) )
   if !( dbfTImp )->( found() )
      ( dbfTImp )->( dbAppend() )
      ( dbfTImp )->cTipImp     := "General"
      ( dbfTImp )->( dbUnLock() )
   end

   ( dbfTImp )->( __dbLocate( { || Rtrim( ( dbfTImp )->cTipImp ) == "Barra" } ) )
   if !( dbfTImp )->( found() )
      ( dbfTImp )->( dbAppend() )
      ( dbfTImp )->cTipImp     := "Barra"
      ( dbfTImp )->( dbUnLock() )
   end

   ( dbfTImp )->( __dbLocate( { || Rtrim( ( dbfTImp )->cTipImp ) == "Cocina" } ) )
   if !( dbfTImp )->( found() )
      ( dbfTImp )->( dbAppend() )
      ( dbfTImp )->cTipImp     := "Cocina"
      ( dbfTImp )->( dbUnLock() )
   end

   RECOVER USING oError

      ( dbfTImp )->( dbCloseArea() )

      msgStop( ErrorMessage( oError ), "Imposible realizar las comprobación inicial de tipos de impresoras" )

   end

   ErrorBlock( oBlock )

   ( dbfTImp )->( dbCloseArea() )

 RETURN ( .T. )



FUNCTION cTipoImpresora( oGet, dbfTImp )

   local oBlock
   local oError
   local lClose   := .F.
   local lValid   := .F.
    local xValor     := oGet:varGet()

   if Empty( xValor )
      return .T.
   end

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( dbfTImp )
      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIPIMP.DBF" ), ( cCheckArea( "TIPIMP", @dbfTImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIPIMP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      lClose      := .T.
   end

   if ( dbfTImp )->( dbSeek( Padr( Upper( xValor ), 50 ) ) )

      oGet:cText( ( dbfTImp )->cTipImp )

      lValid      := .T.

   else

      msgStop( "Código de tipo de impresora no encontrado" )

   end

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

    IF lClose
      ( dbfTImp )->( dbCloseArea() )
    end

RETURN lValid



FUNCTION BrwTipoImpresora( oGet, lBigStyle )

    local oDlg
    local oGet1
    local cGet1
    local oBrw
   local nOrd        := GetBrwOpt( "BrwTipImpresora" )
    local oCbxOrd
   local aCbxOrd     := { "Tipo" }
   local cCbxOrd
   local nLevel      := nLevelUsr( "01115" )
   local cResource   := "HELPENTRYTACTILIMP"

   IIF( lBigStyle == nil, lBigStyle := .F., ) ;

   if !OpenFiles()
      return .F.
   end

   if lBigStyle
      nOrd           := ( dbfTImp )->( OrdSetFocus( "cTipImp" ) )
      ( dbfTImp )->( dbGoTop() )
   else
      nOrd           := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
      cCbxOrd        := aCbxOrd[ nOrd ]
   end

   if lBigStyle

      if GetSysMetrics( 1 ) == 560
         oDlg = TDialog():New(,,,, "Seleccionar tipo de impresora", "HELPENTRYTACTILIMP_1024x576",, .F.,,,,,, .F.,,,,,, .F., )

      else
         oDlg = TDialog():New(,,,, "Seleccionar tipo de impresora", cResource,, .F.,,,,,, .F.,,,,,, .F., )

      end

   else
      oDlg = TDialog():New(,,,, "Seleccionar tipo de impresora", "HELPENTRY",, .F.,,,,,, .F.,,,,,, .F., )
   end

   if lBigStyle





      TButtonBmp():ReDefine( 100, {||( BuscarBrwTactil( dbfTImp, oBrw ) )}, oDlg,,, .F.,,,, .F., "LUPA_32",, )

   else






      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,, {||    ( OrdClearScope( oBrw, dbfTImp ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfTImp ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfTImp )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

   end

      oBrw                 := IXBrowse():New( oDlg )

      oBrw:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias          := dbfTImp
      oBrw:lHScroll        := .F.
      oBrw:nMarqueeStyle   := 5
      oBrw:cName           := "Browse.TipoImpresora"

      if lBigStyle
         oBrw:nRowHeight   := 36
      end

      with object ( oBrw:AddCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cTipImp"
         :bEditValue       := {|| ( dbfTImp )->cTipImp }
         :nWidth           := 400
         if !lBigStyle
            :bLClickHeader := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
         end
      end

      oBrw:bLDblClick      := {|| oDlg:end( 1 ) }
      oBrw:bRClicked       := {| nRow, nCol, nFlags | oBrw:RButtonDown( nRow, nCol, nFlags ) }

      oBrw:CreateFromResource( 105 )

      if lBigStyle





      TButtonBmp():ReDefine( 140, {||( oBrw:GoUp() )}, oDlg,,, .F.,,,, .F., "UP32",, )





      TButtonBmp():ReDefine( 150, {||( oBrw:GoDown() )}, oDlg,,, .F.,,,, .F., "DOWN32",, )

      end




      TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      if !lBigStyle






      TButton():ReDefine( 500, {||( WinAppRec( oBrw, bEdit, dbfTImp ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 2 ) <> 0 .AND. !IsReport() )},,, .F. )




        TButton():ReDefine( 501, {||( WinEdtRec( oBrw, bEdit, dbfTImp ) )}, oDlg,,, .F., {||     ( nAnd( nLevel, 4 ) <> 0 .AND. !IsReport() )},,, .F. )

      if nAnd( nLevel, 2 ) <> 0 .AND. !IsReport()
         oDlg:AddFastKey( 113,    {|| WinAppRec( oBrw, bEdit, dbfTImp ) } )
      end

      if nAnd( nLevel, 4 ) <> 0 .AND. !IsReport()
         oDlg:AddFastKey( 114,    {|| WinEdtRec( oBrw, bEdit, dbfTImp ) } )
      end

      end

      oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )
      oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      oGet:cText( ( dbfTImp )->cTipImp )
        oGet:lValid()

   end

   oGet:SetFocus()

   DestroyFastFilter( dbfTImp )

   SetBrwOpt( "BrwTipImpresora", ( dbfTImp )->( OrdNumber() ) )

   CloseFiles()

RETURN ( oDlg:nResult == 1 )






Function aTiposImpresoras( dbfTImp )

   local oError
   local oBlock
   local aTipImp  := {}

   oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      aAdd( aTipImp, "No imprimir" )

      ( dbfTImp )->( dbGoTop() )
      while !( dbfTImp )->( Eof() )
         aAdd( aTipImp, AllTrim( ( dbfTImp )->cTipImp ) )
         ( dbfTImp )->( dbSkip() )
      end

   RECOVER USING oError

      msgStop( "Imposible cargar situaciones" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

   end

   ErrorBlock( oBlock )

Return aTipImp

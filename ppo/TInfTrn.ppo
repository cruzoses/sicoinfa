#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\TInfTrn.prg"
_HB_CLASS TInfTrn ; UTILITY FUNCTION TInfTrn(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfTrn" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER DetCreateFields(); IIF( .F., s_oClass:ModMethod( "DetCreateFields", @TInfTrn_DetCreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DetCreateFields", @TInfTrn_DetCreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER RentCreateFields(); IIF( .F., s_oClass:ModMethod( "RentCreateFields", @TInfTrn_RentCreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RentCreateFields", @TInfTrn_RentCreateFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AnuTrnFields(); IIF( .F., s_oClass:ModMethod( "AnuTrnFields", @TInfTrn_AnuTrnFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AnuTrnFields", @TInfTrn_AnuTrnFields(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AcuCreate(); IIF( .F., s_oClass:ModMethod( "AcuCreate", @TInfTrn_AcuCreate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AcuCreate", @TInfTrn_AcuCreate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPre( lAcumula); IIF( .F., s_oClass:ModMethod( "AddPre", @TInfTrn_AddPre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPre", @TInfTrn_AddPre(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddPed( lAcumula); IIF( .F., s_oClass:ModMethod( "AddPed", @TInfTrn_AddPed(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddPed", @TInfTrn_AddPed(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddAlb( lAcumula); IIF( .F., s_oClass:ModMethod( "AddAlb", @TInfTrn_AddAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddAlb", @TInfTrn_AddAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddFac( lAcumula); IIF( .F., s_oClass:ModMethod( "AddFac", @TInfTrn_AddFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFac", @TInfTrn_AddFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddFacRec( lAcumula); IIF( .F., s_oClass:ModMethod( "AddFacRec", @TInfTrn_AddFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacRec", @TInfTrn_AddFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddFacRecVta( lAcumula); IIF( .F., s_oClass:ModMethod( "AddFacRecVta", @TInfTrn_AddFacRecVta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddFacRecVta", @TInfTrn_AddFacRecVta(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddRAlb(); IIF( .F., s_oClass:ModMethod( "AddRAlb", @TInfTrn_AddRAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRAlb", @TInfTrn_AddRAlb(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddRFac(); IIF( .F., s_oClass:ModMethod( "AddRFac", @TInfTrn_AddRFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRFac", @TInfTrn_AddRFac(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER AddRFacRec(); IIF( .F., s_oClass:ModMethod( "AddRFacRec", @TInfTrn_AddRFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "AddRFacRec", @TInfTrn_AddRFacRec(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER IncluyeCero(); IIF( .F., s_oClass:ModMethod( "IncluyeCero", @TInfTrn_IncluyeCero(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "IncluyeCero", @TInfTrn_IncluyeCero(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER NewGroup(); IIF( .F., s_oClass:ModMethod( "NewGroup", @TInfTrn_NewGroup(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "NewGroup", @TInfTrn_NewGroup(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER QuiGroup(); IIF( .F., s_oClass:ModMethod( "QuiGroup", @TInfTrn_QuiGroup(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "QuiGroup", @TInfTrn_QuiGroup(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfTrn ;



UTILITY STATIC function TInfTrn_DetCreateFields() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   ::AddField ( "cCodTrn", "C",  9, 0, {|| "@!" },        "Cod. Trn.",                 .F., "Cód. transportista",           4, .F. )
   ::AddField ( "cNomTrn", "C", 50, 0, {|| "@!" },        "Transportista",             .F., "Transportista",               20, .F. )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },        "Cod. articulo",             .F., "Cod. artículo",               10, .F. )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },        "Descripción",               .F., "Descripción",                 15, .F. )
   ::FldPropiedades()
   ::AddField ( "cLote",   "C", 12, 0, ,                  "Lote",                      .F., "Número de lote",              10, .F. )
   ::FldCliente()
   ::AddField ( "nNumCaj", "N", 16, 6, {|| MasUnd() },    cNombreCajas(),              .F., cNombreCajas(),                12, .T. )
   ::AddField ( "nUniDad", "N", 16, 6, {|| MasUnd() },    cNombreUnidades(),           .F., cNombreUnidades(),             12, .T. )
   ::AddField ( "nNumUni", "N", 16, 6, {|| MasUnd() },    "Tot. " + cNombreUnidades(), .T., "Total " + cNombreUnidades(),  12, .T. )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicImp },   "Precio",                    .T., "Precio",                      12, .F. )
   ::AddField ( "nPntVer", "N", 16, 6, {|| ::cPicImp },   "Pnt. ver.",                 .F., "Punto verde",                 10, .F. )
   ::AddField ( "nImpTrn", "N", 16, 6, {|| ::cPicImp },   "Portes",                    .F., "Portes",                      10, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },   "Base",                      .T., "Base",                        12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },    "Tot. peso",                 .F., "Total peso",                  12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicImp },   "Pre. Kg.",                  .F., "Precio kilo",                 12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },    "Tot. volumen",              .F., "Total volumen",               12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },   "Pre. vol.",                 .F., "Precio volumen",              12, .F. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },   cImp(),                    .T., cImp(),                      12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },   "Total",                     .T., "Total",                       12, .T. )
   ::AddField ( "cDocMov", "C", 14, 0, {|| "@!" },        "Doc.",                      .T., "Documento",                    8, .F. )
   ::AddField ( "cTipDoc", "C", 20, 0, {|| "@!" },        "Tipo",                      .F., "Tipo de documento",           10, .F. )
   ::AddField ( "dFecMov", "D",  8, 0, {|| "@!" },        "Fecha",                     .T., "Fecha",                       10, .F. )
   ::AddField ( "cTipVen", "C", 20, 0, {|| "@!" },        "Venta",                     .F., "Tipo de venta",               10, .F. )

RETURN ( self )



UTILITY STATIC function TInfTrn_AnuTrnFields() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn


   ::AddField ( "cCodTrn", "C",  4, 0, {|| "@!" },         "Cod. Trn.",       .T., "Cód. Transportista",      4 )
   ::AddField ( "cNomTrn", "C", 50, 0, {|| "@!" },         "Transportista",   .T., "Transportista",          20 )
   ::AddField ( "nImpEne", "N", 16, 6, {|| ::cPicOut },    "Ene",             .T., "Enero",                  12 )
   ::AddField ( "nImpFeb", "N", 16, 6, {|| ::cPicOut },    "Feb",             .T., "Febrero",                12 )
   ::AddField ( "nImpMar", "N", 16, 6, {|| ::cPicOut },    "Mar",             .T., "Marzo",                  12 )
   ::AddField ( "nImpAbr", "N", 16, 6, {|| ::cPicOut },    "Abr",             .T., "Abril",                  12 )
   ::AddField ( "nImpMay", "N", 16, 6, {|| ::cPicOut },    "May",             .T., "Mayo",                   12 )
   ::AddField ( "nImpJun", "N", 16, 6, {|| ::cPicOut },    "Jun",             .T., "Junio",                  12 )
   ::AddField ( "nImpJul", "N", 16, 6, {|| ::cPicOut },    "Jul",             .T., "Julio",                  12 )
   ::AddField ( "nImpAgo", "N", 16, 6, {|| ::cPicOut },    "Ago",             .T., "Agosto",                 12 )
   ::AddField ( "nImpSep", "N", 16, 6, {|| ::cPicOut },    "Sep",             .T., "Septiembre",             12 )
   ::AddField ( "nImpOct", "N", 16, 6, {|| ::cPicOut },    "Oct",             .T., "Octubre",                12 )
   ::AddField ( "nImpNov", "N", 16, 6, {|| ::cPicOut },    "Nov",             .T., "Noviembre",              12 )
   ::AddField ( "nImpDic", "N", 16, 6, {|| ::cPicOut },    "Dic",             .T., "Diciembre",              12 )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },    "Tot",             .T., "Total",                  12 )
   ::AddField ( "nMedia",  "N", 16, 6, {|| ::cPicOut },    "Media",           .T., "Media",                  12 )

RETURN ( self )



UTILITY STATIC function TInfTrn_RentCreateFields() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   ::AddField ( "cCodTrn", "C",  4, 0, {|| "@!" },       "Cod. Trn.",      .F., "Cód. Transportista",      4, .F. )
   ::AddField ( "cNomTrn", "C", 50, 0, {|| "@!" },       "Transportista",  .F., "Transportista",          20, .F. )
   ::AddField ( "cCodArt", "C", 18, 0, {|| "@!" },       "Cod. art.",      .F., "Codigo artículo",        14, .F. )
   ::AddField ( "cNomArt", "C",100, 0, {|| "@!" },       "Descripción",    .F., "Descripción",            35, .F. )
   ::FldPropiedades()
   ::AddField ( "cLote",   "C", 12, 0, ,                 "Lote",           .F., "Número de lote",         10, .F. )
   ::FldCliente()
   ::AddField ( "nTotCaj", "N", 16, 6, {|| MasUnd() },   cNombreCajas(),   .F., cNombreCajas(),           12, .T. )
   ::AddField ( "nTotUni", "N", 16, 6, {|| MasUnd() },   cNombreUnidades(),.T., cNombreUnidades(),        12, .T. )
   ::AddField ( "nTotImp", "N", 16, 6, {|| ::cPicOut },  "Tot. importe",   .T., "Tot. importe",           12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },   "Tot. peso",      .F., "Total peso",             12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicImp },  "Pre. Kg.",       .F., "Precio kilo",            12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },   "Tot. volumen",   .F., "Total volumen",          12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },  "Pre. vol.",      .F., "Precio volumen",         12, .F. )
   ::AddField ( "nTotCos", "N", 16, 6, {|| ::cPicOut },  "Tot. costo",     .T., "Total costo",            12, .F. )
   ::AddField ( "nMarGen", "N", 16, 6, {|| ::cPicOut },  "Margen",         .T., "Margen",                 12, .F. )
   ::AddField ( "nDtoAtp", "N", 16, 6, {|| ::cPicOut },  "Dto. Atipico",   .F., "Importe dto. atipico",   12, .T. )
   ::AddField ( "nRenTab", "N", 16, 6, {|| ::cPicOut },  "%Rent.",         .T., "Rentabilidad",           12, .F. )
   ::AddField ( "nPreMed", "N", 16, 6, {|| ::cPicImp },  "Precio medio",   .F., "Precio medio",           12, .F. )
   ::AddField ( "nCosMed", "N", 16, 6, {|| ::cPicOut },  "Costo medio",    .T., "Costo medio",            12, .F. )
   ::AddField ( "cNumDoc", "C", 14, 0, {|| "@!" },       "Documento",      .T., "Documento",              12, .F. )
   ::AddField ( "cTipDoc", "C", 20, 0, {|| "@!" },       "Tip. Doc.",      .F., "Tipo de documento",      15, .F. )

RETURN ( self )



UTILITY STATIC function TInfTrn_AcuCreate() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   ::AddField ( "cCodTrn", "C",  4, 0, {|| "@!" },           "Cod. Trn.",        .T., "Cód. Transportista" ,  4, .F. )
   ::AddField ( "cNomTrn", "C", 50, 0, {|| "@!" },           "Transportista",    .T., "Transportista"      , 20, .F. )
   ::AddField ( "nNumUni", "N", 16, 6, {|| MasUnd() },       cNombreUnidades(),  .T., cNombreUnidades()    , 12, .T. )
   ::AddField ( "nImpArt", "N", 16, 6, {|| ::cPicImp },      "Precio",           .F., "Precio"             , 12, .F. )
   ::AddField ( "nPntVer", "N", 16, 6, {|| ::cPicImp },      "Pnt. ver.",        .F., "Punto verde"        , 10, .F. )
   ::AddField ( "nImpTrn", "N", 16, 6, {|| ::cPicImp },      "Portes",           .F., "Portes"             , 10, .F. )
   ::AddField ( "nImpTot", "N", 16, 6, {|| ::cPicOut },      "Base",             .T., "Base"               , 12, .T. )
   ::AddField ( "nTotPes", "N", 16, 6, {|| MasUnd() },       "Tot. peso",        .F., "Total peso"         , 12, .T. )
   ::AddField ( "nPreKgr", "N", 16, 6, {|| ::cPicOut },      "Pre. Kg.",         .F., "Precio kilo"        , 12, .F. )
   ::AddField ( "nTotVol", "N", 16, 6, {|| MasUnd() },       "Tot. volumen",     .F., "Total volumen"      , 12, .T. )
   ::AddField ( "nPreVol", "N", 16, 6, {|| ::cPicImp },      "Pre. vol.",        .F., "Precio volumen"     , 12, .F. )
   ::AddField ( "nPreMed", "N", 16, 6, {|| ::cPicImp },      "Pre. Med.",        .T., "Precio medio"       , 12, .F. )
   ::AddField ( "nIvaTot", "N", 16, 6, {|| ::cPicOut },      "Tot. " + cImp(),   .T., "Total " + cImp()       , 12, .T. )
   ::AddField ( "nTotFin", "N", 16, 6, {|| ::cPicOut },      "Total",            .T., "Total"              , 12, .T. )

RETURN ( self )



UTILITY STATIC function TInfTrn_AddPre( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPreCliT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oPreCliT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNPreCli( ::oPreCliL )
      ::oDbf:nImpArt    := nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPreCliL:cRef, nTotNPreCli( ::oPreCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula

         ::AddCliente( ::oPreCliT:cCodCli, ::oPreCliT, .F. )
         ::oDbf:cCodArt := ::oPreCliL:cRef
         ::oDbf:cNomArt := ::oPreCliL:cDetalle
         ::oDbf:cCodPr1 := ::oPreCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oPreCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oPreCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oPreCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oPreCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oPreCliL:cCodPr1 + ::oPreCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oPreCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oPreCliL:cCodPr2 + ::oPreCliL:cValPr2 )
         ::oDbf:cLote   := ::oPreCliL:cLote
         ::oDbf:nNumCaj := ::oPreCliL:nCanPre
         ::oDbf:nUniDad := ::oPreCliL:nUniCaja
         ::oDbf:cDocMov := ::oPreCliL:cSerPre + "/" + lTrim( Str( ::oPreCliL:nNumPre ) ) + "/" + lTrim( ::oPreCliL:cSufPre )
         ::oDbf:dFecMov := ::oPreCliT:dFecPre

         if ::oDbfTvta:Seek( ::oPreCliL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

      ::oDbf:Save()

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPreCli( ::oPreCliL )
      ::oDbf:nImpArt    += nTotUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUPreCli( ::oPreCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLPreCli( ::oPreCliT:cAlias, ::oPreCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPreCliL:cRef, nTotNPreCli( ::oPreCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

RETURN ( self )



UTILITY STATIC function TInfTrn_AddPed( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oPedCliT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oPedCliT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNPedCli( ::oPedCliL )
      ::oDbf:nImpArt    := nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oPedCliL:cRef, nTotNPedCli( ::oPedCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddCliente( ::oPedCliT:cCodCli, ::oPedCliT, .F. )
         ::oDbf:cCodArt := ::oPedCliL:cRef
         ::oDbf:cNomArt := ::oPedCliL:cDetalle
         ::oDbf:cCodPr1 := ::oPedCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oPedCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oPedCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oPedCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oPedCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oPedCliL:cCodPr1 + ::oPedCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oPedCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oPedCliL:cCodPr2 + ::oPedCliL:cValPr2 )
         ::oDbf:cLote   := ::oPedCliL:cLote
         ::oDbf:nNumCaj := ::oPedCliL:nCanPed
         ::oDbf:nUniDad := ::oPedCliL:nUniCaja
         ::oDbf:cDocMov := lTrim( ::oPedCliL:cSerPed ) + "/" + lTrim ( Str( ::oPedCliL:nNumPed ) ) + "/" + lTrim ( ::oPedCliL:cSufPed )
         ::oDbf:dFecMov := ::oPedCliT:dFecPed

         if ::oDbfTvta:Seek( ::oPedCliL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNPedCli( ::oPedCliL )
      ::oDbf:nImpArt    += nTotUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLPedCli( ::oPedCliT:cAlias, ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLPedCli( ::oPedCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oPedCliL:cRef, nTotNPedCli( ::oPedCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddAlb( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oAlbCliT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oAlbCliT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNAlbCli( ::oAlbCliL )
      ::oDbf:nImpArt    := nTotUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oAlbCliL:cRef, nTotNAlbCli( ::oAlbCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )
         ::oDbf:cCodArt := ::oAlbCliL:cRef
         ::oDbf:cNomArt := ::oAlbCliL:cDetalle
         ::oDbf:cCodPr1 := ::oAlbCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oAlbCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oAlbCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oAlbCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oAlbCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oAlbCliL:cCodPr1 + ::oAlbCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oAlbCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oAlbCliL:cCodPr2 + ::oAlbCliL:cValPr2 )
         ::oDbf:cLote   := ::oAlbCliL:cLote
         ::oDbf:nNumCaj := ::oAlbCliL:nCanEnt
         ::oDbf:nUniDad := ::oAlbCliL:nUniCaja
         ::oDbf:cDocMov := ::oAlbCliL:cSerAlb + "/" + lTrim ( Str( ::oAlbCliL:nNumAlb ) ) + "/" + lTrim ( ::oAlbCliL:cSufAlb )
         ::oDbf:dFecMov := ::oAlbCliT:dFecAlb

         if ::oDbfTvta:Seek( ::oAlbCliL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNAlbCli( ::oAlbCliL )
      ::oDbf:nImpArt    += nTotUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLAlbCli( ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oAlbCliL:cRef, nTotNAlbCli( ::oAlbCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddFac( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacCliT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oFacCliT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNFacCli( ::oFacCliL )
      ::oDbf:nImpArt    := nImpUFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacCliL:cRef, nTotNFacCli( ::oFacCliL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )
         ::oDbf:cCodArt := ::oFacCliL:cRef
         ::oDbf:cNomArt := ::oFacCliL:cDetalle
         ::oDbf:cCodPr1 := ::oFacCliL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacCliL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacCliL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacCliL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacCliL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacCliL:cCodPr1 + ::oFacCliL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacCliL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacCliL:cCodPr2 + ::oFacCliL:cValPr2 )
         ::oDbf:cLote   := ::oFacCliL:cLote
         ::oDbf:nNumCaj := ::oFacCliL:nCanEnt
         ::oDbf:nUniDad := ::oFacCliL:nUniCaja
         ::oDbf:cDocMov := ::oFacCliL:cSerie + "/" + lTrim ( Str( ::oFacCliL:nNumFac ) ) + "/" + lTrim ( ::oFacCliL:cSufFac )
         ::oDbf:dFecMov := ::oFacCliT:dFecFac

         if ::oDbfTvta:Seek( ::oFacCliL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacCli( ::oFacCliL )
      ::oDbf:nImpArt    += nImpUFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacCli( ::oFacCliL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacCliL:cRef, nTotNFacCli( ::oFacCliL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddFacRec( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacRecT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oFacRecT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    := nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )
         ::oDbf:cCodArt := ::oFacRecL:cRef
         ::oDbf:cNomArt := ::oFacRecL:cDetalle
         ::oDbf:cCodPr1 := ::oFacRecL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacRecL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacRecL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacRecL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacRecL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacRecL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
         ::oDbf:cLote   := ::oFacRecL:cLote
         ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
         ::oDbf:nUniDad := ::oFacRecL:nUniCaja
         ::oDbf:cDocMov := ::oFacRecL:cSerie + "/" + lTrim ( Str( ::oFacRecL:nNumFac ) ) + "/" + lTrim ( ::oFacRecL:cSufFac )
         ::oDbf:dFecMov := ::oFacRecT:dFecFac

         if ::oDbfTvta:Seek( ::oFacRecL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    += nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddFacRecVta( lAcumula) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   IIF( lAcumula == nil, lAcumula := .F., ) ;

   if !lAcumula .OR. !::oDbf:Seek( ::oFacRecT:cCodTrn )

      ::oDbf:Append()

      ::oDbf:cCodTrn    := ::oFacRecT:cCodTrn
      ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
      ::oDbf:nNumUni    := nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    := nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    := nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    := nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    := nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nIvaTot    := nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    := ::oDbf:nImpTot + ::oDbf:nIvaTot

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .F. )

      if !lAcumula
         ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )
         ::oDbf:cCodArt := ::oFacRecL:cRef
         ::oDbf:cNomArt := ::oFacRecL:cDetalle
         ::oDbf:cCodPr1 := ::oFacRecL:cCodPr1
         ::oDbf:cNomPr1 := retProp( ::oFacRecL:cCodPr1 )
         ::oDbf:cCodPr2 := ::oFacRecL:cCodPr2
         ::oDbf:cNomPr2 := retProp( ::oFacRecL:cCodPr2 )
         ::oDbf:cValPr1 := ::oFacRecL:cValPr1
         ::oDbf:cNomVl1 := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
         ::oDbf:cValPr2 := ::oFacRecL:cValPr2
         ::oDbf:cNomVl2 := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
         ::oDbf:cLote   := ::oFacRecL:cLote
         ::oDbf:nNumCaj := ::oFacRecL:nCanEnt
         ::oDbf:nUniDad := ::oFacRecL:nUniCaja
         ::oDbf:cDocMov := ::oFacRecL:cSerie + "/" + lTrim ( Str( ::oFacRecL:nNumFac ) ) + "/" + lTrim ( ::oFacRecL:cSufFac )
         ::oDbf:dFecMov := ::oFacRecT:dFecFac

         if ::oDbfTvta:Seek( ::oFacRecL:cTipMov )
            ::oDbf:cTipVen := ::oDbfTvta:cDesMov
         end

      end

   else

      ::oDbf:Load()
      ::oDbf:nNumUni    += nTotNFacRec( ::oFacRecL )
      ::oDbf:nImpArt    += nImpUFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTrn    += nTrnUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nPntVer    += nPntUFacRec( ::oFacRecL:cAlias, ::nDecOut, ::nValDiv )
      ::oDbf:nImpTot    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nPreMed    := ::oDbf:nImpTot / ::oDbf:nNumUni
      ::oDbf:nIvaTot    += nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )
      ::oDbf:nTotFin    += nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv, , , .T., .T.  )
      ::oDbf:nTotFin    += nIvaLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut, ::nValDiv )

      ::AcuPesVol( ::oFacRecL:cRef, nTotNFacRec( ::oFacRecL ), ::oDbf:nImpTot, .T. )

      ::oDbf:Save()

   end

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddRAlb() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := nTotNAlbCli( ::oAlbCliL:cAlias )
   nTotImpUni           := nImpLAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )
   nImpDtoAtp           := nDtoAtpAlbCli( ::oAlbCliT:cAlias, ::oAlbCliL:cAlias, ::nDecOut, ::nDerOut )

   if ::lCosAct .OR. ::oAlbCliL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oAlbCliL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oAlbCliL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodTrn    := ::oAlbCliT:cCodTrn
   ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
   ::oDbf:cCodArt    := ::oAlbCliL:cRef
   ::oDbf:cNomArt    := ::oAlbCliL:cDetalle
   ::oDbf:cCodPr1    := ::oAlbCliL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oAlbCliL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oAlbCliL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oAlbCliL:cCodPr2 )
   ::oDbf:cValPr1    := ::oAlbCliL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oAlbCliL:cCodPr1 + ::oAlbCliL:cValPr1 )
   ::oDbf:cValPr2    := ::oAlbCliL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oAlbCliL:cCodPr2 + ::oAlbCliL:cValPr2 )
   ::oDbf:cLote      := ::oAlbCliL:cLote

   ::AddCliente( ::oAlbCliT:cCodCli, ::oAlbCliT, .F. )

   ::oDbf:nTotCaj    := ::oAlbCliL:nCanEnt
   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nTotImp    := nTotImpUni
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( ::oAlbCliL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nMargen    := nTotImpUni - nTotCosUni
   ::oDbf:nDtoAtp    := nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oAlbCliL:cSerAlb + "/" + Alltrim( Str( ::oAlbCliL:nNumAlb ) ) + "/" + ::oAlbCliL:cSufAlb

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddRFac() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := nTotNFacCli( ::oFacCliL:cAlias )
   nTotImpUni           := nImpLFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )
   nImpDtoAtp           := nDtoAtpFacCli( ::oFacCliT:cAlias, ::oFacCliL:cAlias, ::nDecOut, ::nDerOut )

   if ::lCosAct .OR. ::oFacCliL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oFacCliL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oFacCliL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodTrn    := ::oFacCliT:cCodTrn
   ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
   ::oDbf:cCodArt    := ::oFacCliL:cRef
   ::oDbf:cNomArt    := ::oFacCliL:cDetalle
   ::oDbf:cCodPr1    := ::oFacCliL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oFacCliL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oFacCliL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oFacCliL:cCodPr2 )
   ::oDbf:cValPr1    := ::oFacCliL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oFacCliL:cCodPr1 + ::oFacCliL:cValPr1 )
   ::oDbf:cValPr2    := ::oFacCliL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oFacCliL:cCodPr2 + ::oFacCliL:cValPr2 )
   ::oDbf:cLote      := ::oFacCliL:cLote

   ::AddCliente( ::oFacCliT:cCodCli, ::oFacCliT, .F. )

   ::oDbf:nTotCaj    := ::oFacCliL:nCanEnt
   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nTotImp    := nTotImpUni
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( ::oFacCliL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nMargen    := nTotImpUni - nTotCosUni
   ::oDbf:nDtoAtp    := nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oFacCliL:cSerie + "/" + Alltrim( Str( ::oFacCliL:nNumFac ) ) + "/" + ::oFacCliL:cSufFac

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_AddRFacRec() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   local nTotUni
   local nTotImpUni
   local nTotCosUni
   local nImpDtoAtp





   nTotUni              := -( nTotNFacRec( ::oFacRecL:cAlias ) )
   nTotImpUni           := -( nImpLFacRec( ::oFacRecT:cAlias, ::oFacRecL:cAlias, ::nDecOut, ::nDerOut ) )
   nImpDtoAtp           := 0

   if ::lCosAct .OR. ::oFacRecL:nCosDiv == 0
      nTotCosUni        := nRetPreCosto( ::oDbfArt:cAlias, ::oFacRecL:cRef ) * nTotUni
   else
      nTotCosUni        := ::oFacRecL:nCosDiv * nTotUni
   end

   ::oDbf:Append()

   ::oDbf:cCodTrn    := ::oFacRecT:cCodTrn
   ::oDbf:cNomTrn    := oRetFld( ::oDbf:cCodTrn, ::oDbfTrn:oDbf )
   ::oDbf:cCodArt    := ::oFacRecL:cRef
   ::oDbf:cNomArt    := ::oFacRecL:cDetalle
   ::oDbf:cCodPr1    := ::oFacRecL:cCodPr1
   ::oDbf:cNomPr1    := retProp( ::oFacRecL:cCodPr1 )
   ::oDbf:cCodPr2    := ::oFacRecL:cCodPr2
   ::oDbf:cNomPr2    := retProp( ::oFacRecL:cCodPr2 )
   ::oDbf:cValPr1    := ::oFacRecL:cValPr1
   ::oDbf:cNomVl1    := retValProp( ::oFacRecL:cCodPr1 + ::oFacRecL:cValPr1 )
   ::oDbf:cValPr2    := ::oFacRecL:cValPr2
   ::oDbf:cNomVl2    := retValProp( ::oFacRecL:cCodPr2 + ::oFacRecL:cValPr2 )
   ::oDbf:cLote      := ::oFacRecL:cLote

   ::AddCliente( ::oFacRecT:cCodCli, ::oFacRecT, .F. )

   ::oDbf:nTotCaj    := ::oFacRecL:nCanEnt
   ::oDbf:nTotUni    := nTotUni
   ::oDbf:nTotPes    := ::oDbf:nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nPesoKg" )
   ::oDbf:nTotImp    := nTotImpUni
   ::oDbf:nPreKgr    := if( ::oDbf:nTotPes <> 0, ::oDbf:nTotImp / ::oDbf:nTotPes, 0 )
   ::oDbf:nTotVol    := ::oDbf:nTotUni * oRetFld( ::oFacRecL:cRef, ::oDbfArt, "nVolumen" )
   ::oDbf:nPreVol    := if( ::oDbf:nTotVol <> 0, ::oDbf:nTotImp / ::oDbf:nTotVol, 0 )
   ::oDbf:nTotCos    := nTotCosUni
   ::oDbf:nMargen    := nTotImpUni - nTotCosUni
   ::oDbf:nDtoAtp    := nImpDtoAtp

   if nTotUni <> 0 .AND. nTotCosUni <> 0
      ::oDbf:nRentab := nRentabilidad( nTotImpUni, nImpDtoAtp, nTotCosUni )
      ::oDbf:nPreMed := nTotImpUni / nTotUni
      ::oDbf:nCosMed := nTotCosUni / nTotUni
   else
      ::oDbf:nRentab := 0
      ::oDbf:nPreMed := 0
      ::oDbf:nCosMed := 0
   end

   ::oDbf:cNumDoc    := ::oFacRecL:cSerie + "/" + Alltrim( Str( ::oFacRecL:nNumFac ) ) + "/" + ::oFacRecL:cSufFac

   ::oDbf:Save()

RETURN ( self )



UTILITY STATIC function TInfTrn_IncluyeCero() ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn





   ::oDbfTrn:oDbf:GoTop()
   while !::oDbfTrn:oDbf:Eof()


      if ( ::lAllTrn .OR. ( ::oDbfTrn:oDbf:cCodTrn >= ::cTrnOrg .AND. ::oDbfTrn:oDbf:cCodTRn <= ::cTrnDes ) ) .AND. !::oDbf:Seek( ::oDbfTrn:oDbf:cCodTrn )

         ::oDbf:Append()
         ::oDbf:Blank()
         ::oDbf:cCodTrn    := ::oDbfTrn:oDbf:cCodTrn
         ::oDbf:cNomTrn    := ::oDbfTrn:oDbf:cNomTrn
         ::oDbf:Save()

      end

      ::oDbfTrn:oDbf:Skip()

   end

RETURN ( self )



UTILITY STATIC function TInfTrn_NewGroup( lDesPrp) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   if lDesPrp




      ::AddGroup( {|| ::oDbf:cCodTrn + ::oDbf:cCodArt + ::oDbf:cCodPr1 + ::oDbf:cCodPr2 + ::oDbf:cValPr1 + ::oDbf:cValPr2 + ::oDbf:cLote }, {||   if( !Empty( ::oDbf:cValPr1 ), AllTrim( ::oDbf:cNomPr1 ) + ": " + AllTrim( ::oDbf:cNomVl1 ) + " - ", "" ) +  if( !Empty( ::oDbf:cValPr2 ), AllTrim( ::oDbf:cNomPr2 ) + ": " + AllTrim( ::oDbf:cNomVl2 ) + " - ", "" ) +  if( !Empty( ::oDbf:cLote ), "Lote:" + AllTrim( ::oDbf:cLote ), Space(1) ) }, {|| Space(1) } )
   end

RETURN ( Self )



UTILITY STATIC function TInfTrn_QuiGroup( lDesPrp) ; local Self AS CLASS TInfTrn := QSelf() AS CLASS TInfTrn

   if lDesPrp
      ::DelGroup()
   end

RETURN ( Self )

#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 49 ".\Prg\TCalenda.prg"
_HB_CLASS TCalendar ; UTILITY FUNCTION TCalendar(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TCalendar" , {TControl():classh} ) ) ; ;

   _HB_MEMBER { lRegistered} ; IIF( !.F., s_oClass:AddMultiClsData(,, nScope + IIF( .F., 32, 0 ) + 64, { "lRegistered" }, .F. ), )

   _HB_MEMBER { cDateFormat} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cDateFormat" }, .F., .F. ), )

   _HB_MEMBER { pSystemDate} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "pSystemDate" }, .F., .F. ), )
   _HB_MEMBER { pDateRange} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "pDateRange" }, .F., .F. ), )
   _HB_MEMBER { bSetGet2} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bSetGet2" }, .F., .F. ), )
   _HB_MEMBER { bOnGetState} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bOnGetState" }, .F., .F. ), )
   _HB_MEMBER { dDate, dDateEnd, lMultiselect} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "dDate" , "dDateEnd" , "lMultiselect" }, .F., .F. ), )
   _HB_MEMBER { lBtnUp, lPressed} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lBtnUp" , "lPressed" }, .F., .F. ), )
   _HB_MEMBER { aDayState} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aDayState" }, .F., .F. ), )
   _HB_MEMBER { lWeekNumbers} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lWeekNumbers" }, .F., .F. ), )
   _HB_MEMBER { lNoTodayCircle} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lNoTodayCircle" }, .F., .F. ), )
   _HB_MEMBER { lNoToday} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lNoToday" }, .F., .F. ), )
   _HB_MEMBER { lDayState} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lDayState" }, .F., .F. ), )

   _HB_MEMBER { lDblClick} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lDblClick" }, .F., .F. ), )
   _HB_MEMBER { bAction} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAction" }, .F., .F. ), )
   _HB_MEMBER { nDelay} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nDelay" }, .F., .F. ), )
   _HB_MEMBER { nRowDbl, nColDbl} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nRowDbl" , "nColDbl" }, .F., .F. ), )
   _HB_MEMBER { oTimerDbl} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTimerDbl" }, .F., .F. ), )



   _HB_MEMBER New( nRow, nCol, bSetGet, bSetGet2, oWnd, nWidth, nHeight, bValid, nClrFore, nClrBack, oFont, lDesign, oCursor, lPixel, cMsg, lUpdate, lMultiselect, bWhen, bChange, nHelpId) AS CLASS TCalendar; IIF( .F., s_oClass:ModMethod( "New", @TCalendar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TCalendar_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ReDefine( nId, bSetGet, bSetGet2,oWnd, nHelpId, cMsg, lUpdate, lMultiselect, bWhen, bValid) AS CLASS TCalendar; IIF( .F., s_oClass:ModMethod( "ReDefine", @TCalendar_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReDefine", @TCalendar_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Change(); IIF( .F., s_oClass:ModMethod( "Change", @TCalendar_Change(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Change", @TCalendar_Change(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));






   _HB_MEMBER Changed(); IIF( .F., s_oClass:ModInline( "Changed", {|Self | Self, ( If(::lMultiselect,( ::GetDateRange(), Eval( ::bSetGet, ::dDate ), Eval( ::bSetGet2, ::dDateEnd )  ) , ( ::GetDate(), Eval( ::bSetGet, ::dDate ) ) ), ::Change() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Changed", {|Self | Self, ( If(::lMultiselect,( ::GetDateRange(), Eval( ::bSetGet, ::dDate ), Eval( ::bSetGet2, ::dDateEnd )  ) , ( ::GetDate(), Eval( ::bSetGet, ::dDate ) ) ), ::Change() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER cToChar(); IIF( .F., s_oClass:ModInline( "cToChar", {|Self | Self, ::TControl:cToChar( "SysMonthCal32" ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "cToChar", {|Self | Self, ::TControl:cToChar( "SysMonthCal32" ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER EraseBkGnd( hDC); IIF( .F., s_oClass:ModMethod( "EraseBkGnd", @TCalendar_EraseBkGnd(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EraseBkGnd", @TCalendar_EraseBkGnd(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetArrayDatesRange(); IIF( .F., s_oClass:ModMethod( "GetArrayDatesRange", @TCalendar_GetArrayDatesRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetArrayDatesRange", @TCalendar_GetArrayDatesRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetColors(nFlags); IIF( .F., s_oClass:ModInline( "GetColors", {|Self,nFlags | Self, MonthCal_GetColor( ::hWnd, nFlags ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetColors", {|Self,nFlags | Self, MonthCal_GetColor( ::hWnd, nFlags ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetDate(); IIF( .F., s_oClass:ModMethod( "GetDate", @TCalendar_GetDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetDate", @TCalendar_GetDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetDateRange(); IIF( .F., s_oClass:ModMethod( "GetDateRange", @TCalendar_GetDateRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetDateRange", @TCalendar_GetDateRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetFirstDayOfWeek(); IIF( .F., s_oClass:ModInline( "GetFirstDayOfWeek", {|Self | Self, nLoWord( MonthCal_GetFirstDayOfWeek( ::hWnd ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetFirstDayOfWeek", {|Self | Self, nLoWord( MonthCal_GetFirstDayOfWeek( ::hWnd ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetMaxSelCount(); IIF( .F., s_oClass:ModInline( "GetMaxSelCount", {|Self | Self, MonthCal_GetMaxSelCount( ::hWnd ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetMaxSelCount", {|Self | Self, MonthCal_GetMaxSelCount( ::hWnd ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetMonthRange( nFlags); IIF( .F., s_oClass:ModMethod( "GetMonthRange", @TCalendar_GetMonthRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetMonthRange", @TCalendar_GetMonthRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetRange(); IIF( .F., s_oClass:ModMethod( "GetRange", @TCalendar_GetRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetRange", @TCalendar_GetRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetSystemDate(); IIF( .F., s_oClass:ModMethod( "GetSystemDate", @TCalendar_GetSystemDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetSystemDate", @TCalendar_GetSystemDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetToday(); IIF( .F., s_oClass:ModMethod( "GetToday", @TCalendar_GetToday(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetToday", @TCalendar_GetToday(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetVisibleMonths(); IIF( .F., s_oClass:ModInline( "GetVisibleMonths", {|Self | Self, MonthCal_GetMonthRange( ::hWnd, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetVisibleMonths", {|Self | Self, MonthCal_GetMonthRange( ::hWnd, 0 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Initiate( hDlg); IIF( .F., s_oClass:ModMethod( "Initiate", @TCalendar_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Initiate", @TCalendar_Initiate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Notify( nIdCtrl, nPtrNMHDR); IIF( .F., s_oClass:ModMethod( "Notify", @TCalendar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Notify", @TCalendar_Notify(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Display(); IIF( .F., s_oClass:ModInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @TCalendar_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @TCalendar_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


   _HB_MEMBER Refresh(); IIF( .F., s_oClass:ModInline( "Refresh", {|Self | Self, If( ::lMultiselect, ::SetDateRange(Eval( ::bSetGet ), Eval( ::bSetGet2 ) ), ::SetDate( Eval( ::bSetGet ) ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Refresh", {|Self | Self, If( ::lMultiselect, ::SetDateRange(Eval( ::bSetGet ), Eval( ::bSetGet2 ) ), ::SetDate( Eval( ::bSetGet ) ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER RestoreDateFormat(); IIF( .F., s_oClass:ModInline( "RestoreDateFormat", {|Self | Self, Set( 4, ::cDateFormat ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "RestoreDateFormat", {|Self | Self, Set( 4, ::cDateFormat ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER ResetDayStates(); IIF( .F., s_oClass:ModInline( "ResetDayStates", {|Self | Self, ::aDayState := Array( ::GetVisibleMonths(), 31 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "ResetDayStates", {|Self | Self, ::aDayState := Array( ::GetVisibleMonths(), 31 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetArrayDayState( nMonth, nDay); IIF( .F., s_oClass:ModMethod( "SetArrayDayState", @TCalendar_SetArrayDayState(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetArrayDayState", @TCalendar_SetArrayDayState(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetDate( dDate); IIF( .F., s_oClass:ModMethod( "SetDate", @TCalendar_SetDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetDate", @TCalendar_SetDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetDateRange( dDateIni, dDateEnd); IIF( .F., s_oClass:ModMethod( "SetDateRange", @TCalendar_SetDateRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetDateRange", @TCalendar_SetDateRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetDayState(); IIF( .F., s_oClass:ModInline( "SetDayState", {|Self | Self, SetDayState( ::hWnd, ::aDayState ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetDayState", {|Self | Self, SetDayState( ::hWnd, ::aDayState ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SaveDateFormat(); IIF( .F., s_oClass:ModInline( "SaveDateFormat", {|Self | Self, ::cDateFormat := Set( 4 ), Set( 4, "dd/mm/yyyy" ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SaveDateFormat", {|Self | Self, ::cDateFormat := Set( 4 ), Set( 4, "dd/mm/yyyy" ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetBackGround(nColor); IIF( .F., s_oClass:ModInline( "SetBackGround", {|Self,nColor | Self, ::SetColor( 0, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetBackGround", {|Self,nColor | Self, ::SetColor( 0, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetFirstDayOfWeek(nDay); IIF( .F., s_oClass:ModInline( "SetFirstDayOfWeek", {|Self,nDay | Self, MonthCal_SetFirstDayOfWeek( ::hWnd, nDay ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetFirstDayOfWeek", {|Self,nDay | Self, MonthCal_SetFirstDayOfWeek( ::hWnd, nDay ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetMaxSelCount(nDays); IIF( .F., s_oClass:ModInline( "SetMaxSelCount", {|Self,nDays | Self, If( nDays == NIL, nDays := 1, ), MonthCal_SetMaxSelCount( ::hWnd, nDays ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetMaxSelCount", {|Self,nDays | Self, If( nDays == NIL, nDays := 1, ), MonthCal_SetMaxSelCount( ::hWnd, nDays ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetMaxRange( dDate); IIF( .F., s_oClass:ModMethod( "SetMaxRange", @TCalendar_SetMaxRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetMaxRange", @TCalendar_SetMaxRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetMinRange( dDate); IIF( .F., s_oClass:ModMethod( "SetMinRange", @TCalendar_SetMinRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetMinRange", @TCalendar_SetMinRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetMonthBk(nColor); IIF( .F., s_oClass:ModInline( "SetMonthBk", {|Self,nColor | Self, ::SetColor( 4, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetMonthBk", {|Self,nColor | Self, ::SetColor( 4, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetRange( dDateStart, dDateEnd, nFlags); IIF( .F., s_oClass:ModMethod( "SetRange", @TCalendar_SetRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetRange", @TCalendar_SetRange(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetStructs(); IIF( .F., s_oClass:ModMethod( "SetStructs", @TCalendar_SetStructs(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetStructs", @TCalendar_SetStructs(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetSystemDate( dDate); IIF( .F., s_oClass:ModMethod( "SetSystemDate", @TCalendar_SetSystemDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetSystemDate", @TCalendar_SetSystemDate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetColor(nFlags, nColor); IIF( .F., s_oClass:ModInline( "SetColor", {|Self,nFlags, nColor | Self, MonthCal_SetColor( ::hWnd, nFlags, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetColor", {|Self,nFlags, nColor | Self, MonthCal_SetColor( ::hWnd, nFlags, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetTextClr(nColor); IIF( .F., s_oClass:ModInline( "SetTextClr", {|Self,nColor | Self, ::SetColor( 1, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTextClr", {|Self,nColor | Self, ::SetColor( 1, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetTitleBk(nColor); IIF( .F., s_oClass:ModInline( "SetTitleBk", {|Self,nColor | Self, ::SetColor( 2, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTitleBk", {|Self,nColor | Self, ::SetColor( 2, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetTitleText(nColor); IIF( .F., s_oClass:ModInline( "SetTitleText", {|Self,nColor | Self, ::SetColor( 3, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTitleText", {|Self,nColor | Self, ::SetColor( 3, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetToday( dDate); IIF( .F., s_oClass:ModMethod( "SetToday", @TCalendar_SetToday(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetToday", @TCalendar_SetToday(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetTrailingText(nColor); IIF( .F., s_oClass:ModInline( "SetTrailingText", {|Self,nColor | Self, ::SetColor( 5, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetTrailingText", {|Self,nColor | Self, ::SetColor( 5, nColor ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )



   _HB_MEMBER SetWeekNumbers(lOnOff); IIF( .F., s_oClass:ModInline( "SetWeekNumbers", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 4, , lOnOff ), ::lWeekNumbers := lOnOff ), ::lWeekNumbers ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetWeekNumbers", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 4, , lOnOff ), ::lWeekNumbers := lOnOff ), ::lWeekNumbers ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )



   _HB_MEMBER SetNoTodayCircle(lOnOff); IIF( .F., s_oClass:ModInline( "SetNoTodayCircle", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 8, , lOnOff ), ::lNoTodayCircle := lOnOff ), ::lNoTodayCircle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetNoTodayCircle", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 8, , lOnOff ), ::lNoTodayCircle := lOnOff ), ::lNoTodayCircle ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )



   _HB_MEMBER SetNoToday(lOnOff); IIF( .F., s_oClass:ModInline( "SetNoToday", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 16, , lOnOff ), ::lNoToday := lOnOff ), ::lNoToday ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetNoToday", {|Self,lOnOff | Self, If( lOnOff <> NIL,  ( __ChangeStyleWindow( ::hWnd, 16, , lOnOff ), ::lNoToday := lOnOff ), ::lNoToday ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetDayStateStyle( lOnOff); IIF( .F., s_oClass:ModMethod( "SetDayStateStyle", @TCalendar_SetDayStateStyle(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetDayStateStyle", @TCalendar_SetDayStateStyle(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER KeyChar( nKey, nFlags); IIF( .F., s_oClass:ModMethod( "KeyChar", @TCalendar_KeyChar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "KeyChar", @TCalendar_KeyChar(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LostFocus( hCtrl); IIF( .F., s_oClass:ModMethod( "LostFocus", @TCalendar_LostFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LostFocus", @TCalendar_LostFocus(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER GetDlgCode( nLastKey); IIF( .F., s_oClass:ModMethod( "GetDlgCode", @TCalendar_GetDlgCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "GetDlgCode", @TCalendar_GetDlgCode(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER KeyDown( nKey, nFlags); IIF( .F., s_oClass:ModMethod( "KeyDown", @TCalendar_KeyDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "KeyDown", @TCalendar_KeyDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LButtonUp( nRow, nCol, nFlags); IIF( .F., s_oClass:ModMethod( "LButtonUp", @TCalendar_LButtonUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LButtonUp", @TCalendar_LButtonUp(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER LButtonDown( nRow, nCol, nFlags); IIF( .F., s_oClass:ModMethod( "LButtonDown", @TCalendar_LButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LButtonDown", @TCalendar_LButtonDown(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Destroy(); IIF( .F., s_oClass:ModInline( "Destroy", {|Self | Self, ::TControl:Destroy(), ::oTimerDbl:End() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Destroy", {|Self | Self, ::TControl:Destroy(), ::oTimerDbl:End() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TCalendar ;





UTILITY STATIC function TCalendar_New( nRow, nCol, bSetGet, bSetGet2, oWnd, nWidth, nHeight, bValid, nClrFore, nClrBack, oFont, lDesign, oCursor, lPixel, cMsg, lUpdate, lMultiselect, bWhen, bChange, nHelpId, bAction, bLDblClick, lWeekNumbers, lNoTodayCircle, lNoToday, lDayState) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   LOCAL oSelf := Self
















   IIF( nRow == nil, nRow := 0, ) ; IIF( nCol == nil, nCol := 0, ); IIF( oWnd == nil, oWnd := GetWndDefault(), ); IIF( nWidth == nil, nWidth := 185 + If( lWeekNumbers, 15, 0 ), ); IIF( nHeight == nil, nHeight := If( oFont <> NIL, oFont:nHeight*8, 150 ), ); IIF( nClrFore == nil, nClrFore := GetSysColor( 9 ), ); IIF( nClrBack == nil, nClrBack := GetSysColor( 2 ), ); IIF( oFont == nil, oFont := oWnd:oFont, ); IIF( nHelpId == nil, nHelpId := 100, ); IIF( lDesign == nil, lDesign := .F., ); IIF( lPixel == nil, lPixel := .F., ); IIF( lUpdate == nil, lUpdate := .F., ); IIF( lMultiselect == nil, lMultiselect := .F., ); IIF( lWeekNumbers == nil, lWeekNumbers := .F., ); IIF( lNoTodayCircle == nil, lNoTodayCircle := .F., ); IIF( lNoToday == nil, lNoToday := .F., ); IIF( lDayState == nil, lDayState := .F., );


   ::nTop         = nRow * If( ! lPixel, 18, 1 )
   ::nLeft        = nCol * If( ! lPixel, 6, 1 )
   ::nBottom      = ::nTop  + nHeight
   ::nRight       = ::nLeft + nWidth
   ::nHelpId      = nHelpId
   ::oWnd         = oWnd
   ::oFont        = oFont
   ::bSetGet      = bSetGet
   ::bSetGet2     = bSetGet2
   ::lMultiselect = lMultiselect







   ::nStyle       = nOR( 1073741824, 268435456, 65536, If( lDayState, 1, 0 ), If( lWeekNumbers, 4, 0 ), If( lNoTodayCircle, 8, 0 ), If( lNoToday, 16, 0 ), If( lDesign, 67108864, 0 ), If( lMultiselect, 2,0 ) )

   ::nId          = ::GetNewId()
   ::lDrag        = lDesign
   ::lCaptured    = .F.
   ::cMsg         = cMsg
   ::lUpdate      = lUpdate
   ::bWhen        = bWhen
   ::bValid       = bValid
   ::bChange      = bChange
   ::dDate        := Eval(::bSetGet)
   ::bAction      = bAction
   ::bLDblClick   = bLDblClick
   if ::lMultiselect
      ::dDateEnd  = Eval(::bSetGet2)
   endif

   ::SetStructs()
   ::lWeekNumbers   = lWeekNumbers
   ::lNoTodayCircle = lNoTodayCircle
   ::lNoToday       = lNoToday
   ::lDayState      = lDayState

   ::lDblClick      = .F.

   InitCommon()

   if ! Empty( oWnd:hWnd )
      ::Create( "SysMonthCal32" )
      oWnd:AddControl( Self )
      if oFont <> NIL
         ::SetFont( oFont )
      endif
   else
      oWnd:DefControl( Self )
   endif

   if lDesign
      ::CheckDots()
   endif

   if ::lMultiselect
      ::SetDateRange( ::dDate,::dDateEnd )
   else
      ::SetDate(::dDate)
   endif

   ::SetTitleText( nClrFore )
   ::SetTitleBk( nClrBack )

   ::GetDate()
   ::nDelay    = GetTimeDblClick()
   ::aDayState = Array( ::GetVisibleMonths(), 31 )


   ::oTimerDbl := TTimer():New( ::nDelay, {||( oSelf:lDblClick := .F., oSelf:oTimerDbl:Deactivate() )}, ::oWnd )


RETURN Self




UTILITY STATIC function TCalendar_ReDefine( nId, bSetGet, bSetGet2, oWnd, nHelpId, nClrFore, nClrBack, oFont, oCursor, cMsg, lUpdate, lMultiselect, bWhen, bValid, bChanged, bAction, bLDblClick) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar


   LOCAL oSelf        := Self





   IIF( oWnd == nil, oWnd := GetWndDefault(), ) ; IIF( nClrFore == nil, nClrFore := GetSysColor( 8 ), ); IIF( nClrBack == nil, nClrBack := GetSysColor( 5 ), ); IIF( lUpdate == nil, lUpdate := .F., ); IIF( lMultiselect == nil, lMultiselect := .F., );


   ::nId          = nId
   ::hWnd         = 0
   ::nHelpId      = nHelpId
   ::oWnd         = oWnd
   ::oFont        = oFont
   ::oCursor      = oCursor
   ::lCaptured    = .F.
   ::lDrag        = .F.
   ::cMsg         = cMsg
   ::lUpdate      = lUpdate
   ::bWhen        = bWhen
   ::bValid       = bValid
   ::bSetGet      = bSetGet
   ::bSetGet2     = bSetGet2
   ::lMultiselect = lMultiselect
   ::bChange      = bChanged
   ::dDate        = Eval(::bSetGet)
   ::bAction      = bAction
   ::bLDblClick   = bLDblClick

   ::nDelay := GetTimeDblClick()
   ::lDblClick = .F.

   ::SetStructs()

   InitCommon()

   ::Register()

   oWnd:DefControl( Self )

RETURN Self



UTILITY STATIC function TCalendar_Change() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   if ::bChange <> NIL
      Eval( ::bChange, Self )
   endif

RETURN NIL



UTILITY STATIC function TCalendar_EraseBkGnd( hDC) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   IIF( ::lTransparent == nil, ::lTransparent := .F., ) ;

   if IsAppThemed() .OR. ::lTransparent
      return 1
   endif

return ::TControl:EraseBkGnd( hDC )



UTILITY STATIC function TCalendar_GetDlgCode( nLastKey) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   if ! ::oWnd:lValidating
      if nLastKey == 13 .OR. nLastKey == 9
         ::oWnd:nLastKey = nLastKey
      endif
   endif

RETURN 4



UTILITY STATIC function TCalendar_GetArrayDatesRange() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   LOCAL aDates := { , }, dDate



   dDate =  StrZero( ::pDateRange:nDay1, 2) + "/" + StrZero( ::pDateRange:nMonth1, 2) +"/" + StrZero( ::pDateRange:nYear1, 4)

   aDates[ 1 ] := CToD( dDate )



   dDate =  StrZero( ::pDateRange:nDay2, 2) + "/" + StrZero( ::pDateRange:nMonth2, 2) +"/" + StrZero( ::pDateRange:nYear2, 4)

   aDates[ 2 ] := CToD( dDate )

RETURN aDates



UTILITY STATIC function TCalendar_GetDate() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar
   LOCAL cDate

   ::SaveDateFormat()

   IF MonthCal_GetCurSel( ::hWnd, ::pSystemDate:cBuffer )

      ::dDate := ::GetSystemDate()

   ENDIF

   ::RestoreDateFormat()

RETURN ::dDate




UTILITY STATIC function TCalendar_GetMonthRange( nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   LOCAL dDate, aDates
   LOCAL nMonths

   IIF( nFlags == nil, nFlags := 0, ) ;

   ::SaveDateFormat()

   nMonths := MonthCal_GetMonthRange( ::hWnd, nFlags, ::pDateRange:cBuffer )

   aDates = ::GetArrayDatesRange()

   ::dDate   := aDates[ 1 ]
   ::dDateEnd:= aDates[ 2 ]

   ::RestoreDateFormat()

RETURN aDates



UTILITY STATIC function TCalendar_GetSystemDate() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   LOCAL cDate



   cDate := StrZero( ::pSystemDate:nDay, 2) + "/" + StrZero( ::pSystemDate:nMonth, 2) +"/" + StrZero( ::pSystemDate:nYear, 4)

RETURN CToD( cDate )



UTILITY STATIC function TCalendar_GetRange() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar
   LOCAL dDate, aDates := { , }

   ::SaveDateFormat()

   MonthCal_GetRange( ::hWnd, ::pDateRange:cBuffer )
   aDates = ::GetArrayDatesRange()

   ::RestoreDateFormat()

RETURN aDates



UTILITY STATIC function TCalendar_GetToday() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar
   LOCAL dDate

   ::SaveDateFormat()

   MonthCal_GetToday( ::hWnd, ::pSystemDate:cBuffer )

   dDate = ::GetSystemDate()

   ::RestoreDateFormat()

RETURN dDate




UTILITY STATIC function TCalendar_GetDateRange() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar
   LOCAL dDate, aDates

   ::SaveDateFormat()

   MonthCal_GetSelRange( ::hWnd, ::pDateRange:cBuffer )

   aDates = ::GetArrayDatesRange()

   ::dDate   := aDates[ 1 ]
   ::dDateEnd:= aDates[ 2 ]

   ::RestoreDateFormat()

RETURN aDates



UTILITY STATIC function TCalendar_Initiate( hDlg) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar
   local oSelf := Self
   LOCAL nStyle

   ::TControl:Initiate( hDlg )

   nStyle           = GetWindowLong( ::hWnd, -16 )
   ::lWeekNumbers   = lAnd( nStyle, 4 )
   ::lNoTodayCircle = lAnd( nStyle, 8 )
   ::lNoToday       = lAnd( nStyle, 16 )
   ::lDayState      = lAnd( nStyle, 1 )
   ::lMultiselect   = ::lMultiselect .OR. lAnd( nStyle, 2 )

   if ::lMultiselect
      ::dDateEnd  = Eval(::bSetGet2)
      ::SetDateRange( ::dDate, ::dDateEnd )
   else
      ::SetDate(::dDate)
   endif


   ::aDayState = Array( ::GetVisibleMonths(), 31 )

   ::GetDate()


   ::oTimerDbl := TTimer():New( ::nDelay, {||( oSelf:lDblClick := .F., oSelf:oTimerDbl:Deactivate() )}, ::oWnd )

RETURN NIL



UTILITY STATIC function TCalendar_KeyChar( nKey, nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   if nKey == 13
      ::oWnd:GoNextCtrl( ::hWnd )
      RETURN 0
   endif

RETURN ::TControl:KeyChar( nKey, nFlags )



UTILITY STATIC function TCalendar_KeyDown( nKey, nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   IF Empty( ::dDate )
      ::dDate := Eval( ::bSetGet )
   ENDIF

   do case
      case nKey == 13
         if ::bAction <> NIL
            Eval( ::bAction, Self )
         endif
   endcase

RETURN ::TControl:KeyDown( nKey, nFlags )



UTILITY STATIC function TCalendar_LButtonDown( nRow, nCol, nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   if ::lDrag
      RETURN ::TControl:LButtonDown( nRow, nCol, nFlags )
   endif

   if !::lFocused
      ::SetFocus()
   endif

   if ! ::lCaptured

      ::lCaptured = .T.
      ::Capture()

      IF ! ::lDblClick .AND. IsOverDay( ::hWnd, nRow, nCol )
         ::nRowDbl   = nRow
         ::nColDbl   = nCol
      ENDIF

   endif

   ::TControl:LButtonDown( nRow, nCol, nFlags )

RETURN NIL



UTILITY STATIC function TCalendar_LButtonUp( nRow, nCol, nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   local nPos

   if ::lDrag
      RETURN ::TControl:LButtonUp( nRow, nCol, nFlags )
   endif

   if ::lCaptured

      ::lCaptured = .F.
      ReleaseCapture()

      ::lBtnUp := .T.

      IF ! ::lDblClick
         ::lDblClick = .T.
         ::oTimerDbl:Activate()
      ELSE
         IF IsOverDay( ::hWnd, nRow, nCol ) .AND. Abs( ::nRowDbl - nRow  ) <= GetSysMetrics( 37 ) .AND. Abs( ::nColDbl - nCol ) <= GetSysMetrics( 36 )
         MsgBeep()
            IF ::bLDblClick <> NIL
               ::oTimerDbl:Deactivate()
               Eval( ::bLDblClick, nRow, nCol )
            ENDIF
         ENDIF
         ::lDblClick = .F.
      ENDIF


   endif

   ::Change()

   ::TControl:LButtonUp( nRow, nCol, nFlags )

RETURN NIL




UTILITY STATIC function TCalendar_LostFocus( hCtrl) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   Eval( ::bSetGet, ::dDate )
   if ::lMultiselect
      Eval( ::bSetGet2, ::dDateEnd )
   endif

RETURN ::TControl:LostFocus( hCtrl )




UTILITY STATIC function TCalendar_Notify( nIdCtrl, nPtrNMHDR) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   local nCode := GetNMHDRCode( nPtrNMHDR )
   local aDates, dDate, nMonth

   do case
      case nCode == ((-750) + 1)
         ::Changed()

      case nCode == ((-750) + 3)

         IF ::bOnGetState <> NIL .AND. ::lDayState
            ::ResetDayStates()
            GetDayState( nPtrNMHDR, ::aDayState, ::pSystemDate:cBuffer )
            ::SaveDateFormat()
            ::GetMonthRange()
            dDate := CToD( StrZero( Day( ::dDate ), 2 ) + "/" + StrZero( Month( ::dDate ), 2 ) + "/" + Str( Year( ::dDate ), 4 ) )
            ::SetSystemDate( dDate )
            ::RestoreDateFormat()
            Eval( ::bOnGetState, Self )
            GetDayState( nPtrNMHDR, ::aDayState )
         ELSE
            GetDayState( nPtrNMHDR, ::aDayState )
         ENDIF

   endcase

RETURN NIL



UTILITY STATIC function TCalendar_Paint() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   local aInfo
   aInfo = ::DispBegin()

   FillRect( ::hDC, GetClientRect( ::hWnd ), ::oWnd:oBrush:hBrush )

   CallWindowProc( ::nOldProc, ::hWnd, 15, ::hDC, 0 )

  ::DispEnd( aInfo )

return 1




UTILITY STATIC function TCalendar_SetArrayDayState( nMonth, nDay) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar


   IF nMonth > 0 .AND. nMonth <= ::GetVisibleMonths() .AND. nDay > 0 .AND. nDay < 32
      ::aDayState[ nMonth, nDay ] := 1
   ENDIF

RETURN NIL



UTILITY STATIC function TCalendar_SetDate( dDate) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::pSystemDate:nYear  := Year(dDate)
   ::pSystemDate:nMonth := Month(dDate)
   ::pSystemDate:nDay   := Day(dDate)

return MonthCal_SetCurSel( ::hWnd, ::pSystemDate:cBuffer )



UTILITY STATIC function TCalendar_SetDayStateStyle( lOnOff) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   IF lOnOff <> NIL
      __ChangeStyleWindow( ::hWnd, 1, , lOnOff )
      ::lDayState := lOnOff
   ENDIF

   IF ! ::lDayState
      ::ResetDayStates()
   ENDIF

   ::SetDayState()

RETURN ::lDayState



UTILITY STATIC function TCalendar_SetSystemDate( dDate) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::pSystemDate:nYear  := Year( dDate )
   ::pSystemDate:nMonth := Month( dDate )
   ::pSystemDate:nDay   := Day( dDate )

RETURN NIL



UTILITY STATIC function TCalendar_SetToday( dDate) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::SetSystemDate( dDate )

RETURN MonthCal_SetToday( ::hWnd, ::pSystemDate:cBuffer )



UTILITY STATIC function TCalendar_SetDateRange( dDateStart, dDateEnd) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   IF ( dDateEnd - dDateStart + 1) > ::GetMaxSelCount()
      dDateEnd := dDateStart + ::GetMaxSelCount() - 1
   endif

   ::pDateRange:nYear1  := Year( dDateStart )
   ::pDateRange:nMonth1 := Month( dDateStart )
   ::pDateRange:nDay1   := Day( dDateStart )

   ::pDateRange:nYear2  := Year( dDateEnd )
   ::pDateRange:nMonth2 := Month( dDateEnd )
   ::pDateRange:nDay2   := Day( dDateEnd )

   ::dDate    := dDateStart
   ::dDateEnd := dDateEnd

   IF MonthCal_SetSelRange( ::hWnd, ::pDateRange:cBuffer )
      ::Changed()
   ENDIF


RETURN NIL



UTILITY STATIC function TCalendar_SetRange( dDateStart, dDateEnd, nFlags) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   IIF( nFlags == nil, nFlags := nOR( 0x1, 0x2 ), ) ;

   ::pDateRange:nYear1  := Year( dDateStart )
   ::pDateRange:nMonth1 := Month( dDateStart )
   ::pDateRange:nDay1   := Day( dDateStart )

   ::pDateRange:nYear2  := Year( dDateEnd )
   ::pDateRange:nMonth2 := Month( dDateEnd )
   ::pDateRange:nDay2   := Day( dDateEnd )

RETURN MonthCal_SetRange( ::hWnd, nFlags, ::pDateRange:cBuffer )




UTILITY STATIC function TCalendar_SetMaxRange( dDate) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::pDateRange:nYear2  := Year( dDate )
   ::pDateRange:nMonth2 := Month( dDate )
   ::pDateRange:nDay2   := Day( dDate )

RETURN MonthCal_SetRange( ::hWnd, 0x2, ::pDateRange:cBuffer )



UTILITY STATIC function TCalendar_SetMinRange( dDate) ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::pDateRange:nYear1  := Year( dDate )
   ::pDateRange:nMonth1 := Month( dDate )
   ::pDateRange:nDay1   := Day( dDate )

RETURN MonthCal_SetRange( ::hWnd, 0x1, ::pDateRange:cBuffer )




UTILITY STATIC function TCalendar_SetStructs() ; local Self AS CLASS TCalendar := QSelf() AS CLASS TCalendar

   ::pDateRange := ThisStruct( TStruct():New() )
        ThisStruct():AddMember( "nYear1", 3, )
        ThisStruct():AddMember( "nMonth1", 3, )
        ThisStruct():AddMember( "nDayOfWeek1", 3, )
        ThisStruct():AddMember( "nDay1", 3, )
        ThisStruct():AddMember( "nHour1", 3, )
        ThisStruct():AddMember( "nMinute1", 3, )
        ThisStruct():AddMember( "nSecond1", 3, )
        ThisStruct():AddMember( "nMilliseconds1", 3, )

        ThisStruct():AddMember( "nYear2", 3, )
        ThisStruct():AddMember( "nMonth2", 3, )
        ThisStruct():AddMember( "nDayOfWeek2", 3, )
        ThisStruct():AddMember( "nDay2", 3, )
        ThisStruct():AddMember( "nHour2", 3, )
        ThisStruct():AddMember( "nMinute2", 3, )
        ThisStruct():AddMember( "nSecond2", 3, )
        ThisStruct():AddMember( "nMilliseconds2", 3, )
   ThisStruct( nil )

   ::pSystemDate := ThisStruct( TStruct():New() )
        ThisStruct():AddMember( "nYear", 3, )
        ThisStruct():AddMember( "nMonth", 3, )
        ThisStruct():AddMember( "nDayOfWeek", 3, )
        ThisStruct():AddMember( "nDay", 3, )
        ThisStruct():AddMember( "nHour", 3, )
        ThisStruct():AddMember( "nMinute", 3, )
        ThisStruct():AddMember( "nSecond", 3, )
        ThisStruct():AddMember( "nMilliseconds", 3, )
   ThisStruct( nil )

RETURN NIL





Static Function GetTimeDblClick()
   local oReg := TReg32():New( 2147483649, "Control Panel\Mouse" )
   local uVar

   uVar := oReg:Get( "DoubleClickSpeed", "500" )

   IF uVar == NIL
      uVar = 500
   ENDIF
   oReg:Close()

RETURN Val( uVar )



#pragma BEGINDUMP

#include <windows.h>
#include <hbapi.h>
#include <commctrl.h>
#include <hbapiitm.h>
//---------
// Set Functions
//---------

HB_FUNC( MONTHCAL_SETCOLOR ) // hWnd, iColor, clr -> COLORREF
{
   hb_retnl( ( LONG ) MonthCal_SetColor( ( HWND ) hb_parnl( 1 ), hb_parni( 2 ), ( COLORREF ) hb_parnl( 3 ) ) );
}

//---------

HB_FUNC( MONTHCAL_SETCURSEL ) //hWnd, pSystemDate -> BOOL
{
   hb_retl( MonthCal_SetCurSel( ( HWND ) hb_parnl( 1 ), ( LPSYSTEMTIME ) hb_parc( 2 ) ) );
}

//---------

CHAR * LToStr( LONG ) ;
#define BOLDDAY(ds,iDay) if(iDay>0 && iDay<32)\
                            (ds)|=(0x00000001<<(iDay-1))

HB_FUNC( SETDAYSTATE ) //hWnd, ArrayDays
{
   INT iMonths;
   HWND hwndMC = ( HWND ) hb_parnl( 1 );
   MONTHDAYSTATE *pDayState;
   PHB_ITEM pArraydate  = hb_param( 2, HB_IT_ARRAY );
   INT i, j;
   PHB_ITEM pItem;

   iMonths = MonthCal_GetMonthRange( hwndMC, GMR_DAYSTATE, NULL );

   pDayState = ( MONTHDAYSTATE * )hb_xgrab( sizeof( MONTHDAYSTATE ) * iMonths );

   memset( pDayState, 0, sizeof( MONTHDAYSTATE ) * iMonths );

   for( i = 1; i < iMonths - 1; i++ )
   {
      pItem = hb_itemArrayGet( pArraydate, i );
      for( j = 1; j <= 31; j++ )
      {
         if( hb_arrayGetNL( pItem, j ) == 1 )
            BOLDDAY( pDayState[ i ], j ) ;
      }
      hb_itemRelease( pItem );
   }

   MonthCal_SetDayState( hwndMC, iMonths, pDayState );
   hb_xfree( ( void *)pDayState );

}

//---------

HB_FUNC( GETDAYSTATE ) //hWnd, ArrayDays, pDayState
{
   LPNMDAYSTATE lParam = ( LPNMDAYSTATE ) hb_parnl( 1 );
   INT iMonths;
   MONTHDAYSTATE *pDayState;
   PHB_ITEM pArraydate  = hb_param( 2, HB_IT_ARRAY );
   INT i, j;
   PHB_ITEM pItem;
   LPSYSTEMTIME lpSysTime ;


   iMonths = lParam->cDayState;


   pDayState = ( MONTHDAYSTATE * )hb_xgrab( sizeof( MONTHDAYSTATE ) * iMonths );

   memset( pDayState, 0, sizeof( MONTHDAYSTATE ) * iMonths );

   for( i = 1; i < iMonths - 1; i++ )
   {
      pItem = hb_itemArrayGet( pArraydate, i );

      for( j = 1; j <= 31; j++ )
      {
         if( hb_arrayGetNL( pItem, j ) == 1 )
            BOLDDAY( pDayState[ i ], j ) ;
      }
      hb_itemRelease( pItem );
   }

   lParam->prgDayState = pDayState;

   if( hb_pcount() > 2 )
   {
      lpSysTime = ( LPSYSTEMTIME ) hb_parc( 3 );
      *lpSysTime = lParam->stStart;
   }

   hb_xfree( pDayState );

}

//---------

HB_FUNC( ISOVERDAY )
{
	HWND hwndMC = ( HWND ) hb_parnl( 1 );
	PMCHITTESTINFO pMCHitTest = ( PMCHITTESTINFO ) hb_xgrab( sizeof ( MCHITTESTINFO ) ) ;
	BOOL lOver;

	memset( pMCHitTest, 0, sizeof( MCHITTESTINFO ) );

	pMCHitTest->cbSize = sizeof( MCHITTESTINFO );
	pMCHitTest->pt.y = hb_parnl( 2 );
	pMCHitTest->pt.x = hb_parnl( 3 );

	lOver = ( MonthCal_HitTest( hwndMC, pMCHitTest ) == MCHT_CALENDARDATE );

	hb_xfree( pMCHitTest );

	hb_retl( lOver );
}

//---------

HB_FUNC( MONTHCAL_SETFIRSTDAYOFWEEK )
{
   MonthCal_SetFirstDayOfWeek( ( HWND ) hb_parnl( 1 ), hb_parni( 2 ) );
}

//---------

HB_FUNC( MONTHCAL_SETMAXSELCOUNT ) //hWnd, iMax -> BOOL
{
   hb_retl( MonthCal_SetMaxSelCount( ( HWND ) hb_parnl( 1 ), hb_parni( 2 ) ) );
}

//---------

HB_FUNC( MONTHCAL_SETRANGE ) //hWnd, iMax, pDayState -> BOOL
{
   hb_retl( MonthCal_SetRange( ( HWND ) hb_parnl( 1 ), hb_parni( 2 ), ( LPSYSTEMTIME ) hb_parc( 3 ) ) );
}

//---------


HB_FUNC( MONTHCAL_SETSELRANGE ) //hWnd, pSystemDate -> BOOL
{
   hb_retl( MonthCal_SetSelRange( ( HWND ) hb_parnl( 1 ), ( LPSYSTEMTIME ) hb_parc( 2 ) ) );
}

//---------

HB_FUNC( MONTHCAL_SETTODAY )  //hWnd, pSystemDate
{
   MonthCal_SetToday( ( HWND ) hb_parnl( 1 ), ( LPSYSTEMTIME ) hb_parc( 2 ) );
}

//---------
// Get functions
//---------

HB_FUNC( MONTHCAL_GETCOLOR ) // hWnd, iColor -> COLORREF
{
   hb_retnl( ( LONG ) MonthCal_GetColor( ( HWND ) hb_parnl( 1 ), hb_parni( 2 ) ) );
}

//---------

HB_FUNC( MONTHCAL_GETCURSEL )  //hWnd, @pSystemDate -> BOOL
{
   LPSYSTEMTIME lpSysTime = ( LPSYSTEMTIME ) hb_parc( 2 );
   hb_retl( MonthCal_GetCurSel( ( HWND ) hb_parnl( 1 ), lpSysTime ) );
}


//---------

HB_FUNC( MONTHCAL_GETFIRSTDAYOFWEEK )  //hWnd -> iFirstDay
{
   hb_retnl( MonthCal_GetFirstDayOfWeek( ( HWND ) hb_parnl( 1 ) ) );
}

//---------

HB_FUNC( MONTHCAL_GETMAXSELCOUNT )  //hWnd -> iMaxSel
{
   hb_retni( MonthCal_GetMaxSelCount( ( HWND ) hb_parnl( 1 ) ) );
}

//---------

HB_FUNC( MONTHCAL_GETMONTHRANGE )  //hWnd, dwFlags, @pSystemDate -> iTotalMonths
{
   LPSYSTEMTIME lpSysTime = ( LPSYSTEMTIME ) hb_parc( 3 );
   hb_retnl( MonthCal_GetMonthRange( ( HWND ) hb_parnl( 1 ), hb_parnl( 2 ), lpSysTime ) );
}

//---------

HB_FUNC( MONTHCAL_GETTODAY )  //hWnd, @pSystemDate -> BOOL
{
   LPSYSTEMTIME lpSysTime = ( LPSYSTEMTIME ) hb_parc( 2 );
   hb_retl( MonthCal_GetToday( ( HWND ) hb_parnl( 1 ), lpSysTime ) );
}

//---------

HB_FUNC( MONTHCAL_GETRANGE )
{
   LPSYSTEMTIME lpSysTime = ( LPSYSTEMTIME ) hb_parc( 2 );
   hb_retnl( MonthCal_GetRange( ( HWND ) hb_parnl( 1 ), lpSysTime ) );
}

//---------

HB_FUNC( MONTHCAL_GETSELRANGE )  //hWnd, @pDateRange -> BOOL
{
   LPSYSTEMTIME lpSysTime = ( LPSYSTEMTIME ) hb_parc( 2 );
   hb_retl( MonthCal_GetSelRange( ( HWND ) hb_parnl( 1 ), lpSysTime ) );
}

//---------

#pragma ENDDUMP

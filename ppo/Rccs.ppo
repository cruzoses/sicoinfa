#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 13 ".\Prg\Rccs.prg"
_HB_CLASS TRCcs ; UTILITY FUNCTION TRCcs(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TRCcs" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { hDC} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hDC" }, .F., .F. ), )
   _HB_MEMBER { hDCOut} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hDCOut" }, .F., .F. ), )
   _HB_MEMBER { aRows} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aRows" }, .F., .F. ), )
   _HB_MEMBER { oFont} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFont" }, .F., .F. ), )
   _HB_MEMBER { cFile} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFile" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC hFile} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 0, nScope + IIF( .F., 32, 0 ), { "hFile" }, .F., .F. ), )
   _HB_MEMBER {AS NUMERIC nFile} ; IIF( !.F., s_oClass:AddMultiData( "NUMERIC", 1, nScope + IIF( .F., 32, 0 ), { "nFile" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lMeta} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lMeta" }, .F., .F. ), )
   _HB_MEMBER { nXOffset} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nXOffset" }, .F., .F. ), )
   _HB_MEMBER { nYOffset} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nYOffset" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lPrvModal} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .T., nScope + IIF( .F., 32, 0 ), { "lPrvModal" }, .F., .F. ), )

   _HB_MEMBER New( cFile) AS CLASS TRCcs; IIF( .F., s_oClass:ModMethod( "New", @TRCcs_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TRCcs_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER StartPage(); IIF( .F., s_oClass:ModMethod( "StartPage", @TRCcs_StartPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "StartPage", @TRCcs_StartPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER EndPage(); IIF( .F., s_oClass:ModMethod( "EndPage", @TRCcs_EndPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "EndPage", @TRCcs_EndPage(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TRCcs_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TRCcs_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Say( nRow, nCol, cText, oFont); IIF( .F., s_oClass:ModMethod( "Say", @TRCcs_Say(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Say", @TRCcs_Say(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetHeight( nHeight ); IIF( !.F., s_oClass:AddVirtual( "SetHeight" ), )

   _HB_MEMBER GetTextWidth(cText, oFont); IIF( .F., s_oClass:ModInline( "GetTextWidth", {|Self,cText, oFont | Self, GetTextWidth( ::hDC, cText, ::SetFont( oFont ):hFont ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetTextWidth", {|Self,cText, oFont | Self, GetTextWidth( ::hDC, cText, ::SetFont( oFont ):hFont ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetTextHeight(cText, oFont); IIF( .F., s_oClass:ModInline( "GetTextHeight", {|Self,cText, oFont | Self, ::SetFont( oFont ):nHeight }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetTextHeight", {|Self,cText, oFont | Self, ::SetFont( oFont ):nHeight }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SetSize( nWidth, nHeight ); IIF( !.F., s_oClass:AddVirtual( "SetSize" ), )

   _HB_MEMBER GetPhySize(); IIF( .F., s_oClass:ModInline( "GetPhySize", {|Self | Self, ({::nWidth, ::nHeight}) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetPhySize", {|Self | Self, ({::nWidth, ::nHeight}) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER CharWidth(); IIF( .F., s_oClass:ModInline( "CharWidth", {|Self | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "CharWidth", {|Self | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER CharHeight(); IIF( .F., s_oClass:ModInline( "CharHeight", {|Self | Self, 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "CharHeight", {|Self | Self, 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER nVertRes(); IIF( .F., s_oClass:ModInline( "nVertRes", {|Self | Self, GetDeviceCaps( ::hDC, 10  ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nVertRes", {|Self | Self, GetDeviceCaps( ::hDC, 10  ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER nHorzRes(); IIF( .F., s_oClass:ModInline( "nHorzRes", {|Self | Self, GetDeviceCaps( ::hDC, 8  ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nHorzRes", {|Self | Self, GetDeviceCaps( ::hDC, 8  ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER nVertSize(); IIF( .F., s_oClass:ModInline( "nVertSize", {|Self | Self, GetDeviceCaps( ::hDC, 6 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nVertSize", {|Self | Self, GetDeviceCaps( ::hDC, 6 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER nHorzSize(); IIF( .F., s_oClass:ModInline( "nHorzSize", {|Self | Self, GetDeviceCaps( ::hDC, 4 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nHorzSize", {|Self | Self, GetDeviceCaps( ::hDC, 4 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )









   _HB_MEMBER nLogPixelX(); IIF( .F., s_oClass:ModInline( "nLogPixelX", {|Self | Self, GetDeviceCaps( ::hDC, 88 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nLogPixelX", {|Self | Self, GetDeviceCaps( ::hDC, 88 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER nLogPixelY(); IIF( .F., s_oClass:ModInline( "nLogPixelY", {|Self | Self, GetDeviceCaps( ::hDC, 90 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "nLogPixelY", {|Self | Self, GetDeviceCaps( ::hDC, 90 ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER CharSay(nRow, nCol, cText); IIF( .F., s_oClass:ModInline( "CharSay", {|Self,nRow, nCol, cText | Self, ::Say(nRow, nCol, cText) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "CharSay", {|Self,nRow, nCol, cText | Self, ::Say(nRow, nCol, cText) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER GetOrientation(); IIF( .F., s_oClass:ModInline( "GetOrientation", {|Self | Self, 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "GetOrientation", {|Self | Self, 2 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER SayBitmap( ); IIF( !.F., s_oClass:AddVirtual( "SayBitmap" ), )
   _HB_MEMBER SetPos( ); IIF( !.F., s_oClass:AddVirtual( "SetPos" ), )

   _HB_MEMBER Line(); IIF( .F., s_oClass:ModMethod( "Line", @TRCcs_Line(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Line", @TRCcs_Line(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));
   _HB_MEMBER Box( ); IIF( !.F., s_oClass:AddVirtual( "Box" ), )

   _HB_MEMBER SetPixelMode( ); IIF( !.F., s_oClass:AddVirtual( "SetPixelMode" ), )
   _HB_MEMBER SetTwipsMode( ); IIF( !.F., s_oClass:AddVirtual( "SetTwipsMode" ), )

   _HB_MEMBER SetLoInchMode( ); IIF( !.F., s_oClass:AddVirtual( "SetLoInchMode" ), )
   _HB_MEMBER SetHiInchMode( ); IIF( !.F., s_oClass:AddVirtual( "SetHiInchMode" ), )

   _HB_MEMBER SetLoMetricMode( ); IIF( !.F., s_oClass:AddVirtual( "SetLoMetricMode" ), )
   _HB_MEMBER SetHiMetricMode( ); IIF( !.F., s_oClass:AddVirtual( "SetHiMetricMode" ), )

   _HB_MEMBER SetIsotropicMode( ); IIF( !.F., s_oClass:AddVirtual( "SetIsotropicMode" ), )
   _HB_MEMBER SetAnisotropicMode( ); IIF( !.F., s_oClass:AddVirtual( "SetAnisotropicMode" ), )

   _HB_MEMBER SetWindowExt( ); IIF( !.F., s_oClass:AddVirtual( "SetWindowExt" ), )

   _HB_MEMBER SetViewPortExt( ); IIF( !.F., s_oClass:AddVirtual( "SetViewPortExt" ), )

   _HB_MEMBER FillRect( ); IIF( !.F., s_oClass:AddVirtual( "FillRect" ), )

   _HB_MEMBER SetLandscape( ); IIF( !.F., s_oClass:AddVirtual( "SetLandscape" ), )
   _HB_MEMBER SetPortrait( ); IIF( !.F., s_oClass:AddVirtual( "SetPortrait" ), )
   _HB_MEMBER SetCopies( nCopies ); IIF( !.F., s_oClass:AddVirtual( "SetCopies" ), )
   _HB_MEMBER Setup( ); IIF( !.F., s_oClass:AddVirtual( "Setup" ), )
   _HB_MEMBER Rebuild( ); IIF( !.F., s_oClass:AddVirtual( "Rebuild" ), )
   _HB_MEMBER Font( oFont ); IIF( !.F., s_oClass:AddVirtual( "Font" ), )

   _HB_MEMBER Inch2Pix( ); IIF( !.F., s_oClass:AddVirtual( "Inch2Pix" ), )

   _HB_MEMBER CreateFile(); IIF( .F., s_oClass:ModMethod( "CreateFile", @TRCcs_CreateFile(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateFile", @TRCcs_CreateFile(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SetFont( oFont); IIF( .F., s_oClass:ModMethod( "SetFont", @TRCcs_SetFont(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SetFont", @TRCcs_SetFont(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Pix2MmX(nRow); IIF( .F., s_oClass:ModInline( "Pix2MmX", {|Self,nRow | Self, ( nRow * 25.4 / ::nLogPixelX() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Pix2MmX", {|Self,nRow | Self, ( nRow * 25.4 / ::nLogPixelX() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Pix2MmY(nCol); IIF( .F., s_oClass:ModInline( "Pix2MmY", {|Self,nCol | Self, ( nCol * 25.4 / ::nLogPixelY() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Pix2MmY", {|Self,nCol | Self, ( nCol * 25.4 / ::nLogPixelY() ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TRCcs ;



UTILITY STATIC function TRCcs_New( cFile) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   ::hFile  := 0
   ::nFile  := 1
   ::lMeta  := .F.

   ::cFile  := cFile
   ::hDC    := GetPrintDefault( GetActiveWindow() )

RETURN Self



UTILITY STATIC function TRCcs_End() ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   If ::hDC <> 0
      DeleteDC(::hDC)
      ::hDC := 0
   endif

RETURN nil



UTILITY STATIC function TRCcs_CreateFile() ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   if File( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )
      fErase( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )
   end

   ::hFile     := fCreate( ::cFile + StrZero( ::nFile, 5 ) + ".Htm" )

   if ::hFile < 0
      ::hFile  := 0
   endif

   ::aRows     := {}

   aAdd( ::aRows, "<HTML>" )
   aAdd( ::aRows, "<HEAD>" )
   aAdd( ::aRows, "</HEAD>" )
   aAdd( ::aRows, '<BODY style="border: 0 0;margin: 0 0 0 0;overflow-x: hidden;">' )

RETURN NIL



UTILITY STATIC function TRCcs_StartPage() ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   if ::hFile == 0
      ::CreateFile()
   end

   ::nFile++

RETURN NIL



UTILITY STATIC function TRCcs_EndPage() ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local nFor

   aAdd( ::aRows, "</BODY>" )
   aAdd( ::aRows, "</HTML>" )

   for nFor := 1 TO len( ::aRows )
      fWrite( ::hFile, ::aRows[ nFor ] + Chr(13)+Chr(10) )
   next

   fClose( ::hFile )

   ::hFile := 0

RETURN NIL



UTILITY STATIC function TRCcs_Say( nRow, nCol, cText, oFont, nMaxSize) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local cChar

   cChar := '<P CLASS="DEFAULT" style="'
   cChar += "position:absolute;"
   cChar += "font-family:" + Rtrim( oFont:cFaceName ) + ";"
   cChar += "font-size:" + Ltrim( Str( Round( oFont:nHeight / ::nLogPixelY() * 72, 0 ) ) ) + ";"
   cChar += "top:" + Ltrim( Str( ::Pix2MmX( nRow ) ) ) + "mm;"
   cChar += "left:" + Ltrim( Str( ::Pix2MmY( nCol ) ) ) + "mm;"
   cChar += '">'
   cChar += StrTran( cText, Space( 1 ), "&nbsp;" )
   cChar += "</P>"

   aAdd( ::aRows, cChar )

RETURN NIL



UTILITY STATIC function TRCcs_SetFont( oFont) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   IF oFont <> NIL
      ::oFont := oFont
   ELSEIF ::oFont == NIL
      ::oFont := TFont():New( "COURIER", 0, -12,,,,,,,,,,,,, Self, )
   ENDIF

RETURN ::oFont



UTILITY STATIC function TRCcs_Line( nTop, nLeft, nBottom, nRight, oPen) ; local Self AS CLASS TRCcs := QSelf() AS CLASS TRCcs

   local cChar
   local nWidth
   local nHeight

   cChar       := '<P CLASS="DEFAULT" style="'
   cChar       += "position:absolute;"

   cChar       += "top:" + Ltrim( Str( ::Pix2MmX( nTop ) ) ) + "mm;"
   cChar       += "left:" + Ltrim( Str( ::Pix2MmY( nLeft ) ) ) + "mm;"

   nWidth      := nRight - nLeft
   if nWidth <> 0
      nWidth   := ::Pix2MmY( nWidth )
      cChar    += "width:" + Ltrim( Str( nWidth ) ) + "mm;"
      cChar    += "border-top-style:solid;"
   end

   nHeight     := nBottom - nTop
   if nHeight <> 0
      nHeight  := ::Pix2MmY( nHeight )
      cChar    += "height:" + Ltrim( Str( ::Pix2MmY( nHeight ) ) ) + "mm;"
      cChar    += "border:solid;"
   end

   cChar       += "border-width:1px;"
   cChar       += '">'
   cChar       += "</P>"

   aAdd( ::aRows, cChar )

RETURN NIL

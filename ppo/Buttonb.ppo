#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 20 ".\Prg\Buttonb.prg"
_HB_CLASS TButtonBmp ; UTILITY FUNCTION TButtonBmp(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TButtonBmp" , {TButton():classh} ) ) ; ;

   _HB_MEMBER { hBitmap} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hBitmap" }, .F., .F. ), )

   _HB_MEMBER { cBitmap} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cBitmap" }, .F., .F. ), )

   _HB_MEMBER { cPosText} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPosText" }, .F., .F. ), )

   _HB_MEMBER {AS LOGICAL lHasAlpha} ; IIF( !.F., s_oClass:AddMultiData( "LOGICAL", .F., nScope + IIF( .F., 32, 0 ), { "lHasAlpha" }, .F., .F. ), )
   _HB_MEMBER { bAlphaLevel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "bAlphaLevel" }, .F., .F. ), )
   _HB_MEMBER { hAlphaLevel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "hAlphaLevel" }, .F., .F. ), )




   _HB_MEMBER New( nRow, nCol, cCaption, oWnd, bAction, nWidth, nHeight, nHelpId, oFont, lDefault, lPixel, lDesign, cMsg, lUpdate, bWhen, bValid, lCancel, cBitmap, cPosText) AS CLASS TButtonBmp; IIF( .F., s_oClass:ModMethod( "New", @TButtonBmp_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TButtonBmp_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));


   _HB_MEMBER ReDefine( nId, bAction, oWnd, nHelpId, cMsg, lUpdate, bWhen, bValid, cPrompt, lCancel, cBitmap, cPosText, cToolTip) AS CLASS TButtonBmp; IIF( .F., s_oClass:ModMethod( "ReDefine", @TButtonBmp_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReDefine", @TButtonBmp_ReDefine(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER HandleEvent( nMsg, nWParam, nLParam); IIF( .F., s_oClass:ModMethod( "HandleEvent", @TButtonBmp_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "HandleEvent", @TButtonBmp_HandleEvent(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER KeyDown(nKey, nFlags); IIF( .F., s_oClass:ModInline( "KeyDown", {|Self,nKey, nFlags | Self, ::TButton:KeyDown( nKey, nFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "KeyDown", {|Self,nKey, nFlags | Self, ::TButton:KeyDown( nKey, nFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER LButtonDown(nRow, nCol, nKeyFlags); IIF( .F., s_oClass:ModInline( "LButtonDown", {|Self,nRow, nCol, nKeyFlags | Self, ::TButton:LButtonDown( nRow, nCol, nKeyFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "LButtonDown", {|Self,nRow, nCol, nKeyFlags | Self, ::TButton:LButtonDown( nRow, nCol, nKeyFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER LDblClick(nRow, nCol, nKeyFlags); IIF( .F., s_oClass:ModInline( "LDblClick", {|Self,nRow, nCol, nKeyFlags | Self, ::TButton:LDblClick( nRow, nCol, nKeyFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "LDblClick", {|Self,nRow, nCol, nKeyFlags | Self, ::TButton:LDblClick( nRow, nCol, nKeyFlags ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER LoadBitmap( cBmpName); IIF( .F., s_oClass:ModMethod( "LoadBitmap", @TButtonBmp_LoadBitmap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "LoadBitmap", @TButtonBmp_LoadBitmap(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   if ! SetSkins()
      _HB_MEMBER MouseMove(nRow, nCol, nFlags); IIF( .F., s_oClass:ModInline( "MouseMove", {|Self,nRow, nCol, nFlags | Self, ::TButton:MouseMove( nRow, nCol, nFlags ), ::oWnd:SetMsg( ::cMsg ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "MouseMove", {|Self,nRow, nCol, nFlags | Self, ::TButton:MouseMove( nRow, nCol, nFlags ), ::oWnd:SetMsg( ::cMsg ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
      _HB_MEMBER Display(); IIF( .F., s_oClass:ModInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Display", {|Self | Self, ::BeginPaint(), ::Paint(), ::EndPaint(), 0 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   endif

   _HB_MEMBER Destroy(); IIF( .F., s_oClass:ModInline( "Destroy", {|Self | Self, DeleteObject( ::hBitmap ), ::TButton:Destroy() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Destroy", {|Self | Self, DeleteObject( ::hBitmap ), ::TButton:Destroy() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER EraseBkGnd(hDC); IIF( .F., s_oClass:ModInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "EraseBkGnd", {|Self,hDC | Self, 1 }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Paint(); IIF( .F., s_oClass:ModMethod( "Paint", @TButtonBmp_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Paint", @TButtonBmp_Paint(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Enable(); IIF( .F., s_oClass:ModInline( "Enable", {|Self | Self, ::TButton:Enable(), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Enable", {|Self | Self, ::TButton:Enable(), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER Disable(); IIF( .F., s_oClass:ModInline( "Disable", {|Self | Self, ::TButton:Disable(), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "Disable", {|Self | Self, ::TButton:Disable(), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER HasAlpha(); IIF( .F., s_oClass:ModInline( "HasAlpha", {|Self | Self, ::lHasAlpha := HasAlpha( ::hBitmap ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "HasAlpha", {|Self | Self, ::lHasAlpha := HasAlpha( ::hBitmap ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )
   _HB_MEMBER nAlphaLevel(nLevel); _HB_MEMBER _nAlphaLevel(nLevel); IIF( .F., s_oClass:ModMethod( "nAlphaLevel", @TButtonBmp_nAlphaLevel(), 1 + 32, .F. ), s_oClass:AddMethod( "nAlphaLevel", @TButtonBmp_nAlphaLevel(), 1 + 32, .F. ) ) ; IIF( .F., s_oClass:ModMethod( "_nAlphaLevel", @TButtonBmp_nAlphaLevel() ), s_oClass:AddMethod( "_nAlphaLevel", @TButtonBmp_nAlphaLevel() ) ) ;

   _HB_MEMBER SetText(cText); IIF( .F., s_oClass:ModInline( "SetText", {|Self,cText | Self, ::TButton:SetText( cText ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SetText", {|Self,cText | Self, ::TButton:SetText( cText ), ::Refresh() }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER End(); IIF( .F., s_oClass:ModMethod( "End", @TButtonBmp_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "End", @TButtonBmp_End(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TButtonBmp ;





UTILITY STATIC function TButtonBmp_New( nRow, nCol, cCaption, oWnd, bAction, nWidth, nHeight, nHelpId, oFont, lDefault, lPixel, lDesign, cMsg, lUpdate, bWhen, bValid, lCancel, cBitmap, cPosText) ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   IIF( cCaption == nil, cCaption := "", ) ; IIF( cPosText == nil, cPosText := "", );

   ::cBitmap   = cBitmap

   ::hBitmap   = If( File( ::cBitmap ), ReadBitmap( 0, ::cBitmap ), LoadBitmap( GetResources(), ::cBitmap ) )
   ::cPosText  = Upper( cPosText )


   IIF( nWidth == nil, nWidth := nBmpWidth( ::hBitmap ) + 9, ) ; IIF( nHeight == nil, nHeight := nBmpHeight( ::hBitmap ) + 9, );
   ::HasAlpha()



return ::TButton:New( nRow, nCol, cCaption, oWnd, bAction, nWidth, nHeight, nHelpId, oFont, lDefault, lPixel, lDesign, cMsg, lUpdate, bWhen, bValid, lCancel, cBitmap )




UTILITY STATIC function TButtonBmp_ReDefine( nId, bAction, oWnd, nHelpId, cMsg, lUpdate, bWhen, bValid, cPrompt, lCancel, cBitmap, cPosText, cToolTip) ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   IIF( cPrompt == nil, cPrompt := "", ) ; IIF( cPosText == nil, cPosText := "", );

   ::cBitmap   = cBitmap

   ::hBitmap   = If( File( ::cBitmap ), ReadBitmap( 0, ::cBitmap ), LoadBitmap( GetResources(), ::cBitmap ) )
   ::cPosText  = Upper( cPosText )
   ::cToolTip  = cToolTip
   ::HasAlpha()


return ::TButton:Redefine( nId, bAction, oWnd, nHelpId, cMsg, lUpdate, bWhen, bValid, cPrompt, lCancel )



UTILITY STATIC function TButtonBmp_LoadBitmap( cBmpName) ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   if ! Empty( ::hBitmap )
      DeleteObject( ::hBitmap )
      ::hBitmap = nil
   endif

   ::cBitmap = cBmpName

   if File( cBmpName )
      ::hBitmap = ReadBitmap( 0, cBmpName )
   else
      ::hBitmap = LoadBitmap( GetResources(), cBmpName )
   endif
  ::HasAlpha()

return nil



UTILITY STATIC function TButtonBmp_Paint() ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   local aInfo
   local nTop, nLeft, lPressed
   aInfo = ::DispBegin()

   CallWindowProc( ::nOldProc, ::hWnd, 15, ::hDC, 0 )

   lPressed = lAnd( SendMessage( ::hWnd, 0x00F2 ), 0x0004 )


   if ! Empty( ::hBitmap )
      if ::cPosText == "TEXTBOTTOM"
         nTop = 7
      elseif ::cPosText == "TEXTTOP"
         nTop = ::nHeight() - 6 - nBmpHeight( ::hBitmap )
      else
         nTop = ( ::nHeight() / 2 ) - ( nBmpHeight( ::hBitmap ) / 2 )
      endif
      if ::cPosText == "TEXTRIGHT"
         nLeft = 7
      elseif ::cPosText == "TEXTLEFT"
         nLeft = ::nWidth() - 6 - nBmpWidth( ::hBitmap )
      else
         nLeft := ( ::nWidth() / 2 ) - ( nBmpWidth( ::hBitmap ) / 2 )
      endif

      if ::lActive
         if SetAlpha() .AND. ::lHasAlpha
            ABPaint( ::hDC, nLeft + If( lPressed, 1, 0 ), nTop + If( lPressed, 1, 0 ), ::hBitmap, ::nAlphaLevel() )
         else

            DrawMasked( ::hDC, ::hBitmap, nTop + If( lPressed, 1, 0 ), nLeft + If( lPressed, 1, 0 ) )
         endif
      else

         DrawGray( ::hDC, ::hBitmap, nTop + If( lPressed, 1, 0 ), nLeft + If( lPressed, 1, 0 ) )
      endif
   endif

   ::DispEnd( aInfo )

return 1



UTILITY STATIC function TButtonBmp_HandleEvent( nMsg, nWParam, nLParam) ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   local nResult

   do case
      case nMsg == 0x0128
           nResult = ::TButton:HandleEvent( nMsg, nWParam, nLParam )
           ::Refresh()
           return nResult
   endcase

return ::TButton:HandleEvent( nMsg, nWParam, nLParam )



UTILITY STATIC function TButtonBmp_nAlphaLevel(uNew) ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   if uNew <> NIL
      ::hAlphaLevel := uNew
   else
      if ::bAlphaLevel <> NIL
         ::hAlphaLevel = eval( ::bAlphaLevel, Self )
      endif
   endif

return ::hAlphaLevel



UTILITY STATIC function TButtonBmp_End() ; local Self AS CLASS TButtonBmp := QSelf() AS CLASS TButtonBmp

   if !Empty( ::hBitmap )
      DeleteObject( ::hBitmap )
      ::hBitmap = nil
   endif

RETURN ( ::TButton:End() )

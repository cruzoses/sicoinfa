#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Allfamar.prg"
_HB_CLASS TFamVtaArt ; UTILITY FUNCTION TFamVtaArt(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFamVtaArt" , {TInfFam():classh} ) ) ; ;

   _HB_MEMBER {AS LOGIC lResumen} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lResumen" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lExcCero} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lExcCero" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oTikCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oTikCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oAlbCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oAlbCliL" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacCliT} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacCliT" }, .F., .F. ), )
   _HB_MEMBER {AS OBJECT oFacCliL} ; IIF( !.F., s_oClass:AddMultiData( "OBJECT",, nScope + IIF( .F., 32, 0 ), { "oFacCliL" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TFamVtaArt_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TFamVtaArt_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TFamVtaArt_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TFamVtaArt_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TFamVtaArt_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TFamVtaArt_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( cFld); IIF( .F., s_oClass:ModMethod( "Resource", @TFamVtaArt_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TFamVtaArt_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TFamVtaArt_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TFamVtaArt_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFamVtaArt ;



UTILITY STATIC function TFamVtaArt_Create() ; local Self AS CLASS TFamVtaArt := QSelf() AS CLASS TFamVtaArt

   ::DetCreateFields()

   ::AddTmpIndex( "CCODFAM", "CFAMART + CCODART" )
   ::AddGroup( {|| ::oDbf:cFamArt }, {|| "Familia  : " + Rtrim( ::oDbf:cFamArt ) + "-" + oRetFld( ::oDbf:cFamArt, ::oDbfFam ) }, {||"Total familia..."} )
   ::AddGroup( {|| ::oDbf:cFamArt + ::oDbf:cCodArt }, {|| "Artículo : " + Rtrim( ::oDbf:cCodArt ) + "-" + Rtrim( oRetFld( ::oDbf:cCodArt, ::oDbfArt ) ) }, {||""} )

RETURN ( self )



UTILITY STATIC function TFamVtaArt_OpenFiles() ; local Self AS CLASS TFamVtaArt := QSelf() AS CLASS TFamVtaArt

   local lOpen    := .T.
   local oBlock   := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   BEGIN SEQUENCE

   ::oTikCliT := DbfServer( "TIKET.DBF", "TIKETT" ):NewOpen( "TIKET.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliT:AddBag( "TIKET.CDX" ) ; ::oTikCliT:AddBag( ) ; ::oTikCliT:AutoIndex()

   ::oTikCliL := DbfServer( "TIKEL.DBF", "TIKETL" ):NewOpen( "TIKEL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oTikCliL:AddBag( "TIKEL.CDX" ) ; ::oTikCliL:AddBag( ) ; ::oTikCliL:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", "ARTICULO" ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oAlbCliT := DbfServer( "ALBCLIT", "ALBCLIT" ):NewOpen( "ALBCLIT",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliT:AddBag( "ALBCLIT.CDX" ) ; ::oAlbCliT:AddBag( ) ; ::oAlbCliT:AutoIndex()

   ::oAlbCliL := DbfServer( "ALBCLIL.DBF", "ALBCLIL" ):NewOpen( "ALBCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oAlbCliL:AddBag( "ALBCLIL.CDX" ) ; ::oAlbCliL:AddBag( ) ; ::oAlbCliL:AutoIndex()

   ::oFacCliT := DbfServer( "FACCLIT", "FACCLIT" ):NewOpen( "FACCLIT",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliT:AddBag( "FACCLIT.CDX" ) ; ::oFacCliT:AddBag( ) ; ::oFacCliT:AutoIndex()

   ::oFacCliL := DbfServer( "FACCLIL.DBF", "FACCLIL" ):NewOpen( "FACCLIL.DBF",, ( cDriver() ),, ( cPatEmp() ), .F., .T., .F., .F. ) ; ::oFacCliL:AddBag( "FACCLIL.CDX" ) ; ::oFacCliL:AddBag( ) ; ::oFacCliL:AutoIndex()

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )
      ::CloseFiles()
      lOpen          := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TFamVtaArt_CloseFiles() ; local Self AS CLASS TFamVtaArt := QSelf() AS CLASS TFamVtaArt

   if ::oTikCliT <> NIL
      ::oTikCliT:End()
   end

   if ::oTikCliL <> NIL
      ::oTikCliL:End()
   end

   if ::oFacCliT <> NIL
      ::oFacCliT:End()
   end

   if ::oFacCliL <> NIL
      ::oFacCliL:End()
   end

   if ::oAlbCliT <> NIL
      ::oAlbCliT:End()
   end

   if ::oAlbCliL <> NIL
      ::oAlbCliL:End()
   end

   ::oTikCliT := NIL
   ::oTikCliL := NIL
   ::oFacCliT := NIL
   ::oFacCliL := NIL
   ::oAlbCliT := NIL
   ::oAlbCliL := NIL

RETURN ( Self )



UTILITY STATIC function TFamVtaArt_Resource( cFld) ; local Self AS CLASS TFamVtaArt := QSelf() AS CLASS TFamVtaArt

   if !::StdResource( "INF_GEN18" )
      Return .F.
   end





   ::lDefFamInf( 110, 120, 130, 140 )





   ::lDefArtInf( 70, 80, 90, 100 )





   ::oDefExcInf()

   ::oDefResInf()

RETURN ( Self )






UTILITY STATIC function TFamVtaArt_lGenerate() ; local Self AS CLASS TFamVtaArt := QSelf() AS CLASS TFamVtaArt

   local cCodFam
   local nLasTik  := ::oTikCliT:Lastrec()
   local nLasAlb  := ::oAlbCliT:Lastrec()
   local nLasFac  := ::oFacCliT:Lastrec()

   ::oDlg:Disable()

   ::oDbf:Zap()

   ::oMtrInf:SetTotal( nLasTik )
   ::oMtrInf:cText := "Procesando tikets"



   ::aHeader   := {  {|| "Fecha   : " + Dtoc( Date() ) }, {|| "Periodo : " + Dtoc( ::dIniInf ) + " > " + Dtoc( ::dFinInf ) }, {|| "Familia : " + ::cFamOrg       + " > " + ::cFamDes       } }





   ::oTikCliT:GoTop()
   while !::oTikCliT:Eof() .AND. !::lBreak



      if ::oTikCliT:dFecTik >= ::dIniInf                               .AND. ::oTikCliT:dFecTik <= ::dFinInf                               .AND. ( ::oTikCliT:cTipTik == "1" .OR. ::oTikCliT:cTipTik == "4" )

         if ::oTikCliL:Seek( ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik )


            while ::oTikCliL:cSerTil + ::oTikCliL:cNumTil + ::oTikCliL:cSufTil == ::oTikCliT:cSerTik + ::oTikCliT:cNumTik + ::oTikCliT:cSufTik .AND. !::oTikCliL:eof()

               cCodFam := cCodFam( ::oTikCliL:cCbaTil, ::oDbfArt )







               if !Empty( ::oTikCliL:cCbaTil )                                     .AND. cCodFam             >= ::cFamOrg                                 .AND. cCodFam             <= ::cFamDes                                 .AND. ::oTikCliL:cCbaTil  >= ::cArtOrg                                 .AND. ::oTikCliL:cCbaTil  <= ::cArtDes                                 .AND. ::oTikCliL:nCtlStk <> 2                                          .AND. if( ::lExcCero, ::oTikCliL:nUntTil <> 0, .T. )




                  ::AddTik( cCodFam )

               end

               cCodFam := cCodFam( ::oTikCliL:cComTil, ::oDbfArt )







               if !Empty( ::oTikCliL:cComTil )                                     .AND. cCodFam             >= ::cFamOrg                                 .AND. cCodFam             <= ::cFamDes                                 .AND. ::oTikCliL:cComTil  >= ::cArtOrg                                 .AND. ::oTikCliL:cComTil  <= ::cArtDes                                 .AND. ::oTikCliL:nCtlStk <> 2                                          .AND. if( ::lExcCero, ::oTikCliL:nUntTil <> 0, .T. )




                  ::AddTik( cCodFam )

               end

               ::oTikCliL:Skip()

            end

         end

      end

      ::oTikCliT:Skip()

      ::oMtrInf:AutoInc()

   end





   ::oAlbCliT:GoTop()
   ::oMtrInf:SetTotal( nLasAlb )
   ::oMtrInf:cText := "Procesando albaranes"

   while !::oAlbCliT:Eof() .AND. !::lBreak



      if ::oAlbCliT:dFecAlb >= ::dIniInf                 .AND. ::oAlbCliT:dFecAlb <= ::dFinInf                 .AND. !::oAlbCliT:lFacturado

         if ::oAlbCliL:Seek( ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb )+ ::oAlbCliT:cSufAlb )


            while ::oAlbCliL:cSerAlb + Str( ::oAlbCliL:nNumAlb )+ ::oAlbCliL:cSufAlb == ::oAlbCliT:cSerAlb + Str( ::oAlbCliT:nNumAlb ) + ::oAlbCliT:cSufAlb .AND. !::oAlbCliL:eof()

               cCodFam := cCodFam( ::oAlbCliL:cRef, ::oDbfArt )






               if cCodFam >= ::cFamOrg                               .AND. cCodFam <= ::cFamDes                               .AND. ::oAlbCliL:cRef >= ::cArtOrg                       .AND. ::oAlbCliL:cRef <= ::cArtDes                       .AND. ::oAlbCliL:nCtlStk <> 2                            .AND. if( ::lExcCero, nTotNAlbCli( ::oAlbCliL ) <> 0, .T. )




                  ::AddAlb( cCodFam )

               end

               ::oAlbCliL:Skip()

            end

         end

      end

      ::oAlbCliT:Skip()

      ::oMtrInf:AutoInc()

   end





   ::oFacCliT:GoTop()
   ::oMtrInf:SetTotal( nLasFac )
   ::oMtrInf:cText := "Procesando factura"

   while !::oFacCliT:Eof() .AND. !::lBreak

      if ::oFacCliT:dFecFac >= ::dIniInf .AND. ::oFacCliT:dFecFac <= ::dFinInf

         if ::oFacCliL:Seek( ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac )+ ::oFacCliT:cSufFac )


            while ::oFacCliL:cSerie + Str( ::oFacCliL:nNumFac )+ ::oFacCliL:cSufFac == ::oFacCliT:cSerie + Str( ::oFacCliT:nNumFac ) + ::oFacCliT:cSufFac .AND. !::oFacCliL:eof()

               cCodFam := cCodFam( ::oFacCliL:cRef, ::oDbfArt )






               if cCodFam >= ::cFamOrg                               .AND. cCodFam <= ::cFamDes                               .AND. ::oFacCliL:cRef >= ::cArtOrg                       .AND. ::oFacCliL:cRef <= ::cArtDes                       .AND. ::oFacCliL:nCtlStk <> 2                            .AND. if( ::lExcCero, nTotNFacCli( ::oFacCliL ) <> 0, .T. )




                  ::AddFac( cCodFam )

               end

               ::oFacCliL:Skip()

            end

         end

      end

      ::oFacCliT:Skip()

      ::oMtrInf:AutoInc()

   end

   ::oMtrInf:AutoInc( nLasFac )

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

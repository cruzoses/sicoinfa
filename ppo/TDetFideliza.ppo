#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 7 ".\Prg\TDetFideliza.prg"
_HB_CLASS TDetFideliza ; UTILITY FUNCTION TDetFideliza(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TDetFideliza" , {TDet():classh} ) ) ; ;

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Robot_Money2_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )
   _HB_MEMBER { cBitmap} ; IIF( !.F., s_oClass:AddMultiData(, ( 197 + ( 227 * 256 ) + ( 9 * 65536 ) ), nScope + IIF( .F., 32, 0 ), { "cBitmap" }, .F., .F. ), )

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TDetFideliza_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TDetFideliza_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenService(lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @TDetFideliza_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ), s_oClass:AddMethod( "OpenService", @TDetFideliza_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ) ) );

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TDetFideliza_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TDetFideliza_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @TDetFideliza_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @TDetFideliza_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @TDetFideliza_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @TDetFideliza_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( oGet, nMode); IIF( .F., s_oClass:ModMethod( "lPreSave", @TDetFideliza_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @TDetFideliza_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SaveDetails(); IIF( .F., s_oClass:ModInline( "SaveDetails", {|Self | Self, ( ::oDbfVir:cCodigo := ::oParent:oDbf:cCodigo ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "SaveDetails", {|Self | Self, ( ::oDbfVir:cCodigo := ::oParent:oDbf:cCodigo ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TDetFideliza ;



UTILITY STATIC function TDetFideliza_OpenFiles(lExclusive) ; local Self AS CLASS TDetFideliza := QSelf() AS CLASS TDetFideliza

   local lOpen             := .T.
   local oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::oDbf            := ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

      ::bOnPreSaveDetail   := {|| ::SaveDetails() }

   RECOVER

      msgStop( "Imposible abrir las bases de datos detalle de fidelización." )

      ::CloseFiles()

      lOpen                := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function TDetFideliza_CloseFiles() ; local Self AS CLASS TDetFideliza := QSelf() AS CLASS TDetFideliza

   if !Empty( ::oDbf )
      ::oDbf:end()
   end

   ::oDbf               := nil

RETURN .T.



UTILITY STATIC function TDetFideliza_DefineFiles( cPath, cVia, lUniqueName, cFileName) ; local Self AS CLASS TDetFideliza := QSelf() AS CLASS TDetFideliza

   local oDbf

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( lUniqueName == nil, lUniqueName := .F., ) ;
   IIF( cFileName == nil, cFileName := "DetFideliza", ) ;
   IIF( cVia == nil, cVia := cDriver(), ) ;

   if lUniqueName
      cFileName         := cGetNewFileName( cFileName, , , cPath )
   end

   oDbf := DbfServer( ( cFileName ), ( cFileName ) ):New( ( cFileName ), "DetFidel", ( cVia ), "lineas de programa de fidelización", ( cPath ) )

      oDbf:AddField( "cCodigo", "C", 03, 0,,,,, "Código", .F.,, .T., {} )
      oDbf:AddField( "nLinea", "N", 01, 0,,,,, "Línea", .F.,, .T., {} )
      oDbf:AddField( "nImpUni", "N", 01, 0,,,,, "Importe o unidades", .F.,, .T., {} )
      oDbf:AddField( "nImporte", "N", 16, 6,,,,, "Importe", .F.,, .F., {} )
      oDbf:AddField( "nUnidades", "N", 16, 6,,,,, "Unidades", .F.,, .F., {} )
      oDbf:AddField( "nPctLin", "N", 01, 0,,,,, "Porcentual o lineal", .F.,, .F., {} )
      oDbf:AddField( "nPorcen", "N", 06, 2,,,,, "Porcentaje", .F.,, .F., {} )
      oDbf:AddField( "nLineal", "N", 16, 6,,,,, "Lineal", .F.,, .F., {} )
      oDbf:AddField( "mFamilia", "M", 10, 0,,,,, "Familias", .F.,, .F., {} )

      oDbf:AddIndex( "cCodigo", ( cFileName ), "cCodigo",,, .F., .F.,,,, .T., .F. )
      oDbf:AddIndex( "nLinea", ( cFileName ), "cCodigo + Str( nLinea )",,, .F., .F.,,,, .T., .F. )



RETURN ( oDbf )



UTILITY STATIC function TDetFideliza_Resource( nMode) ; local Self AS CLASS TDetFideliza := QSelf() AS CLASS TDetFideliza

    local oDlg

   if nMode == 1
      ::oDbfVir:nImpUni := 1
      ::oDbfVir:nPctLin := 1
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "lineas de fidelización", "DetFidelizacion",, .F.,,,,,, .F.,,,,,, .F., )



      TRadMenu():Redefine( { | u | If( PCount()==0, ::oDbfVir:nImpUni, ::oDbfVir:nImpUni:= u ) }, oDlg,, { 100, 101 },,,,, .F.,, )






      TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbfVir:nImporte, ::oDbfVir:nImporte:= u ) }, oDlg,, ( cPouDiv() ),,,,,,, .F., {||     ( ::oDbfVir:nImpUni == 1 )},, .F., .T.,,,,,, nil,,, )






      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbfVir:nUnidades, ::oDbfVir:nUnidades:= u ) }, oDlg,, ( MasUnd() ),,,,,,, .F., {||     ( ::oDbfVir:nImpUni == 2 )},, .F., .T.,,,,,, nil,,, )





      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbfVir:nPorcen, ::oDbfVir:nPorcen:= u ) }, oDlg,, "@E 999.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function TDetFideliza_lPreSave( nMode) ; local Self AS CLASS TDetFideliza := QSelf() AS CLASS TDetFideliza

   if ( ::oDbfVir:nImpUni == 1 ) .AND. ( ::oDbf:nLineal < 0 )
      MsgStop( "Importe de la oferta no puede ser menor que cero." )
      return .F.
   end

   if ( ::oDbfVir:nImpUni == 2 ) .AND. ( ::oDbf:nUnidades < 0 )
      MsgStop( "Unidades de la oferta no puede ser menor que cero." )
      return .F.
   end

Return .T.

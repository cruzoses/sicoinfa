#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 8 ".\Prg\Tiordcar.prg"
_HB_CLASS TInfOrdCar ; UTILITY FUNCTION TInfOrdCar(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TInfOrdCar" , {TInfGen():classh} ) ) ; ;

   _HB_MEMBER { nOrdDes} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nOrdDes" }, .F., .F. ), )
   _HB_MEMBER { nOrdHas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nOrdHas" }, .F., .F. ), )
   _HB_MEMBER { cSufDes} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSufDes" }, .F., .F. ), )
   _HB_MEMBER { cSufHas} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSufHas" }, .F., .F. ), )
   _HB_MEMBER { oOrdCarT} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oOrdCarT" }, .F., .F. ), )
   _HB_MEMBER { oOrdCarL} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oOrdCarL" }, .F., .F. ), )
   _HB_MEMBER { oDbfAge} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfAge" }, .F., .F. ), )
   _HB_MEMBER { oDbfArt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oDbfArt" }, .F., .F. ), )
   _HB_MEMBER { oTrans} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTrans" }, .F., .F. ), )
   _HB_MEMBER {AS LOGIC lDesglose} ; IIF( !.F., s_oClass:AddMultiData( "LOGIC", .F., nScope + IIF( .F., 32, 0 ), { "lDesglose" }, .F., .F. ), )

   _HB_MEMBER Create(); IIF( .F., s_oClass:ModMethod( "Create", @TInfOrdCar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @TInfOrdCar_Create(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles(); IIF( .F., s_oClass:ModMethod( "OpenFiles", @TInfOrdCar_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @TInfOrdCar_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER CloseFiles(); IIF( .F., s_oClass:ModMethod( "CloseFiles", @TInfOrdCar_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CloseFiles", @TInfOrdCar_CloseFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lResource( cFld); IIF( .F., s_oClass:ModMethod( "lResource", @TInfOrdCar_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lResource", @TInfOrdCar_lResource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lGenerate(); IIF( .F., s_oClass:ModMethod( "lGenerate", @TInfOrdCar_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lGenerate", @TInfOrdCar_lGenerate(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TInfOrdCar ;



UTILITY STATIC function TInfOrdCar_Create() ; local Self AS CLASS TInfOrdCar := QSelf() AS CLASS TInfOrdCar

   ::AddField( "nNumOrd", "N",  9, 0, {|| "@!" },      "Número",           .F., "Número de la orden",     9 )
   ::AddField( "cSufOrd", "C",  2, 0, {|| "@!" },      "Suf.",             .F., "Sufijo de la orden",     2 )
   ::AddField( "cCodTrn", "C",  9, 0, {|| "@!" },      "Cod. Trn.",        .F., "Cod. transportista",     6 )
   ::AddField( "cNomTrn", "C", 20, 0, {|| "@!" },      "Transportista",    .F., "Nombre transportista",  20 )
   ::AddField( "cCodAge", "C",  3, 0, {|| "@!" },      "Cod. Age.",        .F., "Código agente",         20 )
   ::AddField( "cNomAge", "C", 30, 0, {|| "@!" },      "Agente",           .F., "Nombre agente",         20 )
   ::AddField( "dFecOrd", "D",  8, 0, {|| "@!" },      "Fecha",            .F., "Fecha del orden",        8 )
   ::AddField( "nTara",   "N", 16, 6, {|| MasUnd() },  "TARA",             .F., "Tara",                  12 )
   ::AddField( "cNumAlb", "C", 12, 0, {|| "@R #/#########/##"}, "Albarán", .F., "Albarán",               16 )
   ::AddField( "cCodArt", "C", 18, 0, {|| "@!" },      "Código",           .T., "Código",                14 )
   ::AddField( "cNomArt", "C",250, 0, {|| "" },        "Artículo",         .T., "Artículo",              40 )
   ::AddField( "cValPr1", "C", 10, 0, {|| "" },        "Prop. 1",          .T., "Propiedad 1",           12 )
   ::AddField( "cValPr2", "C", 10, 0, {|| "" },        "Prop. 2",          .T., "Propiedad 2",           12 )
   ::AddField( "cLote",   "C", 12, 0, {|| "" },        "Lote",             .T., "Lote",                  15 )
   ::AddField( "nCajEnt", "N", 19, 6, {|| MasUnd() },  "Caj.",             .F., "Cajas",                 12 )
   ::AddField( "nUniDad", "N", 19, 6, {|| MasUnd() },  "Und.",             .F., "Unidades",              12 )
   ::AddField( "nTotUni", "N", 19, 6, {|| MasUnd() },  "Tot. und.",        .T., "Total unidades",        12 )
   ::AddField( "nPeso",   "N", 19, 6, {|| MasUnd() },  "Peso",             .F., "Peso",                  12 )
   ::AddField( "nTotPes", "N", 19, 6, {|| MasUnd() },  "Tot. peso",        .T., "Total peso",            12 )

   ::AddTmpIndex( "cCodTrn", "Str( nNumOrd ) + cSufOrd + cCodArt" )

   ::AddGroup( {|| Str( ::oDbf:nNumOrd ) + ::oDbf:cSufOrd }, {|| "Orden : " + AllTrim( Str( ::oDbf:nNumOrd ) ) + "/" + AllTrim( ::oDbf:cSufOrd ) + " Transportista : " + AllTrim( ::oDbf:cNomTrn ) + " Tara : " + AllTrim( Trans( ::oDbf:nTara, "@EZ 999,999.99" ) ) }, {|| "Total orden..." } )

   ::oOrdCarT  := ::xOthers[ 1 ]
   ::oOrdCarL  := ::xOthers[ 2 ]

RETURN ( Self )



UTILITY STATIC function TInfOrdCar_OpenFiles() ; local Self AS CLASS TInfOrdCar := QSelf() AS CLASS TInfOrdCar

   ::oDbfDiv := DbfServer( "DIVISAS.DBF", ):NewOpen( "DIVISAS.DBF",, ( cDriver() ),, ( cPatDat() ), .F., .T., .F., .F. ) ; ::oDbfDiv:AddBag( "DIVISAS.CDX" ) ; ::oDbfDiv:AddBag( ) ; ::oDbfDiv:AutoIndex()

   ::oDbfArt := DbfServer( "ARTICULO.DBF", ):NewOpen( "ARTICULO.DBF",, ( cDriver() ),, ( cPatArt() ), .F., .T., .F., .F. ) ; ::oDbfArt:AddBag( "ARTICULO.CDX" ) ; ::oDbfArt:AddBag( ) ; ::oDbfArt:AutoIndex()

   ::oDbfAge := DbfServer( "AGENTES.DBF", ):NewOpen( "AGENTES.DBF",, ( cDriver() ),, ( cPatGrp() ), .F., .T., .F., .F. ) ; ::oDbfAge:AddBag( "AGENTES.CDX" ) ; ::oDbfAge:AddBag( ) ; ::oDbfAge:AutoIndex()

   ::oTrans    := TTrans():New( cPatCli() )
   ::oTrans:OpenFiles()

RETURN ( self )



UTILITY STATIC function TInfOrdCar_CloseFiles() ; local Self AS CLASS TInfOrdCar := QSelf() AS CLASS TInfOrdCar

   if !Empty( ::oDbfDiv ) .AND. ::oDbfDiv:Used()
      ::oDbfDiv:End()
   end

   if !Empty( ::oDbfArt ) .AND. ::oDbfArt:Used()
      ::oDbfArt:End()
   end

   if !Empty( ::oDbfAge ) .AND. ::oDbfAge:Used()
      ::oDbfAge:End()
   end

   if !Empty( ::oTrans )
      ::oTrans:End()
   end

   ::oDbfDiv  := nil
   ::oDbfArt  := nil
   ::oDbfAge  := nil
   ::oTrans   := nil

RETURN ( .T. )



UTILITY STATIC function TInfOrdCar_lResource( cFld) ; local Self AS CLASS TInfOrdCar := QSelf() AS CLASS TInfOrdCar

   ::nOrdDes      := ::oOrdCarT:nNumOrd
   ::nOrdHas      := ::oOrdCarT:nNumOrd
   ::cSufDes      := ::oOrdCarT:cSufOrd
   ::cSufHas      := ::oOrdCarT:cSufOrd

   ::lDefFecInf   := .F.
   ::lDefDivInf   := .F.
   ::lDefSerInf   := .F.

   if !::StdResource( "INF_GENORDCAR" )
      return .F.
   end

   ::lLoadDivisa()









   TGetHlp():ReDefine( 100, { | u | If( PCount()==0, ::nOrdDes, ::nOrdDes:= u ) }, ::oFld:aDialogs[1],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



   TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::cSufDes, ::cSufDes:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::nOrdHas, ::nOrdHas:= u ) }, ::oFld:aDialogs[1],, "999999999",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )



   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::cSufHas, ::cSufHas:= u ) }, ::oFld:aDialogs[1],,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )

   ::oMtrInf:SetTotal( ::oOrdCarT:Lastrec() )

   ::CreateFilter( , ::oOrdCarT )

RETURN .T.






UTILITY STATIC function TInfOrdCar_lGenerate() ; local Self AS CLASS TInfOrdCar := QSelf() AS CLASS TInfOrdCar

   local nKlgEnt  := 0
   local cExpHead := ""

   ::oDlg:Disable()

   ::oDbf:Zap()
   ::oOrdCarT:GetStatus()


   ::aHeader      := {  {|| "Fecha : " + Dtoc( Date() ) }, {|| "Rango : " + Alltrim( Str( ::nOrdDes ) ) + "/" + AllTrim( ::cSufDes ) + " > " + Alltrim( Str( ::nOrdHas ) ) + "/" + Alltrim( ::cSufHas ) } }

   ::oOrdCarT:OrdSetFocus( "NNUMORD" )
   ::oOrdCarL:OrdSetFocus( "NNUMORD" )

   if !Empty( ::oFilter:cExpFilter )
      cExpHead       := ::oFilter:cExpFilter
   else
      cExpHead       := ".t."
   end

   ::oOrdCarT:AddTmpIndex( cCurUsr(), GetFileNoExt( ::oOrdCarT:cFile ), ::oOrdCarT:OrdKey(), ( cExpHead ), , , , , , , , .T. )

   if ::oOrdCarT:Seek( Str( ::nOrdDes ) + ::cSufDes )

      while Str( ::oOrdCarT:nNumOrd ) + ::oOrdCarT:cSufOrd <= Str( ::nOrdHas ) + ::cSufHas .AND. !::oOrdCarT:eof()





         if ::oOrdCarL:Seek( Str( ::oOrdCarT:nNumOrd ) + ::oOrdCarT:cSufOrd )


            while Str( ::oOrdCarT:nNumOrd ) + ::oOrdCarT:cSufOrd == Str( ::oOrdCarL:nNumOrd ) + ::oOrdCarL:cSufOrd .AND. !::oOrdCarL:Eof()

                  ::oDbf:Append()

                  ::oDbf:nNumOrd    := ::oOrdCarT:nNumOrd
                  ::oDbf:cSufOrd    := ::oOrdCarT:cSufOrd
                  ::oDbf:cCodTrn    := ::oOrdCarT:cCodTrn
                  ::oDbf:cNomTrn    := oRetFld( ::oOrdCarT:cCodTrn, ::oTrans:oDbf )
                  ::oDbf:cCodAge    := ::oOrdCarT:cCodAge
                  ::oDbf:cNomAge    := oRetFld( ::oOrdCarT:cCodAge, ::oDbfAge )
                  ::oDbf:dFecOrd    := ::oOrdCarT:dFecOrd
                  ::oDbf:nTara      := ::oOrdCarT:nKgsTrn
                  ::oDbf:cCodArt    := ::oOrdCarL:cRef
                  ::oDbf:cNomArt    := ::oOrdCarL:cDetalle
                  ::oDbf:cValPr1    := ::oOrdCarL:cValPr1
                  ::oDbf:cValPr2    := ::oOrdCarL:cValPr2
                  ::oDbf:cLote      := ::oOrdCarL:cLote
                  ::oDbf:nCajEnt    := ::oOrdCarL:nCajOrd
                  ::oDbf:nUniDad    := ::oOrdCarL:nUniOrd
                  ::oDbf:nTotUni    := NotCaja( ::oOrdCarL:nCajOrd ) * ::oOrdCarL:nUniOrd
                  ::oDbf:nPeso      := ::oOrdCarL:nPeso
                  ::oDbf:nTotPes    := NotCaja( ::oOrdCarL:nCajOrd ) * ::oOrdCarL:nUniOrd * ::oOrdCarL:nPeso
                  ::oDbf:cNumAlb    := ::oOrdCarL:cNumAlb

                  ::oDbf:Save()

               ::oOrdCarL:Skip()

            end

         end

         ::oOrdCarT:Skip()

         ::oMtrInf:AutoInc( ::oOrdCarT:OrdKeyNo() )

      end

   end

   ::oOrdCarT:IdxDelete( cCurUsr(), GetFileNoExt( ::oOrdCarT:cFile ) )

   ::oMtrInf:AutoInc( ::oOrdCarT:LastRec() )

   ::oOrdCarT:SetStatus()

   ::oDlg:Enable()

RETURN ( ::oDbf:LastRec() > 0 )

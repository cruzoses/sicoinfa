#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 195 ".\Prg\Tpv.prg"
memvar cDbfTik
memvar cDbfTil
memvar cDbfTip
memvar cDbfCli
memvar cDbfUsr
memvar cPouTik
memvar cPorTik
memvar cUndTik
memvar nDouTik
memvar nDorTik
memvar nTotTik
memvar nTotPrm
memvar nTotIvm
memvar aIvaTik
memvar aBrtTik
memvar aBasTik
memvar aImpTik
memvar aIvmTik
memvar nTotBrt
memvar nTotNet
memvar nTotIva
memvar nTotAlb
memvar nTotFac
memvar nTotPax
memvar cCtaCli

memvar nTotDtoEsp
memvar nTotDpp

memvar cDbfAlbCliT
memvar cDbfAlbCliL
memvar cDbfFacCliT
memvar cDbfFacCliL

memvar nTotCos
memvar nTotRnt
memvar nTotPctRnt

static nLevel
static oWndBrw
static oWndBig
static dbfClient
static dbfUsr
static dbfCodebar
static dbfCajT
static dbfCajL
static dbfTmpP
static dbfTmpV
static dbfTmpA
static dbfTmpE
static dbfTmpC
static dbfTmpN
static dbfOferta
static dbfTblPro
static dbfFacCliT
static dbfFacCliL
static dbfFacCliS
static dbfFacCliP
static dbfAntCliT
static dbfAlbCliT
static dbfAlbCliL
static dbfAlbCliS
static dbfAlbCliP
static dbfObrasT
static dbfAgent
static dbfTarPreL
static dbfTarPreS
static dbfRuta
static dbfAlm
static dbfDoc
static dbfFlt
static dbfCliAtp
static dbfCajPorta
static dbfAgeCom
static dbfEmp
static dbfArtDiv
static dbfHisMov
static dbfHisMovS
static dbfCategoria
static dbfTemporada

static dbfPedCliT
static dbfPedCliL
static dbfPedCliP

static dbfPreCliT
static dbfPreCliL

static dbfProLin
static dbfProMat
static dbfProSer
static dbfMatSer

static dbfTImp

static oVisor
static oImpresora
static oBalanza
static oInvitacion

static cNewFilP
static cNewFilV
static cNewFilA
static cNewFilE
static cNewFilC
static cNewFilS
static cNewFilN
static oBmpVis
static nOldPvp
static lApartado

static oBandera
static oStock
static oCaptura
static oFideliza

static oMetMsg
static nMetMsg
static oFntTot
static oFntEur
static oFntBrw
static oFntNum
static cFilBmp
static aDim
static oBtnIni
static oBtnFam
static oSayFam
static oBtnArt
static oBtnNum
static oSayArt
static oBtnTik
static oBtnAlb
static oBtnFac
static oBtnApt
static oBtnVal
static oBtnDev
static oBtnOld
static oBtnUp
static oBtnDown
static oGrupoSerie
static oBtnUpSerie
static oBtnDownSerie
static oBtnAdd
static oBtnEdt
static oBtnDel
static oDlgDet
static oBtnTipoVta

static oCopTik
static lCopTik             := .T.
static nCopTik             := 1
static lRegalo             := .F.

static lMaximized          := .F.

static oTotEsp
static oTotDpp

static oGetRnt
static oSayGetRnt

static oRieCli

static oOfficeBar

static aGetTxt
static oGetTxt

static oBrwDet

static oBtnFree
static oSayFree

static oBtnUsuario
static oSayUsuario
static oBtnTarifa
static oBtnEntregar
static oBtnRenombrar
static oBtnPedidos
static oBtnCliente
static oBtnDireccion
static oBtnTelefono

static oTotDiv

static nTotOld

static nSaveMode
static lSave

static oTimerBtn
static oTimer

static cCapCaj
static oNewImp
static oMenu
static nCambioTik          := 0
static nTotalTik           := 0
static cCodArtAnt          := ""
static cCodFamAnt          := ""
static aRecFam             := {}
static lNowAppendLine      := .F.
static aRecArt             := {}
static cOldCodCli          := ""
static cOldCodArt          := ""
static cOldPrpArt          := ""
static oTComandas
static aImpComanda         := {}
static oTipArt
static oFabricante

static cFiltroCajero       := ""

static lExternal           := .T.
static nNumBtnFam          := 7
static nNumBtnArt          := 19
static aTipDoc             := { "Tiket", "Albarán", "Factura", "Devolución", "Apartado", "Vale", "Pda", "Cheque regalo" }
static bEditT              := { |aTmp, aGet, dbfTikT, oBrw, cTot, nTot, nMode, aNumDoc    | EdtRec( aTmp, aGet, dbfTikT, oBrw, cTot, nTot, nMode, aNumDoc ) }
static bEditB              := { |aTmp, aGet, dbfTikT, oBrw, cTot, nTot, nMode, oWnd       | EdtBig( aTmp, aGet, dbfTikT, oBrw, cTot, nTot, nMode, oWnd ) }
static bEditL              := { |aTmp, aGet, dbfTikL, oBrw, bWhen, bValid, nMode, cNumTik | EdtDet( aTmp, aGet, dbfTikL, oBrw, bWhen, bValid, nMode, cNumTik ) }
static bEditP              := { |aTmp, aGet, dbfTikP, oBrw, bWhen, bValid, nMode, aTmpTik | EdtCob( aTmp, aGet, dbfTikP, oBrw, bWhen, bValid, nMode, aTmpTik ) }
static bEditE              := { |aTmp, aGet, dbfTmpE, oBrw, bWhen, bValid, nMode, aTmpTik | EdtEnt( aTmp, aGet, dbfTmpE, oBrw, bWhen, bValid, nMode, aTmpTik ) }

static oUndMedicion



static bEdtPdaL            := { |aTmp, aGet, dbfTikL, oBrw, bWhen, bValid, nMode | EdtPdaL( aTmp, aGet, dbfTikL, oBrw, bWhen, bValid, nMode ) }
static nMesa
static nArticulo
static oSayVta
static oSayFPago
static oNumCambio
static cSayVta             :="Sala venta"
static oNumEnt
static cNumEnt             := "0"
static lFilterFav          := .F.
static oSayTik
static nEntCli
static nNumTik
static nZona
static nCurSe
static oCbxSalon
static cZona
static cAlmCtr
static dbfConfig
static nCambioCli



static dbfTikT
static dbfTikL
static dbfTikP
static dbfTikM
static dbfTikS
static dbfIva
static dbfDiv
static dbfFamilia
static dbfArticulo
static dbfTmpL
static dbfTmpS
static dbfKit
static dbfTblCnv
static dbfCount
static dbfImp
static dbfComentariosT
static dbfComentariosL
static dbfAlbPrvT
static dbfAlbPrvL
static dbfAlbPrvS
static dbfFacPrvT
static dbfFacPrvL
static dbfFacPrvS
static dbfRctPrvT
static dbfRctPrvL
static dbfRctPrvS
static dbfFacRecT
static dbfFacRecL
static dbfFacRecS

static cNewFilL

static oSalaVentas

static lOpenFiles          := .F.

static cPouDiv
static cPorDiv
static nDouDiv
static nDorDiv
static cPicEur
static cPicUnd

static oTxtTot
static oNumTot
static oTotPdaFam
static oTxtCom
static oTotCom
static oEurTot

static oDlgTpv

static dbfFPago

static aButtonsPago
static aButtonsMoney       := Array( 16 )

static lStopEntCont        := .F.
static lStopEntContLine    := .F.

static lShowBrwLin         := .F.
static lShowBrwFam         := .F.

static lSaveNewTik         := .F.
static lTwoLin             := .F.

static nScreenHorzRes
static nScreenVertRes







STATIC FUNCTION OpenFiles( cPatEmp, lExt, lTactil )

   local oError
   local oBlock
   local cVisor
   local cCajon
   local cBalanza
   local cImpresora

   if lOpenFiles
      MsgStop( "Imposible abrir ficheros de tickets de clientes" )
      Return ( .F. )
   end

   IIF( cPatEmp == nil, cPatEmp := cPatEmp(), ) ;
   IIF( lExt == nil, lExt := .F., ) ;
   IIF( lTactil == nil, lTactil := .F., ) ;

   lExternal            := lExt

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      DisableAcceso()

      lOpenFiles           := .T.



      if !lExistTable( cPatEmp + "TikeT.Dbf" )  .OR. !lExistTable( cPatEmp + "TikeL.Dbf" )  .OR. !lExistTable( cPatEmp + "TikeP.Dbf" )
         mkTpv()
      end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @dbfTikP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "TIKEM.DBF" ), ( cCheckArea( "TIKEM", @dbfTikM ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "TIKEM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "TIKES.DBF" ), ( cCheckArea( "TIKES", @dbfTikS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "TIKES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "Cajas.Dbf" ), ( cCheckArea( "CAJAS", @dbfCajT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "Cajas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CajasL.Dbf" ), ( cCheckArea( "CAJASL", @dbfCajL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CajasL.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "USERS.DBF" ), ( cCheckArea( "USERS", @dbfUsr ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "USERS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ArtCodebar.Dbf" ), ( cCheckArea( "CODEBAR", @dbfCodebar ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ArtCodebar.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTKIT.DBF" ), ( cCheckArea( "ARTTIK", @dbfKit ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTKIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "OFERTA.DBF" ), ( cCheckArea( "OFERTA", @dbfOferta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "OFERTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FPago.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "TBLPRO.DBF" ), ( cCheckArea( "TBLPRO", @dbfTblPro ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "TBLPRO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIT", @dbfAlbCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "ALBCLIS.DBF" ), ( cCheckArea( "ALBCLIS", @dbfAlbClis ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "ALBCLIS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIP.DBF" ), ( cCheckArea( "ALBCLIP", @dbfAlbCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "FACCLIT.DBF" ), ( cCheckArea( "FACCLIT", @dbfFacCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "FACCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "FACCLIS.DBF" ), ( cCheckArea( "FACCLIS", @dbfFacCliS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "FACCLIS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "FACCLIP.DBF" ), ( cCheckArea( "FACCLIP", @dbfFacCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "FACCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "ObrasT.Dbf" ), ( cCheckArea( "OBRAST", @dbfObrasT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "ObrasT.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "AGENTES.DBF" ), ( cCheckArea( "AGENTES", @dbfAgent ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "AGENTES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "RUTA.DBF" ), ( cCheckArea( "RUTA", @dbfRuta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "RUTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatAlm() + "ALMACEN.DBF" ), ( cCheckArea( "ALMACEN", @dbfAlm ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatAlm() + "ALMACEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTDIV.DBF" ), ( cCheckArea( "ARTDIV", @dbfArtDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "ARTDIV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPREL.DBF" ), ( cCheckArea( "TARPREL", @dbfTarPreL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPREL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "TARPRES.DBF" ), ( cCheckArea( "TARPRES", @dbfTarPreS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "TARPRES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "RDOCUMEN.DBF" ), ( cCheckArea( "RDOCUMEN", @dbfDoc ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "RDOCUMEN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CTIPO" )

      dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CliAtp.Dbf" ), ( cCheckArea( "CLIATP", @dbfCliAtp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatCli() + "CliAtp.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CAJPORTA.DBF" ), ( cCheckArea( "CAJPORTA", @dbfCajPorta ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CAJPORTA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "CNFFLT.DBF" ), ( cCheckArea( "CNFFLT", @dbfFlt ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "CNFFLT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "AGECOM.DBF" ), ( cCheckArea( "AGECOM", @dbfAgeCom ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatGrp() + "AGECOM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "EMPRESA.DBF" ), ( cCheckArea( "EMPRESA", @dbfEmp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "EMPRESA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TBLCNV.DBF" ), ( cCheckArea( "TBLCNV", @dbfTblCnv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TBLCNV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIT.DBF" ), ( cCheckArea( "PEDCLIT", @dbfPedCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIL.DBF" ), ( cCheckArea( "PEDCLIL", @dbfPedCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PEDCLIP.DBF" ), ( cCheckArea( "PEDCLIP", @dbfPedCliP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PEDCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIT.DBF" ), ( cCheckArea( "PRECLIT", @dbfPreCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PRECLIL.DBF" ), ( cCheckArea( "PRECLIL", @dbfPreCliL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PRECLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECT.DBF" ), ( cCheckArea( "FACRECT", @dbfFacRecT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECL.DBF" ), ( cCheckArea( "FACRECL", @dbfFacRecL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACRECS.DBF" ), ( cCheckArea( "FACRECS", @dbfFacRecS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACRECS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVT.DBF" ), ( cCheckArea( "ALBPROVT", @dbfAlbPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBPROVL.DBF" ), ( cCheckArea( "ALBPROVL", @dbfAlbPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBPROVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AlbPrvS.DBF" ), ( cCheckArea( "AlbPrvS", @dbfAlbPrvS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "AlbPrvS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVT.DBF" ), ( cCheckArea( "FACPRVT", @dbfFacPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVL.DBF" ), ( cCheckArea( "FACPRVL", @dbfFacPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACPRVS.DBF" ), ( cCheckArea( "FACPRVS", @dbfFacPrvS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "FACPRVS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvT.DBF" ), ( cCheckArea( "RctPrvT", @dbfRctPrvT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvL.DBF" ), ( cCheckArea( "RctPrvL", @dbfRctPrvL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "RctPrvS.DBF" ), ( cCheckArea( "RctPrvS", @dbfRctPrvS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "RctPrvS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "HISMOV.DBF" ), ( cCheckArea( "HISMOV", @dbfHisMov ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "HISMOV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "MOVSER.DBF" ), ( cCheckArea( "MOVSER", @dbfHisMovS ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "MOVSER.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "CATEGORIAS.DBF" ), ( cCheckArea( "CATEGORIA", @dbfCategoria ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "CATEGORIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "COMENTARIOST.DBF" ), ( cCheckArea( "COMENTT", @dbfComentariosT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "COMENTARIOST.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "COMENTARIOSL.DBF" ), ( cCheckArea( "COMENTL", @dbfComentariosL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "COMENTARIOSL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "CCODDES" )

      dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIPIMP.DBF" ), ( cCheckArea( "TIPIMP", @dbfTImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatDat() + "TIPIMP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatArt() + "Temporadas.Dbf" ), ( cCheckArea( "Temporada", @dbfTemporada ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatArt() + "Temporadas.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROLIN.DBF" ), ( cCheckArea( "PROLIN", @dbfProLin ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROLIN.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROMAT.DBF" ), ( cCheckArea( "PROMAT", @dbfProMat ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROMAT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ordSetFocus( "cCodArt" )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "PROSER.DBF" ), ( cCheckArea( "PROSER", @dbfProSer ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "PROSER.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "MatSer.Dbf" ), ( cCheckArea( "MatSer", @dbfMatSer ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "MatSer.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

      oCaptura             := TCaptura():New( cPatDat() )
      oCaptura:OpenFiles()

      oTComandas           := TComandas():Create( cPatArt() )
      oTComandas:OpenFiles()

      oBandera             := TBandera():New()

      oStock               := TStock():Create( cPatGrp() )

      if !oStock:lOpenFiles()

         lOpenFiles        := .F.

      else

         oStock:cKit       := dbfKit

         oStock:cAlbCliT   := dbfAlbCliT
         oStock:cAlbCliL   := dbfAlbCliL
         oStock:cAlbCliS   := dbfAlbCliS

         oStock:cFacCliT   := dbfFacCliT
         oStock:cFacCliL   := dbfFacCliL
         oStock:cFacCliS   := dbfFacCliS
         oStock:cFacCliP   := dbfFacCliP

         oStock:cFacRecT   := dbfFacRecT
         oStock:cFacRecL   := dbfFacRecL
         oStock:cFacRecS   := dbfFacRecS

         oStock:cAntCliT   := dbfAntCliT

         oStock:cTikT      := dbfTikT
         oStock:cTikL      := dbfTikL
         oStock:cTikS      := dbfTikS

         oStock:cHisMov    := dbfHisMov
         oStock:cHisMovS   := dbfHisMovS

         oStock:cAlbPrvT   := dbfAlbPrvT
         oStock:cAlbPrvL   := dbfAlbPrvL
         oStock:cAlbPrvS   := dbfAlbPrvS

         oStock:cFacPrvT   := dbfFacPrvT
         oStock:cFacPrvL   := dbfFacPrvL
         oStock:cFacPrvS   := dbfFacPrvS

         oStock:cRctPrvT   := dbfRctPrvT
         oStock:cRctPrvL   := dbfRctPrvL
         oStock:cRctPrvS   := dbfRctPrvS

         oStock:cProducL   := dbfProLin
         oStock:cProducM   := dbfProMat
         oStock:cProducS   := dbfProSer
         oStock:cProducP   := dbfMatSer

      end

      oNewImp              := TNewImp():New( cPatEmp )
      if !oNewImp:OpenFiles()
         lOpenFiles        := .F.
      end

      cVisor               := cVisorEnCaja( oUser():cCaja(), dbfCajT )
      if !Empty( cVisor )
         oVisor            := TVisor():Create( cVisor )
         if !Empty( oVisor )
            oVisor:Wellcome()
         end
      end

      cImpresora           := cImpresoraTicketEnCaja( oUser():cCaja(), dbfCajT )
      if !Empty( cImpresora )
         oImpresora        := TImpresoraTiket():Create( cImpresora )
      end

      oUndMedicion         := UniMedicion():Create( cPatGrp() )
      if !oUndMedicion:OpenFiles()
         lOpenFiles        := .F.
      end

      oSalaVentas          := TSalaVenta():New( cPatEmp )
      if !oSalaVentas:OpenFiles()
         lOpenFiles        := .F.
      else
         oSalaVentas:cTikT := dbfTikT
         oSalaVentas:cTikL := dbfTikL
         oSalaVentas:cDiv  := dbfDiv
         oSalaVentas:BuildSala()
      end

      cBalanza             := cBalanzaEnCaja( oUser():cCaja(), dbfCajT )
      if !Empty( cBalanza )
         oBalanza          := TCommPort():Create( cBalanza )
      end

      oInvitacion          := TInvitacion():Create( cPatGrp() )
      if !oInvitacion:OpenFiles()
         lOpenFiles        := .F.
      end

      oFideliza            := TFideliza():CreateInit( cPatArt() )
      if !oFideliza:OpenFiles()
         lOpenFiles        := .F.
      end

      oTipArt              := TTipArt():Create( cPatArt() )
      if !oTipArt:OpenFiles()
         lOpenFiles        := .F.
      end

      oFabricante          := TFabricantes():Create( cPatArt() )
      if !oFabricante:OpenFiles()
         lOpenFiles        := .F.
      end





      aButtonsPago         := aCreateButtons( dbfFPago )





      cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
      cPorDiv              := cPorDiv( cDivEmp(), dbfDiv )
      cPicEur              := cPorDiv( cDivChg(), dbfDiv )
      nDouDiv              := nDouDiv( cDivEmp(), dbfDiv )
      nDorDiv              := nRouDiv( cDivEmp(), dbfDiv )

      cPicUnd              := MasUnd()

      public nTotTik       := 0
      public nTotPrm       := 0
      public nTotPax       := 0
      public nTotDtoEsp    := 0
      public nTotDpp       := 0
      public nTotBrt       := 0
      public nTotNet       := 0
      public nTotIva       := 0
      public nTotIvm       := 0
      public aBrtTik       := { 0, 0, 0 }
      public aBasTik       := { 0, 0, 0 }
      public aImpTik       := { 0, 0, 0 }
      public aIvaTik       := { nil, nil, nil }
      public aIvmTik       := { 0, 0, 0 }
      public nTotCos       := 0
      public nTotRnt       := 0
      public nTotPctRnt    := 0

      nScreenHorzRes       := GetSysMetrics( 0 )
      nScreenVertRes       := GetSysMetrics( 1 )





      if oUser():lFiltroVentas()
         cFiltroCajero     := "Field->cCcjTik == '" + oUser():cCodigo() + "' .and. Field->cNcjTik == '" + oUser():cCaja() + "'"
      end

      EnableAcceso()

   RECOVER USING oError

      lOpenFiles           := .F.

      EnableAcceso()

      msgStop( ErrorMessage( oError ), "Imposible abrir las bases de datos de terminal punto de venta" )

   end

   ErrorBlock( oBlock )

   if !lOpenFiles
      CloseFiles()
   end

RETURN ( lOpenFiles )



STATIC FUNCTION CloseFiles()

   DisableAcceso()

   DestroyFastFilter( dbfTikT, .T., .T. )

   ( dbfTikT     )->( dbCloseArea() )
   ( dbfTikL     )->( dbCloseArea() )
   ( dbfTikP     )->( dbCloseArea() )
   ( dbfTikM     )->( dbCloseArea() )
   ( dbfTikS     )->( dbCloseArea() )
   ( dbfClient   )->( dbCloseArea() )
   ( dbfCajT     )->( dbCloseArea() )
   ( dbfCajL     )->( dbCloseArea() )
   ( dbfUsr      )->( dbCloseArea() )
   ( dbfFPago    )->( dbCloseArea() )
    ( dbfArticulo )->( dbCloseArea() )
   ( dbfCodebar  )->( dbCloseArea() )
   ( dbfKit      )->( dbCloseArea() )
   ( dbfCount    )->( dbCloseArea() )
   ( dbfIva      )->( dbCloseArea() )
   ( dbfOferta   )->( dbCloseArea() )
   ( dbfDiv      )->( dbCloseArea() )
   ( dbfTblPro   )->( dbCloseArea() )
   ( dbfFamilia  )->( dbCloseArea() )
   ( dbfCategoria)->( dbCloseArea() )
   ( dbfTemporada)->( dbCloseArea() )

   ( dbfObrasT   )->( dbCloseArea() )
   ( dbfAgent    )->( dbCloseArea() )
   ( dbfTarPreL  )->( dbCloseArea() )
   ( dbfTarPreS  )->( dbCloseArea() )
   ( dbfRuta     )->( dbCloseArea() )
   ( dbfAlm      )->( dbCloseArea() )
   ( dbfArtDiv   )->( dbCloseArea() )
   ( dbfDoc      )->( dbCloseArea() )
   ( dbfCliAtp   )->( dbCloseArea() )
   ( dbfCajPorta )->( dbCloseArea() )
   ( dbfFlt      )->( dbCloseArea() )
   ( dbfAgeCom   )->( dbCloseArea() )
   ( dbfEmp      )->( dbCloseArea() )
   ( dbfAlbCliP  )->( dbCloseArea() )
   ( dbfTblCnv   )->( dbCloseArea() )

   ( dbfPreCliT  )->( dbCloseArea() )
   ( dbfPreCliL  )->( dbCloseArea() )
   ( dbfPedCliT  )->( dbCloseArea() )
   ( dbfPedCliL  )->( dbCloseArea() )
   ( dbfPedCliP  )->( dbCloseArea() )
   ( dbfAlbCliT  )->( dbCloseArea() )
   ( dbfAlbCliL  )->( dbCloseArea() )
   ( dbfAlbCliS  )->( dbCloseArea() )

   ( dbfFacCliT  )->( dbCloseArea() )
   ( dbfFacCliL  )->( dbCloseArea() )
   ( dbfFacCliS  )->( dbCloseArea() )
   ( dbfFacCliP  )->( dbCloseArea() )

   ( dbfFacRecT  )->( dbCloseArea() )
   ( dbfFacRecL  )->( dbCloseArea() )
   ( dbfFacRecS  )->( dbCloseArea() )

   ( dbfAntCliT  )->( dbCloseArea() )

   ( dbfAlbPrvT  )->( dbCloseArea() )
   ( dbfAlbPrvL  )->( dbCloseArea() )
   ( dbfAlbPrvS  )->( dbCloseArea() )

   ( dbfFacPrvT  )->( dbCloseArea() )
   ( dbfFacPrvL  )->( dbCloseArea() )
   ( dbfFacPrvS  )->( dbCloseArea() )

   ( dbfRctPrvT  )->( dbCloseArea() )
   ( dbfRctPrvL  )->( dbCloseArea() )
   ( dbfRctPrvS  )->( dbCloseArea() )

   ( dbfHisMov   )->( dbCloseArea() )
   ( dbfHisMovS  )->( dbCloseArea() )

   ( dbfComentariosT )->( dbCloseArea() )
   ( dbfComentariosL )->( dbCloseArea() )

   ( dbfTImp     )->( dbCloseArea() )

   ( dbfProLin   )->( dbCloseArea() )
   ( dbfProMat   )->( dbCloseArea() )
   ( dbfProSer   )->( dbCloseArea() )
   ( dbfMatSer   )->( dbCloseArea() )

   if !Empty( oCaptura )
      oCaptura:End()
   end

   if !Empty( oTComandas )
      oTComandas:End()
   end

   if !Empty( oStock )
      oStock:end()
   end

   if !Empty( oNewImp )
      oNewImp:End()
   end

   if !Empty( oVisor )
      oVisor:End()
   end

   if !Empty( oImpresora )
      oImpresora:End()
   end

   if !Empty( oBalanza )
      oBalanza:End()
   end

   if !Empty( oUndMedicion )
      oUndMedicion:end()
   end

   if !Empty( oSalaVentas )
      oSalaVentas:End()
   end

   if !Empty( oInvitacion )
      oInvitacion:End()
   end

   if !Empty( oFideliza )
      oFideliza:End()
   end

   if !Empty( oTipArt )
      oTipArt:End()
   end

   if !Empty( oFabricante )
      oFabricante:End()
   end

   dbfTikT     := nil
   dbfTikL     := nil
   dbfTikM     := nil
   dbfTikS     := nil
   dbfClient   := nil
   dbfCajT     := nil
   dbfCajL     := nil
   dbfUsr      := nil
   dbfFPago    := nil
   dbfArticulo := nil
   dbfCodebar  := nil
   dbfKit      := nil
   dbfIva      := nil
   dbfCount    := nil
   dbfOferta   := nil
   dbfDiv      := nil
   oBandera    := nil
   dbfTarPreS  := nil
   dbfTarPreL  := nil
   dbfTblPro   := nil
   dbfFamilia  := nil
   dbfAlbCliT  := nil
   dbfAlbCliL  := nil
   dbfFacCliT  := nil
   dbfFacCliL  := nil
   dbfFacCliS  := nil
   dbfFacCliP  := nil
   dbfObrasT   := nil
   dbfAgent    := nil
   dbfRuta     := nil
   dbfAlm      := nil
   dbfArtDiv   := nil
   dbfDoc      := nil
   dbfCliAtp   := nil
   dbfFlt      := nil
   dbfAgeCom   := nil
   dbfEmp      := nil
   dbfAlbCliP  := nil
   dbfTblCnv   := nil
   dbfTImp     := nil

   dbfPreCliT  := nil
   dbfPreCliL  := nil
   dbfPedCliT  := nil
   dbfPedCliL  := nil
   dbfPedCliP  := nil
   dbfFacRecT  := nil
   dbfFacRecL  := nil

   dbfAlbPrvT  := nil
   dbfAlbPrvL  := nil
   dbfAlbPrvS  := nil
   dbfFacPrvT  := nil
   dbfFacPrvL  := nil
   dbfRctPrvT  := nil
   dbfRctPrvL  := nil

   dbfHisMov   := nil
   dbfHisMovS  := nil

   oStock      := nil
   oCaptura    := nil
   oTComandas  := nil
   oNewImp     := nil
   oVisor      := nil
   oImpresora  := nil
   oSalaVentas := nil
   oInvitacion := nil
   oTipArt     := nil
   oFabricante := nil

   oFideliza         := nil

   oWndBrw           := nil
   oWndBig           := nil

   oOfficeBar        := nil

   dbfComentariosT   := nil
   dbfComentariosL   := nil

   lOpenFiles        := .F.

   EnableAcceso()

   if lTactilMode() .OR. lTpvMode()
      PostQuitMessage()
   end

Return .T.



FUNCTION FrontTpv( oMenuItem, oWnd, cCodCli, cCodArt, lEntCon, lExtTpv, aNumDoc )

   local oBtnEur
   local cTitle
   local oSnd
   local oRpl
   local oFlt
   local lEur           := .F.
   local oPrv
   local oImp
   local oDel
   local oRotor

   IIF( oMenuItem == nil, oMenuItem := "01063", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;
   IIF( lEntCon == nil, lEntCon := lEntCon(), ) ;
   IIF( lExtTpv == nil, lExtTpv := .F., ) ;
   IIF( aNumDoc == nil, aNumDoc := { "", "", "" }, ) ;

   nLevel               := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return .F.
   end





   if oWnd <> nil
      SysRefresh(); oWnd:CloseAll(); SysRefresh()
   end

   if !OpenFiles()
      return .F.
   end

   DisableAcceso()





   cTitle      := "T.P.V. - Sesión: " + Alltrim( Trans( cCurSesion(), "######" ) ) + " - " + dtoc( date() )





   AddMnuNext( "T.P.V.", ProcName() )

if !lExtTpv



















   oWndBrw := TShell():New( 0, 0, 22, 80, cTitle,, oWnd,,, .F.,,, ( dbfTikT ),,,,, {"Número",    "Fecha", "Caja", "Cajero", "Código", "Nombre", "Sesión"}, {||( TpvAppRec( oWndBrw:oBrw, bEditT, dbfTikT, oWnd, cCodCli, cCodArt, aNumDoc ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEditT, dbfTikT ) )}, {||( DelTpv( oWndBrw:oBrw, dbfTikT ) )},, nil, nLevel, "Cashier_user1_16", ( 164 + ( 55 * 256 ) + ( 58 * 65536 ) ),, {||( WinZooRec( oWndBrw:oBrw, bEditT, dbfTikT ) )}, .T. )

else



















   oWndBrw := TShell():New( 0, 0, 22, 80, cTitle,, oWnd,,, .F.,,, ( dbfTikT ),,,,, {"Número",    "Fecha", "Caja", "Cajero", "Código", "Nombre", "Sesión"}, {||( TpvAppRec( oWndBrw:oBrw, bEditT, dbfTikT, oWnd, cCodCli, cCodArt, aNumDoc ) )}, {||( WinEdtRec( oWndBrw:oBrw, bEditT, dbfTikT ) )}, {||( DelTpv( oWndBrw:oBrw, dbfTikT ) )},, nil, nLevel,, ( 164 + ( 55 * 256 ) + ( 58 * 65536 ) ), .T., {||( WinZooRec( oWndBrw:oBrw, bEditT, dbfTikT ) )}, .T. )

end

     oWndBrw:lAutoSeek     := .F.

     oWndBrw:lFechado      := .T.

     oWndBrw:bChgIndex     := {|| if( oUser():lFiltroVentas(), CreateFastFilter( cFiltroCajero, dbfTikT, .F., , cFiltroCajero ), CreateFastFilter( "", dbfTikT, .F. ) ) }

      oWndBrw:SetYearComboBoxChange( {|| YearComboBoxChange() } )

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión cerrada"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTikT )->lCloTik }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Zoom16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cobrado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| nChkalizer( ( dbfTikT)->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, if( lEur, cDivChg(), cDivEmp() ) ) }
         :nWidth           := 20
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "ChgPre16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Contabilizado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTikT )->lConTik }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "BmpConta16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Envio"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTikT )->lSndDoc }
         :nWidth           := 20
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Lbl16" )
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| aTipTik() }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Número"
         :cSortOrder       := "cNumTik"
         :bEditValue       := {|| ( dbfTikT )->cSerTik + "/" + lTrim( ( dbfTikT )->cNumTik ) + "/" + ( dbfTikT )->cSufTik }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Delegación"
         :bEditValue       := {|| ( dbfTikT )->cCodDlg }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Sesión"
         :cSortOrder       := "cTurTik"
         :bEditValue       := {|| Trans( ( dbfTikT )->cTurTik, "######" ) }
         :nWidth           := 40
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Fecha"
         :cSortOrder       := "dFecTik"
         :bEditValue       := {|| dtoc( ( dbfTikT )->dFecTik ) }
         :nWidth           := 80
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| ( dbfTikT )->cHorTik }
         :nWidth           := 40
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Caja"
         :cSortOrder       := "cNcjTik"
         :bEditValue       := {|| ( dbfTikT )->cNcjTik }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cajero"
         :cSortOrder       := "cCcjTik"
         :bEditValue       := {|| ( dbfTikT )->cCcjTik }
         :nWidth           := 40
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Código"
         :cSortOrder       := "cCliTik"
         :bEditValue       := {|| AllTrim( ( dbfTikT )->cCliTik ) }
         :nWidth           := 70
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Nombre"
         :cSortOrder       := "cNomTik"
         :bEditValue       := {|| AllTrim( ( dbfTikT )->cNomTik ) }
         :nWidth           := 180
         :bLClickHeader    := {| nMRow, nMCol, nFlags, oCol | oWndBrw:ClickOnHeader( oCol ) }
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( dbfTikT )->cAlmTik }
         :nWidth           := 60
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Base"
         :bEditValue       := {|| ( dbfTikT )->nTotNet }
         :cEditPicture     := cPorDiv( ( dbfTikT )->cDivTik, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := cImp()
         :bEditValue       := {|| ( dbfTikT )->nTotIva }
         :cEditPicture     := cPorDiv( ( dbfTikT )->cDivTik, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| ( dbfTikT )->nTotTik }
         :cEditPicture     := cPorDiv( ( dbfTikT )->cDivTik, dbfDiv )
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Cobrado"
         :bEditValue       := {|| nCobalizer( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Vales"
         :bEditValue       := {|| nTotValTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Anticipos"
         :bEditValue       := {|| nTotAntFacCli( ( dbfTikT )->cNumDoc, dbfAntCliT, dbfIva, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Diferencias"
         :bEditValue       := {|| nDifalizer( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( if( lEur, cDivChg(), ( dbfTikT )->cDivTik ), dbfDiv ) }
         :nWidth           := 30
      end

      with object ( oWndBrw:AddXCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| ( dbfTikT )->cNumDoc }
         :nWidth           := 120
         :lHide            := .T.
      end

   oWndBrw:CreateXFromCode()

if !lExtTpv






    oWndBrw:NewAt( "BUS",,, {||( oWndBrw:SearchSetFocus() )}, "(B)uscar", "B",,,,, .F. )

   oWndBrw:AddSeaBar()

end







   oWndBrw:NewAt( "NEW",,, {||( oWndBrw:RecAdd() )}, "(A)ñadir", "A",,, 2,, .F. )






   oWndBrw:NewAt( "EDIT",,, {||( oWndBrw:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






   oWndBrw:NewAt( "ZOOM",,, {||( oWndBrw:RecZoom() )}, "(Z)oom", "Z",,, 8,, .F. )







   oDel := oWndBrw:NewAt( "DEL",,, {||( oWndBrw:RecDel() )}, "(E)liminar", "E",, {|This|This:Toggle()}, 16,, .F. )

if !lExtTpv







      oWndBrw:NewAt( "DEL",,, {||( LqdVale( oWndBrw ) )}, "Liquidar vale",,,, 16, oDel, .F. )

end







   oPrv := oWndBrw:NewAt( "IMP",, "Imprimir tiket", {||( ImpTiket( .F., .F., .T. ) )}, "(I)mprimir", "I",,, 32,, .F. )








      oWndBrw:NewAt( "IMP",, "Imprimir comanda", {||( ImpresionComanda( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, ,.T. ) )}, "Imprimir comanda",,,, 32, oPrv, .F. )

if lExtTpv





   oWndBrw:NewAt( "UP",,, {||( oWndBrw:oBrw:GoUp(), oWndBrw:oBrw:Select(0), oWndBrw:oBrw:Select(1), oWndBrw:oBrw:Refresh() )}, "S(u)bir", "U",,,,, .F. )





   oWndBrw:NewAt( "DOWN",,, {||( oWndBrw:oBrw:GoDown(), oWndBrw:oBrw:Select(0), oWndBrw:oBrw:Select(1), oWndBrw:oBrw:Refresh() )}, "(B)ajar", "B",,,,, .F. )

else






   oWndBrw:NewAt( "SERIE1",,, {||( DlgPrnTicket( oWndBrw:oBrw ) )}, "Imp(r)imir series", "R",,, 32,, .F. )







   oImp := oWndBrw:NewAt( "PREV1",, "Previsualizar tiket", {||( ImpTiket( .T. ) )}, "(P)revisualizar", "P",,, 32,, .F. )






   oWndBrw:NewAt( "NEW",,, {||( WinDupRec( oWndBrw:oBrw, bEditT, dbfTikT ) )}, "Ti(k)et a factura", "K",,, 2,, .F. )






   oWndBrw:NewAt( "BMPCONTA",,, {||( DlgCntTicket( dbfTikT, dbfTikL, dbfTikP, dbfClient, dbfArticulo, dbfFPago, dbfDiv, oWndBrw ) )}, "Co(n)tabilizar", "N",,, 4,, .F. )

   if oUser():lAdministrador()






      oWndBrw:NewAt( "CHGSTATE",,, {||ContTpv( dbfTikT, oWndBrw:oBrw )}, "Cambiar esta(d)o", "D",,, 4,, .F. )

   end







   oSnd := oWndBrw:NewAt( "LBL",,, {||lSnd( oWndBrw, dbfTikT )}, "En(v)iar", "V",, {|This|This:Toggle()}, 4,, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfTikT, "lSndDoc", .T., .T., .T. ) )}, "Todos",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfTikT, "lSndDoc", .F., .T., .T. ) )}, "Ninguno",,,, 4, oSnd, .F. )







      oWndBrw:NewAt( "LBL",,, {||( lSelectAll( oWndBrw, dbfTikT, "lSndDoc", .T., .F., .T. ) )}, "Abajo",,,, 4, oSnd, .F. )






   oWndBrw:NewAt( "CHGPRE",,, {||( EdtCobTik( oWndBrw ) )}, "(C)obros", "C",,, 2,, .F. )






   oBtnEur := oWndBrw:NewAt( "BAL_EURO",,, {||( lEur := !lEur, oWndBrw:Refresh() )}, "M(o)neda", "O",,,,, .F. )
   if oUser():lAdministrador()






      oRpl := oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aItmTik(), dbfTikT ):ChgFields(), oWndBrw:Refresh() )}, "Cambiar campos",,, {|This|This:Toggle()}, 4,, .F. )







         oWndBrw:NewAt( "BMPCHG",,, {||( TDlgFlt():New( aColTik(), dbfTikL ):ChgFields(), oWndBrw:Refresh() )}, "Lineas",,,, 4, oRpl, .F. )

   end






   oWndBrw:NewAt( "INFO",,, {||( TTrazaDocumento():Activate( "12", ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik ) )}, "I(n)forme documento", "N",,, 4,, .F. )






   oRotor := oWndBrw:NewAt( "ROTOR",,, {||( oRotor:Expand() )}, "Rotor",,, {|This|This:Toggle()},,, .F. )






      oWndBrw:NewAt( "DOCUMENT",,, {||( Tik2AlbFac( ( dbfTikT )->cTipTik, ( dbfTikT )->cNumDoc ) )}, "Visualizar documento",,,,, oRotor, .F. )






      oWndBrw:NewAt( "USER1_",,, {||( EdtCli( ( dbfTikT )->cCliTik ) )}, "Modificar cliente",,,,, oRotor, .F. )






      oWndBrw:NewAt( "INFO",,, {||( InfCliente( ( dbfTikT )->cCliTik ) )}, "Informe cliente",,,,, oRotor, .F. )






      oWndBrw:NewAt( "WORKER",,, {||( EdtObras( ( dbfTikT )->cCliTik, ( dbfTikT )->cCodObr, dbfObrasT ) )}, "Modificar obras",,,,, oRotor, .F. )





      oWndBrw:NewAt( "DOCUMENT_USER1_",,, {||( lFacturaAlbaran() )}, "Generar factura",,,,, oRotor, .T. )




   oWndBrw:NewAt( "END",,, {||( ( cFiltroCajero := "" ), oWndBrw:End() )}, "(S)alir", "S",,,,, .F. )

end

   if !oUser():lFiltroVentas()
      oWndBrw:oActiveFilter:aTField       := aItmTik()
      oWndBrw:oActiveFilter:cDbfFilter    := dbfFlt
      oWndBrw:oActiveFilter:cTipFilter    := "12"
   end

   oWndBrw:Activate(, oWndBrw:bLClicked, oWndBrw:bRClicked, oWndBrw:bMoved, oWndBrw:bResized, oWndBrw:bPainted, oWndBrw:bKeyDown, oWndBrw:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBrw:bLButtonUp )

   EnableAcceso()

   if !Empty( cCodCli ) .OR. !Empty( cCodArt ) .OR. lEntCon .OR. !Empty( aNumDoc )
      if !Empty( oWndBrw )
         oWndBrw:RecAdd()
      end
      cCodCli  := nil
      cCodArt  := nil
      aNumDoc  := { "", "", "" }
   end

Return .T.



Static Function TpvAppRec( oWndBrw, bEditT, dbfTikT, oWnd, cCodCli, cCodArt, aNumDoc )

   while ( WinAppRec( oWndBrw, bEditT, dbfTikT, cCodCli, cCodArt, aNumDoc ) )

      if lStopEntCont

         Return ( .T. )

      end

   end

   ( dbfTikT )->( dbGoBottom() )

   oWndBrw:Select( 0 )
   oWndBrw:Select( 1 )

Return ( .T. )



Static Function ImpTiket( lPrev, lEntrega, lImpMenu, dbfImp, oDatos )

   local oPrnTik
   local nCopClient
   local nNumTik

   IIF( lPrev == nil, lPrev := .F., ) ;
   IIF( lEntrega == nil, lEntrega := .F., ) ;
   IIF( lImpMenu == nil, lImpMenu := .F., ) ;

   if Empty( oDatos )
      oDatos            := TFormatosImpresion():Load( dbfCajT )
   end

   nCopClient           := Max( Retfld( ( dbfTikT )->cCliTik, dbfClient, "CopiasF" ), 1 )






   if lPrev

      nCopTik           := 1

   else

      if lCopTik

         nCopTik        := nCopiasTipoTicket( ( dbfTikT )->cTipTik, lEntrega, dbfCajT )

         if lImpMenu .AND. nCopTik == 0
            nCopTik     := 1
         end

      end

   end






   do case
      case ( dbfTikT )->cTipTik == "1"

         do case
            case ( lRegalo )

               nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo tickets", oDatos:cFormatoRegalo, oDatos:cPrinterRegalo )

               lRegalo  := .F.

            case ( lEntrega )

               nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo tickets", oDatos:cFormatoEntrega, oDatos:cPrinterEntrega )

            otherwise

               nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo tickets", oDatos:cFormatoTiket, oDatos:cPrinterTik )

         end

      case ( dbfTikT )->cTipTik == "5"

         nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo apartados", oDatos:cFmtApt, oDatos:cPrinterApt )

      case ( dbfTikT )->cTipTik == "6"

         if ( dbfTikT )->lFreTik

            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo cheques regalo", oDatos:cFmtTikChk, oDatos:cPrinterTikChk )

         else

            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo vales", oDatos:cFmtVal, oDatos:cPrinterTikChk )

         end

      case ( dbfTikT )->cTipTik == "4"

         nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo devoluciones", oDatos:cFmtTikDev, oDatos:cPrinterDev )

      case ( dbfTikT )->cTipTik == "2"

         if lImpAlbaranesEnImpresora( ( dbfTikT )->cNcjTik, dbfCajT )

            if lPrev
               VisAlbCli( ( dbfTikT )->cNumDoc, .F., "Imprimiendo albaranes", oDatos:cFmtAlbCaj, oDatos:cPrinterAlbCaj )
            else
               PrnAlbCli( ( dbfTikT )->cNumDoc, .F., "Imprimiendo albaranes", oDatos:cFmtAlbCaj, oDatos:cPrinterAlbCaj )
            end

         else
            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo albaranes", oDatos:cFmtAlb, oDatos:cPrinterAlb )
         end

      case ( dbfTikT )->cTipTik == "3"

         if lImpFacturasEnImpresora( ( dbfTikT )->cNcjTik, dbfCajT )

            if lPrev
               VisFacCli( ( dbfTikT )->cNumDoc, .F., "Imprimiendo facturas", oDatos:cFmtFacCaj, oDatos:cPrinterFacCaj )
            else
               PrnFacCli( ( dbfTikT )->cNumDoc, .F., "Imprimiendo facturas", oDatos:cFmtFacCaj, oDatos:cPrinterFacCaj )
            end

         else
            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo facturas", oDatos:cFmtFac, oDatos:cPrinterFac )
         end

      case ( dbfTikT )->cTipTik == "7"

         if lEntrega
            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo tickets", oDatos:cFmtEntCaj, oDatos:cPrinterEntCaj )
         else
            nGenTikCli( if( lPrev, 2, 1 ), "Imprimiendo tickets", oDatos:cFormatoTiket, oDatos:cPrinterTik )
         end

   end





   if !Empty( dbfImp )

      nNumTik  := ( dbfImp )->cSerTik + ( dbfImp )->cNumTik + ( dbfImp )->cSufTik

      if dbSeekInOrd( nNumTik, "cComanda", dbfImp )

         if dbLock( dbfImp )
            ( dbfImp )->lImp        := .T.
            ( dbfImp )->dFTikImp    := GetSysDate()
            ( dbfImp )->cHTikImp    := Substr( Time(), 1, 5 )
            ( dbfImp )->( dbUnLock() )
         end

      end

   end

   if !Empty( oWndBrw )
      oWndBrw:Refresh()
   end

Return nil



Static Function TpvEdtRec( oWndBrw, bEdit, dbfTikT, oWnd )

   pdaLockSemaphore( dbfTikT )

   WinEdtRec( oWndBrw, bEdit, dbfTikT, , , oWnd )

   pdaUnLockSemaphore( dbfTikT )

   oWndBrw:Select( 0 )
   oWndBrw:Select( 1 )

Return ( .T. )





FUNCTION DelTpv( oBrw, dbfTikCliT, lMessage )

   local nOrdAlb

   IIF( lMessage == nil, lMessage := .T., ) ;





   if !Empty( ( dbfTikCliT )->cAlbTik )

      if dbSeekInOrd( ( dbfTikCliT )->cAlbTik, "nNumAlb", dbfAlbCliT )

         if dbLock( dbfAlbCliT )

            ( dbfAlbCliT )->lFacturado    := .F.
            ( dbfAlbCliT )->cNumTik       := Space(13)
            ( dbfAlbCliT )->( dbUnLock() )

         end

      end

      nOrdAlb  := ( dbfAlbCliL )->( OrdSetFocus( "nNumAlb" ) )

      if ( dbfAlbCliL )->( dbSeek( ( dbfTikCliT )->cAlbTik ) )

         while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == ( dbfTikCliT )->cAlbTik .AND. !( dbfAlbCliL )->( Eof() )

            if dbLock( dbfAlbCliL )

               ( dbfAlbCliL )->lFacturado    := .F.
               ( dbfAlbCliL )->( dbUnLock() )

            end


         ( dbfAlbCliL )->( dbSkip() )

         end

      end

      ( dbfAlbCliL )->( OrdSetFocus( nOrdAlb ) )

   end





   if !Empty( ( dbfTikCliT )->cPedTik )

      if dbSeekInOrd( ( dbfTikCliT )->cPedTik, "nNumPed", dbfPedCliT )

         if dbLock( dbfPedCliT )

            ( dbfPedCliT )->nEstado       := 1
            ( dbfPedCliT )->cNumTik       := Space(13)

            ( dbfPedCliT )->( dbUnLock() )

         end

      end

      if dbSeekInOrd( ( dbfTikCliT )->cPedTik, "nNumPed", dbfPedCliP )

         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == ( dbfTikCliT )->cPedTik .AND. !( dbfPedCliP )->( eof() )

            if dbLock( dbfPedCliP )
               ( dbfPedCliP )->lPasado    := .F.
               ( dbfPedCliT )->( dbUnLock() )
            end

            ( dbfPedCliP )->( dbSkip() )

         end

      end

   end





   if !Empty( ( dbfTikCliT )->cPreTik )

      if dbSeekInOrd( ( dbfTikCliT )->cPreTik, "nNumPre", dbfPreCliT )

         if dbLock( dbfPreCliT )
            ( dbfPreCliT )->lEstado       := .F.
            ( dbfPreCliT )->cNumTik       := Space(13)
            ( dbfPreCliT )->( dbUnLock() )
         end

      end

   end

   WinDelRec( oBrw, dbfTikCliT, TpvDelRec() )

Return ( .T. )



FUNCTION TpvDelRec()

   local cCodAlm
   local nRecAnt
   local nOrdAnt
   local cNumTik     := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik
   local cTipDoc     := ( dbfTikT )->cTipTik
   local cNumDoc     := ( dbfTikT )->cNumDoc





   while ( dbfTikL )->( dbSeek( cNumTik ) )
      if dbLock( dbfTikL )
         ( dbfTikL )->( dbDelete() )
         ( dbfTikL )->( dbUnLock() )
      end
   end





   while ( dbfTikP )->( dbSeek( cNumTik ) )
      if dbLock( dbfTikP )
         ( dbfTikP )->( dbDelete() )
         ( dbfTikP )->( dbUnLock() )
      end
   end





   nRecAnt     := ( dbfTikT )->( Recno() )
   nOrdAnt     := ( dbfTikT )->( OrdSetFocus( "cDocVal" ) )

   if ( dbfTikT )->( dbSeek( cNumTik ) )
      while ( dbfTikT )->cValDoc == cNumTik .AND. !( dbfTikT )->( eof() )
         if dbLock( dbfTikT )
            ( dbfTikT )->lLiqTik := .F.
            ( dbfTikT )->lSndDoc := .T.
            ( dbfTikT )->cTurVal := ""
            ( dbfTikT )->cValDoc := ""
            ( dbfTikT )->( dbUnLock() )
         end
         ( dbfTikT )->( dbSkip() )
      end
   end





   ( dbfTikT )->( dbGoTo( nRecAnt ) )
   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )





   if !Empty( cNumDoc )





      do case
      case cTipDoc == "2"

         if ( dbfAlbCliT )->( dbSeek( cNumDoc ) )

            cCodAlm  := ( dbfAlbCliT )->cCodAlm
            cNumDoc  := ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb





            delRecno( dbfAlbCliT )

         end

      case cTipDoc == "3"

         if ( dbfFacCliT )->( dbSeek( cNumDoc ) )

            cCodAlm  := ( dbfFacCliT )->cCodAlm
            cNumDoc  := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac





            delRecno( dbfFacCliT )





            while ( dbfFacCliP )->( dbSeek( cNumDoc ) ) .AND. !( dbfFacCliP )->( eof() )

               if dbLock( dbfFacCliP )
                  ( dbfFacCliP )->( dbDelete() )
                  ( dbfFacCliP )->( dbUnLock() )
               end

               ( dbfFacCliP )->( dbSkip() )
            end





            nOrdAnt     := ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )

            if ( dbfAntCliT )->( dbSeek( cNumDoc ) )
               while ( dbfAntCliT )->cNumDoc == cNumDoc .AND. !( dbfAntCliT )->( eof() )
                  if dbLock( dbfAntCliT )
                     ( dbfAntCliT )->lLiquidada := .F.
                     ( dbfAntCliT )->( dbUnLock() )
                  end
                  ( dbfAntCliT )->( dbSkip() )
               end
            end

            ( dbfAntCliT )->( OrdSetFocus( nOrdAnt ) )

         end

      end

   end

RETURN .T.



STATIC FUNCTION EdtRec( aTmp, aGet, dbfTikT, oBrw, cCodCli, cCodArt, nMode, aNumDoc )

   local nOrd
   local oBmpDiv
   local cTitDoc
   local nRieCli           := 0
   local cResource         := "TPVFRONT_1024x768"
   local nScreenVertRes    := GetSysMetrics( 1 )

   aGetTxt                 := Array( 10 )
   oGetTxt                 := Array( 10 )

   if ( nMode == 2 ) .AND. ( ( aTmp[ 4 ] == "4" ) .OR. ( aTmp[ 4 ] == "6" ) )
      MsgStop( "No se pueden modificar vales, devoluciones o cheques regalos." )
      return .F.
   end

   if ( nMode == 1 .OR. nMode == 4 ) .AND. !lCurSesion()
      MsgStop( "No hay sesiones activas, imposible añadir documentos" )
      return .F.
   end

   if nMode == 1 .AND. !Empty( cCodCli )
      aTmp[ 11 ]     := cCodCli
   end

   if nMode == 1

      if !uFieldEmpresa( "lGetFpg" )
         aTmp[ 21 ]  := cDefFpg()
      else
         aTmp[ 21 ]  := Space( 2 )
      end

   end





   if Empty( aTmp[ 12 ] )
      aTmp[ 12 ]     := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end





   if nMode == 4
      cTitDoc              := "Ticket a factura"
   else
      cTitDoc              := LblTitle( nMode ) + aTipTik( aTmp ) + " a clientes"
   end





   if aTmp[ 4 ] <> "1" .AND. nMode == 4
      msgStop( "Solo se puede pasar a factura los tickets." )
      return .F.
   end

   if aTmp[ 45 ] .AND. nMode == 4
      MsgStop( "Este ticket ya ha sido convertido a factura." )
      return .F.
   end





   if !lCajaOpen( oUser():cCaja() ) .AND. !oUser():lMaster()
      msgStop( "Esta caja " + oUser():cCaja() + " esta cerrada." )
      Return .F.
   end





   cCapCaj                 := cCapturaCaja( oUser():cCaja(), dbfCajT )

   if Empty( aTmp[ 62 ] )
      aTmp[ 62 ]     := RetFld( aTmp[ 11 ], dbfClient, "Telefono" )
   end

   nRieCli                 := oStock:nRiesgo( aTmp[ 11 ] )





   oFntEur                 := TFont():New( "Segoe UI", 0, 48, .F., .T. )





   nOrd                    := ( dbfTikT )->( ordSetFocus( 1 ) )





   if BeginTrans( aTmp, aGet, nMode, .T. )
      Return .F.
   end

   nCopTik                 := nCopiasTicketsEnCaja( oUser():cCaja(), dbfCajT )
   lCopTik                 := .T.





   do case
      case nScreenVertRes == 600
         cResource         := "TPVFRONT"
         lMaximized        := .F.

      case nScreenVertRes == 768
         cResource         := "TPVFRONT_1024x768"
         lMaximized        := .F.

      case nScreenVertRes == 1024
         cResource         := "TPVFRONT_1280x1024"
         lMaximized        := .F.

   end

   oDlgTpv = TDialog():New(,,,, cTitDoc, cResource,, .F.,,,,,, .F.,,,,,, .F., )












        aGet[ 11 ] := TGetHlp():ReDefine( 190, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oDlgTpv,, "@!", {||    ( loaCli( aGet, aTmp, nMode, oGetTxt[ 9 ] ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwClient( aGet[ 11 ], aGet[ 13 ] ), ::lValid() )}, nil, "LUPA",, )









     aGet[ 62 ] := TGetHlp():ReDefine( 106, { | u | If( PCount()==0, aTmp[ 62 ], aTmp[ 62 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 13 ] := TGetHlp():ReDefine( 191, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 19 ] := TGetHlp():ReDefine( 101, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )






      aGet[ 14 ] := TGetHlp():ReDefine( 102, { | u | If( PCount()==0, aTmp[ 14 ], aTmp[ 14 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,, {|Self|GoogleMaps( aTmp[ 14 ], Rtrim( aTmp[ 15 ] ) + Space( 1 ) + Rtrim( aTmp[ 16 ] ) )}, nil, "Environnment_View_16",, )




      aGet[ 15 ] := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, aTmp[ 15 ], aTmp[ 15 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 16 ] := TGetHlp():ReDefine( 105, { | u | If( PCount()==0, aTmp[ 16 ], aTmp[ 16 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )




      aGet[ 18 ] := TGetHlp():ReDefine( 103, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ( !aTmp[ 20 ] .OR. oUser():lAdministrador() ) )},, .F., .F.,,,,,, nil,,, )









      aGet[ 12 ] := TGetHlp():ReDefine( 192, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oDlgTpv,, "9", {||    ( aTmp[ 12 ] >= 1 .AND. aTmp[ 12 ] <= 6 )},,,,,, .F., {||     ( nMode <> 3 .AND. ( lUsrMaster() .OR. oUser():lCambiarPrecio() ) )},, .F., .T.,,, {||      1}, {||      6},, nil,,, )




      oRieCli := TGetHlp():ReDefine( 193, { | u | If( PCount()==0, nRieCli, nRieCli:= u ) }, oDlgTpv,, cPorDiv,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )











        aGet[35] := TGetHlp():ReDefine( 230, { | u | If( PCount()==0, aTmp[35], aTmp[35]:= u ) }, oDlgTpv,,, {||    ( cObras( aGet[ 35 ], oGetTxt[ 5 ], aTmp[ 11 ], dbfObrasT ) )},,,,,, .F., {||     ( lObras() .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( brwObras( aGet[ 35 ], oGetTxt[ 5 ], aTmp[ 11 ], dbfObrasT ) )}, nil, "LUPA",, )




      oGetTxt[ 5 ] := TGetHlp():ReDefine( 231, { | u | If( PCount()==0, aGetTxt[ 5 ], aGetTxt[ 5 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 32 ] := TGetHlp():ReDefine( 240, { | u | If( PCount()==0, aTmp[ 32 ], aTmp[ 32 ]:= u ) }, oDlgTpv,,, {||    ( cAgentes( aGet[ 32 ], dbfAgent, oGetTxt[ 6 ], aGet[ 36 ], dbfAgeCom ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ 32 ], oGetTxt[ 6 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 6 ] := TGetHlp():ReDefine( 241, { | u | If( PCount()==0, aGetTxt[ 6  ], aGetTxt[ 6  ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )











        aGet[ 10 ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ 10 ], aTmp[ 10 ]:= u ) }, oDlgTpv,,, {||    ( cAlmacen( aGet[10], dbfAlm, oGetTxt[ 2 ] ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwAlmacen( aGet[10], oGetTxt[ 2 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 2 ] := TGetHlp():ReDefine( 171, { | u | If( PCount()==0, aGetTxt[ 2 ], aGetTxt[ 2 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )












      aGet[ 21 ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oDlgTpv,, "@!", {||    !Empty( aTmp[ 21 ] ) .AND. cFpago( aGet[ 21 ], dbfFPago, oGetTxt[ 3 ] )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ 21 ], oGetTxt[ 3 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 3 ] := TGetHlp():ReDefine( 181, { | u | If( PCount()==0, aGetTxt[ 3 ], aGetTxt[ 3 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )











        aGet[ 9 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oDlgTpv,,, {||    cCajas( aGet[ 9 ], dbfCajT, oGetTxt[ 1 ] )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 9 ], oGetTxt[ 1 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 1 ] := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, aGetTxt[ 1 ], aGetTxt[ 1 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )











      aGet[34] := TGetHlp():ReDefine( 220, { | u | If( PCount()==0, aTmp[34], aTmp[34]:= u ) }, oDlgTpv,,, {||    ( cTarifa( aGet[34], oGetTxt[ 8 ] ) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwTarifa( aGet[34], oGetTxt[ 8 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 8 ] := TGetHlp():ReDefine( 221, { | u | If( PCount()==0, aGetTxt[ 8 ], aGetTxt[ 8 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )






      aGet[ 36 ] := TGetHlp():ReDefine( 242, { | u | If( PCount()==0, aTmp[ 36 ], aTmp[ 36 ]:= u ) }, oDlgTpv,, "@E 99.99",,,,,,, .F., {||     ( !Empty( aTmp[ 32 ] ) .AND. nMode <> 3 )},, .F., .T.,,,,,, nil,,, )











      aGet[ 33 ] := TGetHlp():ReDefine( 250, { | u | If( PCount()==0, aTmp[ 33 ], aTmp[ 33 ]:= u ) }, oDlgTpv,,, {||    ( cRuta( aGet[ 33 ], dbfRuta, oGetTxt[ 7 ]) )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwRuta( aGet[33 ], dbfRuta, oGetTxt[ 7 ] ) )}, nil, "LUPA",, )




      oGetTxt[ 7 ] := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, aGetTxt[ 7 ], aGetTxt[ 7 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )












        aGet[ 24 ] := TGetHlp():ReDefine( 200, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oDlgTpv,, "@!", {||    ( cDivOut( aGet[ 24 ], oBmpDiv, aGet[ 25 ], @cPouDiv, nil, nil, nil, nil, nil, nil, dbfDiv, oBandera ) )},,,,,, .F., {||     ( nMode == 1 .AND. ( dbfTmpL )->( ordKeyCount() ) == 0 )}, {|nKey,nFlags,Self| ( lRecTotal( aTmp ) ) }, .F., .F.,,,,, {|Self|( BrwDiv( aGet[ 24 ], oBmpDiv, aGet[ 25 ], dbfDiv, oBandera ) )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 201, "BAN_EURO",, oDlgTpv,,, .F., .F.,,, .F.,,, .F. )




      oCopTik := TCheckBox():ReDefine( 260, { | u | If( PCount()==0, lCopTik, lCopTik:= u ) }, oDlgTpv,,,,,,, .F., {||     ( nMode <> 3 )}, .F. )











      TGetHlp():ReDefine( 261, { | u | If( PCount()==0, nCopTik, nCopTik:= u ) }, oDlgTpv,, "99", {||    ( nCopTik >= 0 .AND. nCopTik < 99 )}, "N/W*",,,,, .F., {||     ( !lCopTik )}, {|nKey,nFlags,Self| ( oCopTik:Click( .F. ):Refresh() ) }, .F., .T.,,, {||      0}, {||      99},, nil,,, )





      oBrwDet                 := IXBrowse():New( oDlgTpv )

      oBrwDet:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDet:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDet:bChange         := {|| DisImg( ( dbfTmpL )->cCbaTil ) }

      if ( nMode <> 3 ) .AND. nAnd( nLevel, 4 ) <> 0
         oBrwDet:bLDblClick   := {|| WinEdtRec( oBrwDet, bEditL, dbfTmpL, , , aTmp ), lRecTotal( aTmp ), aGet[ 11 ]:SetFocus() }
      end

      oBrwDet:cAlias          := dbfTmpL

      oBrwDet:nMarqueeStyle   := 6
      oBrwDet:cName           := "TPV.Detalle"

      oBrwDet:CreateFromResource( 210 )

      oCaptura:CreateColumns( cCapCaj, oBrwDet )






      oTxtTot := TSay():ReDefine( 410, {||   "Total"}, oDlgTpv,, "G+/N",, .F., oFntEur, .F., .F. )






      oNumTot := TSay():ReDefine( 420, {||   Trans( 0, cPorDiv )}, oDlgTpv,, "G+/N",, .F., oFntEur, .F., .F. )








      aGet[ 56 ] := TGetHlp():ReDefine( 710, { | u | If( PCount()==0, aTmp[ 56 ], aTmp[ 56 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







      aGet[ 57 ] := TGetHlp():ReDefine( 711, { | u | If( PCount()==0, aTmp[ 57 ], aTmp[ 57 ]:= u ) }, oDlgTpv,, "@ER 999.99%", {||    ( lRecTotal( aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      oTotEsp := TGetHlp():ReDefine( 712, { | u | If( PCount()==0, nTotDtoEsp, nTotDtoEsp:= u ) }, oDlgTpv,, "@ER 999.99 ",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      aGet[ 58 ] := TGetHlp():ReDefine( 720, { | u | If( PCount()==0, aTmp[ 58 ], aTmp[ 58 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )







        aGet[ 59 ] := TGetHlp():ReDefine( 721, { | u | If( PCount()==0, aTmp[ 59 ], aTmp[ 59 ]:= u ) }, oDlgTpv,, "@ER 999.99%", {||    ( lRecTotal( aTmp ) )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      oTotDpp := TGetHlp():ReDefine( 722, { | u | If( PCount()==0, nTotDpp, nTotDpp:= u ) }, oDlgTpv,, "@ER 999.99 ",,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )









      oBmpVis := TBitmap():ReDefine( 600,, cFilBmp, oDlgTpv,,, .F., .T.,,, .F.,,, .F. )







      oSayGetRnt := TSay():ReDefine( 800,, oDlgTpv,,,, .F.,, .F., .F. )



      oGetRnt := TGetHlp():ReDefine( 408, { | u | If( PCount()==0, nTotRnt, nTotRnt:= u ) }, oDlgTpv,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




















        oMetMsg := TMeter():ReDefine( 460, { | u | If( PCount()==0, nMetMsg, nMetMsg:= u ) },, oDlgTpv, .F.,,, .T.,,,, )

      oMetMsg:nClrText   := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      oMetMsg:nClrBar    := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )
      oMetMsg:nClrBText  := ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) )










      aGet[ 1 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 1 ], aTmp[ 1 ]:= u ) }, oDlgTpv,, "@!", {||    ( aTmp[ 1 ] >= "A" .AND. aTmp[ 1 ] <= "Z"  )},,,,,, .F., {||     ( nMode == 1 .OR. nMode == 4 )},, .F., .T., {||    ( UpSerie( aGet[ 1 ] ) )}, {||  ( DwSerie( aGet[ 1 ] ) )},,,, nil,,, )

         aGet[ 1 ]:bLostFocus := {|| aTmp[ 38 ] := cProCnt( aTmp[ 1 ] ) }





        aGet[ 2 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 2 ], aTmp[ 2 ]:= u ) }, oDlgTpv,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )





      aGet[ 3 ] := TGetHlp():ReDefine( 111, { | u | If( PCount()==0, aTmp[ 3 ], aTmp[ 3 ]:= u ) }, oDlgTpv,,,, "N/W*",,,,, .F., {||        .F.},, .F., .F.,,,,,, nil,,, )





        TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||         ( nMode <> 3 )},, .F., .T.,,,,,, nil,,, )





      aGet[ 22 ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oDlgTpv,, cPorDiv,,,,,,, .F., {||     (.F.)},, .F., .F.,,,,,, nil,,, )





      aGet[ 23 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 23 ], aTmp[ 23 ]:= u ) }, oDlgTpv,, cPorDiv,,,,,,, .F., {||     (.F.)},, .F., .F.,,,,,, nil,,, )





      aGet[ 8 ] := TGetHlp():ReDefine( 125, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oDlgTpv,,, {||    ( SetUsuario( aGet[ 8 ], oGetTxt[ 10 ], nil, dbfUsr ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oGetTxt[ 10 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aGetTxt[ 10 ], aGetTxt[ 10 ]:= u ) }, oDlgTpv,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

   oDlgTpv:bStart       := {|| StartEdtRec( aTmp, aGet, nMode, oDlgTpv, oBrw, oBrwDet, aNumDoc, cCodArt ) }





   if nMode <> 3
      oDlgTpv:AddFastKey( 113, {|| AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur ), aGet[ 11 ]:SetFocus() } )
      oDlgTpv:AddFastKey( 114, {|| WinEdtRec( oBrwDet, bEditL, dbfTmpL, , , aTmp ), lRecTotal( aTmp ), aGet[ 11 ]:SetFocus() } )
      oDlgTpv:AddFastKey( 115, {|| WinDelRec( oBrwDet, dbfTmpL, nil, nil, .T. ), lRecTotal( aTmp ) } )
      oDlgTpv:AddFastKey( 116, {|| if( ( ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "1" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) ) ), NewTiket( aGet, aTmp, nMode, "1", .F., oBrw, oBrwDet ), ) } )
      oDlgTpv:AddFastKey( 118, {|| if( ( ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "2" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) ) ), NewTiket( aGet, aTmp, nMode, "2", .F., oBrw, oBrwDet ), ) } )
      oDlgTpv:AddFastKey( 119, {|| if( ( ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "3" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) ) ), NewTiket( aGet, aTmp, nMode, "3", .F., oBrw, oBrwDet ), ) } )
      oDlgTpv:AddFastKey( 120, {|| if( ( ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) ) ), NewTiket( aGet, aTmp, nMode, "5", .F., oBrw, oBrwDet ), ) } )
      oDlgTpv:AddFastKey( 65,    {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )
   end



   oDlgTpv:Activate( oDlgTpv:bLClicked, oDlgTpv:bMoved, oDlgTpv:bPainted, .T., {|Self|( ExitNoSave( nMode, dbfTmpL ) )},,, oDlgTpv:bRClicked,,, )





   cDelUsrTik()

   oFntEur:End()
   oBmpDiv:End()





   KillTrans()

   if Select( dbfTikT ) <> 0
      ( dbfTikT )->( ordSetFocus( nOrd ) )
   end

RETURN ( oDlgTpv:nResult == 1 )




Static Function StartEdtRec( aTmp, aGet, nMode, oDlgTpv, oBrw, oBrwDet, aNumDoc, cCodArt )

   local oBoton
   local oGrupo
   local oCarpeta

   if Empty( oOfficeBar )

      oOfficeBar              := TDotNetBar():New( 0, 0, 2020, 115, oDlgTpv, 1 )
      oOfficeBar:lPaintAll    := .F.
      oOfficeBar:lDisenio     := .F.

      oOfficeBar:SetStyle( 1 )

      oDlgTpv:oTop      := oOfficeBar

      oCarpeta          := TCarpeta():New( oOfficeBar, "T.P.V." )

      oGrupo            := TDotNetGroup():New( oCarpeta, 186, "Lineas", .F. )
         oBtnAdd        := TDotNetButton():New( 60, oGrupo, "New32",                    "Añadir [F2]",         1, {|| AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur ), aGet[ 11 ]:SetFocus() }, , , .F., .F., .F. )
         oBtnEdt        := TDotNetButton():New( 60, oGrupo, "Edit32",                   "Modificar [F3]",      2, {|| WinEdtRec( oBrwDet, bEditL, dbfTmpL, , , aTmp ), lRecTotal( aTmp ), aGet[ 11 ]:SetFocus() }, , , .F., .F., .F. )
         oBtnDel        := TDotNetButton():New( 60, oGrupo, "Del32",                    "Eliminar [F4]",       3, {|| WinDelRec( oBrwDet, dbfTmpL, nil, nil, .T. ), lRecTotal( aTmp ) }, , {|| nMode <> 3 }, .F., .F., .F. )

      oGrupo            := TDotNetGroup():New( oCarpeta, 436, "Cobros", .F. )
         oBtnTik        := TDotNetButton():New( 60, oGrupo, "Money2_32",                "Cobrar [F5]",         1, {|| NewTiket( aGet, aTmp, nMode, "1", .F., oBrw, oBrwDet ) }, , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnAlb        := TDotNetButton():New( 60, oGrupo, "Document_plain_user1_32",  "Albarán [F7]",        2, {|| NewTiket( aGet, aTmp, nMode, "2", .F., oBrw, oBrwDet ) }, , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnFac        := TDotNetButton():New( 70, oGrupo, "Document_user1_32",        "Factura [F8]",        3, {|| NewTiket( aGet, aTmp, nMode, "3", .F., oBrw, oBrwDet ) }, , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnApt        := TDotNetButton():New( 60, oGrupo, "Cashier_Stop_32",          "Apartar [F9]",        4, {|| NewTiket( aGet, aTmp, nMode, "5", .F., oBrw, oBrwDet ) }, , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnVal        := TDotNetButton():New( 60, oGrupo, "Cashier_Money2_32",        "Cheque regalo",       5, {|| NewTiket( aGet, aTmp, nMode, "8", .F., oBrw, oBrwDet ) }, , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnDev        := TDotNetButton():New( 60, oGrupo, "Cashier_Delete_32",        "Devolución",          6, {|| if( uFieldEmpresa( "lNumTik" ), AsistenteDevolucionTiket( aTmp, aGet, nMode, .T. ), NewTiket( aGet, aTmp, nMode, "4", .F., oBrw, oBrwDet ) ) }, , {|| nMode == 1 }, .F., .F., .F. )
         oBtnOld        := TDotNetButton():New( 60, oGrupo, "Cashier_Scroll_32",        "Vale",                7, {|| if( uFieldEmpresa( "lNumTik" ), AsistenteDevolucionTiket( aTmp, aGet, nMode, .F. ), NewTiket( aGet, aTmp, nMode, "6", .F., oBrw, oBrwDet ) ) }, , {|| nMode <> 3 }, .F., .F., .F. )

      oGrupo            := TDotNetGroup():New( oCarpeta, 66, "Tickets", .F. )
         oBtnUp         := TDotNetButton():New( 60, oGrupo, "Arrow_Up_Blue_Save_32",    "",                    1, , , {|| nMode <> 3 }, .F., .F., .F. )
         oBtnDown       := TDotNetButton():New( 60, oGrupo, "Arrow_Down_Blue_Save_32",  "",                    1, , , {|| nMode <> 3 }, .F., .F., .F. )

      oGrupo            := TDotNetGroup():New( oCarpeta, 66, "Salida", .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "End32",                    "Salida",              1, {|| oDlgTpv:End() }, , , .F., .F., .F. )

      oCarpeta          := TCarpeta():New( oOfficeBar, "Rotor" )

      oGrupo            := TDotNetGroup():New( oCarpeta, 306, "Cobros", .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "User1_32",                 "Modificar cliente",   1, {|| if( !Empty( aTmp[ 11 ] ), EdtCli( aTmp[ 11 ] ), MsgStop( "Código cliente vacío" ) ) }, , , .F., .F., .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "Info_32",                  "Informe cliente",     2, {|| if( !Empty( aTmp[ 11 ] ), InfCliente( aTmp[ 11 ] ), MsgStop( "Código cliente vacío" ) ) }, , , .F., .F., .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "Worker_32",                "Modificar obras",     3, {|| if( !Empty( aTmp[ 11 ] ), EdtObras( aTmp[ 11 ], aTmp[ 35 ], dbfObrasT ), MsgStop( "No hay obra asociada para el presupuesto" ) ) }, , , .F., .F., .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "Cube_Yellow_32",           "Modificar artículo",  4, {|| EdtArticulo( ( dbfTmpL )->cCbaTil ) }, , , .F., .F., .F. )
         oBoton         := TDotNetButton():New( 60, oGrupo, "Info_32",                  "Informe artículo",    5, {|| InfArticulo( ( dbfTmpL )->cCbaTil ) }, , , .F., .F., .F. )

      SetButtonEdtRec( nMode, aTmp )

   end

   if nMode == 4

      oBtnAdd:lEnabled  := .F.
      oBtnEdt:lEnabled  := .F.
      oBtnDel:lEnabled  := .F.

      oBtnTik:lEnabled  := .F.
      oBtnAlb:lEnabled  := .F.
      oBtnFac:lEnabled  := .T.
      oBtnApt:lEnabled  := .F.
      oBtnVal:lEnabled  := .F.
      oBtnDev:lEnabled  := .F.
      oBtnOld:lEnabled  := .F.

      oBtnUp:lEnabled   := .F.
      oBtnDown:lEnabled := .F.

   end

   if aNumDoc <> nil

      do case
         case !Empty( aNumDoc[ 1 ] )

            cPreCli( aTmp, aGet, @aNumDoc[ 1 ], oBrwDet )

            oBtnAdd:lEnabled  := .F.
            oBtnEdt:lEnabled  := .F.
            oBtnDel:lEnabled  := .F.

            oBtnAlb:lEnabled  := .F.
            oBtnFac:lEnabled  := .F.
            oBtnApt:lEnabled  := .F.
            oBtnVal:lEnabled  := .F.
            oBtnDev:lEnabled  := .F.
            oBtnOld:lEnabled  := .F.

            oBtnUp:lEnabled   := .F.
            oBtnDown:lEnabled := .F.

         case !Empty( aNumDoc[ 2 ] )

            cPedCli( aTmp, aGet, @aNumDoc[ 2 ], oBrwDet )

            oBtnAdd:lEnabled  := .F.
            oBtnEdt:lEnabled  := .F.
            oBtnDel:lEnabled  := .F.

            oBtnAlb:lEnabled  := .F.
            oBtnFac:lEnabled  := .F.
            oBtnApt:lEnabled  := .F.
            oBtnVal:lEnabled  := .F.
            oBtnDev:lEnabled  := .F.
            oBtnOld:lEnabled  := .F.

            oBtnUp:lEnabled   := .F.
            oBtnDown:lEnabled := .F.

         case !Empty( aNumDoc[ 3 ] )

            cAlbCli( aTmp, aGet, @aNumDoc[ 3 ], oBrwDet )

            oBtnAdd:lEnabled  := .F.
            oBtnEdt:lEnabled  := .F.
            oBtnDel:lEnabled  := .F.

            oBtnAlb:lEnabled  := .F.
            oBtnFac:lEnabled  := .F.
            oBtnApt:lEnabled  := .F.
            oBtnVal:lEnabled  := .F.
            oBtnDev:lEnabled  := .F.
            oBtnOld:lEnabled  := .F.

            oBtnUp:lEnabled   := .F.
            oBtnDown:lEnabled := .F.

      end

   end





   if !Empty( oBmpVis )
      oBmpVis:Hide()
   end

   if oGetRnt <> nil .AND. oUser():lNotRentabilidad()
      oGetRnt:Hide()
   end

   if oSayGetRnt <> nil .AND. oUser():lNotRentabilidad()
      oSayGetRnt:Hide()
   end





   nTotCos                    := 0
   nTotRnt                    := 0
   nTotPctRnt                 := 0

   lRecTotal( aTmp, .F. )





   if !Empty( oDlgTpv )

      aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Disable() } )

      if IsTrue( lMaximized )
         oDlgTpv:Maximize()
      end

   end

   do case
      case nMode == 1 .AND. lRecogerUsuario() .AND. !Empty( cCodArt )

         if lGetUsuario( aGet[ 8 ], dbfUsr )

            cUsrTik( aGet[ 8 ]:VarGet() )

            aGet[ 11 ]:lValid()

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur, cCodArt )

            aGet[ 11 ]:SetFocus()

         else

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            oDlgTpv:End()

         end

      case nMode == 1 .AND. lRecogerUsuario() .AND. lEntCon()

         if lGetUsuario( aGet[ 8 ], dbfUsr )

            cUsrTik( aGet[ 8 ]:VarGet() )

            aGet[ 11 ]:lValid()

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur, cCodArt )

            aGet[ 11 ]:SetFocus()

         else

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            oDlgTpv:End()

         end

      case nMode == 1 .AND. lRecogerUsuario() .AND. !lEntCon()

         if lGetUsuario( aGet[ 8 ], dbfUsr )

            cUsrTik( aGet[ 8 ]:VarGet() )

            aGet[ 11 ]:lValid()

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            aGet[ 11 ]:SetFocus()

         else

            if !Empty( oDlgTpv )
               aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
            end

            oDlgTpv:End()

         end

      case nMode == 1 .AND. !lRecogerUsuario() .AND. lEntCon()

         aGet[ 11 ]:lValid()

         if !Empty( oDlgTpv )
            aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
         end

         AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur, cCodArt )

         aGet[ 11 ]:SetFocus()

      case nMode == 1 .AND. !lRecogerUsuario() .AND. !Empty( cCodArt )

         aGet[ 11 ]:lValid()

         if !Empty( oDlgTpv )
            aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
         end

         AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur, cCodArt )

         aGet[ 11 ]:SetFocus()

      otherwise

         aGet[ 11 ]:lValid()

         if !Empty( oDlgTpv )
            aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
         end

         lRecTotal( aTmp )

         oBrwDet:SetFocus()

   end

Return ( nil )



Static Function StateButtons( lState )

   IIF( lState == nil, lState := .F., ) ;

   oBtnAdd:lEnabled  := lState
   oBtnEdt:lEnabled  := lState
   oBtnDel:lEnabled  := lState

   oBtnTik:lEnabled  := lState
   oBtnAlb:lEnabled  := lState
   oBtnFac:lEnabled  := lState
   oBtnApt:lEnabled  := lState
   oBtnVal:lEnabled  := lState
   oBtnDev:lEnabled  := lState
   oBtnOld:lEnabled  := lState

   oBtnAdd:Refresh()
   oBtnEdt:Refresh()
   oBtnDel:Refresh()

   oBtnTik:Refresh()
   oBtnAlb:Refresh()
   oBtnFac:Refresh()
   oBtnApt:Refresh()
   oBtnVal:Refresh()
   oBtnDev:Refresh()
   oBtnOld:Refresh()

return ( nil )



Static Function SetButtonEdtRec( nMode, aTmp )

   oBtnAdd:lEnabled  := ( nMode <> 3 )
   oBtnEdt:lEnabled  := ( nMode <> 3 )
   oBtnDel:lEnabled  := ( nMode <> 3 )

   oBtnTik:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "1" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnAlb:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "2" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnFac:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "3" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnApt:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnVal:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnDev:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "4" .OR. aTmp[ 4 ] == "5" ) .AND. ( nMode == 2 ) )
   oBtnOld:lEnabled  := ( nMode == 1 ) .OR. ( ( aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "6" .OR. aTmp[ 4 ] == "6" ) .AND. ( nMode == 2 ) )

Return ( nil )



Static Function cAlbCli( aTmp, aGet, cNumAlb, oBrwLin )

   local nRecCab
   local nRecLin
   local nOrdCab
   local nOrdLin

   nRecCab             := ( dbfAlbCliT )->( Recno() )
   nRecLin             := ( dbfAlbCliL )->( Recno() )
   nOrdCab             := ( dbfAlbCliT )->( OrdSetFocus( "NNUMALB" ) )
   nOrdLin             := ( dbfAlbCliL )->( OrdSetFocus( "NNUMALB" ) )





   if ( dbfAlbCliT )->( dbSeek( cNumAlb ) )

      cOldCodCli     := ( dbfAlbCliT )->cCodCli

      aGet[ 8 ]:cText( ( dbfAlbCliT )->cCodUsr )
      aGet[ 9 ]:cText( ( dbfAlbCliT )->cCodCaj )
      aGet[ 10 ]:cText( ( dbfAlbCliT )->cCodAlm )
      aGet[ 12 ]:cText( ( dbfAlbCliT )->nTarifa )
      aGet[ 11 ]:cText( ( dbfAlbCliT )->cCodCli )
      aGet[ 13 ]:cText( ( dbfAlbCliT )->cNomCli )
      aGet[ 14 ]:cText( ( dbfAlbCliT )->cDirCli )
      aGet[ 62 ]:cText( ( dbfAlbCliT )->cTlfCli )
      aGet[ 15 ]:cText( ( dbfAlbCliT )->cPobCli )
      aGet[ 16 ]:cText( ( dbfAlbCliT )->cPrvCli )
      aGet[ 18 ]:cText( ( dbfAlbCliT )->cPosCli )
      aGet[ 19 ]:cText( ( dbfAlbCliT )->cDniCli )
      aGet[ 21 ]:cText( ( dbfAlbCliT )->cCodPago )
      aGet[ 24 ]:cText( ( dbfAlbCliT )->cDivAlb )
      aGet[ 32 ]:cText( ( dbfAlbCliT )->cCodAge )
      aGet[ 36 ]:cText( ( dbfAlbCliT )->nPctComAge )
      aGet[ 33 ]:cText( ( dbfAlbCliT )->cCodRut )
      aGet[ 34 ]:cText( ( dbfAlbCliT )->cCodTar )
      aGet[ 35 ]:cText( ( dbfAlbCliT )->cCodObr )

      aTmp[ 20 ]  := .T.
      aTmp[ 53 ]  := cNumAlb

      aTmp[ 46 ]  := ( dbfAlbCliT )->cCodDlg
      aTmp[ 47 ]  := ( dbfAlbCliT )->cCodGrp
      aTmp[ 25 ]  := ( dbfAlbCliT )->nVdvAlb

      if ( dbfAlbCliL )->( dbSeek( cNumAlb ) )

         while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == cNumAlb .AND. !( dbfAlbCliL )->( Eof() )

            ( dbfTmpL )->( dbAppend() )

            ( dbfTmpL )->cCbaTil    := ( dbfAlbCliL )->cRef
            ( dbfTmpL )->cNomTil    := ( dbfAlbCliL )->cDetalle
            if ( dbfAlbCliT )->lIvaInc
               ( dbfTmpL )->nPvpTil := ( dbfAlbCliL )->nPreUnit
            else
               ( dbfTmpL )->nPvpTil := ( dbfAlbCliL )->nPreUnit + ( ( ( dbfAlbCliL )->nPreUnit * ( dbfAlbCliL )->nIva ) / 100 )
            end
            ( dbfTmpL )->nUntTil    := ( dbfAlbCliL )->nUniCaja
            ( dbfTmpL )->nUndKit    := ( dbfAlbCliL )->nUndKit
            ( dbfTmpL )->nIvaTil    := ( dbfAlbCliL )->nIva
            ( dbfTmpL )->cFamTil    := ( dbfAlbCliL )->cCodFam
            ( dbfTmpL )->nDtoLin    := ( dbfAlbCliL )->nDto
            ( dbfTmpL )->cCodPr1    := ( dbfAlbCliL )->cCodPr1
            ( dbfTmpL )->cCodPr2    := ( dbfAlbCliL )->cCodPr2
            ( dbfTmpL )->cValPr1    := ( dbfAlbCliL )->cValPr1
            ( dbfTmpL )->cValPr2    := ( dbfAlbCliL )->cValPr2
            ( dbfTmpL )->nFacCnv    := ( dbfAlbCliL )->nFacCnv
            ( dbfTmpL )->nDtoDiv    := ( dbfAlbCliL )->nDtoDiv
            ( dbfTmpL )->nCtlStk    := ( dbfAlbCliL )->nCtlStk
            ( dbfTmpL )->cAlmLin    := ( dbfAlbCliL )->cAlmLin
            ( dbfTmpL )->nValImp    := ( dbfAlbCliL )->nValImp
            ( dbfTmpL )->cCodImp    := ( dbfAlbCliL )->cCodImp
            ( dbfTmpL )->nCosDiv    := ( dbfAlbCliL )->nCosDiv
            ( dbfTmpL )->lKitArt    := ( dbfAlbCliL )->lKitArt
            ( dbfTmpL )->lKitChl    := ( dbfAlbCliL )->lKitChl
            ( dbfTmpL )->lKitPrc    := ( dbfAlbCliL )->lKitPrc
            ( dbfTmpL )->lImpLin    := ( dbfAlbCliL )->lImpLin
            ( dbfTmpL )->lControl   := ( dbfAlbCliL )->lControl
            ( dbfTmpL )->mNumSer    := ( dbfAlbCliL )->mNumSer
            ( dbfTmpL )->cCodFam    := ( dbfAlbCliL )->cCodFam
            ( dbfTmpL )->cGrpFam    := ( dbfAlbCliL )->cGrpFam
            ( dbfTmpL )->nLote      := ( dbfAlbCliL )->nLote
            ( dbfTmpL )->cLote      := ( dbfAlbCliL )->cLote
            ( dbfTmpL )->cCodUsr    := ( dbfAlbCliT )->cCodUsr
            ( dbfTmpL )->nNumLin    := nLastNum( dbfTmpL )

            ( dbfTmpL )->( dbUnLock() )

            ( dbfAlbCliL )->( dbSkip() )

         end

      end

   end





   lRecTotal( aTmp )

   ( dbfTmpL )->( dbGoTop() )

   oBrwLin:Refresh()





   ( dbfAlbCliT )->( OrdSetFocus( nOrdCab ) )
   ( dbfAlbCliL )->( OrdSetFocus( nOrdLin ) )
   ( dbfAlbCliT )->( dbGoTo( nRecCab ) )
   ( dbfAlbCliL )->( dbGoTo( nRecLin ) )

   cNumAlb            := ""
   lStopEntContLine   := .T.

return .T.



static function cPedCli( aTmp, aGet, cNumPed, oBrwLin )

   local nRecCab
   local nRecLin
   local nOrdCab
   local nOrdLin

   nRecCab           := ( dbfPedCliT )->( Recno() )
   nRecLin           := ( dbfPedCliL )->( Recno() )
   nOrdCab           := ( dbfPedCliT )->( OrdSetFocus( "NNUMPED" ) )
   nOrdLin           := ( dbfPedCliL )->( OrdSetFocus( "NNUMPED" ) )





   if ( dbfPedCliT )->( dbSeek( cNumPed ) )

      cOldCodCli     := ( dbfPedCliT )->cCodCli

      aGet[ 8 ]:cText( ( dbfPedCliT )->cCodUsr )
      aGet[ 9 ]:cText( ( dbfPedCliT )->cCodCaj )
      aGet[ 10 ]:cText( ( dbfPedCliT )->cCodAlm )
      aGet[ 12 ]:cText( ( dbfPedCliT )->nTarifa )
      aGet[ 11 ]:cText( ( dbfPedCliT )->cCodCli )
      aGet[ 13 ]:cText( ( dbfPedCliT )->cNomCli )
      aGet[ 14 ]:cText( ( dbfPedCliT )->cDirCli )
      aGet[ 62 ]:cText( ( dbfPedCliT )->cTlfCli )
      aGet[ 15 ]:cText( ( dbfPedCliT )->cPobCli )
      aGet[ 16 ]:cText( ( dbfPedCliT )->cPrvCli )
      aGet[ 18 ]:cText( ( dbfPedCliT )->cPosCli )
      aGet[ 19 ]:cText( ( dbfPedCliT )->cDniCli )
      aGet[ 21 ]:cText( ( dbfPedCliT )->cCodPgo )
      aGet[ 32 ]:cText( ( dbfPedCliT )->cCodAge )
      aGet[ 36 ]:cText( ( dbfPedCliT )->nPctComAge )
      aGet[ 33 ]:cText( ( dbfPedCliT )->cCodRut )
      aGet[ 34 ]:cText( ( dbfPedCliT )->cCodTar )
      aGet[ 35 ]:cText( ( dbfPedCliT )->cCodObr )

      aTmp[ 20 ]  := .T.
      aTmp[ 54 ]  := cNumPed

      aTmp[ 46 ]  := ( dbfPedCliT )->cCodDlg
      aTmp[ 47 ]  := ( dbfPedCliT )->cCodGrp
      aTmp[ 24 ]  := ( dbfPedCliT )->cDivPed
      aTmp[ 25 ]  := ( dbfPedCliT )->nVdvPed

      if ( dbfPedCliL )->( dbSeek( cNumPed ) )

         while ( dbfPedCliL )->cSerPed + Str( ( dbfPedCliL )->nNumPed ) + ( dbfPedCliL )->cSufPed == cNumPed .AND. !( dbfPedCliL )->( Eof() )

            ( dbfTmpL )->( dbAppend() )

            ( dbfTmpL )->cCbaTil    := ( dbfPedCliL )->cRef
            ( dbfTmpL )->cNomTil    := ( dbfPedCliL )->cDetalle
            if ( dbfPedCliT )->lIvaInc
               ( dbfTmpL )->nPvpTil := ( dbfPedCliL )->nPreDiv
            else
               ( dbfTmpL )->nPvpTil := ( dbfPedCliL )->nPreDiv + ( ( ( dbfPedCliL )->nPreDiv * ( dbfPedCliL )->nIva ) / 100 )
            end
            ( dbfTmpL )->nUntTil    := ( dbfPedCliL )->nUniCaja
            ( dbfTmpL )->nUndKit    := ( dbfPedCliL )->nUndKit
            ( dbfTmpL )->nIvaTil    := ( dbfPedCliL )->nIva
            ( dbfTmpL )->cFamTil    := ( dbfPedCliL )->cCodFam
            ( dbfTmpL )->nDtoLin    := ( dbfPedCliL )->nDto
            ( dbfTmpL )->cCodPr1    := ( dbfPedCliL )->cCodPr1
            ( dbfTmpL )->cCodPr2    := ( dbfPedCliL )->cCodPr2
            ( dbfTmpL )->cValPr1    := ( dbfPedCliL )->cValPr1
            ( dbfTmpL )->cValPr2    := ( dbfPedCliL )->cValPr2
            ( dbfTmpL )->nFacCnv    := ( dbfPedCliL )->nFacCnv
            ( dbfTmpL )->nDtoDiv    := ( dbfPedCliL )->nDtoDiv
            ( dbfTmpL )->nCtlStk    := ( dbfPedCliL )->nCtlStk
            ( dbfTmpL )->cAlmLin    := ( dbfPedCliL )->cAlmLin
            ( dbfTmpL )->nValImp    := ( dbfPedCliL )->nValImp
            ( dbfTmpL )->cCodImp    := ( dbfPedCliL )->cCodImp
            ( dbfTmpL )->nCosDiv    := ( dbfPedCliL )->nCosDiv
            ( dbfTmpL )->lKitArt    := ( dbfPedCliL )->lKitArt
            ( dbfTmpL )->lKitChl    := ( dbfPedCliL )->lKitChl
            ( dbfTmpL )->lKitPrc    := ( dbfPedCliL )->lKitPrc
            ( dbfTmpL )->lImpLin    := ( dbfPedCliL )->lImpLin
            ( dbfTmpL )->lControl   := ( dbfPedCliL )->lControl
            ( dbfTmpL )->mNumSer    := ( dbfPedCliL )->mNumSer
            ( dbfTmpL )->cCodFam    := ( dbfPedCliL )->cCodFam
            ( dbfTmpL )->cGrpFam    := ( dbfPedCliL )->cGrpFam
            ( dbfTmpL )->nLote      := ( dbfPedCliL )->nLote
            ( dbfTmpL )->cLote      := ( dbfPedCliL )->cLote
            ( dbfTmpL )->cCodUsr    := ( dbfPedCliT )->cCodUsr
            ( dbfTmpL )->nNumLin    := nLastNum( dbfTmpL )

            ( dbfTmpL )->( dbUnLock() )

            ( dbfPedCliL )->( dbSkip() )

         end

      end





      if ( dbfPedCliP )->( dbSeek( cNumPed ) )

         while ( dbfPedCliP )->cSerPed + Str( ( dbfPedCliP )->nNumPed ) + ( dbfPedCliP )->cSufPed == cNumPed .AND. !( dbfPedCliP )->( Eof() )

            if !( dbfPedCliP )->lPasado

               ( dbfTmpP )->( dbAppend() )

               ( dbfTmpP )->cCodCaj    := ( dbfPedCliP )->cCodCaj
               ( dbfTmpP )->dPgoTik    := ( dbfPedCliP )->dEntrega
               ( dbfTmpP )->nImpTik    := ( dbfPedCliP )->nImporte
               ( dbfTmpP )->cDivPgo    := ( dbfPedCliP )->cDivPgo
               ( dbfTmpP )->nVdvPgo    := ( dbfPedCliP )->nVdvPgo
               ( dbfTmpP )->cFpgPgo    := ( dbfPedCliP )->cCodPgo
               ( dbfTmpP )->cTurPgo    := ( dbfPedCliP )->cTurRec

               ( dbfTmpP )->( dbUnLock() )

            end

            ( dbfPedCliP )->( dbSkip() )

         end

      end

   end





   lRecTotal( aTmp )

   ( dbfTmpL )->( dbGoTop() )

   oBrwLin:Refresh()





   ( dbfPedCliT )->( OrdSetFocus( nOrdCab ) )
   ( dbfPedCliL )->( OrdSetFocus( nOrdLin ) )
   ( dbfPedCliT )->( dbGoTo( nRecCab ) )
   ( dbfPedCliL )->( dbGoTo( nRecLin ) )

   cNumPed            := ""
   lStopEntContLine   := .T.

return .T.



static function cPreCli( aTmp, aGet, cNumPre, oBrwLin )

   local nRecCab
   local nRecLin
   local nOrdCab
   local nOrdLin

   nRecCab           := ( dbfPreCliT )->( Recno() )
   nRecLin           := ( dbfPreCliL )->( Recno() )
   nOrdCab           := ( dbfPreCliT )->( OrdSetFocus( "NNUMPRE" ) )
   nOrdLin           := ( dbfPreCliL )->( OrdSetFocus( "NNUMPRE" ) )





   if ( dbfPreCliT )->( dbSeek( cNumPre ) )

      cOldCodCli        := ( dbfPreCliT )->cCodCli

      aGet[ 8 ]:cText( ( dbfPreCliT )->cCodUsr )
      aGet[ 9 ]:cText( ( dbfPreCliT )->cCodCaj )
      aGet[ 10 ]:cText( ( dbfPreCliT )->cCodAlm )
      aGet[ 12 ]:cText( ( dbfPreCliT )->nTarifa )
      aGet[ 11 ]:cText( ( dbfPreCliT )->cCodCli )
      aGet[ 13 ]:cText( ( dbfPreCliT )->cNomCli )
      aGet[ 14 ]:cText( ( dbfPreCliT )->cDirCli )
      aGet[ 15 ]:cText( ( dbfPreCliT )->cPobCli )
      aGet[ 62 ]:cText( ( dbfPreCliT )->cTlfCli )
      aGet[ 16 ]:cText( ( dbfPreCliT )->cPrvCli )
      aGet[ 18 ]:cText( ( dbfPreCliT )->cPosCli )
      aGet[ 19 ]:cText( ( dbfPreCliT )->cDniCli )
      aGet[ 21 ]:cText( ( dbfPreCliT )->cCodPgo )
      aGet[ 24 ]:cText( ( dbfPreCliT )->cDivPre )
      if !Empty ( aGet[ 25 ] )
         aGet[ 25 ]:cText( ( dbfPreCliT )->nVdvPre )
      end
      aGet[ 32 ]:cText( ( dbfPreCliT )->cCodAge )
      aGet[ 36 ]:cText( ( dbfPreCliT )->nPctComAge )
      aGet[ 33 ]:cText( ( dbfPreCliT )->cCodRut )
      aGet[ 34 ]:cText( ( dbfPreCliT )->cCodTar )
      aGet[ 35 ]:cText( ( dbfPreCliT )->cCodObr )
      aTmp[ 20 ]  := .T.
      aTmp[ 55 ]  := cNumPre
      aTmp[ 46 ]  := ( dbfPreCliT )->cCodDlg
      aTmp[ 47 ]  := ( dbfPreCliT )->cCodGrp

      if ( dbfPreCliL )->( dbSeek( cNumPre ) )

         while ( dbfPreCliL )->cSerPre + Str( ( dbfPreCliL )->nNumPre ) + ( dbfPreCliL )->cSufPre == cNumPre .AND. !( dbfPreCliL )->( Eof() )

            ( dbfTmpL )->( dbAppend() )

            ( dbfTmpL )->cCbaTil    := ( dbfPreCliL )->cRef
            ( dbfTmpL )->cNomTil    := ( dbfPreCliL )->cDetalle
            if ( dbfAlbCliT )->lIvaInc
               ( dbfTmpL )->nPvpTil := ( dbfPreCliL )->nPreDiv
            else
               ( dbfTmpL )->nPvpTil := ( dbfPreCliL )->nPreDiv + ( ( ( dbfPreCliL )->nPreDiv * ( dbfPreCliL )->nIva ) / 100 )
            end
            ( dbfTmpL )->nUntTil    := ( dbfPreCliL )->nUniCaja
            ( dbfTmpL )->nUndKit    := ( dbfPreCliL )->nUndKit
            ( dbfTmpL )->nIvaTil    := ( dbfPreCliL )->nIva
            ( dbfTmpL )->cFamTil    := ( dbfPreCliL )->cCodFam
            ( dbfTmpL )->nDtoLin    := ( dbfPreCliL )->nDto
            ( dbfTmpL )->cCodPr1    := ( dbfPreCliL )->cCodPr1
            ( dbfTmpL )->cCodPr2    := ( dbfPreCliL )->cCodPr2
            ( dbfTmpL )->cValPr1    := ( dbfPreCliL )->cValPr1
            ( dbfTmpL )->cValPr2    := ( dbfPreCliL )->cValPr2
            ( dbfTmpL )->nFacCnv    := ( dbfPreCliL )->nFacCnv
            ( dbfTmpL )->nDtoDiv    := ( dbfPreCliL )->nDtoDiv
            ( dbfTmpL )->nCtlStk    := ( dbfPreCliL )->nCtlStk
            ( dbfTmpL )->cAlmLin    := ( dbfPreCliL )->cAlmLin
            ( dbfTmpL )->nValImp    := ( dbfPreCliL )->nValImp
            ( dbfTmpL )->cCodImp    := ( dbfPreCliL )->cCodImp
            ( dbfTmpL )->nCosDiv    := ( dbfPreCliL )->nCosDiv
            ( dbfTmpL )->lKitArt    := ( dbfPreCliL )->lKitArt
            ( dbfTmpL )->lKitChl    := ( dbfPreCliL )->lKitChl
            ( dbfTmpL )->lKitPrc    := ( dbfPreCliL )->lKitPrc
            ( dbfTmpL )->lImpLin    := ( dbfPreCliL )->lImpLin
            ( dbfTmpL )->lControl   := ( dbfPreCliL )->lControl
            ( dbfTmpL )->mNumSer    := ( dbfPreCliL )->mNumSer
            ( dbfTmpL )->cCodFam    := ( dbfPreCliL )->cCodFam
            ( dbfTmpL )->cGrpFam    := ( dbfPreCliL )->cGrpFam
            ( dbfTmpL )->nLote      := ( dbfPreCliL )->nLote
            ( dbfTmpL )->cLote      := ( dbfPreCliL )->cLote
            ( dbfTmpL )->cCodUsr    := ( dbfPreCliT )->cCodUsr
            ( dbfTmpL )->nNumLin    := nLastNum( dbfTmpL )

            ( dbfTmpL )->( dbUnLock() )

            ( dbfPreCliL )->( dbSkip() )

         end

      end

   end





   lRecTotal( aTmp )

   ( dbfTmpL )->( dbGoTop() )

   oBrwLin:Refresh()





   ( dbfPreCliT )->( OrdSetFocus( nOrdCab ) )
   ( dbfPreCliL )->( OrdSetFocus( nOrdLin ) )
   ( dbfPreCliT )->( dbGoTo( nRecCab ) )
   ( dbfPreCliL )->( dbGoTo( nRecLin ) )

   cNumPre            := ""
   lStopEntContLine   := .T.

return .T.







Static Function NewTiket( aGet, aTmp, nMode, nSave, lBig, oBrw, oBrwDet )

   local nRec
   local nOrd
   local aTbl
   local nTotTik
   local cAlmTik
   local cTipTik
   local oError
   local oBlock
   local nOrdAlb
   local cNumDoc           := ""
   local nNumTik           := ""
   local cAlbTik           := aTmp[ 53 ]
   local cPedTik           := aTmp[ 54 ]
   local cPreTik           := aTmp[ 55 ]
   local nValeDiferencia   := 0
   local nValePromocion    := 0
   local lValePromocion    := .F.
   local lValeDiferencia   := .F.

   IIF( nSave == nil, nSave := "1", ) ;
   IIF( lBig == nil, lBig := .F., ) ;

   if lSaveNewTik
      Return .T.
   else
      lSaveNewTik          := .T.
   end





   if !lValidaOperacion( aTmp[ 6 ] )
      lSaveNewTik          := .F.
      Return .F.
   end





   if ( nSave == "8" )
      aTmp[ 63 ]     := .T.
      nSave                := "6"
   else
      aTmp[ 63 ]     := .F.
   end





   if !Empty( oDlgDet )
      oDlgDet:nResult      := 2
   end





   if ( dbfTmpL )->( OrdKeyCount() ) == 0
      MsgStop( "No puede almacenar un documento sin lineas." )
      lSaveNewTik          := .F.
      return .F.
   end

   if !Empty( aGet[ 11 ] ) .AND. !( aGet[ 11 ]:lValid() )
      aGet[ 11 ]:SetFocus()
      lSaveNewTik          := .F.
      return .F.
   end

   if !Empty( aGet[ 10 ] )

      if Empty( aTmp[ 10 ] )
         aGet[ 10 ]:SetFocus()
         MsgInfo( "Almacén no puede estar vacio" )
         lSaveNewTik       := .F.
         return .F.
      end

      if !( aGet[ 10 ]:lValid() )
         aGet[ 10 ]:SetFocus()
         lSaveNewTik       := .F.
         return .F.
      end

   end

   if !Empty( aGet[ 8 ] ) .AND. Empty( aTmp[ 8 ] )
      aGet[ 8 ]:cText( cCurUsr() )
   end

   if lRecogerAgentes() .AND. !Empty( aGet[ 32 ] ) .AND.  Empty( aTmp[ 32 ] )
      msgStop( "Agente no puede estar vacio." )
      aGet[ 32 ]:SetFocus()
      lSaveNewTik         := .F.
      return .F.
   end

   if lRecogerAgentes() .AND. !Empty( aGet[ 32 ] ) .AND. !( aGet[ 32 ]:lValid() )
      aGet[ 32 ]:SetFocus()
      lSaveNewTik         := .F.
      return .F.
   end





   do case
   case nSave == "3"





      if !Empty( aGet[ 13 ] ) .AND. Empty( aTmp[ 13 ] ) .AND. !( "GA" $ oWnd():Cargo )
         msgStop( "Nombre de cliente no puede estar vacio." )
         aGet[ 11 ]:SetFocus()
         lSaveNewTik         := .F.
         return .F.
      end

      if Empty( aTmp[ 14 ] ) .AND. !( "GA" $ oWnd():Cargo )
         msgStop( "Domicilio de cliente no puede estar vacio." )
         lSaveNewTik         := .F.
         return .F.
      end

      if Empty( aTmp[ 19 ] ) .AND. !( "GA" $ oWnd():Cargo )
         msgStop( "D.N.I. / C.I.F. de cliente no puede estar vacio." )
         lSaveNewTik         := .F.
         return .F.
      end

      if !lBig

         if Empty( aTmp[ 21 ] )
            MsgStop( "Debe de introducir una forma de pago", "Imposible archivar como factura" )
            aGet[ 21 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if !( aGet[ 21 ]:lValid() )
            aGet[ 21 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if lObras() .AND. !Empty( aGet[ 35 ] ) .AND. Empty( aTmp[ 35 ] )
            MsgStop( "Debe de introducir una obra", "Imposible archivar como factura" )
            aGet[ 35 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if lObras() .AND. !Empty( aGet[ 35 ] ) .AND. !( aGet[ 35 ]:lValid() )
            aGet[ 35 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

      end

   case nSave == "2"

      if Empty( aTmp[ 11 ] )
         msgStop( "Código de cliente no puede estar vacio." )
         aGet[ 11 ]:SetFocus()
         lSaveNewTik         := .F.
         return .F.
      end

      if !Empty( aGet[ 11 ] ) .AND. lCliBlq( aTmp[ 11 ], dbfClient )
         msgStop( "Cliente bloqueado, no se pueden realizar operaciones de venta" , "Imposible archivar como albarán" )
         aGet[ 11 ]:SetFocus()
         lSaveNewTik         := .F.
         return .F.
      end

      if !Empty( aGet[ 11 ] ) .AND. !lCliChg( aTmp[ 11 ], dbfClient )
         msgStop( "Este cliente no tiene autorización para venta a credito.", "Imposible archivar como albarán" )
         aGet[ 11 ]:SetFocus()
         lSaveNewTik         := .F.
         return .F.
      end

      if !lBig

         if !Empty( aGet[ 21 ] ) .AND. Empty( aTmp[ 21 ] )
            MsgStop( "Debe de introducir una forma de pago", "Imposible archivar como albarán" )
            aGet[ 21 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if !Empty( aGet[ 21 ] ) .AND. !( aGet[ 21 ]:lValid() )
            aGet[ 21 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if lObras() .AND. !Empty( aGet[ 35 ] ) .AND. Empty( aTmp[ 35 ] )
            MsgStop( "Debe de introducir una obra", "Imposible archivar como albarán" )
            aGet[ 35 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

         if lObras() .AND. !Empty( aGet[ 35 ] ) .AND. !( aGet[ 35 ]:lValid() )
            aGet[ 35 ]:SetFocus()
            lSaveNewTik         := .F.
            return .F.
         end

      end

   end





   if ( nSave <> "4" ) .AND. ( nSave <> "6" ) .AND. ( lFidelity( aGet, aTmp, nMode ) )
      lSaveNewTik       := .F.
      return .F.
   end





   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end





   if Empty( aTmp[ 5 ] )
      aTmp[ 5 ]  := cCurSesion()
   end





   if Empty( aTmp[ 8 ] )
      aTmp[ 8 ]  := cCurUsr()
   end





   if Empty( aTmp[ 9 ] )
      aTmp[ 9 ]  := oUser():cCaja()
   end





   if Empty( aTmp[ 12 ] )
      aTmp[ 12 ]  := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end





   oTotDiv              := TotalesTPV():Init()

   nTotTik              := nTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )

   aTmp[ 23 ]     := 0
   aTmp[ 22 ]     := nTotTik





   aTmp[ 60 ]     := oFideliza:nPorcentajePrograma( nTotPrm )





   lValePromocion       := ( !Retfld( aTmp[ 11 ], dbfClient, "lExcFid" ) .AND. ( aTmp[ 60 ] <> 0 ) )
   if lValePromocion
      nValePromocion    := nTotPrm * aTmp[ 60 ] / 100
   end





   if lExacto( aTmp ) .OR. lCobro( @aTmp, aGet, @nSave, nMode, @lValeDiferencia, @nValeDiferencia, lBig, oDlgTpv )





      if ( dbfTmpL )->( OrdKeyCount() ) == 0
         MsgStop( "No puede almacenar un documento sin lineas." )
         lSaveNewTik         := .F.
         return .F.
      end





      CursorWait()

      oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         oDlgTpv:Disable()





         aTmp[ 4 ]     := nSave
         aTmp[ 40 ]     := Date()
         aTmp[ 41 ]     := SubStr( Time(), 1, 5 )
         aTmp[ 50]     := .F.





         do case
         case nMode == 1





            if !Empty( oMetMsg )
               oMetMsg:cText     := "Obtenemos el nuevo número"
               oMetMsg:Refresh()
            end

            aTmp[ 2 ]  := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
            aTmp[ 3 ]  := RetSufEmp()
            nNumTik           := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]





            aTmp[ 7 ]  := Substr( Time(), 1, 5 )
            aTmp[ 26 ]  := .F.

         case nMode == 2

            nNumTik           := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
            cNumDoc           := aTmp[ 31 ]





            if !Empty( oMetMsg )
               oMetMsg:cText     := "Eliminando lineas"
               oMetMsg:Refresh()
            end

            while ( dbfTikL )->( dbSeek( nNumTik ) )
               if dbLock( dbfTikL )
                  ( dbfTikL )->( dbDelete() )
                  ( dbfTikL )->( dbUnLock() )
               end
            end





            if !Empty( oMetMsg )
               oMetMsg:cText     := "Eliminando pagos"
               oMetMsg:Refresh()
            end

            while ( dbfTikP )->( dbSeek( nNumTik ) )

               if dbLock( dbfTikP )
                  ( dbfTikP )->( dbDelete() )
                  ( dbfTikP )->( dbUnLock() )
               end

            end





            if !Empty( oMetMsg )
               oMetMsg:cText     := "Eliminando vales"
               oMetMsg:Refresh()
            end

            nOrd  := ( dbfTikT )->( OrdSetFocus( "cDocVal" ) )
            nRec  := ( dbfTikT )->( Recno() )

            while ( dbfTikT )->( dbSeek( nNumTik ) ) .AND. !( dbfTikT )->( eof() )
               if dbLock( dbfTikT )
                  ( dbfTikT )->lLiqTik       := .F.
                  ( dbfTikT )->lSndDoc       := .T.
                  ( dbfTikT )->cValDoc       := ""
                  ( dbfTikT )->cTurVal       := ""
                  ( dbfTikT )->( dbUnLock() )
               end
            end

            ( dbfTikT )->( OrdSetFocus( nOrd ) )
            ( dbfTikT )->( dbGoTo( nRec ) )





            if !Empty( oMetMsg )
               oMetMsg:cText     := "Eliminando anticipos"
               oMetMsg:Refresh()
            end

            if !Empty( cNumDoc )

            nRec  := ( dbfAntCliT )->( Recno() )
            nOrd  := ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )

            while ( dbfAntCliT )->( dbSeek( cNumDoc ) ) .AND. !( dbfAntCliT )->( eof() )
               if dbLock( dbfAntCliT )
                  ( dbfAntCliT )->lLiquidada := .F.
                  ( dbfAntCliT )->dLiquidada := Ctod( "" )
                  ( dbfAntCliT )->cTurLiq    := ""
                  ( dbfAntCliT )->cCajLiq    := ""
                  ( dbfAntCliT )->cNumDoc    := ""
                  ( dbfAntCliT )->( dbUnLock() )
               end
            end

            ( dbfAntCliT )->( OrdSetFocus( nOrd ) )
            ( dbfAntCliT )->( dbGoTo( nRec ) )

            end

         end





         if !Empty( oMetMsg )
            oMetMsg:cText        := "Anotando los pagos"
            oMetMsg:Refresh()
         end

         if ( oTotDiv:lValeMayorTotal() )

            if ( aTmp[ 22 ] <> 0 )

               if dbAppe( dbfTmpP )
                  ( dbfTmpP )->cTurPgo    := cCurSesion()
                  ( dbfTmpP )->dPgoTik    := GetSysDate()
                  ( dbfTmpP )->cTimTik    := SubStr( Time(), 1, 5 )
                  ( dbfTmpP )->cCodCaj    := oUser():cCaja()
                  ( dbfTmpP )->cFpgPgo    := aTmp[ 21 ]
                  ( dbfTmpP )->cSerTik    := aTmp[ 1 ]
                  ( dbfTmpP )->cNumTik    := if( ValType( aTmp[ 2 ] ) <> "C", Str( aTmp[ 2 ], 10 ), aTmp[ 2 ] )
                  ( dbfTmpP )->cSufTik    := aTmp[ 3 ]
                  ( dbfTmpP )->nImpTik    := aTmp[ 22 ]
                  ( dbfTmpP )->cDivPgo    := aTmp[ 24 ]
                  ( dbfTmpP )->nVdvPgo    := aTmp[ 25 ]
                  ( dbfTmpP )->nDevTik    := Max( aTmp[ 23 ], 0 )
               else
                  MsgStop( "No se ha podido añadir el registro de pago" )
               end

            end

         end





         nCambioTik           := aTmp[ 23 ]





         if !Empty( aTmp[ 53 ] )

            if !Empty( oMetMsg )
               oMetMsg:cText     := "Estado albarán"
               oMetMsg:Refresh()
            end

            if dbSeekInOrd( aTmp[ 53 ], "nNumAlb", dbfAlbCliT )

               if dbLock( dbfAlbCliT )
                  ( dbfAlbCliT )->lFacturado    := .T.
                  ( dbfAlbCliT )->cNumTik       := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
                  ( dbfAlbCliT )->( dbUnLock() )
               end

            end

            nOrdAlb           := ( dbfAlbCliL )->( OrdSetFocus( "nNumAlb" ) )

            if ( dbfAlbCliL )->( dbSeek( aTmp[ 53 ] ) )

               while ( dbfAlbCliL )->cSerAlb + Str( ( dbfAlbCliL )->nNumAlb ) + ( dbfAlbCliL )->cSufAlb == aTmp[ 53 ] .AND. !( dbfAlbCliL )->( Eof() )

                  if dbLock( dbfAlbCliL )
                     ( dbfAlbCliL )->lFacturado := .T.
                     ( dbfAlbCliL )->( dbUnLock() )
                  end

                  ( dbfAlbCliL )->( dbSkip() )

               end

            end

            ( dbfAlbCliL )->( OrdSetFocus( nOrdAlb ) )

         end





         if !Empty( aTmp[ 54 ] )

            if !Empty( oMetMsg )
               oMetMsg:cText     := "Estado pedido"
               oMetMsg:Refresh()
            end

            if dbSeekInOrd( aTmp[ 54 ], "nNumPed", dbfPedCliT )

               if dbLock( dbfPedCliT )
                  ( dbfPedCliT )->nEstado       := 3
                  ( dbfPedCliT )->cNumTik       := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
                  ( dbfPedCliT )->( dbUnLock() )
               end

            end

         end





         if !Empty( aTmp[ 55 ] )

            if !Empty( oMetMsg )
               oMetMsg:cText     := "Estado presupuesto"
               oMetMsg:Refresh()
            end

            if dbSeekInOrd( aTmp[ 55 ], "nNumPre", dbfPreCliT )

               if dbLock( dbfPreCliT )
                  ( dbfPreCliT )->lEstado       := .T.
                  ( dbfPreCliT )->cNumTik       := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
                  ( dbfPreCliT )->( dbUnLock() )
               end

            end

         end





         do case
            case nMode == 4

               SavTik2Neg( aTmp, aGet, nMode, nSave )
               SavTik2Fac( aTmp, aGet, nMode, nSave, nTotTik )

            case nSave == "2"

               SavTik2Alb( aTmp, aGet, nMode, nSave )

            case nSave == "3"

               SavTik2Fac( aTmp, aGet, nMode, nSave, nTotTik )

            otherwise

               SavTik2Tik( aTmp, aGet, nMode, nSave )

         end





         if !Empty( oMetMsg )
            oMetMsg:cText              := "Actualizando stocks"
            oMetMsg:Refresh()
         end







         if !Empty( oMetMsg )
            oMetMsg:cText              := "Archivando vales"
            oMetMsg:Refresh()
         end

         nRec                          := ( dbfTikT )->( Recno() )

         ( dbfTmpV )->( dbGoTop() )
         while !( dbfTmpV )->( eof() )
            if ( dbfTikT )->( dbSeek( ( dbfTmpV )->cSerTik + ( dbfTmpV )->cNumTik + ( dbfTmpV )->cSufTik ) )
               if dbLock( dbfTikT )
                  ( dbfTikT )->lLiqTik := .T.
                  ( dbfTikT )->lSndDoc := .T.
                  ( dbfTikT )->cValDoc := nNumTik
                  ( dbfTikT )->cTurVal := cCurSesion()
                  ( dbfTikT )->( dbUnLock() )
               end
            end
            ( dbfTmpV )->( dbSkip() )
         end

         ( dbfTikT )->( dbGoTo( nRec ) )





         if !Empty( oMetMsg )
            oMetMsg:cText                    := "Archivando anticipos"
            oMetMsg:Refresh()
         end

         ( dbfTmpA )->( dbGoTop() )
         while !( dbfTmpA )->( eof() )
            if ( dbfAntCliT )->( dbSeek( ( dbfTmpA )->cSerAnt + Str( ( dbfTmpA )->nNumAnt ) + ( dbfTmpA )->cSufAnt ) )
               if dbLock( dbfAntCliT )
                  ( dbfAntCliT )->cNumDoc    := ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac, 9 ) + ( dbfFacCliT )->cSufFac
                  ( dbfAntCliT )->lLiquidada := .T.
                  ( dbfAntCliT )->dLiquidada := GetSysDate()
                  ( dbfAntCliT )->cTurLiq    := cCurSesion()
                  ( dbfAntCliT )->cCajLiq    := oUser():cCaja()
                  ( dbfAntCliT )->( dbUnLock() )
               end
            end
            ( dbfTmpA )->( dbSkip() )
         end





         dbCommitAll()





         if ( dbfTikT )->cTipTik == "3"

            if dbLock( dbfFacCliT )
               ( dbfFacCliT )->lSndDoc       := .T.
               ( dbfFacCliT )->( dbUnLock() )
            end





            GenPgoFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfClient, dbfFPago, dbfDiv, dbfIva, 2 )





            ChkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )

         end





         if !Empty( oMetMsg )
            oMetMsg:cText        := "Abriendo la caja"
            oMetMsg:Refresh()
         end

         if ( dbfTikT )->cTipTik <> "2"
            oUser():OpenCajon()
         end





         if lCopTik
            ImpTiket( .F. )
         end





         if lBig
            ImpresionComanda( nNumTik )
         end





         if lValeDiferencia

            if ( nSave <> "6" ) .OR. ( nSave <> "4"  )

               if !Empty( oMetMsg )
                  oMetMsg:cText     := "Generando vales"
                  oMetMsg:Refresh()
               end





               aTmp              := dbScatter( dbfTikT )

               aTmp[ 6 ]  := dFecMaxVale( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT  )
               aTmp[ 2 ]  := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
               aTmp[ 3 ]  := RetSufEmp()
               aTmp[ 7 ]  := Substr( Time(), 1, 5 )
               aTmp[ 40 ]  := Date()
               aTmp[ 41 ]  := SubStr( Time(), 1, 5 )
               aTmp[ 4 ]  := "6"
               aTmp[ 26 ]  := .F.
               aTmp[ 64 ]  := nValeDiferencia
               aTmp[ 65 ]  := 0
               aTmp[ 66 ]  := nValeDiferencia

               dbGather( aTmp, dbfTikT, .T. )





               aTbl              := dbBlankRec( dbfTmpL )

               aTbl[ 1 ]  := aTmp[ 1 ]
               aTbl[ 2 ]  := aTmp[ 2 ]
               aTbl[ 3 ]  := aTmp[ 3 ]
               aTbl[ 6 ]  := "Vale por diferencias"
               aTbl[ 8 ]  := 1
               aTbl[ 31 ]  := 1
               aTbl[ 7 ]  := nValeDiferencia

               dbGather( aTbl, dbfTikL, .T. )

               if lCopTik
                  ImpTiket( .F. )
               end

            end

         end





         if ( lValePromocion ) .AND. ( nValePromocion > 0 ) .AND. ( nMode == 1 ) .AND. ( nSave <> "6" )

            if !Empty( oMetMsg )
               oMetMsg:cText     := "Generando vales"
               oMetMsg:Refresh()
            end





            aTmp                 := dbScatter( dbfTikT )

            aTmp[ 2 ]     := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
            aTmp[ 3 ]     := RetSufEmp()
            aTmp[ 7 ]     := Substr( Time(), 1, 5 )
            aTmp[ 40 ]     := Date()
            aTmp[ 41 ]     := SubStr( Time(), 1, 5 )
            aTmp[ 4 ]     := "6"
            aTmp[ 61 ]     := nNumTik
            aTmp[ 26 ]     := .F.

            if ( nSave == "4" )
               aTmp[ 64 ]  := - nValePromocion
               aTmp[ 66 ]  := - nValePromocion
            else
               aTmp[ 64 ]  := nValePromocion
               aTmp[ 66 ]  := nValePromocion
            endif

            dbGather( aTmp, dbfTikT, .T. )





            aTbl                 := dbBlankRec( dbfTmpL )

            aTbl[ 1 ]     := aTmp[ 1 ]
            aTbl[ 2 ]     := aTmp[ 2 ]
            aTbl[ 3 ]     := aTmp[ 3 ]
            aTbl[ 4 ]     := "6"
            aTbl[ 8 ]     := 1
            aTbl[ 31 ]     := 1
            aTbl[ 6 ]     := "Vale por promoción"

            if ( nSave == "4" )
               aTbl[ 7 ]  := - nValePromocion
            else
               aTbl[ 7 ]  := nValePromocion
            endif

            dbGather( aTbl, dbfTikL, .T. )

            if lCopTik
               ImpTiket( .F. )
            end

         end





         nSaveMode                  := 1





         oDlgTpv:Enable()
         oDlgTpv:AEvalWhen()





      RECOVER USING oError

         msgStop( "Error en la grabación del ticket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      CursorWE()





      if ( lBig ) .OR. ( lEntCon() .AND. ( nMode == 1 ) .AND. ( Empty( cAlbTik ) .AND. Empty( cPedTik ) .AND. Empty( cPreTik ) ) )

         if !Empty( oMetMsg )
            oMetMsg:cText  := "Inicializado entorno"
            oMetMsg:Refresh()
         end

         if BeginTrans( aTmp, aGet, nMode, .T. )
            lSaveNewTik    := .F.
            Return nil
         end





         if !Empty( aGet[ 11 ] )
            aGet[ 11 ]:lValid()
         end





         if Empty( aTmp[ 12 ] )
            aTmp[ 12 ]  := Max( uFieldEmpresa( "nPreVta" ), 1 )
         end

         if Empty( aTmp[ 12 ] ) .AND. !Empty( RetFld( cDefCli(), dbfClient, "nTarifa" ) )
            aTmp[ 12 ]  := RetFld( cDefCli(), dbfClient, "nTarifa" )
         end





         if !Empty( oBtnIni )
            oBtnIni:Click()
         end





         if oTxtTot <> nil
            oTxtTot:SetText( "Cambio" )
         end

         if ( oNumTot <> nil .AND. cPorDiv <> nil )
            oNumTot:SetText( Trans( nCambioTik, cPorDiv ) )
         end





         if lBig
            StartEdtBig( aTmp, aGet, oDlgTpv, oBrwDet, nMode, .T. )
         else
            StartEdtRec( aTmp, aGet, nMode, oDlgTpv, oBrw, oBrwDet )
         end

      else

         oDlgTpv:bValid    := {|| .T. }

         lSaveNewTik       := .F.

         oDlgTpv:end( 1 )

      end

      lStopEntCont         := !( Empty( cAlbTik ) .AND. Empty( cPedTik ) .AND. Empty( cPreTik ) )





      if oVisor <> nil
         oVisor:SetBufferLine( { "Total: ",  Trans( nTotTik, cPorDiv ) },     1 )
         oVisor:SetBufferLine( { "Cambio: ", Trans( nCambioTik, cPorDiv ) },  2 )
         oVisor:WriteBufferLine()
      end

   end

   if lSaveNewTik
      lSaveNewTik          := .F.
   end

Return Nil



Function ImpresionComanda( nNumTik, dbfImp, lCopia )

   local nPos
   local aImp              := {}
   local cWav              := ""
   local aLinTik
   local nOrdTikL
   local nRecTikL
   local cPrinter          := ""
   local cFormato          := ""
   local nImpresora        := 0
   local lCreateTemporal   := .F.

   IIF( lCopia == nil, lCopia := .F., ) ;

   CursorWait()





   if dbSeekInOrd( nNumTik, "cNumTik" , dbfTikT )

      if AllTrim( ( dbfTikT )->cPntVenta ) == "General" .AND. Empty( ( dbfTikT )->cAliasTik )
         Return .T.
      end

   else

      Return .T.

   end





   if Empty( dbfTmpC )

      cNewFilC             := cGetNewFileName( cPatTmp() + "TikC" )

      dbCreate( cNewFilC, aSqlStruct( aColTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilC, cCheckArea( "TikC", @dbfTmpC ), .F. )
      if !NetErr()
         ( dbfTmpC )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpC )->( OrdCreate( cNewFilC, "CNUMTIL", "CSERTIL + CNUMTIL + CSUFTIL", {|| Field->cSerTil + Field->cNumTil + Field->cSufTil } ) )
      end

      lCreateTemporal      := .T.

   else

      ( dbfTmpC )->( __dbZap() )

   end





   nRecTikL                := ( dbfTikL )->( Recno() )

   if dbSeekInOrd( nNumTik, "cNumTil", dbfTikL )

      while ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == nNumTik .AND. !( dbfTikL )->( Eof() )

         if lCopia .OR. ( ( dbfTikL )->nImpCom < nTotNTpv( dbfTikL ) )





            if !Empty( ( dbfTikL )->cImpCom1 ) .AND. AllTrim( ( dbfTikL )->cImpCom1 ) <> "No imprimir"

               if aScan( aImp, ( dbfTikL )->cImpCom1 ) == 0
                  aAdd( aImp, ( dbfTikL )->cImpCom1 )
               end

            end





            if !Empty( ( dbfTikL )->cImpCom2 ) .AND. AllTrim( ( dbfTikL )->cImpCom2 ) <> "No imprimir"

               if aScan( aImp, ( dbfTikL )->cImpCom2 ) == 0
                  aAdd( aImp, ( dbfTikL )->cImpCom2 )
               end

            end





            aLinTik                                               := dbScatter( dbfTikL )

            if !lCopia
               aLinTik[ ( dbfTikL )->( FieldPos( "nUntTil" ) ) ]  := ( nTotNTpv( dbfTikL ) - ( dbfTikL )->nImpCom )
            end

            dbGather( aLinTik, dbfTmpC, .T. )

         end





         ( dbfTikL )->( dbSkip() )

      end

   end

   nOrdTikL          := ( dbfTikL )->( ordSetFocus( "nOrTImp" ) )





   for nPos := 1 to len( aImp )





      ( dbfTmpC )->( dbSetFilter( {|| Field->cImpCom1 == aImp[ nPos ] .OR. Field->cImpCom2 == aImp[ nPos ] }, "Field->cImpCom1 == aImp[ nPos ] .or. Field->cImpCom2 == aImp[ nPos ]" ) )





      if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )

         cPrinter    := cNombreImpresoraComanda( oUser():cCaja(), aImp[ nPos ], dbfCajL )
         cFormato    := cFormatoComandaEnCaja( oUser():cCaja(), aImp[ nPos ], dbfCajT, dbfCajL )

         if !Empty( cPrinter )
            GenTikCli( 1, "Imprimiendo comanda", cFormato, AllTrim( cPrinter ), .T., .F., aImp[ nPos ] )
         end

      end





      ( dbfTmpC )->( dbClearFilter() )





      cWav           := AllTrim( cWavImpresoraComanda( oUser():cCaja(), aImp[ nPos ], dbfCajL ) )

      if !Empty( cWav ) .AND. File( cWav )
         SndPlaySound( cWav )
      end

   next

   ( dbfTikL )->( ordSetFocus( nOrdTikL ) )





   if dbSeekInOrd( nNumTik, "cNumTil", dbfTikL )

      while ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == nNumTik .AND. !( dbfTikL )->( Eof() )

         if dbLock( dbfTikL )
            ( dbfTikL )->lImpCom    := .T.
            ( dbfTikL )->nImpCom    := nTotNTpv( dbfTikL )
            ( dbfTikL )->( dbUnLock() )
         end

         ( dbfTikL )->( dbSkip() )

      end

   end

   ( dbfTikL )->( dbGoTo( nRecTikL ) )





   if !Empty( dbfImp )

      if dbSeekInOrd( nNumTik, "cNumTil", dbfImp )

         while ( dbfImp )->cSerTik + ( dbfImp )->cNumTik + ( dbfImp )->cSufTik == nNumTik .AND. ( dbfImp )->lComanda .AND. !( dbfImp )->( Eof() )

            if dbLock( dbfImp )
               ( dbfImp )->lImp        := .T.
               ( dbfImp )->dFTikImp    := GetSysDate()
               ( dbfImp )->cHTikImp    := Substr( Time(), 1, 5 )
               ( dbfImp )->( dbUnLock() )
            end

            ( dbfImp )->( dbSkip() )

         end

      end

   end





   if lCreateTemporal

      if !Empty( dbfTmpC ) .AND. ( dbfTmpC )->( Used() )
         ( dbfTmpC )->( dbCloseArea() )
      end

      dbfErase( cNewFilC )

      dbfTmpC  := nil

   end

   CursorWE()

return ( .T. )



FUNCTION nTotUTpv( uTmpL, nDec, nVdv, nPrc )

   local nCalculo    := 0

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   if ValType( uTmpL ) == "C"

      if nPrc == 0 .OR. nPrc == 1
         nCalculo    += ( uTmpL )->nPvpTil
      end

      if nPrc == 0 .OR. nPrc == 2
         nCalculo    += ( uTmpL )->nPcmTil
      end

      nCalculo       -= ( uTmpL )->nDtoDiv

   else

      if nPrc == 0 .OR. nPrc == 1
         nCalculo    += uTmpL:nPvpTil
      end

      if nPrc == 0 .OR. nPrc == 2
         nCalculo    += uTmpL:nPcmTil
      end

      nCalculo       -= uTmpL:nDtoDiv

   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( round( nCalculo, nDec ) )



Function nIvaUTpv( uTmpL, nDec, nVdv, nPrc )

   local nCalculo := 0

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   nCalculo       := nTotUTpv( uTmpL, nDec, nVdv, nPrc )

   do case
      case ValType( uTmpL ) == "C"
         nCalculo -= Round( nCalculo / ( 1 + ( uTmpL )->nIvaTil / 100 ), nDec )

      case ValType( uTmpL ) == "O"
         nCalculo -= Round( nCalculo / ( 1 + uTmpL:nIvaTil / 100 ), nDec )

   end

   if nVdv <> 0
      nCalculo    := nCalculo / nVdv
   end

Return ( Round( nCalculo, nDec ) )



Function nImpUTpv( uTikT, uTikL, nDec, nVdv, cPouDiv, nPrc )

   local nCalculo
   local nDtoEsp     := 0
   local nDtoPP      := 0

   IIF( uTikT == nil, uTikT := dbfTikT, ) ;
   IIF( uTikL == nil, uTikL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   nCalculo          := nTotUTpv( uTikL, nDec, nVdv, nPrc )

   do case
      case IsChar( uTikL )

         if ( uTikL )->nDtoLin <> 0
            nCalculo -= ( uTikL )->nDtoLin * nCalculo / 100
         end

         if ( uTikL )->nIvaTil <> 0
            nCalculo -= Round( nCalculo / ( 100 / ( uTikL )->nIvaTil + 1 ), nDec )
         end

      case IsObject( uTikL )

         if uTikL:nDtoLin <> 0
            nCalculo -= uTikL:nDtoLin * nCalculo / 100
         end

         if uTikL:nIvaTil <> 0
            nCalculo -= Round( nCalculo / ( 100 / uTikL:nIvaTil + 1 ), nDec )
         end

   end



   do case
      case IsChar( uTikT )

         if ( uTikT )->cTipTik == "4"
            nCalculo := - nCalculo
         end

         nDtoEsp     := Round( nCalculo * ( uTikT )->nDtoEsp / 100, nDec )

         nDtoPp      := Round( nCalculo * ( uTikT )->nDpp / 100, nDec )

         nCalculo    -= nDtoEsp
         nCalculo    -= nDtoPp

      case IsObject( uTikT )

         if uTikT:cTipTik == "4"
            nCalculo := - nCalculo
         end

         nDtoEsp     := Round( nCalculo * uTikT:nDtoEsp / 100, nDec )

         nDtoPp      := Round( nCalculo * uTikT:nDpp / 100, nDec )

         nCalculo    -= nDtoEsp
         nCalculo    -= nDtoPp

   end

Return ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



FUNCTION nImpLTpv( uTikT, uTikL, nDec, nRou, nVdv, cPouDiv, nPrc )

   local nCalculo
   local nDtoEsp     := 0
   local nDtoPp      := 0

   IIF( nDec == nil, nDec := 0, ) ;
   IIF( nRou == nil, nRou := 0, ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   nCalculo          := nTotLTpv( uTikL, nDec, nRou, nVdv, nPrc )

   do case
      case IsChar( uTikL )

         if ( uTikL )->nIvaTil <> 0
            nCalculo -= Round( nCalculo / ( 100 / ( uTikL )->nIvaTil + 1 ), nDec )
         end

      case IsObject( uTikL )

         if uTikL:nIvaTil <> 0
            nCalculo -= Round( nCalculo / ( 100 / uTikL:nIvaTil + 1 ), nDec )
         end

   end



   do case
      case IsChar( uTikT )

         if ( uTikT )->cTipTik == "4"
            nCalculo := - nCalculo
         end

         nDtoEsp     := Round( nCalculo * ( uTikT )->nDtoEsp / 100, nDec )
         nDtoPp      := Round( nCalculo * ( uTikT )->nDpp / 100, nDec )

         nCalculo    -= nDtoEsp
         nCalculo    -= nDtoPp

      case IsObject( uTikT )

         if uTikT:cTipTik == "4"
            nCalculo := - nCalculo
         end

         nDtoEsp     := Round( nCalculo * uTikT:nDtoEsp / 100, nDec )
         nDtoPp      := Round( nCalculo * uTikT:nDpp / 100, nDec )

         nCalculo    -= nDtoEsp
         nCalculo    -= nDtoPp

   end

RETURN ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



Function nBrtLTpv( uTikT, uTikL, nDec, nVdv, cPouDiv, nPrc )

   local nCalculo

   IIF( uTikT == nil, uTikT := dbfTikT, ) ;
   IIF( uTikL == nil, uTikL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   nCalculo          := nTotUTpv( uTikL, nDec, nVdv, nPrc )
   nCalculo          *= nTotNTpv( uTikL )

Return ( if( cPouDiv <> nil, Trans( nCalculo, cPouDiv ), nCalculo ) )



Function nDtoUTpv( dbfTmpL, nDec, nVdv )

   local nCalculo

   IIF( dbfTmpL == nil, dbfTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := ( dbfTmpL )->nDtoDiv

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

Return ( round( nCalculo, nDec ) )



Function nTotNTikTpv( uDbf )

   local nTotUnd

   IIF( uDbf == nil, uDbf := dbfTikL, ) ;

   do case
      case ValType( uDbf ) == "A"

         nTotUnd  := uDbf[ 8 ]

      case ValType( uDbf ) == "C"

         nTotUnd  := ( uDbf )->nUntTil

      otherwise

         nTotUnd  := uDbf:nUntTil

   end

Return ( nTotUnd )



Function nTotVTikTpv( uDbf, lCombinado )

   local nTotUnd

   IIF( uDbf == nil, uDbf := dbfTikL, ) ;
   IIF( lCombinado == nil, lCombinado := .F., ) ;

   do case
      case ValType( uDbf ) == "A"

         if !lCombinado
            nTotUnd     := uDbf[ 8 ] * NotCero( uDbf[ 23 ] )
         else
            nTotUnd     := uDbf[ 8 ] * NotCero( uDbf[ 50 ] )
         end

      case ValType( uDbf ) == "C"

         if !lCombinado
            nTotUnd     := ( uDbf )->nUntTil * NotCero( ( uDbf )->nFacCnv )
         else
            nTotUnd     := ( uDbf )->nUntTil * NotCero( ( uDbf )->nFcmCnv )
         end

      otherwise

         if !lCombinado
            nTotUnd     := uDbf:nUntTil * NotCero( uDbf:nFacCnv )
         else
            nTotUnd     := uDbf:nUntTil * NotCero( uDbf:nFcmCnv )
         end

   end

Return ( nTotUnd )



Function nIvaLTpv( cTikT, cTikL, nDec, nRou, nVdv, nPrc )

   local nCalculo    := 0

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRou == nil, nRou := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;

   do case
      case ValType( cTikL ) == "C"

         if ( cTikL )->nIvaTil <> 0

            if Empty( nPrc ) .OR. nPrc == 1
               nCalculo += nTotLUno( cTikL, nDec, nRou, nVdv )
            end

            if Empty( nPrc ) .OR. nPrc == 2
               nCalculo += nTotLDos( cTikL, nDec, nRou, nVdv )
            end

            nCalculo    -= Round( nCalculo / ( 1 + ( cTikL )->nIvaTil / 100 ), nDec )

         end

      case ValType( cTikL ) == "O"

         if cTikL:nIvaTil <> 0

            if Empty( nPrc ) .OR. nPrc == 1
               nCalculo += nTotLUno( cTikL:cAlias, nDec, nRou, nVdv )
            end

            if Empty( nPrc ) .OR. nPrc == 2
               nCalculo += nTotLDos( cTikL:cAlias, nDec, nRou, nVdv )
            end

            nCalculo    -= Round( nCalculo / ( 1 + ( cTikL:cAlias )->nIvaTil / 100 ), nDec )

         end

   end

   do case
      case Valtype( cTikT ) == "C" .AND. ( cTikT )->cTipTik == "4"
         nCalculo    := - nCalculo

      case Valtype( cTikT ) == "O" .AND. cTikT:cTipTik == "4"
         nCalculo    := - nCalculo

   end

   if nCalculo <> 0 .AND. nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

Return ( Round( nCalculo, nRou ) )







Function nNetLTpv( dbfTmpL, nDec, nRou, nVdv )

   local nCalculo    := 0

   IIF( dbfTmpL == nil, dbfTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRou == nil, nRou := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;

   nCalculo          := nTotLTpv( dbfTmpL, nDec, nRou, nVdv )

   if ( dbfTmpL )->nIvaTil <> 0
      nCalculo       := nCalculo / ( ( ( dbfTmpL )->nIvaTil / 100 ) + 1 )
   end

Return ( Round( nCalculo, nRou ) )



Static Function EdtCobTik( oWndBrw, lBig )

   local nOrd
   local nRec
   local aTmp
   local aGet
   local oBlock
   local oError
   local cSerAlb
   local cNumAlb
   local cSufAlb
   local cNumTik
   local cNumDoc
   local cCodCli
   local nOrdAnt
   local nDifVale    := 0
   local lGenVale    := .F.

   IIF( lBig == nil, lBig := .F., ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   aTmp              := dbScatter( dbfTikT )
   aGet              := Array( ( dbfTikT )->( fCount() ) )
   cNumTik           := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik
   cCodCli           := ( dbfTikT )->cCliTik
   cNumDoc           := ( dbfTikT )->cNumDoc
   nOrdAnt           := ( dbfTikT )->( OrdSetFocus( "cNumTik" ) )

   nCopTik           := nCopiasTicketsEnCaja( oUser():cCaja(), dbfCajT )





   oTotDiv           := TotalesTPV():Init()





   cNewFilP          := cGetNewFileName( cPatTmp() + "TikP"  )
   dbCreate( cNewFilP, aSqlStruct( aPgoTik() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFilP, cCheckArea( "TikP", @dbfTmpP ), .F. )





   cNewFilV          := cGetNewFileName( cPatTmp() + "TikV"  )
   dbCreate( cNewFilV, aSqlStruct( aItmTik() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFilV, cCheckArea( "TikV", @dbfTmpV ), .F. )





   cNewFilA          := cGetNewFileName( cPatTmp() + "TikA"  )
   dbCreate( cNewFilA, aSqlStruct( aItmAntCli() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFilA, cCheckArea( "TikA", @dbfTmpA ), .F. )





   cNewFilE          := cGetNewFileName( cPatTmp() + "TikE"  )
   dbCreate( cNewFilE, aSqlStruct( aItmAlbPgo() ), cLocalDriver() )
   dbUseArea( .T., cLocalDriver(), cNewFilE, cCheckArea( "TikE", @dbfTmpE ), .F. )

   do case
   case ( dbfTikT )->cTipTik == "2"

      aTmp[ 22 ]  := nTotAlbCli( cNumDoc, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, nil, nil, .F. )





      nRec              := ( dbfAlbCliP )->( Recno() )
      nOrd              := ( dbfAlbCliP )->( OrdSetFocus( "NNUMALB" ) )

      if ( dbfAlbCliP )->( dbSeek( ( dbfTikT )->cNumDoc ) )
         while ( ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb ) == cNumDoc .AND. !( dbfAlbCliP )->( eof() )
            dbPass( dbfAlbCliP, dbfTmpE, .T. )
            ( dbfAlbCliP )->( dbSkip() )
         end
      end
      ( dbfTmpE )->( dbGoTop() )

      ( dbfAlbCliP )->( OrdSetFocus( nOrd ) )
      ( dbfAlbCliP )->( dbGoTo( nRec ) )

   case ( dbfTikT )->cTipTik == "3"

      aTmp[ 22 ]  := nTotFacCli( cNumDoc, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, nil, nil, nil, .F. )





      if ( dbfFacCliP )->( dbSeek( cNumDoc ) )
         while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == cNumDoc .AND. !( dbfFacCliP )->( eof() )
            if ( dbfFacCliP )->lCobrado
               ( dbfTmpP )->( dbAppend() )
               ( dbfTmpP )->cCodCaj    := ( dbfFacCliP )->cCodCaj
               ( dbfTmpP )->dPgoTik    := ( dbfFacCliP )->dEntrada
               ( dbfTmpP )->nImpTik    := ( dbfFacCliP )->nImporte
               ( dbfTmpP )->cDivPgo    := ( dbfFacCliP )->cDivPgo
               ( dbfTmpP )->nVdvPgo    := ( dbfFacCliP )->nVdvPgo
               ( dbfTmpP )->cPgdPor    := ( dbfFacCliP )->cPgdoPor
               ( dbfTmpP )->cTurPgo    := ( dbfFacCliP )->cTurRec
               ( dbfTmpP )->cCtaRec    := ( dbfFacCliP )->cCtaRec
               ( dbfTmpP )->cFpgPgo    := ( dbfFacCliP )->cCodPgo
            end
            ( dbfFacCliP )->( dbSkip() )
         end
      end

      ( dbfTmpP )->( dbGoTop() )





      nRec  := ( dbfAntCliT )->( Recno() )
      nOrd  := ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )

      if ( dbfAntCliT )->( dbSeek( cNumDoc ) )
         while ( dbfAntCliT )->cNumDoc == cNumDoc .AND. !( dbfAntCliT )->( eof() )
            dbPass( dbfAntCliT, dbfTmpA, .T. )
            ( dbfAntCliT )->( dbSkip() )
         end
      end
      ( dbfTmpA )->( dbGoTop() )

      ( dbfAntCliT )->( OrdSetFocus( nOrd ) )
      ( dbfAntCliT )->( dbGoTo( nRec ) )

   otherwise

      aTmp[ 22 ]  := nTotTik( cNumTik, dbfTikT, dbfTikL, dbfDiv, nil, nil, .F. )





      if ( dbfTikP )->( dbSeek( cNumTik ) )
         while ( ( dbfTikP )->cSerTik + ( dbfTikP )->cNumTik + ( dbfTikP )->cSufTik == cNumTik .AND. !( dbfTikP )->( eof() ) )
            dbPass( dbfTikP, dbfTmpP, .T. )
            ( dbfTikP )->( dbSkip() )
         end
      end

      ( dbfTmpP )->( dbGoTop() )





      nRec     := ( dbfTikT )->( Recno() )
      nOrd     := ( dbfTikT )->( OrdSetFocus( "cDocVal" ) )

      if ( dbfTikT )->( dbSeek( cNumTik ) )
         while ( dbfTikT )->cValDoc == cNumTik .AND. !( dbfTikT )->( eof() )
            dbPass( dbfTikT, dbfTmpV, .T. )
            ( dbfTikT )->( dbSkip() )
         end
      end

      ( dbfTikT )->( dbGoTo( nRec ) )
      ( dbfTikT )->( OrdSetFocus( nOrd ) )

      ( dbfTmpV )->( dbGoTop() )

   end





   if lCobro( @aTmp, aGet, aTmp[ 4 ], 2, @lGenVale, @nDifVale, lBig )





      if ( oTotDiv:lValeMayorTotal() )

         if aTmp[ 22 ] <> 0

            if dbAppe( dbfTmpP )
               ( dbfTmpP )->cCtaRec    := cCtaCob()
               ( dbfTmpP )->cTurPgo    := cCurSesion()
               ( dbfTmpP )->dPgoTik    := GetSysDate()
               ( dbfTmpP )->cTimTik    := SubStr( Time(), 1, 5 )
               ( dbfTmpP )->cCodCaj    := oUser():cCaja()
               ( dbfTmpP )->cFpgPgo    := aTmp[ 21 ]
               ( dbfTmpP )->cSerTik    := aTmp[ 1 ]
               ( dbfTmpP )->cNumTik    := aTmp[ 2 ]
               ( dbfTmpP )->cSufTik    := aTmp[ 3 ]
               ( dbfTmpP )->nImpTik    := aTmp[ 22 ]
               ( dbfTmpP )->cDivPgo    := aTmp[ 24 ]
               ( dbfTmpP )->nVdvPgo    := aTmp[ 25 ]
               ( dbfTmpP )->nDevTik    := Max( aTmp[ 23 ], 0 )
            else
               MsgStop( "No se ha podido añadir el registro de pago" )
            end

         end

      end

      do case
      case ( dbfTikT )->cTipTik == "1" .OR. ( dbfTikT )->cTipTik == "4" .OR. ( dbfTikT )->cTipTik == "5"





         while ( dbfTikP )->( dbSeek( cNumTik ) )
            if dbLock( dbfTikP )
               ( dbfTikP )->( dbDelete() )
               ( dbfTikP )->( dbUnLock() )
            end
         end





         ( dbfTmpP )->( dbGoTop() )
         while !( dbfTmpP )->( eof() )
            dbPass( dbfTmpP, dbfTikP, .T. )
            ( dbfTmpP )->( dbSkip() )
         end





         nOrd  := ( dbfTikT )->( OrdSetFocus( "cDocVal" ) )
         nRec  := ( dbfTikT )->( Recno() )

         while ( dbfTikT )->( dbSeek( cNumTik ) ) .AND. !( dbfTikT )->( eof() )
            if dbLock( dbfTikT )
               ( dbfTikT )->lLiqTik := .F.
               ( dbfTikT )->lSndDoc := .T.
               ( dbfTikT )->cValDoc := ""
               ( dbfTikT )->cTurVal := ""
               ( dbfTikT )->( dbUnLock() )
            end
         end

         ( dbfTikT )->( OrdSetFocus( nOrd ) )
         ( dbfTikT )->( dbGoTo( nRec ) )





         nRec  := ( dbfTikT )->( Recno() )

         ( dbfTmpV )->( dbGoTop() )
         while !( dbfTmpV )->( eof() )
            if ( dbfTikT )->( dbSeek( ( dbfTmpV )->cSerTik + ( dbfTmpV )->cNumTik + ( dbfTmpV )->cSufTik ) )
               if dbLock( dbfTikT )
                  ( dbfTikT )->lLiqTik := .T.
                  ( dbfTikT )->lSndDoc := .T.
                  ( dbfTikT )->cValDoc := cNumTik
                  ( dbfTikT )->cTurVal := cCurSesion()
                  ( dbfTikT )->( dbUnLock() )
               end
            end
            ( dbfTmpV )->( dbSkip() )
         end

         ( dbfTikT )->( dbGoTo( nRec ) )

      case ( dbfTikT )->cTipTik == "3"

         cSerAlb     := SubStr( cNumDoc, 1, 1 )
         cNumAlb     := Val( SubStr( cNumDoc, 2, 9 ) )
         cSufAlb     := SubStr( cNumDoc, 11, 2 )

         while ( dbfFacCliP )->( dbSeek( cNumDoc ) ) .AND. !( dbfFacCliP )->( eof() )
            if dbLock( dbfFacCliP )
               ( dbfFacCliP )->( dbDelete() )
               ( dbfFacCliP )->( dbUnLock() )
            end
         end





         ( dbfTmpP )->( dbGoTop() )
         while !( dbfTmpP )->( eof() )

            if dbAppe( dbfFacCliP )
               ( dbfFacCliP )->cSerie     := cSerAlb
               ( dbfFacCliP )->nNumFac    := cNumAlb
               ( dbfFacCliP )->cSufFac    := cSufAlb
               ( dbfFacCliP )->lCobrado   := .T.
               ( dbfFacCliP )->cCodCaj    := oUser():cCaja()
               ( dbfFacCliP )->cCodCli    := cCodCli
               ( dbfFacCliP )->dPreCob    := GetSysDate()
               ( dbfFacCliP )->nNumRec    := ( dbfTmpP )->( Recno() )
               ( dbfFacCliP )->dEntrada   := ( dbfTmpP )->dPgoTik
               ( dbfFacCliP )->cDivPgo    := ( dbfTmpP )->cDivPgo
               ( dbfFacCliP )->nVdvPgo    := ( dbfTmpP )->nVdvPgo
               ( dbfFacCliP )->cPgdoPor   := ( dbfTmpP )->cPgdPor
               ( dbfFacCliP )->nImporte   := nTotUCobTik( dbfTmpP )
               ( dbfFacCliP )->( dbUnLock() )
            end

            ( dbfTmpP )->( dbSkip() )

         end





         nRec  := ( dbfAntCliT )->( Recno() )
         nOrd  := ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )

         While ( dbfAntCliT )->( dbSeek( cNumDoc ) ) .AND. !( dbfAntCliT )->( eof() )
            if dbLock( dbfAntCliT )
               ( dbfAntCliT )->lLiquidada := .F.
               ( dbfAntCliT )->dLiquidada := Ctod("")
               ( dbfAntCliT )->cTurLiq    := ""
               ( dbfAntCliT )->cCajLiq    := ""
               ( dbfAntCliT )->cNumDoc    := ""
               ( dbfAntCliT )->( dbUnLock() )
            end
         end

         ( dbfAntCliT )->( OrdSetFocus( nOrd ) )
         ( dbfAntCliT )->( dbGoTo( nRec ) )





         ( dbfTmpA )->( dbGoTop() )
         while !( dbfTmpA )->( eof() )
            if ( dbfAntCliT )->( dbSeek( ( dbfTmpA )->cSerAnt + Str( ( dbfTmpA )->nNumAnt ) + ( dbfTmpA )->cSufAnt ) )
               if dbLock( dbfAntCliT )
                  ( dbfAntCliT )->lLiquidada := .T.
                  ( dbfAntCliT )->lSndDoc    := .T.
                  ( dbfAntCliT )->cNumDoc    := cNumDoc
                  ( dbfAntCliT )->dLiquidada := GetSysDate()
                  ( dbfAntCliT )->cTurLiq    := cCurSesion()
                  ( dbfAntCliT )->cCajLiq    := oUser():cCaja()
                  ( dbfAntCliT )->( dbUnLock() )
               end
            end

            ( dbfTmpA )->( dbSkip() )

         end

         if dbLock( dbfFacCliT )
            ( dbfFacCliT )->lSndDoc          := .T.
            ( dbfFacCliT )->( dbUnLock() )
         end





         ChkLqdFacCli( nil, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv )

      case ( dbfTikT )->cTipTik == "2"

         cSerAlb     := SubStr( cNumDoc, 1, 1 )
         cNumAlb     := Val( SubStr( cNumDoc, 2, 9 ) )
         cSufAlb     := SubStr( cNumDoc, 11, 2 )





         while ( dbfAlbCliP )->( dbSeek( cNumDoc ) ) .AND. !( dbfAlbCliP )->( eof() )
            if dbLock( dbfAlbCliP )
               ( dbfAlbCliP )->( dbDelete() )
               ( dbfAlbCliP )->( dbUnLock() )
            end
         end





         ( dbfTmpE )->( dbGoTop() )

         while !( dbfTmpE )->( eof() )

            ( dbfAlbCliP )->( dbAppend() )

            ( dbfAlbCliP )->cSerAlb    := cSerAlb
            ( dbfAlbCliP )->nNumAlb    := cNumAlb
            ( dbfAlbCliP )->cSufAlb    := cSufAlb
            ( dbfAlbCliP )->nNumRec    := ( dbfTmpE )->nNumRec
            ( dbfAlbCliP )->cCodCaj    := ( dbfTmpE )->cCodCaj
            ( dbfAlbCliP )->cTurRec    := ( dbfTmpE )->cTurRec
            ( dbfAlbCliP )->cCodCli    := ( dbfTmpE )->cCodCli
            ( dbfAlbCliP )->dEntrega   := ( dbfTmpE )->dEntrega
            ( dbfAlbCliP )->nImporte   := ( dbfTmpE )->nImporte
            ( dbfAlbCliP )->cDescrip   := ( dbfTmpE )->cDescrip
            ( dbfAlbCliP )->cPgdoPor   := ( dbfTmpE )->cPgdoPor
            ( dbfAlbCliP )->cDivPgo    := ( dbfTmpE )->cDivPgo
            ( dbfAlbCliP )->nVdvPgo    := ( dbfTmpE )->nVdvPgo
            ( dbfAlbCliP )->cCodAge    := ( dbfTmpE )->cCodAge
            ( dbfAlbCliP )->cCodPgo    := ( dbfTmpE )->cCodPgo
            ( dbfAlbCliP )->lPasado    := ( dbfTmpE )->lPasado
            ( dbfAlbCliP )->lCloPgo    := .F.

            ( dbfAlbCliP )->( dbUnLock() )

            ( dbfTmpE )->( dbSkip() )

         end

      end





      if ( dbfTikT )->cTipTik <> "2"
         oUser():OpenCajon()
      end





      dbGather( aTmp, dbfTikT )

   end

   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )

   RECOVER USING oError

      msgStop( "Imposible realizar pagos " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !Empty( dbfTmpP ) .AND. ( dbfTmpP )->( Used() )
      ( dbfTmpP )->( dbCloseArea() )
   end

   if !Empty( dbfTmpV ) .AND. ( dbfTmpV )->( Used() )
      ( dbfTmpV )->( dbCloseArea() )
   end

   if !Empty( dbfTmpA ) .AND. ( dbfTmpA )->( Used() )
      ( dbfTmpA )->( dbCloseArea() )
   end

   if !Empty( dbfTmpE ) .AND. ( dbfTmpE )->( Used() )
      ( dbfTmpE )->( dbCloseArea() )
   end

   dbfErase( cNewFilP )
   dbfErase( cNewFilV )
   dbfErase( cNewFilA )
   dbfErase( cNewFilE )

   if !Empty( oWndBrw )
      oWndBrw:oBrw:DrawSelect()
   end

return nil






Static Function TmpTiket( aTmp, aGet, nMode, lClean, lImprimirComanda, lLiberarMesa )

   local oError
   local oBlock
   local nRecno
   local cNumDoc                   := ""
   local nNumTik                     := ""
   local nOrdAlb

   IIF( lClean == nil, lClean := .T., ) ;
   IIF( lImprimirComanda == nil, lImprimirComanda := .T., ) ;
   IIF( lLiberarMesa == nil, lLiberarMesa := .F., ) ;





   if ( dbfTmpL )->( ordKeyCount() ) == 0 .AND. !lLiberarMesa
      return .T.
   end





   if !lValidaOperacion( aTmp[ 6 ] )
      return .F.
   end

   if !Empty( aGet[ 11 ] ) .AND. !aGet[ 11 ]:lValid()
      aGet[ 11 ]:SetFocus()
      return .F.
   end

   if !Empty( aGet[ 10 ] )

      if Empty( aTmp[ 10 ] )
         aGet[ 10 ]:SetFocus()
         MsgInfo( "Almacén no puede estar vacio" )
         return .F.
      end

      if !( aGet[ 10 ]:lValid() )
         aGet[ 10 ]:SetFocus()
         return .F.
      end

   end








   if !Empty( oSalaVentas )                        .AND. Empty( aTmp[ 48 ] )                   .AND. AllTrim( aTmp[ 49 ] ) == "General"   .AND. Empty( aTmp[ 51 ] )

      MsgStop( "No puede guardar un ticket general sin asignarle un alias." )

      RenombrarUbicacion( aTmp, aGet )

      return .F.

   end








   if !Empty( oSalaVentas )                         .AND. Empty( aTmp[ 48 ] )                    .AND. AllTrim( aTmp[ 49 ] ) == "Llevar"     .AND. Empty( aTmp[ 11 ] )

      MsgStop( "No puede guardar un ticket para llevar sin asignarle un cliente." )

      return .F.

   end





   StopAutoImp()





   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]     := "A"
   end





   if Empty( aTmp[ 5 ] )
      aTmp[ 5 ]     := cCurSesion()
   end

   if Empty( aTmp[ 4 ] )
      aTmp[ 4 ]     := "1"
   end

   if Empty( aTmp[ 40 ] )
      aTmp[ 40 ]     := Date()
   end

   if Empty( aTmp[ 41 ] )
      aTmp[ 41 ]     := SubStr( Time(), 1, 5 )
   end





   nTotTik                 := nTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )
   nTotPax                 := nTotTik / NotCero( aTmp[ 52 ] )

   aTmp[ 23 ]        := 0
   aTmp[ 22 ]        := nTotTik





   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oDlgTpv:Disable()









      do case
      case nMode == 1





         if !Empty( oMetMsg )
            oMetMsg:cText           := "Obtenemos el nuevo número"
            oMetMsg:Refresh()
         end

         aTmp[ 2 ]           := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
         aTmp[ 3 ]           := RetSufEmp()
         nNumTik                    := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]





         aTmp[ 7 ]           := Substr( Time(), 1, 5 )
         aTmp[ 26 ]           := .F.

         if !Empty( oSalaVentas ) .AND. IsTrue( oSalaVentas:lPuntosVenta )
            aTmp[ 48   ]     := oSalaVentas:cSelectedSala
            aTmp[ 49  ]     := oSalaVentas:cSelectedPunto
            aTmp[ 12    ]     := oSalaVentas:nSelectedPrecio
         end

      case nMode == 2

         nNumTik                    := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
         cNumDoc                    := aTmp[ 31 ]





         if !( dbfTikT )->( dbSeek( nNumTik ) )
            if !Empty( oMetMsg )
               oMetMsg:cText  := "Ticket no encontrado"
               oMetMsg:Refresh()
            end
         end





         if !Empty( oMetMsg )
            oMetMsg:cText     := "Eliminando lineas"
            oMetMsg:Refresh()
         end

         while dbSeekInOrd( nNumTik, "cNumTil", dbfTikL )
            if dbLock( dbfTikL )
               ( dbfTikL )->( dbDelete() )
               ( dbfTikL )->( dbUnLock() )
            end
         end

      end





      if !Empty( oMetMsg )
         oMetMsg:cText        := "Archivando lineas"
         oMetMsg:SetTotal( ( dbfTmpL )->( ordKeyCount() ) )
      end

      nRecno               := ( dbfTmpL )->( Recno() )

      ( dbfTmpL )->( dbGoTop() )
      while !( dbfTmpL )->( eof() )

         if !Empty( oMetMsg )
            oMetMsg:Set( ( dbfTmpL )->( Recno() ) )
         end

         dbPass( dbfTmpL, dbfTikL, .T., aTmp[ 1 ], aTmp[ 2 ], aTmp[ 3 ] )

         ( dbfTmpL )->( dbSkip() )

      end

      ( dbfTmpL )->( dbGoTo( nRecno ) )





      if !Empty( oMetMsg )
         oMetMsg:Set( 0 )
         oMetMsg:cText        := "Archivando ticket"
         oMetMsg:Refresh()
      end

      WinGather( aTmp, aGet, dbfTikT, nil, nMode, nil, lClean )





      if lLiberarMesa

         if dbSeekInOrd( nNumTik, "cNumTik" , dbfTikT )

            if dbLock( dbfTikT )
               ( dbfTikT )->lPgdTik       := .T.
               ( dbfTikT )->cCodSala      := ""
               ( dbfTikT )->cPntVenta     := ""
               ( dbfTikT )->( dbUnLock() )
            end

         end

      end





      if lImprimirComanda
         ImpresionComanda( nNumTik )
      end





      if !Empty( oMetMsg )
         oMetMsg:cText                    := "Actualizando stocks"
         oMetMsg:Refresh()
      end





      dbCommitAll()





      oDlgTpv:Enable()
      oDlgTpv:aEvalWhen()





   RECOVER USING oError

      msgStop( "Error en la grabación del ticket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )





   StartAutoImp()

Return ( .T. )



Static Function DlgPrnTicket( oBrw )

   local oDlg
   local oSelTik
   local nSelTik     := 1
   local nOrdAnt     := ( dbfTikT )->( OrdSetFocus( 1 ) )
   local nRecAnt     := ( dbfTikT )->( RecNo() )
   local oSerDes
   local cSerDes     := ( dbfTikT )->cSerTik
   local cNumDes     := Val( ( dbfTikT )->cNumTik )
   local cSufDes     := ( dbfTikT )->cSufTik
   local oSerHas
   local cSerHas     := ( dbfTikT )->cSerTik
   local cNumHas     := Val( ( dbfTikT )->cNumTik )
   local cSufHas     := ( dbfTikT )->cSufTik
   local dFecDes     := ( dbfTikT )->dFecTik
   local dFecHas     := ( dbfTikT )->dFecTik
   local lInvOrden   := .F.

   local oDatos      := TFormatosImpresion():Load( dbfCajT )

   oDlg = TDialog():New(,,,,, "PRNTICKET",, .F.,,,,,, .F.,,,,,, .F., )




        oSelTik := TRadMenu():Redefine( { | u | If( PCount()==0, nSelTik, nSelTik:= u ) }, oDlg,, { 101, 102 }, {||( ( dbfTikT )->( OrdSetFocus( nSelTik ) ) )},,,, .F.,, )








      oSerDes := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerDes, cSerDes:= u ) }, oDlg,,, {||    ( cSerDes >= "A" .AND. cSerDes <= "Z"  )},,,,,, .F., {||         ( nSelTik == 1 )},, .F., .T., {||    ( UpSerie( oSerDes ) )}, {||  ( DwSerie( oSerDes ) )},,,, nil,,, )






        TGetHlp():ReDefine( 120, { | u | If( PCount()==0, cNumDes, cNumDes:= u ) }, oDlg,, "9999999999",,,,,,, .F., {||     ( nSelTik == 1 )},, .F., .T.,,,,,, nil,,, )




        TGetHlp():ReDefine( 130, { | u | If( PCount()==0, cSufDes, cSufDes:= u ) }, oDlg,,,,,,,,, .F., {||         ( nSelTik == 1 )},, .F., .F.,,,,,, nil,,, )









      oSerHas := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSerHas, cSerHas:= u ) }, oDlg,,, {||    ( cSerHas >= "A" .AND. cSerHas <= "Z"  )}, "N/W*",,,,, .F., {||     ( nSelTik == 1 )},, .F., .T., {||    ( UpSerie( oSerHas ) )}, {||  ( DwSerie( oSerHas ) )},,,, nil,,, )






        TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cNumHas, cNumHas:= u ) }, oDlg,, "9999999999",,,,,,, .F., {||         ( nSelTik == 1 )},, .F., .T.,,,,,, nil,,, )




        TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cSufHas, cSufHas:= u ) }, oDlg,,,,,,,,, .F., {||     ( nSelTik == 1 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 170, { | u | If( PCount()==0, dFecDes, dFecDes:= u ) }, oDlg,,,,,,,,, .F., {||         ( nSelTik == 2 )},, .F., .F.,,,,,, nil,,, )




        TGetHlp():ReDefine( 180, { | u | If( PCount()==0, dFecHas, dFecHas:= u ) }, oDlg,,,,,,,,, .F., {||         ( nSelTik == 2 )},, .F., .F.,,,,,, nil,,, )










      oDatos:oFormatoTiket := TGetHlp():ReDefine( 251, { | u | If( PCount()==0, oDatos:cFormatoTiket, oDatos:cFormatoTiket:= u ) }, oDlg,,, {||    ( cDocumento( oDatos:oFormatoTiket, oDatos:oSayFmtTik, dbfDoc ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oDatos:oFormatoTiket, oDatos:oSayFmtTik, "TK" ) )}, nil, "LUPA",, )




      oDatos:oSayFmtTik := TGetHlp():ReDefine( 252, { | u | If( PCount()==0, oDatos:cSayFmtTik, oDatos:cSayFmtTik:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oDatos:oPrinterTik := TGetHlp():ReDefine( 253, { | u | If( PCount()==0, oDatos:cPrinterTik, oDatos:cPrinterTik:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      TBtnBmp():ReDefine( 254, "Printer_preferences_16",,,,,{|| PrinterPreferences( oDatos:oPrinterTik ) }, oDlg, .F., , .F.,  )

      TBtnBmp():ReDefine( 255, "Printer_pencil_16",,,,,{|| EdtDocumento( oDatos:cFormatoTiket ) }, oDlg, .F., , .F.,  )










      oDatos:oFmtVal := TGetHlp():ReDefine( 261, { | u | If( PCount()==0, oDatos:cFmtVal, oDatos:cFmtVal:= u ) }, oDlg,,, {||    ( cDocumento( oDatos:oFmtVal, oDatos:oSayFmtVal, dbfDoc ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oDatos:oFmtVal, oDatos:oSayFmtVal, "TK" ) )}, nil, "LUPA",, )




      oDatos:oSayFmtVal := TGetHlp():ReDefine( 262, { | u | If( PCount()==0, oDatos:cSayFmtVal, oDatos:cSayFmtVal:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oDatos:oPrinterVal := TGetHlp():ReDefine( 263, { | u | If( PCount()==0, oDatos:cPrinterVal, oDatos:cPrinterVal:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      TBtnBmp():ReDefine( 264, "Printer_preferences_16",,,,,{|| PrinterPreferences( oDatos:oPrinterVal ) }, oDlg, .F., , .F.,  )

      TBtnBmp():ReDefine( 265, "Printer_pencil_16",,,,,{|| EdtDocumento( oDatos:cFmtVal ) }, oDlg, .F., , .F.,  )










      oDatos:oFmtAlb := TGetHlp():ReDefine( 191, { | u | If( PCount()==0, oDatos:cFmtAlb, oDatos:cFmtAlb:= u ) }, oDlg,,, {||    ( cDocumento( oDatos:oFmtAlb, oDatos:oSayFmtAlb, dbfDoc ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oDatos:oFmtAlb, oDatos:oSayFmtAlb, "TK" ) )}, nil, "LUPA",, )




      oDatos:oSayFmtAlb := TGetHlp():ReDefine( 192, { | u | If( PCount()==0, oDatos:cSayFmtAlb, oDatos:cSayFmtAlb:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oDatos:oPrinterAlb := TGetHlp():ReDefine( 193, { | u | If( PCount()==0, oDatos:cPrinterAlb, oDatos:cPrinterAlb:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      TBtnBmp():ReDefine( 194, "Printer_preferences_16",,,,,{|| PrinterPreferences( oDatos:oPrinterAlb ) }, oDlg, .F., , .F.,  )

      TBtnBmp():ReDefine( 195, "Printer_pencil_16",,,,,{|| EdtDocumento( oDatos:cFmtAlb ) }, oDlg, .F., , .F.,  )










      oDatos:oFmtFac := TGetHlp():ReDefine( 201, { | u | If( PCount()==0, oDatos:cFmtFac, oDatos:cFmtFac:= u ) }, oDlg,,, {||    ( cDocumento( oDatos:oFmtFac, oDatos:oSayFmtFac, dbfDoc ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwDocumento( oDatos:oFmtAlb, oDatos:oSayFmtFac, "TK" ) )}, nil, "LUPA",, )




      oDatos:oSayFmtFac := TGetHlp():ReDefine( 202, { | u | If( PCount()==0, oDatos:cSayFmtFac, oDatos:cSayFmtFac:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )




      oDatos:oPrinterFac := TGetHlp():ReDefine( 203, { | u | If( PCount()==0, oDatos:cPrinterFac, oDatos:cPrinterFac:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )

      TBtnBmp():ReDefine( 204, "Printer_preferences_16",,,,,{|| PrinterPreferences( oDatos:oPrinterFac ) }, oDlg, .F., , .F.,  )

      TBtnBmp():ReDefine( 205, "Printer_pencil_16",,,,,{|| EdtDocumento( oDatos:cFmtFac ) }, oDlg, .F., , .F.,  )




      TCheckBox():ReDefine( 500, { | u | If( PCount()==0, lInvOrden, lInvOrden:= u ) }, oDlg,,,,,,, .F.,, .F. )





      TButton():ReDefine( 505, {||(  PrnSerTik( nSelTik, cSerDes + Str( cNumDes ) + cSufDes, cSerHas + Str( cNumHas ) + cSufHas, dFecDes, dFecHas, oDlg, lInvOrden, oDatos ), oDlg:End( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 510, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| PrnSerTik( nSelTik, cSerDes + Str( cNumDes ) + cSufDes, cSerHas + Str( cNumHas ) + cSufHas, dFecDes, dFecHas, oDlg, lInvOrden, oDatos ), oDlg:End( 1 ) } )

   oDlg:bStart := { || oSerDes:SetFocus() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

    ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )
    ( dbfTikT )->( dbGoTo( nRecAnt ) )

    oBrw:refresh()

Return ( oDlg:nResult == 1 )







Static Function PrnSerTik( nSelTik, cNumDes, cNumHas, dFecDes, dFecHas, oDlg, lInvOrden, oDatos )

   local oBlock
   local oError
   local nOrdAnt
   local uNumDes
   local uNumHas
   local nRecAnt

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   nRecAnt           := ( dbfTikT )->( RecNo() )

   IIF( nSelTik == nil, nSelTik := 1, ) ;
   IIF( cNumDes == nil, cNumDes := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, ) ;
   IIF( cNumHas == nil, cNumHas := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, ) ;

   if nSelTik == 1
      nOrdAnt        := ( dbfTikT )->( OrdSetFocus( "cNumTik" ) )
      uNumDes        := cNumDes
      uNumHas        := cNumHas
   else
      nOrdAnt        := ( dbfTikT )->( OrdSetFocus( "dFecTik" ) )
      uNumDes        := dFecDes
      uNumHas        := dFecHas
   end

   if !Empty( oDlg )
      oDlg:Disable()
   end

   if !lInvOrden

      if ( dbfTikT )->( dbSeek( uNumDes, .T. ) )



         while !( dbfTikT )->( eof())                    .AND. ( dbfTikT )->( OrdKeyVal() ) >= uNumDes   .AND. ( dbfTikT )->( OrdKeyVal() ) <= uNumHas

            ImpTiket( , , .T., , oDatos )

            ( dbfTikT )->( dbSkip() )

         end

      end

   else

      if ( dbfTikT )->( dbSeek( uNumHas ) )



         while ( dbfTikT )->( OrdKeyVal() ) >= uNumDes   .AND. ( dbfTikT )->( OrdKeyVal() ) <= uNumHas   .AND. !( dbfTikT )->( Bof() )

            ImpTiket( , , .T., , oDatos )

            ( dbfTikT )->( dbSkip( -1 ) )

         end

      end

   end

   if !Empty( oDlg )
      oDlg:Enable()
   end

   ( dbfTikT )->( dbGoTo( nRecAnt ) )
   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )

   RECOVER USING oError

   msgStop( "Error al imprimir series de tickets.")

   end

   ErrorBlock( oBlock )

Return nil



FUNCTION nTotComTik( cNumTik, dbfTikT, dbfTikL, nDouDiv, nDorDiv )

   local nTotal      := 0
   local nRecno      := ( dbfTikL )->( RecNo() )

   if ( dbfTikL )->( dbSeek( cNumTik ) )

      while ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == cNumTik .AND. !( dbfTikL )->( eof() )

         if !( dbfTikL )->lFreTil .OR. ( dbfTikT )->cTipTik == "4"

            nTotal   += nTotLTpv( dbfTikL, nDouDiv, nDorDiv ) * ( dbfTikT )->nComAge

         end

         ( dbftikl )->( dbskip(1) )

      end

   end

   ( dbfTikL )->( dbGoTo( nRecno ) )





   nTotal            := Round( nTotal, nDorDiv )

Return ( nTotal )



Function aTotTik( cNumTik, dbfTikT, dbfTikL, dbfDiv, aTmp, cDivRet, lPic, lExcCnt )

   nTotTik( cNumTik, dbfTikT, dbfTikL, dbfDiv, aTmp, cDivRet, lPic, lExcCnt )

Return ( { nTotNet, nTotIva, nTotTik, nTotIvm, aIvaTik, aBasTik, aImpTik, aIvmTik } )



Static Function bButtonsPago( cCodPago, oGetPago )

Return ( {|| oGetPago:cText( cCodPago ), oGetPago:lValid() } )

Static Function bButtonsGrad( oButton )







   oButton:bClrGrad  := { | lInvert |  If( lInvert .OR. oButton:lBtnDown,  { { 1/3, nRGB( 255, 253, 222 ), nRGB( 255, 231, 151 ) },  { 2/3, nRGB( 255, 215,  84 ), nRGB( 255, 233, 162 ) }   },  { { 1/2, nRGB( 219, 230, 244 ), nRGB( 207-50, 221-25, 255 ) },  { 1/2, nRGB( 201-50, 217-25, 255 ), nRGB( 231, 242, 255 ) }   } ) }

Return ( nil )





Function nTotLCobTik( dbfTikP, dbfDiv, cDivRet, lPic )

   local cPorDiv
   local nDorDiv
   local cCodDiv
   local nTotal      := 0

   IIF( lPic == nil, lPic := .F., ) ;

   do case
      case Valtype( dbfTikP ) == "C"
         cCodDiv     := ( dbfTikP )->cDivPgo
      case Valtype( dbfTikP ) == "O"
         cCodDiv     := dbfTikP:cDivPgo
   end

   cPorDiv           := cPorDiv( cCodDiv, dbfDiv )
   nDorDiv           := nRouDiv( cCodDiv, dbfDiv )

   nTotal            := nTotUCobTik( dbfTikP, nDorDiv )

   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, dbfDiv )
      nTotal         := nCnv2Div( nTotal, cCodDiv, cDivRet, dbfDiv )
   end



   if lPic
      nTotal         := Trans( nTotal, cPorDiv )
   end

Return ( nTotal )






Function nImpValTik( cNumTik, cTikT, cTikL, cDiv, cDivRet )

   local cPorDiv
   local nDorDiv
   local nOrdAnt
   local cCodDiv
   local nRecAnt
   local nLinAnt
   local nTotTik      := 0

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( cNumTik == nil, cNumTik := ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, ) ;

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @cTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   cCodDiv           := ( cTikT )->cDivTik
   nRecAnt           := ( cTikT )->( Recno() )
   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   nDorDiv           := nRouDiv( cCodDiv, cDiv )

   nOrdAnt           := ( cTikT )->( OrdSetFocus( "cTikVal" ) )

   if ( cTikT )->( dbSeek( cNumTik ) )

      while ( cTikT )->cTikVal == cNumTik .AND. !( cTikT )->( eof() )

         nTotTik     += nTotTik( ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, cTikT, cTikL, cDiv, nil, cDivRet, .F. )

         ( cTikT )->( dbSkip() )

      end

   end

   ( cTikT )->( OrdSetFocus( nOrdAnt ) )





   ( cTikT )->( dbGoTo( nRecAnt ) )
   ( cTikT )->( OrdSetFocus( nOrdAnt ) )

   ( cTikL )->( dbCloseArea() )





   nTotTik            := Abs( Round( nTotTik, nDorDiv ) )





   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, cDiv )
      nTotTik        := nCnv2Div( nTotTik, cCodDiv, cDivRet, cDiv )
   end

Return ( nTotTik )







Function nImpValCli( cCliTik, cTikT, cTikL, cDiv, cDivRet )

   local cPorDiv
   local nDorDiv
   local nOrdAnt
   local cCodDiv
   local nRecAnt
   local nLinAnt
   local nTotTik      := 0

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( cCliTik == nil, cCliTik := ( cTikT )->cCliTik, ) ;

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @cTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   cCodDiv           := ( cTikT )->cDivTik
   nRecAnt           := ( cTikT )->( Recno() )
   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   nDorDiv           := nRouDiv( cCodDiv, cDiv )

   nOrdAnt           := ( cTikT )->( OrdSetFocus( "cCliVal" ) )
   if ( cTikT )->( dbSeek( cCliTik ) )

      while ( cTikT )->cCliTik == cCliTik .AND. !( cTikT )->( eof() )

         nTotTik     += nTotTik( ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, cTikT, cTikL, cDiv, nil, cDivRet, .F. )

         ( cTikT )->( dbSkip() )

      end

   end

   ( cTikT )->( OrdSetFocus( nOrdAnt ) )





   ( cTikT )->( dbGoTo( nRecAnt ) )
   ( cTikT )->( OrdSetFocus( nOrdAnt ) )

   ( cTikL )->( dbCloseArea() )





   nTotTik            := Abs( Round( nTotTik, nDorDiv ) )





   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, cDiv )
      nTotTik        := nCnv2Div( nTotTik, cCodDiv, cDivRet, cDiv )
   end

Return ( nTotTik )







Function nTotValTik( cNumTik, cTikT, cTikL, cDiv, cDivRet, lPic )

   local cPorDiv
   local nDorDiv
   local nOrdAnt
   local cCodDiv
   local nRecAnt
   local nTotal      := 0

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( lPic == nil, lPic := .F., ) ;
   IIF( cNumTik == nil, cNumTik := ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, ) ;

   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   nDorDiv           := nRouDiv( cCodDiv, cDiv )

   cCodDiv           := ( cTikT )->cDivTik

   nRecAnt           := ( cTikT )->( Recno() )
   nOrdAnt           := ( cTikT )->( OrdSetFocus( "cDocVal" ) )

   if ( cTikT )->( dbSeek( cNumTik ) )

      while ( cTikT )->cValDoc == cNumTik .AND. !( cTikT )->( eof() )

         nTotal      += nTotTik( ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik )

         ( cTikT )->( dbSkip() )

      end

   end

   ( cTikT )->( OrdSetFocus( nOrdAnt ) )
   ( cTikT )->( dbGoTo( nRecAnt ) )





   nTotal            := Abs( Round( nTotal, nDorDiv ) )





   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, cDiv )
      nTotal         := nCnv2Div( nTotal, cCodDiv, cDivRet, cDiv )
   end

Return ( if( lPic, Trans( nTotal, cPorDiv ), nTotal ) )







Function nTotValTikInfo( cNumTik, cTikT, cDiv, cDivRet, lPic )

   local cPorDiv
   local nDorDiv
   local nOrdAnt
   local cCodDiv
   local nRecAnt
   local nTotal      := 0
   local dbfTmpTikL

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( lPic == nil, lPic := .F., ) ;
   IIF( cNumTik == nil, cNumTik := ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, ) ;





   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTmpTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ( dbfTmpTikL )->( OrdSetFocus( "cNumTil" ) )

   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   nDorDiv           := nRouDiv( cCodDiv, cDiv )

   cCodDiv           := ( cTikT )->cDivTik

   nRecAnt           := ( cTikT )->( Recno() )
   nOrdAnt           := ( cTikT )->( OrdSetFocus( "cDocVal" ) )

   if ( cTikT )->( dbSeek( cNumTik ) )

      while ( cTikT )->cValDoc == cNumTik .AND. !( cTikT )->( eof() )

         nTotal      += nTotTik( ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, cTikT, dbfTmpTikL )

         ( cTikT )->( dbSkip() )

      end

   end

   ( cTikT )->( OrdSetFocus( nOrdAnt ) )
   ( cTikT )->( dbGoTo( nRecAnt ) )





   nTotal            := Abs( Round( nTotal, nDorDiv ) )





   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, cDiv )
      nTotal         := nCnv2Div( nTotal, cCodDiv, cDivRet, cDiv )
   end





   ( dbfTmpTikL )->( dbCloseArea() )

   dbfTmpTikL           := nil

Return ( if( lPic, Trans( nTotal, cPorDiv ), nTotal ) )



Function nTmpValTik( cTikT, cTikL, cDiv, cDivRet, lPic )

   local cPorDiv
   local nDorDiv
   local nOrdAnt
   local nTotal      := 0
   local cCodDiv     := ( cTikT )->cDivTik
   local nRecAnt     := ( cTikT )->( Recno() )

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( lPic == nil, lPic := .F., ) ;

   cPorDiv           := cPorDiv( cCodDiv, cDiv )
   nDorDiv           := nRouDiv( cCodDiv, cDiv )

   ( cTikT )->( dbGoTop() )
   while !( cTikT )->( eof() )
      nTotal      += nTotTik( ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik, cTikT, cTikL, cDiv, nil, cDivRet, .F. )
      ( cTikT )->( dbSkip() )
   end





   ( cTikT )->( dbGoTo( nRecAnt ) )





   nTotal            := Abs( Round( nTotal, nDorDiv ) )





   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, cDiv )
      nTotal         := nCnv2Div( nTotal, cCodDiv, cDivRet, cDiv )
   end

Return ( if( lPic, Trans( nTotal, cPorDiv ), nTotal ) )




Static function BeginTrans( aTmp, aGet, nMode, lNewFile )

   local oError
   local oBlock
   local nRecAnt
   local nOrdAnt
   local lErrors        := .F.
   local cNumTik        := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
   local cSerCli

   IIF( lNewFile == nil, lNewFile := .T., ) ;

   CursorWait()

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if Empty( aTmp[ 24 ] )
      aTmp[ 24 ]  := cDivEmp()
   end





   cPouDiv              := cPouDiv( aTmp[ 24 ], dbfDiv )
   cPorDiv              := cPorDiv( aTmp[ 24 ], dbfDiv )
   nDouDiv              := nDouDiv( aTmp[ 24 ], dbfDiv )
   nDorDiv              := nRouDiv( aTmp[ 24 ], dbfDiv )
   cPicEur              := cPorDiv( cDivChg(),        dbfDiv )





   lNowAppendLine       := .F.





   if lNewFile

      ( dbfTmpL   )->( dbCloseArea() )
      ( dbfTmpP   )->( dbCloseArea() )
      ( dbfTmpV   )->( dbCloseArea() )
      ( dbfTmpA   )->( dbCloseArea() )
      ( dbfTmpE   )->( dbCloseArea() )
      ( dbfTmpC   )->( dbCloseArea() )
      ( dbfTmpS   )->( dbCloseArea() )
      ( dbfTmpN   )->( dbCloseArea() )

      if !Empty( cNewFilL )
         dbfErase( cNewFilL )
      end

      if !Empty( cNewFilP )
         dbfErase( cNewFilP )
      end

      if !Empty( cNewFilV )
         dbfErase( cNewFilV )
      end

      if !Empty( cNewFilA )
         dbfErase( cNewFilA )
      end

      if !Empty( cNewFilE )
         dbfErase( cNewFilE )
      end

      if !Empty( cNewFilC )
         dbfErase( cNewFilC )
      end

      if !Empty( cNewFilS )
         dbfErase( cNewFilS )
      end

      if !Empty( cNewFilN )
         dbfErase( cNewFilN )
      end





      cNewFilL       := cGetNewFileName( cPatTmp() + "TikL" )
      dbCreate( cNewFilL, aSqlStruct( aColTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilL, cCheckArea( "TikL", @dbfTmpL ), .F. )
      if !NetErr()
         ( dbfTmpL )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpL )->( OrdCreate( cNewFilL, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
      end





      cNewFilP       := cGetNewFileName( cPatTmp() + "TikP" )
      dbCreate( cNewFilP, aSqlStruct( aPgoTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilP, cCheckArea( "TikP", @dbfTmpP ), .F. )
      if !NetErr()
         ( dbfTmpP )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpP )->( OrdCreate( cNewFilP, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
      end





      cNewFilV       := cGetNewFileName( cPatTmp() + "TikV"  )
      dbCreate( cNewFilV, aSqlStruct( aItmTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilV, cCheckArea( "TikV", @dbfTmpV ), .F. )
      if !NetErr()
         ( dbfTmpV )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpV )->( OrdCreate( cNewFilV, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
      end





      cNewFilA       := cGetNewFileName( cPatTmp() + "TikA"  )
      dbCreate( cNewFilA, aSqlStruct( aItmAntCli() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilA, cCheckArea( "TikA", @dbfTmpA ), .F. )
      if !NetErr()
         ( dbfTmpA )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpA )->( OrdCreate( cNewFilA, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
      end





      cNewFilE       := cGetNewFileName( cPatTmp() + "TikE"  )
      dbCreate( cNewFilE, aSqlStruct( aItmAlbPgo() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilE, cCheckArea( "TikE", @dbfTmpE ), .F. )
      if !NetErr()
         ( dbfTmpE )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpE )->( OrdCreate( cNewFilE, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
      end





      cNewFilC       := cGetNewFileName( cPatTmp() + "TikC" )
      dbCreate( cNewFilC, aSqlStruct( aColTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilC, cCheckArea( "TikC", @dbfTmpC ), .F. )
      if !NetErr()
         ( dbfTmpC )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpC )->( OrdCreate( cNewFilC, "CNUMTIL", "CSERTIL + CNUMTIL + CSUFTIL", {|| Field->cSerTil + Field->cNumTil + Field->cSufTil } ) )
      end





      cNewFilS       := cGetNewFileName( cPatTmp() + "TikS" )
      dbCreate( cNewFilS, aSqlStruct( aSerTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilS, cCheckArea( "TikS", @dbfTmpS ), .F. )
      if !NetErr()
         ( dbfTmpS )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpS )->( OrdCreate( cNewFilS, "nNumLin", "Str( nNumLin, 4 ) + cCbaTil", {|| Str( Field->nNumLin, 4 ) + Field->cCbaTil } ) )
      end





      cNewFilN       := cGetNewFileName( cPatTmp() + "TikAnu" )
      dbCreate( cNewFilN, aSqlStruct( aColTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilN, cCheckArea( "TikAnu", @dbfTmpN ), .F. )
      if !NetErr()
         ( dbfTmpN )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpN )->( OrdCreate( cNewFilN, "cNumTil", "cSerTil + nNumTil + cSufTil", {|| Field->cSerTil + Field->cNumTil + Field->cSufTil } ) )
      end

   else

      ( dbfTmpL   )->( __dbZap() )
      ( dbfTmpP   )->( __dbZap() )
      ( dbfTmpV   )->( __dbZap() )
      ( dbfTmpA   )->( __dbZap() )
      ( dbfTmpE   )->( __dbZap() )
      ( dbfTmpC   )->( __dbZap() )
      ( dbfTmpS   )->( __dbZap() )
      ( dbfTmpN   )->( __dbZap() )

      ( dbfTmpL   )->( dbGoTop() )
      ( dbfTmpP   )->( dbGoTop() )
      ( dbfTmpV   )->( dbGoTop() )
      ( dbfTmpA   )->( dbGoTop() )
      ( dbfTmpE   )->( dbGoTop() )
      ( dbfTmpC   )->( dbGoTop() )
      ( dbfTmpS   )->( dbGoTop() )
      ( dbfTmpN   )->( dbGoTop() )

   end

   do case
   case nMode == 1

      lApartado                        := .F.





      aTmp[ 27    ]              := .T.
      aTmp[ 50   ]              := .T.
      aTmp[ 28    ]              := .F.
      aTmp[ 26    ]              := .F.
      aTmp[ 4    ]              := "1"
      aTmp[ 5    ]              := cCurSesion()
      aTmp[ 3    ]              := RetSufEmp()
      aTmp[ 40    ]              := Date()
      aTmp[ 41    ]              := SubStr( Time(), 1, 5 )
      aTmp[ 6    ]              := GetSysDate()
      aTmp[ 51  ]              := ""
      aTmp[ 48   ]              := ""
      aTmp[ 49  ]              := ""
      aTmp[ 11    ]              := cDefCli()
      aTmp[ 13    ]              := RetFld( cDefCli(), dbfClient, "Titulo" )
      aTmp[ 14    ]              := RetFld( cDefCli(), dbfClient, "Domicilio" )
      aTmp[ 15    ]              := RetFld( cDefCli(), dbfClient, "Poblacion" )
      aTmp[ 16    ]              := RetFld( cDefCli(), dbfClient, "Provincia" )
      aTmp[ 18    ]              := RetFld( cDefCli(), dbfClient, "CodPostal" )
      aTmp[ 19    ]              := RetFld( cDefCli(), dbfClient, "Nif" )
      aTmp[ 69    ]              := RetFld( cDefCli(), dbfClient, "nRegIva" )
      aTmp[ 65    ]              := 0

      if !Empty( RetFld( cDefCli(), dbfClient, "nTarifa" ) )
         if !Empty( aGet[ 12 ] )
            aGet[ 12 ]:cText( RetFld( cDefCli(), dbfClient, "nTarifa" ) )
         else
            aTmp[ 12 ]           := RetFld( cDefCli(), dbfClient, "nTarifa" )
         end
      else
         aTmp[ 12    ]           := Max( uFieldEmpresa( "nPreVta" ), 1 )
      end

      if !Empty( aGet[ 11 ] )
         aGet[ 11 ]:cText( cDefCli() )
      end

      if !Empty( aGet[ 13 ] )
         aGet[ 13 ]:cText( RetFld( cDefCli(), dbfClient, "Titulo" ) )
      end





      cSerCli                 := RetFld( cDefCli(), dbfClient, "Serie" )

      if !Empty( aGet[ 1 ] )
         if Empty( cSerCli )
            aGet[ 1 ]:cText( cNewSer( "nTikCli", dbfCount ) )
         else
            aGet[ 1 ]:cText( cSerCli )
         end
      else
         if Empty( cSerCli )
            aTmp[ 1 ]  := cNewSer( "nTikCli", dbfCount )
         else
            aTmp[ 1 ]  := cSerCli
         end
      end

      if !Empty( oGrupoSerie )
         oGrupoSerie:cPrompt  := "Serie: " + aTmp[ 1 ]
      end

      if !Empty( aGet[ 9 ] )
         aGet[ 9 ]:cText( oUser():cCaja() )
      else
         aTmp[ 9 ]     := oUser():cCaja()
      end

      if !Empty( aGet[ 21 ] )
         aGet[ 21 ]:cText( cDefFpg() )
      else
         aTmp[ 21 ]     := cDefFpg()
      end

      if !Empty( aGet[ 10 ] )
         aGet[ 10 ]:cText( oUser():cAlmacen() )
      else
         aTmp[ 10 ]     := oUser():cAlmacen()
      end

      if !Empty( aGet[ 8 ] )
         aGet[ 8 ]:cText( cCurUsr() )
      else
         aTmp[ 8 ]     := cCurUsr()
      end

      if !Empty( aGet[ 38 ] )
         aGet[ 38 ]:cText( cProCnt() )
      else
         aTmp[ 38 ]     := cProCnt()
      end

      if !Empty( aGet[ 46 ] )
         aGet[ 46 ]:cText( RetFld( cCurUsr(), dbfUsr, "cCodDlg" ) )
      else
         aTmp[ 46 ]     := RetFld( cCurUsr(), dbfUsr, "cCodDlg" )
      end

      aTmp[ 52    ]     := 0

      if !Empty( aGet[ 56 ] )
         aGet[ 56 ]:cText( Padr( "General", 50 ) )
      else
         aTmp[ 56 ]     := Padr( "General", 50 )
      end

      if !Empty( aGet[ 57 ] )
         aGet[ 57 ]:cText( 0 )
      else
         aTmp[ 57 ]     := 0
      end

      if !Empty( aGet[ 58 ] )
         aGet[ 58    ]:cText( Padr( "Pronto pago", 50 ) )
      else
         aTmp[ 58    ]     := Padr( "Pronto pago", 50 )
      end

      if !Empty( aGet[ 59 ] )
         aGet[ 59    ]:cText( 0 )
      else
         aTmp[ 59    ]     := 0
      end

      if !Empty( oTotEsp )
         oTotEsp:cText( 0 )
      end

      if !Empty( oTotDpp )
         oTotDpp:cText( 0 )
      end





      if !Empty( oSalaVentas ) .AND. IsFalse( oSalaVentas:lPuntosVenta )
         aTmp[ 48   ]           := oSalaVentas:cSelectedSala
         aTmp[ 49  ]           := oSalaVentas:cSelectedPunto
         aTmp[ 12    ]           := oSalaVentas:nSelectedPrecio
      end

      if !Empty( oBtnTipoVta )
         oBtnTipoVta:cPrompt           := "Ticket"
         oBtnTipoVta:cxBmp             := "Cashier_user1_32"
      end

   case nMode == 2 .OR. nMode == 3 .OR. nMode == 4

      if nMode == 4





         cSerCli                       := RetFld( cDefCli(), dbfClient, "Serie" )

         if !Empty( aGet[ 1 ] )
            if Empty( cSerCli )
               aGet[ 1 ]:cText( cNewSer( "nFacCli", dbfCount ) )
            else
               aGet[ 1 ]:cText( cSerCli )
            end
         else
            if Empty( cSerCli )
               aTmp[ 1 ]        := cNewSer( "nFacCli", dbfCount )
            else
               aTmp[ 1 ]        := cSerCli
            end
         end

         aTmp[ 2 ]              := 0
         aTmp[ 5 ]              := cCurSesion()

      end

      lApartado                        := ( aTmp[ 4 ] == "5" .OR. aTmp[ 4 ] == "1" )

      aTmp[ 27 ]                 := .T.

      if ( dbfTikT )->cTipTik == "2"

         LoaAlb2Tik()





         nRecAnt  := ( dbfAlbCliP )->( Recno() )
         nOrdAnt  := ( dbfAlbCliP )->( OrdSetFocus( "NNUMALB" ) )

         if ( dbfAlbCliP )->( dbSeek( ( dbfTikT )->cNumDoc ) )
            while ( ( dbfAlbCliP )->cSerAlb + Str( ( dbfAlbCliP )->nNumAlb ) + ( dbfAlbCliP )->cSufAlb ) == ( dbfTikT )->cNumDoc .AND. !( dbfAlbCliP )->( eof() )
               dbPass( dbfAlbCliP, dbfTmpE, .T. )
               ( dbfAlbCliP )->( dbSkip() )
            end
         end
         ( dbfTmpE )->( dbGoTop() )

         ( dbfAlbCliP )->( OrdSetFocus( nOrdAnt ) )
         ( dbfAlbCliP )->( dbGoTo( nRecAnt ) )

      elseif ( dbfTikT )->cTipTik == "3"

         if ( dbfFacCliL )->( dbSeek( ( dbfTikT )->cNumDoc ) )

            while ( ( dbfFacCliL )->cSerie + Str( ( dbfFacCliL )->nNumFac ) + ( dbfFacCliL )->cSufFac == ( dbfTikT )->cNumDoc .AND. !( dbfFacCliL )->( eof() ) )

               ( dbfTmpL )->( dbAppend() )
               ( dbfTmpL )->cCbaTil    := ( dbfFacCliL )->cRef
               ( dbfTmpL )->cNomTil    := ( dbfFacCliL )->cDetalle
               ( dbfTmpL )->nPvpTil    := ( dbfFacCliL )->nPreUnit
               ( dbfTmpL )->nDtoLin    := ( dbfFacCliL )->nDto
               ( dbfTmpL )->nIvaTil    := ( dbfFacCliL )->nIva
               ( dbfTmpL )->cCodPr1    := ( dbfFacCliL )->cCodPr1
               ( dbfTmpL )->cCodPr2    := ( dbfFacCliL )->cCodPr2
               ( dbfTmpL )->cValPr1    := ( dbfFacCliL )->cValPr1
               ( dbfTmpL )->cValPr2    := ( dbfFacCliL )->cValPr2
               ( dbfTmpL )->nFacCnv    := ( dbfFacCliL )->nFacCnv
               ( dbfTmpL )->nDtoDiv    := ( dbfFacCliL )->nDtoDiv
               ( dbfTmpL )->nCtlStk    := ( dbfFacCliL )->nCtlStk
               ( dbfTmpL )->nValImp    := ( dbfFacCliL )->nValImp
               ( dbfTmpL )->cCodImp    := ( dbfFacCliL )->cCodImp
               ( dbfTmpL )->mNumSer    := ( dbfFacCliL )->mNumSer
               ( dbfTmpL )->nUntTil    := nTotNFacCli( dbfFacCliL )
               ( dbfTmpL )->( dbUnLock() )

               ( dbfFacCliL )->( dbSkip() )

            end
         end
         ( dbfTmpL )->( dbGoTop() )





         if ( dbfFacCliP )->( dbSeek( ( dbfTikT )->cNumDoc ) )

            while ( dbfFacCliP )->cSerie + Str( ( dbfFacCliP )->nNumFac ) + ( dbfFacCliP )->cSufFac == ( dbfTikT )->cNumDoc .AND. !( dbfFacCliP )->( eof() )

               if ( dbfFacCliP )->lCobrado
                  ( dbfTmpP )->( dbAppend() )
                  ( dbfTmpP )->cCodCaj    := ( dbfFacCliP )->cCodCaj
                  ( dbfTmpP )->dPgoTik    := ( dbfFacCliP )->dEntrada
                  ( dbfTmpP )->nImpTik    := ( dbfFacCliP )->nImporte
                  ( dbfTmpP )->cDivPgo    := ( dbfFacCliP )->cDivPgo
                  ( dbfTmpP )->nVdvPgo    := ( dbfFacCliP )->nVdvPgo
                  ( dbfTmpP )->cPgdPor    := ( dbfFacCliP )->cPgdoPor
                  ( dbfTmpP )->cTurPgo    := ( dbfFacCliP )->cTurRec
                  ( dbfTmpP )->cCtaRec    := ( dbfFacCliP )->cCtaRec
                  ( dbfTmpP )->cFpgPgo    := ( dbfFacCliP )->cCodPgo
               end

               ( dbfFacCliP )->( dbSkip() )

            end

         end





         nRecAnt  := ( dbfAntCliT )->( Recno() )
         nOrdAnt  := ( dbfAntCliT )->( OrdSetFocus( "cNumDoc" ) )

         if ( dbfAntCliT )->( dbSeek( ( dbfTikT )->cNumDoc ) )
            while ( dbfAntCliT )->cNumDoc == ( dbfTikT )->cNumDoc .AND. !( dbfAntCliT )->( eof() )
               dbPass( dbfAntCliT, dbfTmpA, .T. )
               ( dbfAntCliT )->( dbSkip() )
            end
         end
         ( dbfTmpA )->( dbGoTop() )

         ( dbfAntCliT )->( OrdSetFocus( nOrdAnt ) )
         ( dbfAntCliT )->( dbGoTo( nRecAnt ) )

      else





         if ( dbfTikL )->( dbSeek( cNumTik ) )
            while ( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == cNumTik .AND. !( dbfTikL )->( eof() ) )

               if dbLock( dbfTikL )
                  ( dbfTikL )->nUndAnt    := ( dbfTikL )->nUntTil
                  ( dbfTikL )->( dbUnLock() )
               end

               dbPass( dbfTikL, dbfTmpL, .T. )
               ( dbfTikL )->( dbSkip() )
            end

         end

         ( dbfTmpL )->( dbGoTop() )





         if ( dbfTikP )->( dbSeek( cNumTik ) )
            while ( ( dbfTikP )->cSerTik + ( dbfTikP )->cNumTik + ( dbfTikP )->cSufTik == cNumTik .AND. !( dbfTikP )->( eof() ) )
               dbPass( dbfTikP, dbfTmpP, .T. )
               ( dbfTikP )->( dbSkip() )
            end
         end

         ( dbfTmpP )->( dbGoTop() )





         nRecAnt     := ( dbfTikT )->( Recno() )
         nOrdAnt     := ( dbfTikT )->( OrdSetFocus( "cDocVal" ) )

         if ( dbfTikT )->( dbSeek( cNumTik ) )
            while ( dbfTikT )->cValDoc == cNumTik .AND. !( dbfTikT )->( eof() )
               dbPass( dbfTikT, dbfTmpV, .T. )
               ( dbfTikT )->( dbSkip() )
            end
         end

         ( dbfTikT )->( dbGoTo( nRecAnt ) )
         ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )

         ( dbfTmpV )->( dbGoTop() )





         oSalaVentas:SetSalaVta( aTmp, dbfTikT )

      end

   end





   if !Empty( oBtnUp ) .AND. !Empty( oBtnDown )
      oBtnUp:lEnabled   := ( nMode == 2 .OR. nMode == 3 )
      oBtnDown:lEnabled := ( nMode == 2 .OR. nMode == 3 )
   end





   cTextoOfficeBar( aTmp )





   cOldCodCli           := aTmp[ 11 ]





   if !Empty( aGetTxt )
      aGetTxt[ 1 ]      := RetFld( aTmp[ 9 ], dbfCajT )
      aGetTxt[ 2 ]      := RetFld( aTmp[ 10 ], dbfAlm )
      aGetTxt[ 3 ]      := RetFld( aTmp[ 21 ], dbfFPago )
      aGetTxt[ 5 ]      := RetFld( aTmp[ 11 ] + aTmp[ 35 ], dbfObrasT, "cNomObr" )
      aGetTxt[ 6 ]      := RetFld( aTmp[ 32 ], dbfAgent )
      aGetTxt[ 7 ]      := RetFld( aTmp[ 33 ], dbfRuta )
      aGetTxt[ 8 ]      := RetFld( aTmp[ 34 ], dbfTarPreS )
      aGetTxt[ 9 ]      := RetFld( aTmp[ 11 ], dbfClient,   "Telefono" )
      aGetTxt[ 10]      := RetFld( aTmp[ 8 ], dbfUsr,      "cNbrUse" )
   end





   lSave                := .F.











   if !Empty( oBrwDet )
      oBrwDet:Refresh()
   end

   RECOVER USING oError

      msgStop( ErrorMessage( oError ), "Imposible crear tablas temporales." )

      KillTrans()

      lErrors     := .T.

   end

   ErrorBlock( oBlock )

   CursorWE()

Return ( lErrors )



Static Function KillTrans( oBrwPgo, oBrwVal )

   CursorWait()

   if !Empty( dbfTmpL ) .AND. ( dbfTmpL )->( Used() )
      ( dbfTmpL )->( dbCloseArea() )
   end

   if !Empty( dbfTmpP ) .AND. ( dbfTmpP )->( Used() )
      ( dbfTmpP )->( dbCloseArea() )
   end

   if !Empty( dbfTmpV ) .AND. ( dbfTmpV )->( Used() )
      ( dbfTmpV )->( dbCloseArea() )
   end

   if !Empty( dbfTmpA ) .AND. ( dbfTmpA )->( Used() )
      ( dbfTmpA )->( dbCloseArea() )
   end

   if !Empty( dbfTmpE ) .AND. ( dbfTmpE )->( Used() )
      ( dbfTmpE )->( dbCloseArea() )
   end

   if !Empty( dbfTmpC ) .AND. ( dbfTmpC )->( Used() )
      ( dbfTmpC )->( dbCloseArea() )
   end

   if !Empty( dbfTmpS ) .AND. ( dbfTmpS )->( Used() )
      ( dbfTmpS )->( dbCloseArea() )
   end

   if !Empty( dbfTmpN ) .AND. ( dbfTmpN )->( Used() )
      ( dbfTmpN )->( dbCloseArea() )
   end

   dbfErase( cNewFilL )
   dbfErase( cNewFilP )
   dbfErase( cNewFilV )
   dbfErase( cNewFilA )
   dbfErase( cNewFilE )
   dbfErase( cNewFilC )
   dbfErase( cNewFilS )
   dbfErase( cNewFilN )

   oOfficeBar  := nil

   dbfTmpL     := nil
   dbfTmpP     := nil
   dbfTmpV     := nil
   dbfTmpA     := nil
   dbfTmpE     := nil
   dbfTmpC     := nil
   dbfTmpS     := nil
   dbfTmpN     := nil

   CursorWE()

Return .T.



Static Function ClickOnBrowse( nRow, aTmp, aGet, oBrwDet )

   local nBrwHeight

   nBrwHeight        := oBrwDet:HeaderHeight() + ( oBrwDet:nRowHeight * oBrwDet:nDataRows )

   if !( nRow < nBrwHeight )

      AppDetRec( oBrwDet, bEditL, aTmp, cPorDiv, cPicEur )

      aGet[ 11 ]:SetFocus()

   end

Return ( .T. )


























































































STATIC FUNCTION AppDetRec( oBrw, bEditL, aTmp, cPorDiv, cPicEur, cCodArt )

   SysRefresh()

   if lStopEntContLine
      lStopEntContLine  := .F.
      return ( lRecTotal( aTmp ) )
   end

   if Empty( aTmp[ 12 ] )
      aTmp[ 12 ]  := Max( uFieldEmpresa( "nPreVta" ), 1 )
   end





   lNowAppendLine       := .T.

   while WinAppRec( oBrw, bEditL, dbfTmpL, , cCodArt, aTmp )

      sysrefresh()

      if !Empty( cCodArt )
         cCodArt        := nil
      end

      sysrefresh()

   end

RETURN ( lRecTotal( aTmp ) )






STATIC FUNCTION EdtDet( aTmp, aGet, dbfTmpL, oBrw, bWhen, cCodArt, nMode, aTik )

   local n
   local oCol
   local aPos
    local oBtn
   local lTwo              := .F.
   local nTop
   local nLeft
   local nWidth
   local nHeight
   local oBtnSer
   local oGetTotal
    local nGetTotal            := 0
   local lMsgVta           := .F.
   local lNotVta           := .F.
   local cName
   local nCaptura
   local oCodBarras
   local cCodBarras        := Space( 18 )






   if nMode == 1

      if !Empty( oBrw )
         oBrw:GoBottom()
      end

      aTmp[ 8 ]     := 1
      aTmp[ 46 ]     := 0
      aTmp[ 47 ]     := 0
      aTmp[ 48 ]     := 0
      aTmp[ 2 ]     := aTik[ 2 ]
      aTmp[ 27 ]     := aTik[ 10 ]
      aTmp[ 31 ]     := nLastNum( dbfTmpL )
      aTmp[ 10 ]     := nIva( dbfIva, cDefIva() )

      if ( dbfTmpL )->( eof() )
         nTop              := ( ( oBrw:nRowSel - 1 ) * oBrw:nRowHeight ) + oBrw:HeaderHeight() - 1
      else
         nTop              := ( ( oBrw:nRowSel ) * oBrw:nRowHeight ) + oBrw:HeaderHeight() - 1
      end

      if !Empty( cCodArt )
         aTmp[ 5 ]  := cCodArt
      end

   else

      nTop                 := ( ( oBrw:nRowSel - 1 ) * oBrw:nRowHeight ) + oBrw:HeaderHeight() - 1

   end





   nLeft                   := 25

   aPos                    := { nTop, nLeft }
   aPos                    := ClientToScreen( oBrw:hWnd, aPos )

   nTop                    := aPos[ 1 ]
   nLeft                   := aPos[ 2 ]
   nHeight                 := oBrw:nRowHeight + nTop
   nWidth                  := oBrw:BrwWidth() + nLeft - 15





   if Empty( cCodArt )
      cOldCodArt           := aTmp[ 5 ]
   end
   cOldPrpArt              := aTmp[ 19 ] + aTmp[ 20 ] + aTmp[ 21 ] + aTmp[ 22 ]










   oDlgDet = TDialog():New( nTop, nLeft, nHeight, nWidth,,,, .F., nOR( 268435456, 2147483648, 4 ),,,, oBrw, .T.,,,,,, .F., )
      for each oCol in oBrw:aCols

         cName       := oCol:Cargo[ 1 ]
         nCaptura    := oCol:Cargo[ 2 ]

         do case
            case cName == "Código del artículo"







               aGet[ 5 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oDlgDet,,, "@!",,,, oBrw:oFont, .F.,, .F.,, .F., {||     ( nMode == 1 )}, .F., .F.,, .F., .F., .T.,, .F.,,,,,,, "LUPA", )

               aGet[ 5 ]:bLostFocus         := {|| LoaArt( aGet, aTmp, oBrw, oGetTotal, aTik, lTwo, nMode, oDlgDet, @lMsgVta, @lNotVta ) }
               aGet[ 5 ]:bHelp              := {|| SetLostFocusOff(), BrwArticulo( aGet[ 5 ], aGet[ 6 ] ), SetLostFocusOn() }
               aGet[ 5 ]:bValid             := {|| lCodigoArticulo( aGet, aTmp, .T. ) }

               do case
               case nCaptura == 1
                  aGet[ 5 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 5 ]:bValid          := {|| lCodigoArticulo( aGet, aTmp, .T. ) }
               case nCaptura == 3
                  aGet[ 5 ]:lNeedGetFocus   := .T.
               end

               aGet[ 5 ]:Cargo              := "Código del artículo"

            case cName == "Unidades"






               aGet[ 8 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oDlgDet,,, cPicUnd,,,,, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 8 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 8 ]:bValid          := {|| !Empty( aTmp[ 8 ] ) }
               case nCaptura == 3
                  aGet[ 8 ]:lNeedGetFocus   := .T.
               end

               aGet[ 8 ]:Cargo              := "Unidades"

            case cName == "Medición 1"






               aGet[ 46 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 46 ], aTmp[ 46 ]:= u ) }, oDlgDet,,, cPicUnd,,,,, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 46 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 46 ]:bValid          := {|| .T. }
               case nCaptura == 3
                  aGet[ 46 ]:lNeedGetFocus   := .T.
               end

               aGet[ 46 ]:Cargo              := "Medición 1"

            case cName == "Medición 2"






               aGet[ 47 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 47 ], aTmp[ 47 ]:= u ) }, oDlgDet,,, cPicUnd,,,,, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 47 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 47 ]:bValid          := {|| .T. }
               case nCaptura == 3
                  aGet[ 47 ]:lNeedGetFocus   := .T.
               end

               aGet[ 47 ]:Cargo              := "Medición 2"

            case cName == "Medición 3"






               aGet[ 48 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 48 ], aTmp[ 48 ]:= u ) }, oDlgDet,,, cPicUnd,,,,, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 48 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 48 ]:bValid          := {|| .T. }
               case nCaptura == 3
                  aGet[ 48 ]:lNeedGetFocus   := .T.
               end

               aGet[ 48 ]:Cargo              := "Medición 3"

            case cName == "Propiedad 1"










               aGet[ 21 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oDlgDet,,, "@!", {||    ( if( lPrpAct( aTmp[ 21 ], nil, aTmp[ 19 ], dbfTblPro ), LoaArt( aGet, aTmp, oBrw, oGetTotal, aTik, lTwo, nMode, oDlgDet, @lMsgVta, @lNotVta ), .F. ) )},,, oBrw:oFont, .F.,, .F.,, .F., {||     ( !Empty( aTmp[ 19 ] ) )}, .F., .F.,, .F., .F., .T.,, .F.,,,,,,, "LUPA", )

               aGet[ 21 ]:bHelp              := {|| SetLostFocusOff(), brwPrpAct( aGet[ 21 ], nil, aTmp[ 19 ] ), SetLostFocusOn() }

               do case
               case nCaptura == 1
                  aGet[ 21 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 21 ]:bWhen           := {|| .T. }
               case nCaptura == 3
                  aGet[ 21 ]:lNeedGetFocus   := .T.
               end

            case cName == "Propiedad 2"










               aGet[ 22 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 22 ], aTmp[ 22 ]:= u ) }, oDlgDet,,, "@!", {||    ( if( lPrpAct( aTmp[ 22 ], nil, aTmp[ 20 ], dbfTblPro ), LoaArt( aGet, aTmp, oBrw, oGetTotal, aTik, lTwo, nMode, oDlgDet, @lMsgVta, @lNotVta ), .F. ) )},,, oBrw:oFont, .F.,, .F.,, .F., {||     ( !Empty( aTmp[ 20 ] ) )}, .F., .F.,, .F., .F., .T.,, .F.,,,,,,, "LUPA", )

               aGet[ 22 ]:bHelp              := {|| SetLostFocusOff(), brwPrpAct( aGet[ 22 ], nil, aTmp[ 20 ] ), SetLostFocusOn() }

               do case
               case nCaptura == 1
                  aGet[ 22 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 22 ]:bWhen           := {|| .T. }
               case nCaptura == 3
                  aGet[ 22 ]:lNeedGetFocus   := .T.
               end

            case cName == "Lote"





               aGet[ 42 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 42 ], aTmp[ 42 ]:= u ) }, oDlgDet,,,,,,, oBrw:oFont, .F.,, .F.,, .F.,, .F., .T.,, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 42 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 42 ]:bWhen           := {|| !Empty( aTmp[ 42 ] ) }
               case nCaptura == 3
                  aGet[ 42 ]:lNeedGetFocus   := .T.
               end

            case cName == "Detalle"






               aGet[ 6 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oDlgDet,,,, {||    ( .T. )},,, oBrw:oFont, .F.,, .F.,, .F., {||     ( lModDes() )}, .F., .F.,, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 6 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 6 ]:bWhen           := {|| lModDes() .OR. Empty( aTmp[ 6 ] ) }
               case nCaptura == 3
                  aGet[ 6 ]:lNeedGetFocus   := .T.
               end

            case cName == "Importe"







               aGet[ 7 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 7 ], aTmp[ 7 ]:= u ) }, oDlgDet,,, cPouDiv,,,, oBrw:oFont, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 7 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 7 ]:bWhen           := {|| Empty( aTmp[ 7 ] ) }
               case nCaptura == 3
                  aGet[ 7 ]:lNeedGetFocus   := .T.
               end

            case cName == "Descuento lineal"








               aGet[ 24 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 24 ], aTmp[ 24 ]:= u ) }, oDlgDet,,, cPouDiv,, ( 255 + ( 0 * 256 ) + ( 0 * 65536 ) ),, oBrw:oFont, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 24 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 24 ]:bWhen           := {|| Empty( aTmp[ 24 ] ) }
               case nCaptura == 3
                  aGet[ 24 ]:lNeedGetFocus   := .T.
               end

            case cName == "Descuento porcentual"







               aGet[ 18 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oDlgDet,,, "@E 999.99",,,, oBrw:oFont, .F.,, .F.,, .F.,, .F., .T., {|nKey, nFlags, Self| ( lCalcDeta( aTmp, oGetTotal ) )}, .F., .F., .T.,, .F.,,,,,,,, )

               do case
               case nCaptura == 1
                  aGet[ 18 ]:bWhen           := {|| .F. }
               case nCaptura == 2
                  aGet[ 18 ]:bWhen           := {|| Empty( aTmp[ 18 ] ) }
               case nCaptura == 3
                  aGet[ 18 ]:lNeedGetFocus   := .T.
               end

            case cName == "Total"







               oGetTotal := TGetHlp():New( 0, 0, { | u | If( PCount()==0, nGetTotal, nGetTotal:= u ) }, oDlgDet,,, cPorDiv,,,, oBrw:oFont, .F.,, .F.,, .F., {||     .F.}, .F., .T.,, .F., .F., .T.,, .F.,,,,,,,, )

            case cName == "Número de serie"





               oBtnSer := TButton():New( 0, 0, ( "&Series" ), oDlgDet, {||   ( SetLostFocusOff(), EditarNumeroSerie( aTmp, oStock, nMode ),SetLostFocusOn() )},,,, oBrw:oFont, .F., .F., .F.,, .F.,,, .F. )

            case cName == "Promoción"





               aGet[ 58 ] := TBitmap():New( 0, 0, 16, 16, "Star_Blue_16",, .T., oDlgDet,,, .F., .F.,,, .F.,, .F.,, .F. )

               aGet[ 58 ]:lTransparent   := .T.

            case cName == "Oferta"





               aGet[ 67 ] := TBitmap():New( 0, 0, 16, 16, "Star_Red_16",, .T., oDlgDet,,, .F., .F.,,, .F.,, .F.,, .F. )

               aGet[ 67 ]:lTransparent   := .T.

            case cName == "Número de línea"







               aGet[ 31 ] := TGetHlp():New( 0, 0, { | u | If( PCount()==0, aTmp[ 31 ], aTmp[ 31 ]:= u ) }, oDlgDet,,, "9999",,,, oBrw:oFont, .F.,, .F.,, .F., {||     .F.}, .F., .T.,, .F., .F., .T.,, .F.,,,,,,,, )

            case cName == "Código de barras"






               oCodBarras := TGetHlp():New( 0, 0, { | u | If( PCount()==0, cCodBarras, cCodBarras:= u ) }, oDlgDet,,, "@!",,,, oBrw:oFont, .F.,, .F.,, .F., {||     ( .F. )}, .F., .F.,, .F., .F., .T.,, .F.,,,,,,,, )

         end

      next








      oBtn := TButton():New( 0, 0, ( if( nMode == 1, "&A", "&M" ) ), oDlgDet, {||   ( SavLine( aTmp, aGet, dbfTmpL, oBrw, aTik, oGetTotal, lTwo, nMode, oBtn, cPorDiv, cPicEur, lMsgVta, lNotVta, cCodArt, oStock ) )},,,, oBrw:oFont, .F., .F., .F.,, .F., {||     ( nMode <> 3 )},, .F. )

      oDlgDet:AddFastKey( 122, {|| GetPesoBalanza( aGet, oBtn ) } )

      oDlgDet:bKeyDown        := { | nKey | EdtDetKeyDown( nKey, aGet, oDlgDet, oBtn ) }
      oDlgDet:bStart          := { || if( !Empty( cCodArt ), ( Eval( aGet[ 5 ]:bLostFocus ), aGet[ 5 ]:lValid() ), ), SetDlgMode( oDlgDet, aTmp, aGet, nMode, oBrw, oBtn, nTop, nLeft, nHeight, nWidth ) }

      oDlgDet:bLostFocus      := { || DlgLostFocus( nMode, aTmp ) }

      SetLostFocusOn()

   oDlgDet:Activate( , , , .F., , .T. )

   oBrw:SetFocus()
   oBrw:Refresh()

RETURN ( oDlgDet:nResult == 1 )



static function SetDlgMode( oDlg, aTmp, aGet, nMode, oBrw, oBtn )

   local n
   local oCtl
   local nRow
   local nCol
   local nWidth
   local nHeight
   local nGWidth  := 25



   for n := 1 to len( oDlg:aControls ) - 1

      nRow        := 3
      nCol        := oBrw:aCols[ n ]:nDisplayCol - 25
      nWidth      := oBrw:aCols[ n ]:nWidth - 2
      nHeight     := oBrw:nRowHeight - 4

      nGWidth     += oBrw:aCols[ n ]:nWidth - 1

      oDlg:aControls[ n ]:Move( nRow, nCol, nWidth, nHeight, .T. )

   next

   oBtn:Move( nRow, nGWidth, nHeight + 4, nHeight + 4, .T. )

   if Empty( aTmp[ 7 ] ) .OR. oUser():lAdministrador() .OR. oUser():lCambiarPrecio()
      IIF( !Empty( aGet[ 7 ] ), aGet[ 7 ]:HardEnable(), )
      IIF( !Empty( aGet[ 24 ] ), aGet[ 24 ]:HardEnable(), )
      IIF( !Empty( aGet[ 18 ] ), aGet[ 18 ]:HardEnable(), )
   else
      IIF( !Empty( aGet[ 7 ] ), aGet[ 7 ]:HardDisable(), )
      IIF( !Empty( aGet[ 24 ] ), aGet[ 24 ]:HardDisable(), )
      IIF( !Empty( aGet[ 18 ] ), aGet[ 18 ]:HardDisable(), )
   end

   if !Empty( aGet[ 58 ] )

      if aTmp[ 58 ]
         aGet[ 58 ]:Show()
      else
         aGet[ 58 ]:Hide()
      end

   end

   if !Empty( aGet[ 67 ] )

      if aTmp[ 67 ]
         aGet[ 67 ]:Show()
      else
         aGet[ 67 ]:Hide()
      end

   end





   for each oCtl in oDlg:aControls

      if !Empty( oCtl ) .AND. oCtl:ClassName == "TGETHLP"

         if Empty( oCtl:bWhen ) .OR. Eval( oCtl:bWhen )

            if oCtl:lNeedGetFocus .AND. !oCtl:lGotFocus

               oCtl:SetFocus()

               Return .T.

            end

         end

      end

   next

return .T.






Static Function lCalcDeta( aTmp, oTotal, lTotal )

   local nCalculo

   IIF( lTotal == nil, lTotal := .F., ) ;

   nCalculo       := aTmp[ 7 ]
   nCalculo       *= aTmp[ 8 ]

    IF aTmp[ 18 ] <> 0
        nCalculo     -= nCalculo * aTmp[ 18 ] / 100
    end

   nCalculo       -= aTmp[ 24 ]

   if !Empty( oTotal )
      oTotal:cText( nCalculo )
   end

Return if( !lTotal, .T., nCalculo )



Static Function EdtDetKeyDown( nKey, aGet, oDlg, oBtn )

   do case
      case nKey == 27

         oDlg:End()

      case nKey == 13

         oBtn:Click()

      case nKey == 116

         if !Empty( aGet[ 5 ]:VarGet() )

            Eval( oBtn:bAction )

         else

            oDlg:End()

            if !Empty( oBtnTik:bWhen ) .AND. Eval( oBtnTik:bWhen )
               Eval( oBtnTik:bAction )
            end

         end

      case nKey == 118

         if !Empty( aGet[ 5 ]:VarGet() )

            Eval( oBtn:bAction )

         else

            oDlg:End()

            if !Empty( oBtnAlb:bWhen ) .AND. Eval( oBtnAlb:bWhen )
               Eval( oBtnAlb:bAction )
            end

         end

      case nKey == 119

         if !Empty( aGet[ 5 ]:VarGet() )

            Eval( oBtn:bAction )

         else

            oDlg:End()

            if !Empty( oBtnFac:bWhen ) .AND. Eval( oBtnFac:bWhen )
               Eval( oBtnFac:bAction )
            end

         end

      case nKey == 120

         if !Empty( aGet[ 5 ]:VarGet() )

            Eval( oBtn:bAction )

         else

            oDlg:End()

            if !Empty( oBtnApt:bWhen ) .AND. Eval( oBtnApt:bWhen )
               Eval( oBtnApt:bAction )
            end

         end

      case nKey == 65 .AND. GetKeyState( 17 )

         SetLostFocusOff()
         CreateInfoArticulo()
         SetLostFocusOn()

   end

Return nil







STATIC FUNCTION SavLine( aTmp, aGet, dbfTmpL, oBrw, aTik, oGetTotal, lTwo, nMode, oBtn, cPorDiv, cPicEur, lMsgVta, lNotVta, cCodArt, oStock )

   local lOk
   local oCtl
   local aClo
   local aXbYStr
   local nStockActual

   aClo                 := aClone( aTmp )





   oBtn:SetFocus()





   if !Empty( aGet[ 7 ] )
      aGet[ 7 ]:Refresh()
   end

   if !Empty( aGet[ 8 ] )
      aGet[ 8 ]:Refresh()
   end





   for each oCtl in oDlgDet:aControls

      if !Empty( oCtl ) .AND. oCtl:ClassName == "TGETHLP"

         if Empty( oCtl:bWhen ) .OR. Eval( oCtl:bWhen )

            if oCtl:lNeedGetFocus .AND. !oCtl:lGotFocus

               SetLostFocusOff()
               msgWait( "Campo obligatorio", "Info", 0 )
               SetLostFocusOn()

               oCtl:SetFocus()

               Return .F.

            end

         end

      end

   next





   if Empty( aTmp[ 8 ] )
      aGet[ 8 ]:SetFocus()
      return .F.
   end

   if !lCodigoArticulo( aGet, aTmp, .F. )
      aGet[ 5 ]:SetFocus()
      return .F.
   end





   if ( nMode == 1 ) .AND. RetFld( aTmp[ 5 ], dbfArticulo, "lNumSer" ) .AND. !( dbfTmpS )->( dbSeek( Str( aTmp[ 31 ], 4 ) + aTmp[ 5 ] ) )

      SetLostFocusOff()
      MsgStop( "Tiene que introducir números de serie para este artículo." )
      SetLostFocusOn()

      SetLostFocusOff()
      EditarNumeroSerie( aTmp, oStock, nMode )
      SetLostFocusOn()

      Return .F.

   end

   if lTwo .AND. empty( aTmp[14 ] )

      SetLostFocusOff()
      msgWait( "Introduzca artículo combinado", "Stop", 0 )
      SetLostFocusOn()

      aGet[ 14 ]:setFocus()

      return .F.

   end

   if !Empty( aTmp[ 19 ] ) .AND. Empty( aTmp[ 21 ] ) .AND. !Empty( aGet[ 21 ] )

      SetLostFocusOff()
      MsgBeepStop( "Primera propiedad no puede estar vacia", "Aviso del sistema" )
      SetLostFocusOn()

      aGet[ 21 ]:SetFocus()

      return .F.

   end

   if !Empty( aTmp[ 20 ] ) .AND. Empty( aTmp[ 22 ] ) .AND. !Empty( aGet[ 22 ] )

      SetLostFocusOff()
      MsgBeepStop( "Segunda propiedad no puede estar vacia", "Aviso del sistema" )
      SetLostFocusOn()

      aGet[ 22 ]:SetFocus()

      return .F.

   end





   if Empty( aTmp[ 7 ] )

      if !lPermitirVentaSinValorar( aTmp[ 5 ], dbfArticulo, dbfFamilia )

         if lUsrMaster()

            SetLostFocusOff()
            lOk   := ApoloMsgNoYes( "Precio igual a cero, ¿desea continuar con la venta?" )
            SetLostFocusOn()

            if !lOk
               aGet[ 7 ]:SetFocus()
               return .F.
            end

         else

            aGet[ 7 ]:SetFocus()
            return .F.

         end

      else

         SetLostFocusOff()
         lOk   := ApoloMsgNoYes( "Precio igual a cero, ¿desea continuar con la venta?" )
         SetLostFocusOn()

         if !lOk
            aGet[ 7 ]:SetFocus()
            return .F.
         end

      end

   end





   if ( aTmp[ 7 ] > 0 ) .AND. ( aTmp[ 7 ] - aTmp[ 24 ] <= 0 )

      SetLostFocusOff()
      MsgBeepStop( "Descuento lineal mayor o igual que precio unitario" )
      SetLostFocusOn()

      aGet[ 24 ]:SetFocus()

      return .F.

   end





   if lNotVta .OR. lMsgVta

      nStockActual   := oStock:nStockAlmacen( aTmp[ 5 ], aTik[ 10 ], aTmp[ 21 ], aTmp[ 22 ], aTmp[ 42 ] )
      nStockActual   -= nVentasPrevias( aTmp[ 5 ], dbfTmpL, nMode )

      if ( nStockActual - aTmp[ 8 ] ) < 0

         if lNotVta

            SetLostFocusOff()
            MsgStop( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s) en almacén " + aTik[ 10 ] + "." )
            SetLostFocusOn()

            return .F.

         end

         if lMsgVta

            SetLostFocusOff()
            lOk   := ApoloMsgNoYes( "No hay stock suficiente, tenemos " + Alltrim( Trans( nStockActual, MasUnd() ) ) + " unidad(es) disponible(s) en almacén " + aTik[ 10 ] + ".", "¿Continuar con la venta?" )
            SetLostFocusOn()

            if !lOk
               return .F.
            end

         end

      end

   end





   lStdChange( aTmp, aGet )





   if oVisor <> nil
      oVisor:SetBufferLine( { aTmp[ 6 ], Trans( aTmp[ 7 ], cPouDiv ) }, 1 )
   end





   if nMode == 1

      aXbYStr        := nXbYAtipica( aTmp[ 5 ], aTik[ 11 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfCliAtp )

      if aXbYStr[ 1 ] == 0





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( aTmp[ 5 ], aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 1 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( RetFld( aTmp[ 5 ], dbfArticulo, "FAMILIA", "CODIGO" ), aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 2 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( RetFld( aTmp[ 5 ], dbfArticulo, "CCODTIP", "CODIGO" ), aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 3 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( RetFld( aTmp[ 5 ], dbfArticulo, "CCODCATE", "CODIGO" ), aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 4 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( RetFld( aTmp[ 5 ], dbfArticulo, "CCODTEMP", "CODIGO" ), aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 5 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end





         if !aTmp[ 67 ]

            aXbyStr              := nXbYOferta( RetFld( aTmp[ 5 ], dbfArticulo, "CCODFAB", "CODIGO" ), aTik[ 11 ], aTik[ 47 ], 1, aTmp[ 8 ], aTik[ 6 ], dbfOferta, 6 )

            if aXbYStr[ 1 ] <> 0
               aTmp[ 67 ]  := .T.
            end

         end

      end





      if aXbYStr[ 1 ] <> 0 .AND. aXbYStr[ 2 ] <> 0

         if aXbYStr[ 1 ] == 2

            if aTmp[ 8 ] < 0
               aTmp[ 8 ]  += aXbYStr[ 2 ]
            else
               aTmp[ 8 ]  -= aXbYStr[ 2 ]
            end

            aClo                 := aClone( aTmp )

            WinGather( aTmp, nil, dbfTmpL, nil, nMode, nil, .F. )

            AppendKit( aClo, aTik )

            if aTmp[ 8 ] < 0
               aTmp[ 8 ]  := -( aXbYStr[ 2 ] )
            else
               aTmp[ 8 ]  := aXbYStr[ 2 ]
            end

            aTmp[ 7 ]     := 0

            aClo                 := aClone( aTmp )

            WinGather( aTmp, aGet, dbfTmpL, nil, nMode )

            AppendKit( aClo, aTik )

         end

      else





         if lIsCode( aTmp, dbfTmpL, oBrw )

            aGet[ 5 ]:cText( Space( 14 ) )
            aGet[ 6 ]:cText( Space( 250 ) )
            aGet[ 7 ]:cText( 0 )
            aGet[ 8 ]:cText( 0 )

         else





            WinGather( aTmp, aGet, dbfTmpL, nil, nMode )

            AppendKit( aClo, aTik )

         end

      end

   else





      WinGather( aTmp, aGet, dbfTmpL, nil, nMode )

   end

   cOldCodArt           := ""

   oGetTotal:cText( 0 )





   lRecTotal( aTik )

   if oVisor <> nil
      oVisor:SetBufferLine( { "Total", Trans( nTotTik, cPorDiv ) }, 2 )
      oVisor:WriteBufferLine()
   end





   if !Empty( oDlgDet )
      SetLostFocusOff()
      oDlgDet:End( 1 )
      SetLostFocusOn()
   end





   oBrw:Refresh( .T. )

RETURN ( .T. )



STATIC FUNCTION lCodigoArticulo( aGet, aTmp, lMessage, oDlg )

   local lCodArt        := .T.
   local cValPr1        := Space(10)
   local cValPr2        := Space(10)
   local cCodArt        := aGet[ 5 ]:VarGet()

   IIF( lMessage == nil, lMessage := .T., ) ;

   if Empty( cCodArt )
      if lRetCodArt()
         return .F.
      else
         return .T.
      end
   end





   cCodArt              := cSeekCodebar( cCodArt, dbfCodebar, dbfArticulo )





   if !aSeekProp( cCodArt, cValPr1, cValPr2, dbfArticulo, dbfTblPro )

      if lMessage

         SetLostFocusOff()
         MsgBeepStop( "Artículo con código " + Rtrim( cCodArt ) + " no encontrado" )
         SetLostFocusOn()

      end

      lCodArt           := .F.

    else

      aGet[ 5 ]:cText( cCodArt )

      lCodArt           := .T.

    end

Return ( lCodArt )






STATIC FUNCTION LoaArt( aGet, aTmp, oBrw, oGetTotal, aTik, lTwo, nMode, oDlg, lNotVta )

   local lOk         := .T.
   local nTotal      := 0
   local cCodFam
   local cPrpArt
   local nImpOfe
   local nCosPro
   local nPrePro     := 0
   local cValPr1     := ""
   local cValPr2     := ""
   local cGrpCli     := RetFld( aTik[ 11 ], dbfClient, "CCODGRP" )
   local cCodArt     := aGet[ 5 ]:cText()
   local nNumDto     := 0
   local nDtoLin     := 0

   if Empty( cCodArt )
      if lRetCodArt()

         return .F.
      else
         return .T.
      end
   end





   nOldPvp           := 0





   cCodArt           := cSeekCodebar( cCodArt, dbfCodebar, dbfArticulo )





   if aSeekProp( @cCodArt, @cValPr1, @cValPr2, dbfArticulo, dbfTblPro )

      if ( dbfArticulo )->lObs
         MsgStop( "Artículo catalogado como obsoleto" )
         return .F.
      end

      if nMode == 1

         aGet[ 5 ]:cText( cCodArt )





         if Empty( aTmp[ 6 ] )

            if !Empty( ( dbfArticulo)->cDesTik )
               aGet[ 6 ]:cText( ( dbfArticulo )->cDesTik )
            else
               aGet[ 6 ]:cText( ( dbfArticulo )->Nombre  )
            end

         end





         if ( dbfArticulo )->lMosCom .AND. !Empty( ( dbfArticulo )->mComent )
            MsgStop( Trim( ( dbfArticulo )->mComent ) )
         end





         if !Empty( ( dbfArticulo )->cDesCmd )
            aTmp[ 57 ]                 := ( dbfArticulo )->cDesCmd
         else
            aTmp[ 57 ]                 := aTmp[ 6 ]
         end





         aTmp[ 11 ]                    := ( dbfArticulo )->Familia





         aTmp[ 25 ]                    := ( dbfArticulo )->lTipAcc

         if !Empty( aGet[ 7 ] )
            aGet[ 7 ]:lNeedGetFocus   := aTmp[ 25 ]
         end

         lNotVta                             := ( dbfArticulo )->lNotVta





         if ( dbfArticulo )->lKitArt

            aTmp[ 32 ]     := ( dbfArticulo )->lKitArt
            aTmp[ 35 ]     := lImprimirCompuesto( ( dbfArticulo )->Codigo, dbfArticulo )
            aTmp[ 34 ]     := lPreciosCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )

            if lStockCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )
               aTmp[ 26 ]  := ( dbfArticulo )->nCtlStock
            else
               aTmp[ 26 ]  := 3
            end

         else

            aTmp[ 35 ]     := .F.
            aTmp[ 26 ]     := ( dbfArticulo )->nCtlStock

         end





         aTmp[ 19 ]        := ( dbfArticulo )->cCodPrp1
         aTmp[ 20 ]        := ( dbfArticulo )->cCodPrp2

         if !Empty( aTmp[ 19 ] ) .AND. !Empty( aGet[ 21 ] )

            if !Empty( cValPr1 )
               aGet[ 21 ]:cText( cCodPrp( aTmp[ 19 ], cValPr1, dbfTblPro ) )
            end

         end

         if !empty( aTmp[ 20 ] ) .AND. !Empty( aGet[ 22 ] )

            if !Empty( cValPr2 )
               aGet[ 22 ]:cText( cCodPrp( aTmp[ 20 ], cValPr2, dbfTblPro ) )
            end

         end





         cCodFam              := ( dbfArticulo )->Familia
         if !Empty( cCodFam )
            aTmp[ 39 ]  := cCodFam
            aTmp[ 40 ]  := cGruFam( cCodFam, dbfFamilia )
         end





         if aTik[ 69 ] <= 1
            aTmp[ 10 ]  := nIva( dbfIva, ( dbfArticulo )->TipoIva )
         end





         if !Empty( ( dbfArticulo )->cCodImp )
            aTmp[ 29 ]  := ( dbfArticulo )->cCodImp
            if aTik[ 69 ] <= 1
               aTmp[ 28 ]  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, .T., aTmp[ 10 ] )
            end
         end





         if ( dbfArticulo )->lFacCnv
            aTmp[ 23 ]  := ( dbfArticulo )->nFacCnv
         end

      else

         if ( cOldCodArt <> cCodArt )

            aGet[ 5 ]:cText( cCodArt )

            if !empty( ( dbfArticulo)->cDesTik )
               aGet[ 6 ]:cText( ( dbfArticulo )->cDesTik )
            else
               aGet[ 6 ]:cText( ( dbfArticulo )->Nombre  )
            end





            aTmp[ 11 ]        := ( dbfArticulo )->Familia
            aTmp[ 25 ]        := ( dbfArticulo )->lTipAcc

            lNotVta                 := ( dbfArticulo )->lNotVta





            if ( dbfArticulo )->lKitArt
               aTmp[ 32 ]     := ( dbfArticulo )->lKitArt
               aTmp[ 35 ]     := lImprimirCompuesto( ( dbfArticulo )->Codigo, dbfArticulo )
               aTmp[ 34 ]     := lPreciosCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )
               if lStockCompuestos( ( dbfArticulo )->Codigo, dbfArticulo )
                  aTmp[ 26 ]  := ( dbfArticulo )->nCtlStock
               else
                  aTmp[ 26 ]  := 3
               end
            else
               aTmp[ 35 ]     := .F.
               aTmp[ 26 ]     := ( dbfArticulo )->nCtlStock
            end





            if dbSeekInOrd( ( dbfArticulo )->Familia, "cCodFam", dbfFamilia )
               aTmp[ 19 ]     := ( dbfArticulo )->cCodPrp1
               aTmp[ 20 ]     := ( dbfArticulo )->cCodPrp2
            else
               aTmp[ 19 ]     := Space( 10 )
               aTmp[ 20 ]     := Space( 10 )
            end





            cCodFam  := RetFamArt( cCodArt, dbfArticulo )
            if !Empty( cCodFam )
               aTmp[ 39 ]  := cCodFam
               aTmp[ 40 ]  := cGruFam( cCodFam, dbfFamilia )
            end





            if aTik[ 69 ] <= 1
               aTmp[ 10 ]  := nIva( dbfIva, ( dbfArticulo )->TipoIva )
            end





            if !Empty( ( dbfArticulo )->cCodImp )
               aTmp[ 29 ]     := ( dbfArticulo )->cCodImp
               if aTik[ 69 ] <= 1
                  aTmp[ 28 ]  := oNewImp:nValImp( ( dbfArticulo )->cCodImp, .T., aTmp[ 10 ] )
               end
            end

         end

      end





      cPrpArt              := aTmp[ 19 ] + aTmp[ 20 ] + aTmp[ 21 ] + aTmp[ 22 ]

      if ( cOldCodArt <> cCodArt ) .OR. ( cPrpArt <> cOldPrpArt )





         if nMode == 1
            cCodFam        := RetFamArt( cCodArt, dbfArticulo )
         else
            cCodFam        := aTmp[39]
         end





         nCosPro           := nCosPro( cCodArt, aTmp[ 19 ], aTmp[ 21 ], aTmp[ 20 ], aTmp[ 22 ], dbfArtDiv )



         aTmp[ ( dbfTikL )->( FieldPos( "cUnidad" ) ) ]           := ( dbfArticulo )->cUnidad

         if oUndMedicion:oDbf:Seek( ( dbfArticulo )->cUnidad )

            if !Empty( oUndMedicion:oDbf:cTextoDim1 )
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:cText( ( dbfArticulo )->nLngArt )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:Show()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]  := ( dbfArticulo )->nLngArt
               end
            else
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:Hide()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]  := 0
               end
            end

            if !Empty( oUndMedicion:oDbf:cTextoDim2 )
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:cText( ( dbfArticulo )->nAltArt )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:Show()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]  := ( dbfArticulo )->nAltArt
               end
            else
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:Hide()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]  := 0
               end
            end

            if !Empty( oUndMedicion:oDbf:cTextoDim3 )
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:cText( ( dbfArticulo )->nAncArt )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:Show()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]  := ( dbfArticulo )->nAncArt
               end
            else
               if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ] )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
                  aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:Hide()
               else
                  aTmp[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]  := 0
               end
            end

         else

            if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ] )
               aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:cText( 0 )
               aGet[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]:Hide()
            else
               aTmp[ ( dbfTikL )->( fieldpos( "nMedUno" ) ) ]  := 0
            end

            if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ] )
               aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:cText( 0 )
               aGet[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]:Hide()
            else
               aTmp[ ( dbfTikL )->( fieldpos( "nMedDos" ) ) ]  := 0
            end

            if !Empty( aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ] )
               aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:cText( 0 )
               aGet[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]:Hide()
            else
               aTmp[ ( dbfTikL )->( fieldpos( "nMedTre" ) ) ]  := 0
            end

         end

         nCosPro              := nCosto( nil, dbfArticulo, dbfKit )

         if aGet[ 30 ] <> nil
            aGet[ 30 ]:cText( nCosPro )
         else
            aTmp[ 30 ]  := nCosPro
         end

         nPrePro              := nPrePro( cCodArt, aTmp[ 19 ], aTmp[ 21 ], aTmp[ 20 ], aTmp[ 22 ], aTik[ 12 ], if( aTik[ 69 ] <= 1, .T., .F. ), dbfArtDiv, dbfTarPreL, aTik[34] )

         if nPrePro == 0

            nTotal            := nRetPreArt( aTik[ 12 ], aTik[ 24 ], if( aTik[ 69 ] <= 1, .T., .F. ), dbfArticulo, dbfDiv, dbfKit, dbfIva, .T. )

            if nTotal <> 0
               nOldPvp        := nTotal
               aGet[ 7 ]:cText( nTotal )
               oGetTotal:cText( aTmp[ 7 ] * aTmp[ 8 ] )
            end

         else

            aGet[ 7 ]:cText( nPrePro )

         end





         nNumDto              := RetFld( aTik[ 11 ], dbfClient, "nDtoArt" )

         if nNumDto <> 0

            do case
               case nNumDto == 1
                  nDtoLin     := ( dbfArticulo )->nDtoArt1

               case nNumDto == 2
                  nDtoLin     := ( dbfArticulo )->nDtoArt2

               case nNumDto == 3
                  nDtoLin     := ( dbfArticulo )->nDtoArt3

               case nNumDto == 4
                  nDtoLin     := ( dbfArticulo )->nDtoArt4

               case nNumDto == 5
                  nDtoLin     := ( dbfArticulo )->nDtoArt5

               case nNumDto == 6
                  nDtoLin     := ( dbfArticulo )->nDtoArt6

            end

            if nDtoLin <> 0

               if !Empty( aGet[ 18 ] )
                  aGet[ 18 ]:cText( nDtoLin )
               end

            end

         end





         if nDtoLin == 0
            if !Empty( aGet[ 18 ] )
               aGet[ 18 ]:cText( nDescuentoFamilia( cCodFam, dbfFamilia ) )
            else
               aTmp[ 18 ]  := nDescuentoFamilia( cCodFam, dbfFamilia )
            end
         end





         aTmp[ 58 ]    := oFideliza:InPrograma( aTmp[ 5 ], aTik[ 6 ], dbfArticulo )

         if !Empty( aGet[ 58 ] )
            if aTmp[ 58 ]
               aGet[ 58 ]:Show()
            else
               aGet[ 58 ]:Hide()
            end
         end







         do case

         case  lSeekAtpArt( aTik[ 11 ] + cCodArt, aTmp[ 19 ] + aTmp[ 20 ], aTmp[ 21 ] + aTmp[ 22 ], aTik[ 6 ], dbfCliAtp ) .AND.  ( dbfCliAtp )->lAplFac

            nImpOfe     := nImpAtp( aTik[ 12 ], dbfCliAtp, aGet[ 7 ], aTmp[ 10 ] )
            if nImpOfe  <> 0
               aGet[ 7 ]:cText( nImpOfe )
            end





            nImpOfe     := nDtoAtp( aTik[ 12 ], dbfCliAtp )
            if nImpOfe  <> 0
               if !Empty( aGet[ 18 ] )
                  aGet[ 18 ]:cText( nImpOfe )
               else
                  aTmp[ 18 ]     := nImpOfe
               end
            end

            if ( dbfCliAtp )->nDtoDiv <> 0
               if !Empty( aGet[ 24 ] )
                  aGet[ 24 ]:cText( ( dbfCliAtp )->nDtoDiv )
               else
                  aTmp[ 24 ]     := ( dbfCliAtp )->nDtoDiv
               end
            end





         case  lSeekAtpFam( aTik[ 11 ] + cCodFam, aTik[ 6 ], dbfCliAtp ) .AND. ( dbfCliAtp )->lAplFac

            if ( dbfCliAtp )->nDtoArt <> 0
               if !Empty( aGet[ 18 ] )
                  aGet[ 18 ]:cText( ( dbfCliAtp )->nDtoArt )
               else
                  aTmp[ 18 ]     := ( dbfCliAtp )->nDtoArt
               end
            end

            if ( dbfCliAtp )->nDtoDiv <> 0
               if !Empty( aGet[ 24 ] )
                  aGet[ 24 ]:cText( ( dbfCliAtp )->nDtoDiv )
               else
                  aTmp[ 24 ]     := ( dbfCliAtp )->nDtoDiv
               end
            end



         case !Empty( aTik[ 34 ] )



            nImpOfe     := RetPrcTar( cCodArt, aTik[ 34 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 22 ], dbfTarPreL, aTik[ 12 ] )
            if nImpOfe  <> 0
               aGet[ 7 ]:cText( nImpOfe + ( ( nImpOfe * aTmp[ 10 ] ) / 100 ) )
            end



            nImpOfe     := RetPctTar( cCodArt, cCodFam, aTik[ 34 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 22 ], dbfTarPreL )
            if nImpOfe  <> 0
               aGet[18 ]:cText( nImpOfe )
            end



            nImpOfe     := RetLinTar( cCodArt, cCodFam, aTik[ 34 ], aTmp[ 19 ], aTmp[ 20 ], aTmp[ 21 ], aTmp[ 22 ], dbfTarPreL )
            if nImpOfe  <> 0
               aGet[ 24 ]:cText( nImpOfe )
            end

         end


























      end





      lBuscaOferta( cCodArt, aGet, aTmp, aTik, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )





      cOldCodArt  := cCodArt
      cOldPrpArt  := cPrpArt

      if Empty( aTmp[ 7 ] ) .OR. lUsrMaster() .OR. oUser():lCambiarPrecio()
         IIF( !Empty( aGet[ 7 ] ), aGet[ 7 ]:HardEnable(), )
         IIF( !Empty( aGet[ 24 ] ), aGet[ 24 ]:HardEnable(), )
         IIF( !Empty( aGet[ 18 ] ), aGet[ 18 ]:HardEnable(), )
      else
         IIF( !Empty( aGet[ 7 ] ), aGet[ 7 ]:HardDisable(), )
         IIF( !Empty( aGet[ 24 ] ), aGet[ 24 ]:HardDisable(), )
         IIF( !Empty( aGet[ 18 ] ), aGet[ 18 ]:HardDisable(), )
      end

   else

      Return .F.

   end

Return .T.



Static Function lExacto( aTmp )

   local lImporteExacto := lImporteExacto()

   if lImporteExacto
      aTmp[ 22 ]  -= nTotCobTik( nil, dbfTmpP, dbfDiv, cDivEmp() )
      aTmp[ 22 ]  -= nTmpValTik( dbfTmpV, dbfTikL, dbfDiv, cDivEmp() )
      aTmp[ 22 ]  -= nTotAntFacCli( nil, dbfTmpA, dbfIva, dbfDiv, cDivEmp() )
   end

Return ( lImporteExacto )



Static Function ClickButtonsPago( oBtnPago, aGet )

   aEval( aButtonsPago, {|o| o:oButton:lBtnDown := .F., o:oButton:Refresh() } )

   oBtnPago:lBtnDown := .T.

   aGet[ 21 ]:cText( oBtnPago:Cargo )
   aGet[ 21 ]:lValid()

Return ( nil )



Static Function ClickButtonsMode( aTmp )

   do case
      case aTmp[ 4 ] == "1"

         aTmp[ 4 ]        := "3"
         oBtnTipoVta:cPrompt     := "Factura"
         oBtnTipoVta:cxBmp       := "Document_user1_32"

      case aTmp[ 4 ] == "3"

            aTmp[ 4 ]     := "1"
            oBtnTipoVta:cPrompt  := "Ticket"
            oBtnTipoVta:cxBmp    := "Cashier_user1_32"

      case aTmp[ 4 ] == "2"

         aTmp[ 4 ]        := "1"
         oBtnTipoVta:cPrompt     := "Ticket"
         oBtnTipoVta:cxBmp       := "Cashier_user1_32"

   end

Return ( nil )







STATIC FUNCTION lCobro( aTmp, aGet, nSave, nMode, lGenVale, nDifVale, lBig, oDlgTpv )

   local n
   local oDlg
   local oBtnTop
   local oBtnDwn
   local oBtnAceptar
   local oBtnInsertarCobro
   local oBtnAceptarImprimir
   local oBtnAceptarRegalo
   local oBtnCancelar
   local oBtnCalculator
   local oBrwPgo
   local oBrwVal
   local oGetTxt
   local cGetTxt
   local oFntDlg           := TFont():New( "Segoe UI", 12, 32, .F., .T.,  )
   local aBtnCob           := Array( 8 )
   local aSay              := Array( 3 )
   local aGetCob           := Array( 5 )
   local lIntClk           := .T.
   local aBtnFormaPago     := Array( 5 )
   local aSayFormaPago     := Array( 5 )
   local oBmpTitulo
   local oSayTitulo
   local cImageTitle
   local cTextTitle        := ""
   local lWhen
   local nScreenVertRes    := GetSysMetrics( 1 )
   local cResource         := "COBROTPV_1024x768"

   IIF( nSave == nil, nSave := "1", ) ;
   IIF( nMode == nil, nMode := 2, ) ;
   IIF( lBig == nil, lBig := .F., ) ;

   lWhen                   := ( nSave <> "4" .AND. nSave <> "6" ) .OR. ( nMode == 1 )





   if !Empty( oDlgTpv )
      aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Disable() } )
   end

   if Empty( oTotDiv )
      oTotDiv              := TotalesTPV():Init()
   end

   oTotDiv:nTotal          := aTmp[ 22 ]

   if Empty( aTmp[ 11 ] )
      aTmp[ 11 ]     := cDefCli()
   end

   if nMode == 1
      if !uFieldEmpresa( "lGetFpg" )
         aTmp[ 21 ]  := cDefFpg()
      else
         aTmp[ 21 ]  := Space( 2 )
      end
   end

   cGetTxt                 := cNbrFPago( aTmp[ 21 ], dbfFPago )





   if nMode == 4
      ( dbfTmpP )->( __dbZap() )
   end

   ( dbfTmpP )->( dbGoTop() )





   do case
      case nSave == "1"
         cImageTitle    := "Cashier_businessman2_48_alpha"
         cTextTitle     := "El documento actual se cobrará y guardará como un ticket de cliente."
      case nSave == "2"
         cImageTitle    := "Document_plain_businessman2_48_alpha"
         cTextTitle     := "El documento actual se guardará como un albaran de cliente."
      case nSave == "3"
         cImageTitle    := "Document_businessman2_48_alpha"
         cTextTitle     := "El documento actual se guardará como una factura de cliente."
      case nSave == "4"
         cImageTitle    := "Cashier_delete_48_alpha"
         cTextTitle     := "El documento actual se guardará como una devolución a cliente."
      case nSave == "6" .AND. !aTmp[ 63 ]
         cImageTitle    := "Cashier_delete_48_alpha"
         cTextTitle     := "El documento actual se guardará como un vale a cliente."
      case nSave == "6" .AND. aTmp[ 63 ]
         cImageTitle    := "Cashier_box_new_48_alpha"
         cTextTitle     := "El documento actual se guardará como un cheque regalo."
      case nSave == "5"
         cImageTitle    := "Cashier_delete_48_alpha"
         cTextTitle     := "El documento actual se guardará como un apartado."
   end

   if .F.
      if oUser():lUsrZur()
         oDlg = TDialog():New(,,,,, "BIG_COBRO_LEFT",, .F.,,,,,, .F.,,,,,, .F., )
      else
         oDlg = TDialog():New(,,,,, "BIG_COBRO_RIGHT",, .F.,,,,,, .F.,,,,,, .F., )
      end
   else

      do case

         case nScreenVertRes == 600
            cResource   := "COBROTPV_800x600"

         case nScreenVertRes == 768
            cResource   := "COBROTPV_1024x768"

         case nScreenVertRes == 1024
            cResource   := "COBROTPV_1280x1024"

      end

      oDlg = TDialog():New(,,,,, cResource,, .F.,,,,,, .F.,,,,,, .F., )

   end





   oBmpTitulo := TBitmap():ReDefine( 500, ( cImageTitle ),, oDlg,,, .F., .F.,,, .F.,,, .F. )

   oSayTitulo := TSay():ReDefine( 510, {|| ( cTextTitle )}, oDlg,,,, .F.,, .F., .F. )

   aSay[ 1 ] := TSay():ReDefine( 910,, oDlg,,,, .F.,, .F., .F. )
   aSay[ 2 ] := TSay():ReDefine( 911,, oDlg,,,, .F.,, .F., .F. )
   aSay[ 3 ] := TSay():ReDefine( 912,, oDlg,,,, .F.,, .F., .F. )





   if lBig






      aGet[ 21 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oDlg,,, {||    cFpago( aGet[ 21 ], dbfFPago, oGetTxt )},,, oFntDlg,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )

         aGet[ 21 ]:bHelp  := {|| BrwPgoTactil( aGet[ 21 ], dbfFPago, oGetTxt ) }




      oGetTxt := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cGetTxt, cGetTxt:= u ) }, oDlg,,,,,, oFntDlg,,, .F.,,, .F., .F.,,,,,, nil,,, )

      else







      aGet[ 21 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 21 ], aTmp[ 21 ]:= u ) }, oDlg,,, {||    cFpago( aGet[ 21 ], dbfFPago, oGetTxt )},,, oFntDlg,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil, "LUPA",, )

         aGet[ 21 ]:bHelp  := {|| BrwFPago( aGet[ 21 ], oGetTxt ) }




      oGetTxt := TGetHlp():ReDefine( 121, { | u | If( PCount()==0, cGetTxt, cGetTxt:= u ) }, oDlg,,,,,, oFntDlg,,, .F.,,, .F., .F.,,,,,, nil,,, )

      end





      for n := 1 to len( aButtonsPago )

         aButtonsPago[ n ]:oButton        := ApoloBtnBmp():Redefine( ( 600 + n ), aButtonsPago[ n ]:cBigResource, , , , , {|o| ClickButtonsPago( o, aGet ) }, oDlg, , , .F., .F., aButtonsPago[ n ]:cText, , , , .T., "TOP", .T., , , .F., )
         aButtonsPago[ n ]:oButton:Cargo  := aButtonsPago[ n ]:cCode
         aButtonsPago[ n ]:oButton:bWhen  := {|| ( lWhen ) }

         if aButtonsPago[ n ]:oButton:Cargo == aTmp[ 21 ]
            aButtonsPago[ n ]:oButton:lBtnDown := .T.
         end

      next










      oTotDiv:oTotal := TSay():ReDefine( 150, {||      oTotDiv:nTotal}, oDlg, cPorDiv,,, .F., oFntDlg, .F., .F. )










      oTotDiv:oEntregado := TSay():ReDefine( 160, {||      oTotDiv:nEntregado}, oDlg, cPorDiv,,, .F., oFntDlg, .F., .F. )










      aButtonsMoney[ 1 ] := TButtonBmp():ReDefine( 800, {||( ClkMoneda( 500, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img500Euros",, )






      aButtonsMoney[ 2 ] := TButtonBmp():ReDefine( 801, {||( ClkMoneda( 200, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img200Euros",, )






      aButtonsMoney[ 3 ] := TButtonBmp():ReDefine( 802, {||( ClkMoneda( 100, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img100EUROS",, )






      aButtonsMoney[ 4 ] := TButtonBmp():ReDefine( 803, {||( ClkMoneda( 50, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img50EUROS",, )






      aButtonsMoney[ 5 ] := TButtonBmp():ReDefine( 804, {||( ClkMoneda( 20, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img20EUROS",, )






      aButtonsMoney[ 6 ] := TButtonBmp():ReDefine( 805, {||( ClkMoneda( 10, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img10EUROS",, )






      aButtonsMoney[ 7 ] := TButtonBmp():ReDefine( 806, {||( ClkMoneda( 5, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img5EUROS",, )






      aButtonsMoney[ 8 ] := TButtonBmp():ReDefine( 807, {||( ClkMoneda( 2, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img2EUROS",, )






      aButtonsMoney[ 9 ] := TButtonBmp():ReDefine( 808, {||( ClkMoneda( 1, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img1EURO",, )






      aButtonsMoney[ 10 ] := TButtonBmp():ReDefine( 809, {||( ClkMoneda( 0.50, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img50CENT",, )






      aButtonsMoney[ 11 ] := TButtonBmp():ReDefine( 810, {||( ClkMoneda( 0.20, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img20CENT",, )






      aButtonsMoney[ 12 ] := TButtonBmp():ReDefine( 811, {||( ClkMoneda( 0.10, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img10CENT",, )






      aButtonsMoney[ 13] := TButtonBmp():ReDefine( 812, {||( ClkMoneda( 0.05, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img5CENT",, )






      aButtonsMoney[ 14 ] := TButtonBmp():ReDefine( 813, {||( ClkMoneda( 0.02, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img2CENT",, )






      aButtonsMoney[ 15 ] := TButtonBmp():ReDefine( 814, {||( ClkMoneda( 0.01, oTotDiv:oCobrado, @lIntClk ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img1CENT",, )






      aButtonsMoney[ 16 ] := TButtonBmp():ReDefine( 815, {||( ClkMoneda( 0, oTotDiv:oCobrado, .T. ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Img0EUROS",, )












      oTotDiv:oCobrado := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oTotDiv:nCobrado, oTotDiv:nCobrado:= u ) }, oDlg,, cPorDiv, {||    ( ChkCobro( aTmp, oTotDiv ) )},,, oFntDlg,,, .F., {||     ( lWhen )},, .F., .F.,,,,,, nil,,, )






      oBtnCalculator := TButtonBmp():ReDefine( 220, {||( Calculadora( 0, oTotDiv:oCobrado ), ChkCobro( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F., "Calculator_32",, )










      oTotDiv:oCambio := TSay():ReDefine( 180, {||      oTotDiv:nCambio}, oDlg, cPorDiv,,, .F., oFntDlg, .F., .F. )





   if !lBig
      oBtnInsertarCobro    := ApoloBtnBmp():Redefine( 554, "Money2_Add2_32", , , , ,            {|| lAddCobro( @aTmp, oTotDiv, oBrwPgo ) }, oDlg, , {|| lWhen }, .F., .F., "Añadir cobro combinado", , , , .T., "TOP", .T., , , .F. )
   end
      oBtnAceptarRegalo    := ApoloBtnBmp():Redefine( 553, "Package_New_Disk_Green_32", , , , , {|| if( lValidaCobro( aGet, @aTmp, @lGenVale, @nDifVale, nSave, oDlg ), ( lCopTik := .T., lRegalo := .T., oDlg:end( 1 ) ), ) }, oDlg, , {|| lWhen }, .F., .F., "Aceptar y ticket regalo", , , , .T., "TOP", .T., , , .F. )
      oBtnAceptarImprimir  := ApoloBtnBmp():Redefine( 1, "Printer2_Disk_Green_32", , , , ,   {|| if( lValidaCobro( aGet, @aTmp, @lGenVale, @nDifVale, nSave, oDlg ), ( lCopTik := .T., oDlg:end( 1 ) ), ) }, oDlg, , {|| lWhen }, .F., .F., "Aceptar e imprimir [F6]", ,,, .T., "TOP", .T., , , .F. )
      oBtnAceptar          := ApoloBtnBmp():Redefine( 552, "Check2_32", , , , ,                 {|| if( lValidaCobro( aGet, @aTmp, @lGenVale, @nDifVale, nSave, oDlg ), ( lCopTik := .F., oDlg:end( 1 ) ), ) }, oDlg, , {|| lWhen }, .F., .F., "Aceptar sin imprimir [F5]", ,,, .T., "TOP", .T., , , .F. )
      oBtnCancelar         := ApoloBtnBmp():Redefine( 2, "Del32", , , , ,                {|| oDlg:end() }, oDlg, , , .F., .F., "Cancelar", , , , .T., "TOP", .T., , , .F. )






   if !lBig

      if nSave == "2"









         aBtnCob[ 1 ] := TButton():ReDefine( 300, {||( WinAppRec( oBrwPgo, bEditE, dbfTmpE, , , aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





         aBtnCob[ 2 ] := TButton():ReDefine( 301, {||( WinEdtRec( oBrwPgo, bEditE, dbfTmpE, , , aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





         aBtnCob[ 3 ] := TButton():ReDefine( 302, {||( if( ( dbfTmpE )->lCloPgo .AND. !oUser():lAdministrador(), MsgStop( "Solo pueden eliminar las entregas cerradas los administradores." ), dbDelRec( oBrwPgo, dbfTmpE ) ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





         aBtnCob[ 6 ] := TButton():ReDefine( 303, {||( PrnEntAlbCli( ( dbfTmpE )->cSerAlb + Str( ( dbfTmpE )->nNumAlb ) + ( dbfTmpE )->cSufAlb + Str( ( dbfTmpE )->nNumRec ), .F., dbfTmpE ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )

         oBrwPgo                 := IXBrowse():New( oDlg )

         oBrwPgo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrwPgo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

         if ( lWhen )
            oBrwPgo:bLDblClick   := {|| WinEdtRec( oBrwPgo, bEditE, dbfTmpE, , aTmp ) }
         end

         oBrwPgo:cAlias          := dbfTmpE
         oBrwPgo:nMarqueeStyle   := 5
         oBrwPgo:cName           := "Pagos.TPV"

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Cerrado"
            :nHeadBmpNo       := 3
            :bEditValue       := {|| ( dbfTmpE )->lCloPgo }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
            :AddResource( "Zoom16" )
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpE )->dEntrega ) }
            :nWidth           := 80
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Sesión"
            :bEditValue       := {|| ( dbfTmpE )->cTurRec }
            :nWidth           := 40
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Caja"
            :bEditValue       := {|| ( dbfTmpE )->cCodCaj }
            :nWidth           := 40
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Pago"
            :bEditValue       := {|| ( dbfTmpE )->cCodPgo + Space( 1 ) + RetFld( ( dbfTmpE )->cCodPgo, dbfFPago ) }
            :nWidth           := 140
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Descripción"
            :bEditValue       := {|| ( dbfTmpE )->cDescrip }
            :lHide            := .T.
            :nWidth           := 100
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Importe"
            :bEditValue       := {|| nEntAlbCli( dbfTmpE, dbfDiv, cDivEmp(), .T. ) }
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         oBrwPgo:CreateFromResource( 310 )

      else







         aBtnCob[ 1 ] := TButton():ReDefine( 300, {||(  if( !( dbfTmpP )->lCloPgo, ( WinAppRec( oBrwPgo, bEditP, dbfTmpP, , , aTmp ), CalImpCob( aTmp ) ), ( MsgStop( "Pago cerrado" ) ) ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )







         aBtnCob[ 2 ] := TButton():ReDefine( 301, {||(  if( !( dbfTmpP )->lCloPgo, ( WinEdtRec( oBrwPgo, bEditP, dbfTmpP, , , aTmp ), CalImpCob( aTmp ) ), ( MsgStop( "Pago cerrado" ) ) ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )







         aBtnCob[ 3 ] := TButton():ReDefine( 302, {||(  if( !( dbfTmpP )->lCloPgo, ( DbDelRec( oBrwPgo, dbfTmpP ), CalImpCob( aTmp ) ), ( MsgStop( "Pago cerrado" ) ) ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )




         aBtnCob[ 6 ] := TButton():ReDefine( 303, {||( nil )}, oDlg,,, .F.,,,, .F. )

         oBrwPgo                 := IXBrowse():New( oDlg )

         oBrwPgo:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrwPgo:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

         if ( lWhen )
            oBrwPgo:bLDblClick   := {|| if( !( dbfTmpP )->lCloPgo, ( WinEdtRec( oBrwPgo, bEditP, dbfTmpP, , , aTmp ), CalImpCob( aTmp ) ), ( MsgStop( "Pago cerrado" ) ) ) }
         end

         oBrwPgo:cAlias          := dbfTmpP
         oBrwPgo:nMarqueeStyle   := 5
         oBrwPgo:cName           := "Pagos.TPV"

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Cerrado"
            :nHeadBmpNo       := 3
            :bEditValue       := {|| ( dbfTmpP )->lCloPgo }
            :nWidth           := 20
            :SetCheck( { "Sel16", "Nil16" } )
            :AddResource( "Zoom16" )
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Fecha"
            :bEditValue       := {|| Dtoc( ( dbfTmpP )->dPgoTik ) }
            :nWidth           := 80
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Sesión"
            :bEditValue       := {|| ( dbfTmpP )->cTurPgo }
            :nWidth           := 50
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Caja"
            :bEditValue       := {|| ( dbfTmpP )->cCodCaj }
            :nWidth           := 40
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Pago"
            :bEditValue       := {|| ( dbfTmpP )->cFpgPgo + Space( 1 ) + RetFld( ( dbfTmpP )->cFpgPgo, dbfFPago ) }
            :nWidth           := 140
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Descripción"
            :lHide            := .T.
            :bEditValue       := {|| ( dbfTmpP )->cPgdPor }
            :nWidth           := 100
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Importe"
            :bEditValue       := {|| ( dbfTmpP )->nImpTik }
            :cEditPicture     := cPorDiv
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         with object ( oBrwPgo:AddCol() )
            :cHeader          := "Devolución"
            :bEditValue       := {|| ( dbfTmpP )->nDevTik }
            :cEditPicture     := cPorDiv
            :nWidth           := 80
            :nDataStrAlign    := 1
            :nHeadStrAlign    := 1
         end

         oBrwPgo:CreateFromResource( 310 )

      end

      do case
      case nSave == "1"

      TGroup():ReDefine( 900, "Vales", oDlg )





      aBtnCob[ 4 ] := TButton():ReDefine( 320, {||( BrwVale( dbfTikT, dbfTikL, dbfIva, dbfDiv, dbfTmpV, oBrwVal, .F., aTmp ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 5 ] := TButton():ReDefine( 321, {||( WinDelRec( oBrwVal, dbfTmpV, nil, nil, .T. ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 7 ] := TButton():ReDefine( 322, {||( GetVale( oBrwVal, aTmp ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 8 ] := TButton():ReDefine( 323, {||( BrwVale( dbfTikT, dbfTikL, dbfIva, dbfDiv, dbfTmpV, oBrwVal, .T., aTmp ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )

      oBrwVal                 := IXBrowse():New( oDlg )

      oBrwVal:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwVal:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwVal:cAlias          := dbfTmpV
      oBrwVal:nMarqueeStyle   := 6
      oBrwVal:cName           := "Vales.TPV"

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Número"
         :bEditValue       := {|| ( dbfTmpV )->cSerTik + "/" + lTrim( ( dbfTmpV )->cNumTik ) + "/" + ( dbfTmpV )->cSufTik  }
         :nWidth           := 60
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| Dtoc( ( dbfTmpV )->dFecTik ) }
         :nWidth           := 70
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| ( dbfTmpV )->cTurTik }
         :nWidth           := 50
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
         :lHide            := .T.
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpV )->cCliTik }
         :nWidth           := 60
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Nombre"
         :bEditValue       := {|| ( dbfTmpV )->cNomTik }
         :nWidth           := 140
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( dbfTmpV )->cCcjTik }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( dbfTmpV )->cAlmTik }
         :nWidth           := 40
         :lHide            := .T.
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotalizer( ( dbfTmpV )->cSerTik + ( dbfTmpV )->cNumTik + ( dbfTmpV )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( ( dbfTmpV )->cDivTik, dbfDiv )}
         :nWidth           := 20
      end

      oBrwVal:CreateFromResource( 330 )

      case nSave == "3"

      TGroup():ReDefine( 900, "Anticipos", oDlg )





      aBtnCob[ 4 ] := TButton():ReDefine( 320, {||( BrwAntCli( nil, dbfAntCliT, dbfIva, dbfDiv, dbfTmpA, oBrwVal ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 5 ] := TButton():ReDefine( 321, {||( WinDelRec( oBrwVal, dbfTmpA, nil, nil, .T. ), CalImpCob( aTmp ) )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )

      oBrwVal                 := IXBrowse():New( oDlg )

      oBrwVal:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwVal:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwVal:cAlias          := dbfTmpA
      oBrwVal:nMarqueeStyle   := 5
      oBrwVal:cName           := "Anticipos.TPV"

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Número"
         :bEditValue       := {|| ( dbfTmpA )->cSerAnt + "/" + lTrim( Str( ( dbfTmpA )->nNumAnt ) ) + "/" + ( dbfTmpA )->cSufAnt }
         :nWidth           := 80
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| Dtoc( ( dbfTmpA )->dFecAnt ) }
         :nWidth           := 80
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| ( dbfTmpA )->cTurAnt }
         :nWidth           := 50
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Código"
         :bEditValue       := {|| ( dbfTmpA )->cCodCli }
         :nWidth           := 80
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Nombre"
         :bEditValue       := {|| ( dbfTmpA )->cNomCli }
         :nWidth           := 180
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( dbfTmpA )->cCodCaj }
         :nWidth           := 40
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Almacén"
         :bEditValue       := {|| ( dbfTmpA )->cCodAlm }
         :nWidth           := 40
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Importe"
         :bEditValue       := {|| nTotAntCli( dbfTmpA, dbfIva, dbfDiv, nil, cDivEmp(), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oBrwVal:AddCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( ( dbfTmpA )->cDivAnt, dbfDiv ) }
         :nWidth           := 20
      end

      oBrwVal:CreateFromResource( 330 )

      otherwise





      aBtnCob[ 4 ] := TButton():ReDefine( 320, {||( nil )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 5 ] := TButton():ReDefine( 321, {||( nil )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 7 ] := TButton():ReDefine( 322, {||( nil )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      aBtnCob[ 8 ] := TButton():ReDefine( 323, {||( nil )}, oDlg,,, .F., {||     ( lWhen )},,, .F. )





      oBrwVal := TWBrowse():ReDefine( 330, {|| { "" } }, oDlg, {""},,,,,,,,,,,,, .F.,,,,, )

      end

   end

   oDlg:bStart    := {|| StartCobro( aTmp, aGet, aGetCob, aBtnCob, aSay, oBtnTop, oBtnDwn, oBrwPgo, oBrwVal, oBtnCalculator, nSave, nMode, lBig ) }

   oDlg:AddFastKey( 116, {|| if( !Empty( oBtnAceptar ), oBtnAceptar:Click(), ) } )
   oDlg:AddFastKey( 117, {|| if( !Empty( oBtnAceptarImprimir ), oBtnAceptarImprimir:Click(), ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   if !Empty( oDlgTpv )
      aEval( oDlgTpv:aControls, { | oCtrl | oCtrl:Enable() } )
   end

   oFntDlg:end()

   if oBmpTitulo <> nil
      oBmpTitulo:end()
   end

RETURN ( oDlg:nResult == 1 )



Static Function StartCobro( aTmp, aGet, aGetCob, aBtnCob, aSay, oBtnTop, oBtnDwn, oBrwPgo, oBrwVal, oBtnCalculator, nSave, nMode, lBig )

   CalImpCob( aTmp )

   ChkCobro( aTmp )





   aEval( aButtonsPago, {|oBtn| if( !Empty( oBtn:oButton ), oBtn:oButton:Show(), ), if( !Empty( oBtn:oSay ), oBtn:oSay:Show(), ) } )





   if aGetCob[ 2 ] <> nil
      aGetCob[ 2 ]:lValid()
   end

   if aGetCob[ 3 ] <> nil
      aGetCob[ 3 ]:lValid()
   end

   if !lBig

      do case
      case ( nSave == "6" .AND. aTmp[ 63 ] )

         if !Empty( oBrwVal )
            oBrwVal:Hide()
         end

         if !Empty( aBtnCob[ 4 ] )
            aBtnCob[ 4 ]:Hide()
         end

         if !Empty( aBtnCob[ 5 ] )
            aBtnCob[ 5 ]:Hide()
         end

         if !Empty( aBtnCob[ 6 ] )
            aBtnCob[ 6 ]:Hide()
         end

         if !Empty( aBtnCob[ 7 ] )
            aBtnCob[ 7 ]:Hide()
         end

         if !Empty( aBtnCob[ 8 ] )
            aBtnCob[ 8 ]:Hide()
         end

      case ( nSave == "6" .AND. !aTmp[ 63 ] )

         aEval( aButtonsPago, {|o| o:oButton:Hide() } )
         aEval( aButtonsMoney, {|o| o:Hide() } )

         oTotDiv:oEntregado:Hide()
         oTotDiv:oCobrado:Hide()
         oTotDiv:oCambio:Hide()

         IIF( !Empty( aBtnCob[ 1 ] ), aBtnCob[ 1 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 2 ] ), aBtnCob[ 2 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 3 ] ), aBtnCob[ 3 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 4 ] ), aBtnCob[ 4 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 5 ] ), aBtnCob[ 5 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 6 ] ), aBtnCob[ 6 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 7 ] ), aBtnCob[ 7 ]:Hide(), )
         IIF( !Empty( aBtnCob[ 8 ] ), aBtnCob[ 8 ]:Hide(), )

         aSay[ 1 ]:Hide()
         aSay[ 2 ]:Hide()
         aSay[ 3 ]:Hide()

         if !Empty( aGetCob[ 1 ] )
            aGetCob[ 1 ]:SetFocus()
         end

         if !Empty( oBrwVal )
            oBrwVal:Hide()
         end

         if !Empty( oBrwPgo )
            oBrwPgo:Hide()
         end

         if !Empty( oBtnCalculator )
            oBtnCalculator:Hide()
         end

      case ( nSave == "2" ) .OR. ( nSave == "4" ) .OR. ( nSave == "5" )

         oTotDiv:oEntregado:Hide()
         oTotDiv:oCobrado:Hide()
         oTotDiv:oCambio:Hide()

         if !Empty( aBtnCob[ 4 ] )
            aBtnCob[ 4 ]:Hide()
         end

         if !Empty( aBtnCob[ 5 ] )
            aBtnCob[ 5 ]:Hide()
         end

         if ( nSave == "2" )
            if !Empty( aBtnCob[ 6 ] )
               aBtnCob[ 6 ]:Show()
            else
               aBtnCob[ 6 ]:Hide()
            end
         end

         if !Empty( aBtnCob[ 7 ] )
            aBtnCob[ 7 ]:Hide()
         end

         if !Empty( aBtnCob[ 8 ] )
            aBtnCob[ 8 ]:Hide()
         end

         aSay[ 1 ]:Hide()
         aSay[ 2 ]:Hide()
         aSay[ 3 ]:Hide()

         if !Empty( aGetCob[ 1 ] )
            aGetCob[ 1 ]:SetFocus()
         end

         if !Empty( oBrwVal )
            oBrwVal:Hide()
         end

         if !Empty( oBtnCalculator )
            oBtnCalculator:Hide()
         end

      case nSave == "3"

         if !Empty( aGetCob[ 1 ] )
            aGetCob[ 1 ]:SetFocus()
         end

         if !Empty( aBtnCob[ 6 ] )
            aBtnCob[ 6 ]:Hide()
         end

      end





      if nMode <> 1

         if oBtnTop <> nil
            oBtnTop:Hide()
         end

         if oBtnDwn <> nil
            oBtnDwn:Hide()
         end

         if nSave <> "2" .AND. !Empty( aBtnCob[ 6 ] )
            aBtnCob[ 6 ]:Hide()
         end

      end

   end


   if !lBig





      if !Empty( aGet[ 11 ] )
         aGet[ 11 ]:lValid()
      end

   end

Return .T.



Static Function lValidaCobro( aGet, aTmp, lGenVale, nDifVale, nSave, oDlg )

   local nTotalVale





   if Empty( aTmp[ 21 ] )
      msgStop( "Tiene que seleccionar una forma de pago" )
      aGet[ 21 ]:SetFocus()
      Return .F.
   end





   aEval( oDlg:aControls, {|o| o:Disable() } )





   ChkCobro( aTmp )





   nTotalVale              := nTmpValTik( dbfTmpV, dbfTikL, dbfDiv, cDivEmp() )
   nDifVale                := nTotalVale - oTotDiv:nTotal





   aTmp[ 50 ]       := .F.





   if lNegativo( oTotDiv:nCambio ) .AND. ( nSave == "1" .OR. nSave == "3" .OR. ( nSave == "6" .AND. aTmp[ 63 ] ) )

      if !MsgBeepYesNo( "¿Desea vender a credito al cliente " + Chr(13)+Chr(10) + Alltrim( aTmp[ 13 ] ) + "?", "Importe insuficiente" )

         aEval( oDlg:aControls, {|o| o:Enable() } )

         return .F.

      else

         aTmp[ 28 ]  := .F.

      end

   else

      aTmp[ 28 ]     := .T.

   end





   if nTotalVale > 0 .AND. nDifVale > 0
      if MsgBeepYesNo( "¿Desea generar un vale por la diferencia?", "Importe de vale excede el total" )
         lGenVale          := .T.
      end
   end

   aTmp[ 22 ]        := oTotDiv:nCobrado
   aTmp[ 23 ]        := oTotDiv:nCambio





   aEval( oDlg:aControls, {|o| o:Enable() } )

return .T.



static function CalImpCob( aTmp )

   oTotDiv:nCobrado        := nTotCobTik( nil, dbfTmpP, dbfDiv, cDivEmp() )
   oTotDiv:nVale           := nTmpValTik( dbfTmpV, dbfTikL, dbfDiv, cDivEmp() )
   oTotDiv:nAnticipo       := nTotAntFacCli( nil, dbfTmpA, dbfIva, dbfDiv, cDivEmp() )
   oTotDiv:nEntregado      := ( oTotDiv:nCobrado + oTotDiv:nVale + oTotDiv:nAnticipo )
   oTotDiv:nCobrado        := ( oTotDiv:nTotal - oTotDiv:nEntregado )
   oTotDiv:nCambio         := - ( oTotDiv:nTotal - oTotDiv:nEntregado - oTotDiv:nCobrado )

   if !Empty( oTotDiv:oEntregado )
      oTotDiv:oEntregado:Refresh()
   end

   if !Empty( oTotDiv:oCobrado )
      oTotDiv:oCobrado:Refresh()
   end

   if !Empty( oTotDiv:oCambio )
      oTotDiv:oCambio:Refresh()
   end

return .T.



static function ChkCobro( aTmp )

   oTotDiv:nCambio            := - ( oTotDiv:nTotal - oTotDiv:nEntregado - oTotDiv:nCobrado )

   if !Empty( oTotDiv:oCobrado )
      oTotDiv:oCobrado:Refresh()
   end

   if !Empty( oTotDiv:oCambio )
      oTotDiv:oCambio:Refresh()
   end

return .T.




















Static Function BrwVale( dbfTikT, dbfTikL, dbfIva, dbfDiv, dbfTmpV, oBrwVal, lCliente, aTmp )

   local oDlg
    local oBrw
   local aGet1
    local cGet1
   local dbfVal
   local lError         := .F.
   local oError
   local oBlock
   local cNewFil
   local oCbxOrd
   local oBtnSelect
   local oBtnUnSelect
   local cCbxOrd        := "Número"
   local aCbxOrd        := { "Número", "Código cliente", "Nombre cliente" }
   local cCodCliente    := aTmp[ 11 ]
   local cText          := ""
   local nRecAnt        := ( dbfTikT )->( RecNo() )
   local nOrdAnt        := ( dbfTikT )->( OrdSetFocus( "cCliVal" ) )

   IIF( lCliente == nil, lCliente := .F., ) ;





   cNewFil              := cGetNewFileName( cPatTmp() + "TikT" )

   dbCreate( cNewFil, aSqlStruct( aItmTik() ), cLocalDriver() )

   dbUseArea( .T., cLocalDriver(), cNewFil, cCheckArea( "TikT", @dbfVal ), .F. )
   if !NetErr()
      ( dbfVal )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfVal )->( OrdCreate( cNewFil, "cNumTik", "cSerTik + cNumTik + cSufTik", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfVal )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfVal )->( OrdCreate( cNewFil, "cCliTik", "cCliTik", {|| Field->cCliTik } ) )

      ( dbfVal )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfVal )->( OrdCreate( cNewFil, "cNomTik", "cNomTik", {|| Field->cNomTik } ) )
   end





   ( dbfTikT )->( dbGoTop() )

   if !lCliente

      while !( dbfTikT )->( eof() )
         dbPass( dbfTikT, dbfVal, .T. )
         ( dbfTikT )->( dbSkip() )
      end

   else

      if ( dbfTikT )->( dbSeek( cCodCliente ) )
         while ( dbfTikT )->cCliTik == cCodCliente .AND. !( dbfTikT )->( eof() )
            dbPass( dbfTikT, dbfVal, .T. )
            ( dbfTikT )->( dbSkip() )
         end
      end

   end





   ( dbfVal  )->( ordSetFocus( "cNumTik" ) )
   ( dbfTmpV )->( dbGoTop() )

   while !( dbfTmpV )->( eof() )
      if ( dbfVal )->( dbSeek( ( dbfTmpV )->cSerTik + ( dbfTmpV )->cNumTik + ( dbfTmpV )->cSufTik ) )
        ( dbfVal )->lSelDoc   := .T.
      end
      ( dbfTmpV )->( dbSkip() )
   end

   ( dbfVal  )->( ordSetFocus( "cNumTik" ) )
   ( dbfVal  )->( dbGoTop() )





   oDlg = TDialog():New(,,,, "Seleccionar vales", "HelpEntry",, .F.,,,,,, .F.,,,,,, .F., )








      aGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,, "@!", {||    ( OrdClearScope( oBrw, dbfVal ) )},,,,,, .F.,, {|nKey,nFlags,Self| ( AutoSeek( nKey, nFlags, Self, oBrw, dbfVal, .T. ) ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( CambiarOrd( oBrw, oCbxOrd, dbfVal ) )},,,, .F.,,,,,, )

      oBrw                    := IXBrowse():New( oDlg )

      oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias             := dbfVal
      oBrw:cName              := "Vale detalle"
      oBrw:bLDblClick         := {|| if( dbLock( dbfVal ), ( ( dbfVal )->lSelDoc := !( dbfVal )->lSelDoc, ( dbfVal )->( dbUnLock() ) ), ), oBrw:DrawSelect() }

      oBrw:nMarqueeStyle      := 5

      with object ( oBrw:AddCol() )
         :cHeader             := "Se. Seleccionado"
         :bStrData            := {|| "" }
         :bEditValue          := {|| ( dbfVal )->lSelDoc }
         :nWidth              := 20
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "cLiqVal"
         :bEditValue          := {|| ( dbfVal )->cSerTik + "/" + AllTrim( ( dbfVal )->cNumTik ) + "/" + ( dbfVal )->cSufTik }
         :nWidth              := 70
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha"
         :bEditValue          := {|| Dtoc( ( dbfVal )->dFecTik ) }
         :nWidth              := 70
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Código cliente"
         :bEditValue          := {|| Rtrim( ( dbfVal )->cCliTik ) }
         :cSortOrder          := "cCliVal"
         :nWidth              := 75
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Nombre cliente"
         :bEditValue          := {|| AllTrim( ( dbfVal )->cNomTik ) }
         :cSortOrder          := "cNomVal"
         :nWidth              := 150
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Importe "
         :bEditValue          := {|| nTotalizer( ( dbfVal )->cSerTik + ( dbfVal )->cNumTik + ( dbfVal )->cSufTik, dbfVal, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cDivEmp(), .T. ) }
         :nWidth              := 85
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Div."
         :bEditValue          := {|| cSimDiv( ( dbfVal )->cDivTik, dbfDiv ) }
         :nWidth              := 30
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Sesión"
         :bEditValue          := {|| ( dbfVal )->cTurTik + "/" + ( dbfVal )->cSufTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Hora"
         :bEditValue          := {|| ( dbfVal )->cHorTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Caja"
         :bEditValue          := {|| ( dbfVal )->cNcjTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Cajero"
         :bEditValue          := {|| ( dbfVal )->cCcjTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Almacén"
         :bEditValue          := {|| ( dbfVal )->cAlmTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      oBrw:CreateFromResource( 105 )




      oBtnSelect := TButton():ReDefine( 500, {||( ( dbfVal )->lSelDoc := .T., oBrw:DrawSelect() )}, oDlg,,, .F.,,,, .F. )




      oBtnUnSelect := TButton():ReDefine( 501, {||( ( dbfVal )->lSelDoc := .F., oBrw:DrawSelect() )}, oDlg,,, .F.,,,, .F. )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116,       {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,   {|| oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( SetWindowText( oBtnSelect:hWnd, "&Seleccionar" ), SetWindowText( oBtnUnSelect:hWnd, "&Deseleccionar" ), oBrw:Load() )}, oDlg:bRClicked,,, )





   if oDlg:nResult == 1

      ( dbfTmpV )->( __dbZap() )

      ( dbfVal )->( dbGoTop() )
      while !( dbfVal )->( Eof() )

         if ( dbfVal )->lSelDoc

            if ( dbfVal )->dFecTik + uFieldEmpresa( "nDiaVale" ) > GetSysDate()
               lError   := .T.
               cText    += Space( 6 ) + "El vale " + ( dbfVal )->cSerTik + "/" +  AllTrim( ( dbfVal )->cNumTik ) + " no ha alcanzado la fecha para su liqidación." + Chr(13)+Chr(10)
            end

            if ( dbfVal )->cCliTik <> cCodCliente
               lError   := .T.
               cText    += Space( 6 ) + "El vale " + ( dbfVal )->cSerTik + "/" +  AllTrim( ( dbfVal )->cNumTik ) + " no pertenece al mismo cliente que el ticket." + Chr(13)+Chr(10)
            endif

            if !lError
               dbPass( dbfVal, dbfTmpV, .T. )
            end

         end

         ( dbfVal )->( dbSkip() )

      end

      ( dbfVal )->( dbGoTop() )

      if !Empty( cText )
         MsgStop( "Atención : " +  Chr(13)+Chr(10) + cText )
      end

   end





   if !Empty( cNewFil ) .AND. ( cNewFil )->( Used() )
      ( cNewFil )->( dbCloseArea() )
   end

   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTikT )->( dbGoTo( nRecAnt ) )

   dbfErase( cNewFil )

   if oBrwVal <> nil
      oBrwVal:Refresh()
   end

RETURN ( oDlg:nResult == 1 )



STATIC FUNCTION CambiarOrd( oBrw, oCbx, dbfTikT )

   local nOrd  := oCbx:nAt

   do case
      case ( nOrd == 1 )
         ( dbfTikT )->( OrdSetFocus( "cLiqVal" ) )

      case ( nOrd == 2 )
         ( dbfTikT )->( OrdSetFocus( "cCliVal" ) )

      case ( nOrd == 3 )
         ( dbfTikT )->( OrdSetFocus( "cNomVal" ) )

   end

   oBrw:GoTop()

Return nil







STATIC FUNCTION lStdChange( aTmp, aGet )





   if nOldPvp <> aTmp[ 7 ]





      if aTmp[ 25 ] .AND. !Empty( nOldPvp )
         aGet[ 8 ]:cText( aTmp[ 7 ] / nOldPvp )
         aGet[ 7 ]:cText( nOldPvp )
      end

   end

RETURN .T.







STATIC FUNCTION lIsCode( aTmp, dbfTmpL, oBrw )

    local lReturn    := .F.
   local nRecno   := ( dbfTmpL )->( RecNo() )





   if ( dbfKit )->( dbSeek( aTmp[ 5 ] ) )
      Return ( lReturn )
   end





   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )













      if ( dbfTmpL )->cCbaTil == aTmp[ 5 ]                    .AND.  ( dbfTmpL )->cComTil == aTmp[ 13 ]                    .AND.  ( dbfTmpL )->cCodPr1 == aTmp[ 19 ]                    .AND.  ( dbfTmpL )->cValPr1 == aTmp[ 21 ]                    .AND.  ( dbfTmpL )->cCodPr2 == aTmp[ 20 ]                    .AND.  ( dbfTmpL )->cValPr2 == aTmp[ 22 ]                    .AND.  ( dbfTmpL )->nPvpTil == aTmp[ 7 ]                    .AND.  ( dbfTmpL )->nDtoLin == aTmp[ 18 ]                    .AND.  Rtrim( ( dbfTmpL )->cNomTil ) == Rtrim( aTmp[ 6 ] )





         ( dbfTmpL )->nUntTil += aTmp[ 8 ]





         lReturn  := .T.

         exit

      end

      ( dbfTmpL )->( dbSkip() )

   end

   ( dbfTmpL )->( dbGoTo( nRecno ) )

   if oBrw <> nil
      oBrw:Refresh()
   end

Return ( lReturn )



STATIC FUNCTION nVentasPrevias( cCodArt, dbfTmpL, nMode )

   local nRecno            := ( dbfTmpL )->( RecNo() )
   local nVentasPrevias    := 0

   if nMode == 1





      ( dbfTmpL )->( dbGoTop() )
      while !( dbfTmpL )->( eof() )





         if ( dbfTmpL )->cCbaTil == cCodArt
            nVentasPrevias += ( dbfTmpL )->nUntTil
         end

         ( dbfTmpL )->( dbSkip() )

      end

   end

   ( dbfTmpL )->( dbGoTo( nRecno ) )

RETURN ( nVentasPrevias )






STATIC FUNCTION lChkOfe( aTmp, aTik, dbfTmpL, oBrw )

    local lOfe        := .F.
    local dFecTik    := aTik[ 6 ]
   local nRecno   := ( dbfTmpL )->( RecNo() )

   ( dbfTmpL )->( dbGoTop() )

   WHILE !( dbfTmpL )->( eof() )





      IF !( dbfTmpL )->LOFETIL





         IF lIsOfe( dFecTik, aTmp, dbfTmpL, dbfOferta )





                lOfe := .T.

            end

        end

      ( dbfTmpL )->( dbSkip() )

    end

   ( dbfTmpL )->( dbGoTo( nRecno ) )

    oBrw:refresh()

RETURN lOfe







STATIC FUNCTION lIsOfe( dFecOfe, aTmp, dbfTemp, dbfOferta )

    local lPreOfe    := .F.
   local cCodArt  := ( dbfTmpL )->cCbaTil
   local nUntArt  := ( dbfTmpL )->nUntTil





   if ( dbfOferta )->( dbSeek( cCodArt ) )

      while ( dbfOferta )->cArtOfe == cCodArt .AND. !( dbfOferta )->( eof() )






         if ( dFecOfe >= ( dbfOferta )->dIniOfe .OR. empty( ( dbfOferta )->dIniOfe ) ) .AND.  ( dFecOfe <= ( dbfOferta )->dFinOfe .OR. empty( ( dbfOferta )->dFinOfe ) )






            if ( dbfOferta )->nMaxOfe == 0                                 .OR.  nUntArt + ( dbfOferta )->nUdvOfe > ( dbfOferta )->nMaxOfe







               if mod( nUntArt, ( dbfOferta )->nUnvOfe ) == 0







                  ( dbfTmpL )->cNomTil  := ( dbfOferta )->CDESOFE
                  ( dbfTmpL )->nUntTil  := nUntArt / ( dbfOferta )->NUNVOFE
                  ( dbfTmpL )->nPvpTil  := ( dbfOferta )->nPreIva1
                  ( dbfTmpL )->lOfeTil  := .T.

                  lPreOfe               := .T.

                        EXIT

               end

            end

         end

        ( dbfOferta )->( dbSkip() )

      end

   end

RETURN lPreOfe







STATIC FUNCTION lIsOfeYet( dbfTmpL, oBrw )

    local aTmp
    local nRecIni
   local nRecFin  := ( dbfTmpL )->( recno() )

   ( dbfTmpL )->( dbGoTop() )

   while !( dbfTmpL )->( eof() ) .AND. ( dbfTmpL )->( ordKeyCount() ) > 1

      nRecIni  := ( dbfTmpL )->( RecNo() )
      aTmp     := dbScatter( dbfTmpL )
      ( dbfTmpL )->( dbSkip(1) )

      while !( dbfTmpL )->( eof() )








         IF ( dbfTmpL )->cCbaTil == aTmp[ 5 ] .AND.  ( dbfTmpL )->cNomTil == aTmp[ 6 ] .AND.  ( dbfTmpL )->nPvpTil == aTmp[ 7 ] .AND.  ( dbfTmpL )->lFreTil == aTmp[ 17 ]





            aTmp[ 8 ] += ( dbfTmpL )->NUNTTIL
            delRecno( dbfTmpL, oBrw )
            dbGather( aTmp, dbfTmpL )

         end

         ( dbfTmpL )->( dbSkip() )

      end

      ( dbfTmpL )->( dbGoTo( ++nRecIni ) )

    end

   ( dbfTmpL )->( dbGoTo( nRecFin ) )

RETURN NIL







STATIC FUNCTION ChgDiv( cCodDiv, dbfDiv, oNumTot )

   cPouDiv              := cPouDiv( cCodDiv, dbfDiv )

   if oNumTot <> nil
        oNumTot:cPicture    := cPouDiv
        oNumTot:refresh()
   end

   if oBrwDet <> nil
        oBrwDet:refresh()
   end

RETURN .T.







FUNCTION dFecTik( cNumTik, uTikT )

   local dDate    := ctod( "" )

   if ValType( uTikT ) == "C"

      if ( uTikT )->( dbSeek( cNumTik ) )
         dDate    := ( uTikT )->dFecTik
      end

   else

      if uTikT:Seek( cNumTik )
         dDate    := uTikT:dFecTik
      end

   end

RETURN dDate




























function nPreTpv( uTmp, dbfTmpL )

   local nDec
   local nVdv
   local nCalculo := 0

   if valtype( uTmp ) == "A"
      nDec     := nDouDiv( uTmp[ 24 ], dbfDiv )
      nVdv     := uTmp[ 25 ]
   else
      nDec     := nDouDiv( ( uTmp )->cDivTik, dbfDiv )
      nVdv     := ( uTmp )->nVdvTik
   end

   if !( dbfTmpL )->lFreTil

      nCalculo := ( dbfTmpL )->nPvpTil
      nCalculo -= ( dbfTmpL )->nDtoDiv
      nCalculo -= ( dbfTmpL )->nDtoLin * nCalculo / 100
      nCalculo += ( dbfTmpL )->nPcmTil

      if nVdv <> 0
         nCalculo    := Round( nCalculo / nVdv, nDec )
      end

   end

RETURN ( nCalculo )






function nVtaTik( cCodCli, dDesde, dHasta, dbfTikT, dbfTikL, dbfIva, dbfDiv, nYear )

   local nCon     := 0
   local aSta     := aGetStatus( dbfTikT )





   if ( dbfTikT )->( dbSeek( cCodCli ) )

      while ( dbfTikT )->cCliTik = cCodCli .AND. !( dbfTikT )->( Eof() )



         if ( dDesde == nil .OR. ( dbfTikT )->dFecTik >= dDesde ) .AND. ( dHasta == nil .OR. ( dbfTikT )->dFecTik <= dHasta ) .AND. ( nYear == nil .OR. Year( ( dbfTikT )->dFecTik ) == nYear )

            if ( dbfTikT )->cTipTik == "1"

               nCon  += nTotTik( ( dbfTikT )->cSerTik + (dbfTikT)->cNumTik + (dbfTikT)->cSufTik, dbfTikT, dbfTikL, dbfDiv, nil, cDivEmp(), .F. )

            elseif ( dbfTikT )->cTipTik == "4"

               nCon  -= nTotTik( ( dbfTikT )->cSerTik + (dbfTikT)->cNumTik + (dbfTikT)->cSufTik, dbfTikT, dbfTikL, dbfDiv, nil, cDivEmp(), .F. )

            end

         end

         ( dbfTikT )->( dbSkip() )

         SysRefresh()

      end

   end

   SetStatus( dbfTikT, aSta )

return nCon



function nPdtTik( cCodCli, dDesde, dHasta, dbfTikT, dbfTikL, dbfTikP, dbfIva, dbfDiv )

   local nCon     := 0
   local aSta     := aGetStatus( dbfTikT )





   if ( dbfTikT )->( dbSeek( cCodCli ) )

      while ( dbfTikT )->cCliTik = cCodCli .AND. !( dbfTikT )->( Eof() )



         if !( dbfTikT )->lLiqTik                                 .AND. ( dDesde == nil .OR. ( dbfTikT )->dFecTik >= dDesde ) .AND. ( dHasta == nil .OR. ( dbfTikT )->dFecTik <= dHasta )

            if ( dbfTikT )->cTipTik == "1"

               nCon  += nTotTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, nil, cDivEmp(), .F. )
               nCon  -= nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv, cDivEmp() )

            elseif ( dbfTikT )->cTipTik == "4"

               nCon  -= nTotTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, nil, cDivEmp(), .F. )
               nCon  += nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv, cDivEmp() )

            end

         end

         ( dbfTikT )->( dbSkip() )

         SysRefresh()

      end

   end

   SetStatus( dbfTikT, aSta )

return nCon






function nCobTik( cCodCli, dDesde, dHasta, dbfTikT, dbfTikP, dbfIva, dbfDiv, nYear )

   local nCon     := 0
   local aSta     := aGetStatus( dbfTikT )

   ( dbfTikT )->( OrdSetFocus( "CCLITIK" ) )





   if ( dbfTikT )->( dbSeek( cCodCli ) )

      while ( dbfTikT )->cCliTik = cCodCli .AND. !( dbfTikT )->( Eof() )



         if ( dDesde == nil .OR. ( dbfTikT )->dFecTik >= dDesde ) .AND. ( dHasta == nil .OR. ( dbfTikT )->dFecTik <= dHasta ) .AND. ( nYear == nil .OR. Year( ( dbfTikT )->dFecTik ) == nYear )

            if ( dbfTikT )->cTipTik == "1"

               nCon  += nTotCobTik( ( dbfTikT )->cSerTik + (dbfTikT)->cNumTik + (dbfTikT)->cSufTik, dbfTikP, dbfDiv, cDivEmp() )

            elseif ( dbfTikT )->cTipTik == "4"

               nCon  -= nTotCobTik( ( dbfTikT )->cSerTik + (dbfTikT)->cNumTik + (dbfTikT)->cSufTik, dbfTikP, dbfDiv, cDivEmp() )

            end

         end

         ( dbfTikT )->( dbSkip() )

         SysRefresh()

      end

   end

   SetStatus( dbfTikT, aSta )

return nCon



Function nValTik( cCodCli, dDesde, dHasta, dbfTikT, dbfTikL, dbfDiv, nYear )

   local nCon     := 0
   local aSta     := aGetStatus( dbfTikT )

   ( dbfTikT )->( OrdSetFocus( "cCliVal" ) )

   if ( dbfTikT )->( dbSeek( cCodCli ) )

      while ( dbfTikT )->cCliTik == cCodCli .AND. !( dbfTikT )->( eof() )



         if ( dDesde == nil .OR. ( dbfTikT )->dFecTik >= dDesde ) .AND. ( dHasta == nil .OR. ( dbfTikT )->dFecTik <= dHasta ) .AND. ( nYear == nil .OR. Year( ( dbfTikT )->dFecTik ) == nYear )

            nCon  += nTotTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, , , .F. )

         end

         ( dbfTikT )->( dbSkip() )

      end

   end

   SetStatus( dbfTikT, aSta )

return nCon



FUNCTION TactilTpv( oMenuItem, oWnd, lTactil )

   local nLevel
   local oBtnEur
   local cTitle
   local lEur           := .F.

   IIF( oMenuItem == nil, oMenuItem := "01041", ) ;
   IIF( oWnd == nil, oWnd := oWnd(), ) ;
   IIF( lTactil == nil, lTactil := .F., ) ;

   SetAutoImp()

   if oWndBig == nil

      nLevel            := nLevelUsr( oMenuItem )
      if nAnd( nLevel, 1 ) <> 0
         msgStop( "Acceso no permitido." )
         return nil
      end





      if oWnd <> nil
         SysRefresh(); oWnd:CloseAll(); SysRefresh()
      end

      if !OpenFiles( , , .T. )
         return nil
      end





      AddMnuNext( "T.P.V. Táctil", ProcName() )

      cTitle            := "T.P.V. Táctil - Sesión : " + Trans( cCurSesion(), "######" ) + " - " + dtoc( date() )
















      oWndBig := TShell():New( 0, 0, 22, 80, cTitle,, oWnd,,, .F.,,, ( dbfTikT ),,,,, {"Número", "Fecha", "Cajero/a", "Cliente", "Matrícula", "Sesión"}, {||( TpvAppRec( oWndBig:oBrw, bEditB, dbfTikT, oWnd ) )}, {||( TpvEdtRec( oWndBig:oBrw, bEditB, dbfTikT, oWnd ) )}, {||( DelTpv( oWndBig:oBrw, dbfTikT ) )},, nil, nLevel,,, .T.,, .T. )

      oWndBig:lAutoSeek    := .F.

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Cerrado"
         :nHeadBmpNo       := 3
         :bStrData         := {|| "" }
         :bEditValue       := {|| ( dbfTikT )->lCloTik }
         :nWidth           := 24
         :SetCheck( { "Sel16", "Nil16" } )
         :AddResource( "Zoom16" )
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Estado"
         :nHeadBmpNo       := 4
         :bStrData         := {|| "" }
         :bBmpData         := {|| if( ( dbfTikT )->lAbierto, 1, if( !( dbfTikT )->lPgdTik, 2, 3 ) ) }
         :nWidth           := 24
         :AddResource( "Bullet_Square_Red_16" )
         :AddResource( "Bullet_Square_Yellow_16" )
         :AddResource( "Bullet_Square_Green_16" )
         :AddResource( "TrafficLight_on_16" )
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Documento"
         :bEditValue       := {|| aTipTik() }
         :nWidth           := 55
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Número"
         :bEditValue       := {|| ( dbfTikT )->cSerTik + "/" + ltrim( ( dbfTikT )->cNumTik ) + "/" + ( dbfTikT )->cSufTik }
         :nWidth           := 80
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Fecha"
         :bEditValue       := {|| dtoc( ( dbfTikT )->dFecTik ) }
         :nWidth           := 70
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Sesión"
         :bEditValue       := {|| Trans( ( dbfTikT )->cTurTik, "######" ) }
         :nWidth           := 40
         :lHide            := .T.
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Hora"
         :bEditValue       := {|| ( dbfTikT )->cHorTik }
         :nWidth           := 40
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Caja"
         :bEditValue       := {|| ( dbfTikT )->cNcjTik }
         :nWidth           := 40
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Cajero"
         :bEditValue       := {|| ( dbfTikT )->cCcjTik }
         :nWidth           := 50
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Sala"
         :bEditValue       := {|| ( dbfTikT )->cCodSala }
         :nWidth           := 40
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Punto de venta"
         :bEditValue       := {|| ( dbfTikT )->cPntVenta }
         :nWidth           := 80
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Cliente"
         :bEditValue       := {|| Rtrim( ( dbfTikT )->cCliTik ) + Space( 1 ) + ( dbfTikT )->cNomTik }
         :nWidth           := 160
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Alias"
         :bEditValue       := {|| ( dbfTikT )->cAliasTik }
         :nWidth           := 70
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Total"
         :bEditValue       := {|| nTotalizer( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Div."
         :bEditValue       := {|| cSimDiv( ( dbfTikT )->cDivTik, dbfDiv ) }
         :nWidth           := 30
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Cobrado"
         :bEditValue       := {|| nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      with object ( oWndBig:AddXCol() )
         :cHeader          := "Vale"
         :bEditValue       := {|| nTotValTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, if( lEur, cDivChg(), cDivEmp() ), .T. ) }
         :nWidth           := 80
         :nDataStrAlign    := 1
         :nHeadStrAlign    := 1
      end

      oWndBig:cHtmlHelp    := "Tickets táctil"

      oWndBig:CreateXFromCode()

      if !lTactil
         oWndBig:AddSeaBar()
      end






      oWndBig:NewAt( "NEW",,, {||( oWndBig:RecAdd(), oWndBig:oBrw:Refresh() )}, "(A)ñadir", "A",,, 2,, .F. )






      oWndBig:NewAt( "EDIT",,, {||( oWndBig:RecEdit() )}, "(M)odificar", "M",,, 4,, .F. )






      oWndBig:NewAt( "ZOOM",,, {||( WinZooRec( oWndBig:oBrw, bEditB, dbfTikT ) )}, "(Z)oom", "Z",,, 8,, .F. )






      oWndBig:NewAt( "DEL",,, {||( oWndBig:RecDel() )}, "(E)liminar", "E",,, 16,, .F. )






      oBtnEur := oWndBig:NewAt( "BAL_EURO",,, {||( lEur := !lEur, SetHeadEuro( lEur, oWndBig ), SetHeadEuro( lEur, oWndBig, "Cobrado" ) )}, "M(o)neda", "O",,, 8,, .F. )






      oWndBig:NewAt( "IMP",,, {||( ImpTiket( .F. ) )}, "(I)mprimir", "I",,, 32,, .F. )






      oWndBig:NewAt( "Money2_",,, {||( EdtCobTik( oWndBig, .T. ) )}, "(C)obros", "C",,, 2,, .F. )

if !lTactilMode()






      oWndBig:NewAt( "User1_",,, {||( CuentasClientes( oWndBig:oBrw ) )}, "C(t)a. cliente", "T",,, 2,, .F. )

endif





      oWndBig:NewAt( "UP",,, {||( oWndBig:oBrw:GoUp() )}, "S(u)bir", "U",,,,, .F. )





      oWndBig:NewAt( "DOWN",,, {||( oWndBig:oBrw:GoDown() )}, "(B)ajar", "B",,,,, .F. )

if !lTactilMode()





      oWndBig:NewAt( "END",,, {||( oWndBig:end() )}, "(S)alir", "S",,,,, .F. )
end

      oWndBig:Activate(, oWndBig:bLClicked, oWndBig:bRClicked, oWndBig:bMoved, oWndBig:bResized, oWndBig:bPainted, oWndBig:bKeyDown, oWndBig:bInit,,,,,,,,, {|| ( CloseFiles() )},, oWndBig:bLButtonUp )

   else

      oWndBig:setFocus()

   end

   if lEntCon()
      oWndBig:RecAdd()
   end

Return Nil



Function oWndTactil()

Return oWndBrw



Static Function EdtBig( aTmp, aGet, dbfTikT, oBrw, cTot, nTot, nMode, oWnd )

   local n
   local cOrdFam
   local cTipTik
   local nOrdArt
   local cSayCcj
   local oBtnAcc
   local aGetArt
   local aTmpArt
   local cDialog
   local lLowResolution := .F.

   if !( nScreenHorzRes >= 1024 )
      MsgStop( "Gestool" + Space( 1 ) + "2K13" + "táctil solo permite resoluciones de 1024 o superiores" )
      Return .F.
   end

   if !lCajaOpen( oUser():cCaja() ) .AND. !oUser():lMaster()
      msgStop( "Esta caja " + oUser():cCaja() + " esta cerrada." )
      Return .F.
   end

   if !lFamInTpv( dbfFamilia )
      MsgStop( "No hay familias de artículos seleccionadas para trabajar con el TPV táctil" )
      return .F.
   end

   if nMode == 1 .AND. !lCurSesion()
      MsgStop( "No hay sesiones activas, imposible añadir documentos" )
      return .F.
   end





   if !Empty( oSalaVentas ) .AND. IsFalse( oSalaVentas:lPuntosVenta )

      if lLockMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto )
         return .F.
      end

   end





   oBtnAcc              := Array( 9 )
   aGetArt              := Array( ( dbfTikL )->( fCount() ) )
   aTmpArt              := dbBlankRec( dbfTikL )
   aTmpArt[ 8 ]  := ""





   nSaveMode            := nMode





   if BeginTrans( aTmp, aGet, nMode, .T. )
      Return .F.
   end

   cSayCcj              := Capitalize( RetFld( aTmp[ 8 ], dbfUsr ) )





   if aTmp[ 26 ] .AND. nMode == 2
      msgStop( "No se pueden modificar tickets cerrados." )
      Return .F.
   end





   cOrdFam              := ( dbfFamilia  )->( OrdSetFocus( "nPosTpv" ) )

   if uFieldEmpresa( "lOrdNomTpv" )
      nOrdArt           := ( dbfArticulo )->( OrdSetFocus( "nNomTpv" ) )
   else
      nOrdArt           := ( dbfArticulo )->( OrdSetFocus( "nPosTpv" ) )
   end

   oFntBrw              := TFont():New( "Segoe UI", 0, 18, .F., .F. )
   oFntTot              := TFont():New( "Segoe UI", 0, 12, .F., .F. )
   oFntEur              := TFont():New( "Segoe UI", 0, 30, .F., .T. )
   oFntNum              := TFont():New( "Segoe UI", 0, 46, .F., .T. )

   cTipTik              := aTipTik( aTmp )

   do case
      case nScreenHorzRes >= 1280
         cDialog        := "Big_Tpv_Right_1280"
         nNumBtnFam     := 11
         nNumBtnArt     := 19
      case ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 ) .AND. nScreenVertRes >= 600 .AND. nScreenVertRes < 768 .AND. oUser():lUsrZur()
         cDialog        := "Big_Tpv_Left_1024x600"
         nNumBtnFam     :=  5
         nNumBtnArt     := 14
         lLowResolution := .T.
      case ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 ) .AND. nScreenVertRes >= 600 .AND. nScreenVertRes < 768 .AND. !oUser():lUsrZur()
         cDialog        := "Big_Tpv_Right_1024x600"
         nNumBtnFam     :=  5
         nNumBtnArt     := 14
         lLowResolution := .T.
      case ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 ) .AND. nScreenVertRes >= 768 .AND. oUser():lUsrZur()
         cDialog        := "Big_Tpv_Left_1024x768"
         nNumBtnFam     :=  7
         nNumBtnArt     := 19
      case ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 ) .AND. nScreenVertRes >= 768 .AND. !oUser():lUsrZur()
         cDialog        := "Big_Tpv_Right_1024x768"
         nNumBtnFam     :=  7
         nNumBtnArt     := 19
      otherwise
         cDialog        := "Big_Tpv_Right_1024x768"
         nNumBtnFam     :=  7
         nNumBtnArt     := 19
   end





   oBtnFam              := Array( nNumBtnFam )
   oSayFam              := Array( nNumBtnFam )
   oBtnArt              := Array( nNumBtnArt )
   oSayArt              := Array( nNumBtnArt )
   oBtnNum              := Array( 16 )







   oDlgTpv = TDialog():New(,,,,, ( cDialog ),, .F., nOR( 128, 2147483648, 12582912, 33554432 ),,,,, .F.,,,,,, .F., )










      oBtnNum[ 1 ] := TButton():ReDefine( 101, {||( KeyChar( "1", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "1", .F. )
      oBtnNum[ 1 ]:oFont   := oFntNum






      oBtnNum[ 2 ] := TButton():ReDefine( 102, {||( KeyChar( "2", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "2", .F. )
      oBtnNum[ 2 ]:oFont   := oFntNum






      oBtnNum[ 3 ] := TButton():ReDefine( 103, {||( KeyChar( "3", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "3", .F. )
      oBtnNum[ 3 ]:oFont   := oFntNum






      oBtnNum[ 4 ] := TButton():ReDefine( 104, {||( KeyChar( "4", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "4", .F. )
      oBtnNum[ 4 ]:oFont   := oFntNum






      oBtnNum[ 5 ] := TButton():ReDefine( 105, {||( KeyChar( "5", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "5", .F. )
      oBtnNum[ 5 ]:oFont   := oFntNum






      oBtnNum[ 6 ] := TButton():ReDefine( 106, {||( KeyChar( "6", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "6", .F. )
      oBtnNum[ 6 ]:oFont   := oFntNum






      oBtnNum[ 7 ] := TButton():ReDefine( 107, {||( KeyChar( "7", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "7", .F. )
      oBtnNum[ 7 ]:oFont   := oFntNum






      oBtnNum[ 8 ] := TButton():ReDefine( 108, {||( KeyChar( "8", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "8", .F. )
      oBtnNum[ 8 ]:oFont   := oFntNum






      oBtnNum[ 9 ] := TButton():ReDefine( 109, {||( KeyChar( "9", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "9", .F. )
      oBtnNum[ 9 ]:oFont   := oFntNum






      oBtnNum[ 10 ] := TButton():ReDefine( 110, {||( KeyChar( "0", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "0", .F. )
      oBtnNum[ 10 ]:oFont  := oFntNum










      oBtnNum[ 11 ] := TButton():ReDefine( 111, {||( KeyChar( "C", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "C", .F. )
      oBtnNum[ 11 ]:oFont  := oFntNum










      oBtnNum[ 12 ] := TButton():ReDefine( 112, {||( KeyChar( ".", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, ",", .F. )
      oBtnNum[ 12 ]:oFont  := oFntNum










      oBtnNum[ 13 ] := TButton():ReDefine( 113, {||( KeyChar( "=", aTmpArt, aGetArt ), oBrwDet:Refresh(), lRecTotal( aTmp ) )}, oDlgTpv,,, .F.,,, "=", .F. )
      oBtnNum[ 13 ]:oFont  := oFntNum










      oBtnNum[ 14 ] := TButton():ReDefine( 114, {||( KeyChar( "-", aTmpArt, aGetArt ) )}, oDlgTpv,,, .F.,,, "-", .F. )
      oBtnNum[ 14 ]:oFont  := oFntNum










      oBtnNum[ 15 ] := TButton():ReDefine( 115, {||( KeyChar( "*", aTmpArt, aGetArt ), oBrwDet:Refresh(), lRecTotal( aTmp ) )}, oDlgTpv,,, .F.,,, "x", .F. )
      oBtnNum[ 15 ]:oFont  := oFntNum










      oBtnNum[ 16 ] := TButton():ReDefine( 116, {||( lCombinado( ( dbfArticulo )->Codigo, aGetArt, aTmpArt, aTmp ) )}, oDlgTpv,,, .F.,,, "Cn", .F. )
      oBtnNum[ 16 ]:oFont  := oFntNum











      oBtnIni := TButtonBmp():ReDefine( 501, {||loaIni( .F., .T., aGetArt, aTmpArt, aTmp )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., "Star_Yellow_64",, )
      for n := 1 to nNumBtnFam





      oBtnFam[ n ] := TButtonBmp():ReDefine( ( 201 + n ),, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F.,,, )
      oBtnFam[ n ]:lTransparent  := .F.
      oBtnFam[ n ]:oFont              := oFntBrw




      oSayFam[ n ] := TSay():ReDefine( ( 251 + n ), {||   ""}, oDlgTpv,,,, .F.,, .F., .F. )

      next











      oBtnFree := TButtonBmp():ReDefine( ( 301 ), {||( addFreeProduct(), lRecTotal( aTmp ) )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., "FREE_BULLET_86",, )



      oSayFree := TSay():ReDefine( ( 801 ), {||   "Libre"}, oDlgTpv,,,, .F.,, .F., .F. )





      for n := 1 to len( oBtnArt )






      oBtnArt[ n ] := TButtonBmp():ReDefine( ( 301 + n ), {||Msginfo( "" )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F.,,, )
      oBtnArt[ n ]:lTransparent := .F.
      oBtnArt[ n ]:oFont             := oFntBrw




      oSayArt[ n ] := TSay():ReDefine( ( 801 + n ), {||   ""}, oDlgTpv,,,, .F.,, .F., .F. )

      next





      oBrwDet                    := TXBrowse():New( oDlgTpv )

      oBrwDet:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwDet:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwDet:cAlias             := dbfTmpL

      oBrwDet:nMarqueeStyle      := 6

      with object ( oBrwDet:AddCol() )
         :cHeader                := "Inv."
         :bStrData               := {|| "" }
         :bEditValue             := {|| !Empty( ( dbfTmpL )->cCodInv ) }
         :nWidth                 := 16
         :SetCheck( { "Sel16", "Nil16" } )
      end

      with object ( oBrwDet:AddCol() )
         :cHeader                := "Und."
         :bEditValue             := {|| AllTrim( Trans( ( dbfTmpL )->nUntTil, cPicUnd ) ) }
         :nWidth                 := 30
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
      end

      with object ( oBrwDet:AddCol() )
         :cHeader                := "Detalle"
         :bEditValue             := {|| if( Empty( ( dbfTmpL )->cComent ), Rtrim( ( dbfTmpL )->cNomTil ) + if( !Empty( ( dbfTmpL )->cNcmTil ), " con " + ( dbfTmpL )->cNcmTil, "" ), "[*] " + Rtrim( ( dbfTmpL )->cNomTil ) + if( !Empty( ( dbfTmpL )->cNcmTil ), " con " + ( dbfTmpL )->cNcmTil, "" )) }
         :nWidth                 := 150
      end

      with object ( oBrwDet:AddCol() )
         :cHeader                := "%Dto"
         :bEditValue             := {|| Trans( ( dbfTmpL )->nDtoLin, "@EZ 999.99" ) }
         :nWidth                 := 35
      end

      with object ( oBrwDet:AddCol() )
         :cHeader                := "Total"
         :bEditValue             := {|| AllTrim( Trans( nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ), cPorDiv ) ) }
         :nWidth                 := 60
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
      end

      oBrwDet:CreateFromResource( 400 )

      oBrwDet:lHScroll           := .F.
      oBrwDet:lVScroll           := .F.
      oBrwDet:lRecordSelector    := .F.










   TButtonBmp():ReDefine( 700, {||( oBrwDet:GoUp(), oBrwDet:Select( 0 ), oBrwDet:Select( 1 ) )}, oDlgTpv,,, .F.,,,, .F., ( if( nScreenHorzRes >= 1280, "Up48", "Up32" ) ),, )





   TButtonBmp():ReDefine( 710, {||( oBrwDet:GoDown(), oBrwDet:Select( 0 ), oBrwDet:Select( 1 )  )}, oDlgTpv,,, .F.,,,, .F., ( if( nScreenHorzRes >= 1280, "Down48", "Down32" ) ),, )






   TButtonBmp():ReDefine( 720, {||( WinDelRec( oBrwDet, dbfTmpL, nil, nil, .T., .T. ), lRecTotal( aTmp ) )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., ( if( nScreenHorzRes >= 1280, "Papelera", "Garbage_Empty_32" ) ),, )






   TButtonBmp():ReDefine( 730, {||( CrearDescuento( dbfTmpL, oBrwDet ), lRecTotal( aTmp ) )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., ( if( nScreenHorzRes >= 1280, "percent2_48", "Percent_32" ) ),, )






   TButtonBmp():ReDefine( 740, {||( CrearInvitacion( dbfTmpL, oBrwDet ), lRecTotal( aTmp ) )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., ( if( nScreenHorzRes >= 1280, "masks2_48", "Masks_32" ) ),, )






   TButtonBmp():ReDefine( 750, {||( ComentariosTPV( aGetArt, aTmpArt, dbfTmpL ), oBrwDet:Refresh() )}, oDlgTpv,,, .F., {||     ( nMode <> 3 )},,, .F., ( if( nScreenHorzRes >= 1280, "message2_48", "Message_32" ) ),, )




      oTxtTot     := TSay():ReDefine( 630, {|| "Total" }, oDlgTpv, , "G+/N", , .F., oFntEur )
      oNumTot     := TSay():ReDefine( 620, {|| Trans( nTotTik, cPorDiv ) }, oDlgTpv, , "G+/N", , .F., oFntEur )

      if !lLowResolution
         oTxtCom  := TSay():ReDefine( 640, {|| "Comensales: " + AllTrim( Str( aTmp[ 52 ] ) ) }, oDlgTpv, , "G+/N", , .F., oFntTot )
         oTotCom  := TSay():ReDefine( 650, {|| AllTrim( Trans( nTotPax, cPorDiv ) ) + " pax." }, oDlgTpv, , "G+/N", , .F., oFntTot )
      end









      aGetArt[ 8 ] := TGetHlp():ReDefine( 600, { | u | If( PCount()==0, aTmpArt[ 8 ], aTmpArt[ 8 ]:= u ) }, oDlgTpv,,,,,, oFntEur,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      if !lLowResolution
         oMetMsg  := TMeter():ReDefine( 460, { | u | If( pCount() == 0, nMetMsg, nMetMsg := u ) },, oDlgTpv, .F.,,, .T., ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ), , ( 128 + ( 255 * 256 ) + ( 0 * 65536 ) ) )
      end




   oDlgTpv:bStart := {|| StartEdtBig( aTmp, aGet, oDlgTpv, oBrwDet, nMode ), cTextoOfficeBar( aTmp ) }

   oDlgTpv:AddFastKey( 65, {|| if( GetKeyState( 17 ), CreateInfoArticulo(), ) } )




   oDlgTpv:Activate( oDlgTpv:bLClicked, oDlgTpv:bMoved, oDlgTpv:bPainted, .T., {|Self|( lValidDlgTpv( aTmp, aGet, nSaveMode ) )},, {|Self|( LoaFam( .T., .T., aGetArt, aTmpArt, aTmp, nMode ) )}, oDlgTpv:bRClicked,,, )

   oFntBrw:End()
   oFntTot:End()
   oFntEur:End()
   oFntNum:End()

   ( dbfFamilia  )->( OrdSetFocus( cOrdFam ) )
   ( dbfArticulo )->( OrdSetFocus( nOrdArt ) )





   lStopAvisoPedidos()





   oBtnIni        := nil
   oBtnFam        := nil
   oSayFam        := nil
   oBtnArt        := nil
   oSayArt        := nil
   oBtnNum        := nil

   aTmp           := nil

   oBtnPedidos    := nil





   KillTrans()





   dbCommitAll()

Return ( oDlgTpv:nResult == 1 )























Static Function lValidDlgTpv( aTmp, aGet, nSaveMode )

   local lValid   := .T.

   if ( dbfTmpL )->( ordKeyCount() ) <> 0 .AND. ApoloMsgNoYes( "¿Desea guardar el ticket antes de salir?", "Selecciona una opción", .T. )
      lValid      :=  TmpTiket( aTmp, aGet, nSaveMode, .F. )
   end

Return lValid



Static Function StartEdtBig( aTmp, aGet, oDlgTpv, oBrwDet, nMode, lCobrando )

   local oBoton
   local oGrupo
   local oCarpeta

   IIF( lCobrando == nil, lCobrando := .F., ) ;

   if Empty( oOfficeBar )

      if ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 )
         oOfficeBar           := TDotNetBar():New( 0, 0, 1276, 120, oDlgTpv, 1 )
      else
         oOfficeBar           := TDotNetBar():New( 0, 0, 1020, 120, oDlgTpv, 1 )
      end

      oOfficeBar:lPaintAll := .F.
      oOfficeBar:lDisenio  := .F.

      oOfficeBar:SetStyle( 1 )

      oDlgTpv:oTop         := oOfficeBar

      oCarpeta             := TCarpeta():New( oOfficeBar, "Inicio" )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Salones", .F. )
         oBtnTarifa        := TDotNetButton():New( 60, oGrupo, "Cashier_32",               "General",          1, {|| GetSalaVenta( aTmp, aGet ) }, , , .F., .F., .F. )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Otros", .F. )
         oBtnUsuario       := TDotNetButton():New( 60, oGrupo, "Security_Agent_32",        "Cambiar usuario",  1, {|| SelBigUser( aTmp, aGet, dbfUsr ) }, , , .F., .F., .F. )

      oGrupo               := TDotNetGroup():New( oCarpeta, 366, "Acciones", .F. )
         oBtnRenombrar     := TDotNetButton():New( 60, oGrupo, "Note_Edit_32",             "Alias",            1, {|| RenombrarUbicacion( aTmp, aGet ) }, , {|| ( dbfTmpL )->( ordKeyCount() ) > 0 }, .F., .F., .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Note_Add_32",              "Nuevo ticket",     2, {|| GetSalaVenta( aTmp, aGet ) }, , , .F., .F., .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Note_Delete_32",           "Pendiente cobro",  3, {|| GetSalaVenta( aTmp, aGet, .T. ) }, , , .F., .F., .F. )
         oBtnEntregar      := TDotNetButton():New( 60, oGrupo, "Printer_32",               "Entregar nota",    4, {|| ClickEntrega( aTmp, aGet, oDlgTpv ) }, , , .F., .F., .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "printer_comanda_32",       "Copia comanda",    5, {|| if( GetSalaVenta( aTmp, aGet ), ImpresionComanda( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ] , ,.T. ), ) }, , , .F., .F., .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Diskdrive_32",             "Cajón",            6, {|| oUser():OpenCajon() }, , , .F., .F., .F. )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Cobrar", .F., , "" )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Money2_32",                "Cobrar",           1, {|| NewTiket( aGet, aTmp, nSaveMode, aTmp[ 4 ], .T. ) }, , , .F., .F., .F. )

      if ( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 )

      oGrupo               := TDotNetGroup():New( oCarpeta, 126, "Ubicación", .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Media_stop_replace2_32",  "Cambiar ubicación",1, {|| GetSalaVenta( aTmp, aGet, .F. ) }, , , .F., .F., .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Users1_32",               "Comensales",       2, {|| lNumeroComensales( aTmp ) }, , , .F., .F., .F. )

      else

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Ubicación", .F., , "" )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Media_stop_replace2_32",  "Cambiar ubicación",1, {|| GetSalaVenta( aTmp, aGet, .F. ) }, , , .F., .F., .F. )

      end

      oGrupo               := TDotNetGroup():New( oCarpeta, 226, "Datos de cliente", .F., , "" )
         oBtnCliente       := TDotNetButton():New( 220, oGrupo, "User1_16",                "...",              1, {|| lSeleccionaCliente( aTmp ) }, , , .F., .F., .F. )
         oBtnDireccion     := TDotNetButton():New( 220, oGrupo, "Home_16",                 "...",              1, {|| lSeleccionaCliente( aTmp ) }, , , .F., .F., .F. )
         oBtnTelefono      := TDotNetButton():New( 220, oGrupo, "Mobilephone3_16",         "...",              1, {|| lSeleccionaCliente( aTmp ) }, , , .F., .F., .F. )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Salida", .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "End32",                    "Salida",           1, {|| lFreeMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto ), oDlgTpv:End() }, , , .F., .F., .F. )





      oCarpeta             := TCarpeta():New( oOfficeBar, "Otros" )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Tipo venta", .F. )
         oBtnTipoVta       := TDotNetButton():New( 60, oGrupo, "Cashier_user1_32",         "Ticket",           1, {|| ClickButtonsMode( aTmp ) }, , , .F., .F., .F. )

      oGrupoSerie          := TDotNetGroup():New( oCarpeta, 126, "Serie: " + aTmp[ 1 ], .F. )
         oBtnUpSerie       := TDotNetButton():New( 60, oGrupoSerie, "Up32",                "Subir",            1, {|| lCambiaSerie( aTmp, .T., oGrupoSerie ) }, , {|| ( nMode == 1 ) }, .F., .F., .F. )
         oBtnDownSerie     := TDotNetButton():New( 60, oGrupoSerie, "Down32",              "Bajar",            2, {|| lCambiaSerie( aTmp, .F., oGrupoSerie ) }, , {|| ( nMode == 1 ) }, .F., .F., .F. )

      if !( nScreenHorzRes >= 1024 .AND. nScreenHorzRes >= 1280 )
      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Otros", .F. )
         oBoton            := TDotNetButton():New( 60, oGrupo, "Users1_32",                "Comensales",       1, {|| lNumeroComensales( aTmp ) }, , , .F., .F., .F. )
      end

      oGrupo               := TDotNetGroup():New( oCarpeta, 126, "Ticket", .F. )
         oBtnUp            := TDotNetButton():New( 60, oGrupo, "Arrow_Up_Blue_Save_32",    "Subir",            1, {|| lCambiaTicket( .T., aTmp, aGet, nMode ) }, , , .F., .F., .F. )
         oBtnDown          := TDotNetButton():New( 60, oGrupo, "Arrow_Down_Blue_Save_32",  "Bajar",            2, {|| lCambiaTicket( .F., aTmp, aGet, nMode ) }, , , .F., .F., .F. )

      oGrupo               := TDotNetGroup():New( oCarpeta, 66, "Pedidos", .F., , "" )
         oBoton            := TDotNetButton():New(  60, oGrupo, "SndInt32",                "Pedidos en línea", 1, {|| ProcesaPedidosWeb( aTmp ) }, , , .F., .F., .F. )

   end

















   oBtnUpSerie:lEnabled   := ( nMode == 1 )
   oBtnDownSerie:lEnabled := ( nMode == 1 )





   CargoEdtBig( aTmp, aGet, oDlgTpv, lCobrando )







Return ( nil )



Static Function CargoEdtBig( aTmp, aGet, oDlgTpv, lCobrando )

   IIF( lCobrando == nil, lCobrando := .F., ) ;





   if nSaveMode == 1

      if lRecogerUsuario()
         if !SelBigUser( aTmp, aGet, dbfUsr )
            oDlgTpv:end()
            Return nil
         end
      else
         SetBigUser( aTmp, aGet )
      end

      if IsTrue( oSalaVentas:lPuntosVenta )

         SysRefresh()




            SetSalaVenta( aTmp, aGet )


      end

   else

      SetBigUser( aTmp, aGet )

   end





   oSalaVentas:ConfigButton( oBtnTarifa, oBtnRenombrar )





   cTitleDialog( aTmp )





   if !lCobrando
      lRecTotal( aTmp )
   end

Return ( nil )



Static Function SetSalaVenta( aTmp, aGet )

   local oError
   local oBlock

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   if GuardaVenta( aTmp, aGet )





      oSalaVentas:InitSala()





      if Empty( oSalaVentas:cSelectedPunto )
         oSalaVentas:cSelectedPunto  := "General"
      end

      aTmp[ 48   ]     := oSalaVentas:cSelectedSala
      aTmp[ 49  ]     := oSalaVentas:cSelectedPunto
      aTmp[ 12    ]     := oSalaVentas:nSelectedPrecio





      oSalaVentas:ConfigButton( oBtnTarifa, oBtnRenombrar )





      cTitleDialog( aTmp )

   end

   RECOVER USING oError

      msgStop( "Error al asignar la salas de venta" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( .T. )



Static Function GetNuevaVenta( aTmp, aGet )





   if GuardaVenta( aTmp, aGet )





      if !BeginTrans( aTmp, aGet, 1, .T. )

         nSaveMode            := 1





         if !Empty( oBtnIni )
            oBtnIni:Click()
         end





         if uFieldEmpresa( "lShowSala" )
            GetSalaVenta( aTmp, aGet )
         else
            SetSalaVenta( aTmp, aGet )
         end

         lRecTotal( aTmp )

      end






      cTitleDialog( aTmp )

   end

Return ( nil )



Static Function GuardaVenta( aTmp, aGet, lImpresionComanda )

   local lValid      := .T.
   local cNumTik





   if ( dbfTmpL )->( ordKeyCount() ) <> 0

      lValid         := TmpTiket( aTmp, aGet, nSaveMode, .F., lImpresionComanda )

      if lValid
         nSaveMode   := 2
      end

   else


      if ( !Empty( oSalaVentas:cSelectedSala ) .AND. !Empty( oSalaVentas:cSelectedPunto ) )  .OR.  ( if( IsChar( oSalaVentas:cSelectedPunto ), AllTrim( oSalaVentas:cSelectedPunto ) == "General" .AND. !Empty( aTmp[ 51 ] ), .F.) )

         cNumTik     := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]

         if !Empty( cNumTik )

            if dbSeekInOrd( cNumTik, "cNumTik", dbfTikT )

               if ApoloMsgNoYes( "El ticket " + aTmp[ 1 ] + "/" + Alltrim( aTmp[ 2 ] ) + " va a ser eliminado.", "¿Desea continuar?", .T. )

                  TpvDelRec()

                  if dbLock( dbfTikT )
                     ( dbfTikT )->( dbDelete() )
                     ( dbfTikT )->( dbUnLock() )
                  end

               end

            end

         end



      end

   end





   if !Empty( oSalaVentas )
      lFreeMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto )
   end

   dbSafeUnLock( dbfTikT )

Return ( lValid )



Static Function GetTiketPendiente( aTmp, aGet )





   if GuardaVenta( aTmp, aGet )





      if oSalaVentas:Tikets( oBtnTarifa, oBtnRenombrar )

         if dbSeekInOrd( oSalaVentas:cSelectedTiket(), "cNumTik", dbfTikT )

            aScatter( dbfTikT, aTmp )

            if BeginTrans( aTmp, aGet, 2, .T. )
               Return .F.
            end

            nSaveMode               := 2

            lRecTotal( aTmp )

         end





         cTitleDialog( aTmp )

      end

   end

Return ( nil )



Static Function cTitleDialog( aTmp )





   oDlgTpv:cTitle             := LblTitle( nSaveMode ) + "tickets a clientes "

   if !Empty( aTmp[ 2 ] )
      oDlgTpv:cTitle          += Space( 1 )
      oDlgTpv:cTitle          += "[ Ticket : " + aTmp[ 1 ] + "/" + Alltrim( aTmp[ 2 ] ) + "/" + Alltrim( aTmp[ 3 ] ) + "]"
   end

   if !Empty( oSalaVentas )

      oDlgTpv:cTitle          += Space( 1 )
      oDlgTpv:cTitle          += "[ Precio : " + oSalaVentas:cTextoPrecio() + "]"

      if !Empty( oSalaVentas:cSelectedPunto )


         if !Empty( oSalaVentas:cTextoSala() )
            oDlgTpv:cTitle    += Space( 1 )
            oDlgTpv:cTitle    += "[ Sala : " + oSalaVentas:cTextoSala() + "]"
         end

         if !Empty( oSalaVentas:GetSelectedTexto() )
            oDlgTpv:cTitle    += Space( 1 )
            oDlgTpv:cTitle    += "[ Punto : " + Alltrim( oSalaVentas:GetSelectedTexto() ) + "]"
         end

      end

   end

   if !Empty( aTmp[ 51 ] )
      oDlgTpv:cTitle          += Space( 1 )
      oDlgTpv:cTitle          += "[ Alias : " + Rtrim( aTmp[ 51 ] ) + "]"
   end

   oDlgTpv:Refresh()

Return ( nil )



Static Function KeyChar( cKey, aTmpArt, aGetArt )

   do case
      case At( cKey, "0123456789" ) > 0
         aTmpArt[ 8 ]     += cKey

      case cKey == "." .AND. !( At( ".", aTmpArt[ 8 ] ) > 0 )
         aTmpArt[ 8 ]     += cKey

      case cKey == "-"
         if !( At( "-", aTmpArt[ 8 ] ) > 0 )
            aTmpArt[ 8 ]  := cKey + aTmpArt[ 8 ]
         else
            aTmpArt[ 8 ]  := StrTran( aTmpArt[ 8 ], "-", "" )
         end

      case cKey == "C"
         aTmpArt[ 8 ]     := ""





      case cKey == "*"
         if !Empty( aTmpArt[ 8 ] )
         if ( dbfTmpL )->( ordKeyCount() ) <> 0
            ( dbfTmpL )->nUntTil := Val( aTmpArt[ 8 ] )
         end
         aTmpArt[ 8 ]     := ""
         end





      case cKey == "="
         if ( dbfTmpL )->( ordKeyCount() ) <> 0
            ( dbfTmpL )->nPvpTil := Val( aTmpArt[ 8 ] )
         end
         aTmpArt[ 8 ]     := ""

   end

   aGetArt[ 8 ]:cText( aTmpArt[ 8 ] )

return ( nil )



Static Function loaFam( lAvance, lRepos, aGetArt, aTmpArt, aTmp, nMode )

   local n                 := 1
   local nNumeroFamilias   := 0

   IIF( lAvance == nil, lAvance := .T., ) ;
   IIF( lRepos == nil, lRepos := .F., ) ;



   aEval( oBtnFam, {|o| o:Hide() } )
   aEval( oSayFam, {|o| o:Hide() } )



   if nMode == 3
      return nil
   end



   if lRepos

      ( dbfFamilia )->( dbGoTop() )

      aRecFam              := {}
      aAdd( aRecFam, ( dbfFamilia )->( Recno() ) )

   end



   if ( !lRepos .AND. !lAvance )

      aDel( aRecFam, len( aRecFam ), .T. )
      ( dbfFamilia )->( dbGoTo( aRecFam[ len( aRecFam ) ] ) )

   end



   if ( !lRepos .AND. lAvance )

      if ( dbfFamilia )->( Recno() ) <> 0 .AND. aScan( aRecFam, ( dbfFamilia )->( Recno() ) ) == 0
         aAdd( aRecFam, ( dbfFamilia )->( Recno() ) )
      end

   end



   if ( !lRepos .AND. lAvance ) .OR. ( !lRepos .AND. !lAvance .AND. len( aRecFam ) > 1 )

      oBtnFam[ n ]:ReLoadBitmap( "AnteriorFamilia" )
      oBtnFam[ n ]:Cargo               := .T.
      oBtnFam[ n ]:bAction             := {|| loaFam( .F., .F., aGetArt, aTmpArt, aTmp, nMode ) }
      oBtnFam[ n ]:bRClicked           := nil
      oBtnFam[ n ]:lTransparent        := .T.
      oBtnFam[ n ]:Show()

      SetWindowText( oBtnFam[ n ]:hWnd, "" )

      oSayFam[ n ]:SetText( "Anterior" )
      oSayFam[ n ]:Show()

      n++

   end



   nNumeroFamilias         := nNumeroFamilias()

   while n <= nNumeroFamilias

      if !( dbfFamilia )->( eof() )

         if File( cFileBmpName( ( dbfFamilia )->cImgBtn ) )

            oBtnFam[ n ]:ReLoadBitmap( cFileBmpName( ( dbfFamilia )->cImgBtn ) )

             oSayFam[ n ]:Show()
             oSayFam[ n ]:SetText( Rtrim( ( dbfFamilia )->cNomFam ) )

            SetWindowText( oBtnFam[ n ]:hWnd, "" )

         else

            oBtnFam[ n ]:HideBitmap()

             oSayFam[ n ]:Hide()
             oSayFam[ n ]:SetText( Rtrim( ( dbfFamilia )->cNomFam ) )

            SetWindowText( oBtnFam[ n ]:hWnd, Rtrim( ( dbfFamilia )->cNomFam ) )









         end


         oBtnFam[ n ]:Show()
         oBtnFam[ n ]:Cargo            := .F.
         oBtnFam[ n ]:lTransparent     := .F.
         oBtnFam[ n ]:bAction          := bLoaPrd( ( dbfFamilia )->cCodFam, aGetArt, aTmpArt, aTmp )

         if !lTactilMode()
            oBtnFam[ n ]:bRClicked     := bEdtFam( ( dbfFamilia )->cCodFam )
         end

         ( dbfFamilia )->( dbSkip() )

      end

      n++

   end

   if lMostrarFamilias()

      oSayFam[ n ]:SetText( "Siguiente" )
      oSayFam[ n ]:Show()

      oBtnFam[ n ]:ReLoadBitmap( "SiguienteFamilia" )
      oBtnFam[ n ]:Cargo               := .T.
      oBtnFam[ n ]:lTransparent        := .T.
      oBtnFam[ n ]:bAction             := {|| loaFam( .T., .F., aGetArt, aTmpArt, aTmp, nMode ) }
      oBtnFam[ n ]:Show()

   end





   if lRepos

      if !Empty( oBtnIni:bAction )
         Eval( oBtnIni:bAction, oBtnIni )
      end

   else

      for n := 1 to len( oBtnFam )

         if !oBtnFam[ n ]:Cargo

            if !Empty( oBtnFam[ n ]:bAction )
               Eval( oBtnFam[ n ]:bAction, oBtnFam[ n ] )
            end

            exit

         end

      next

   end

Return ( nil )



Static Function loaIni( lAvance, lInit, aGetArt, aTmpArt, aTmp )

   local n           := 1
   local nOrd        := ( dbfArticulo )->( OrdSetFocus( "nPosTcl" ) )

   IIF( lAvance == nil, lAvance := .T., ) ;
   IIF( lInit == nil, lInit := .F., ) ;





   if lInit

      ( dbfArticulo )->( dbGoTop() )

      aRecArt        := {}
      aAdd( aRecArt, ( dbfArticulo )->( Recno() ) )

   else

      if !lAvance

         aDel( aRecArt, len( aRecArt ), .T. )
         ( dbfArticulo )->( dbGoTo( aRecArt[ len( aRecArt  ) ] ) )

      else

         aAdd( aRecArt, ( dbfArticulo )->( Recno() ) )

      end

   end

   SysRefresh()

   if ( !lInit .AND. len( aRecArt ) > 1 )

      oSayArt[ n ]:SetText( "Anterior" )
      oSayArt[ n ]:Show()

      oBtnArt[ n ]:ReLoadBitmap( "AnteriorArticulo" )
      oBtnArt[ n ]:Cargo         := .T.
      oBtnArt[ n ]:bAction       := {|| loaIni( .F., .F., aGetArt, aTmpArt, aTmp ) }
      oBtnArt[ n ]:bRClicked     := nil
      oBtnArt[ n ]:lTransparent  := .T.
      oBtnArt[ n ]:Show()

      SetWindowText( oBtnArt[ n ]:hWnd, "" )

      n++

   end

   while n <= nNumBtnArt - 1

      while !( dbfArticulo )->( eof() ) .AND. n <= nNumBtnArt - 1

         if ( dbfArticulo )->nPosTcl <> 0 .AND. ( dbfArticulo )->lIncTcl

            if File( cFileBmpName( ( dbfArticulo )->cImagen ) )

                oBtnArt[ n ]:ReLoadBitmap( cFileBmpName( ( dbfArticulo )->cImagen ) )

                oSayArt[ n ]:SetText( if( !Empty( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->Nombre ) ) )
                   oSayArt[ n ]:SetColor( oDlgTpv:nClrText, oDlgTpv:nClrPane )

                oSayArt[ n ]:Show()

            else

                SetWindowText( oBtnArt[ n ]:hWnd, if( !Empty( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->Nombre ) ) )
                   oBtnArt[ n ]:HideBitmap()






                oSayArt[ n ]:Hide()

            end

            oBtnArt[ n ]:Show()
            oBtnArt[ n ]:bAction          := bAddPrd( ( dbfArticulo )->Codigo, aGetArt, aTmpArt, aTmp )
            oBtnArt[ n ]:bRClicked        := bEdtPrd( ( dbfArticulo )->Codigo )

            n++

         end

         ( dbfArticulo )->( dbSkip() )

      end

      if n <= nNumBtnArt - 1
         oSayArt[ n ]:Hide()
         oBtnArt[ n ]:Hide()
         oBtnArt[ n ]:bAction    := nil
         n++
      end

   end

   if !( dbfArticulo )->( eof() )

      oBtnArt[ n ]:ReLoadBitmap( "SiguienteArticulo" )
      oBtnArt[ n ]:bAction       := {|| loaIni( .T., .F., aGetArt, aTmpArt, aTmp ) }
      oBtnArt[ n ]:lTransparent  := .T.
      oBtnArt[ n ]:Show()

      oSayArt[ n ]:SetText( "Siguiente" )
      oSayArt[ n ]:Show()

   else

      oBtnArt[ n ]:Hide()
      oBtnArt[ n ]:bAction       := nil

      oSayArt[ n ]:Hide()

   end

   ( dbfArticulo )->( OrdSetFocus( nOrd ) )

   SysRefresh()

Return ( nil )



Static Function bLoaPrd( cCodFam, aGetArt, aTmpArt, aTmp )

Return ( {|Self| loaPrd( cCodFam, .T., .T., aGetArt, aTmpArt, aTmp ) } )






Static Function loaPrd( cCodFam, lAvance, lInit, aGetArt, aTmpArt, aTmp )

   local n           := 1

   IIF( lAvance == nil, lAvance := .T., ) ;
   IIF( lInit == nil, lInit := .F., ) ;





   if lInit

      if uFieldEmpresa( "lOrdNomTpv" )

         if dbSeekInOrd( cCodFam, "nNomTpv", dbfArticulo )

            aRecArt     := {}
            aAdd( aRecArt, ( dbfArticulo )->( Recno() ) )

         end

      else

         if dbSeekInOrd( cCodFam, "nPosTpv", dbfArticulo )

            aRecArt     := {}
            aAdd( aRecArt, ( dbfArticulo )->( Recno() ) )

         end

      end

   else

      if !lAvance

         aDel( aRecArt, len( aRecArt ), .T. )

         ( dbfArticulo )->( dbGoTo( aRecArt[ len( aRecArt  ) ] ) )

      else

         aAdd( aRecArt, ( dbfArticulo )->( Recno() ) )

      end

   end

   SysRefresh()

   if ( !lInit .AND. len( aRecArt ) > 1 )

      oBtnArt[ n ]:ReLoadBitmap( "AnteriorArticulo" )
      oBtnArt[ n ]:bAction       := {|| loaPrd( cCodFam, .F., .F., aGetArt, aTmpArt, aTmp ) }
      oBtnArt[ n ]:lTransparent  := .T.
      oBtnArt[ n ]:Cargo         := .T.
      oBtnArt[ n ]:bRClicked     := nil

      SetWindowText( oBtnArt[ n ]:hWnd, "" )

      oBtnArt[ n ]:Show()

      oSayArt[ n ]:SetText( "Anterior" )
      oSayArt[ n ]:Show()

      n++

   end

   while n <= nNumBtnArt - 1

      if ( dbfArticulo )->Familia == cCodFam .AND. !( dbfArticulo )->( eof() )

         if ( dbfArticulo )->lIncTcl

            if File( cFileBmpName( ( dbfArticulo )->cImagen ) )

               oBtnArt[ n ]:ReLoadBitmap( cFileBmpName( ( dbfArticulo )->cImagen ) )

               SetWindowText( oBtnArt[ n ]:hWnd, "" )

                oSayArt[ n ]:SetText( if( !Empty( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->Nombre ) ) )
                oSayArt[ n ]:Show()

            else

                   oBtnArt[ n ]:HideBitmap()

               SetWindowText( oBtnArt[ n ]:hWnd, if( !Empty( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->cDesTcl ), Rtrim( ( dbfArticulo )->Nombre ) ) )

                oSayArt[ n ]:SetText( "" )
                oSayArt[ n ]:Hide()

            end

            oBtnArt[ n ]:Show()
            oBtnArt[ n ]:bAction       := bAddPrd( ( dbfArticulo )->Codigo, aGetArt, aTmpArt, aTmp )
            oBtnArt[ n ]:bRClicked     := bEdtPrd( ( dbfArticulo )->Codigo )

            n++

         end

         ( dbfArticulo )->( dbSkip() )

      else

         oSayArt[ n ]:Hide()

         oBtnArt[ n ]:Hide()
         oBtnArt[ n ]:bAction          := nil

         n++

      end

   end

   if ( dbfArticulo )->Familia == cCodFam .AND. !( dbfArticulo )->( eof() )

      oBtnArt[ n ]:ReLoadBitmap( "SiguienteArticulo" )
      oBtnArt[ n ]:bAction             := {|| loaPrd( cCodFam, .T., .F., aGetArt, aTmpArt, aTmp ) }
      oBtnArt[ n ]:lTransparent        := .T.

      SetWindowText( oBtnArt[ n ]:hWnd, "" )

      oBtnArt[ n ]:Show()

      oSayArt[ n ]:SetText( "Siguiente" )
      oSayArt[ n ]:Show()


   else

      oSayArt[ n ]:Hide()

      oBtnArt[ n ]:bAction             := nil
      oBtnArt[ n ]:Hide()

   end

   SysRefresh()

return ( nil )



static function bAddPrd( cCodArt, aGetArt, aTmpArt, aTmp )

return ( {|Self| AddPrd( cCodArt, aGetArt, aTmpArt, aTmp ), lRecTotal( aTmp ) } )



static function bEdtPrd( cCodArt )

return ( {|| EdtArticulo( cCodArt ) } )



static function bEdtFam( cCodFam )

return ( {|| EdtFamilia( cCodFam ) } )



static function AddPrd( cCodArt, aGetArt, aTmpArt, aTmp )

   local cCodFam
   local cCodTImp
   local lAcum                   := .F.
   local aArtSta                 := aGetStatus( dbfArticulo )
   local aFamSta                 := aGetStatus( dbfFamilia  )

   if Empty( cCodArt )
      return .T.
   end





   ( dbfArticulo )->( ordSetFocus( "CodeBar" ) )

   if ( dbfArticulo )->( dbSeek( cCodArt ) )
      cCodArt                    := ( dbfArticulo )->Codigo
   end

   ( dbfArticulo )->( ordSetFocus( "Codigo" ) )





   if ( dbfArticulo )->( dbSeek( cCodArt ) )

      if !lTwoLin

         aTmpArt[ 5 ]     := cCodArt

         if !Empty( ( dbfArticulo )->cDesTik )
            aTmpArt[ 6 ]  := ( dbfArticulo )->cDesTik
         else
            aTmpArt[ 6 ]  := ( dbfArticulo )->Nombre
         end





         if !Empty( ( dbfArticulo )->cDesCmd )
            aTmpArt[ 57 ]  := ( dbfArticulo )->cDesCmd
         else
            aTmpArt[ 57 ]  := aTmpArt[ 6 ]
         end





         cCodArtAnt              := cCodArt





         aTmpArt[ 11 ]     := ( dbfArticulo )->Familia
         aTmpArt[ 25 ]     := ( dbfArticulo )->lTipAcc
         aTmpArt[ 26 ]     := ( dbfArticulo )->nCtlStock





         cCodFam                 := ( dbfArticulo )->Familia
         if !Empty( cCodFam )
            aTmpArt[ 39 ]  := cCodFam
            aTmpArt[ 40 ]  := cGruFam( cCodFam, dbfFamilia )





            if dbSeekInOrd( cCodFam, "cCodFam", dbfFamilia )

               lAcum                := ( dbfFamilia )->lAcum

               aTmpArt[ 19 ]  := ( dbfArticulo )->cCodPrp1
               aTmpArt[ 20 ]  := ( dbfArticulo )->cCodPrp2

               cCodTImp             := ( dbfFamilia  )->cCodImp

            else
               aTmpArt[ 19 ]  := Space( 10 )
               aTmpArt[ 20 ]  := Space( 10 )
            end

            if !Empty( cCodTImp ) .AND. oTComandas:oDbf:SeekInOrd( cCodTImp, "cCodigo" )

               aTmpArt[ 60 ] := cCodTImp
               aTmpArt[ 61  ] := oTComandas:oDbf:nOrden

            else

               aTmpArt[ 61 ]  := 0

            end

         end





         aTmpArt[ 68 ]    := ( dbfArticulo )->cTipImp1
         aTmpArt[ 69 ]    := ( dbfArticulo )->cTipImp2





         aTmpArt[ 10 ]     := nIva( dbfIva, ( dbfArticulo )->TipoIva )
         aTmpArt[ 7 ]     := nRetPreArt( aTmp[ 12 ], cDivEmp(), .T., dbfArticulo, dbfDiv, dbfKit, dbfIva, .T. )





         if ( dbfArticulo )->lFacCnv
            aTmpArt[ 23 ]     := ( dbfArticulo )->nFacCnv
         end





         if !Empty( aTmpArt[ 8 ] )

            if ValType( aTmpArt[ 8 ] ) == "C"
               aTmpArt[ 8 ]  := Val( aTmpArt[ 8 ] )
            end

         else

            aTmpArt[ 8 ]     := 1

         end

         aTmpArt[ 27 ]        := oUser():cAlmacen()





         aTmpArt[ 58 ]       := oFideliza:InPrograma( aTmpArt[ 5 ], aTmp[ 6 ], dbfArticulo )





         if oVisor <> nil
            oVisor:SetBufferLine( { aTmpArt[ 6 ], Trans( aTmpArt[ 7 ], cPouDiv ) }, 1 )
         end





         aTmpArt[ 31 ]        := nLastNum( dbfTmpL )

         if lAcum
            WinGather( aTmpArt, aGetArt, dbfTmpL, oBrwDet, 1, nil, .T. )
         else
            if !lIsCode( aTmpArt, dbfTmpL, oBrwDet )
               WinGather( aTmpArt, aGetArt, dbfTmpL, oBrwDet, 1, nil, .T. )
            end
         end

      else

         aTmpArt                    := dbScatter( dbfTmpL )
         aTmpArt[ 13 ]        := cCodArt

         if !Empty( ( dbfArticulo )->cDesTik )
            aTmpArt[ 14 ]     := ( dbfArticulo )->cDesTik
         else
            aTmpArt[ 14 ]     := ( dbfArticulo )->Nombre
         end






         if ( dbfArticulo )->lFacCnv
            aTmpArt[ 50 ]     := ( dbfArticulo )->nFacCnv
         end





         aTmpArt[ 16 ]        := ( dbfArticulo )->Familia





         aTmpArt[ 15 ]        := nRetPreArt( oSalaVentas:nSelectedCombinado, cDivEmp(), .T., dbfArticulo, dbfDiv, dbfKit, dbfIva, uFieldEmpresa( "LBUSIMP" ) )
         aTmpArt[ 7 ]        := cRetPreArt( aTmpArt[ 5 ], oSalaVentas:nSelectedCombinado, cDivEmp(), .T., dbfArticulo, dbfDiv, dbfKit, dbfIva, .T. )

         lTwoLin                    := .F.





         if oVisor <> nil
            oVisor:Say( aTmpArt[ 6 ], Trans( aTmpArt[ 7 ], cPouDiv ) )
         end

         WinGather( aTmpArt, aGetArt, dbfTmpL, oBrwDet, 2, nil, .T. )





         if !Empty( cCodFamAnt )
            loaPrd( cCodFamAnt, .T., .T., aGetArt, aTmpArt, aTmp )
         end





         cCodArtAnt                 := ""
         cCodFamAnt                 := ""

      end





      aGetArt[ 8 ]:cText( "" )
      aTmpArt[ 7 ]        := 0





      if ( dbfFamilia )->lMostrar
         ComentariosTPV( aGetArt, aTmpArt, dbfTmpL, ( dbfFamilia )->cComFam )
         oBrwDet:Refresh()
      end

      if oVisor <> nil
         oVisor:SetBufferLine( { "Total", Trans( nTotTik, cPorDiv ) }, 2 )
         oVisor:WriteBufferLine()
      end

   else

      MsgBeepStop( "Artículo no encontrado" )

   end





   SetStatus( dbfArticulo, aArtSta )
   SetStatus( dbfFamilia,  aFamSta )

return ( nil )



Static Function EdtCob( aTmp, aGet, dbfTikP, oBrw, bWhen, bValid, nMode, aTmpTik )

    local oDlg
   local oSay
   local cSay
   local oBmpDiv
   local cImpDiv
   local oGetCaj
   local cGetCaj
   local oGetFpg
   local cGetFpg
   local oGetSubCta
   local cGetSubCta

   if nMode == 1
      aTmp[ 13 ]  := 1
      aTmp[ 12 ]  := cDivEmp()
      aTmp[ 8 ]  := cDefFpg()
      aTmp[ 18 ]  := cCurSesion()
      aTmp[ 5 ]  := oUser():cCaja()
   end

   cImpDiv              := cPorDiv( aTmp[ 12 ], dbfDiv )
   cGetCaj              := RetFld( aTmp[ 5 ], dbfCajT, "cNomCaj" )
   cGetFpg              := RetFld( aTmp[ 8 ], dbfFPago )
   cSay                 := Num2Text( aTmp[ 9 ] )

   oDlg = TDialog():New(,,,,, "PgoTiket",, .F.,,,,,, .F.,,,,,, .F., )




      aGet[ 18 ] := TGetHlp():ReDefine( 90, { | u | If( PCount()==0, aTmp[ 18 ], aTmp[ 18 ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 6 ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ 6 ], aTmp[ 6 ]:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,,,, {|Self|aGet[ 6 ]:cText( Calendario( aTmp[ 6 ] ) )}, nil, "LUPA",, )





      aGet[ 11 ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ 11 ], aTmp[ 11 ]:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      aGet[ 8 ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ 8 ], aTmp[ 8 ]:= u ) }, oDlg,,, {||    cFpago( aGet[ 8 ], dbfFPago, oGetFpg )},,,,,, .F.,,, .F., .F.,,,,,, nil, "LUPA",, )
      aGet[ 8 ]:bHelp  := {|| BrwFPago( aGet[ 8 ], oGetFpg, .F. ) }




      oGetFpg := TGetHlp():ReDefine( 161, { | u | If( PCount()==0, cGetFpg, cGetFpg:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )











      aGet[ 5 ] := TGetHlp():ReDefine( 280, { | u | If( PCount()==0, aTmp[ 5 ], aTmp[ 5 ]:= u ) }, oDlg,,, {||    cCajas( aGet[ 5 ], dbfCajT, oGetCaj )},,,,,, .F., {||         ( nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ 5 ], oGetCaj ) )}, nil, "LUPA",, )




      oGetCaj := TGetHlp():ReDefine( 281, { | u | If( PCount()==0, cGetCaj, cGetCaj:= u ) }, oDlg,,,,,,,,, .F., {||     .F.},, .F., .F.,,,,,, nil,,, )









      aGet[ 12 ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ 12 ], aTmp[ 12 ]:= u ) }, oDlg,, "@!", {||    (  cDivOut( aGet[ 12 ], oBmpDiv, aGet[ 13 ], nil, nil, @cImpDiv, nil, nil, nil, nil, dbfDiv, oBandera ), aGet[ 9 ]:SetPicture( cImpDiv ), .T. )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|BrwDiv( aGet[ 12 ], oBmpDiv, aGet[ 13 ], dbfDiv, oBandera )}, nil, "LUPA",, )




        oBmpDiv := TBitmap():ReDefine( 121, "BAN_EURO",, oDlg,,, .F., .F.,,, .F.,,, .F. )






      aGet[ 13 ] := TGetHlp():ReDefine( 122, { | u | If( PCount()==0, aTmp[ 13 ], aTmp[ 13 ]:= u ) }, oDlg,, "@E 999,999.9999",, "N/W*",,,,, .F., {||        ( .F. )},, .F., .F.,,,,,, nil,,, )







      aGet[ 9 ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ 9 ], aTmp[ 9 ]:= u ) }, oDlg,, ( cPorDiv ), {||    ( oSay:SetText( Num2Text( aTmp[ 9 ] ) ), .T. )}, "N/W*",,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )




      oSay := TSay():ReDefine( 140, {|| cSay}, oDlg,, "N/W*",, .F.,, .F., .F. )









      aGet[ 19 ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ 19 ], aTmp[ 19 ]:= u ) }, oDlg,, ( Replicate( "X", nLenSubcuentaContaplus() ) ), {||    ( MkSubCta( aGet[ 19 ], { aTmp[ 19 ] }, oGetSubCta ) )}, "N/W*",,,,, .F., {||     ( nLenCuentaContaplus() <> 0 .AND. nMode <> 3 )},, .F., .F.,,,,, {|Self|( BrwChkSubCta( aGet[ 19 ], oGetSubCta ) )}, nil, "LUPA",, )





        oGetSubCta := TGetHlp():ReDefine( 151, { | u | If( PCount()==0, cGetSubCta, cGetSubCta:= u ) }, oDlg,,,, "N/W*",,,,, .F., {||         .F.},, .F., .F.,,,,,, nil,,, )





        TButton():ReDefine( 1, {||( WinGather( aTmp, aGet, dbfTmpP, oBrw, nMode ), oDlg:end( 1 ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





      TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

      oDlg:AddFastKey( 116, {|| WinGather( aTmp, aGet, dbfTmpP, oBrw, nMode ), oDlg:end( 1 ) } )



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( aGet[ 12 ]:lValid(), aGet[ 19 ]:lValid() )}, oDlg:bRClicked,,, )

   oBmpDiv:end()

Return ( oDlg:nResult == 1 )



Static Function loaCli( aGet, aTmp, nMode, oTelefonoClient, oMailClient )

   local lValid      := .F.
   local cNewCodCli  := aGet[ 11 ]:VarGet()
   local lChgCodCli  := ( Empty( cOldCodCli ) .OR. AllTrim( cOldCodCli ) <> AllTrim( cNewCodCli ) )

   if Empty( cNewCodCli )
      Return .T.
   end

   if At( ".", cNewCodCli ) <> 0
      cNewCodCli     := PntReplace( aGet[ 11 ], "0", RetNumCodCliEmp() )
   else
      cNewCodCli     := Rjust( cNewCodCli, "0", RetNumCodCliEmp() )
   end

   if ( dbfClient )->( dbSeek( cNewCodCli ) )

      if ( dbfClient )->lBlqCli
         msgStop( "Cliente bloqueado, no se pueden realizar operaciones de venta" )
         return .F.
      end





      if ( lChgCodCli )
         aTmp[ 20 ]  := ( dbfClient )->lModDat
      end

      aGet[ 11 ]:cText( ( dbfClient )->Cod )

      if Empty( aGet[ 12 ]:varGet() ) .OR. lChgCodCli
         aGet[ 12 ]:cText( ( dbfClient )->nTarifa )
      end

      if ( dbfClient )->nColor <> 0
         aGet[ 13 ]:SetColor( , ( dbfClient )->nColor )
      end

      if lChgCodCli
         aGet[ 13 ]:cText( ( dbfClient )->Titulo  )
      end

      if Empty( aGet[ 14 ]:varGet() ) .OR. lChgCodCli
         aGet[ 14 ]:cText( ( dbfClient )->Domicilio )
      end

      if Empty( aGet[ 15 ]:varGet() ) .OR. lChgCodCli
         aGet[ 15 ]:cText( ( dbfClient )->Poblacion )
      end

      if Empty( aGet[ 62 ]:varGet() ) .OR. lChgCodCli
         aGet[ 62 ]:cText( ( dbfClient )->Telefono )
      end

      if Empty( aGet[ 16 ]:varGet() ) .OR. lChgCodCli
         aGet[ 16 ]:cText( ( dbfClient )->Provincia )
      end

      if Empty( aGet[ 18 ]:varGet() ) .OR. lChgCodCli
         aGet[ 18 ]:cText( ( dbfClient )->CodPostal )
      end

      if Empty( aGet[ 19 ]:varGet() ) .OR. lChgCodCli
         aGet[ 19 ]:cText( ( dbfClient )->Nif )
      end

      if Empty( aTmp[ 47 ] ) .OR. lChgCodCli
         aTmp[ 47 ]  := ( dbfClient )->cCodGrp
      end

      if oTelefonoClient <> nil
         oTelefonoClient:SetText( ( dbfClient )->Telefono )
      end

      if oMailClient <> nil
         oMailClient:SetText( ( dbfClient )->cMeiInt )
      end





      if lChgCodCli

         if !Empty( aGet[ 56 ] )
            aGet[ 56 ]:cText( ( dbfClient )->cDtoEsp )
         else
            aTmp[ 56 ]  := ( dbfClient )->cDtoEsp
         end

         if !Empty( aGet[ 57 ] )
            aGet[ 57 ]:cText( ( dbfClient )->nDtoEsp )
         else
            aTmp[ 57 ]  := ( dbfClient )->nDtoEsp
         end

         if !Empty( aGet[ 58    ] )
            aGet[ 58    ]:cText( ( dbfClient )->cDpp )
         else
            aTmp[ 58    ]  := ( dbfClient )->cDpp
         end

         if !Empty( aGet[ 59    ] )
            aGet[ 59    ]:cText( ( dbfClient )->nDpp )
         else
            aTmp[ 59    ]  := ( dbfClient )->nDpp
         end

      end





      if nMode == 1

         if !Empty( ( dbfClient )->Serie ) .AND. lChgCodCli
            aGet[ 1 ]:cText( ( dbfClient )->Serie )
         end

         if Empty( aGet[ 10 ]:varGet() ) .AND. lChgCodCli .AND. !Empty( ( dbfClient )->cCodAlm )
            aGet[ 10 ]:cText( ( dbfClient )->cCodAlm )
            aGet[ 10 ]:lValid()
         end

         if ( Empty( aGet[ 34 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodTar )
            aGet[ 34 ]:cText( ( dbfClient )->cCodTar )
            aGet[ 34 ]:lValid()
         end

         if ( Empty( aGet[ 21 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->CodPago )
            if !uFieldEmpresa( "lGetFpg" )
               aGet[ 21 ]:cText( ( dbfClient )->CodPago )
            end
            aGet[ 21 ]:lValid()
         end

         if ( Empty( aGet[ 32 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cAgente )
            aGet[ 32 ]:cText( ( dbfClient )->cAgente )
            aGet[ 32 ]:lValid()
         end

         if ( Empty( aGet[ 33 ]:varGet() ) .OR. lChgCodCli ) .AND. !Empty( ( dbfClient )->cCodRut )
            aGet[ 33 ]:cText( ( dbfClient )->cCodRut )
            aGet[ 33 ]:lValid()
         end

         aTmp[ 69 ]  := ( dbfClient )->nRegIva

      end

      if ( dbfClient )->lMosCom .AND. !Empty( ( dbfClient )->mComent ) .AND. lChgCodCli
         MsgStop( Trim( ( dbfClient )->mComent ) )
      end

      if !Empty( oRieCli ) .AND. lChgCodCli
         oStock:SetRiesgo( cNewCodCli, oRieCli, ( dbfClient )->Riesgo )
      end

      if lObras() .AND. Empty( aTmp[ 35 ] ) .AND. lChgCodCli
         msgWait( "Introduzca la obra", "Info", 0 )
         aGet[ 35 ]:SetFocus()
      end

      cOldCodCli     := cNewCodCli
      lValid         := .T.

   else

        msgStop( "Cliente no encontrado" )

   end





   if lChgCodCli
      lRecTotal( aTmp )
   end

Return lValid



Static Function TPadl( cExp, n )

Return Padl( AllTrim( cExp ), n )



Function SavTik2Alb( aTik, aGet, nMode, nSave )

   local aTotal
   local cSerTik                 := aTik [ 1 ]
   local cNumTik                 := aTik [ 2 ]
   local cSufTik                 := aTik [ 3 ]
   local nNewAlbCli
   local nOrdAnt

   if nMode == 1 .OR. lApartado





      cNumTik                    := nNewDoc( aTik[ 1 ], dbfAlbCliT, "nAlbCli", , dbfCount )
      cSufTik                    := RetSufEmp()

      ( dbfAlbCliT )->( dbAppend() )

      ( dbfAlbCliT )->cSerAlb    := cSerTik
      ( dbfAlbCliT )->nNumAlb    := cNumTik
      ( dbfAlbCliT )->cSufAlb    := cSufTik
      ( dbfAlbCliT )->dFecCre    := aTik[ 40 ]
      ( dbfAlbCliT )->cTimCre    := aTik[ 41 ]
      ( dbfAlbCliT )->dFecAlb    := aTik[ 6 ]
      ( dbfAlbCliT )->cCodUsr    := aTik[ 8 ]
      ( dbfAlbCliT )->cTurAlb    := cCurSesion()
      ( dbfAlbCliT )->cNumDoc    := cSerTik + Str( cNumTik ) + cSufTik
      ( dbfAlbCliT )->cDtoEsp    := aTik[ 56 ]
      ( dbfAlbCliT )->nDtoEsp    := aTik[ 57 ]
      ( dbfAlbCliT )->cDpp       := aTik[ 58 ]
      ( dbfAlbCliT )->nDpp       := aTik[ 59 ]

      ( dbfAlbCliT )->( dbUnLock() )





      aTik[ 31 ]           := cSerTik + Str( cNumTik, 9 ) + cSufTik

   else





      cSerTik     := SubStr( aTik[ 31 ], 1, 1 )
      cNumTik     := Val( SubStr( aTik[ 31 ], 2, 9 ) )
      cSufTik     := SubStr( aTik[ 31 ], 11, 2 )

      if !( dbfAlbCliT )->( dbSeek( aTik[ 31 ] ) )

         ( dbfAlbCliT )->( dbAppend() )
         ( dbfAlbCliT )->cSerAlb    := cSerTik
         ( dbfAlbCliT )->nNumAlb    := cNumTik
         ( dbfAlbCliT )->cSufAlb    := cSufTik
         ( dbfAlbCliT )->dFecCre    := aTik[ 40 ]
         ( dbfAlbCliT )->cTimCre    := aTik[ 41 ]
         ( dbfAlbCliT )->cTurAlb    := aTik[ 5 ]
         ( dbfAlbCliT )->( dbUnLock() )

      end





      nOrdAnt  := ( dbfAlbCliL )->( OrdSetFocus( "NNUMALB" ) )

      while ( dbfAlbCliL )->( dbSeek( aTik[ 31 ] ) ) .AND. !( dbfAlbCliL )->( eof() )
         if dbLock( dbfAlbCliL )
            ( dbfAlbCliL )->( dbDelete() )
            ( dbfAlbCliL )->( dbUnLock() )
         end
      end

      ( dbfAlbCliL )->( OrdSetFocus( nOrdAnt ) )

   end





   if dbLock( dbfAlbCliT )

      ( dbfAlbCliT )->lFacturado    := .F.
      ( dbfAlbCliT )->lSndDoc       := .T.
      ( dbfAlbCliT )->lIvaInc       := .T.
      ( dbfAlbCliT )->cCodCli       := aTik[ 11 ]
      ( dbfAlbCliT )->cCodAlm       := aTik[ 10 ]
      ( dbfAlbCliT )->cCodCaj       := aTik[ 9 ]
      ( dbfAlbCliT )->cNomCli       := aTik[ 13 ]
      ( dbfAlbCliT )->cCodPago      := aTik[ 21 ]
      ( dbfAlbCliT )->cDivAlb       := aTik[ 24 ]
      ( dbfAlbCliT )->nVdvAlb       := aTik[ 25 ]
      ( dbfAlbCliT )->cRetMat       := aTik[ 30 ]
      ( dbfAlbCliT )->cCodAge       := aTik[ 32 ]
      ( dbfAlbCliT )->cCodRut       := aTik[ 33 ]
      ( dbfAlbCliT )->cCodTar       := aTik[ 34 ]
      ( dbfAlbCliT )->cCodObr       := aTik[ 35 ]
      ( dbfAlbCliT )->nPctComAge    := aTik[ 36 ]
      ( dbfAlbCliT )->cDtoEsp       := aTik[ 56 ]
      ( dbfAlbCliT )->nDtoEsp       := aTik[ 57 ]
      ( dbfAlbCliT )->cDpp          := aTik[ 58 ]
      ( dbfAlbCliT )->nDpp          := aTik[ 59 ]

      if Empty( ( dbfAlbCliT )->cTurAlb )
         ( dbfAlbCliT )->cTurAlb    := cCurSesion()
      end





      ( dbfAlbCliT )->cDirCli       := aTik[ 14 ]
      ( dbfAlbCliT )->cPobCli       := aTik[ 15 ]
      ( dbfAlbCliT )->cPrvCli       := aTik[ 16 ]
      ( dbfAlbCliT )->cPosCli       := aTik[ 18 ]
      ( dbfAlbCliT )->cDniCli       := aTik[ 19 ]

      ( dbfAlbCliT )->( dbUnLock() )

   end





   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )

      ( dbfAlbCliL )->( dbAppend() )
      ( dbfAlbCliL )->CSERALB    := ( dbfAlbCliT )->CSERALB
      ( dbfAlbCliL )->NNUMALB    := ( dbfAlbCliT )->NNUMALB
      ( dbfAlbCliL )->CSUFALB    := ( dbfAlbCliT )->CSUFALB
      ( dbfAlbCliL )->CREF       := ( dbfTmpL    )->CCBATIL
      ( dbfAlbCliL )->CDETALLE   := ( dbfTmpL    )->CNOMTIL
      ( dbfAlbCliL )->NPREUNIT   := ( dbfTmpL    )->NPVPTIL
      ( dbfAlbCliL )->NDTO       := ( dbfTmpL    )->NDTOLIN
      ( dbfAlbCliL )->NIVA       := ( dbfTmpL    )->NIVATIL
      ( dbfAlbCliL )->NUNICAJA   := ( dbfTmpL    )->NUNTTIL
      ( dbfAlbCliL )->CCODPR1    := ( dbfTmpL    )->CCODPR1
      ( dbfAlbCliL )->CCODPR2    := ( dbfTmpL    )->CCODPR2
      ( dbfAlbCliL )->CVALPR1    := ( dbfTmpL    )->CVALPR1
      ( dbfAlbCliL )->CVALPR2    := ( dbfTmpL    )->CVALPR2
      ( dbfAlbCliL )->NFACCNV    := ( dbfTmpL    )->NFACCNV
      ( dbfAlbCliL )->NDTODIV    := ( dbfTmpL    )->NDTODIV
      ( dbfAlbCliL )->nCtlStk    := ( dbfTmpL    )->nCtlStk
      ( dbfAlbCliL )->nValImp    := ( dbfTmpL    )->nValImp
      ( dbfAlbCliL )->cCodImp    := ( dbfTmpL    )->cCodImp
      ( dbfAlbCliL )->lKitChl    := ( dbfTmpL    )->lKitChl
      ( dbfAlbCliL )->lKitArt    := ( dbfTmpL    )->lKitArt
      ( dbfAlbCliL )->lKitPrc    := ( dbfTmpL    )->lKitPrc
      ( dbfAlbCliL )->mNumSer    := ( dbfTmpL    )->mNumSer
      ( dbfAlbCliL )->dFecAlb    := ( dbfAlbCliT )->dFecAlb
      ( dbfAlbCliL )->cAlmLin    := aTik[ 10 ]
      ( dbfAlbCliL )->lIvaLin    := .T.
      ( dbfAlbCliL )->( dbUnLock() )

      ( dbfTmpL )->( dbSkip() )

   end







   while ( dbfAlbCliP )->( dbSeek( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb ) ) .AND. !( dbfAlbCliP )->( eof() )

      if dbLock( dbfAlbCliP )
         ( dbfAlbCliP )->( dbDelete() )
         ( dbfAlbCliP )->( dbUnLock() )
      end

      ( dbfAlbCliP )->( dbSkip() )

   end





   ( dbfTmpE )->( dbGoTop() )

   while !( dbfTmpE )->( eof() )

      ( dbfAlbCliP )->( dbAppend() )

      ( dbfAlbCliP )->cSerAlb    := cSerTik
      ( dbfAlbCliP )->nNumAlb    := cNumTik
      ( dbfAlbCliP )->cSufAlb    := cSufTik
      ( dbfAlbCliP )->nNumRec    := ( dbfTmpE )->nNumRec
      ( dbfAlbCliP )->cCodCaj    := ( dbfTmpE )->cCodCaj
      ( dbfAlbCliP )->cTurRec    := ( dbfTmpE )->cTurRec
      ( dbfAlbCliP )->cCodCli    := ( dbfTmpE )->cCodCli
      ( dbfAlbCliP )->dEntrega   := ( dbfTmpE )->dEntrega
      ( dbfAlbCliP )->nImporte   := ( dbfTmpE )->nImporte
      ( dbfAlbCliP )->cDescrip   := ( dbfTmpE )->cDescrip
      ( dbfAlbCliP )->cPgdoPor   := ( dbfTmpE )->cPgdoPor
      ( dbfAlbCliP )->cDivPgo    := ( dbfTmpE )->cDivPgo
      ( dbfAlbCliP )->nVdvPgo    := ( dbfTmpE )->nVdvPgo
      ( dbfAlbCliP )->cCodAge    := ( dbfTmpE )->cCodAge
      ( dbfAlbCliP )->cCodPgo    := ( dbfTmpE )->cCodPgo
      ( dbfAlbCliP )->lCloPgo    := .F.
      ( dbfAlbCliP )->lPasado    := ( dbfTmpE )->lPasado

      ( dbfAlbCliP )->( dbUnLock() )

      ( dbfTmpE )->( dbSkip() )

   end





   aTotal            := aTotAlbCli( aTik[ 31 ], dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv )

   aTik[ 64 ]  := aTotal[1]
   aTik[ 65 ]  := aTotal[2]
   aTik[ 66 ]  := aTotal[4]

   if dbLock( dbfAlbCliT )
      ( dbfAlbCliT )->nTotNet    := aTotal[1]
      ( dbfAlbCliT )->nTotIva    := aTotal[2]
      ( dbfAlbCliT )->nTotReq    := aTotal[3]
      ( dbfAlbCliT )->nTotAlb    := aTotal[4]
      ( dbfAlbCliT )->( dbUnLock() )
   end





   WinGather( aTik, aGet, dbfTikT, oBrwDet, nMode, nil, .T. )

return ( nNewAlbCli )



Function nTotalizer( cNumTik, cTikT, cTikL, cTikP, cAlbCliT, cAlbCliL, cFacCliT, cFacCliL, cFacCliP, cIva, cDiv, cCodDiv, lPic )

   local uTotal         := 0
   local aTotal         := {}

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( cTikP == nil, cTikP := dbfTikP, ) ;
   IIF( cAlbCliT == nil, cAlbCliT := dbfAlbCliT, ) ;
   IIF( cAlbCliL == nil, cAlbCliL := dbfAlbCliL, ) ;
   IIF( cFacCliT == nil, cFacCliT := dbfFacCliT, ) ;
   IIF( cFacCliL == nil, cFacCliL := dbfFacCliL, ) ;
   IIF( cFacCliP == nil, cFacCliP := dbfFacCliP, ) ;
   IIF( cIva == nil, cIva := dbfIva, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( lPic == nil, lPic := .T., ) ;

   if Empty( cTikT ) .OR. Empty( cTikL )
      Return ( uTotal )
   end

   if Empty( cNumTik )
      cNumTik           := ( cTikT )->cSerTik + ( cTikT )->cNumTik + ( cTikT )->cSufTik
   end

   public nTotAlb       := 0
   public nTotFac       := 0
   public aBrtTik       := { 0, 0, 0 }
   public aBasTik       := { 0, 0, 0 }
   public aImpTik       := { 0, 0, 0 }
   public aIvaTik       := { nil, nil, nil }
   public aIvmTik       := { 0, 0, 0 }
   public cCtaCli       := cClientCuenta( ( cTikT )->cCliTik )

   uTotal               := if( lPic, "0", 0 )

   do case
      case ( cTikT )->cTipTik == "2"

         if ( cAlbCliT )->( dbSeek( ( cTikT )->cNumDoc ) )

            aTotal      := aTotAlbCli( ( cTikT )->cNumDoc, cAlbCliT, cAlbCliL, cIva, cDiv )

            uTotal      := aTotal[ 4 ]
            nTotAlb     := uTotal

            aBrtTik     := { aTotal[ 8 ][ 1, 1 ], aTotal[ 8 ][ 2, 1 ], aTotal[ 8 ][ 3, 1 ] }
            aBasTik     := { aTotal[ 8 ][ 1, 2 ], aTotal[ 8 ][ 2, 2 ], aTotal[ 8 ][ 3, 2 ] }
            aImpTik     := { aTotal[ 8 ][ 1, 8 ], aTotal[ 8 ][ 2, 8 ], aTotal[ 8 ][ 3, 8 ] }
            aIvaTik     := { aTotal[ 8 ][ 1, 3 ], aTotal[ 8 ][ 2, 3 ], aTotal[ 8 ][ 3, 3 ] }
            aIvmTik     := { aTotal[ 8 ][ 1, 6 ], aTotal[ 8 ][ 2, 6 ], aTotal[ 8 ][ 3, 6 ] }

         end

      case ( cTikT )->cTipTik == "3"

         if ( cFacCliT )->( dbSeek( ( cTikT )->cNumDoc ) )

            aTotal      := aTotFacCli( ( cTikT )->cNumDoc, cFacCliT, cFacCliL, cIva, cDiv, cFacCliP )

            uTotal      := aTotal[ 4 ]
            nTotFac     := uTotal

            aBrtTik     := { aTotal[ 8 ][ 1, 1 ], aTotal[ 8 ][ 2, 1 ], aTotal[ 8 ][ 3, 1 ] }
            aBasTik     := { aTotal[ 8 ][ 1, 2 ], aTotal[ 8 ][ 2, 2 ], aTotal[ 8 ][ 3, 2 ] }
            aImpTik     := { aTotal[ 8 ][ 1, 8 ], aTotal[ 8 ][ 2, 8 ], aTotal[ 8 ][ 3, 8 ] }
            aIvaTik     := { aTotal[ 8 ][ 1, 3 ], aTotal[ 8 ][ 2, 3 ], aTotal[ 8 ][ 3, 3 ] }
            aIvmTik     := { aTotal[ 8 ][ 1, 6 ], aTotal[ 8 ][ 2, 6 ], aTotal[ 8 ][ 3, 6 ] }

         end

      otherwise

         uTotal         := nTotTik( cNumTik, cTikT, cTikL, cDiv, nil, cCodDiv, lPic )



   end

return ( uTotal )



Static Function nChkalizer( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cCodDiv )

   local nPgo     := 1
   local aStatus  := aGetStatus( dbfTikT, .T. )
   local nRec     := ( dbfFacCliT )->( RecNo() )
   local nOrdAnt  := ( dbfFacCliT )->( OrdSetFocus( "nNumFac" ) )

   if ( dbfTikT )->( dbSeek( cNumTik ) )

      do case
      case ( dbfTikT )->cTipTik == "2"

         if RetFld( ( dbfTikT )->cNumDoc, dbfAlbCliT, "lFacturado" )
            nPgo  := 1
         else
            nPgo  := 3
         end

      case ( dbfTikT )->cTipTik == "3"

         if ( dbfFacCliT )->( dbSeek( ( dbfTikT )->cNumDoc ) )
            nPgo  := nChkPagFacCli( ( dbfTikT )->cNumDoc, dbfFacCliT, dbfFacCliP )
         else
            nPgo  := 3
         end

      case ( dbfTikT )->cTipTik == "6"

         nPgo     := if( ( dbfTikT )->lLiqTik, 1, 3 )

      otherwise

         nPgo     := nChkPagTik( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfIva, dbfDiv )

      end

   end

   ( dbfFacCliT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfFacCliT )->( dbGoTo( nRec ) )

   SetStatus( dbfTikT, aStatus )

Return ( nPgo )



Function nCobalizer( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cCodDiv, lPic )

   local nPgo     := if( lPic, "", 0 )
   local aStatus  := aGetStatus( dbfTikT, .T. )

   If ( dbfTikT )->( dbSeek( cNumTik ) )

      Do Case
      Case ( dbfTikT )->cTipTik == "3"

         nPgo     := nPagFacCli( ( dbfTikT )->cNumDoc, dbfFacCliT, dbfFacCliP, dbfIva, dbfDiv, cCodDiv, .T., lPic )




      Case  ( dbfTikT )->cTipTik == "1" .OR. ( dbfTikT )->cTipTik == "4" .OR. ( dbfTikT )->cTipTik == "5" .OR. ( dbfTikT )->cTipTik == "6"

         nPgo     := nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv, cCodDiv, lPic )

      end

   end

   SetStatus( dbfTikT, aStatus )

Return ( nPgo )



Function nDifalizer( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfAntCliT, dbfIva, dbfDiv, cCodDiv, lPic )

   local cPorDiv  := cPorDiv( cCodDiv, dbfDiv )
   local nTot     := nTotalizer( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cCodDiv, .F. )
   nTot           -= nCobalizer( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cCodDiv, .F. )
   nTot           -= nTotValTik( cNumTik, dbfTikT, dbfTikL, dbfDiv, cCodDiv, .F. )
   nTot           -= nTotAntFacCli( ( dbfTikT )->cNumDoc, dbfAntCliT, dbfIva, dbfDiv, cCodDiv, .F. )

Return ( if( lPic, Trans( nTot, cPorDiv ), nTot ) )



static function LoaAlb2Tik()

   if ( dbfAlbCliL )->( DbSeek( ( dbfTikT )->cNumDoc ) )
      while ( ( dbfAlbCliL )->CSERALB + Str( ( dbfAlbCliL )->NNUMALB ) + ( dbfAlbCliL )->CSUFALB == ( dbfTikT )->cNumDoc .AND. !( dbfAlbCliL )->( eof() ) )

         ( dbfTmpL )->( dbAppend() )
         ( dbfTmpL )->cCbaTil    := ( dbfAlbCliL )->CREF
         ( dbfTmpL )->cNomTil    := ( dbfAlbCliL )->CDETALLE
         ( dbfTmpL )->nPvpTil    := ( dbfAlbCliL )->NPREUNIT
         ( dbfTmpL )->nDtoLin    := ( dbfAlbCliL )->NDTO
         ( dbfTmpL )->nIvaTil    := ( dbfAlbCliL )->NIVA
         ( dbfTmpL )->nUntTil    := If( ( dbfAlbCliL )->NCANENT <> 0, ( dbfAlbCliL )->NCANENT, 1 ) * ( dbfAlbCliL )->NUNICAJA
         ( dbfTmpL )->cCodPr1    := ( dbfAlbCliL )->CCODPR1
         ( dbfTmpL )->cCodPr2    := ( dbfAlbCliL )->CCODPR2
         ( dbfTmpL )->cValPr1    := ( dbfAlbCliL )->CVALPR1
         ( dbfTmpL )->cValPr2    := ( dbfAlbCliL )->CVALPR2
         ( dbfTmpL )->nFacCnv    := ( dbfAlbCliL )->NFACCNV
         ( dbfTmpL )->nDtoDiv    := ( dbfAlbCliL )->NDTODIV
         ( dbfTmpL )->nCtlStk    := ( dbfAlbCliL )->nCtlStk
         ( dbfTmpL )->nValImp    := ( dbfAlbCliL )->nValImp
         ( dbfTmpL )->cCodImp    := ( dbfAlbCliL )->cCodImp
         ( dbfTmpL )->mNumSer    := ( dbfAlbCliL )->mNumSer
         ( dbfTmpL )->( dbRUnLock() )

         ( dbfAlbCliL )->( dbSkip() )

      end
   end
  ( dbfTmpL )->( dbGoTop() )

return nil



function SavTik2Fac( aTik, aGet, nMode, nSave, nTotal )

   local aTotal
   local nNumRec                 := 0
   local cCliTik                 := aTik[ 11 ]
   local cSerFacCli
   local nNewFacCli
   local cSufFacCli
   local cCliFacCli
   local cNomFacCli
   local dFecFacCli
   local nOrdAnt
   local cCodFam                 := ""

   if nMode == 4
      aTik[ 2 ]           := Str( nNewDoc( aTik[ 1 ], dbfTikT, "NTIKCLI", 10, dbfCount ), 10 )
      aTik[ 3 ]           := RetSufEmp()
      aTik[ 6 ]           := GetSysDate()
      aTik[ 27 ]           := .T.
      aTik[ 26 ]           := .F.
   end

   if nMode == 1 .OR. nMode == 4 .OR. lApartado





      cSerFacCli                 := aTik[ 1 ]
      nNewFacCli                 := nNewDoc( aTik [ 1 ], dbfFacCliT, "NFACCLI", , dbfCount )
      cSufFacCli                 := RetSufEmp()
      cCliFacCli                 := aTik[ 11 ]
      cNomFacCli                 := aTik[ 13 ]
      dFecFacCli                 := aTik[ 6 ]

      ( dbfFacCliT )->( dbAppend() )
      ( dbfFacCliT )->cSerie     := cSerFacCli
      ( dbfFacCliT )->nNumFac    := nNewFacCli
      ( dbfFacCliT )->cSufFac    := cSufFacCli
      ( dbfFacCliT )->dFecFac    := dFecFacCli
      ( dbfFacCliT )->cTurFac    := cCurSesion()
      ( dbfFacCliT )->dFecCre    := aTik[ 40 ]
      ( dbfFacCliT )->cTimCre    := aTik[ 41 ]
      ( dbfFacCliT )->cCodUsr    := aTik[ 8 ]
      ( dbfFacCliT )->cNumDoc    := aTik[ 1 ] + aTik[ 2 ] + aTik[ 3 ]
      ( dbfFacCliT )->cDtoEsp    := aTik[ 56 ]
      ( dbfFacCliT )->nDtoEsp    := aTik[ 57 ]
      ( dbfFacCliT )->cDpp       := aTik[ 58 ]
      ( dbfFacCliT )->nDpp       := aTik[ 59 ]

      ( dbfFacCliT )->( dbUnLock() )





      aTik[ 31 ]           := cSerFacCli + Str( nNewFacCli, 9 ) + cSufFacCli

   else

      cCliFacCli                 := aTik[ 11 ]
      cNomFacCli                 := aTik[ 13 ]
      dFecFacCli                 := aTik[ 6 ]





      if ( dbfFacCliT )->( dbSeek( aTik[ 31 ] ) )

         cSerFacCli              := ( dbfFacCliT )->cSerie
         nNewFacCli              := ( dbfFacCliT )->nNumFac
         cSufFacCli              := ( dbfFacCliT )->cSufFac















         nOrdAnt  := ( dbfFacCliL )->( OrdSetFocus( "NNUMFAC" ) )

         while ( dbfFacCliL )->( dbSeek( aTik[ 31 ] ) ) .AND. !( dbfFacCliL )->( eof() )
            if dbLock( dbfFacCliL )
               ( dbfFacCliL )->( dbDelete() )
               ( dbfFacCliL )->( dbUnLock() )
            end
         end

         ( dbfFacCliL )->( OrdSetFocus( nOrdAnt ) )

      else

         MsgStop( "No se encuentra documento asociado" )
         return nil

      end

   end





   if dbLock( dbfFacCliT )

      if Empty( ( dbfFacCliT )->dFecFac )
         ( dbfFacCliT )->dFecFac    := aTik[ 6 ]
      end

      ( dbfFacCliT )->cCodAlm       := aTik[ 10 ]
      ( dbfFacCliT )->cCodCaj       := aTik[ 9 ]
      ( dbfFacCliT )->cCodCli       := aTik[ 11 ]
      ( dbfFacCliT )->cNomCli       := aTik[ 13 ]
      ( dbfFacCliT )->cDirCli       := aTik[ 14 ]
      ( dbfFacCliT )->cPobCli       := aTik[ 15 ]
      ( dbfFacCliT )->cPrvCli       := aTik[ 16 ]
      ( dbfFacCliT )->cPosCli       := aTik[ 18 ]
      ( dbfFacCliT )->cDniCli       := aTik[ 19 ]
      ( dbfFacCliT )->cCodPago      := aTik[ 21 ]
      ( dbfFacCliT )->cDivFac       := aTik[ 24 ]
      ( dbfFacCliT )->nVdvFac       := aTik[ 25 ]
      ( dbfFacCliT )->cRetMat       := aTik[ 30 ]
      ( dbfFacCliT )->cCodAge       := aTik[ 32 ]
      ( dbfFacCliT )->cCodRut       := aTik[ 33 ]
      ( dbfFacCliT )->cCodTar       := aTik[ 34 ]
      ( dbfFacCliT )->cCodObr       := aTik[ 35 ]
      ( dbfFacCliT )->nPctComAge    := aTik[ 36 ]
      ( dbfFacCliT )->lSndDoc       := .T.
      ( dbfFacCliT )->lIvaInc       := .T.
      ( dbfFacCliT )->cDtoEsp       := aTik[ 56 ]
      ( dbfFacCliT )->nDtoEsp       := aTik[ 57 ]
      ( dbfFacCliT )->cDpp          := aTik[ 58 ]
      ( dbfFacCliT )->nDpp          := aTik[ 59 ]

      ( dbfFacCliT )->( dbUnLock() )

   end





   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )

      ( dbfFacCliL )->( dbAppend() )
      ( dbfFacCliL )->cSerie     := cSerFacCli
      ( dbfFacCliL )->nNumFac    := nNewFacCli
      ( dbfFacCliL )->cSufFac    := cSufFacCli
      ( dbfFacCliL )->dFecFac    := dFecFacCli
      ( dbfFacCliL )->cRef       := ( dbfTmpL    )->cCbaTil
      ( dbfFacCliL )->cDetalle   := ( dbfTmpL    )->cNomTil
      ( dbfFacCliL )->nPreUnit   := ( dbfTmpL    )->nPvpTil
      ( dbfFacCliL )->nDto       := ( dbfTmpL    )->nDtoLin
      ( dbfFacCliL )->nIva       := ( dbfTmpL    )->nIvaTil
      ( dbfFacCliL )->nUniCaja   := ( dbfTmpL    )->nUntTil
      ( dbfFacCliL )->cCodPr1    := ( dbfTmpL    )->cCodPr1
      ( dbfFacCliL )->cCodPr2    := ( dbfTmpL    )->cCodPr2
      ( dbfFacCliL )->cValPr1    := ( dbfTmpL    )->cValPr1
      ( dbfFacCliL )->cValPr2    := ( dbfTmpL    )->cValPr2
      ( dbfFacCliL )->nFacCnv    := ( dbfTmpL    )->nFacCnv
      ( dbfFacCliL )->nDtoDiv    := ( dbfTmpL    )->nDtoDiv
      ( dbfFacCliL )->nCtlStk    := ( dbfTmpL    )->nCtlStk
      ( dbfFacCliL )->nValImp    := ( dbfTmpL    )->nValImp
      ( dbfFacCliL )->cCodImp    := ( dbfTmpL    )->cCodImp
      ( dbfFacCliL )->lKitPrc    := ( dbfTmpL    )->lKitPrc
      ( dbfFacCliL )->lKitArt    := ( dbfTmpL    )->lKitArt
      ( dbfFacCliL )->lKitChl    := ( dbfTmpL    )->lKitChl
      ( dbfFacCliL )->mNumSer    := ( dbfTmpL    )->mNumSer
      ( dbfFacCliL )->cAlmLin    := aTik[ 10 ]
      ( dbfFacCliL )->lIvaLin    := .T.
      cCodFam                    := RetFamArt( ( dbfTmpL )->cCbaTil, dbfArticulo )
      ( dbfFacCliL )->cCodFam    := cCodFam
      ( dbfFacCliL )->cGrpFam    := cGruFam( cCodFam, dbfFamilia )

      ( dbfFacCliL )->( dbUnLock() )

      ( dbfTmpL )->( dbSkip() )

   end







   while ( dbfFacCliP )->( dbSeek( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac ) ) .AND. !( dbfFacCliP )->( eof() )



      if dbLock( dbfFacCliP )
         ( dbfFacCliP )->( dbDelete() )
         ( dbfFacCliP )->( dbUnLock() )
      end

      ( dbfFacCliP )->( dbSkip() )

   end





   ( dbfTmpP )->( dbGoTop() )
   while !( dbfTmpP )->( eof() )

      ( dbfFacCliP )->( dbAppend() )

      ( dbfFacCliP )->lCobrado   := .T.
      ( dbfFacCliP )->cSerie     := cSerFacCli
      ( dbfFacCliP )->nNumFac    := nNewFacCli
      ( dbfFacCliP )->cSufFac    := cSufFacCli
      ( dbfFacCliP )->nNumRec    := ++nNumRec
      ( dbfFacCliP )->cCodCli    := cCliFacCli
      ( dbfFacCliP )->cNomCli    := cNomFacCli
      ( dbfFacCliP )->cCodCaj    := oUser():cCaja()
      ( dbfFacCliP )->dFecCre    := GetSysDate()
      ( dbfFacCliP )->cHorCre    := SubStr( Time(), 1, 5 )
      ( dbfFacCliP )->dPreCob    := aTik[ 6 ]
      ( dbfFacCliP )->dFecVto    := aTik[ 6 ]
      ( dbfFacCliP )->cCodPgo    := aTik[ 21 ]
      ( dbfFacCliP )->dEntrada   := ( dbfTmpP )->dPgoTik
      ( dbfFacCliP )->cDivPgo    := ( dbfTmpP )->cDivPgo
      ( dbfFacCliP )->nVdvPgo    := ( dbfTmpP )->nVdvPgo
      ( dbfFacCliP )->cPgdoPor   := ( dbfTmpP )->cPgdPor
      ( dbfFacCliP )->cTurRec    := ( dbfTmpP )->cTurPgo
      ( dbfFacCliP )->cCtaRec    := ( dbfTmpP )->cCtaRec
      ( dbfFacCliP )->nImporte   := nTotUCobTik( dbfTmpP )

      ( dbfFacCliP )->( dbUnLock() )

      ( dbfTmpP )->( dbSkip() )



      nTotal                     -= ( dbfFacCliP )->nImporte

   end





   aTotal                        := aTotFacCli( aTik[ 31 ], dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT )

   aTik[ 64 ]              := aTotal[1]
   aTik[ 65 ]              := aTotal[2]
   aTik[ 66 ]              := aTotal[4]

   if dbLock( dbfFacCliT )
      ( dbfFacCliT )->nTotNet    := aTotal[1]
      ( dbfFacCliT )->nTotIva    := aTotal[2]
      ( dbfFacCliT )->nTotReq    := aTotal[3]
      ( dbfFacCliT )->nTotFac    := aTotal[4]
      ( dbfFacCliT )->( dbUnLock() )
   end





   WinGather( aTik, aGet, dbfTikT, oBrwDet, nMode, nil, .T. )

return ( nNewFacCli )



Static Function SavTik2Neg( aTmp, aGet, nMode, nSave )

   local aTbl
   local cNumTik
   local cSerTik





   if dbDialogLock( dbfTikT )
      ( dbfTikT )->lCnvTik := .T.
      ( dbfTikT )->lSndDoc := .T.
      ( dbfTikT )->( dbUnLock() )
   end





   aTbl                    := dbScatter( dbfTikT )
   cSerTik                 := aTbl[ 1 ]
   cNumTik                 := Str( nNewDoc( aTbl[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
   aTbl[ 5 ]        := cCurSesion()
   aTbl[ 2 ]        := cNumTik
   aTbl[ 3 ]        := RetSufEmp()
   aTbl[ 4 ]        := "1"
   aTbl[ 6 ]        := GetSysDate()
   aTbl[ 27 ]        := .T.
   aTbl[ 26 ]        := .F.
   aTbl[ 64 ]        := - aTbl[ 64 ]
   aTbl[ 65 ]        := - aTbl[ 65 ]
   aTbl[ 66 ]        := - aTbl[ 66 ]

   dbGather( aTbl, dbfTikT, .T. )





   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )

      aTbl                 := dbScatter( dbfTmpL )
      aTbl[ 1 ]     := cSerTik
      aTbl[ 2 ]     := cNumTik
      aTbl[ 3 ]     := RetSufEmp()
      aTbl[ 8 ]     := - aTbl[ 8 ]

      dbGather( aTbl, dbfTikL, .T. )

      ( dbfTmpL )->( dbSkip() )

   end

   ( dbfTmpL )->( dbGoTop() )





   ( dbfTmpP )->( dbGoTop() )
   while !( dbfTmpP )->( eof() )

      aTbl                 := dbScatter( dbfTmpP )
      aTbl[ 1 ]     := cSerTik
      aTbl[ 2 ]     := cNumTik
      aTbl[ 3 ]     := RetSufEmp()
      aTbl[ 9 ]     := - ( aTbl[ 9 ] - aTbl[ 10 ] )

      dbGather( aTbl, dbfTikP, .T. )

      ( dbfTmpP )->( dbSkip() )

   end

   ( dbfTmpP )->( dbGoTop() )

Return nil



Static Function SavTik2Tik( aTmp, aGet, nMode, nSave, nNumDev )

   local nRec
   local aTotal





   if !Empty( oMetMsg )
      oMetMsg:cText        := "Archivando lineas"
      oMetMsg:Refresh()
   end

   nRec                    := ( dbfTmpL )->( Recno() )

   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )

      if ( dbfTmpL )->dFecTik <> aTmp[ 6 ]
         ( dbfTmpL )->dFecTik := aTmp[ 6 ]
      end

      dbPass( dbfTmpL, dbfTikL, .T., aTmp[ 1 ], aTmp[ 2 ], aTmp[ 3 ], aTmp[ 4 ] )

      ( dbfTmpL )->( dbSkip() )

   end
   ( dbfTmpL )->( dbGoTo( nRec ) )




   if !Empty( oMetMsg )
      oMetMsg:cText           := "Archivando pagos"
      oMetMsg:Refresh()
   end

   ( dbfTmpP )->( dbGoTop() )
   while !( dbfTmpP )->( eof() )
      dbPass( dbfTmpP, dbfTikP, .T., aTmp[ 1 ], aTmp[ 2 ], aTmp[ 3 ] )
      ( dbfTmpP )->( dbSkip() )
   end





   if !Empty( oMetMsg )
      oMetMsg:cText           := "Archivando series"
      oMetMsg:Refresh()
   end

   nRec                    := ( dbfTmpS )->( Recno() )
   ( dbfTmpS )->( dbGoTop() )
   while !( dbfTmpS )->( eof() )
      dbPass( dbfTmpS, dbfTikS, .T., aTmp[ 1 ], aTmp[ 2 ], aTmp[ 3 ], aTmp[ 4 ], aTmp[ 6 ] )
      ( dbfTmpS )->( dbSkip() )
   end
   ( dbfTmpS )->( dbGoTo( nRec ) )





   if !Empty( oMetMsg )
      oMetMsg:cText  := "Archivando ticket"
      oMetMsg:Refresh()
   end





   SysRefresh()





   aTotal            := nTotCobTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikP, dbfDiv )
   aTotal            += nTotValTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTikL, dbfDiv )

   aTmp[ 22 ]  := aTotal





   aTotal            := aTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )

   aTmp[ 64 ]  := aTotal[1]
   aTmp[ 65 ]  := aTotal[2]
   aTmp[ 66 ]  := aTotal[3]





   WinGather( aTmp, nil, dbfTikT, nil, nMode )

Return nil







FUNCTION SndTikCli( lMark, dbfTikT, dbfFacCliT, dbfAlbCliT )





   if dbDialogLock( dbfTikT )
      ( dbfTikT )->lSndDoc := lMark
      ( dbfTikT )->( dbRUnLock() )
   end





   do case
   case ( dbfTikT )->cTipTik == "3"

      if ( dbfFacCliT )->( dbSeek( ( dbfTikT )->cNumDoc ) )

         if dbDialogLock( dbfFacCliT )
            ( dbfFacCliT )->lSndDoc := lMark
            ( dbfFacCliT )->( dbRUnLock() )
         end

      end

   case ( dbfTikT )->cTipTik == "2"

      if ( dbfAlbCliT )->( dbSeek( ( dbfTikT )->cNumDoc ) )

         if dbDialogLock( dbfAlbCliT )
            ( dbfAlbCliT )->lSndDoc := lMark
            ( dbfAlbCliT )->( dbRUnLock() )
         end

      end

   end

Return nil



Static Function nChkPagTik( cNumTik, dbfTikT, dbfTikL, dbfTikP, dbfIva, dbfDiv )

   local nTot
   local nCob
   local nBmp     := 1

   if !( dbfTikT )->lPgdTik

      nTot        := nTotTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, nil, cDivEmp(), .F. )
      nCob        := nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv, cDivEmp(), .F. )
      nCob        += nTotValTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, cDivEmp(), .F. )

      do case
      case !lMayorIgual( nTot, nCob )
         nBmp     := 1
      case ( nCob > 0 )
         nBmp     := 2
      otherwise
         nBmp     := 3
      end

   end

return ( nBmp )



function cTipTik( cNumTik, uTikCliT )

   local cTipTik  := "1"

   if ValType( uTikCliT ) == "C"

      if ( uTikCliT )->( dbSeek( cNumTik ) )
         cTipTik  := ( uTikCliT )->cTipTik
      end

   else

      if uTikCliT:Seek( cNumTik )
         cTipTik  := uTikCliT:cTipTik
      end

   end

return ( cTipTik )



function nTotDTikCli( cCodArt, dbfTikCliT, dbfTikCliL, cCodAlm )

   local nTotVta  := 0
   local nRecno   := ( dbfTikCliL )->( Recno() )
   local cTipTik  := cTipTik( ( dbfTikCliL )->cSerTil + ( dbfTikCliL )->cNumTil + ( dbfTikCliL )->cSufTil, dbfTikCliT )

   if ( dbfTikCliL )->( dbSeek( cCodArt ) )

      while ( dbfTikCliL )->cCbaTil == cCodArt .AND. !( dbfTikCliL )->( eof() )

         if cCodAlm <> nil
            if ( dbfTikCliT )->cAlmTik == cCodAlm
               if cTipTik == "1"
                  nTotVta  += ( dbfTikCliL )->nUntTil
               elseif cTipTik == "4"
                  nTotVta  -= ( dbfTikCliL )->nUntTil
               end
            end
         else
            if cTipTik == "1"
               nTotVta  += ( dbfTikCliL )->nUntTil
            elseif cTipTik == "4"
               nTotVta  -= ( dbfTikCliL )->nUntTil
            end
         end

         ( dbfTikCliL )->( dbSkip() )

      end

   end

   ( dbfTikCliL )->( dbGoTo( nRecno ) )

return ( nTotVta )






function nTotVTikCli( cCodArt, dbfTikCliT, dbfTikCliL, nDec, nDor )

   local nTotVta  := 0
   local nRecno   := ( dbfTikCliL )->( Recno() )
   local cTipTik  := cTipTik( ( dbfTikCliL )->cSerTil + ( dbfTikCliL )->cNumTil + ( dbfTikCliL )->cSufTil, dbfTikCliT )

   if ( dbfTikCliL )->( dbSeek( cCodArt ) )

      while ( dbfTikCliL )->cCbaTil == cCodArt .AND. !( dbfTikCliL )->( eof() )

         if cTipTik == "1"
            nTotVta  += nTotLTpv( dbfTikCliL, nDec, nDor )
         elseif cTipTik == "4"
            nTotVta  -= nTotLTpv( dbfTikCliL, nDec, nDor )
         end

         ( dbfTikCliL )->( dbSkip() )

      end

   end

   ( dbfTikCliL )->( dbGoTo( nRecno ) )

return ( nTotVta )



static function nCopiasTipoTicket( cTipTik, lEntrega, dbfCajT )

   local nCopies  := 1

   do case
      case cTipTik == "1"

        do case
            case ( lRegalo == .T. )
               nCopies := nCopiasTicketsRegaloEnCaja( oUser():cCaja(), dbfCajT )

            case ( lEntrega == .T. )
               nCopies := nCopiasEntregasEnCaja( oUser():cCaja(), dbfCajT )

            otherwise
               nCopies := nCopiasTicketsEnCaja( oUser():cCaja(), dbfCajT )

         end

      case cTipTik == "6"
         nCopies := nCopiasValesEnCaja( oUser():cCaja(), dbfCajT )

      case cTipTik == "4"
         nCopies := nCopiasDevolucionesEnCaja( oUser():cCaja(), dbfCajT )

      case cTipTik == "2"
         nCopies := nCopiasAlbaranesEnCaja( oUser():cCaja(), dbfCajT )

      case cTipTik == "3"
         nCopies := nCopiasFacturasEnCaja( oUser():cCaja(), dbfCajT )

   end

return nCopies



static function ClkMoneda( nImporte, oGet, lInit )

   local nVal  := oGet:VarGet()

   if lInit
      nVal     := nImporte
      lInit    := .F.
   else
      nVal     += nImporte
   end

   oGet:cText( nVal )

return nil






Function aTipTik( uTikT )

   local nTipTik

   IIF( uTikT == nil, uTikT := dbfTikT, ) ;

   do case
      case Valtype( uTikT ) == "C"

         if ( uTikT )->lFreTik
            nTipTik     := Len( aTipDoc )
         else
            nTipTik     := Val( ( uTikT )->cTipTik )
            nTipTik     := Min( Max( nTipTik, 1 ), ( Len( aTipDoc ) - 1 ) )
         end

      case Valtype( uTikT ) == "A"

         if uTikT[ 63 ]
            nTipTik     := Len( aTipDoc )
         else
            nTipTik     := Val( uTikT[ 4 ] )
            nTipTik     := Min( Max( nTipTik, 1 ), ( Len( aTipDoc ) - 1 ) )
         end

      case Valtype( uTikT ) == "O"

         if uTikT:lFreTik
            nTipTik     := Len( aTipDoc )
         else
            nTipTik     := Val( uTikT:cTipTik )
            nTipTik     := Min( Max( nTipTik, 1 ), ( Len( aTipDoc ) - 1 ) )
         end

   end

Return ( aTipDoc[ nTipTik ] )



static function DisImg( cCodArt )

   local cFilBmp     := RetImg( cCodArt, dbfArticulo )

   cFilBmp           := cFileBmpName( cFilBmp )

   if file( cFilBmp )
      oBmpVis:Show()
      oBmpVis:ReLoad( , cFilBmp )
   else
      oBmpVis:Hide()
   end

return ( .T. )



Static Function SelBigUser( aTmp, aGet, dbfUsr )

   if BrwBigUser( dbfUsr )

      SetBigUser( aTmp, aGet )

      Return .T.

   end

Return .F.



Static Function SetBigUser( aTmp, aGet )

   aTmp[ 8 ]  := oUser():cCodigo()

   if !Empty( oUser():cImagen() )
      oBtnUsuario:cBmp( cFileBmpName( oUser():cImagen() ) )
   else
      oBtnUsuario:cBmp( if( oUser():lAdministrador(), "Security_Agent_32", "Dude4_32" ) )
   end

   oBtnUsuario:cCaption( Capitalize( oUser():cNombre() ) )

Return .T.



FUNCTION Tik2AlbFac( nTipTik, cNumDoc )

do case
   case nTipTik == "2"
      EdtAlbCli( cNumDoc )
   case nTipTik == "3"
      EdtFacCli( cNumDoc )
   otherwise
      msginfo( "No hay documento asociado", cNumDoc )
end

return nil



STATIC FUNCTION ContTpv( dbfTikT, oBrw )

   local oDlg
   local oSerIni
   local oSerFin
   local nRecno      := ( dbfTikT )->( recno() )
   local nOrdAnt     := ( dbfTikT )->( OrdSetFocus(1) )
   local cSerIni     := ( dbfTikT )->cSerTik
   local cSerFin     := ( dbfTikT )->cSerTik
   local nDocIni     := Val( ( dbfTikT )->cNumTik )
   local nDocFin     := Val( ( dbfTikT )->cNumTik )
   local cSufIni     := ( dbfTikT )->cSufTik
   local cSufFin     := ( dbfTikT )->cSufTik
   local oChk1
   local lChk1       := .T.

   oDlg = TDialog():New(,,,,, "CONTPV",, .F.,,,,,, .F.,,,,,, .F., )









   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cSerIni, cSerIni:= u ) }, oDlg,, "@!", {||    ( cSerIni >= "A" .AND. cSerIni <= "Z" )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )









   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cSerFin, cSerFin:= u ) }, oDlg,, "@!", {||    ( cSerFin >= "A" .AND. cSerFin <= "Z" )},,,,,, .T.,,, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nDocIni, nDocIni:= u ) }, oDlg,, "999999999",, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, nDocFin, nDocFin:= u ) }, oDlg,, "999999999",, "N/W*",,,,, .F.,,, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, cSufIni, cSufIni:= u ) }, oDlg,, "##",, "N/W*",,,,, .F.,,, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cSufFin, cSufFin:= u ) }, oDlg,, "##",, "N/W*",,,,, .F.,,, .F., .F.,,,,,, nil,,, )



   oChk1 := TCheckBox():ReDefine( 160, { | u | If( PCount()==0, lChk1, lChk1:= u ) }, oDlg,,,,,,, .F.,, .F. )




   TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





   TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:AddFastKey( 116, {|| oDlg:end( 1 ) } )
   oDlg:bStart := { || oSerIni:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      ( dbfTikT )->( dbGoTop())
      ( dbfTikT )->( ordSetFocus( 1 ) )

      ( dbfTikT )->( dbSeek( cSerIni + Str( nDocIni, 10 ) + cSufIni, .T. ) )

      while (dbfTikT)->cSerTik + (dbfTikT)->cNumTik + (dbfTikT)->cSufTik <= cSerFin + Str( nDocFin, 10 ) + cSufFin .AND. !(dbfTikT)->( eof() )

         if lChk1

            if ( dbfTikT )->( dbRLock() )
               ( dbfTikT )->lConTik := .T.
               ( dbfTikT )->( dbUnlock() )
            end

         else

            if ( dbfTikT )->( dbRLock() )
               ( dbfTikT )->lConTik := .F.
               ( dbfTikT )->( dbUnlock() )
            end

         end

      ( dbfTikT )->( dbSkip() )

      end

   end

   ( dbfTikT )->( ordSetFocus( nOrdAnt ) )
   ( dbfTikT )->( dbGoTo( nRecNo ) )

   oBrw:Refresh()

RETURN ( oDlg:nResult == 1 )



Function NameToField( cName )

   local cField   := {|| "" }

   cName          := AllTrim( cName )

   do case
      case cName == "Código del artículo"
         cField   := {|| ( dbfTmpL )->cCbaTil }
      case cName == "Unidades"
         cField   := {|| nTotNTpv( dbfTmpL, cPicUnd ) }
      case cName == "Propiedad 1"
         cField   := {|| ( dbfTmpL )->cValPr1 }
      case cName == "Propiedad 2"
         cField   := {|| ( dbfTmpL )->cValPr2 }
      case cName == "Lote"
         cField   := {|| ( dbfTmpL )->cLote }
      case cName == "Medición 1"
         cField   := {|| Trans( ( dbfTmpL )->nMedUno, MasUnd() ) }
      case cName == "Medición 2"
         cField   := {|| Trans( ( dbfTmpL )->nMedDos, MasUnd() ) }
      case cName == "Medición 3"
         cField   := {|| Trans( ( dbfTmpL )->nMedTre, MasUnd() ) }
      case cName == "Detalle"
         cField   := {|| Rtrim( ( dbfTmpL )->cNomTil ) }
      case cName == "Importe"
         cField   := {|| Trans( ( dbfTmpL )->nPvpTil, cPouDiv ) }
      case cName == "Descuento lineal"
         cField   := {|| Trans( nDtoUTpv( dbfTmpL, nDouDiv ), cPouDiv ) }
      case cName == "Descuento porcentual"
         cField   := {|| Trans( ( dbfTmpL )->nDtoLin, "@E 999.99" ) }
      case cName == "Total"
         cField   := {|| Trans( nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ), cPorDiv ) }
      case cName == "Número de serie"
         cField   := {|| ( dbfTmpL )->mNumSer }
      case cName == "Promoción"
         cField   := {|| ( dbfTmpL )->lInPromo }
      case cName == "Oferta"
         cField   := {|| ( dbfTmpL )->lLinOfe }
      case cName == "Número de línea"
         cField   := {|| Trans( ( dbfTmpL )->nNumLin, "9999" ) }
      case cName == "Código de barras"
         cField   := {|| cCodigoBarrasDefecto( ( dbfTmpL )->cCbaTil, dbfCodeBar ) }
   end

RETURN ( cField )



STATIC FUNCTION DelSerie( oWndBrw )

    local oDlg
   local oSerIni
   local oSerFin
   local oTxtDel
   local nTxtDel     := 0
   local nRecno      := ( dbfTikT )->( Recno() )
   local nOrdAnt     := ( dbfTikT )->( OrdSetFocus( 1 ) )
   local oDesde      := TDesdeHasta():Init( ( dbfTikT )->cSerTik, Val( ( dbfTikT )->cNumTik ), ( dbfTikT )->cSufTik, GetSysDate() )
   local lCancel     := .F.
   local oBtnAceptar
   local oBtnCancel




   oDlg = TDialog():New(,,,, "Eliminar series de tickets", "DELSERDOC",, .F.,,,,, oWndBrw, .F.,,,,,, .F., )



   TRadMenu():Redefine( { | u | If( PCount()==0, oDesde:nRadio, oDesde:nRadio:= u ) }, oDlg,, { 90, 91 },,,,, .F.,, )










   oSerIni := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, oDesde:cSerieInicio, oDesde:cSerieInicio:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieInicio >= "A" .AND. oDesde:cSerieInicio <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerIni ) )}, {||  ( DwSerie( oSerIni ) )},,,, nil,,, )










   oSerFin := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, oDesde:cSerieFin, oDesde:cSerieFin:= u ) }, oDlg,, "@!", {||    ( oDesde:cSerieFin >= "A" .AND. oDesde:cSerieFin <= "Z"  )},,,,,, .T., {||     ( oDesde:nRadio == 1 )},, .F., .T., {||    ( UpSerie( oSerFin ) )}, {||  ( DwSerie( oSerFin ) )},,,, nil,,, )






   TGetHlp():ReDefine( 120, { | u | If( PCount()==0, oDesde:nNumeroInicio, oDesde:nNumeroInicio:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )






   TGetHlp():ReDefine( 130, { | u | If( PCount()==0, oDesde:nNumeroFin, oDesde:nNumeroFin:= u ) }, oDlg,, "999999999",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 140, { | u | If( PCount()==0, oDesde:cSufijoInicio, oDesde:cSufijoInicio:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 150, { | u | If( PCount()==0, oDesde:cSufijoFin, oDesde:cSufijoFin:= u ) }, oDlg,, "##",,,,,,, .F., {||     ( oDesde:nRadio == 1 )},, .F., .F.,,,,,, nil,,, )





   TGetHlp():ReDefine( 170, { | u | If( PCount()==0, oDesde:dFechaInicio, oDesde:dFechaInicio:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )





   TGetHlp():ReDefine( 180, { | u | If( PCount()==0, oDesde:dFechaFin, oDesde:dFechaFin:= u ) }, oDlg,,,,,,,,, .F., {||     ( oDesde:nRadio == 2 )},, .F., .T.,,,,,, nil,,, )




   oBtnAceptar := TButton():ReDefine( 1, {||( DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, @lCancel ) )}, oDlg,,, .F.,,,, .F. )





   oBtnCancel := TButton():ReDefine( 2, {||( lCancel := .T., oDlg:end() )}, oDlg,,, .F.,,,, .T. )





   oTxtDel := TMeter():ReDefine( 160, { | u | If( PCount()==0, nTxtDel, nTxtDel:= u ) }, ( dbfTikT )->( OrdKeyCount() ), oDlg, .F.,,, .T.,,,, )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T., {|Self|( lCancel )},,, oDlg:bRClicked,,, )

   ( dbfTikT )->( dbGoTo( nRecNo ) )
   ( dbfTikT )->( ordSetFocus( nOrdAnt ) )

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



STATIC FUNCTION DelStart( oDesde, oDlg, oBtnAceptar, oBtnCancel, oTxtDel, lCancel )

   local nOrd
   local nDeleted       := 0
   local nProcesed      := 0

   oBtnAceptar:Hide()
   oBtnCancel:bAction   := {|| lCancel := .T. }

   if oDesde:nRadio == 1

      nOrd              := ( dbfTikT )->( OrdSetFocus( "nNumTik" ) )

      ( dbfTikT )->( dbSeek( oDesde:cNumeroInicio(), .T. ) )
      while !lCancel .AND. !( dbfTikT )->( eof() )






         if ( dbfTikT )->cSerTik >= oDesde:cSerieInicio              .AND. ( dbfTikT )->cSerTik <= oDesde:cSerieFin                 .AND. ( dbfTikT )->cNumTik >= Str( oDesde:nNumeroInicio, 10 )  .AND. ( dbfTikT )->cNumTik <= Str( oDesde:nNumeroFin, 10 )     .AND. ( dbfTikT )->cSufTik >= oDesde:cSufijoInicio             .AND. ( dbfTikT )->cSufTik <= oDesde:cSufijoFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( dbfTikT )->cSerTik + "/" + Alltrim( ( dbfTikT )->cNumTik ) + "/" + ( dbfTikT )->cSufTik

            DelTpv( nil, dbfTikT )

         else

            ( dbfTikT )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( nProcesed )

      end

      ( dbfTikT )->( OrdSetFocus( nOrd ) )

   else

      nOrd                 := ( dbfTikT )->( OrdSetFocus( "dFecTik" ) )

      ( dbfTikT )->( dbSeek( oDesde:dFechaInicio, .T. ) )
      while !lCancel .AND. ( dbfTikT )->dFecTik <= oDesde:dFechaFin .AND. !( dbfTikT )->( eof() )


         if ( dbfTikT )->dFecTik >= oDesde:dFechaInicio  .AND. ( dbfTikT )->dFecTik <= oDesde:dFechaFin

            ++nDeleted

            oTxtDel:cText  := "Eliminando : " + ( dbfTikT )->cSerTik + "/" + Alltrim( ( dbfTikT )->cNumTik ) + "/" + ( dbfTikT )->cSufTik

            DelTpv( nil, dbfTikT )



         else

            ( dbfTikT )->( dbSkip() )

         end

         ++nProcesed

         oTxtDel:Set( nProcesed )

      end

      ( dbfTikT )->( OrdSetFocus( nOrd ) )

   end

   lCancel              := .T.

   oBtnAceptar:Show()

   if lCancel
      msgStop( "Total de registros borrados : " + Str( nDeleted ), "Proceso cancelado" )
   else
      msgInfo( "Total de registros borrados : " + Str( nDeleted ), "Proceso finalizado" )
   end

RETURN ( oDlg:End() )



STATIC FUNCTION LqdVale( oWndBrw )

   if ( dbfTikT )->cTipTik == "6"

      if !( dbfTikT )->lLiqTik

         if dbLock( dbfTikT )
            ( dbfTikT )->lLiqTik := .T.
            ( dbfTikT )->( dbUnLock() )
         end

      else

         msgStop( "Este documento ya está liquidado." )

      end

   else

      msgStop( "Este documento no se almacenó como vale." )

   end

   oWndBrw:SetFocus()
   oWndBrw:Refresh()

RETURN NIL



FUNCTION AppTikCli( cCodCli, cCodArt, lOpenBrowse )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( nil, nil, cCodCli, cCodArt )
         oWndBrw:RecAdd()
      end

   else

      if OpenFiles( nil, .T. )
         WinAppRec( nil, bEditT, dbfTikT, cCodCli, cCodArt )
         CloseFiles()
      end

   end

Return .T.



FUNCTION InitTikCli( nNumTik )

   local nLevel         := nLevelUsr( "01063" )

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
      nTotTik()
      WinEdtRec( nil, bEditT, dbfTikT )
   else
      MsgStop( "No se encuentra ticket" )
   end

Return .T.






FUNCTION EdtTikCli( nNumTik, lOpenBrowse )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( , , , , .F. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            oWndBrw:RecEdit()
         else
            MsgStop( "No se encuentra ticket" )
         end
      end

   else

      if OpenFiles( nil, .T. )

         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )

            nTotTik()

            WinEdtRec( nil, bEditT, dbfTikT )
         else
            MsgStop( "No se encuentra ticket" )
         end

         CloseFiles()

      end

   end

Return .T.






FUNCTION ZooTikCli( nNumTik, lOpenBrowse  )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( , , , , .F. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            oWndBrw:RecZoom()
         else
            MsgStop( "No se encuentra ticket" )
         end
      end

   else

      if OpenFiles( nil, .T. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            nTotTik()
            WinZooRec( nil, bEditT, dbfTikT )
         else
            MsgStop( "No se encuentra ticket" )
         end
         CloseFiles()
      end

   end

RETURN NIL






FUNCTION DelTikCli( nNumTik, lOpenBrowse )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( , , , , .F. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )

            DelTpv( oWndBrw:oBrw, dbfTikT )
         else
            MsgStop( "No se encuentra ticket" )
         end
      end

   else

      if OpenFiles( nil, .T. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            nTotTik()

            DelTpv( nil, dbfTikT )
         else
            MsgStop( "No se encuentra ticket" )
         end
         CloseFiles()
      end

   end

RETURN NIL






FUNCTION PrnTikCli( nNumTik, lOpenBrowse  )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( , , , , .F. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            ImpTiket( .F. )
         else
            MsgStop( "No se encuentra ticket" )
         end
      end

   else

      if OpenFiles( nil, .T. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            nTotTik()
            ImpTiket( .F. )
         else
            MsgStop( "No se encuentra ticket" )
         end
         CloseFiles()
      end

   end

RETURN NIL






FUNCTION VisTikCli( nNumTik, lOpenBrowse  )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   if lOpenBrowse

      if FrontTpv( , , , , .F. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            ImpTiket( .T. )
         else
            MsgStop( "No se encuentra ticket" )
         end
      end

   else

      if OpenFiles( nil, .T. )
         if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            nTotTik()
            ImpTiket( .T. )
         else
            MsgStop( "No se encuentra ticket" )
         end
         CloseFiles()
      end

   end

RETURN NIL



Function EdtCobTikCli( nNumTik, lOpenBrowse )

   local nLevel         := nLevelUsr( "01063" )

   IIF( lOpenBrowse == nil, lOpenBrowse := .F., ) ;

   if nAnd( nLevel, 1 ) <> 0 .OR. nAnd( nLevel, 4 ) == 0
      msgStop( "Acceso no permitido." )
      return .T.
   end

   Sysrefresh()

   if OpenFiles( nil, .T. )
      if dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
         EdtCobTik()
      else
         MsgStop( "No se encuentra ticket" )
      end
      CloseFiles()
   end

   Sysrefresh()

Return .T.



static function lFacturaAlbaran()

   if ( dbfTikT )->cTipTik == "2"
      if !RetFld( ( dbfTikT )->cNumDoc, dbfAlbCliT, "lFacturado" )
         FactCli( nil, nil, nil, nil, nil, { nil, nil, ( dbfTikT )->cNumDoc, nil } )
      else
         msgStop( "El albarán ya ha sido facturado" )
      end
   else
      msgStop( "Sólo se pueden generar facturas desde albaranes" )
   end

Return ( .T. )



Static Function Recalcula( aTmp )

   local nRec





   nRec        := ( dbfTmpL )->( Recno() )

   ( dbfTmpL )->( dbGoTop() )
   while !( dbfTmpL )->( eof() )

      if lValLine( dbfTmpL ) .AND. !( dbfTmpL )->lFreTil


         if dbSeekInOrd( ( dbfTmpL )->cCbaTil, "CodeBar", dbfArticulo ) .OR. dbSeekInOrd( ( dbfTmpL )->cCbaTil, "Codigo", dbfArticulo )

            ( dbfTmpL )->nPvpTil    := nRetPreArt( aTmp[ 12 ], aTmp[ 24 ], .T., dbfArticulo, dbfDiv, dbfKit, dbfIva, .T. )

         end

      end

      (  dbfTmpL )->( dbskip() )

   end

   ( dbfTmpL )->( dbGoTo( nRec ) )

   lRecTotal( aTmp )

   oBrwDet:Refresh()

Return .T.



Static Function AppendKit( uTmpLin, aTik )

   local cCodArt
   local cSerTil
   local cNumTil
   local cSufTil
   local cAlmLin
   local nUntTil
   local nIvaTil
   local nNumLin

   if ValType( uTmpLin ) == "A"
      cCodArt                       := uTmpLin[ 5 ]
      cSerTil                       := uTmpLin[ 1 ]
      cNumTil                       := uTmpLin[ 2 ]
      cSufTil                       := uTmpLin[ 3 ]
      nNumLin                       := uTmpLin[ 31 ]
      cAlmLin                       := uTmpLin[ 27 ]
      nUntTil                       := uTmpLin[ 8 ]
      nIvaTil                       := uTmpLin[ 10 ]
   else
      cCodArt                       := ( uTmpLin )->cCbaTil
      cSerTil                       := ( uTmpLin )->cSerTil
      cNumTil                       := ( uTmpLin )->cNumTil
      cSufTil                       := ( uTmpLin )->cSufTil
      nNumLin                       := ( uTmpLin )->nNumLin
      cAlmLin                       := ( uTmpLin )->cAlmLin
      nUntTil                       := ( uTmpLin )->nUntTil
      nIvaTil                       := ( uTmpLin )->nIvaTil
   end

   cCodArt                          := Alltrim( cCodArt )

   if ( dbfKit )->( dbSeek( cCodArt ) )

      while Alltrim( ( dbfKit )->cCodKit ) == ( cCodArt ) .AND. !( dbfKit )->( eof() )

         if ( dbfArticulo )->( dbSeek( ( dbfKit )->cRefKit ) )

            ( dbfTmpL )->( dbAppend() )

            ( dbfTmpL )->cSerTil    := cSerTil
            ( dbfTmpL )->cNumTil    := cNumTil
            ( dbfTmpL )->cSufTil    := cSufTil
            ( dbfTmpL )->nNumLin    := nNumLin
            ( dbfTmpL )->cAlmLin    := cAlmLin
            ( dbfTmpL )->nUntTil    := nUntTil * ( dbfKit )->nUndKit

            ( dbfTmpL )->cCbaTil    := ( dbfKit      )->cRefKit
            ( dbfTmpL )->cNomTil    := ( dbfArticulo )->Nombre
            ( dbfTmpL )->cFamTil    := ( dbfArticulo )->Familia
            ( dbfTmpL )->lTipAcc    := ( dbfArticulo )->lTipAcc
            ( dbfTmpL )->nCtlStk    := ( dbfArticulo )->nCtlStock
            ( dbfTmpL )->cCodImp    := ( dbfArticulo )->cCodImp
            ( dbfTmpL )->nMesGrt    := ( dbfArticulo )->nMesGrt

            if ( dbfArticulo )->lFacCnv
               ( dbfTmpL )->nFacCnv := ( dbfArticulo )->nFacCnv
            end

            ( dbfTmpL )->nValImp    := oNewImp:nValImp( ( dbfArticulo )->cCodImp, .T., nIvaTil )
            ( dbfTmpL )->nCosDiv    := nCosto( nil, dbfArticulo, dbfKit )





            if !Empty( nIvaTil )
               ( dbfTmpL )->nIvaTil := nIva( dbfIva, ( dbfArticulo )->TipoIva )
            else
               ( dbfTmpL )->nIvaTil := 0
            end





            ( dbfTmpL )->lKitChl    := !lKitAsociado( cCodArt, dbfArticulo )
            ( dbfTmpL )->lImpLin    := lImprimirComponente( cCodArt, dbfArticulo )
            ( dbfTmpL )->lKitPrc    := lPreciosComponentes( cCodArt, dbfArticulo )

            if ( dbfTmpL )->lKitPrc
               ( dbfTmpL )->nPvpTil := nRetPreArt( aTik[ 12 ], aTik[ 24 ], .T., dbfArticulo, dbfDiv, dbfKit, dbfIva, .T. )
            end

            if lStockComponentes( cCodArt, dbfArticulo )
               ( dbfTmpL )->nCtlStk := ( dbfArticulo )->nCtlStock
            else
               ( dbfTmpL )->nCtlstk := 3
            end

            if ( dbfArticulo )->lKitArt
               AppendKit( dbfTmpL, aTik )
            end

         end

         ( dbfKit )->( dbSkip() )

      end

   end

Return ( nil )



FUNCTION nTotValLiq( cNumTik, dbfTikT, dbfTikL, dbfDiv, aTmp, cDivRet, lPic, lExcCnt )

   local nRec  := ( dbfTikT )->( Recno() )

   local nTik  := nTotTik( cNumTik, dbfTikT, dbfTikL, dbfDiv, aTmp, cDivRet, lPic, lExcCnt )
   local nVal  := nTotTik( ( dbfTikT )->cValDoc, dbfTikT, dbfTikL, dbfDiv, aTmp, cDivRet, lPic, lExcCnt )

   ( dbfTikT )->( dbGoTo( nRec ) )

Return ( Min( nTik, nVal ) )



FUNCTION IsTpv( cPath )

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "TIKET.DBF" )
      dbCreate( cPath + "TIKET.DBF", aSqlStruct( aItmTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEL.DBF" )
      dbCreate( cPath + "TIKEL.DBF", aSqlStruct( aColTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEP.DBF" )
      dbCreate( cPath + "TIKEP.DBF", aSqlStruct( aPgoTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEC.DBF" )
      dbCreate( cPath + "TIKEC.DBF", aSqlStruct( aPgoCli() ), cDriver() )
   end




   if !lExistIndex( cPath + "TIKET.Cdx" ) .OR.  !lExistIndex( cPath + "TIKEL.Cdx" ) .OR.  !lExistIndex( cPath + "TIKEP.Cdx" ) .OR.  !lExistIndex( cPath + "TIKEC.Cdx" )

      rxTpv( cPath )

   end

Return ( nil )



Static Function ClickEntrega( aTmp, aGet, oDlgTpv )





   if ( dbfTmpL )->( ordKeyCount() ) <> 0

      aTmp[ 50 ] := .F.





      if GuardaVenta( aTmp, aGet, .F. )





         oDlgTpv:Disable()





         ImpTiket( .F., .T. )





         oDlgTpv:Enable()





         cTitleDialog( aTmp )

      end

   end

Return ( nil )







_HB_CLASS TotalesTPV ; UTILITY FUNCTION TotalesTPV(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TotalesTPV" , { HBObject():Classh } ) ) ;

   _HB_MEMBER Init(); IIF( .F., s_oClass:ModMethod( "Init", @TotalesTPV_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Init", @TotalesTPV_Init(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lValeMayorTotal(); IIF( .F., s_oClass:ModInline( "lValeMayorTotal", {|Self | Self, ( ( ::nVale <= ::nTotal ) .OR. ( ::nTotal < 0 ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddInline( "lValeMayorTotal", {|Self | Self, ( ( ::nVale <= ::nTotal ) .OR. ( ::nTotal < 0 ) ) }, nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ) )

   _HB_MEMBER { nTotal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nTotal" }, .F., .F. ), )
   _HB_MEMBER { nEntregado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nEntregado" }, .F., .F. ), )
   _HB_MEMBER { nCobrado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCobrado" }, .F., .F. ), )
   _HB_MEMBER { nVale} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nVale" }, .F., .F. ), )
   _HB_MEMBER { nAnticipo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nAnticipo" }, .F., .F. ), )
   _HB_MEMBER { nCobradoDivisa} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCobradoDivisa" }, .F., .F. ), )
   _HB_MEMBER { nCambio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nCambio" }, .F., .F. ), )

   _HB_MEMBER { oTotal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oTotal" }, .F., .F. ), )
   _HB_MEMBER { oEntregado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oEntregado" }, .F., .F. ), )
   _HB_MEMBER { oCobrado} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCobrado" }, .F., .F. ), )
   _HB_MEMBER { oCobradoDivisa} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCobradoDivisa" }, .F., .F. ), )
   _HB_MEMBER { oCambio} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oCambio" }, .F., .F. ), )

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TotalesTPV ;

UTILITY STATIC function TotalesTPV_Init() ; local Self AS CLASS TotalesTPV := QSelf() AS CLASS TotalesTPV

   ::nTotal             := 0
   ::nCobrado           := 0
   ::nVale              := 0
   ::nAnticipo          := 0
   ::nEntregado         := 0
   ::nCobrado           := 0
   ::nCobradoDivisa     := 0
   ::nCambio            := 0

   ::oTotal             := nil
   ::oEntregado         := nil
   ::oCobrado           := nil
   ::oCobradoDivisa     := nil
   ::oCambio            := nil

Return ( Self )







_HB_CLASS TTiketsClientesSenderReciver ; UTILITY FUNCTION TTiketsClientesSenderReciver(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TTiketsClientesSenderReciver" , {TSenderReciverItem():classh} ) ) ; ;

   _HB_MEMBER CreateData(); IIF( .F., s_oClass:ModMethod( "CreateData", @TTiketsClientesSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "CreateData", @TTiketsClientesSenderReciver_CreateData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER RestoreData(); IIF( .F., s_oClass:ModMethod( "RestoreData", @TTiketsClientesSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "RestoreData", @TTiketsClientesSenderReciver_RestoreData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER SendData(); IIF( .F., s_oClass:ModMethod( "SendData", @TTiketsClientesSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SendData", @TTiketsClientesSenderReciver_SendData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ReciveData(); IIF( .F., s_oClass:ModMethod( "ReciveData", @TTiketsClientesSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ReciveData", @TTiketsClientesSenderReciver_ReciveData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Process(); IIF( .F., s_oClass:ModMethod( "Process", @TTiketsClientesSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Process", @TTiketsClientesSenderReciver_Process(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TTiketsClientesSenderReciver ;



UTILITY STATIC function TTiketsClientesSenderReciver_CreateData() ; local Self AS CLASS TTiketsClientesSenderReciver := QSelf() AS CLASS TTiketsClientesSenderReciver

   local lSnd        := .F.
   local dbfTikT
   local dbfTikL
   local dbfTikP
   local tmpTikT
   local tmpTikL
   local tmpTikP
   local cFileName   := "TikCli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()

   ::oSender:SetText( "Enviando tikets de clientes" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
   ordSetFocus( "lSndDoc" )

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @dbfTikP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   MkTpv( cPatSnd() )

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @tmpTikT ) ), if(.F. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @tmpTikL ) ), if(.F. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @tmpTikP ) ), if(.F. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   if !Empty( ::oSender:oMtr )
      ::oSender:oMtr:nTotal := ( dbfTikT )->( OrdKeyCount() )
   end

   if ( dbfTikT )->( dbSeek( .T. ) )

      while ( dbfTikT )->lSndDoc .AND. !( dbfTikT )->( eof() )

         lSnd  := .T.

         dbPass( dbfTikT, tmpTikT, .T. )
         ::oSender:SetText( ( dbfTikT )->cSerTik + "/" + AllTrim( ( dbfTikT )->cNumTik ) + "/" + AllTrim( ( dbfTikT )->cSufTik ) + "; " + Dtoc( ( dbfTikT )->dFecTik ) + "; " + AllTrim( ( dbfTikT )->cCliTik ) + "; " + ( dbfTikT )->cNomTik )





         if ( dbfTikL )->( dbSeek( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik ) )
            while ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik == ( dbfTikL )->CSERTIL + ( dbfTikL )->CNUMTIL + ( dbfTikL )->CSUFTIL .AND. !( dbfTikL )->( eof() )
               dbPass( dbfTikL, tmpTikL, .T. )
               ( dbfTikL )->( dbSkip() )
            end
         end





         if ( dbfTikP )->( dbSeek( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik ) )
            while ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik == ( dbfTikP )->cSerTik + ( dbfTikP )->cNumTik + ( dbfTikP )->cSufTik .AND. !( dbfTikP )->( eof() )
               dbPass( dbfTikP, tmpTikP, .T. )
               ( dbfTikP )->( dbSkip() )
            end
         end

         ( dbfTikT )->( dbSkip() )

         if !Empty( ::oSender:oMtr )
            ::oSender:oMtr:Set( ( dbfTikT )->( OrdKeyNo() ) )
         end

      end

   end





   ( tmpTikT )->( dbCloseArea() )
   ( tmpTikL )->( dbCloseArea() )
   ( tmpTikP )->( dbCloseArea() )
   ( dbfTikT )->( dbCloseArea() )
   ( dbfTikL )->( dbCloseArea() )
   ( dbfTikP )->( dbCloseArea() )

   if lSnd

      ::oSender:SetText( "Comprimiendo tikets de clientes" )

      if ::oSender:lZipData( cFileName )
         ::oSender:SetText( "Ficheros comprimidos" )
      else
         ::oSender:SetText( "ERROR al crear fichero comprimido" )
      end

   else

      ::oSender:SetText( "No hay registros tikets para enviar" )

   end

Return ( Self )



UTILITY STATIC function TTiketsClientesSenderReciver_RestoreData() ; local Self AS CLASS TTiketsClientesSenderReciver := QSelf() AS CLASS TTiketsClientesSenderReciver

   local dbfTikT

   if ::lSuccesfullSend





      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfTikT )->( OrdSetFocus( "lSndDoc" ) )

      while ( dbfTikT )->( dbSeek( .T. ) ) .AND. !( dbfTikT )->( eof() )
         if ( dbfTikT )->( dbRLock() )
            ( dbfTikT )->lSndDoc := .F.
            ( dbfTikT )->( dbRUnlock() )
         end
      end

      ( dbfTikT )->( dbCloseArea() )

   end

Return ( Self )



UTILITY STATIC function TTiketsClientesSenderReciver_SendData() ; local Self AS CLASS TTiketsClientesSenderReciver := QSelf() AS CLASS TTiketsClientesSenderReciver

   local cFileName   := "TikCli" + StrZero( ::nGetNumberToSend(), 6 ) + "." + RetSufEmp()

   if file( cPatOut() + cFileName )

      if ftpSndFile( cPatOut() + cFileName, cFileName, 2000, ::oSender )
         ::lSuccesfullSend := .T.
         ::IncNumberToSend()
         ::oSender:SetText( "Fichero enviado " + cFileName )
      else
         ::oSender:SetText( "ERROR al enviar fichero" )
      end

   end

Return ( Self )



UTILITY STATIC function TTiketsClientesSenderReciver_ReciveData() ; local Self AS CLASS TTiketsClientesSenderReciver := QSelf() AS CLASS TTiketsClientesSenderReciver

   local n
   local aExt        := aRetDlgEmp()





   ::oSender:SetText( "Recibiendo tikets de clientes" )

   for n := 1 to len( aExt )
      ftpGetFiles( "TikCli*." + aExt[ n ], cPatIn(), 2000, ::oSender )
   next

   ::oSender:SetText( "Tickets de clientes recibidos" )

Return Self



UTILITY STATIC function TTiketsClientesSenderReciver_Process() ; local Self AS CLASS TTiketsClientesSenderReciver := QSelf() AS CLASS TTiketsClientesSenderReciver

   local m
   local oStock
   local tmpTikT
   local tmpTikL
   local tmpTikP
   local dbfDiv
   local dbfTikT
   local dbfTikL
   local dbfTikP
   local dbfClient
   local nTotTik
   local nTotTikOld
   local nTotTikNew
   local oBlock
   local oError
   local aFiles      := Directory( cPatIn() + "TikCli*.*" )





   ::oSender:SetText( "Importando tikets de clientes" )

   for m := 1 TO len( aFiles )

      ::oSender:SetText( "Procesando fichero : " + aFiles[ m, 1 ] )









      if ::oSender:lUnZipData( cPatIn() + aFiles[ m, 1 ] )







         if lExistTable( cPatSnd() + "TIKET.DBF" ) .AND. lExistTable( cPatSnd() + "TIKEL.DBF" ) .AND. lExistTable( cPatSnd() + "TIKEP.DBF" )

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @dbfTikP ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatCli() + "CLIENT.DBF" ), ( cCheckArea( "CLIENT", @dbfClient ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatCli() + "CLIENT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
            if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKET.DBF" ), ( cCheckArea( "TIKET", @tmpTikT ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @tmpTikL ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            dbUseArea( .T., ( cDriver() ), ( cPatSnd() + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @tmpTikP ) ), if(.F. .OR. .F., !.F., NIL), .T.,, )
            if !lAIS() ; ordListAdd( ( cPatSnd() + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

            oStock            := TStock():New()
            oStock:cTikT      := dbfTikT
            oStock:cTikL      := dbfTikL

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpTikT )->( ordKeyCount() )
            end

            while !( tmpTikT )->( eof() )

               if lValidaOperacion( ( tmpTikT )->dFecTik, .F. )





                  if ( dbfTikT )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )

                     dbPass( tmpTikT, dbfTikT, .F. )

                     ::oSender:SetText( "Reemplazado : " + ( dbfTikT )->cSerTik + "/" + AllTrim( ( dbfTikT )->cNumTik ) + "/" + AllTrim( ( dbfTikT )->cSufTik ) + "; " + Dtoc( ( dbfTikT )->dFecTik ) + "; " + AllTrim( ( dbfTikT )->cCliTik ) + "; " + ( dbfTikT )->cNomTik )
















                     while ( dbfTikL )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )
                        if dbLock( dbfTikL )
                           ( dbfTikL )->( dbDelete() )
                           ( dbfTikL )->( dbUnLock() )
                        end
                     end





                     while ( dbfTikP )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )

                        if dbLock( dbfTikP )
                           ( dbfTikP )->( dbDelete() )
                           ( dbfTikP )->( dbUnLock() )
                        end
                     end

                  else

                     dbPass( tmpTikT, dbfTikT, .T. )
                     ::oSender:SetText( "Añadido : " + ( dbfTikT )->cSerTik + "/" + AllTrim( ( dbfTikT )->cNumTik ) + "/" + AllTrim( ( dbfTikT )->cSufTik ) + "; " + Dtoc( ( dbfTikT )->dFecTik ) + "; " + AllTrim( ( dbfTikT )->cCliTik ) + "; " + ( dbfTikT )->cNomTik )





                  end





                  while ( dbfTikL )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )
                     if ( dbfTikL )->( dbRLock() )
                        ( dbfTikL )->( dbDelete() )
                     end
                  end





                  if ( tmpTikL )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )
                     while ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik == ( tmpTikL )->cSerTil + ( tmpTikL )->cNumTil + ( tmpTikL )->cSufTil .AND. !( tmpTikL )->( eof() )
                        dbPass( tmpTikL, dbfTikL, .T. )
                        ( tmpTikL )->( dbSkip() )
                     end
                  end





                  while ( dbfTikP )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )
                     if ( dbfTikP )->( dbRLock() )
                        ( dbfTikP )->( dbDelete() )
                     end
                  end





                  if ( tmpTikP )->( dbSeek( ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik ) )
                     while ( tmpTikT )->cSerTik + ( tmpTikT )->cNumTik + ( tmpTikT )->cSufTik == ( tmpTikP )->cSerTik + ( tmpTikP )->cNumTik + ( tmpTikP )->cSufTik .AND. !( tmpTikP )->( eof() )
                        dbPass( tmpTikP, dbfTikP, .T. )
                        ( tmpTikP )->( dbSkip() )
                     end
                  end

               end

               ( tmpTikT )->( dbSkip() )

               if !Empty( ::oSender:oMtr )
                  ::oSender:oMtr:Set( ( tmpTikT )->( OrdKeyNo() ) )
               end

               SysRefresh()

            end

            if !Empty( ::oSender:oMtr )
               ::oSender:oMtr:nTotal := ( tmpTikT )->( ordKeyCount() )
            end





            ( dbfTikT   )->( dbCloseArea() )
            ( dbfTikL   )->( dbCloseArea() )
            ( dbfTikP   )->( dbCloseArea() )
            ( dbfClient )->( dbCloseArea() )
            ( dbfDiv    )->( dbCloseArea() )
            ( tmpTikT   )->( dbCloseArea() )
            ( tmpTikL   )->( dbCloseArea() )
            ( tmpTikP   )->( dbCloseArea() )

            oStock:end()

            fErase( cPatSnd() + "TikeT.Dbf" )
            fErase( cPatSnd() + "TikeL.Dbf" )
            fErase( cPatSnd() + "TikeP.Dbf" )

            ::oSender:AppendFileRecive( aFiles[ m, 1 ] )

         else

            ::oSender:SetText( "Faltan ficheros" )

            if !lExistTable( cPatSnd() + "TikeT.Dbf" )
               ::oSender:SetText( "Falta " + cPatSnd() + "TikeT.Dbf" )
            end

            if !lExistTable( cPatSnd() + "TikeL.Dbf" )
               ::oSender:SetText( "Falta " + cPatSnd() + "TikeL.Dbf" )
            end

            if !lExistTable( cPatSnd() + "TikeP.Dbf" )
               ::oSender:SetText( "Falta " + cPatSnd() + "TikeP.Dbf" )
            end

         end

      end



















   next

Return Self



Static Function GenTikCli( nDevice, cCaption, cCodDoc, cPrinter, lComanda, lAnulacion, cTipImpCom )

   local oDevice

   if ( dbfTikT )->( ordKeyCount() ) == 0
      return nil
   end

   IIF( nDevice == nil, nDevice := 1, ) ;
   IIF( cCaption == nil, cCaption := "Imprimiendo tickets a clientes", ) ;
   IIF( cCodDoc == nil, cCodDoc := cFormatoTicketEnCaja( oUser():cCaja(), dbfCajT ), ) ;
   IIF( cPrinter == nil, cPrinter := cWindowsPrinterEnCaja( oUser():cCaja(), dbfCajT ), ) ;
   IIF( lComanda == nil, lComanda := .F., ) ;
   IIF( lAnulacion == nil, lAnulacion := .F., ) ;
   IIF( cTipImpCom == nil, cTipImpCom := "", ) ;

   if Empty( cCodDoc )
      cCodDoc           := cFormatoTicketEnCaja( oUser():cCaja(), dbfCajT )
   end

   if !lExisteDocumento( cCodDoc, dbfDoc )
      return nil
   end





   PrintReportTikCli( nDevice, 1, cPrinter, lComanda, lAnulacion )





   cCortePapelEnCaja( oUser():cCaja(), dbfCajT, dbfCajL, lComanda, cTipImpCom, lAnulacion )

Return .F.



Static Function nGenTikCli( nDevice, cCaption, cCodDoc, cPrinter )

   local nImpYet     := 0

   While nImpYet < nCopTik

      if nImpYet < 1 .OR. ApoloMsgNoYes( "¿Desea imprimir el tiket Nº" + Str( nImpYet + 1, 2 ) + "?", "Elija una opción" )

         GenTikCli( nDevice, cCaption, cCodDoc, cPrinter )

      end

      ++nImpYet

   end

return nil
#line 16585 ".\Prg\Tpv.prg"
Static Function DataReport( oFr, lComanda, lAnulacion )

   IIF( lComanda == nil, lComanda := .F., ) ;
   IIF( lAnulacion == nil, lAnulacion := .F., ) ;





   oFr:ClearDataSets()

   oFr:SetWorkArea(     "Tickets", ( dbfTikT )->( Select() ), .F., { 1, 1, 0 } )
   oFr:SetFieldAliases( "Tickets", cItemsToReport( aItmTik() ) )

   do case
      case lComanda
         oFr:SetWorkArea(  "Lineas de tickets", ( dbfTmpC )->( Select() ) )
      case lAnulacion
         oFr:SetWorkArea(  "Lineas de tickets", ( dbfTmpN )->( Select() ) )
      otherwise
         oFr:SetWorkArea(  "Lineas de tickets", ( dbfTikL )->( Select() ) )
   end
   oFr:SetFieldAliases( "Lineas de tickets", cItemsToReport( aColTik() ) )

   oFr:SetWorkArea(     "Lineas de albaranes", ( dbfAlbCliL )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de albaranes", cItemsToReport( aColAlbCli() ) )

   oFr:SetWorkArea(     "Lineas de facturas", ( dbfFacCliL )->( Select() ) )
   oFr:SetFieldAliases( "Lineas de facturas", cItemsToReport( aColFacCli() ) )

   oFr:SetWorkArea(     "Pagos de tickets", ( dbfTikP )->( Select() ) )
   oFr:SetFieldAliases( "Pagos de tickets", cItemsToReport( aPgoTik() ) )

   oFr:SetWorkArea(     "Empresa", ( dbfEmp )->( Select() ) )
   oFr:SetFieldAliases( "Empresa", cItemsToReport( aItmEmp() ) )

   oFr:SetWorkArea(     "Clientes", ( dbfClient )->( Select() ) )
   oFr:SetFieldAliases( "Clientes", cItemsToReport( aItmCli() ) )

   oFr:SetWorkArea(     "Obras", ( dbfObrasT )->( Select() ) )
   oFr:SetFieldAliases( "Obras",  cItemsToReport( aItmObr() ) )

   oFr:SetWorkArea(     "Almacenes", ( dbfAlm )->( Select() ) )
   oFr:SetFieldAliases( "Almacenes", cItemsToReport( aItmAlm() ) )

   oFr:SetWorkArea(     "Rutas", ( dbfRuta )->( Select() ) )
   oFr:SetFieldAliases( "Rutas", cItemsToReport( aItmRut() ) )

   oFr:SetWorkArea(     "Agentes", ( dbfAgent )->( Select() ) )
   oFr:SetFieldAliases( "Agentes", cItemsToReport( aItmAge() ) )

   oFr:SetWorkArea(     "Formas de pago", ( dbfFpago )->( Select() ) )
   oFr:SetFieldAliases( "Formas de pago", cItemsToReport( aItmFPago() ) )

   oFr:SetWorkArea(     "Usuarios", ( dbfUsr )->( Select() ) )
   oFr:SetFieldAliases( "Usuarios", cItemsToReport( aItmUsr() ) )

   oFr:SetWorkArea(     "Artículos", ( dbfArticulo )->( Select() ) )
   oFr:SetFieldAliases( "Artículos", cItemsToReport( aItmArt() ) )

   oFr:SetWorkArea(     "Familias", ( dbfFamilia )->( Select() ) )
   oFr:SetFieldAliases( "Familias", cItemsToReport( aItmFam() ) )

   oFr:SetWorkArea(     "Sala venta", oSalaVentas:oDbf:nArea )
   oFr:SetFieldAliases( "Sala venta", cObjectsToReport( oSalaVentas:oDbf ) )

   oFr:SetWorkArea(     "Orden comanda", oTComandas:oDbf:nArea )
   oFr:SetFieldAliases( "Orden comanda", cObjectsToReport( oTComandas:oDbf ) )

   oFr:SetWorkArea(     "Unidades de medición",  oUndMedicion:Select() )
   oFr:SetFieldAliases( "Unidades de medición",  cObjectsToReport( oUndMedicion:oDbf ) )

   oFr:SetWorkArea(     "Categorías", ( dbfCategoria )->( Select() ) )
   oFr:SetFieldAliases( "Categorías", cItemsToReport( aItmCategoria() ) )

   oFr:SetWorkArea(     "Tipos de artículos",  oTipArt:Select() )
   oFr:SetFieldAliases( "Tipos de artículos",  cObjectsToReport( oTipArt:oDbf ) )

   oFr:SetWorkArea(     "Fabricantes",  oFabricante:Select() )
   oFr:SetFieldAliases( "Fabricantes",  cObjectsToReport( oFabricante:oDbf ) )

   oFr:SetWorkArea(     "Temporadas", ( dbfTemporada )->( Select() ) )
   oFr:SetFieldAliases( "Temporadas", cItemsToReport( aItmTemporada() ) )



   oFr:SetMasterDetail( "Tickets", "Lineas de tickets",  {|| ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik } )
   oFr:SetMasterDetail( "Tickets", "Lineas de albaranes",{|| ( dbfTikT )->cNumDoc } )
   oFr:SetMasterDetail( "Tickets", "Lineas de facturas", {|| ( dbfTikT )->cNumDoc } )
   oFr:SetMasterDetail( "Tickets", "Pagos de tickets",   {|| ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik } )
   oFr:SetMasterDetail( "Tickets", "Empresa",            {|| cCodigoEmpresaEnUso() } )
   oFr:SetMasterDetail( "Tickets", "Clientes",           {|| ( dbfTikT )->cCliTik } )
   oFr:SetMasterDetail( "Tickets", "Obras",              {|| ( dbfTikT )->cCliTik + ( dbfTikT )->cCodObr } )
   oFr:SetMasterDetail( "Tickets", "Almacen",            {|| ( dbfTikT )->cAlmTik } )
   oFr:SetMasterDetail( "Tickets", "Rutas",              {|| ( dbfTikT )->cCodRut } )
   oFr:SetMasterDetail( "Tickets", "Agentes",            {|| ( dbfTikT )->cCodAge } )
   oFr:SetMasterDetail( "Tickets", "Formas de pago",     {|| ( dbfTikT )->cFpgTik } )
   oFr:SetMasterDetail( "Tickets", "Usuarios",           {|| ( dbfTikT )->cCcjTik } )
   oFr:SetMasterDetail( "Tickets", "SalaVenta",          {|| ( dbfTikT )->cCodSala } )

   oFr:SetMasterDetail( "Lineas de tickets", "Artículos",            {|| ( dbfTikL )->cCbaTil } )
   oFr:SetMasterDetail( "Lineas de tickets", "Familia",              {|| ( dbfTikL )->cFamTil } )
   oFr:SetMasterDetail( "Lineas de tickets", "Orden comanda",        {|| ( dbfTikL )->cCodTImp } )
   oFr:SetMasterDetail( "Lineas de tickets", "Unidades de medición", {|| ( dbfTikL )->cUnidad } )
   oFr:SetMasterDetail( "Lineas de tickets", "Categorías",           {|| RetFld( ( dbfTikL )->cCbaTil, dbfArticulo, "cCodCate" ) } )
   oFr:SetMasterDetail( "Lineas de tickets", "Tipos de artículos",   {|| RetFld( ( dbfTikL )->cCbaTil, dbfArticulo, "cCodTip" ) } )
   oFr:SetMasterDetail( "Lineas de tickets", "Fabricantes",          {|| RetFld( ( dbfTikL )->cCbaTil, dbfArticulo, "cCodFab" ) } )
   oFr:SetMasterDetail( "Lineas de tickets", "Temporadas",           {|| RetFld( ( dbfTikL )->cCbaTil, dbfArticulo, "cCodTemp" ) } )



   oFr:SetResyncPair(   "Tickets", "Lineas de tickets" )
   oFr:SetResyncPair(   "Tickets", "Lineas de albaranes" )
   oFr:SetResyncPair(   "Tickets", "Lineas de facturas" )
   oFr:SetResyncPair(   "Tickets", "Pagos de tickets" )
   oFr:SetResyncPair(   "Tickets", "Empresa" )
   oFr:SetResyncPair(   "Tickets", "Clientes" )
   oFr:SetResyncPair(   "Tickets", "Obras" )
   oFr:SetResyncPair(   "Tickets", "Almacenes" )
   oFr:SetResyncPair(   "Tickets", "Rutas" )
   oFr:SetResyncPair(   "Tickets", "Agentes" )
   oFr:SetResyncPair(   "Tickets", "Formas de pago" )
   oFr:SetResyncPair(   "Tickets", "Usuarios" )
   oFr:SetResyncPair(   "Tickets", "SalaVenta" )

   oFr:SetResyncPair(   "Lineas de tickets", "Artículos" )
   oFr:SetResyncPair(   "Lineas de tickets", "Familias" )
   oFr:SetResyncPair(   "Lineas de tickets", "Orden comanda" )
   oFr:SetResyncPair(   "Lineas de tickets", "Unidades de medición" )
   oFr:SetResyncPair(   "Lineas de tickets", "Categorías" )
   oFr:SetResyncPair(   "Lineas de tickets", "Tipos de artículos" )
   oFr:SetResyncPair(   "Lineas de tickets", "Fabricantes" )
   oFr:SetResyncPair(   "Lineas de tickets", "Temporadas" )


Return nil



Static Function VariableReport( oFr )

   oFr:DeleteCategory(  "Tickets" )
   oFr:DeleteCategory(  "Lineas de tickets" )
   oFr:DeleteCategory(  "Lineas de comandas" )
   oFr:DeleteCategory(  "Lineas de albaranes" )
   oFr:DeleteCategory(  "Lineas de facturas" )





   oFr:AddVariable(     "Tickets",             "Total ticket",                            "GetHbVar('nTotTik')" )
   oFr:AddVariable(     "Tickets",             "Total bruto",                             "GetHbVar('nTotBrt')" )
   oFr:AddVariable(     "Tickets",             "Total neto",                              "GetHbVar('nTotNet')" )
   oFr:AddVariable(     "Tickets",             "Total " + cImp(),                         "GetHbVar('nTotIva')" )
   oFr:AddVariable(     "Tickets",             "Total IVM",                               "GetHbVar('nTotIvm')" )
   oFr:AddVariable(     "Tickets",             "Total albarán",                           "GetHbVar('nTotAlb')" )
   oFr:AddVariable(     "Tickets",             "Total factura",                           "GetHbVar('nTotFac')" )
   oFr:AddVariable(     "Tickets",             "Precio por pax.",                         "GetHbVar('nTotPax')" )
   oFr:AddVariable(     "Tickets",             "Total descuento general",                 "GetHbVar('nTotDtoEsp')" )
   oFr:AddVariable(     "Tickets",             "Total descuento pronto pago",             "GetHbVar('nTotDpp')" )
   oFr:AddVariable(     "Tickets",             "Cuenta por defecto del cliente",          "GetHbVar('cCtaCli')" )

   oFr:AddVariable(     "Tickets",             "Bruto primer tipo de " + cImp(),          "GetHbArrayVar('aBrtTik',1)" )
   oFr:AddVariable(     "Tickets",             "Bruto segundo tipo de " + cImp(),         "GetHbArrayVar('aBrtTik',2)" )
   oFr:AddVariable(     "Tickets",             "Bruto tercer tipo de " + cImp(),          "GetHbArrayVar('aBrtTik',3)" )
   oFr:AddVariable(     "Tickets",             "Base primer tipo de " + cImp(),           "GetHbArrayVar('aBasTik',1)" )
   oFr:AddVariable(     "Tickets",             "Base segundo tipo de " + cImp(),          "GetHbArrayVar('aBasTik',2)" )
   oFr:AddVariable(     "Tickets",             "Base tercer tipo de " + cImp(),           "GetHbArrayVar('aBasTik',3)" )
   oFr:AddVariable(     "Tickets",             "Porcentaje primer tipo " + cImp(),        "GetHbArrayVar('aIvaTik',1)" )
   oFr:AddVariable(     "Tickets",             "Porcentaje segundo tipo " + cImp(),       "GetHbArrayVar('aIvaTik',2)" )
   oFr:AddVariable(     "Tickets",             "Porcentaje tercer tipo " + cImp(),        "GetHbArrayVar('aIvaTik',3)" )
   oFr:AddVariable(     "Tickets",             "Importe primer tipo " + cImp(),           "GetHbArrayVar('aImpTik',1)" )
   oFr:AddVariable(     "Tickets",             "Importe segundo tipo " + cImp(),          "GetHbArrayVar('aImpTik',2)" )
   oFr:AddVariable(     "Tickets",             "Importe tercer tipo " + cImp(),           "GetHbArrayVar('aImpTik',3)" )
   oFr:AddVariable(     "Tickets",             "Importe primer tipo IVMH",                "GetHbArrayVar('aIvmTik',1)" )
   oFr:AddVariable(     "Tickets",             "Importe segundo tipo IVMH",               "GetHbArrayVar('aIvmTik',2)" )
   oFr:AddVariable(     "Tickets",             "Importe tercer tipo IVMH",                "GetHbArrayVar('aIvmTik',3)" )

   oFr:AddVariable(     "Tickets",             "Total vale en compra",                    "CallHbFunc('nImpValTik')" )
   oFr:AddVariable(     "Tickets",             "Total vales acumulados cliente",          "CallHbFunc('nImpValCli')" )
   oFr:AddVariable(     "Tickets",             "Total entregas a cuenta",                 "CallHbFunc('nTotalEntregado')" )
   oFr:AddVariable(     "Tickets",             "Total vales liquidados en compra",        "CallHbFunc('nTotValTikInfo')" )

   oFr:AddVariable(     "Tickets",             "Ubicación del ticket",                    "CallHbFunc( 'oTpvTactil', [ 'cTxtUbicacion()' ] )" )

   oFr:AddVariable(     "Lineas de tickets",   "Total unidades artículo",                       "CallHbFunc('nTotNTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Precio unitario del artículo",                  "CallHbFunc('nTotUTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Precio unitario con descuentos",                "CallHbFunc('nNetLTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Importe descuento línea del factura",           "CallHbFunc('nDtoUTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Total " + cImp() + " línea de factura",         "CallHbFunc('nIvaLTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Total IVMH línea de factura",                   "CallHbFunc('nIvmLTpv')" )
   oFr:AddVariable(     "Lineas de tickets",   "Total línea de factura",                        "CallHbFunc('nTotLTpv')" )

   oFr:AddVariable(     "Lineas de comandas",  "Total unidades en comanda",                     "CallHbFunc( 'oTpvTactil', [ 'nUnidadesLineaComanda()' ] )" )
   oFr:AddVariable(     "Lineas de comandas",  "Total unidades impresas en comanda",            "CallHbFunc( 'oTpvTactil', [ 'nUnidadesImpresasComanda()' ] )" )
   oFr:AddVariable(     "Lineas de comandas",  "Detalle del artículo en comanda",               "CallHbFunc( 'oTpvTactil', [ 'cDescripcionComanda()' ] )" )

   oFr:AddVariable(     "Lineas de albaranes", "Detalle del artículo del albarán",              "CallHbFunc('cTpvDesAlbCli')"  )
   oFr:AddVariable(     "Lineas de albaranes", "Total unidades artículo del albarán",           "CallHbFunc('nTpvTotNAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes", "Precio unitario del artículo del albarán",      "CallHbFunc('nTpvTotUAlbCli')" )
   oFr:AddVariable(     "Lineas de albaranes", "Total línea de albarán",                        "CallHbFunc('nTpvTotLAlbCli')" )

   oFr:AddVariable(     "Lineas de facturas",  "Detalle del artículo de la factura",            "CallHbFunc('cTpvDesFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",  "Total unidades artículo de la factura",         "CallHbFunc('nTpvTotNFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",  "Precio unitario del artículo de la factura",    "CallHbFunc('nTpvTotUFacCli')" )
   oFr:AddVariable(     "Lineas de facturas",  "Total línea de factura.",                       "CallHbFunc('nTpvTotLFacCli')" )

Return nil



Function DesignReportTikCli( oFr, dbfDoc )

   local lCloseFiles := !lOpenFiles

   if lOpenFiles .OR. OpenFiles()





      DataReport( oFr )





      if !Empty( ( dbfDoc )->mReport )

         oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")

      else

         oFr:SetProperty(     "Report",            "ScriptLanguage", "PascalScript" )







         oFr:SetProperty(     "Report.ScriptText", "Text", +  "procedure DetalleOnMasterDetail(Sender: TfrxComponent);"   + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "CallHbFunc('nTotalizer');"                                 + Chr(13) + Chr(10) +  "end;"                                                      + Chr(13) + Chr(10) +  "begin"                                                     + Chr(13) + Chr(10) +  "end." )

         oFr:AddPage(         "MainPage" )

         oFr:AddBand(         "CabeceraDocumento", "MainPage", 2 )
         oFr:SetProperty(     "CabeceraDocumento", "Top", 0 )
         oFr:SetProperty(     "CabeceraDocumento", "Height", 200 )

         oFr:AddBand(         "CabeceraColumnas",  "MainPage", 6 )
         oFr:SetProperty(     "CabeceraColumnas",  "Top", 200 )
         oFr:SetProperty(     "CabeceraColumnas",  "Height", 0 )
         oFr:SetProperty(     "CabeceraColumnas",  "StartNewPage", .T. )
         oFr:SetObjProperty(  "CabeceraColumnas",  "DataSet", "Tickets" )

         oFr:AddBand(         "DetalleColumnas",   "MainPage", 7  )
         oFr:SetProperty(     "DetalleColumnas",   "Top", 230 )
         oFr:SetProperty(     "DetalleColumnas",   "Height", 28 )
         oFr:SetObjProperty(  "DetalleColumnas",   "DataSet", "Lineas de Tickets" )
         oFr:SetProperty(     "DetalleColumnas",   "OnMasterDetail", "DetalleOnMasterDetail" )

         oFr:AddBand(         "PieDocumento",      "MainPage", 3 )
         oFr:SetProperty(     "PieDocumento",      "Top", 930 )
         oFr:SetProperty(     "PieDocumento",      "Height", 110 )

      end





      VariableReport( oFr )





      oFr:DesignReport()





      oFr:DestroyFr()





      if lCloseFiles
         CloseFiles()
      end

   else

      return .F.

   end

Return .T.



Function PrintReportTikCli( nDevice, nCopies, cPrinter, lComanda, lAnulacion )

   local oFr

   IIF( nDevice == nil, nDevice := 2, ) ;
   IIF( nCopies == nil, nCopies := 1, ) ;
   IIF( cPrinter == nil, cPrinter := PrnGetName(), ) ;
   IIF( lComanda == nil, lComanda := .F., ) ;
   IIF( lAnulacion == nil, lAnulacion := .F., ) ;

   SysRefresh()

   oFr                  := frReportManager():New()

   oFr:LoadLangRes(     "Spanish.Xml" )

   oFr:SetIcon( 1 )

   oFr:SetTitle(        "Diseñador de documentos" )





   oFr:SetEventHandler( "Designer", "OnSaveReport", {|| oFr:SaveToBlob( ( dbfDoc )->( Select() ), "mReport" ) } )





   DataReport( oFr, lComanda, lAnulacion )





   if !Empty( ( dbfDoc )->mReport )

      oFr:LoadFromBlob( ( dbfDoc )->( Select() ), "mReport")





      VariableReport( oFr )





      oFr:PrepareReport()





      do case
         case nDevice == 2

            oFr:ShowPreparedReport()

         case nDevice == 1

            oFr:PrintOptions:SetPrinter( cPrinter )
            oFr:PrintOptions:SetCopies( nCopies )
            oFr:PrintOptions:SetShowDialog( .F. )
            oFr:Print()

         case nDevice == 3

            oFr:SetProperty(  "PDFExport", "EmbeddedFonts",    .T. )
            oFr:SetProperty(  "PDFExport", "PrintOptimized",   .T. )
            oFr:SetProperty(  "PDFExport", "Outline",          .T. )
            oFr:DoExport(     "PDFExport" )

      end

   end





   oFr:DestroyFr()

Return .T.








function cTpvDesAlbCli()
return cDesAlbCli( dbfAlbCliL )



function nTpvTotNAlbCli()
return nTotNAlbCli( dbfAlbCliL )



function nTpvTotUAlbCli()
return nTotUAlbCli( dbfAlbCliL )



function nTpvTotLAlbCli()
return nTotLAlbCli( dbfAlbCliL )



function cTpvDesFacCli()
return cDesFacCli( dbfFacCliL )



function nTpvTotNFacCli()
return nTotNFacCli( dbfFacCliL )



function nTpvTotUFacCli()
return nTotUFacCli( dbfFacCliL )



function nTpvTotLFacCli()
return nTotLFacCli( dbfFacCliL )



function cTpvDesCmd( cTikL )

   local cReturn     := ""

   IIF( cTikL == nil, cTikL := dbfTikL, ) ;

   if !Empty( ( cTikL )->cNomCmd )
      cReturn        := Rtrim( ( cTikL )->cNomCmd )
   else
      cReturn        := Rtrim( ( cTikL )->cNomTil )
   end

RETURN ( cReturn )



Static Function nNumeroFamilias()

   local nRegistrosMostrar := ( dbfFamilia )->( ordKeyCount() )
   nRegistrosMostrar       -= ( dbfFamilia )->( ordKeyNo() )
   nRegistrosMostrar++



   if len( aRecFam ) > 1
      nRegistrosMostrar++
   end



   if nRegistrosMostrar > nNumBtnFam
      nRegistrosMostrar    := nNumBtnFam - 1
   end

Return ( nRegistrosMostrar )



Static Function lMostrarFamilias()

   local lMostrarFamilias  := .F.
   local nRegistrosMostrar := 0

   if ( dbfFamilia )->( ordKeyNo() ) <> 0
      lMostrarFamilias     := ( ( dbfFamilia )->( ordKeyCount() ) - ( dbfFamilia )->( ordKeyNo() ) > 0 )
   end

Return ( lMostrarFamilias )



Static Function AddFreeProduct()

   local oDlg
   local oFnt              := TFont():New( "Segoe UI", 12, 32, .F., .T. )
   local oGetDescripcion
   local cGetDescripcion   := Space( 100 )
   local oGetUnidades
   local nGetUnidades      := 1
   local oGetImporte
   local nGetImporte       := 0
   local oGetImpresora
   local cGetImpresora     := Space( 254 )

   oDlg = TDialog():New(,,,,, "Libre",, .F.,,,,,, .F.,, oFnt,,,, .F., )




      oGetDescripcion := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetDescripcion, cGetDescripcion:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButtonBmp():ReDefine( 110, {||( VirtualKey( .F., oGetDescripcion ) )}, oDlg,,, .F.,,,, .F., "Keyboard2_32",, )





      oGetUnidades := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nGetUnidades, nGetUnidades:= u ) }, oDlg,, cPicUnd,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButtonBmp():ReDefine( 130, {||( Calculadora( 0, oGetUnidades ) )}, oDlg,,, .F.,,,, .F., "Calculator_32",, )





      oGetImporte := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, nGetImporte, nGetImporte:= u ) }, oDlg,, cPorDiv,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButtonBmp():ReDefine( 150, {||( Calculadora( 0, oGetImporte ) )}, oDlg,,, .F.,,,, .F., "Calculator_32",, )




      oGetImpresora := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, cGetImpresora, cGetImpresora:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButtonBmp():ReDefine( 170, {||( BrwTipoImpresora( oGetImpresora, .T. ) )}, oDlg,,, .F.,,,, .F., "Lupa_32",, )




      TButton():ReDefine( 1, {||( lValidAddFreeProduct( oGetDescripcion, oDlg ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if ( oDlg:nResult == 1 )

      ( dbfTmpL )->( dbAppend() )
      if !( dbfTmpL )->( NetErr() )
         ( dbfTmpL )->cNomTil    := cGetDescripcion
         ( dbfTmpL )->nUntTil    := nGetUnidades
         ( dbfTmpL )->nPvpTil    := nGetImporte
         ( dbfTmpL )->nIvaTil    := nIva( dbfIva, cDefIva() )
         ( dbfTmpL )->cAlmLin    := oUser():cAlmacen()
         ( dbfTmpL )->cImpCom1   := cGetImpresora
      end

      if !Empty( oBrwDet )
         oBrwDet:Refresh()
      end

   end

   oFnt:End()

Return ( oDlg:nResult == 1 )



Static Function lValidAddFreeProduct( oGetDescripcion, oDlg )

   if Empty( oGetDescripcion:VarGet() )
      MsgStop( "Descripción no puede estar vacia" )
      Return .F.
   end

   oDlg:End( 1 )

Return .T.



Static Function RenombrarUbicacion( aTmp, aGet )

   local cNombreUbicacion  := VirtualKey( .F., aTmp[ 51 ], "Asignar alias" )

   if !Empty( cNombreUbicacion )

      aTmp[ 51 ]   := cNombreUbicacion

      cTitleDialog( aTmp )

   end

Return .T.



Static Function EdtEnt( aTmp, aGet, dbfTmpE, oBrw, bWhen, bValid, nMode, aTmpTik )

   local oDlg
   local oBmpDiv
   local cPorDiv

   IIF( aTmpTik == nil, aTmpTik := dbScatter( dbfTikT ), ) ;

   do case
      case nMode == 1

         aTmp[ ( dbfTmpE )->( FieldPos( "cTurRec" ) ) ]   := cCurSesion()
         aTmp[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ]   := oUser():cCaja()
         aTmp[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ]   := aTmpTik[ 11 ]
         aTmp[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ]   := aTmpTik[ 32 ]
         aTmp[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ]   := aTmpTik[ 24 ]
         aTmp[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ]   := aTmpTik[ 21 ]

      case nMode == 2

         if aTmp[ ( dbfTmpE )->( FieldPos( "lCloPgo" ) ) ] .AND. !oUser():lAdministrador()
            msgStop( "Solo pueden modificar las entregas cerradas los administradores." )
            return .F.
         end

   end

   cPorDiv           := cPorDiv(aTmp[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ], dbfDiv )

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "entrega a cuenta", "ENTREGAS",, .F.,,,,,, .F.,,,,,, .F., )





      aGet[ ( dbfTmpE )->( FieldPos( "nImporte" ) ) ] := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "nImporte" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "nImporte" ) ) ]:= u ) }, oDlg,, ( cPorDiv ),,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )









      aGet[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ] := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ]:= u ) }, oDlg,, "@!", {||    ( cDivOut( aGet[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ], oBmpDiv, aGet[ ( dbfTmpE )->( FieldPos( "nVdvPgo" ) ) ], nil, nil, @cPorDiv, nil, nil, nil, nil, dbfDiv, oBandera ) )},,,,,, .F., {||     ( .F. )},, .F., .F.,,,,, {|Self|BrwDiv( aGet[ ( dbfTmpE )->( FieldPos( "cDivPgo" ) ) ], oBmpDiv, aGet[ ( dbfTmpE )->( FieldPos( "nVdvPgo" ) ) ], dbfDiv, oBandera )}, nil, "LUPA",, )




      oBmpDiv := TBitmap():ReDefine( 151, "BAN_EURO",, oDlg,,, .F., .F.,,, .F.,,, .F. )










      aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ] := TGetHlp():ReDefine( 180, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ]:= u ) }, oDlg,, "@!", {||    ( cFPago( aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ], dbfFPago, aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ]:oHelpText ) )}, "N/W*",,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwFPago( aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ], aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ]:oHelpText ) )}, nil, "LUPA",, 181 )







      aGet[ ( dbfTmpE )->( FieldPos( "dEntrega" ) ) ] := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "dEntrega" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "dEntrega" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .T.,,,,, {|Self|aGet[ ( dbfTmpE )->( FieldPos( "dEntrega" ) ) ]:cText( Calendario( aTmp[ ( dbfTmpE )->( FieldPos( "dEntrega" ) ) ] ) )}, nil, "LUPA",, )








      aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ] := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ]:= u ) }, oDlg,,, {||    ( cClient( aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ], dbfClient, aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ]:oHelpText ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwClient( aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ], aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ]:oHelpText ) )}, nil, "LUPA",, 111 )








      aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ] := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ]:= u ) }, oDlg,,, {||    ( cAgentes( aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ], dbfAgent, aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ]:oHelpText ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwAgentes( aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ], aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ]:oHelpText ) )}, nil, "LUPA",, 121 )




      aGet[ ( dbfTmpE )->( FieldPos( "cDescrip" ) ) ] := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cDescrip" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cDescrip" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      aGet[ ( dbfTmpE )->( FieldPos( "cPgdoPor" ) ) ] := TGetHlp():ReDefine( 140, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cPgdoPor" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cPgdoPor" ) ) ]:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )








      aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ] := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, aTmp[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ], aTmp[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ]:= u ) }, oDlg,,, {||    cCajas( aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ], dbfCajT, aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ]:oHelpText )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwCajas( aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ], aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ]:oHelpText ) )}, nil, "LUPA",, 171 )





      TButton():ReDefine( 1, {||( ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpE ) )}, oDlg,,, .F., {||     ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:End() )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpE ) } )
   end

   oDlg:bStart    := {|| StartRec( aGet, aTmp ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBandera:End()
   oBmpDiv:End()

RETURN ( oDlg:nResult == 1 )



Static Function ValidEdtEnt( aTmp, aGet, oBrw, oDlg, nMode, dbfTmpE )

   if nMode == 1
      aTmp[ ( dbfTmpE )->( FieldPos( "nNumRec" ) ) ]   := ( dbfTmpE )->( RecNo() ) + 1
   end

   WinGather( aTmp, aGet, dbfTmpE, oBrw, nMode )

   oDlg:End( 1 )

Return .T.



static function StartRec( aGet, aTmp )

   aGet[ ( dbfTmpE )->( FieldPos( "nImporte" ) ) ]:SetFocus()

   aGet[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( dbfTmpE )->( FieldPos( "cCodPgo" ) ) ], dbfFPago, "cDesPago" ) )
   aGet[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( dbfTmpE )->( FieldPos( "cCodCli" ) ) ], dbfClient, "Titulo" ) )
   aGet[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ]:oHelpText:cText( RetFld( aTmp[ ( dbfTmpE )->( FieldPos( "cCodCaj" ) ) ], dbfCajT, "cNomCaj" ) )
   aGet[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ]:oHelpText:cText( cNbrAgent( aTmp[ ( dbfTmpE )->( FieldPos( "cCodAge" ) ) ], dbfAgent ) )

return .T.



Static Function CrearDescuento( dbfTmpL, oBrwDet )

   local oDlg
   local nRec
   local oBtnUnaLinea
   local oBtnTodasLineas
   local oGetPorcentaje
   local nGetPorcentaje := 10
   local oFnt           := TFont():New( "Segoe UI", 14, 46, .F., .T. )

   oDlg = TDialog():New(,,,,, "DTO_TCT",, .F.,,,,,, .F.,,,,,, .F., )

      oBtnUnaLinea      := TBtnBmp():ReDefine( 100, "Row_32",,,,,{|| oBtnUnaLinea:GoDown(), oBtnTodasLineas:GoUp() }, oDlg, .F., , .F. )

      oBtnTodasLineas   := TBtnBmp():ReDefine( 110, "Row_All_32",,,,,{|| oBtnUnaLinea:GoUp(), oBtnTodasLineas:GoDown() }, oDlg, .F., , .F. )




      TButton():ReDefine( 200, {||( oGetPorcentaje:cText( 10 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 210, {||( oGetPorcentaje:cText( 20 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 220, {||( oGetPorcentaje:cText( 30 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 230, {||( oGetPorcentaje:cText( 40 ) )}, oDlg,,, .F.,,,, .F. )




      TButton():ReDefine( 240, {||( oGetPorcentaje:cText( 50 ) )}, oDlg,,, .F.,,,, .F. )





      TButtonBmp():ReDefine( 300, {||( oGetPorcentaje++ )}, oDlg,,, .F.,,,, .F., "Navigate_Plus_32",, )





      TButtonBmp():ReDefine( 310, {||( oGetPorcentaje-- )}, oDlg,,, .F.,,,, .F., "Navigate_Minus_32",, )










      oGetPorcentaje := TGetHlp():ReDefine( 320, { | u | If( PCount()==0, nGetPorcentaje, nGetPorcentaje:= u ) }, oDlg,, "@E 999.99",,,, oFnt,,, .F.,,, .F., .T.,,, {||      0}, {||      100},, nil,,, )
   oDlg:bStart    := {|| oBtnUnaLinea:GoDown() }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if oBtnUnaLinea:lPressed

         ( dbfTmpL )->nDtoLin := nGetPorcentaje

      else

         nRec     := ( dbfTmpL )->( Recno() )

         ( dbfTmpL )->( dbGoTop() )
         while !( dbfTmpL )->( Eof() )
            ( dbfTmpL )->nDtoLin := nGetPorcentaje
            ( dbfTmpL )->( dbSkip() )
         end

         ( dbfTmpL )->( dbGoTo( nRec ) )

      end

   end

   oFnt:end()

   if !Empty( oBrwDet )
      oBrwDet:Refresh()
   end

Return ( nil )



Static Function CrearInvitacion( dbfTmpL, oBrwDet )

   local oDlg
   local nRec
   local oBtnUnaLinea
   local oBtnTodasLineas
   local oBtnCancel
   local oImgInv
   local oLstInv

   oDlg = TDialog():New(,,,,, "INV_TCT",, .F.,,,,,, .F.,,,,,, .F., )

      oBtnTodasLineas   := ApoloBtnBmp():ReDefine( 100, "Row_All_32",,,,,{|| oBtnUnaLinea:GoUp(), oBtnTodasLineas:GoDown() }, oDlg, .F., , .F. )

      oBtnUnaLinea      := ApoloBtnBmp():ReDefine( 110, "Row_32",,,,,{|| oBtnUnaLinea:GoDown(), oBtnTodasLineas:GoUp() }, oDlg, .F., , .F. )

      oImgInv           := TImageList():New( 48, 48 )
      oLstInv           := TListView():Redefine( 120, oDlg )
      oLstInv:nOption   := 0
      oLstInv:bClick    := {| nOpt | EndInvitacion( nOpt, oLstInv, oBtnUnaLinea, dbfTmpL, oInvitacion:oDbf:cAlias, oDlg ) }





      oBtnCancel := TButtonBmp():ReDefine( 550, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F., "Delete2_48",, )

      oDlg:bStart       := {|| oBtnTodasLineas:GoDown() }



   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,, {|Self|( InitInvitaciones( oDlg, oImgInv, oLstInv ) )}, oDlg:bRClicked,,, )

   if !Empty( oBrwDet )
      oBrwDet:Refresh()
   end

Return ( nil )



Static Function EndInvitacion( nOpt, oLstInv, oBtnUnaLinea, dbfTmpL, dbfInv, oDlg )

   local nRec

   if nOpt == 0

      msgStop( "Debe seleccionar una opción válida." )

   else

      if ( dbfInv )->( OrdKeyGoTo( nOpt ) )

         if oBtnUnaLinea:lPressed

            if ( dbfInv )->lPreInv
               ( dbfTmpL )->nPvpTil    := ( dbfInv )->nPreInv
            else
               ( dbfTmpL )->nPvpTil    := 0
            end

            ( dbfTmpL )->nPcmTil       := 0
            ( dbfTmpL )->cCodInv       := ( dbfInv )->cCodInv

         else

            nRec     := ( dbfTmpL )->( Recno() )

            ( dbfTmpL )->( dbGoTop() )
            while !( dbfTmpL )->( Eof() )

               if ( dbfInv )->lPreInv
                  ( dbfTmpL )->nPvpTil := ( dbfInv )->nPreInv
               else
                  ( dbfTmpL )->nPvpTil := 0
               end

               ( dbfTmpL )->nPcmTil    := 0
               ( dbfTmpL )->cCodInv    := ( dbfInv )->cCodInv

               ( dbfTmpL )->( dbSkip() )

            end

            ( dbfTmpL )->( dbGoTo( nRec ) )

         end

      end

      oDlg:End( 1 )

   end

return ( .T. )



Function InitInvitaciones( oDlg, oImgInv, oLstInv )

   local nInvi := 0

   if !Empty( oImgInv ) .AND. !Empty( oLstInv ) .AND. !Empty( oInvitacion )

      oInvitacion:oDbf:GoTop()

      while !oInvitacion:oDbf:Eof()

         oLstInv:SetImageList( oImgInv )

         oImgInv:AddMasked( TBitmap():Define( oInvitacion:cBigResource() ), ( 255 + ( 0 * 256 ) + ( 255 * 65536 ) ) )

         oLstInv:InsertItem( nInvi, Capitalize( oInvitacion:oDbf:cNomInv ) )

         oInvitacion:oDbf:Skip()

         nInvi++

      end

   end

RETURN ( nil )



Static Function GetPesoBalanza( aGet, oBtn )

   local nGetFocus   := GetFocus()

   if !Empty( oBalanza )
      aGet[ 8 ]:cText( oBalanza:nPeso() )
   end

   if !Empty( nGetFocus )
      SendMessage( nGetFocus, 1024+1024, 0, 0 )
   end

   oBtn:Click()

Return nil



function lCombinado( cCodArt, aGetArt, aTmpArt, aTmp )

   local nRecArt
   local nRecFam

   lTwoLin              := !lTwoLin

   if lTwoLin

      nRecArt           := ( dbfArticulo )->( Recno() )
      nRecFam           := ( dbfFamilia )->( Recno() )

      if dbSeekInOrd( cCodArtAnt, "Codigo", dbfArticulo )

         if dbSeekInOrd( ( dbfArticulo )->Familia, "cCodFam", dbfFamilia ) .AND. !Empty( ( dbfFamilia )->cFamCmb )

            cCodFamAnt  := ( dbfArticulo )->Familia

            loaPrd( ( dbfFamilia )->cFamCmb, .T., .T., aGetArt, aTmpArt, aTmp )

         end

      end

      ( dbfArticulo )->( dbGoTo( nRecArt ) )
      ( dbfFamilia )->( dbGoTo( nRecFam ) )

   end

return .T.



Function SynTikCli( cPath )

   local oBlock
   local oError
   local aTotTik
   local aTotAlb
   local aTotFac

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPath + "TIKET.DBF" ), ( cCheckArea( "TIKET", @dbfTikT ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPath + "TIKET.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "TIKEL.DBF" ), ( cCheckArea( "TIKEL", @dbfTikL ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPath + "TIKEL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "TIKEP.DBF" ), ( cCheckArea( "TIKEP", @dbfTikP ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPath + "TIKEP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPath + "TIKES.DBF" ), ( cCheckArea( "TIKES", @dbfTikS ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPath + "TIKES.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FAMILIAS.DBF" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatGrp() + "FAMILIAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TBLCNV.DBF" ), ( cCheckArea( "TBLCNV", @dbfTblCnv ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TBLCNV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIT.DBF" ), ( cCheckArea( "FACCLIT", @dbfFacCliT ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIL.DBF" ), ( cCheckArea( "FACCLIL", @dbfFacCliL ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "FACCLIP.DBF" ), ( cCheckArea( "FACCLIP", @dbfFacCliP ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "FACCLIP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "AntCliT.DBF" ), ( cCheckArea( "AntCliT", @dbfAntCliT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "AntCliT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIT.DBF" ), ( cCheckArea( "ALBCLIT", @dbfAlbCliT ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "ALBCLIL.DBF" ), ( cCheckArea( "ALBCLIL", @dbfAlbCliL ) ), if(.F. .OR. .T., !.T., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "ALBCLIL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "DIVISAS.DBF" ), ( cCheckArea( "DIVISAS", @dbfDiv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "DIVISAS.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TIVA.DBF" ), ( cCheckArea( "TIVA", @dbfIva ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatDat() + "TIVA.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end





   while !( dbfTikT )->( eof() )

      if Empty( ( dbfTikT )->cNcjTik )
         ( dbfTikT )->cNcjTik := "000"
      end





      do case
         case ( dbfTikT )->cTipTik == "2"

            if dbSeekInOrd( ( dbfTikT )->cNumDoc, "nNumAlb", dbfAlbCliT )

               aTotAlb  := aTotAlbCli( ( dbfAlbCliT )->cSerAlb + Str( ( dbfAlbCliT )->nNumAlb ) + ( dbfAlbCliT )->cSufAlb, dbfAlbCliT, dbfAlbCliL, dbfIva, dbfDiv, ( dbfAlbCliT )->cDivAlb )

               if ( ( dbfTikT )->nTotNet <> aTotAlb[1] .OR. ( dbfTikT )->nTotIva <> aTotAlb[2] .OR. ( dbfTikT )->nTotTik <> aTotAlb[4] )

                  ( dbfTikT )->nTotNet := aTotAlb[1]
                  ( dbfTikT )->nTotIva := aTotAlb[2]
                  ( dbfTikT )->nTotTik := aTotAlb[4]

               end

            end

         case ( dbfTikT )->cTipTik == "3"

            if dbSeekInOrd( ( dbfTikT )->cNumDoc, "NNUMFAC", dbfFacCliT )

               aTotFac  := aTotFacCli( ( dbfFacCliT )->cSerie + Str( ( dbfFacCliT )->nNumFac ) + ( dbfFacCliT )->cSufFac, dbfFacCliT, dbfFacCliL, dbfIva, dbfDiv, dbfFacCliP, dbfAntCliT, ( dbfFacCliT )->cDivFac )

               if ( dbfTikT )->nTotNet <> aTotFac[1] .OR. ( dbfTikT )->nTotIva <> aTotFac[2] .OR. ( dbfTikT )->nTotTik <> aTotFac[4]

                  ( dbfTikT )->nTotNet := aTotFac[1]
                  ( dbfTikT )->nTotIva := aTotFac[2]
                  ( dbfTikT )->nTotTik := aTotFac[4]

               end

            end

         otherwise

            aTotTik     := aTotTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv, , ( dbfTikT )->cDivTik )

            if ( dbfTikT )->nTotNet <> aTotTik[1] .OR. ( dbfTikT )->nTotIva <> aTotTik[2] .OR. ( dbfTikT )->nTotTik <> aTotTik[3]

               ( dbfTikT )->nTotNet    := aTotTik[1]
               ( dbfTikT )->nTotIva    := aTotTik[2]
               ( dbfTikT )->nTotTik    := aTotTik[3]

            end

            aTotTik     := nTotCobTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikP, dbfDiv )
            aTotTik     += nTotValTik( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfDiv )

            if ( dbfTikT )->nCobTik <> aTotTik
               ( dbfTikT )->nCobTik    := aTotTik
            end

      end

      ( dbfTikT )->( dbSkip() )

      SysRefresh()

   end





   while !( dbfTikP )->( eof() )

      if Empty( ( dbfTikP )->cCodCaj )
         ( dbfTikP )->cCodCaj := "000"
      end

      ( dbfTikP )->( dbSkip() )

      SysRefresh()

   end





   while !( dbfTikL )->( eof() )

      if !( dbfTikT )->( dbSeek( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil ) )

         ( dbfTikL )->( dbDelete() )

      else

         if !Empty( ( dbfTikL )->cCbaTil ) .AND. Empty( ( dbfTikL )->cCodFam )
            ( dbfTikL )->cCodFam := RetFamArt( ( dbfTikL )->cCbaTil, dbfArticulo )
         end

         if !Empty( ( dbfTikL )->cCbaTil ) .AND. !Empty( ( dbfTikL )->cCodFam )
            ( dbfTikL )->cGrpFam := cGruFam( ( dbfTikL )->cCodFam, dbfFamilia )
         end

         if Empty( ( dbfTikL )->cLote ) .AND. !Empty( ( dbfTikL )->nLote )
            ( dbfTikL )->cLote   := AllTrim( Str( ( dbfTikL )->nLote ) )
         end

         if Empty( ( dbfTikL )->cAlmLin ) .OR. ( dbfTikL )->cAlmLin <> ( dbfTikT )->cAlmTik
            ( dbfTikL )->cAlmLin := ( dbfTikT )->cAlmTik
         end

         if ( dbfTikL )->cTipTil <> ( dbfTikT )->cTipTik
            ( dbfTikL )->cTipTil := ( dbfTikT )->cTipTik
         end

         if ( dbfTikL )->dFecTik <> ( dbfTikT )->dFecTik
            ( dbfTikL )->dFecTik := ( dbfTikT )->dFecTik
         end

      end

      ( dbfTikL )->( dbSkip() )

      SysRefresh()

   end



   while !( dbfTikS )->( eof() )

      if !( dbfTikT )->( dbSeek( ( dbfTikS )->cSerTik + ( dbfTikS )->cNumTik + ( dbfTikS )->cSufTik ) )

         ( dbfTikS )->( dbDelete() )

      else

         if ( dbfTikS )->dFecTik <> ( dbfTikT )->dFecTik
            ( dbfTikS )->dFecTik := ( dbfTikT )->dFecTik
         end

      end

      ( dbfTikS )->( dbSkip() )

      SysRefresh()

   end

   RECOVER USING oError

      msgStop( "Imposible sincronizar tickets de clientes" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   if !Empty( dbfTikT ) .AND. ( dbfTikT )->( Used() )
      ( dbfTikT )->( dbCloseArea() )
   end

   if !Empty( dbfTikL ) .AND. ( dbfTikL )->( Used() )
      ( dbfTikL )->( dbCloseArea() )
   end

   if !Empty( dbfTikP ) .AND. ( dbfTikP )->( Used() )
      ( dbfTikP )->( dbCloseArea() )
   end

   if !Empty( dbfTikS ) .AND. ( dbfTikS )->( Used() )
      ( dbfTikS )->( dbCloseArea() )
   end

   if !Empty( dbfFamilia ) .AND. ( dbfFamilia )->( Used() )
      ( dbfFamilia )->( dbCloseArea() )
   end

   if !Empty( dbfArticulo ) .AND. ( dbfArticulo )->( Used() )
      ( dbfArticulo )->( dbCloseArea() )
   end

   if !Empty( dbfTblCnv ) .AND. ( dbfTblCnv )->( Used() )
      ( dbfTblCnv )->( dbCloseArea() )
   end

   if !Empty( dbfDiv ) .AND. ( dbfDiv )->( Used() )
      ( dbfDiv )->( dbCloseArea() )
   end

   if !Empty( dbfFacCliT ) .AND. ( dbfFacCliT )->( Used() )
      ( dbfFacCliT )->( dbCloseArea() )
   end

   if !Empty( dbfFacCliL ) .AND. ( dbfFacCliL )->( Used() )
      ( dbfFacCliL )->( dbCloseArea() )
   end

   if !Empty( dbfFacCliP ) .AND. ( dbfFacCliP )->( Used() )
      ( dbfFacCliP )->( dbCloseArea() )
   end

   if !Empty( dbfAntCliT ) .AND. ( dbfAntCliT )->( Used() )
      ( dbfAntCliT )->( dbCloseArea() )
   end

   if !Empty( dbfIva ) .AND. ( dbfIva )->( Used() )
      ( dbfIva )->( dbCloseArea() )
   end

   if !Empty( dbfAlbCliT ) .AND. ( dbfAlbCliT )->( Used() )
      ( dbfAlbCliT )->( dbCloseArea() )
   end

   if !Empty( dbfAlbCliL ) .AND. ( dbfAlbCliL )->( Used() )
      ( dbfAlbCliL )->( dbCloseArea() )
   end

return nil



Function lStartAvisoPedidos()

   if !Empty( oBtnPedidos )

      lStopAvisoPedidos()
      oTimerBtn               := TTimer():New( 900, {|| lSelectedButton() }, )
      oTimerBtn:Activate()

   end

return .T.



Function lStopAvisoPedidos()

   if !Empty( oTimerBtn )

      oTimerBtn:End()
      oTimerBtn               := nil

   endif

return .T.



Function lSelectedButton()

   if !Empty( oBtnPedidos )
      oBtnPedidos:lSelected   := !oBtnPedidos:lSelected
      oBtnPedidos:Refresh()
   end

return .T.



Function ProcesaPedidosWeb( aTmp )

   local cNumeroPedido

   if ( dbfTmpL )->( ordKeyCount() ) <> 0
      msgstop( "Existe una venta en curso, concluya la venta antes de continuar." )
      return nil
   end

   cNumeroPedido  := MuestraPedidosWeb( oBtnPedidos )

   if !Empty( cNumeroPedido )



      if ( dbfPedCLiT )->( dbSeek( cNumeroPedido ) )

         aTmp[ 11 ]  := ( dbfPedCliT )->cCodCli
         aTmp[ 12 ]  := ( dbfPedCliT )->nTarifa
         aTmp[ 13 ]  := ( dbfPedCliT )->cNomCli
         aTmp[ 14 ]  := ( dbfPedCliT )->cDirCli
         aTmp[ 15 ]  := ( dbfPedCliT )->cPobCli
         aTmp[ 16 ]  := ( dbfPedCliT )->cPrvCli
         aTmp[ 18 ]  := ( dbfPedCliT )->cPosCli
         aTmp[ 19 ]  := ( dbfPedCliT )->cDniCli

      end



      if ( dbfPedCLiL )->( dbSeek( cNumeroPedido ) )

         while ( dbfPedCLiL )->cSerPed + Str( ( dbfPedCLiL )->nNumPed ) + ( dbfPedCLiL )->cSufPed == cNumeroPedido .AND. !( dbfPedCLiL )->( eof() )

            ( dbfTmpL )->( dbAppend() )

            ( dbfTmpL )->cCbaTil    := ( dbfPedCliL )->cRef
            ( dbfTmpL )->cNomTil    := ( dbfPedCliL )->cDetalle
            ( dbfTmpL )->nPvpTil    := ( dbfPedCliL )->nPreDiv
            ( dbfTmpL )->nUntTil    := ( dbfPedCliL )->nCanPed
            ( dbfTmpL )->nUndKit    := ( dbfPedCliL )->nUndKit
            ( dbfTmpL )->nIvaTil    := ( dbfPedCliL )->nIva
            ( dbfTmpL )->cFamTil    := ( dbfPedCliL )->cCodFam
            ( dbfTmpL )->nDtoLin    := ( dbfPedCliL )->nDto
            ( dbfTmpL )->nDtoDiv    := ( dbfPedCliL )->nDtoDiv
            ( dbfTmpL )->cCodPr1    := ( dbfPedCliL )->cCodPr1
            ( dbfTmpL )->cCodPr2    := ( dbfPedCliL )->cCodPr2
            ( dbfTmpL )->cValPr1    := ( dbfPedCliL )->cValPr1
            ( dbfTmpL )->cValPr2    := ( dbfPedCliL )->cValPr2
            ( dbfTmpL )->cAlmLin    := ( dbfPedCliL )->cAlmLin
            ( dbfTmpL )->nValImp    := ( dbfPedCliL )->nValImp
            ( dbfTmpL )->cCodImp    := ( dbfPedCliL )->cCodImp
            ( dbfTmpL )->nNumLin    := ( dbfPedCliL )->nNumLin
            ( dbfTmpL )->lKitArt    := ( dbfPedCliL )->lKitArt
            ( dbfTmpL )->lKitChl    := ( dbfPedCliL )->lKitChl
            ( dbfTmpL )->cCodFam    := ( dbfPedCliL )->cCodFam
            ( dbfTmpL )->cGrpFam    := ( dbfPedCliL )->cGrpFam
            ( dbfTmpL )->nLote      := ( dbfPedCliL )->nLote
            ( dbfTmpL )->nNumMed    := ( dbfPedCliL )->nNumMed
            ( dbfTmpL )->nMedUno    := ( dbfPedCliL )->nMedUno
            ( dbfTmpL )->nMedDos    := ( dbfPedCliL )->nMedDos
            ( dbfTmpL )->nMedTre    := ( dbfPedCliL )->nMedTre

            ( dbfTmpL )->cImpCom1   := Retfld( ( dbfPedCliL )->cRef, dbfArticulo, "cTipImp1" )
            ( dbfTmpL )->cImpCom2   := Retfld( ( dbfPedCliL )->cRef, dbfArticulo, "cTipImp2" )

            ( dbfPedCLiL )->( dbSkip() )

         end

      end

      oBrwDet:Refresh()

      lRecTotal( aTmp )

   end

Return nil



Function ComentariosTPV( aGet, aTmp, dbfTmpL, cDefCom )

   local oError
   local oBlock
   local oGetComentario
   local cGetComentario
   local oCbxOrd
   local cNumPed
   local obrwComentarios
   local obrwLineasComentarios
   local oDlgComentarios
   local dbfComentariosT
   local dbfComentariosL
   local oFntDlg

   if ( dbfTmpL )->( ordKeyCount() ) == 0
      MsgStop( "No puede añadir un comentario." )
      return .F.
   end

   oFntDlg              := TFont():New( "Segoe UI", 12, 32, .F., .T.,  )

   cGetComentario       := ( dbfTmpL )->cComent

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "COMENTARIOST.DBF" ), ( cCheckArea( "COMENT", @dbfComentariosT ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "COMENTARIOST.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfComentariosT )->( OrdSetFocus( "cCodigo" ) )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "COMENTARIOSL.DBF" ), ( cCheckArea( "COMENL", @dbfComentariosL ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "COMENTARIOSL.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end
      ( dbfComentariosL )->( OrdSetFocus( "cCodDes" ) )

      oDlgComentarios = TDialog():New(,,,,, "COMENTARIOS_TPV",, .F.,,,,,, .F.,,,,,, .F., )




      oGetComentario := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, cGetComentario, cGetComentario:= u ) }, oDlgComentarios,,,,,, oFntDlg,,, .F.,,, .F., .F.,,,,,, nil,,, )





      TButtonBmp():ReDefine( 160, {||( VirtualKey( .F., oGetComentario ) )}, oDlgComentarios,,, .F.,,,, .F., "Keyboard2_32",, )





      TButtonBmp():ReDefine( 170, {||( obrwComentarios:Select( 0 ), oBrwComentarios:GoUp(), obrwComentarios:Select( 1 ) )}, oDlgComentarios,,, .F.,,,, .F., "Up32",, )





      TButtonBmp():ReDefine( 171, {||( obrwComentarios:Select( 0 ), oBrwComentarios:GoDown(), obrwComentarios:Select( 1 ) )}, oDlgComentarios,,, .F.,,,, .F., "Down32",, )





      TButtonBmp():ReDefine( 180, {||( oBrwLineasComentarios:Select( 0 ), oBrwLineasComentarios:GoUp(), oBrwLineasComentarios:Select( 1 ) )}, oDlgComentarios,,, .F.,,,, .F., "arrow_up_blue",, )





      TButtonBmp():ReDefine( 181, {||(oBrwLineasComentarios:Select( 0 ), oBrwLineasComentarios:GoDown(), oBrwLineasComentarios:Select( 1 ) )}, oDlgComentarios,,, .F.,,,, .F., "arrow_down_blue",, )




      TButtonBmp():ReDefine( 1, {||( EndComentario( oDlgComentarios, dbfTmpL, oGetComentario ) )}, oDlgComentarios,,, .F.,,,, .F.,,, )




      TButtonBmp():ReDefine( 2, {||( oDlgComentarios:End() )}, oDlgComentarios,,, .F.,,,, .F.,,, )

      oBrwComentarios                  := IXBrowse():New( oDlgComentarios )

      obrwComentarios:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      obrwComentarios:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      obrwComentarios:cAlias           := dbfComentariosT
      obrwComentarios:nMarqueeStyle    := 6
      obrwComentarios:cName            := "Comentarios de artículos"
      obrwComentarios:nRowHeight       := 40
      oBrwComentarios:lHeader          := .F.
      oBrwComentarios:lHScroll         := .F.

      obrwComentarios:CreateFromResource( 100 )

      obrwComentarios:bChange         := {|| ChangeComentarios( dbfComentariosT, dbfComentariosL, oBrwLineasComentarios ) }

      with object ( oBrwComentarios:AddCol() )
         :cSortOrder       := "cCodigo"
         :bEditValue       := {|| ( dbfComentariosT )->cDescri }
      end

      oBrwLineasComentarios                  := IXBrowse():New( oDlgComentarios )

      oBrwLineasComentarios:bClrSel          := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLineasComentarios:bClrSelFocus     := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwLineasComentarios:cAlias           := dbfComentariosL
      oBrwLineasComentarios:nMarqueeStyle    := 6
      oBrwLineasComentarios:cName            := "Lineas comentarios de artículos"
      oBrwLineasComentarios:nRowHeight       := 40
      oBrwLineasComentarios:lHeader          := .F.
      oBrwLineasComentarios:lHScroll         := .F.

      oBrwLineasComentarios:CreateFromResource( 110 )

      with object ( oBrwLineasComentarios:AddCol() )
         :bEditValue          := {|| ( dbfComentariosL )->cDescri }
      end

      oBrwLineasComentarios:bLClicked := {|| ChangeLineasComentarios( oGetComentario, dbfComentariosL ) }

      oDlgComentarios:bStart          := {|| SeleccionarDefecto( cDefCom, dbfComentariosT, dbfComentariosL, oBrwLineasComentarios, oBrwComentarios ) }

      oDlgComentarios:Activate( oDlgComentarios:bLClicked, oDlgComentarios:bMoved, oDlgComentarios:bPainted, .T.,,,, oDlgComentarios:bRClicked,,, )

   RECOVER USING oError

      msgStop( "Imposible abrir ficheros de comentarios de artículos" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

   ( dbfComentariosT )->( dbCloseArea() )
   ( dbfComentariosL )->( dbCloseArea() )

Return ( nil )



static function SeleccionarDefecto( cDefCom, dbfComentariosT, dbfComentariosL, oBrwLineasComentarios, oBrwComentarios )

   if !Empty( cDefCom )

      if ( dbfComentariosT )->( dbSeek( cDefCom ) )

         oBrwComentarios:Select( 0 )
         oBrwComentarios:Select( 1 )
         ChangeComentarios( dbfComentariosT, dbfComentariosL, oBrwLineasComentarios )

      end

   end

return .T.



static function cTextoOfficeBar( aTmp )

   local uValor

   if !Empty( oBtnCliente )

      uValor         := AllTrim( RetFld( aTmp[ 11 ], dbfClient, "Titulo" ) )

      oBtnCliente:cCaption( if( !Empty( uValor ), uValor, "..." ) )

   end

   if !Empty( oBtnDireccion )

      uValor         := AllTrim( RetFld( aTmp[ 11 ], dbfClient, "Domicilio" ) )

      oBtnDireccion:cCaption( if( !Empty( uValor ), uValor, "..." ) )

   end

   if !Empty( oBtnTelefono )

      uValor         := AllTrim( RetFld( aTmp[ 11 ], dbfClient, "Telefono" ) ) + Space( 1 ) + AllTrim( RetFld( aTmp[ 11 ], dbfClient, "cMeiInt" ) )

      oBtnTelefono:cCaption( if( !Empty( uValor ), uValor, "..." ) )

   end

Return nil



Static Function lSeleccionaCliente( aTmp )

   local cCliente       := BrwCliTactil( nil, nil, nil, .T. )

   aTmp[ 11  ]    := cCliente

   aTmp[ 13  ]    := RetFld( cCliente, dbfClient, "Titulo" )
   aTmp[ 14  ]    := RetFld( cCliente, dbfClient, "Domicilio" )
   aTmp[ 15  ]    := RetFld( cCliente, dbfClient, "Poblacion" )
   aTmp[ 16  ]    := RetFld( cCliente, dbfClient, "Provincia" )
   aTmp[ 18  ]    := RetFld( cCliente, dbfClient, "CodPostal" )
   aTmp[ 19  ]    := RetFld( cCliente, dbfClient, "Nif" )
   aTmp[ 12  ]    := Max( RetFld( cCliente, dbfClient, "nTarifa" ), 1 )

   cTextoOfficeBar( aTmp )

Return .T.



static function lNumeroComensales( aTmp )

   aTmp[ 52 ]     := nVirtualNumKey( "Users1_32", "Número comensales" )

   lRecTotal( aTmp )

Return .T.



Static Function lCambiaTicket( lSubir, aTmp, aGet, nMode )

   local oError
   local oBlock





   if lSubir

      if ( dbfTikT )->( OrdKeyno() ) == 1
         MsgStop( "Ya estas en el primer registro" )
         return nil
      end

   else

      if ( dbfTikT )->( OrdKeyno() ) == ( dbfTikT )->( OrdKeyCount() )
         MsgStop( "Ya estas en el último registro" )
         return nil
      end

   end




   nSaveMode            := 2





   if GuardaVenta( aTmp, aGet )





      if lSubir
         ( dbfTikT )->( dbSkip( -1 ) )
      else
         ( dbfTikT )->( dbSkip() )
      end





      aScatter( dbfTikT, aTmp )

      BeginTrans( aTmp, aGet, nMode )





      if lTactilMode()
         oSalaVentas:ConfigButton( oBtnTarifa, oBtnRenombrar )
      end





      cTitleDialog( aTmp )





      SetButtonEdtRec( nSaveMode, aTmp )





      lRecTotal( aTmp )





      cOldCodCli        := ""

      if !Empty( aGet[ 11 ] )
         aGet[ 11 ]:SetFocus()
         aGet[ 11 ]:lValid()
      end

   end









Return .T.



Static Function lCambiaSerie( aTmp, lSubir, oGrupoSerie )

   if lSubir
      aTmp[ 1 ]        := cUpSerie( aTmp[ 1 ] )
      oGrupoSerie:cPrompt     := "Serie: " + aTmp[ 1 ]
   else
      aTmp[ 1 ]        := cDwSerie( aTmp[ 1 ] )
      oGrupoSerie:cPrompt     := "Serie: " + aTmp[ 1 ]
   end

Return .T.



Function ImprimirTiketPda()

   local nTikT
   local nNumTik
   local dbfImp
   local oError
   local oBlock
   local lError      := .F.
   local lCloseFiles := .F.
   local lOpen

   CursorWait()

   StopAutoImp()

   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKETIMP.DBF" ), ( cCheckArea( "TIKETIMP", @dbfImp ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
   if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKETIMP.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

   ( dbfImp )->( OrdSetFocus( "CIMPTIK" ) )

   ( dbfImp )->( dbGoTop() )

   if ( dbfImp )->( OrdKeyNo() ) <> 0

      if lOpenFiles
         nTikT          := ( dbfTikT )->( Recno() )
      else
         if OpenFiles()
            lCloseFiles := .T.
         else
            lError      := .T.
         end
      end

      if !lError

         ( dbfImp )->( dbGoTop() )
         while !( dbfImp )->( eof() )

            if ( dbfImp )->lComanda
               ImpresionComanda( ( dbfImp )->cSerTik + ( dbfImp )->cNumTik + ( dbfImp )->cSufTik, dbfImp )
            else
               nNumTik := ( dbfImp )->cSerTik + ( dbfImp )->cNumTik + ( dbfImp )->cSufTik
               if dbSeekInOrd( nNumTik, "CNUMTIK", dbfTikT )
                  ImpTiket( , , , dbfImp )
               end
            end

            SysRefresh()

            ( dbfImp )->( dbSkip() )

            SysRefresh()

         end

      end

      if lCloseFiles
         CloseFiles()
      else
         ( dbfTikT )->( dbGoTo( nTikT ) )
      end

   end

   RECOVER USING oError

      msgStop( "Error al imprimir ticket desde pda" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )





   ( dbfImp )->( dbCloseArea() )

   dbfImp      := nil





   StartAutoImp()

   CursorWE()

Return nil



Function SetAutoImp()

   local nSecondTime

   if Empty( oTimer )

      nSecondTime    := uFieldEmpresa( "nTiempoImp", 0 )

      if nSecondTime <> 0
         oTimer      := TTimer():New( nSecondTime * 1000, {|| ImprimirTiketPda() } )
         oTimer:Activate()
      end

   end

Return nil



Function KillAutoImp()

   if !Empty( oTimer )
      oTimer:End()
   end

   oTimer         := nil

Return( nil )



Function StartAutoImp()

   if !Empty( oTimer )
      oTimer:Activate()
   end

Return( nil )



Function StopAutoImp()

   if !Empty( oTimer )
      oTimer:DeActivate()
   end

Return( nil )



Function pdaTicket( oMenuItem )

   local oBlock
   local oError
   local nLevel

   IIF( oMenuItem == nil, oMenuItem := "01063", ) ;

   if !OpenFiles()
      return nil
   end

   nLevel               := nLevelUsr( oMenuItem )
   if nAnd( nLevel, 1 ) <> 0
      msgStop( "Acceso no permitido." )
      return nil
   end

   if Empty( nZona )
      PdaZona()
   end

   if IsTrue( oSalaVentas:lPuntosVenta )

      while !IsNil( pdaGetSalaVenta() )

         if !Empty( oSalaVentas:cSelectedTiket )
            EdtPda( oSalaVentas:cSelectedTiket, 2 )
         else
            EdtPda( nil, 1 )
         end

      end

   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   CloseFiles()

   RECOVER USING oError

      msgStop( "Imposible abrir tikects" )

   end

   ErrorBlock( oBlock )



   if !Empty( oWnd() )
      oWnd():Show()
   end

Return Nil



Function pdaAbrirTablas()

   local oError
   local oBlock
   local cPcName     := AllTrim( cNombrePC() ) + "Emp" + Alltrim( cCodigoEmpresa() ) + "\"
   local lOpenFile   := .T.

   cPatPc( cPcName )

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      dbUseArea( .T., cDriver(), cPatPc() + "TIKET.Dbf", cCheckArea( "TIKET", @dbfTikT ), .T. )
      ( dbfTikT )->( ordListAdd( cPatPc() + "TIKET.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "TIKEL.Dbf", cCheckArea( "TIKEL", @dbfTikL ), .T. )
      ( dbfTikL )->( ordListAdd( cPatPc() + "TIKEL.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "TIKEP.Dbf", cCheckArea( "TIKEP", @dbfTikP ), .T. )
      ( dbfTikP )->( ordListAdd( cPatPc() + "TIKEP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "NCOUNT.Dbf", cCheckArea( "DBFCOUNT", @dbfCount ), .T. )
      ( dbfCount )->( ordListAdd( cPatPc() + "NCOUNT.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "TIKETIMP.Dbf", cCheckArea( "TIKETIMP", @dbfImp ), .T. )
      ( dbfImp )->( ordListAdd( cPatPc() + "TIKETIMP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "COMENTARIOST.Dbf", cCheckArea( "COMENT", @dbfComentariosT ), .T. )
      ( dbfComentariosT )->( ordListAdd( cPatPc() + "COMENTARIOST.Cdx" ) )

      dbUseArea( .T., cDriver(), cPatPc() + "COMENTARIOSL.Dbf", cCheckArea( "COMENL", @dbfComentariosL ), .T. )
      ( dbfComentariosL )->( ordListAdd( cPatPc() + "COMENTARIOSL.Cdx" ) )
      ( dbfComentariosL )->( OrdSetFocus( "cCodDes" ) )

   RECOVER USING oError

      lOpenFile   := .F.

      pdaCerrarTablas()

      msgStop( "Error de conexión con pc." + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return lOpenFile



Function pdaCerrarTablas()

   IIF( !Empty( dbfTikT         ), ( dbfTikT           )->( dbCloseArea() ), )
   IIF( !Empty( dbfTikL         ), ( dbfTikL           )->( dbCloseArea() ), )
   IIF( !Empty( dbfTikP         ), ( dbfTikP           )->( dbCloseArea() ), )
   IIF( !Empty( dbfDiv          ), ( dbfDiv            )->( dbCloseArea() ), )
   IIF( !Empty( dbfKit          ), ( dbfKit            )->( dbCloseArea() ), )
   IIF( !Empty( dbfImp          ), ( dbfImp            )->( dbCloseArea() ), )
   IIF( !Empty( dbfComentariosT ), ( dbfComentariosT   )->( dbCloseArea() ), )
   IIF( !Empty( dbfComentariosL ), ( dbfComentariosL   )->( dbCloseArea() ), )

   dbfTikT           := nil
   dbfTikL           := nil
   dbfTikP           := nil
   dbfDiv            := nil
   dbfKit            := nil
   dbfImp            := nil
   dbfComentariosT   := nil
   dbfComentariosL   := nil

Return Nil





Static Function pdaOpenFiles()

   local oError
   local oBlock
   local cPcName     := AllTrim( cNombrePC() ) + "Emp" + Alltrim( cCodigoEmpresa() ) + "\"
   local cPatEmp     := cPatEmp()

   if pdaAbrirTablas()

      oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
      BEGIN SEQUENCE

         lOpenFiles           := .T.

         dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FAMILIAS.Dbf" ), ( cCheckArea( "FAMILIAS", @dbfFamilia ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatGrp() + "FAMILIAS.Cdx" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatArt() + "ARTICULO.DBF" ), ( cCheckArea( "ARTICULO", @dbfArticulo ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatArt() + "ARTICULO.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "FPAGO.DBF" ), ( cCheckArea( "FPAGO", @dbfFPago ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         ( dbfFPago )->( ordListAdd( cPatGrp() + "FPago.Cdx" ) )

         dbUseArea( .T., ( cDriver() ), ( cPatDat() + "TBLCNV.DBF" ), ( cCheckArea( "TBLCNV", @dbfTblCnv ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatDat() + "TBLCNV.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatEmp + "NCOUNT.DBF" ), ( cCheckArea( "NCOUNT", @dbfCount ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatEmp + "NCOUNT.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

         dbUseArea( .T., ( cDriver() ), ( cPatGrp() + "CONFIG.DBF" ), ( cCheckArea( "CONFIG", @dbfConfig ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
         if !lAIS() ; ordListAdd( ( cPatGrp() + "CONFIG.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end


         oSalaVentas          := TSalaVenta():New( cPatEmp() )
         if !oSalaVentas:OpenFiles()
            lOpenFiles        := .F.
         else
            oSalaVentas:cTikT := dbfTikT
            oSalaVentas:cTikL := dbfTikL
            oSalaVentas:cDiv  := dbfDiv
            oSalaVentas:BuildSala()
         end



         cPouDiv              := cPouDiv( cDivEmp(), dbfDiv )
         cPorDiv              := cPorDiv( cDivEmp(), dbfDiv )
         cPicEur              := cPorDiv( cDivChg(), dbfDiv )
         nDouDiv              := nDouDiv( cDivEmp(), dbfDiv )
         nDorDiv              := nRouDiv( cDivEmp(), dbfDiv )

         cPicUnd              := MasUnd()

      RECOVER USING oError

         lOpenFiles           := .F.

         msgStop( "Error al conectar con el pc " + Chr(13)+Chr(10) + ErrorMessage( oError ) )

      end

      ErrorBlock( oBlock )

      pdaCerrarTablas()

      if !lOpenFiles
         pdaCloseFiles()
      end

      else

         msginfo("Error de conexion con el pc, Reintente")

      end

RETURN ( lOpenFiles )



Static Function pdaCloseFiles()

   IIF( !Empty( dbfFamilia        ), ( dbfFamilia         )->( dbCloseArea() ), )
   IIF( !Empty( dbfArticulo       ), ( dbfArticulo        )->( dbCloseArea() ), )
   IIF( !Empty( dbfTblCnv         ), ( dbfTblCnv          )->( dbCloseArea() ), )
   IIF( !Empty( dbfCount          ), ( dbfCount           )->( dbCloseArea() ), )
   IIF( !Empty( dbfFPago          ), ( dbfFPago           )->( dbCloseArea() ), )
   IIF( !Empty( dbfConfig         ), ( dbfConfig          )->( dbCloseArea() ), )

   if !Empty( oSalaVentas )
      oSalaVentas:end()
   end

   dbfFamilia        := nil
   dbfArticulo       := nil
   dbfTblCnv         := nil
   dbfCount          := nil
   dbfFPago          := nil
   dbfConfig         := nil

   oSalaVentas       := nil

   lOpenFiles        := .F.

Return .T.



Static Function EdtPda( cNumTik, nMode )

   local aTmp
   local aGet
   local oBrwLin
   local oBrwFamilia
   local oBrwArt
   local oBtnSalon
   local oBtnSuma
   local oBtnResta
   local oBtnShow
   local oFont
   local oError
   local oBlock
   local nOrdArt
   local nOrdFam
   local aDbfBmp           := {  LoadBitmap( GetResources(), "Sel16" ) }
   local oTitArt
   local oTitPrc
   local oSayTit





   if !Empty( oSalaVentas )

      if lLockMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto )
         return .F.
      end

   end

   do case
      case nMode == 1
         aTmp              := dbBlankRec( dbfTikT )

      case nMode == 2
         if dbDialogLock( dbfTikT )
            aTmp           := dbScatter( dbfTikT )
         else
            return .F.
         end

   end

   if lOpenFiles

      aGet                 := Array( ( dbfTikT )->( fCount() ) )

      if BeginTrans( aTmp, aGet, nMode )
         lOpenFiles        := .F.
      end

   end

   nOrdFam                 := ( dbfFamilia  )->( OrdSetFocus( "nPosTpv" ) )
   nOrdArt                 := ( dbfArticulo )->( OrdSetFocus( "nPosTpv" ) )

   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

   if nMode == 1

      aTmp[ 48  ]   := oSalaVentas:cSelectedSala
      aTmp[ 49 ]   := oSalaVentas:cSelectedPunto
      aTmp[ 12   ]   := oSalaVentas:nTarifa

   end

   oFont                   := TFont():New( "MS Sans Serif",   7, 8, .F., .T. )

   lShowBrwLin             := .F.
   lShowBrwFam             := .F.

   if !uFieldEmpresa( "lMixFam" )
      oDlgTpv = TDialog():New(,,,,, "TIKET_PDA_02",, .F.,,,,,, .F.,,,,,, .F., )
   else
      oDlgTpv = TDialog():New(,,,,, "TIKET_PDA_01",, .F.,,,,,, .F.,,,,,, .F., )
   end

   oBtnSalon               := TBtnBmp():ReDefine( 203, "pda_write_16",,,,,{|| PdaShowBrwLin( oBtnSalon, oNumTot, oBrwLin, oBrwFamilia, oBrwArt, !lShowBrwLin, oTitArt, oTitPrc, oSayTit ), lRecTotal( aTmp ) }, oDlgTpv, .F., , .F., , , , , , .F.  )





   oSayTit := TSay():ReDefine( 204, {||   AllTrim( oSalaVentas:cTextoSala() ) + " " + AllTrim( oSalaVentas:cSelectedPunto )}, oDlgTpv,,,, .T., oFont, .F., .F. )





   oNumTot := TSay():ReDefine( 210, {||   Trans( 0, cPorDiv )}, oDlgTpv,,,, .F., oFont, .F., .F. )




   oTitArt := TSay():ReDefine( 205, {||   ""}, oDlgTpv,,,, .F.,, .F., .F. )




   oTitPrc := TSay():ReDefine( 206, {||   ""}, oDlgTpv,,,, .F.,, .F., .F. )





   oBrwLin                 := IXBrowse():New( oDlgTpv )
   oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
   oBrwLin:cAlias          := dbfTmpL
   oBrwLin:cName           := "Lineas.PDA"
   oBrwLin:nMarqueeStyle   := 5
   oBrwLin:lRecordSelector := .F.
   oBrwLin:lHScroll        := .F.
   oBrwLin:CreateFromResource( 100 )
   oBrwLin:bLDblClick      := {|| ArticuloServido( oBrwLin, dbfTmpL ) }

   with object ( oBrwLin:AddCol() )
      :cHeader             := "S."
      :bStrData            := {|| "" }
      :bBmpData            := {|| if( ( dbfTmpL )->lArtServ, 2, 1 ) }
      :nWidth              := 20
      :AddResource( "Bullet_Square_Red_16" )
      :AddResource( "Bullet_Square_Green_16" )
   end

   with object ( oBrwLin:AddCol() )
      :cHeader             := "Und."
      :bEditValue          := {|| ( dbfTmpL )->nUntTil }
      :cEditPicture        := MasUnd()
      :nWidth              := 30
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
   end

   with object ( oBrwLin:AddCol() )
      :cHeader             := "Descripción"
      :bEditValue          := {|| if( Empty( ( dbfTmpL )->cComent ), Upper( Rtrim( ( dbfTmpL )->cNomTil ) ),"[*] " + Upper( Rtrim( ( dbfTmpL )->cNomTil ) ) ) }
      :nWidth              := 110
   end

   with object ( oBrwLin:AddCol() )
      :cHeader             := "Total"
      :bEditValue          := {|| nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ) }
      :cEditPicture        := cPorDiv
      :nWidth              := 50
      :nDataStrAlign       := 1
      :nHeadStrAlign       := 1
   end





   if uFieldEmpresa( "lMixFam" )

      oBrwFamilia                 := IXBrowse():New( oDlgTpv )

      oBrwFamilia:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwFamilia:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwFamilia:cAlias          := dbfFamilia
      oBrwFamilia:cName           := "Familias.PDA"

      oBrwFamilia:lHScroll        := .F.
      oBrwFamilia:lRecordSelector := .F.

      oBrwFamilia:nMarqueeStyle   := 5
      oBrwFamilia:CreateFromResource( 110 )

      oBrwFamilia:bChange         := {|| ChangeFamilias( ( dbfFamilia )->cCodFam, oBrwArt ) }
      oBrwFamilia:bLClicked       := {|| ChangeFamilias( ( dbfFamilia )->cCodFam, oBrwArt ) }

      with object ( oBrwFamilia:AddCol() )
         :cHeader                      := "Familias"
         :bEditValue                   := {|| Upper( ( dbfFamilia )->cNomFam ) }
         :nWidth                       := 220
      end

   end





   oBrwArt                 := IXBrowse():New( oDlgTpv )

   oBrwArt:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
   oBrwArt:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

   oBrwArt:cAlias          := dbfArticulo
   oBrwArt:cName           := "LinArticu.PDA"

   oBrwArt:lHScroll        := .F.
   oBrwArt:lRecordSelector := .F.

   oBrwArt:nMarqueeStyle   := 5
   oBrwArt:CreateFromResource( 120 )

   with object ( oBrwArt:AddCol() )
      :cHeader                      := "Artículos"
      :bEditValue                   := {|| Upper( ( dbfArticulo )->Nombre ) }
      :nWidth                       := 220
   end

   oBrwArt:bLDblClick      := {|| WinAppRec( oBrwLin, bEdtPdaL, dbfTmpL, aTmp, .F. ) , ComprobarFamilia( dbfTmpL, oFont, oBrwLin, cNumTik, oTitArt, oTitPrc ) }





   if !uFieldEmpresa( "lMixFam" )
      TBtnBmp():ReDefine( 690, "ARROW_LEFT_GREEN_16",,,,,{|| pdaBtnFamilias( aTmp, aGet, nMode, oBrwArt, oDlgTpv ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   end

   TBtnBmp():ReDefine( 610, "LIBRE_16",,,,,{|| PdaBtnLibre( aTmp, oBrwLin, oFont ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 620, "STAR_YELLOW_16",,,,,{|| PdaShowBrwLin( oBtnSalon, oNumTot, oBrwLin, oBrwFamilia, oBrwArt, .F., oTitArt, oTitPrc, oSayTit ), LoadFavoritos( oBrwArt ), lRecTotal( aTmp ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 630, "NAVIGATE_PLUS_16_2",,,,,{|| if( lShowBrwLin, SumaUnidad( aTmp, oBrwLin ), ( WinAppRec( oBrwLin, bEdtPdaL, dbfTmpL, aTmp, .F. ) , ComprobarFamilia( dbfTmpL, oFont, oBrwLin, cNumTik, oTitArt, oTitPrc ) ) ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 640, "NAVIGATE_MINUS_16_2",,,,,{|| if( lShowBrwLin, RestaUnidad( aTmp, oBrwLin ), ) }, oDlgTpv, .F., , .F., , , , , , .F. )
   TBtnBmp():ReDefine( 650, "MESSAGE_16",,,,,{|| pdaComentario( oFont, dbfTmpL ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 660, "IMP16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., .T. ), oDlgTpv:End( 1 ), ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 670, "MONEY2_16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., , .T. ), oDlgTpv:End( 1 ), ) }, oDlgTpv, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 680, "END16",,,,,{|| EndEdtPda( aTmp, aGet, nMode, oDlgTpv ) }, oDlgTpv, .F., , .F., , , , , , .F.  )

   oDlgTpv:bStart          := {|| if( !uFieldEmpresa( "lMixFam" ), pdaBtnFamilias( aTmp, aGet, nMode, oBrwArt, oDlgTpv ), ), PdaShowBrwLin( oBtnSalon, oNumTot, oBrwLin, oBrwFamilia, oBrwArt, .F., oTitArt, oTitPrc, oSayTit ), lRecTotal( aTmp ) }


   oDlgTpv:Activate( oDlgTpv:bLClicked, oDlgTpv:bMoved, oDlgTpv:bPainted, .F.,,, {|Self|( pdaMenuEdtRec( aTmp, aGet, nMode, oFont, dbfTmpL, oBrwLin, oNumTot, oBrwArt, cNumTik, oTitArt, oTitPrc ), if( uFieldEmpresa( "lMixFam" ), oBrwFamilia:GoTop(), ), LoadFavoritos( oBrwArt ) )}, oDlgTpv:bRClicked,,, )





   KillTrans()





   if nMode == 2
      dbSafeUnLock( dbfTikT )
   end

   oFont:End()

   ( dbfFamilia  )->( OrdSetFocus( nOrdFam ) )
   ( dbfArticulo )->( OrdSetFocus( nOrdArt ) )

   RECOVER USING oError

      msgStop( "Error al montar ventana de tiket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

return ( oDlgTpv:nResult == 1 )



static function EndEdtPda( aTmp, aGet, nMode, oDlgTpv )

   if ( dbfTmpL )->( ordKeyCount() ) <> 0

      if PdaNewTiket( aTmp, aGet, nMode, .T. )

         lFreeMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto )

         oDlgTpv:End()

      end

   else

       lFreeMesa( oSalaVentas:cSelectedSala, oSalaVentas:cSelectedPunto )

       oDlgTpv:End()

   end

return .T.



static function PdaShowBrwLin( oBtnSalon, oNumTot, oBrwLin, oBrwFamilia, oBrwArticulo, lShow, oTitArt, oTitPrc, oSayTit )

   if lShow
      oBrwLin:Show()
      if !Empty( oBrwFamilia )
         oBrwFamilia:Hide()
      end
      oBrwArticulo:Hide()
      oTitArt:Hide()
      oTitPrc:Hide()
      oSayTit:SetColor( nRGB( 0, 75, 255 ), nRGB( 236, 233, 216 )  )
      oNumTot:SetColor( nRGB( 0, 75, 255 ), nRGB( 236, 233, 216 )  )
      lShowBrwLin          := .T.
   else
      oBrwLin:Hide()
      if !Empty( oBrwFamilia )
         oBrwFamilia:Show()
      end
      oBrwArticulo:Show()
      oTitArt:Show()
      oTitPrc:Show()
      oSayTit:SetColor( nRGB( 0, 0, 0 ), nRGB( 236, 233, 216 )  )
      oNumTot:SetColor( nRGB( 0, 0, 0 ), nRGB( 236, 233, 216 )  )
      lShowBrwLin          := .F.
   end

   oBtnSalon:Refresh()
   oNumTot:Refresh()
   oSayTit:Refresh()
   oBrwArticulo:SetFocus()

return .T.



Static Function SumaUnidad( aTmp, oBrwLin )

   ( dbfTmpL )->lImpCom    := .F.

   ( dbfTmpL )->nUntTil++

   lRecTotal( aTmp )

   oBrwLin:Refresh()

Return nil



Static Function RestaUnidad( aTmp, oBrwLin )

   if !( dbfTmpL )->lArtServ

      if ( dbfTmpL )->nUntTil == 1

         if ApoloMsgNoYes( "¿ Desea eliminar el artículo seleccionado ?", "Elija una opción" )
            ( dbfTmpL )->nUntTil--
            ( dbfTmpL )->lAnulado   := .T.
         end
      else
         ( dbfTmpL )->nUntTil--
         ( dbfTmpL )->lAnulado      := .T.
      end






      lRecTotal( aTmp )

   end

   oBrwLin:Refresh()

Return nil



Static Function pdaMenuEdtRec( aTmp, aGet, nMode, oFntTit, dbfTmpL, oBrwLin, oNumTot, oBrwArticulo, cNumTik, oTitArt, oTitPrc )

   local oMenu



















































Return oMenu



function pdaCombinado( oBrwFamilia )

   local nRecArt
   local nRecFam

   lTwoLin              := !lTwoLin

   if lTwoLin

      nRecArt           := ( dbfArticulo )->( Recno() )
      nRecFam           := ( dbfFamilia )->( Recno() )

      if dbSeekInOrd( cCodArtAnt, "Codigo", dbfArticulo )

         if dbSeekInOrd( ( dbfArticulo )->Familia, "cCodFam", dbfFamilia ) .AND. !Empty( ( dbfFamilia )->cFamCmb )

            cCodFamAnt  := ( dbfArticulo )->Familia

            msginfo( "combinar con " + ( dbfFamilia )->cFamCmb )

         end

      end

      ( dbfArticulo )->( dbGoTo( nRecArt ) )
      ( dbfFamilia )->( dbGoTo( nRecFam ) )

   end

return .T.






static Function ComprobarFamilia( dbfTmpL, oFntTit, oBrwLin, cNumTik, oTitArt, oTitPrc )

   oBrwLin:GoBottom()

   if RetFld( ( dbfTmpL )->cCodFam, dbfFamilia, "lMostrar" )

      pdaComentario( oFntTit, dbfTmpL, RetFld( ( dbfTmpL )->cCodFam, dbfFamilia, "cComFam" ) )

   end





   if !Empty( oTitArt )
      oTitArt:SetText( if( Empty( ( dbfTmpL )->cComent ), Upper( Rtrim( ( dbfTmpL )->cNomTil ) ),"[*] " + Upper( Rtrim( ( dbfTmpL )->cNomTil ) ) ) )
   end

   if !Empty( oTitPrc )
      oTitPrc:SetText( AllTrim( Trans( nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ), cPorDiv ) ) )
   end

Return nil







Static Function pdaComentario( oFntTit, dbfTmpL, cDefCom )

   local oDlg
   local oBrwComentariosT
   local oBrwComentariosL
   local oGetComentario
   local cGetComentario

   if ( dbfTmpL )->( ordKeyCount() ) == 0
      MsgStop( "No puede añadir un comentario." )
      return .F.
   end

   cGetComentario       := ( dbfTmpL )->cComent

   oDlg = TDialog():New(,,,,, "COMENTARIOSTS",, .F.,,,,,, .F.,,,,,, .F., )




      oGetComentario := TGetHlp():ReDefine( 300, { | u | If( PCount()==0, cGetComentario, cGetComentario:= u ) }, oDlg,,,,,, oFntTit,,, .F.,,, .F., .F.,,,,,, nil,,, )

      oBrwComentariosT                 := IXBrowse():New( oDlg )

      oBrwComentariosT:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwComentariosT:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwComentariosT:cAlias          := dbfComentariosT
      oBrwComentariosT:cName           := "ComentaT.PDA"

      oBrwComentariosT:lHScroll        := .F.
      oBrwComentariosT:lRecordSelector := .F.

      oBrwComentariosT:nMarqueeStyle   := 5
      oBrwComentariosT:CreateFromResource( 100 )

      oBrwComentariosT:bChange         := {|| ChangeComentarios( , , oBrwComentariosL ) }

      with object ( oBrwComentariosT:AddCol() )
         :cHeader                      := "Tipos de comentarios"
         :bEditValue                   := {|| Upper( ( dbfComentariosT )->cDescri ) }
         :nWidth                       := 220
      end

      oBrwComentariosL                 := IXBrowse():New( oDlg )

      oBrwComentariosL:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwComentariosL:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrwComentariosL:cAlias          := dbfComentariosL
      oBrwComentariosL:cName           := "ComentaL.PDA"
      oBrwComentariosL:lHScroll        := .F.
      oBrwComentariosL:lRecordSelector := .F.

      oBrwComentariosL:nMarqueeStyle   := 5
      oBrwComentariosL:CreateFromResource( 110 )

      oBrwComentariosL:bLDblClick      := {|| ChangeLineasComentarios( oGetComentario ) }

      with object ( oBrwComentariosL:AddCol() )
         :cHeader                      := "Comentarios"
         :bEditValue                   := {|| Upper( ( dbfComentariosL )->cDescri ) }
         :nWidth                       := 220
      end

      TBtnBmp():ReDefine( 500, "check2_16_2",,,,,{|| EndComentario( oDlg, dbfTmpL, oGetComentario ) }, oDlg, .F., , .F., , , , , , .F.  )
      TBtnBmp():ReDefine( 550, "END16",,,,,{|| oDlg:End( 2 ) }, oDlg, .F., , .F., , , , , , .F.  )

      oDlg:bStart                      := {|| SeleccionarDefecto( cDefCom, dbfComentariosT, dbfComentariosL, oBrwComentariosL, oBrwComentariosT ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,,, oDlg:bRClicked,,, )

Return .T.



Static Function pdaBtnFamilias( aTmp, aGet, nMode, oBrwArticulo, oDlgTpv )

   local oDlg
   local n                          := 1
   local nOrdAnt                    := ( dbfFamilia )->( OrdSetFocus( "nPosTpv" ) )
   local aBtnFam
   local oBtnAnterior
   local oBtnSiguiente
   local oBrwFamilia
   local oSayMesa
   local oBtnShow
   local oBrwLin
   local oFont                      := TFont():New( "MS Sans Serif",   7, 8, .F., .T. )
   local oBtnChange
   local oSayTitle
   local oBtnMenos
   local oBtnMas

   if uFieldEmpresa( "lBtnFam" )

      aBtnFam                       := Array( 9 )

      oDlg = TDialog():New(,,,,, "BTNFAMILIAS",, .F.,,,,,, .F.,,,,,, .F., )

      oBtnChange                    := TBtnBmp():ReDefine( 203, "pda_write_16",,,,,{|| PdaShowBrwFam( oBrwFamilia, oBrwLin, oBrwArticulo, !lShowBrwFam, aBtnFam, oBtnAnterior, oBtnSiguiente, oDlg, oSayTitle, oBtnMenos, oBtnMas ), lRecTotal( aTmp ) }, oDlg, .F., , .F., , , , , , .F.  )





      oSayTitle := TSay():ReDefine( 204, {||   AllTrim( oSalaVentas:cTextoSala() ) + " " + AllTrim( oSalaVentas:cSelectedPunto )}, oDlg,,,, .F., oFont, .F., .F. )





      oTotPdaFam := TSay():ReDefine( 210, {||   Trans( 0, cPorDiv )}, oDlg,,,, .F., oFont, .F., .F. )





      oBrwLin                 := IXBrowse():New( oDlg )
      oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
      oBrwLin:cAlias          := dbfTmpL
      oBrwLin:cName           := "Lineas2.PDA"
      oBrwLin:nMarqueeStyle   := 5
      oBrwLin:lRecordSelector := .F.
      oBrwLin:lHScroll        := .F.
      oBrwLin:CreateFromResource( 150 )

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Und."
         :bEditValue          := {|| ( dbfTmpL )->nUntTil }
         :cEditPicture        := MasUnd()
         :nWidth              := 30
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Descripción"
         :bEditValue          := {|| if( Empty( ( dbfTmpL )->cComent ), Upper( Rtrim( ( dbfTmpL )->cNomTil ) ),"[*] " + Upper( Rtrim( ( dbfTmpL )->cNomTil ) ) ) }
         :nWidth              := 130
      end

      with object ( oBrwLin:AddCol() )
         :cHeader             := "Total"
         :bEditValue          := {|| nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ) }
         :cEditPicture        := cPorDiv
         :nWidth              := 50
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      for n := 1 to len( aBtnFam )
         aBtnFam[ n ]              := TBtnBmp():ReDefine( 100 + n, ,,,,,{|| oDlg:End() }, oDlg, .F., , .F., , "Boton " + AllTrim( Str( n ) ), , , , .F., "CENTER" )
         aBtnFam[ n ]:SetColor( ( 0 + ( 0 * 256 ) + ( 0 * 65536 ) ), ( 255 + ( 255 * 256 ) + ( 255 * 65536 ) ) )
      next

      oBtnAnterior   := TBtnBmp():ReDefine( 110, "ARROW_LEFT_GREEN_16",,,,,{|| PdaloaFam( .F., .F., aBtnFam, oBtnAnterior, oBtnSiguiente, oBrwArticulo, oDlg ) }, oDlg, .F., , .F., , , , , , .F.  )

      oBtnSiguiente  := TBtnBmp():ReDefine( 120, "ARROW_RIGHT_GREEN_16",,,,,{|| PdaloaFam( .T., .F., aBtnFam, oBtnAnterior, oBtnSiguiente, oBrwArticulo, oDlg ) }, oDlg, .F., , .F., , , , , , .F.  )

      oBtnMenos      := TBtnBmp():ReDefine( 630, "NAVIGATE_PLUS_16_2",,,,,{|| SumaUnidad( aTmp, oBrwLin ) }, oDlg, .F., , .F., , , , , , .F.  )

      oBtnMas        := TBtnBmp():ReDefine( 640, "NAVIGATE_MINUS_16_2",,,,,{|| RestaUnidad( aTmp, oBrwLin ) }, oDlg, .F., , .F., , , , , , .F. )

      TBtnBmp():ReDefine( 660, "IMP16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., .T. ), ( oDlg:End(), oDlgTpv:End( 1 ) ), ) }, oDlg, .F., , .F., , , , , , .F.  )

      TBtnBmp():ReDefine( 130, "MONEY2_16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., , .T. ), ( oDlg:End(), oDlgTpv:End( 1 ) ), ) }, oDlg, .F., , .F., , , , , , .F.  )

      TBtnBmp():ReDefine( 500, "END16",,,,,{|| oDlg:End(), EndEdtPda( aTmp, aGet, nMode, oDlgTpv ) }, oDlg, .F., , .F., , , , , , .F.  )

      oDlg:bStart := {|| PdaShowBrwFam( oBrwFamilia, oBrwLin, oBrwArticulo, .F., aBtnFam, oBtnAnterior, oBtnSiguiente, oDlg, oSayTitle, oBtnMenos, oBtnMas ), lRecTotal( aTmp ) }


      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,, {|Self|PdaloaFam( .T., .T., aBtnFam, oBtnAnterior, oBtnSiguiente, oBrwArticulo, oDlg )}, oDlg:bRClicked,,, )

   else

      oDlg = TDialog():New(,,,,, "BRWFAMILIAS",, .F.,,,,,, .F.,,,,,, .F., )

         oBtnChange               := TBtnBmp():ReDefine( 203, "pda_write_16",,,,,{|| PdaShowBrwFam( oBrwFamilia, oBrwLin, oBrwArticulo, !lShowBrwFam, aBtnFam, oBtnAnterior, oBtnSiguiente, oDlg, oSayTitle, oBtnMenos, oBtnMas ), lRecTotal( aTmp ) }, oDlg, .F., , .F., , , , , , .F.  )





         oSayTitle := TSay():ReDefine( 204, {||   AllTrim( oSalaVentas:cTextoSala() ) + " " + AllTrim( oSalaVentas:cSelectedPunto )}, oDlg,,,, .F., oFont, .F., .F. )





         oTotPdaFam := TSay():ReDefine( 210, {||   Trans( 0, cPorDiv )}, oDlg,,,, .F., oFont, .F., .F. )





         oBrwLin                 := IXBrowse():New( oDlg )
         oBrwLin:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrwLin:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }
         oBrwLin:cAlias          := dbfTmpL
         oBrwLin:cName           := "Lineas2.PDA"
         oBrwLin:nMarqueeStyle   := 5
         oBrwLin:lRecordSelector := .F.
         oBrwLin:lHScroll        := .F.
         oBrwLin:CreateFromResource( 150 )

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Und."
            :bEditValue          := {|| ( dbfTmpL )->nUntTil }
            :cEditPicture        := MasUnd()
            :nWidth              := 30
            :nDataStrAlign       := 1
            :nHeadStrAlign       := 1
         end

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Descripción"
            :bEditValue          := {|| if( Empty( ( dbfTmpL )->cComent ), Upper( Rtrim( ( dbfTmpL )->cNomTil ) ),"[*] " + Upper( Rtrim( ( dbfTmpL )->cNomTil ) ) ) }
            :nWidth              := 130
         end

         with object ( oBrwLin:AddCol() )
            :cHeader             := "Total"
            :bEditValue          := {|| nTotLTpv( dbfTmpL, nDouDiv, nDorDiv ) }
            :cEditPicture        := cPorDiv
            :nWidth              := 50
            :nDataStrAlign       := 1
            :nHeadStrAlign       := 1
         end





         oBrwFamilia                 := IXBrowse():New( oDlg )

         oBrwFamilia:bClrSel         := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
         oBrwFamilia:bClrSelFocus    := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

         oBrwFamilia:cAlias          := dbfFamilia
         oBrwFamilia:cName           := "Familias.PDA"

         oBrwFamilia:lHScroll        := .F.
         oBrwFamilia:lRecordSelector := .F.
         oBrwFamilia:bLDblClick      := {|| ChangeFamilias( ( dbfFamilia )->cCodFam, oBrwArticulo ), oDlg:End() }

         oBrwFamilia:nMarqueeStyle   := 5
         oBrwFamilia:CreateFromResource( 100 )

         with object ( oBrwFamilia:AddCol() )
            :cHeader                      := "Familias"
            :bEditValue                   := {|| Upper( ( dbfFamilia )->cNomFam ) }
            :nWidth                       := 220
         end

         oBtnMenos      := TBtnBmp():ReDefine( 630, "NAVIGATE_PLUS_16_2",,,,,{|| SumaUnidad( aTmp, oBrwLin ) }, oDlg, .F., , .F., , , , , , .F.  )

         oBtnMas        := TBtnBmp():ReDefine( 640, "NAVIGATE_MINUS_16_2",,,,,{|| RestaUnidad( aTmp, oBrwLin ) }, oDlg, .F., , .F., , , , , , .F. )

         TBtnBmp():ReDefine( 660, "IMP16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., .T. ), ( oDlg:End(), oDlgTpv:End( 1 ) ), ) }, oDlg, .F., , .F., , , , , , .F.  )

         TBtnBmp():ReDefine( 130, "MONEY2_16",,,,,{|| if( PdaNewTiket( aTmp, aGet, nMode, .F., , .T. ), ( oDlg:End(), oDlgTpv:End( 1 ) ), ) }, oDlg, .F., , .F., , , , , , .F.  )

         TBtnBmp():ReDefine( 500, "END16",,,,,{|| oDlg:End(), EndEdtPda( aTmp, aGet, nMode, oDlgTpv ) }, oDlg, .F., , .F., , , , , , .F.  )

         oDlg:bStart := {|| oBrwFamilia:GoTop(), PdaShowBrwFam( oBrwFamilia, oBrwLin, oBrwArticulo, .F., aBtnFam, oBtnAnterior, oBtnSiguiente, oDlg, oSayTitle, oBtnMenos, oBtnMas ), lRecTotal( aTmp ) }

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,,, oDlg:bRClicked,,, )

   end

   oFont:End()

   ( dbfFamilia )->( OrdSetFocus( nOrdAnt ) )

Return .T.



static function PdaShowBrwFam( oBrwFamilia, oBrwLin, oBrwArticulo, lShow, aBtnFam, oBtnAnterior, oBtnSiguiente, oDlg, oSayTitle, oBtnMenos, oBtnMas )

   if lShow
      oBrwLin:Show()
      if uFieldEmpresa( "lBtnFam" )
         aEval( aBtnFam, {|o| o:Hide() } )
         oBtnAnterior:Disable()
         oBtnSiguiente:Disable()
      else
         oBrwFamilia:Hide()
      end
      oBtnMenos:Show()
      oBtnMas:Show()
      oSayTitle:SetColor( nRGB( 0, 75, 255 ), nRGB( 236, 233, 216 )  )
      oTotPdaFam:SetColor( nRGB( 0, 75, 255 ), nRGB( 236, 233, 216 )  )
      lShowBrwFam    := .T.
   else
      oBrwLin:Hide()
      if uFieldEmpresa( "lBtnFam" )
         aEval( aBtnFam, {|o| o:Show() } )
         PdaloaFam( .T., .T., aBtnFam, oBtnAnterior, oBtnSiguiente, oBrwArticulo, oDlg )
      else
         oBrwFamilia:Show()
      end
      oBtnMenos:Hide()
      oBtnMas:Hide()
      oSayTitle:SetColor( nRGB( 0, 0, 0 ), nRGB( 236, 233, 216 )  )
      oTotPdaFam:SetColor( nRGB( 0, 0, 0 ), nRGB( 236, 233, 216 )  )
      lShowBrwFam    := .F.
   end

   if !Empty( oBrwLin )
      oBrwLin:Refresh()
   end

   if !Empty( oSayTitle )
      oSayTitle:Refresh()
   end

   if !Empty( oTotPdaFam )
      oTotPdaFam:Refresh()
   end

   if !Empty( oBrwFamilia )
      oBrwFamilia:SetFocus()
   end

return .T.



Static Function PdaloaFam( lAvance, lRepos, aBtnFam, oBtnAnterior, oBtnSiguiente, oBrwArticulo, oDlg )

   local n                 := 1

   IIF( lAvance == nil, lAvance := .T., ) ;
   IIF( lRepos == nil, lRepos := .F., ) ;



   aEval( aBtnFam, {|o| o:Hide() } )



   if lRepos

      ( dbfFamilia )->( dbGoTop() )

      aRecFam              := {}
      aAdd( aRecFam, ( dbfFamilia )->( Recno() ) )

   end



   if ( !lRepos .AND. !lAvance )

      aDel( aRecFam, len( aRecFam ), .T. )
      ( dbfFamilia )->( dbGoTo( aRecFam[ len( aRecFam ) ] ) )

   end



   if ( !lRepos .AND. lAvance )

      if ( dbfFamilia )->( Recno() ) <> 0 .AND. aScan( aRecFam, ( dbfFamilia )->( Recno() ) ) == 0
         aAdd( aRecFam, ( dbfFamilia )->( Recno() ) )
      end

   end



   if ( !lRepos .AND. lAvance ) .OR. ( !lRepos .AND. !lAvance .AND. len( aRecFam ) > 1 )
      oBtnAnterior:Enable()
   else
      oBtnAnterior:Disable()
   end



   while n <= 9

      if !( dbfFamilia )->( eof() )

         aBtnFam[ n ]:Show()
         aBtnFam[ n ]:Cargo            := ( dbfFamilia )->cCodFam
         aBtnFam[ n ]:bAction          := {| o | ChangeFamilias( o:Cargo, oBrwArticulo ), oDlg:End() }
         aBtnFam[ n ]:cCaption         := Capitalize( ( dbfFamilia )->cNomFam )

         ( dbfFamilia )->( dbSkip() )

      end

      n++

   end

   if lMostrarFamilias()
      oBtnSiguiente:Enable()
   else
      oBtnSiguiente:Disable()
   end

Return ( nil )







Static Function PdaBtnLibre( aTmp, oBrwLin, oFntTit )

   local oDlg
   local oSayTit
   local oGetNombre
   local cGetNombre     := Space( 100 )
   local oGetUnidades
   local nGetUnidades   := 1
   local oGetPrecio
   local nGetPrecio     := 0
   local oGetTotal
   local nGetTotal      := 0
   local oBtn
   local oSayTot
   local oFont
   local oImpComanda
   local cImpComanda

   aImpComanda          := aTiposImpresoras( dbfTImp )
   cImpComanda          := Padr( "No imprimir", 254 )

   oDlg = TDialog():New(,,,,, "ARTICULO_LIBRE",, .F.,,,,,, .F.,,,,,, .F., )




   oSayTit := TSay():ReDefine( 130,, oDlg,,,, .F., oFntTit, .F., .F. )

   oBtn                 := TBtnBmp():ReDefine( 140, "libre_16",,,,,, oDlg, .F., , .F., , , , , , .F.  )



   oGetNombre := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cGetNombre, cGetNombre:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )





   oGetUnidades := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, nGetUnidades, nGetUnidades:= u ) }, oDlg,, "99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )

   oGetUnidades:bChange       := {|| pdaCalculartotal( oGetUnidades, oGetPrecio, oSayTot ) }





   oGetPrecio := TGetHlp():ReDefine( 120, { | u | If( PCount()==0, nGetPrecio, nGetPrecio:= u ) }, oDlg,, "@E 999999.99",,,,,,, .F.,,, .F., .T.,,,,,, nil,,, )

   oGetPrecio:bChange         := {|| pdaCalculartotal( oGetUnidades, oGetPrecio, oSayTot ) }





   oSayTot := TSay():ReDefine( 150,, oDlg, cPorDiv,,, .F., oFont, .F., .F. )




   oImpComanda := TComboBox():ReDefine( 151, { | u | If( PCount()==0, cImpComanda, cImpComanda:= u ) }, aImpComanda, oDlg,,,,,,, .F.,,,,,, )

   TBtnBmp():ReDefine( 500, "check2_16_2",,,,,{|| GuardarBtnLibre( oDlg, oGetNombre, oGetUnidades, oGetPrecio, oBrwLin, aTmp, cImpComanda  ) }, oDlg, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 550, "END16",,,,,{|| oDlg:End() }, oDlg, .F., , .F., , , , , , .F.  )


   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,, {|Self|( pdaCalculartotal( oGetUnidades, oGetPrecio, oSayTot ) )}, oDlg:bRClicked,,, )

Return nil



Static Function GuardarBtnLibre( oDlg, oGetNombre, oGetUnidades, oGetPrecio, oBrwLin, aTmp, cImpComanda )

   local cNombre     := oGetNombre:VarGet()
   local nUnidades   := oGetUnidades:VarGet()
   local nPrecio     := oGetPrecio:VarGet()

   if !Empty( cNombre )

      ( dbfTmpL )->( dbAppend() )

      if !( dbfTmpL )->( NetErr() )
         ( dbfTmpL )->cNomTil := cNombre
         ( dbfTmpL )->nUntTil := nUnidades
         ( dbfTmpL )->nPvpTil := nPrecio
         ( dbfTmpL )->nIvaTil    := nIva( dbfIva, cDefIva() )
         ( dbfTmpL )->cAlmLin    := oUser():cAlmacen()
         ( dbfTmpL )->cImpCom1   := cImpComanda
      end

      lRecTotal( aTmp )

      oBrwLin:Refresh()

      oDlg:End( 1 )

   else

      msginfo("No puede almacenar un articulo sin nombre")

   end

Return nil



static function pdaCalcularTotal( oGetUnidades, oGetPrecio, oSayTot )

   local nUnidades   := oGetUnidades:VarGet()
   local nPrecio     := oGetPrecio:VarGet()
   local nTotal      := nUnidades * nPrecio

   oSayTot:SetText( nTotal )

Return nil







function pdaZona()

   local oDlg
   local oCbxSalon
   local cCbxSalon   := "1"
   local aCbxSalon   := {}
   local sSala

   for each sSala in oSalaVentas:aSalas
      aAdd( aCbxSalon, sSala:cDescripcion )
   next

   oDlg = TDialog():New(,,,,, "ZONATS",, .F.,,,,,, .F.,,,,,, .F., )





   oCbxSalon := TComboBox():ReDefine( 120, { | u | If( PCount()==0, cCbxSalon, cCbxSalon:= u ) }, aCbxSalon, oDlg,,,,,,, .F.,,,,,, )

   TBtnBmp():ReDefine( 500, "check2_16_2",,,,,{|| cPdaZona( aCbxSalon[ oCbxSalon:nAt ] ), oDlg:End( 1 ) }, oDlg, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 550, "END16",,,,,{|| oDlg:End( 2 ) }, oDlg, .F., , .F., , , , , , .F.  )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,,, oDlg:bRClicked,,, )

Return Nil



function cPdaZona( cNombre )

   if Empty( cZona )
      cZona    := cNombre
   end

Return cZona







Function pdaSesion()

Return Nil







Static Function pdaNewTiket( aTmp, aGet, nMode, lEmpty, lNota, lCobrar )

   local nRec
   local oError
   local oBlock
   local cNumDoc
   local nNumTik           := ""
   local nSave             := "7"
   local cSerie            := ""
   local cNumero           := ""
   local cSufijo           := ""

   IIF( lEmpty == nil, lEmpty := .F., ) ;
   IIF( lNota == nil, lNota := .F., ) ;
   IIF( lCobrar == nil, lCobrar := .F., ) ;





   if ( dbfTmpL )->( ordKeyCount() ) == 0
      MsgStop( "No puede almacenar un documento sin lineas." )
      return .F.
   end

   if !Empty( aGet[ 10 ] )

      if Empty( aTmp[ 10 ] )
         aGet[ 10 ]:SetFocus()
         MsgInfo( "Almacén no puede estar vacio" )
         return .F.
      end

   end





   if Empty( aTmp[ 1 ] )
      aTmp[ 1 ]  := "A"
   end





   if Empty( aTmp[ 5 ] )
      aTmp[ 5 ]  := cCurSesion()
   end





   if Empty( aTmp[ 8 ] )
      aTmp[ 8 ]   := ( dbfConfig )->cCodCajero
   end




   if Empty( aTmp[ 9 ] )
      aTmp[ 9 ]  := ( dbfConfig )->cCodCaja
   end




   if Empty( aTmp[ 10 ] )
      aTmp[ 10 ]  := ( dbfConfig )->cCodAlm
   end





   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oDlgTpv:Disable()




      aTmp[ 4   ]      := nSave
      aTmp[ 40   ]      := Date()
      aTmp[ 41   ]      := SubStr( Time(), 1, 5 )

      if lEmpty
         aTmp[ 50  ]   := .T.
      else
         aTmp[ 50  ]   := .F.
      endif




      do case
         case nMode == 1





         aTmp[ 2 ]  := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
         aTmp[ 3 ]  := RetSufEmp()
         nNumTik           := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]





         aTmp[ 7 ]  := Substr( Time(), 1, 5 )
         aTmp[ 26 ]  := .F.

      case nMode == 2

         nNumTik           := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]
         cSerie            := aTmp[ 1 ]
         cNumero           := aTmp[ 2 ]
         cSufijo           := aTmp[ 3 ]
         cNumDoc           := aTmp[ 31 ]





         while ( dbfTikL )->( dbSeek( nNumTik ) )
            if dbLock( dbfTikL )
               ( dbfTikL )->( dbDelete() )
               ( dbfTikL )->( dbUnLock() )
            end
         end

         if !dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
            MsgStop( "Número de ticket " + Rtrim( nNumTik ) + " no encontrado" )
         end

      end





      if nTotTik <> 0

         if lCobrar
            pdaCobrarTiket( aTmp, aGet, nMode )
         end

      else





         pdaLiberarCero( cSerie, cNumero, cSufijo )

      end





      nRec                    := ( dbfTmpL )->( Recno() )
      ( dbfTmpL )->( dbGoTop() )
      while !( dbfTmpL )->( eof() )
         dbPass( dbfTmpL, dbfTikL, .T., aTmp[ 1 ], aTmp[ 2 ], aTmp[ 3 ], aTmp[ 4 ] )
         ( dbfTmpL )->( dbSkip() )
      end
      ( dbfTmpL )->( dbGoTo( nRec ) )





      aTmp[ 64 ]        := nTotNet
      aTmp[ 65 ]        := nTotIva
      aTmp[ 66 ]        := nTotTik





      SysRefresh()

      WinGather( aTmp, aGet, dbfTikT, nil, nMode, nil, lEmpty )





      dbCommitAll()





   RECOVER USING oError

      msgStop( "Error en la grabación del ticket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )





   oDlgTpv:Enable()





   ImpresionComanda( nNumTik )





   ImpresionAnulaciones( nNumTik )

   if nTotTik <> 0

      if lNota
         pdaNotaTiket( aTmp, aGet, nMode, nNumTik )
      end

   else

       pdaLiberarCero( cSerie, cNumero, cSufijo )

   end


Return .T.



static function pdaLiberarCero( cSerie, cNumero, cSufijo )





   if dbSeekInOrd( cSerie + cNumero + cSufijo, "cNumTik", dbfTikT )

      if dbLock( dbfTikT )
         ( dbfTikT )->lPgdTik    := .T.
         ( dbfTikT )->lAbierto   := .F.
         ( dbfTikT )->nCobTik    := 0
         ( dbfTikT )->cFpgTik    := "00"
         ( dbfTikT )->( dbUnLock() )
      end





      if dbAppe( dbfTikP )

         ( dbfTikP )->cTurPgo    := cCurSesion()
         ( dbfTikP )->dPgoTik    := GetSysDate()
         ( dbfTikP )->cTimTik    := SubStr( Time(), 1, 5 )
         ( dbfTikP )->cCodCaj    := oUser():cCaja()
         ( dbfTikP )->cFpgPgo    := ( dbfTikT )->cFpgTik
         ( dbfTikP )->cSerTik    := ( dbfTikT )->cSerTik
         ( dbfTikP )->cNumTik    := ( dbfTikT )->cNumTik
         ( dbfTikP )->cSufTik    := ( dbfTikT )->cSufTik
         ( dbfTikP )->nImpTik    := 0
         ( dbfTikP )->cDivPgo    := ( dbfTikT )->cDivTik
         ( dbfTikP )->nVdvPgo    := ( dbfTikT )->nVdvTik
         ( dbfTikP )->nDevTik    := 0

         ( dbfTikP )->( dbUnLock() )

      else

         MsgStop( "No se ha podido añadir el registro de pago" )

      end

   else

      return .F.

   end

Return .T.



Static Function PdaNotaTiket( aTmp, aGet, nMode, nNumTik )

   local oBlock
   local oError





   oBlock            := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE

      oDlgTpv:Disable()





      ImpTiket( .F., .T. )





      oDlgTpv:Enable()





   RECOVER USING oError

      msgStop( "Error al guardar tiket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return .T.



Static Function PdaCobrarTiket( aTmp, aGet, nMode )

   local oDlg
   local oFntTot
   local oFntTit
   local oCbxOrd
   local n
   local oSayTitulo





   nEntCli           := nTotCobTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikP, dbfDiv )
   oBtnNum           := Array( 16 )
   aButtonsPago      := aCreateButtons( dbfFPago )

   cNumEnt           := "0"
   oFntTot           := TFont():New( "Segoe UI",  7, 24, .F., .T. )
   oFntTit           := TFont():New( "Verdana",  7, 14, .F., .T. )





  oDlg = TDialog():New(,,,,, "COBRO_TICKET",, .F.,,,,,, .F.,,,,,, .F., )









   oSayVta := TSay():ReDefine( 140, {||   cSayVta}, oDlg,,,, .F., oFntTit, .F., .F. )





   for n := 1 to len( aButtonsPago )
      aButtonsPago[ n ]:oButton  := TBtnBmp():ReDefine( 300 + n, cImageBtn( aButtonsPago[ n ]:cCode ),,,,, bPdaButtonsPago( aButtonsPago[ n ]:cCode, aButtonsPago[ n ]:cText, aTmp ), oDlg, .F., , .F., , , , , , .F.  )
   next





   oSayFPago := TSay():ReDefine( 150, {||   "Contado"}, oDlg,,,, .F., oFntTit, .F., .F. )









   oSayTitulo := TSay():ReDefine( 401, {||   "Total"}, oDlg,,,, .F., oFntTit, .F., .F. )





   oSayTitulo := TSay():ReDefine( 402, {||   "A Cuenta"}, oDlg,,,, .F., oFntTit, .F., .F. )





   oSayTitulo := TSay():ReDefine( 403, {||   "Entregado"}, oDlg,,,, .F., oFntTit, .F., .F. )





   oSayTitulo := TSay():ReDefine( 404, {||   "Cambio"}, oDlg,,,, .F., oFntTit, .F., .F. )






   oNumTot := TSay():ReDefine( 110, {||   Trans( 0, cPorDiv )}, oDlg,, "G+/N",, .F., oFntTot, .F., .F. )






   oNumEnt := TSay():ReDefine( 160, {||   Trans( nEntCli, cPorDiv )}, oDlg,, "G+/N",, .F., oFntTot, .F., .F. )






   oNumEnt := TSay():ReDefine( 120, {||   Trans( 0, cPorDiv )}, oDlg,, "G+/N",, .F., oFntTot, .F., .F. )






   oNumCambio := TSay():ReDefine( 130, {||   Trans( 0, cPorDiv )}, oDlg,, "R+/N",, .F., oFntTot, .F., .F. )










   oBtnNum[ 1 ] := TButton():ReDefine( 201, {||( pdaEntregando( "1", aTmp ) )}, oDlg,,, .F.,,, "1", .F. )
   oBtnNum[ 1 ]:oFont   := oFntTot






   oBtnNum[ 2 ] := TButton():ReDefine( 202, {||( pdaEntregando( "2", aTmp ) )}, oDlg,,, .F.,,, "2", .F. )
   oBtnNum[ 2 ]:oFont   := oFntTot






   oBtnNum[ 3 ] := TButton():ReDefine( 203, {||( pdaEntregando( "3", aTmp ) )}, oDlg,,, .F.,,, "3", .F. )
   oBtnNum[ 3 ]:oFont   := oFntTot






   oBtnNum[ 4 ] := TButton():ReDefine( 204, {||( pdaEntregando( "4", aTmp ) )}, oDlg,,, .F.,,, "4", .F. )
   oBtnNum[ 4 ]:oFont   := oFntTot






   oBtnNum[ 5 ] := TButton():ReDefine( 205, {||( pdaEntregando( "5", aTmp ) )}, oDlg,,, .F.,,, "5", .F. )
   oBtnNum[ 5 ]:oFont   := oFntTot






   oBtnNum[ 6 ] := TButton():ReDefine( 206, {||( pdaEntregando( "6", aTmp ) )}, oDlg,,, .F.,,, "6", .F. )
   oBtnNum[ 6 ]:oFont   := oFntTot






   oBtnNum[ 7 ] := TButton():ReDefine( 207, {||( pdaEntregando( "7", aTmp ) )}, oDlg,,, .F.,,, "7", .F. )
   oBtnNum[ 7 ]:oFont   := oFntTot






   oBtnNum[ 8 ] := TButton():ReDefine( 208, {||( pdaEntregando( "8", aTmp ) )}, oDlg,,, .F.,,, "8", .F. )
   oBtnNum[ 8 ]:oFont   := oFntTot






   oBtnNum[ 9 ] := TButton():ReDefine( 209, {||( pdaEntregando( "9", aTmp ) )}, oDlg,,, .F.,,, "9", .F. )
   oBtnNum[ 9 ]:oFont   := oFntTot






   oBtnNum[ 10 ] := TButton():ReDefine( 210, {||( pdaEntregando( "0", aTmp ) )}, oDlg,,, .F.,,, "0", .F. )
   oBtnNum[ 10 ]:oFont  := oFntTot










   oBtnNum[ 11 ] := TButton():ReDefine( 211, {||( pdaEntregando( ".", aTmp ) )}, oDlg,,, .F.,,, ",", .F. )
   oBtnNum[ 11 ]:oFont  := oFntTot










   oBtnNum[ 12 ] := TButton():ReDefine( 212, {||( pdaEntregando( "C", aTmp ) )}, oDlg,,, .F.,,, "C", .F. )
   oBtnNum[ 12 ]:oFont  := oFntTot





   TBtnBmp():ReDefine( 500, "check2_16_2",,,,,{|| pdaCobro( aTmp, aGet, nMode ), oDlg:End( 1 ) }, oDlg, .F., , .F., , , , , , .F.  )
   TBtnBmp():ReDefine( 550, "END16",,,,,{|| oDlg:End( 2 ) }, oDlg, .F., , .F., , , , , , .F.  )

   oDlg:bStart    := {|| cTitleSalaVenta( oSayVta ), lRecTotal( aTmp ), pdaStarCobro( aButtonsPago ) }

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .F.,,,, oDlg:bRClicked,,, )

Return nil



Static Function pdaStarCobro( aButtonsPago )

   local oBtn

   for each oBtn in aButtonsPago
      if !Empty( oBtn:oButton )
         oBtn:oButton:Show()
      end
   next

Return nil



Static Function pdaImpresionTicket( nNumTik )





   if !pdaAbrirTablas()
      return .F.
   end

   if dbSeekInOrd( nNumTik, "CNUMTIK", dbfTikT )

      if dbAppe( dbfImp )

         ( dbfImp )->cSerTik          := ( dbfTikT )->cSerTik
         ( dbfImp )->cNumTik          := ( dbfTikT )->cNumTik
         ( dbfImp )->cSufTik          := ( dbfTikT )->cSufTik
         ( dbfImp )->lComanda         := .F.
         ( dbfImp )->lImp             := .F.
         ( dbfImp )->dFectik          := GetSysDate()
         ( dbfImp )->cHorTik          := Substr( Time(), 1, 5 )

         ( dbfImp )->( dbUnLock() )

      end

   end

   pdaCerrarTablas()

Return .T.



Static Function pdaCobro( aTmp, aGet, nMode )

   local oBlock
   local oError
   local nTotal
   local nCobro         := Val( cNumEnt )
   local nNumTik        := aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ]

   if Empty( aTmp[ 21 ] )
      aTmp[ 21 ]  := "00"
   end

   if !dbSeekInOrd( nNumTik, "cNumTik", dbfTikT )
      return .F.
   end

   oBlock               := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





      nTotal            := nTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )

      if nTotal <= Val( cNumEnt ) + nEntCli
         aTmp[ 28  ]          := .T.
         aTmp[ 50 ]          := .F.
      end

      aTmp[ 22  ]             := Val( cNumEnt )

      if ( nCobro <> 0 )

         if dbAppe( dbfTikP )

            ( dbfTikP )->cTurPgo    := cCurSesion()
            ( dbfTikP )->dPgoTik    := GetSysDate()
            ( dbfTikP )->cTimTik    := SubStr( Time(), 1, 5 )
            ( dbfTikP )->cCodCaj    := oUser():cCaja()
            ( dbfTikP )->cFpgPgo    := aTmp[ 21 ]
            ( dbfTikP )->cSerTik    := aTmp[ 1 ]
            ( dbfTikP )->cNumTik    := aTmp[ 2 ]
            ( dbfTikP )->cSufTik    := aTmp[ 3 ]
            ( dbfTikP )->nImpTik    := aTmp[ 22 ]
            ( dbfTikP )->cDivPgo    := aTmp[ 24 ]
            ( dbfTikP )->nVdvPgo    := aTmp[ 25 ]
            ( dbfTikP )->nDevTik    := Max( nCambioCli , 0 )

            ( dbfTikP )->( dbUnLock() )

         else

            MsgStop( "No se ha podido añadir el registro de pago" )

         end

      end





      SysRefresh()







      dbCommitAll()





   RECOVER USING oError

      msgStop( "Error al guardar tiket" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )





   ImpTiket()

return .T.



Static Function ChangeFamilias( cCodFam, oBrwArticulo )

   ( dbfArticulo )->( OrdSetFocus( "CFAMNOM" ) )
   ( dbfArticulo )->( OrdScope( 0, cCodFam ) )
   ( dbfArticulo )->( OrdScope( 1, cCodFam ) )
   ( dbfArticulo )->( dbGoTop() )

   if !Empty( oBrwArticulo )
      oBrwArticulo:GoTop()
      oBrwArticulo:Refresh()
   end

RETURN ( nil )



Static Function LoadFavoritos( oBrwArticulo )

   ( dbfArticulo )->( OrdSetFocus( "nPosTcl" ) )
   ( dbfArticulo )->( dbGoTop() )

   oBrwArticulo:Refresh()

RETURN ( nil )



Static Function cTitleSalaVenta( oSayVta, oSayTit )

   if !Empty( oSalaVentas )

      if!Empty( oSayVta )
         oSayVta:SetText( AllTrim( oSalaVentas:cTextoSala() ) + " " + AllTrim( oSalaVentas:cSelectedPunto ) )
         oSayVta:Refresh()
      end

      if !Empty( oSayTit )
         oSayTit:SetText( "Dario" )
         oSayTit:Refresh()
      end

   end

Return ( nil )



Static Function bpdaButtonsPago( cCode, cText, aTmp )

Return ( {|| aTmp[ 21 ] := cCode, oSayFPago:SetText( AllTrim( cText ) ) } )



Static Function cImageBtn( cCode )

   local cBtnImagen

   do case
      case cCode == "00"
         cBtnImagen  := "money2_16"
      case cCode == "01"
         cBtnImagen  := "Creditcards_16"
      case cCode == "02"
         cBtnImagen  := "moneybag_16"
      case cCode == "03"
         cBtnImagen  := "percent_16"
      case cCode == "04"
         cBtnImagen  := "shoppingbasket_16"
   end

Return cBtnImagen



Static Function pdaEntregando( nValor, aTmp )

   local nCambio
   local nTotal

   if nValor == "C"
      cNumEnt     := "0"
      nCambio     := 0
   else

      cNumEnt     += nValor

      nTotal      := nTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )

      nCambio     := Val( cNumEnt ) + nEntCli  - nTotal

   end

   oNumEnt:SetText( Trans( Val( cNumEnt ), cPorDiv ) )
   oNumCambio:SetText( Trans( nCambio, cPorDiv ) )

   nCambioCli     := nCambio

Return nil



static function EdtPdaL( aTmp, aGet, dbfTmpL, oBrw, aTmpHead, lNegative, nMode )

   IIF( lNegative == nil, lNegative := .F., ) ;





   aTmp[ 4 ]     := aTmpHead[ 4 ]
   aTmp[ 27 ]     := aTmpHead[ 10 ]
   aTmp[ 51  ]    := aTmpHead[ 8 ]

   aTmp[ 5 ]     := ( dbfArticulo )->Codigo
   aTmp[ 6 ]     := ( dbfArticulo )->Nombre

   if !Empty( ( dbfArticulo )->cDesCmd )
      aTmp[ 57 ]  := ( dbfArticulo )->cDesCmd
   else
      aTmp[ 57 ]  := ( dbfArticulo )->Nombre
   end

   aTmp[ 7 ]     := nRetPreArt( aTmpHead[ 12 ], aTmpHead[ 24 ], .T., dbfArticulo, dbfDiv, dbfKit, dbfIva )
   if lNegative
      aTmp[ 8 ]  := -1
   else
      aTmp[ 8 ]  := 1
   end

   aTmp[ 9 ]     := 0
   aTmp[ 10 ]     := nIva( dbfIva, ( dbfArticulo )->TipoIva )
   aTmp[ 12 ]     := .F.
   aTmp[ 19 ]     := Space( 10 )
   aTmp[ 20 ]     := Space( 10 )
   aTmp[ 21 ]     := Space( 10 )
   aTmp[ 22 ]     := Space( 10 )

   if ( dbfArticulo )->lFacCnv
      aTmp[ 23 ]  := ( dbfArticulo )->nFacCnv
   end

   aTmp[ 26 ]     := ( dbfArticulo )->nCtlStock
   aTmp[ 30 ]     := ( dbfArticulo )->pCosto
   aTmp[ 31 ]     := 1
   aTmp[ 32 ]     := .F.
   aTmp[ 33 ]     := .F.
   aTmp[ 34 ]     := .F.
   aTmp[ 35 ]     := .F.
   aTmp[ 36 ]     := ( dbfArticulo )->nMesGrt
   aTmp[ 37]     := .F.
   aTmp[ 39 ]     := ( dbfArticulo )->Familia
   aTmp[ 40 ]     := RetFld( ( dbfArticulo )->Familia, dbfFamilia, "CCODGRP" )

   if ( dbfArticulo )->lLote
      aTmp[ 42 ]    := ( dbfArticulo )->cLote
   end

   aTmp[ 52 ]     := .F.

   aTmp[ 68 ] := ( dbfArticulo )->cTipImp1
   aTmp[ 69 ] := ( dbfArticulo )->cTipImp2





   WinGather( aTmp, , dbfTmpL, , nMode )

   lRecTotal( aTmpHead )

return nil











Static Function GetSalaVenta( aTmp, aGet, lPuntosLibres )

   local oError
   local oBlock
   local lReturn           := .T.



   oBlock                  := ErrorBlock( {| oError | ApoloBreak( oError ) } )
   BEGIN SEQUENCE





   if GuardaVenta( aTmp, aGet )





      if oSalaVentas:Sala( oBtnTarifa, lPuntosLibres, .T., dbfTikT )

         do case
            case IsFalse( oSalaVentas:lPuntosVenta )





            if !Empty( oSalaVentas:cSelectedSala )

               aTmp[ 48   ]           := oSalaVentas:cSelectedSala
               aTmp[ 12    ]           := oSalaVentas:nSelectedPrecio

               if ( dbfTmpL )->( ordKeyCount() ) <> 0

                  Recalcula( aTmp )

                  TmpTiket( aTmp, aGet, nSaveMode, .F. )

               end

            end

         case IsTrue( oSalaVentas:lPuntosVenta )

            if IsFalse( lPuntosLibres )

               if !Empty( oSalaVentas:cSelected() )

                  if ApoloMsgNoYes( "¿Desea cambiar la ubicación actual a la sala " + Alltrim( oSalaVentas:cSelectedSala ) + ", " + Alltrim( oSalaVentas:cSelectedPunto ) + " ?" )

                     aTmp[ 48   ]        := oSalaVentas:cSelectedSala
                     aTmp[ 49  ]        := oSalaVentas:cSelectedPunto

                  end

               end

            else





               if !Empty( oSalaVentas:cSelected() )

                  if !Empty( oSalaVentas:cSelectedTicket() ) .AND. ( dbSeekInOrd( oSalaVentas:cSelectedTicket(), "cNumTik", dbfTikT ) )

                     aScatter( dbfTikT, aTmp )

                     if !BeginTrans( aTmp, aGet, 2, .T. )
                        nSaveMode               := 2
                     end

                  else

                     aScatter( dbfTikT, aTmp )

                     if !BeginTrans( aTmp, aGet, 1, .T. )
                        nSaveMode               := 1
                     end

                  end

               else

                  aScatter( dbfTikT, aTmp )

                  if !BeginTrans( aTmp, aGet, 1, .T. )
                     nSaveMode                  := 1
                  end

               end

               if lReturn

                  aTmp[ 48   ]              := oSalaVentas:cSelectedSala
                  aTmp[ 49  ]              := oSalaVentas:cSelectedPunto
                  aTmp[ 12    ]              := oSalaVentas:nSelectedPrecio

               end

            end

         end





            oSalaVentas:ConfigButton( oBtnTarifa, oBtnRenombrar )





            cTitleDialog( aTmp )





            lRecTotal( aTmp )

      end

   end

   RECOVER USING oError

      msgStop( "Error al montar la salas de venta" + Chr(13)+Chr(10) + ErrorMessage( oError ) )

   end

   ErrorBlock( oBlock )

Return ( lReturn )




Static Function pdaGetSalaVenta( lPuntosLibres )

   IIF( lPuntosLibres == nil, lPuntosLibres := .F., ) ;

      if oSalaVentas:Sala( , lPuntosLibres, dbfTikT )

         if IsFalse( oSalaVentas:lPuntosVenta ) .OR. Empty( oSalaVentas:cSelected() )

            Return nil

         end

      else

         Return nil

      end

Return ( oSalaVentas )





FUNCTION mkTpv( cPath, lAppend, cPathOld, oMeter )

    local dbfTikT
    local dbfTikL
   local dbfTikP
   local dbfTikC
   local dbfImp
   local dbfMesas
   local oldTikT
   local oldTikL
   local oldTikP
   local oldTikC
   local oldImp
   local oldMesas

   IIF( lAppend == nil, lAppend := .F., ) ;
   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if oMeter <> nil
        oMeter:cText    := "Generando Bases"
      SysRefresh()
   end

   if !lExistTable( cPath + "TIKET.DBF" )
      dbCreate( cPath + "TIKET.DBF", aSqlStruct( aItmTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEL.DBF" )
      dbCreate( cPath + "TIKEL.DBF", aSqlStruct( aColTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEP.DBF" )
      dbCreate( cPath + "TIKEP.DBF", aSqlStruct( aPgoTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEC.DBF" )
      dbCreate( cPath + "TIKEC.DBF", aSqlStruct( aPgoCli() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKES.DBF" )
      dbCreate( cPath + "TIKES.DBF", aSqlStruct( aSerTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEM.DBF" )
      dbCreate( cPath + "TIKEM.DBF", aSqlStruct( aMesTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKETIMP.DBF" )
      dbCreate( cPath + "TIKETIMP.DBF", aSqlStruct( aImpTik() ), cDriver() )
   end

   rxTpv( cPath, oMeter )

   if lAppend .AND. lIsDir( cPathOld )

      dbUseArea( .T., cDriver(), cPath + "TikeT.Dbf", cCheckArea( "TIKET",  @dbfTikT ), .F. )
      ( dbfTikT )->( ordListAdd( cPath + "TikeT.Cdx" ) )
      ( dbfTikT )->( ordSetFocus( "cLiqVal" ) )

      dbUseArea( .T., cDriver(), cPath + "TikeL.Dbf", cCheckArea( "TIKETL", @dbfTikL ), .F. )
      ( dbfTikL )->( ordListAdd( cPath + "TikeL.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "TikeP.Dbf", cCheckArea( "TIKETP", @dbfTikP ), .F. )
      ( dbfTikP )->( ordListAdd( cPath + "TikeP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "TikeC.Dbf", cCheckArea( "TiketC", @dbfTikC ), .F. )
      ( dbfTikC )->( ordListAdd( cPath + "TikeC.Cdx" ) )

      dbUseArea( .T., cDriver(), cPath + "TikeM.Dbf", cCheckArea( "TiketM", @dbfMesas ), .F. )
      ( dbfMesas )->( ordListAdd( cPath + "TikeM.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TikeT.Dbf", cCheckArea( "TIKET",  @oldTikT ), .F. )
      ( oldTikT )->( ordListAdd( cPathOld + "TikeT.Cdx" ) )
      ( oldTikT )->( ordSetFocus( "cLiqVal" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TikeL.Dbf", cCheckArea( "TIKETL", @oldTikL ), .F. )
      ( oldTikL )->( ordListAdd( cPathOld + "TikeL.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TikeP.Dbf", cCheckArea( "TIKETP", @oldTikP ), .F. )
      ( oldTikP )->( ordListAdd( cPathOld + "TikeP.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TikeC.Dbf", cCheckArea( "TiketC", @oldTikC ), .F. )
      ( oldTikC )->( ordListAdd( cPathOld + "TikeC.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TikeM.Dbf", cCheckArea( "TikeM", @oldMesas ), .F. )
      ( oldMesas )->( ordListAdd( cPathOld + "TikeM.Cdx" ) )

      dbUseArea( .T., cDriver(), cPathOld + "TiketImp.Dbf", cCheckArea( "TiketImp", @oldImp ), .F. )
      ( oldImp )->( ordListAdd( cPath + "TiketImp.Cdx" ) )

      ( oldTikT )->( dbGoTop() )
      while !( oldTikT )->( eof() )

         dbCopy( oldTikT, dbfTikT, .T. )

         if ( oldTikL )->( dbSeek( ( oldTikT )->cSerTik + ( oldTikT )->cNumTik + ( oldTikT )->cSufTik ) )
            while ( oldTikL )->cSerTil + ( oldTikL )->cNumTil + ( oldTikL )->cSufTil == ( oldTikT )->cSerTik + ( oldTikT )->cNumTik + ( oldTikT )->cSufTik .AND. !( oldTikL )->( eof() )
               dbCopy( oldTikL, dbfTikL, .T. )
               ( oldTikL )->( dbSkip() )
            end
         end

         if ( oldTikP )->( dbSeek( ( oldTikT )->cSerTik + ( oldTikT )->cNumTik + ( oldTikT )->cSufTik ) )
            while ( oldTikP )->cSerTik + ( oldTikP )->cNumTik + ( oldTikP )->cSufTik == ( oldTikT )->cSerTik + ( oldTikT )->cNumTik + ( oldTikT )->cSufTik .AND. !( oldTikP )->( eof() )
               dbCopy( oldTikP, dbfTikP, .T. )
               ( oldTikP )->( dbSkip() )
            end
         end

         ( oldTikT )->( dbSkip() )

      end





      ( oldTikC )->( dbGoTop() )
      while !( oldTikC )->( eof() )
         dbCopy( oldTikC, dbfTikC, .T. )
         ( oldTikC )->( dbSkip() )
      end





      ( oldMesas )->( dbGoTop() )
      while !( oldMesas )->( eof() )
         dbCopy( oldMesas, dbfMesas, .T. )
         ( oldMesas )->( dbSkip() )
      end





      ( dbfTikT )->( dbEval( {|| ( dbfTikT )->cTurTik := Space( 6 ) },,,,, .F. ) )





      ( dbfTikT  )->( dbCloseArea() )
      ( dbfTikL  )->( dbCloseArea() )
      ( dbfTikP  )->( dbCloseArea() )
      ( dbfTikC  )->( dbCloseArea() )
      ( dbfImp   )->( dbCloseArea() )
      ( dbfMesas )->( dbCloseArea() )

      ( oldTikT  )->( dbCloseArea() )
      ( oldTikL  )->( dbCloseArea() )
      ( oldTikP  )->( dbCloseArea() )
      ( oldTikC  )->( dbCloseArea() )
      ( oldImp   )->( dbCloseArea() )
      ( oldMesas )->( dbCloseArea() )

   end

Return nil



FUNCTION rxTpv( cPath, oMeter )

    local dbfTikT
    local dbfTikL
   local dbfTikP
   local dbfTikC
   local dbfTikM
   local dbfTikS
   local dbfImp

   IIF( cPath == nil, cPath := cPatEmp(), ) ;

   if !lExistTable( cPath + "TIKET.DBF" )
      dbCreate( cPath + "TIKET.DBF", aSqlStruct( aItmTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEL.DBF" )
      dbCreate( cPath + "TIKEL.DBF", aSqlStruct( aColTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEP.DBF" )
      dbCreate( cPath + "TIKEP.DBF", aSqlStruct( aPgoTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEC.DBF" )
      dbCreate( cPath + "TIKEC.DBF", aSqlStruct( aPgoCli() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKEM.DBF" )
      dbCreate( cPath + "TIKEM.DBF", aSqlStruct( aMesTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKES.DBF" )
      dbCreate( cPath + "TIKES.DBF", aSqlStruct( aSerTik() ), cDriver() )
   end

   if !lExistTable( cPath + "TIKETIMP.DBF" )
      dbCreate( cPath + "TIKETIMP.DBF", aSqlStruct( aImpTik() ), cDriver() )
   end

   fEraseIndex( cPath + "TikeT.Cdx" )

   fEraseIndex( cPath + "TikeL.Cdx" )

   fEraseIndex( cPath + "TikeP.Cdx" )

   fEraseIndex( cPath + "TikeC.Cdx" )

   fEraseIndex( cPath + "TikeM.Cdx" )

   fEraseIndex( cPath + "TikeS.Cdx" )

   fEraseIndex( cPath + "TiketImp.Cdx" )





   dbUseArea( .T., cDriver(), cPath + "TIKET.DBF", cCheckArea( "TIKET", @dbfTikT ), .F. )

   if !( dbfTikT )->( neterr() )
      ( dbfTikT )->( __dbPack() )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CNUMTIK", "CSERTIK + CNUMTIK + CSUFTIK", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "DFECTIK", "DFECTIK", {|| Field->DFECTIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CCLITIK", "CCLITIK", {|| Field->CCLITIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CNOMTIK", "CNOMTIK", {|| Field->CNOMTIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CNCJTIK", "CCCJTIK", {|| Field->CNCJTIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CCCJTIK", "CCCJTIK", {|| Field->CCCJTIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CRETMAT", "CRETMAT", {|| Field->CRETMAT } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. !Empty( cTurTik )", {||!Deleted() .AND. !Empty( Field->cTurTik ) }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CTURTIK", "CTURTIK + CSUFTIK + CNCJTIK", {|| Field->CTURTIK + Field->cSufTik + Field->CNCJTIK } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted() }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "CNUMDOC", "CNUMDOC", {|| Field->CNUMDOC } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted() }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "LSNDDOC", "LSNDDOC", {|| Field->LSNDDOC } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {||!Deleted() }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cCodUsr", "cCcjTik + Dtos( dFecCre ) + cTimCre", {|| Field->cCcjTik + Dtos( Field->dFecCre ) + Field->cTimCre } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. cTipTik == '6'", {||!Deleted() .AND. Field->cTipTik == "6" }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cDocVal", "cValDoc", {|| Field->cValDoc } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. cTipTik == '6'", {||!Deleted() .AND. Field->cTipTik == "6" }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cNumVal", "cSerTik + cNumTik + cSufTik", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. cTipTik == '6' .and. !lLiqTik", {||!Deleted() .AND. Field->cTipTik == "6" .AND. !Field->lLiqTik }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cLiqVal", "cSerTik + cNumTik + cSufTik", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. lLiqTik", {|| !Deleted() .AND. Field->lLiqTik }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cTurVal", "cTurVal + cSufTik + cNcjTik", {|| Field->cTurVal + Field->cSufTik + Field->cNcjTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. ( cTipTik == '1' .or. cTipTik == '7' ) .and. !lPgdTik .and. !lCloTik", {|| !Deleted() .AND. Field->cTipTik == "1" .AND. !Field->lPgdTik .AND. !Field->lCloTik } ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cCodSal", "cCodSala + cPntVenta", {|| Field->cCodSala + Field->cPntVenta } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted().and. cTipTik == '6' .and. !lLiqTik", {|| !Deleted() .AND. Field->cTipTik == "6" .AND. !Field->lLiqTik }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cCliVal", "cCliTik", {|| Field->cCliTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted().and. cTipTik == '6' .and. !lLiqTik", {|| !Deleted() .AND. Field->cTipTik == "6" .AND. !Field->lLiqTik }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cNomVal", "cNomTik", {|| Field->cNomTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. cTipTik == '6' .and. !lLiqTik", {|| !Deleted() .AND. Field->cTipTik == "6" .AND. !Field->lLiqTik }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cTikVal", "cTikVal", {|| Field->cTikVal } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. !Field->lLiqTik .and. ( cTipTik == '1' .or. cTipTik == '7' )", {||!Deleted() .AND. !Field->lLiqTik .AND. ( Field->cTipTik == "1" .OR. Field->cTipTik == "7" ) }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "lCliTik", "cCliTik", {|| Field->cCliTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfTikT )->( ordCreate( cPath + "TIKET.CDX", "cValTik", "cTikVal", {|| Field->cTikVal } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. !lCloTik", {|| !Deleted() .AND. !Field->lCloTik } ) )
      ( dbfTikT )->( ordCreate( cPath + "TikeT.Cdx", "lCloTik", "cSerTik + cNumTik + cSufTik", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. lAbierto", {|| !Deleted() .AND. Field->lAbierto } ) )
      ( dbfTikT )->( ordCreate( cPath + "TikeT.Cdx", "nUbiTik", "Str( nUbiTik )", {|| Str( Field->nUbiTik ) } ) )

      ( dbfTikT )->( ordCondSet( "!Deleted() .and. !lCloTik", {|| !Deleted() .AND. !Field->lCloTik } ) )
      ( dbfTikT )->( ordCreate( cPath + "TikeT.Cdx", "lCloUbiTik", "Str( nUbiTik ) + cSerTik + cNumTik + cSufTik", {|| Str( Field->nUbiTik ) + Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikT )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de tikets" )
   end

   dbUseArea( .T., cDriver(), cPath + "TIKEL.DBF", cCheckArea( "TIKEL", @dbfTikL ), .F. )

   if !( dbfTikL )->( neterr() )
      ( dbfTikL )->( __dbPack() )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CNUMTIL", "CSERTIL + CNUMTIL + CSUFTIL", {|| Field->CSERTIL + Field->CNUMTIL + Field->CSUFTIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CCBATIL", "CCBATIL", {|| Field->CCBATIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CCOMTIL", "CCOMTIL", {|| Field->CCOMTIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted() .and. cTipTil != '2' .and. cTipTil != '3'", {||!Deleted() .AND. Field->cTipTil <> "2" .AND. Field->cTipTil <> "3" } ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CSTKFAST", "CCBATIL", {|| Field->CCBATIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted() .and. cTipTil != '2' .and. cTipTil != '3'", {||!Deleted() .AND. Field->cTipTil <> "2" .AND. Field->cTipTil <> "3" } ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CSTKCOM", "CCOMTIL", {|| Field->CCOMTIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted() .and. cTipTil == '6' ", {||!Deleted()  .AND. Field->cTipTil == "6" } ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "cTikVal", "CSERTIL + CNUMTIL + CSUFTIL", {|| Field->CSERTIL + Field->CNUMTIL + Field->CSUFTIL } ) )

      ( dbfTikL )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "nOrTImp", "nOrTImp", {|| Field->nOrTImp } ) )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TIKEL.CDX", "CNUMCBA", "CSERTIL + CNUMTIL + CSUFTIL + CCBATIL", {|| Field->CSERTIL + Field->CNUMTIL + Field->CSUFTIL + Field->CCBATIL } ) )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TikeL.Cdx", "cNumDev", "cNumDev + Str( nNumLin )", {|| Field->cNumDev + Str( Field->nNumLin ) } ) )

      ( dbfTikL )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikL )->( ordCreate( cPath + "TikeL.Cdx", "cDevTik", "cNumDev", {|| Field->cNumDev } ) )

      ( dbfTikL )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de tikets" )
   end

   dbUseArea( .T., cDriver(), cPath + "TIKEP.DBF", cCheckArea( "TIKEP", @dbfTikP ), .F. )
   if !( dbfTikP )->( neterr() )
      ( dbfTikP )->( __dbPack() )

      ( dbfTikP )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikP )->( ordCreate( cPath + "TIKEP.CDX", "CNUMTIK", "CSERTIK + CNUMTIK + CSUFTIK", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik } ) )

      ( dbfTikP )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikP )->( ordCreate( cPath + "TIKEP.CDX", "DPGOTIK", "DPGOTIK", {|| Field->DPGOTIK } ) )

      ( dbfTikP )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikP )->( ordCreate( cPath + "TIKEP.CDX", "CTURPGO", "cTurPgo + cSufTik + cCodCaj", {|| Field->cTurPgo + Field->cSufTik + Field->cCodCaj } ) )

      ( dbfTikP )->( ordCondSet("!Deleted()", {||!Deleted()}  ) )
      ( dbfTikP )->( ordCreate( cPath + "TIKEP.CDX", "cFpgPgo", "cFpgPgo", {|| Field->cFpgPgo } ) )

      ( dbfTikP )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTikP )->( ordCreate( cPath + "TIKEP.CDX", "NNUMPGO", "Str( nNumPgo ) + cSufPgo", {|| Str( Field->nNumPgo ) + Field->cSufPgo } ) )

      ( dbfTikP )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de tikets" )
   end

   dbUseArea( .T., cDriver(), cPath + "TIKEC.DBF", cCheckArea( "TIKEC", @dbfTikC ), .F. )
   if !( dbfTikC )->( neterr() )

      ( dbfTikC )->( __dbPack() )

      ( dbfTikC )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTikC )->( ordCreate( cPath + "TIKEC.CDX", "nNumPgo", "Str( nNumPgo ) + cSufPgo", {|| Str( Field->nNumPgo ) + Field->cSufPgo } ) )

      ( dbfTikC )->( ordCondSet( "!Deleted()", {|| !Deleted() }  ) )
      ( dbfTikC )->( ordCreate( cPath + "TIKEC.CDX", "cCodCli", "cCodCli", {|| Field->cCodCli } ) )

      ( dbfTikC )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de tikets" )
   end

  dbUseArea( .T., cDriver(), cPath + "TIKETIMP.DBF", cCheckArea( "TIKETIMP", @dbfImp ), .F. )
   if !( dbfImp )->( neterr() )
      ( dbfImp )->( __dbPack() )

      ( dbfImp )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfImp )->( ordCreate( cPath + "TIKETIMP.CDX", "CNUMTIL", "CSERTIK + CNUMTIK + CSUFTIK", {|| Field->CSERTIK + Field->CNUMTIK + Field->CSUFTIK } ) )

      ( dbfImp )->( ordCondSet( "!Deleted() .AND. !LIMP ", {||!Deleted() .AND. !Field->LIMP } ) )
      ( dbfImp )->( ordCreate( cPath + "TIKETIMP.CDX", "CIMPTIK", "CSERTIK + CNUMTIK + CSUFTIK", {|| Field->CSERTIK + Field->CNUMTIK + Field->CSUFTIK } ) )

      ( dbfImp )->( ordCondSet( "!Deleted() .AND. !LIMP .AND. !LCOMANDA", {||!Deleted() .AND. !Field->LIMP .AND. !Field->LCOMANDA } ) )
      ( dbfImp )->( ordCreate( cPath + "TIKETIMP.CDX", "CCOMANDA", "CSERTIK + CNUMTIK + CSUFTIK", {|| Field->CSERTIK + Field->CNUMTIK + Field->CSUFTIK } ) )

      ( dbfImp )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de Impresion" )
   end

   dbUseArea( .T., cDriver(), cPath + "TikeM.DBF", cCheckArea( "TIKEM", @dbfTikM ), .F. )
   if !( dbfTikM )->( neterr() )
      ( dbfTikM )->( __dbPack() )

      ( dbfTikM )->( ordCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTikM )->( ordCreate( cPath + "TikeM.CDX", "cMesa", "cCodSala + cPntVenta", {|| Field->cCodSala + Field->cPntVenta } ) )

      ( dbfTikM )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de mesas libres" )
   end

   dbUseArea( .T., cDriver(), cPath + "TikeS.Dbf", cCheckArea( "TikeS", @dbfTikS ), .F. )
   if !( dbfTikS )->( neterr() )
      ( dbfTikS )->( __dbPack() )

      ( dbfTikS )->( ordCondSet( "!Deleted()", {||!Deleted()}  ) )
      ( dbfTikS )->( ordCreate( cPath + "TikeS.Cdx", "nNumTik", "cSerTik + cNumTik + cSufTik + Str( nNumLin )", {|| Field->cSerTik + Field->cNumTik + Field->cSufTik + Str( Field->nNumLin ) } ) )

      ( dbfTikS )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTikS )->( ordCreate( cPath + "TikeS.Cdx", "cRefSer", "cCbaTil + cAlmLin + cNumSer", {|| Field->cCbaTil + Field->cAlmLin + Field->cNumSer } ) )

      ( dbfTikS )->( ordCondSet( "!Deleted()", {|| !Deleted() } ) )
      ( dbfTikS )->( ordCreate( cPath + "TikeS.Cdx", "cNumSer", "cNumSer", {|| Field->cNumSer } ) )

      ( dbfTikS )->( dbCloseArea() )
   else
      msgStop( "Imposible abrir en modo exclusivo la tabla de numeros de series" )
   end

RETURN NIL



function aPgoTik()

   local aPgoTik  := {}

   aAdd( aPgoTik, { "cSerTik",  "C",      1,     0, "Serie del tiket"            } )
   aAdd( aPgoTik, { "cNumTik",  "C",     10,     0, "Número del tiket"           } )
   aAdd( aPgoTik, { "cSufTik",  "C",      2,     0, "Sufijo del tiket"           } )
   aAdd( aPgoTik, { "nNumRec",  "N",      2,     0, "Número de orden del pago"   } )
   aAdd( aPgoTik, { "cCodCaj",  "C",      3,     0, "Código de caja"             } )
   aAdd( aPgoTik, { "dPgoTik",  "D",      8,     0, "Fecha del pago"             } )
   aAdd( aPgoTik, { "cTimTik",  "C",      5,     0, "Hora del pago"              } )
   aAdd( aPgoTik, { "cFpgPgo",  "C",      2,     0, "Forma de pago del recibo"   } )
   aAdd( aPgoTik, { "nImpTik",  "N",     16,     6, "Importe del pago"           } )
   aAdd( aPgoTik, { "nDevTik",  "N",     16,     6, "Importe de la devolución"   } )
   aAdd( aPgoTik, { "cPgdPor",  "C",     50,     0, "Pagado por"                 } )
   aAdd( aPgoTik, { "cDivPgo",  "C",      3,     0, "Divisa de pago"             } )
   aAdd( aPgoTik, { "nVdvPgo",  "N",     16,     6, "Valor de la divisa"         } )
   aAdd( aPgoTik, { "lConPgo",  "L",      1,     0, "Pago contabilizado (S/N)"   } )
   aAdd( aPgoTik, { "cCtaPgo",  "C",     12,     0, "Cuenta de pago"             } )
   aAdd( aPgoTik, { "lCloPgo",  "L",      1,     0, "Pago cerrado (S/N)"         } )
   aAdd( aPgoTik, { "lSndPgo",  "L",      1,     0, "Enviar documento"           } )
   aAdd( aPgoTik, { "cTurPgo",  "C",      6,     0, "Sesión del pago"            } )
   aAdd( aPgoTik, { "cCtaRec",  "C",     12,     0, "Cuenta de contabilidad"     } )
   aAdd( aPgoTik, { "nNumPgo",  "N",      9,     0, "Número pago cliente"        } )
   aAdd( aPgoTik, { "cSufPgo",  "C",      2,     0, "Sufijo pago cliente"        } )

RETURN ( aPgoTik )



function aMesTik()

   local aMesTik  := {}

   aAdd( aMesTik , { "cCodSala", "C",      3,     0, "Código de sala" }            )
   aAdd( aMesTik , { "cPntVenta","C",     30,     0, "Punto de venta" }            )

RETURN ( aMesTik )



function aPgoCli()

   local aPgoCli  := {}

   aAdd( aPgoCli, { "nNumPgo",  "N",      9,     0, "Pago cliente.Número"                    } )
   aAdd( aPgoCli, { "cSufPgo",  "C",      2,     0, "Pago cliente.Sufijo"                    } )
   aAdd( aPgoCli, { "cCodCaj",  "C",      3,     0, "Pago cliente.Número de caja"            } )
   aAdd( aPgoCli, { "dPgoTik",  "D",      8,     0, "Pago cliente.Fecha del pago"            } )
   aAdd( aPgoCli, { "cFpgPgo",  "C",      2,     0, "Pago cliente.Forma de pago del recibo"  } )
   aAdd( aPgoCli, { "nImpPgo",  "N",     16,     6, "Pago cliente.Importe del pago"          } )
   aAdd( aPgoCli, { "nDevPgo",  "N",     16,     6, "Pago cliente.Importe de la devolución"  } )
   aAdd( aPgoCli, { "nTotPgo",  "N",     16,     6, "Pago cliente.Total importe pago"        } )
   aAdd( aPgoCli, { "cCodCli",  "C",     12,     0, "Pago cliente.Código cliente"            } )
   aAdd( aPgoCli, { "cDivPgo",  "C",      3,     0, "Pago cliente.Divisa de pago"            } )
   aAdd( aPgoCli, { "nVdvPgo",  "N",     16,     6, "Pago cliente.Valor de la divisa"        } )
   aAdd( aPgoCli, { "lCloPgo",  "L",      1,     0, "Pago cliente.Pago cerrado (S/N)"        } )
   aAdd( aPgoCli, { "cCtaRec",  "C",     12,     0, "Pago cliente.Cuenta de contabilidad"    } )
   aAdd( aPgoCli, { "cTurPgo",  "C",      6,     0, "Pago cliente.Sesión"                    } )

RETURN ( aPgoCli )



function aItmTik()

   local aItmTik  := {}

   aAdd( aItmTik , { "cSerTik",  "C",      1,     0, "Serie del tiket" }                                       )
   aAdd( aItmTik , { "cNumTik",  "C",     10,     0, "Número del tiket" }                                      )
   aAdd( aItmTik , { "cSufTik",  "C",      2,     0, "Sufijo del tiket" }                                      )
   aAdd( aItmTik , { "cTipTik",  "C",      1,     0, "Tipo del documento" }                                    )
   aAdd( aItmTik , { "cTurTik",  "C",      6,     0, "Sesión del tiket" }                                      )
   aAdd( aItmTik , { "dFecTik",  "D",      8,     0, "Fecha del tiket" }                                       )
   aAdd( aItmTik , { "cHorTik",  "C",      5,     0, "Hora del tiket" }                                        )
   aAdd( aItmTik , { "cCcjTik",  "C",      3,     0, "Código del cajero" }                                     )
   aAdd( aItmTik , { "cNcjTik",  "C",      3,     0, "Código de caja" }                                        )
   aAdd( aItmTik , { "cAlmTik",  "C",      3,     0, "Código del almacén" }                                    )
   aAdd( aItmTik , { "cCliTik",  "C",     12,     0, "Código del cliente" }                                    )
   aAdd( aItmTik , { "nTarifa",  "N",      1,     0, "Tarifa de precios" }                                     )
   aAdd( aItmTik , { "cNomTik",  "C",     80,     0, "Nombre del cliente" }                                    )
   aAdd( aItmTik , { "cDirCli",  "C",    100,     0, "Domicilio del cliente" }                                 )
   aAdd( aItmTik , { "cPobCli",  "C",     35,     0, "Población del cliente" }                                 )
   aAdd( aItmTik , { "cPrvCli",  "C",     20,     0, "Provincia del cliente" }                                 )
   aAdd( aItmTik , { "nCodProv", "N",      2,     0, "Número de provincia cliente" }                           )
   aAdd( aItmTik , { "cPosCli",  "C",     15,     0, "Código postal del cliente" }                             )
   aAdd( aItmTik , { "cDniCli",  "C",     30,     0, "DNI/Cif del cliente" }                                   )
   aAdd( aItmTik , { "lModCli",  "L",      1,     0, "Lógico de modificar datos del cliente" }                 )
   aAdd( aItmTik , { "cFpgTik",  "C",      2,     0, "Forma de pago del tiket" }                               )
   aAdd( aItmTik , { "nCobTik",  "N",     16,     6, "Importe cobrado" }                                       )
   aAdd( aItmTik , { "nCamTik",  "N",     16,     6, "Devolución" }                                            )
   aAdd( aItmTik , { "cDivTik",  "C",      3,     0, "Código de la divisa" }                                   )
   aAdd( aItmTik , { "nVdvTik",  "N",     10,     3, "Valor de la divisa" }                                    )
   aAdd( aItmTik , { "lCloTik",  "L",      1,     0, "Lógico de cerrado" }                                     )
   aAdd( aItmTik , { "lSndDoc",  "L",      1,     0, "Lógico de enviado" }                                     )
   aAdd( aItmTik , { "lPgdTik",  "L",      1,     0, "Lógico de pagado" }                                      )
   aAdd( aItmTik , { "cRetPor",  "C",    100,     0, "Retirado por" }                                          )
   aAdd( aItmTik , { "cRetMat",  "C",     20,     0, "Matrícula" }                                             )
   aAdd( aItmTik , { "cNumDoc",  "C",     12,     0, "Número del documento" }                                  )
   aAdd( aItmTik , { "cCodAge",  "C",      3,     0, "Código del agente" }                                     )
   aAdd( aItmTik , { "cCodRut",  "C",      4,     0, "Código de la ruta" }                                     )
   aAdd( aItmTik , { "cCodTar",  "C",      5,     0, "Código de la tarifa" }                                   )
   aAdd( aItmTik , { "cCodObr",  "C",     10,     0, "Código de la obra" }                                     )
   aAdd( aItmTik , { "nComAge",  "N",      6,     2, "Porcentaje de comisión del agente" }                     )
   aAdd( aItmTik , { "lLiqTik",  "L",      1,     0, "Tiket liquidado" }                                       )
   aAdd( aItmTik , { "cCodPro",  "C",      9,     0, "Código de proyecto en contabilidad"}                     )
   aAdd( aItmTik , { "lConTik",  "L",      1,     0, "Tiket contabilizado" }                                   )
   aAdd( aItmTik , { "dFecCre",  "D",      8,     0, "Fecha de creación del documento" }                       )
   aAdd( aItmTik , { "cTimCre",  "C",      5,     0, "Hora de creación del documento" }                        )
   aAdd( aItmTik , { "lSelDoc",  "L",      1,     0, "" }                                                      )
   aAdd( aItmTik , { "cValDoc",  "C",     13,     0, "Número del vale relacionado" }                           )
   aAdd( aItmTik , { "cTurVal",  "C",      6,     0, "Sesión de la liquidación del vale" }                     )
   aAdd( aItmTik , { "lCnvTik",  "L",      1,     0, "Lógico para tiket convertido a factura" }                )
   aAdd( aItmTik , { "cCodDlg",  "C",      2,     0, "Código delegación" }                                     )
   aAdd( aItmTik , { "cCodGrp",  "C",      4,     0, "Código de grupo de cliente" }                            )
   aAdd( aItmTik , { "cCodSala", "C",      3,     0, "Código de sala" }                                        )
   aAdd( aItmTik , { "cPntVenta","C",     30,     0, "Punto de venta" }                                        )
   aAdd( aItmTik , { "lAbierto", "L",      1,     0, "Lógico de ticket abierto" }                              )
   aAdd( aItmTik , { "cAliasTik","C",     80,     0, "Alias del tiket" }                                       )
   aAdd( aItmTik , { "nNumCom",  "N",      2,     0, "Número de comensales" }                                  )
   aAdd( aItmTik , { "cAlbTik",  "C",     12,     0, "Número del albarán del que proviene" }                   )
   aAdd( aItmTik , { "cPedTik",  "C",     12,     0, "Número del pedido del que proviene" }                    )
   aAdd( aItmTik , { "cPreTik",  "C",     12,     0, "Número del presupuesto del que proviene" }               )
   aAdd( aItmTik , { "cDtoEsp",  "C",     50,     0, "Descripción de porcentaje de descuento especial" }       )
   aAdd( aItmTik , { "nDtoEsp",  "N",      6,     2, "Porcentaje de descuento especial" }                      )
   aAdd( aItmTik , { "cDpp",     "C",     50,     0, "Descripción de porcentaje de descuento por pronto pago" })
   aAdd( aItmTik , { "nDpp",     "N",      6,     2, "Porcentaje de descuento por pronto pago" }               )
   aAdd( aItmTik , { "nPctPrm",  "N",      6,     2, "Porcentaje de promoción por fidelización" }              )
   aAdd( aItmTik , { "cTikVal",  "C",     13,     0, "Numero del tiket de quien se genero el vale" }           )
   aAdd( aItmTik , { "cTlfCli",  "C",     20,     0, "Teléfono del cliente" }                                  )
   aAdd( aItmTik , { "lFreTik",  "L",      1,     0, "Ticket regalo" }                                         )
   aAdd( aItmTik , { "nTotNet",  "N",     16,     6, "Total neto" }                                            )
   aAdd( aItmTik , { "nTotIva",  "N",     16,     6, "Total " + cImp() }                                       )
   aAdd( aItmTik , { "nTotTik",  "N",     16,     6, "Total ticket" }                                          )
   aAdd( aItmTik , { "lLiqDev",  "L",      1,     0, "Liquidado por devolución" }                              )
   aAdd( aItmTik , { "nUbiTik",  "N",      1,     0, "Tipo de ubicación" }                                     )
   aAdd( aItmTik,  { "nRegIva",  "N",      1,     0, "Régimen de " + cImp() }                                  )

return ( aItmTik )



function aColTik()

   local aColTik  :={}

   aAdd( aColTik, { "cSerTil",  "C",      1,     0, "Serie del tiket",                    "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cNumTil",  "C",     10,     0, "Número del tiket",                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cSufTil",  "C",      2,     0, "Sufijo del tiket",                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cTipTil",  "C",      1,     0, "Tipo de documento",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCbaTil",  "C",     18,     0, "Código del barras del producto",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cNomTil",  "C",    250,     0, "Nombre del producto",                "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nPvpTil",  "N",     16,     6, "Precio de venta del producto",       "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nUntTil",  "N",     16,     6, "Unidades vendidas del producto",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nUndKit",  "N",     16,     6, "Unidades productos kit",             "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nIvaTil",  "N",      5,     2, "Porcentaje de " + cImp() + " del producto",     "",       "", "( cDbfCol )" } )
   aAdd( aColTik, { "cFamTil",  "C",      5,     0, "Família la que pertenece el producto", "",                "", "( cDbfCol )" } )
   aAdd( aColTik, { "lOfeTil",  "L",      1,     0, "Oferta ya aplicada",                 "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cComTil",  "C",     18,     0, "Código de barras de combinado",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cNcmTil",  "C",    100,     0, "Nombre del producto combinado",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nPcmTil",  "N",     16,     6, "Precio de venta del producto combinado", "",              "", "( cDbfCol )" } )
   aAdd( aColTik, { "cFcmTil",  "C",      5,     0, "Familia la que pertenece el producto combinado", "",      "", "( cDbfCol )" } )
   aAdd( aColTik, { "lFreTil",  "L",      1,     0, "Lineas sin cargo",                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nDtoLin",  "N",      6,     2, "Descuento en linea",                 "'@E 999.9'",        "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodPr1",  "C",     10,     0, "Código de la primera propiedad",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodPr2",  "C",     10,     0, "Código de la segunda propiedad",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cValPr1",  "C",     10,     0, "Valor de la primera propiedad",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cValPr2",  "C",     10,     0, "Valor de la segunda propiedad",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nFacCnv",  "N",     16,     6, "Factor de conversión",               "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nDtoDiv",  "N",     16,     6, "Descuento lineal de la compra",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lTipAcc",  "L",      1,     0, "",                                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nCtlStk",  "N",      1,     0, "",                                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cAlmLin",  "C",      3,     0, "Código de almacén en línea",         "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nValImp",  "N",     16,     6, "Importe del impuesto",               "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodImp",  "C",      3,     0, "Código de IVMH",                     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nCosDiv",  "N",     16,     6, "Precio de costo",                    "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nNumLin",  "N",      4,     0, "Número de la línea",                 "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lKitArt",  "L",      1,     0, "Línea con escandallo",               "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lKitChl",  "L",      1,     0, "Línea pertenciente a escandallo",    "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lKitPrc",  "L",      1,     0, "",                                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lImpLin",  "L",      1,     0, "Imprimir línea",                     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nMesGrt",  "N",      2,     0, "Meses de garantía",                  "'99'",              "", "( cDbfCol )" } )
   aAdd( aColTik, { "lControl", "L",      1,     0, "",                                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "mNumSer",  "M",     10,     0, "",                                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodFam",  "C",     16,     0, "Código de familia",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cGrpFam",  "C",      3,     0, "Código del grupo de familia",        "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nLote",    "N",      9,     0, "",                                   "@Z 999999999",      "", "( cDbfCol )" } )
   aAdd( aColTik, { "cLote",    "C",     12,     0, "Número de lote",                     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nNumPgo",  "N",      9,     0, "Número pago cliente",                "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cSufPgo",  "C",      2,     0, "Sufijo pago cliente",                "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nNumMed",  "N",      1,     0, "Número de mediciones",               "MasUnd()",          "", "( cDbfCol )" } )
   aAdd( aColTik, { "nMedUno",  "N",     16,     6, "Primera unidad de medición",         "MasUnd()",          "", "( cDbfCol )" } )
   aAdd( aColTik, { "nMedDos",  "N",     16,     6, "Segunda unidad de medición",         "MasUnd()",          "", "( cDbfCol )" } )
   aAdd( aColTik, { "nMedTre",  "N",     16,     6, "Tercera unidad de medición",         "MasUnd()",          "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodInv",  "C",      2,     0, "Código invitación",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nFcmCnv",  "N",     16,     6, "Factor de conversion para combinados","",                 "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodUsr",  "C",      3,     0, "Código de usuario",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lImpCom",  "L",      1,     0, "Lógico para comanda impresa",        "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nImpCom",  "N",      3,     0, "Numero de unidades impresas",        "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nImpCom1", "N",      1,     0, "Primera impresora comanda",          "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nImpCom2", "N",      1,     0, "Segunda impresora comanda",          "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cComent",  "C",    250,     0, "Comentario para el artículo",        "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cNomCmd",  "M",     10,     0, "Comentario para la comanda",         "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lInPromo", "L",      1,     0, "Lógico para linea en promoción",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lArtServ", "L",      1,     0, "Lógico para artículo servido",       "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cCodTImp", "C",      3,     0, "Codigo de tipo de comanda",          "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nOrTImp",  "N",      1,     0, "Orden de impresión tipo de comanda", "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cUnidad",  "C",      2,     0, "Unidades de venta",                  "" ,                 "", "( cDbfCol )" } )
   aAdd( aColTik, { "lDev",     "L",      1,     0, "Lógico para artículo devuelto",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cNumDev",  "C",     13,     0, "Número de devolución o vale",        "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nUndAnt",  "N",     16,     6, "Unidades anteriores",                "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lAnulado", "L",      1,     0, "Lógico línea anulada",               "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "lLinOfe",  "L",      1,     0, "Línea con oferta",                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cImpCom1", "C",     50,     0, "Primer tipo impresora comanda",      "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "cImpCom2", "C",     50,     0, "Segundo tipo impresora comanda",     "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "dFecTik",  "D",      8,     0, "Fecha del tiket",                    "",                  "", "( cDbfCol )" } )
   aAdd( aColTik, { "nCosTil",  "N",     16,     6, "Precio de costo de combinado",       "",                  "", "( cDbfCol )" } )

Return ( aColTik )



function aImpTik()

   local aImpTik  := {}

   aAdd( aImpTik, { "cSerTik",  "C",      1,    0, "Serie del tiket"                        } )
   aAdd( aImpTik, { "cNumTik",  "C",     10,    0, "Número del tiket"                       } )
   aAdd( aImpTik, { "cSufTik",  "C",      2,    0, "Sufijo del tiket"                       } )
   aAdd( aImpTik, { "lComanda", "L",      1,    0, "Lógio de comanda"                       } )
   aAdd( aImpTik, { "lImp",     "L",      1,    0, "Lógico de imprimido"                    } )
   aAdd( aImpTik, { "dFecTik",  "D",      8,    0, "Fecha mandado a impresion"              } )
   aAdd( aImpTik, { "cHorTik",  "C",      5,    0, "Hora mandado a impresion"               } )
   aAdd( aImpTik, { "dFTikImp", "D",      8,    0, "Fecha de impresion"                     } )
   aAdd( aImpTik, { "cHTikImp", "C",      5,    0, "Hora de impresion"                      } )

RETURN ( aImpTik )



function aSerTik()

   local aColTik  := {}

   aAdd( aColTik,  { "cSerTik", "C",      1,    0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cNumTik", "C",     10,    0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cSufTik", "C",      2,    0, "",                                 "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cTipTil", "C",      1,    0, "Tipo de ticket",                   "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "dFecTik", "D",      8,    0, "Fecha de ticket",                  "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "nNumLin", "N",      4,    0, "Número de la línea",               "'9999'",            "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cCbaTil", "C",     18,    0, "Referencia del artículo",          "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cAlmLin", "C",      3,    0, "Almacen del artículo",             "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "lUndNeg", "L",      1,    0, "Lógico de valor absoluto",         "",                  "", "( cDbfCol )" } )
   aAdd( aColTik,  { "cNumSer", "C",     30,    0, "Número de serie",                  "",                  "", "( cDbfCol )" } )

return ( aColTik )





FUNCTION nTotTik( cNumTik, cTikT, cTikL, cDiv, aTmp, cDivRet, lPic, lExcCnt )

   local bCond
   local nRecLin
   local nDouDiv
   local cCodDiv
   local nVdvDiv
   local cTipTik
   local nOrdAnt
   local nTotLin        := 0
   local nBasLin        := 0
   local nBrtLin        := 0
   local nIvmLin        := 0
   local nNumCom        := 0
   local nDtoEsp        := 0
   local nDpp           := 0
   local nDescuentoEsp  := 0
   local nDescuentoPp   := 0

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cTikL == nil, cTikL := dbfTikL, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( cNumTik == nil, cNumTik := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, ) ;
   IIF( lPic == nil, lPic := .F., ) ;

   public nTotTik       := 0
   public nTotPrm       := 0
   public nTotPax       := 0
   public nTotDtoEsp    := 0
   public nTotDpp       := 0
   public nTotNet       := 0
   public nTotIva       := 0
   public nTotIvm       := 0
   public aBrtTik       := { 0, 0, 0 }
   public aBasTik       := { 0, 0, 0 }
   public aImpTik       := { 0, 0, 0 }
   public aIvaTik       := { nil, nil, nil }
   public aIvmTik       := { 0, 0, 0 }
   public nTotCos       := 0
   public nTotRnt       := 0
   public nTotPctRnt    := 0

   nRecLin              := ( cTikL )->( Recno() )

   if aTmp <> nil
      cCodDiv           := aTmp[ 24 ]
      nVdvDiv           := aTmp[ 25 ]
      cTipTik           := aTmp[ 4 ]
      nNumCom           := aTmp[ 52 ]
      nDtoEsp           := aTmp[ 57 ]
      nDpp              := aTmp[ 59    ]
      bCond             := {|| !( cTikL )->( eof() ) }
      ( cTikL )->( dbGoTop() )
   else
      cCodDiv           := ( cTikT )->cDivTik
      nVdvDiv           := ( cTikT )->nVdvTik
      cTipTik           := ( cTikT )->cTipTik
      nNumCom           := ( cTikT )->nNumCom
      nDtoEsp           := ( cTikT )->nDtoEsp
      nDpp              := ( cTikT )->nDpp
      bCond             := {|| ( cTikL )->cSerTil + ( cTikL )->cNumTil + ( cTikL )->cSufTil == cNumTik .AND. !( cTikL )->( eof() ) }
      nOrdAnt           := ( cTikL )->( OrdSetFocus( "cNumTil" ) )
      ( cTikL )->( dbSeek( cNumTik ) )
   end

   nDouDiv              := nDouDiv( cCodDiv, cDiv )
   nDorDiv              := nRouDiv( cCodDiv, cDiv )
   cPorDiv              := cPorDiv( cCodDiv, cDiv )

   while Eval( bCond )

      if lValLine( cTikL ) .AND. !( cTikL )->lFreTil



         if ( lExcCnt == nil                                .OR. ( lExcCnt .AND. ( cTikL )->nCtlStk <> 2 )       .OR. (!lExcCnt .AND. ( cTikL )->nCtlStk == 2 ) )

            nTotLin           := nTotLTpv( cTikL, nDouDiv, nDorDiv )

            if nDtoEsp <> 0
               nDescuentoEsp  := ( nTotLin * nDtoEsp ) / 100
            else
               nDescuentoEsp  := 0
            end

            if nDpp <> 0
               nDescuentoPp   := ( nTotLin * nDpp ) / 100
            else
               nDescuentoPp   := 0
            end

            nBasLin           := nTotLin - nDescuentoEsp - nDescuentoPp
            nIvmLin           := nIvmLTpv( cTikL, nDouDiv, nDorDiv )

            if ( cTikL )->nIvaTil <> 0
               nBasLin        := nTotLin / ( 1 + ( ( cTikL )->nIvaTil / 100 ) )
            else
               nBasLin        := nTotLin
            end

            do case
            case aIvaTik[ 1 ] == nil .OR. aIvaTik[ 1 ] == ( cTikL )->nIvaTil

               aIvaTik[ 1 ]   := ( cTikL )->nIvaTil
               aBrtTik[ 1 ]   += nTotLin
               aBasTik[ 1 ]   += nBasLin
               aImpTik[ 1 ]   += ( nTotLin - nBasLin )
               aIvmTik[ 1 ]   += nIvmLin

            case aIvaTik[ 2 ] == nil .OR. aIvaTik[ 2 ] == ( cTikL )->nIvaTil

               aIvaTik[ 2 ]   := ( cTikL )->nIvaTil
               aBrtTik[ 2 ]   += nTotLin
               aBasTik[ 2 ]   += nBasLin
               aImpTik[ 2 ]   += ( nTotLin - nBasLin )
               aIvmTik[ 2 ]   += nIvmLin

            case aIvaTik[ 3 ] == nil .OR. aIvaTik[ 3 ] == ( cTikL )->nIvaTil

               aIvaTik[ 3 ]   := ( cTikL )->nIvaTil
               aBrtTik[ 3 ]   += nTotLin
               aBasTik[ 3 ]   += nBasLin
               aImpTik[ 3 ]   += ( nTotLin - nBasLin )
               aIvmTik[ 3 ]   += nIvmLin

            end

            nTotTik           += nTotLin
            nTotDtoEsp        += nDescuentoEsp
            nTotDpp           += nDescuentoPp

            nTotCos           += ( cTikL )->nCosDiv

            if ( cTikL )->lInPromo
               nTotPrm        += nTotLin - nDescuentoEsp - nDescuentoPp
            end

         end

      end

      ( cTikL )->( dbskip() )

   end

   nTotBrt           := aBrtTik[ 1 ] + aBrtTik[ 2 ] + aBrtTik[ 3 ]
   nTotNet           := aBasTik[ 1 ] + aBasTik[ 2 ] + aBasTik[ 3 ]
   nTotIva           := aImpTik[ 1 ] + aImpTik[ 2 ] + aImpTik[ 3 ]
   nTotIvm           := aIvmTik[ 1 ] + aIvmTik[ 2 ] + aIvmTik[ 3 ]





   nTotTik           -= nTotDtoEsp
   nTotTik           -= nTotDpp





   nTotPax           := nTotTik / NotCero( nNumCom )





   nTotRnt           := Round( nTotNet - nTotCos, nDorDiv )

   nTotPctRnt        := nRentabilidad( nTotNet, 0, nTotCos )





   nTotTik           := Round( nTotTik, nDorDiv )




















   if !Empty( nOrdAnt )
      ( cTikL )->( OrdSetFocus( nOrdAnt ) )
   end

   ( cTikL )->( dbGoTo( nRecLin ) )

RETURN ( if( lPic, Trans( nTotTik, cPorDiv ), nTotTik ) )






















































































































































FUNCTION nIvmLTpv( dbfTmpL, nDec, nRou, nVdv )

   local nCalculo    := 0

   IIF( dbfTmpL == nil, dbfTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRou == nil, nRou := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 1, ) ;





   if !( dbfTmpL )->lFreTil
      nCalculo       := ( dbfTmpL )->nValImp
      nCalculo       *= nTotNTpv( dbfTmpL )
   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nRou ) )







FUNCTION nTotLTpv( uTmpL, nDec, nRouDec, nVdv )

   local nCalculo := nTotLUno( uTmpL, nDec, nRouDec, nVdv )
   nCalculo       += nTotLDos( uTmpL, nDec, nRouDec, nVdv )

RETURN ( nCalculo )



Function nTotLDos( uTmpL, nDec, nRouDec, nVdv )

   local nCalculo    := 0

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRouDec == nil, nRouDec := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 0, ) ;





   do case
   case ValType( uTmpL ) == "C"

      if !( uTmpL )->lFreTil

         nCalculo    := Round( ( uTmpL )->nPcmTil, nDec )
         nCalculo    *= nTotNTpv( uTmpL )

      end

   otherwise

      if !uTmpL:lFreTil

         nCalculo    := Round( uTmpL:nPcmTil, nDec )
         nCalculo    *= nTotNTpv( uTmpL )

      end

   end

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nRouDec ) )



Function nTotLUno( uTmpL, nDec, nRouDec, nVdv )

   local nCalculo    := 0

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRouDec == nil, nRouDec := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 0, ) ;





   do case
   case ValType( uTmpL ) == "C"

      if !( uTmpL )->lFreTil

         nCalculo       := Round( ( uTmpL )->nPvpTil, nDec )

         if ( uTmpL )->nDtoLin <> 0
            nCalculo    -= ( uTmpL )->nDtoLin * nCalculo / 100
         end

         nCalculo       *= nTotNTpv( uTmpL )

         nCalculo       -= Round( ( uTmpL )->nDtoDiv, nDec )

      end

   otherwise

      if !uTmpL:lFreTil

         nCalculo       := Round( uTmpL:nPvpTil, nDec )

         if uTmpL:nDtoLin <> 0
            nCalculo    -= uTmpL:nDtoLin * nCalculo / 100
         end

         nCalculo       *= nTotNTpv( uTmpL )

         nCalculo       -= Round( uTmpL:nDtoDiv, nDec )

      end

   end

   if nVdv <> 0
      nCalculo          := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nRouDec ) )



Function nCosLTpv( uTmpL, nDec, nRouDec, nVdv, nPrc )

   local nCalculo    := 0

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;
   IIF( nDec == nil, nDec := nDouDiv(), ) ;
   IIF( nRouDec == nil, nRouDec := nRouDiv(), ) ;
   IIF( nVdv == nil, nVdv := 0, ) ;
   IIF( nPrc == nil, nPrc := 0, ) ;





   do case
   case IsChar( uTmpL )

      if nPrc == 0 .OR. nPrc == 1
         nCalculo    += Round( ( uTmpL )->nCosDiv, nDec )
      end

      if nPrc == 0 .OR. nPrc == 2
         nCalculo    += Round( ( uTmpL )->nCosTil, nDec )
      end

   case IsObject( uTmpL )

      if nPrc == 0 .OR. nPrc == 1
         nCalculo    += Round( uTmpL:nCosDiv, nDec )
      end

      if nPrc == 0 .OR. nPrc == 2
         nCalculo    += Round( uTmpL:nCosTil, nDec )
      end

   end

   nCalculo          *= nTotNTpv( uTmpL )

   if nVdv <> 0
      nCalculo       := nCalculo / nVdv
   end

RETURN ( Round( nCalculo, nRouDec ) )







FUNCTION nTotNTpv( uTmpL, cMasUnd )

   local nTotNTpv

   IIF( uTmpL == nil, uTmpL := dbfTikL, ) ;

   do case
   case ValType( uTmpL ) == "A"
      nTotNTpv    := uTmpL[ 8 ]
      nTotNTpv    *= NotCero( uTmpL[ 9 ] )

   case ValType( uTmpL ) == "C"
      nTotNTpv    := ( uTmpL )->nUntTil
      nTotNTpv    *= NotCero( ( uTmpL )->nUndKit )

   otherwise
      nTotnTpv    := uTmpL:nUntTil
      nTotnTpv    *= NotCero( uTmpL:nUndKit )

   end

RETURN ( if( cMasUnd <> nil, Trans( nTotNTpv, cMasUnd ), nTotNTpv ) )






FUNCTION nTotNComandas()

   local nTotNTpv    := 0

   if !Empty( dbfTmpC )
      nTotNTpv       := ( dbfTmpC )->nUntTil
      nTotNTpv       *= NotCero( ( dbfTmpC )->nUndKit )
      RETURN ( nTotNTpv )
   end

   if !Empty( dbfTikL )
      nTotNTpv       := ( dbfTikL )->nUntTil
      nTotNTpv       *= NotCero( ( dbfTikL )->nUndKit )
   end

RETURN ( nTotNTpv )






STATIC FUNCTION lRecTotal( aTmp, lRefreshTotal )

   local nTotal

   IIF( lRefreshTotal == nil, lRefreshTotal := .T., ) ;

   nTotal                  := nTotTik( aTmp[ 1 ] + aTmp[ 2 ] + aTmp[ 3 ], dbfTikT, dbfTmpL, dbfDiv, aTmp, nil, .F. )



   if oTotEsp <> nil
      oTotEsp:Refresh()
   end

   if oTotDpp <> nil
      oTotDpp:Refresh()
   end



   if lRefreshTotal

      if oNumTot <> NIL
         oNumTot:SetText( Trans( nTotal, cPorDiv ) )
      end

   end

   if oTotPdaFam <> NIL
      oTotPdaFam:SetText( Trans( nTotal, cPorDiv ) )
   end

   if oEurTot <> NIL
      oEurTot:SetText( Trans( nCnv2Div( nTotal, aTmp[ 24 ], cDivChg(), dbfDiv ), cPicEur ) )
   end

   if lRefreshTotal

      if oTxtTot <> NIL
         oTxtTot:SetText( "Total" )
      end

   end

   if oTxtCom <> nil
      oTxtCom:SetText( "Comensales: " + AllTrim( Str( aTmp[ 52 ] ) ) )
   end

   if oTotCom <> nil
      oTotCom:SetText( AllTrim( Trans( nTotal / NotCero( aTmp[ 52 ] ), cPorDiv ) ) + " pax." )
   end

   if oGetRnt <> nil
      oGetRnt:SetText( AllTrim( Trans( nTotRnt, cPorDiv ) + Space( 1 ) + " : " + AllTrim( Trans( nTotPctRnt, "999.99" ) ) + "%" ) )
   end

RETURN .T.





Function nTotCobTik( cNumTik, dbfTikP, dbfDiv, cDivRet, lPic )

   local bCon
   local cPorDiv
   local nDorDiv
   local nTotal      := 0
   local cCodDiv     := ( dbfTikP )->cDivPgo
   local aSta        := aGetStatus( dbfTikP, .T. )

   IIF( lPic == nil, lPic := .F., ) ;

   if cNumTik == nil
      bCon           := {|| !( dbfTikP )->( eof() ) }
      ( dbfTikP )->( dbGoTop() )
   else
      bCon           := {|| ( dbfTikP )->cSerTik + ( dbfTikP )->cNumTik + ( dbfTikP )->cSufTik == cNumTik .AND. !( dbfTikP )->( eof() ) }
      ( dbfTikP )->( dbSeek( cNumTik ) )
   end

   cPorDiv           := cPorDiv( cCodDiv, dbfDiv )
   nDorDiv           := nRouDiv( cCodDiv, dbfDiv )

   while Eval( bCon )
      nTotal         += nTotUCobTik( dbfTikP, nDorDiv )
      ( dbfTikP )->( dbSkip() )
   end

   nTotal            := Round( nTotal, nDorDiv )

   SetStatus( dbfTikP, aSta )

   if cDivRet <> nil .AND. cCodDiv <> cDivRet
      cPorDiv        := cPorDiv( cDivRet, dbfDiv )
      nTotal         := nCnv2Div( nTotal, cCodDiv, cDivRet, dbfDiv )
   end

Return ( if( lPic, Trans( nTotal, cPorDiv ), nTotal ) )



Function nTotUCobTik( dbfTikP, nDorDiv, nVdv )

   local nTotCob  := 0

   IIF( nVdv == nil, nVdv := 1, ) ;

   do case
      case ValType( dbfTikP ) == "C"
         nTotCob  := ( dbfTikP )->nImpTik - ( dbfTikP )->nDevTik
      case ValType( dbfTikP ) == "O"
         nTotCob  := dbfTikP:nImpTik - dbfTikP:nDevTik
   end

   if nDorDiv <> nil
      nTotCob     := Round( nTotCob, nDorDiv )
   end

   if nVdv <> 0
      nTotCob     := nTotCob / nVdv
   end

Return ( nTotCob )



Static Function ChangeComentarios( cComentariosT, cComentariosL, oBrwLineasComentarios )

   IIF( cComentariosT == nil, cComentariosT := dbfComentariosT, ) ;
   IIF( cComentariosL == nil, cComentariosL := dbfComentariosL, ) ;





   ( cComentariosL )->( OrdScope( 0, ( cComentariosT )->cCodigo ) )
   ( cComentariosL )->( OrdScope( 1, ( cComentariosT )->cCodigo ) )





   oBrwLineasComentarios:GoTop()
   oBrwLineasComentarios:Select( 0 )
   oBrwLineasComentarios:Select( 1 )
   oBrwLineasComentarios:Refresh( .T. )

return nil



Static Function ChangeLineasComentarios( oGetComentario, cComentariosL )

   local cText := AllTrim( oGetComentario:VarGet() )

   IIF( cComentariosL == nil, cComentariosL := dbfComentariosL, ) ;

   if Empty( cText )
      cText := AllTrim( ( cComentariosL )->cDescri )
   else
      cText += ", " + AllTrim( ( cComentariosL )->cDescri )
   end

   oGetComentario:cText( Padr( cText, 250 ) )

Return ( nil )



Static Function EndComentario( oDlg, dbfTmpL, oGetComentario )

   local cText             := oGetComentario:VarGet()

   if dbLock( dbfTmpL )
      ( dbfTmpL )->cComent := AllTrim( cText )
      ( dbfTmpL )->( dbUnLock() )
   end

   oDlg:End( 1 )

return ( nil )



Static Function YearComboBoxChange()

    if oWndBrw:oWndBar:lAllYearComboBox()
      DestroyFastFilter( dbfTikT )
      CreateUserFilter( "", dbfTikT, .F., , , "all" )
     else
        DestroyFastFilter( dbfTikT )
      CreateUserFilter( "Year( Field->dFecTik ) == " + oWndBrw:oWndBar:cYearComboBox(), dbfTikT, .F., , , "Year( Field->dFecTik ) == " + oWndBrw:oWndBar:cYearComboBox() )
     end

     ( dbfTikT )->( dbGoTop() )

     oWndBrw:Refresh()

Return nil



FUNCTION cUpSerie( cSer )

   local nAsc
   local cChr

   if Empty( cSer ) .OR. cSer < "A"
      cSer     := "A"
      nAsc     := Asc( cSer )
   else
      nAsc     := Asc( cSer ) + 1
   end

   cChr        := Chr( nAsc )

   if cChr > "Z"
      cChr     := "Z"
   end

return cChr



FUNCTION cDwSerie( cSer )

   local nAsc
   local cChr
   local cSerie

   nAsc        := Asc( cSer ) - 1
   cChr        := Chr( nAsc )

   if cChr < "A"
      cChr     := "A"
   end

return cChr



Static Function SetLostFocusOn()

   oDlgDet:Cargo           := .T.

Return ( .T. )



Static Function SetLostFocusOff()

   oDlgDet:Cargo           := .F.

Return ( .T. )



Static Function DlgLostFocus( nMode, aTmp )

   if IsLogic( oDlgDet:Cargo ) .AND. ( oDlgDet:Cargo )

      if ( nMode <> 1 ) .OR. ( Empty( aTmp[ 5 ] ) .AND. Empty( aTmp[ 6 ] ) )

         oDlgDet:End()

      end

   end

Return ( .T. )





Static Function lFidelity( aGet, aTmp, nMode )

   local oDlg

   if !uFieldEmpresa( "lFidelity" )
      return .F.
   end

   if nMode <> 1
      return .F.
   end

   if !Empty( aTmp[ 11 ] ) .AND. ( aTmp[ 11 ] <> cDefCli() )
      return .F.
   end

   oDlg  := TDialog():New( , , , , , "Fidelity" )

      TBitmap():ReDefine( 700, "FidelizacionClientes", , oDlg )

      ApoloBtnBmp():Redefine( 500, "Id_Card_32", , , , , {|| oDlg:end( 1 ), if( !Empty( aGet[ 11 ] ), aGet[ 11 ]:SetFocus(), ) }, oDlg, , , .F., .F., "Si. [ F5 ]", ,,, .T., "TOP", .T., , , .F., )

      ApoloBtnBmp():Redefine( 510, "Id_Card_Delete_32", , , , , {|| oDlg:end( 1 ), appCli( .F. ) }, oDlg, , , .F., .F., "No, pero deseo tenerla. [ F6 ]", ,,, .T., "TOP", .T., , , .F., )

      ApoloBtnBmp():Redefine( 2, "Del32", , , , , {|| oDlg:end() }, oDlg, , , .F., .F., "Gracias, en otra ocasión. [ ESC ]", ,,, .T., "TOP", .T., , , .F., )

      oDlg:AddFastKey( 116, {|| oDlg:end( 1 ), aGet[ 11 ]:SetFocus()} )
      oDlg:AddFastKey( 117, {|| oDlg:end( 1 ), appCli( .F. ) } )

   oDlg:Activate( , , , .T. )

Return ( oDlg:nResult == 1 )



Static Function GetVale( oBrwVal, aTmp )

   local oDlg
   local oGet
   local lError   := .F.
   local cGet     := Space( 13 )
   local cCodCli  := aTmp[ 11 ]
   local nRecAnt  := ( dbfTikT )->( RecNo() )
   local nOrdAnt  := ( dbfTikT )->( OrdSetFocus( "cLiqVal" ) )
   local cTyp     := ( dbfTikT )->( dbOrderInfo( 24 ) )
   local nRec     := ( dbfTmpV )->( RecNo() )

   oDlg = TDialog():New(,,,,, "GetVale",, .F.,,,,,, .F.,,,,,, .F., )




      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, cGet, cGet:= u ) }, oDlg,,,,,,,,, .F.,,, .F., .F.,,,,,, nil,,, )




      TButton():ReDefine( ( 1 ), {||oDlg:end( 1 )}, oDlg,,, .F.,,,, .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   if oDlg:nResult == 1

      if lBigSeek( nil, Upper( cGet ), dbfTikT )





         ( dbfTmpV )->( __dbLocate( {|| ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik == ( dbfTmpV )->cSerTik + ( dbfTmpV )->cNumTik + ( dbfTmpV )->cSufTik } ) )

         if !( dbfTmpV )->( Found() )

            if ( dbfTikT )->dFecTik + uFieldEmpresa( "nDiaVale" ) > GetSysDate()
               lError   := .T.
               MsgStop( "El vale introducido no han alcanzado la fecha para su liquidación." )
            end

            if ( dbfTikT )->cCliTik <> cCodCli
               lError   := .T.
               MsgStop( "El vale introducido pertenece a otro cliente." )
            end

            if !lError

               dbPass( dbfTikT, dbfTmpV, .T. )

               if dbLock( dbfTikT )
                  ( dbfTikT )->lSelDoc := .F.
                  ( dbfTikT )->( dbUnLock() )
               end

            end

         else

            MsgStop( "Vale ya incorporado." )

         end

      else

         MsgStop( "Vale no encontrado." )

      end

   end





   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTikT )->( dbGoTo( nRecAnt ) )

   ( dbfTmpV )->( dbGoTo( nRec ) )





   if oBrwVal <> nil
      oBrwVal:Refresh()
   end

Return .F.



Function EINFTDIAACTUACIONES()

Return nil



Static Function AsistenteDevolucionTiket( aTmp, aGet, nMode, lDevolucion )

   local o
   local oDlg
   local oBmp
   local dbfTmp
   local oBrwDev
   local oNumero
   local cNumero
   local cNewFil
   local nTotSel

   nTotSel        := 0
   cNewFilL       := cGetNewFileName( cPatTmp() + "TikL" )

   dbCreate( cNewFilL, aSqlStruct( aColTik() ), cLocalDriver() )

   dbUseArea( .T., cLocalDriver(), cNewFilL, cCheckArea( "TikL", @dbfTmp ), .F. )
   if !NetErr()
      ( dbfTmp )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
      ( dbfTmp )->( OrdCreate( cNewFilL, "Recno", "Str( Recno() )", {|| Str( Recno() ) } ) )
   end

   oDlg = TDialog():New(,,,,, "ASSVALEDEVOLUCION",, .F.,,,,,, .F.,,,,,, .F., )





      oBmp := TBitmap():ReDefine( 500, "Cashier_delete_48_alpha",, oDlg,,, .F., .F.,,, .F.,,, .T. )








      oNumero := TGetHlp():ReDefine( 100, { | u | If( PCount()==0, cNumero, cNumero:= u ) }, oDlg,, "@!", {||       ( ValidaDevolucionTiket( oNumero, oBrwDev, aTmp, aGet, oDlg, dbfTmp ) )},,,,,, .F.,,, .F., .F.,,,,, {|Self|( BrwTikCli( oNumero ) )}, nil, "LUPA",, )




      oBrwDev                    := TXBrowse():New( oDlg )

      oBrwDev:lFooter            := .T.
      oBrwDev:bClrStd            := {|| if( ( dbfTmp )->nUntTil > 0, { 0, GetSysColor( 5 ) }, { 8421504, GetSysColor( 5 ) } ) }
      oBrwDev:bClrSel            := {|| if( ( dbfTmp )->nUntTil > 0, { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) }, { 8421504, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } ) }
      oBrwDev:bClrSelFocus       := {|| if( ( dbfTmp )->nUntTil > 0, { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) }, { 8421504, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } ) }
      oBrwDev:Cargo              := {}
      oBrwDev:nMarqueeStyle      := 5

      oBrwDev:cAlias             := dbfTmp

      with object ( oBrwDev:AddCol() )
         :cHeader                := ""
         :bEditValue             := {|| aScan( oBrwDev:Cargo, Eval( oBrwDev:bBookMark ) ) > 0 }
         :nWidth                 := 20
         :SetCheck( { "Sel16", "Nil16" }, {|| SelectLinea( @nTotSel, dbfTmp, oBrwDev ) } )
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Código"
         :bEditValue             := {|| ( dbfTmp )->cCbaTil }
         :nWidth                 := 60
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Und."
         :bEditValue             := {|| ( dbfTmp )->nUntTil }
         :cEditPicture           := cPicUnd
         :nWidth                 := 40
         :nEditType              := 1
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
         :bOnPostEdit            := {|o,x| if( x <= ( dbfTmp )->nUntTil .AND. x > 0, ( dbfTmp )->nUntTil := x, ) }
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Prp. 1"
         :bEditValue             := {|| ( dbfTmp )->cValPr1 }
         :nWidth                 := 35
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Prp. 2"
         :bEditValue             := {|| ( dbfTmp )->cValPr2 }
         :nWidth                 := 35
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Lote"
         :bEditValue             := {|| ( dbfTmp )->cLote }
         :nWidth                 := 40
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Detalle"
         :bEditValue             := {|| Rtrim( ( dbfTmp )->cNomTil ) }
         :nWidth                 := 180
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Total"
         :bEditValue             := {|| Trans( nTotLTpv( dbfTmp, nDouDiv, nDorDiv ), cPorDiv ) }
         :nWidth                 := 80
         :bFooter                := {|| Trans( nTotSel, cPorDiv ) }
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
         :nFootStrAlign          := 1
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "Dto. lineal"
         :bEditValue             := {|| Trans( nDtoUTpv( dbfTmpL, nDouDiv ), cPouDiv ) }
         :nWidth                 := 60
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
      end

      with object ( oBrwDev:AddCol() )
         :cHeader                := "%Dto"
         :bEditValue             := {|| Trans( ( dbfTmp )->nDtoLin, "@EZ 999.99" ) }
         :nWidth                 := 35
         :nDataStrAlign          := 1
         :nHeadStrAlign          := 1
      end

      oBrwDev:CreateFromResource( 110 )

      oBrwDev:lHScroll           := .T.
      oBrwDev:lVScroll           := .T.
      oBrwDev:lRecordSelector    := .T.




      TButton():ReDefine( 120, {||( SelectLinea( @nTotSel, dbfTmp, oBrwDev ) )}, oDlg,,, .F.,,,, .F. )





      if lDevolucion

         for each o in ( aButtonsPago )
            o:oButton         := ApoloBtnBmp():Redefine( ( 600 + hb_EnumIndex() ), o:cBigResource, , , , , {|o| FinalizaDevolucionTicket( o, aTmp, aGet, dbfTmp, oNumero, oBrwDev, oDlg ) }, oDlg, , , .F., .F., "Devolución " + Rtrim( o:cText ), , , , .T., "TOP", .T., , , .F. )
            o:oButton:Cargo   := o:cCode
         next

         oDlg:bStart          := {|| aEval( aButtonsPago, {|o| if( !Empty( o:oButton:Cargo ), o:oButton:Show(), ) } ) }

      else

         o                    := ApoloBtnBmp():Redefine( 1, "Document_delete_32", , , , , {|| FinalizaDevolucionTicket( , aTmp, aGet, dbfTmp, oNumero, oBrwDev, oDlg ) }, oDlg, , , .F., .F., "Emitir vale", , , , .T., "TOP", .T., , , .F. )

         oDlg:bStart          := {|| o:Show() }

      end

      ApoloBtnBmp():Redefine( 2, "Del32", , , , , {|| oDlg:end() }, oDlg, , , .F., .F., "Cancelar", , , , .T., "TOP", .T., , , .F. )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

   oBmp:End()

   if !Empty( dbfTmp ) .AND. ( dbfTmp )->( Used() )
      ( dbfTmp )->( dbCloseArea() )
   end

   dbfErase( cNewFil )

   dbfTmp         := nil

Return ( oDlg:nResult == 1 )



Static Function SelectLinea( nTotSel, dbfTmp, oBrwDev )

   local nScan
   local uBook

   if ( dbfTmp )->nUntTil > 0

      uBook       := Eval( oBrwDev:bBookMark )

      nScan       := aScan( oBrwDev:Cargo, uBook )
      if nScan == 0

         nTotSel  += nTotLTpv( dbfTmp, nDouDiv, nDorDiv )

         aAdd( oBrwDev:Cargo, uBook )

      else

         nTotSel  -= nTotLTpv( dbfTmp, nDouDiv, nDorDiv )

         aDel( oBrwDev:Cargo, nScan, .T. )

      end

      oBrwDev:Refresh()

   else

      cInformeDevolucionTpv( dbfTmp )

   end

Return nil



Static Function ValidaDevolucionTiket( oNumero, oBrwDev, aTmp, aGet, oDlg, dbfTmp )

   local lErr
   local nRecAnt
   local nOrdAnt
   local nRecLin
   local nOrdLin
   local cNumero

   cNumero        := oNumero:VarGet()

   if Empty( cNumero )
      Return .T.
   end

   oDlg:Disable()

   lErr           := .F.
   nRecAnt        := ( dbfTikT )->( RecNo() )
   nOrdAnt        := ( dbfTikT )->( OrdSetFocus( "cNumTik" ) )

   if !lBigSeek( nil, Upper( cNumero ), dbfTikT )

      lErr        := .T.

      MsgStop( "Número del tiket no encontrado" )

   else

      if ( dbfTikT )->cTipTik <> "1"

         lErr     := .T.

         MsgStop( "Esta selección no es un ticket" )

      else

         oNumero:cText( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik )





         aTmp[ 11 ]     := ( dbfTikT )->cCliTik
         aTmp[ 13 ]     := ( dbfTikT )->cNomTik
         aTmp[ 19 ]     := ( dbfTikT )->cDniCli
         aTmp[ 14 ]     := ( dbfTikT )->cDirCli
         aTmp[ 15 ]     := ( dbfTikT )->cPobCli
         aTmp[ 16 ]     := ( dbfTikT )->cPrvCli
         aTmp[ 18 ]     := ( dbfTikT )->cPosCli





         if ( dbfTikL )->( dbSeek( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik ) )

            while ( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik .AND. !( dbfTikL )->( eof() ) )

               dbPass( dbfTikL, dbfTmp, .T. )





               ( dbfTmp )->nUntTil  -= nDevNTpv( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikL )





               ( dbfTmp )->cNumDev  := ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik





               ( dbfTikL )->( dbSkip() )

            end

         end

         if !Empty( oBrwDev )
            oBrwDev:Refresh()
            oBrwDev:GoTop()
         end

      end

   end

   ( dbfTikT )->( OrdScope( 0, nil ) )
   ( dbfTikT )->( OrdScope( 1, nil ) )
   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTikT )->( dbGoTo( nRecAnt ) )

   oDlg:Enable()

   if !lErr
      oNumero:Disable()
   end

Return ( .T. )



Static Function FinalizaDevolucionTicket( oBtn, aTmp, aGet, dbfTmp, oNumero, oBrwDev, oDlg )

   local nRec
   local nOrd
   local aTotalTicket
   local nTotalTicket
   local cSerieTicket
   local nNumeroTicket
   local cSufijoTicket
   local cNumeroTicket
   local nTotalDevolucion        := 0
   local nTotTicketOriginal      := 0
   local nTotTicketResultado     := 0
   local nPorcentajeFidelizacion := 0
   local nValePromocion          := 0
   local lValePromocion          := .F.
   local aBlankT                 := {}
   local aBlankL                 := {}

   if len( oBrwDev:Cargo ) == 0

      MsgStop( "Debe seleccionar al menos una línea" )

   else

      CursorWait()

      oDlg:Disable()

      cNumeroTicket        := Alltrim( oNumero:VarGet() )
      nTotalTicket         := 0
      cSerieTicket         := aTmp[ 1 ]
      nNumeroTicket        := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
      cSufijoTicket        := RetSufEmp()





      aTmp[ 24 ]     := cDivEmp()
      aTmp[ 25 ]     := nValDiv( cDivEmp(), dbfDiv )
      aTmp[ 5 ]     := cCurSesion()
      aTmp[ 8 ]     := cCurUsr()
      aTmp[ 9 ]     := oUser():cCaja()
      aTmp[ 12 ]     := Max( uFieldEmpresa( "nPreVta" ), 1 )
      aTmp[ 40 ]     := Date()
      aTmp[ 41 ]     := SubStr( Time(), 1, 5 )
      aTmp[ 7 ]     := Substr( Time(), 1, 5 )
      aTmp[ 50]     := .F.
      aTmp[ 26 ]     := .F.
      aTmp[ 28 ]     := .T.





      if !Empty( oBtn )
         aTmp[ 4 ]  := "4"
      else
         aTmp[ 4 ]  := "6"
      end





      aTmp[ 1 ]     := cSerieTicket
      aTmp[ 2 ]     := nNumeroTicket
      aTmp[ 3 ]     := cSufijoTicket





      for each nRec in ( oBrwDev:Cargo )

         ( dbfTmp )->( dbGoTo( nRec ) )

         dbPass( dbfTmp, dbfTikL, .T., cSerieTicket, nNumeroTicket, cSufijoTicket, "4" )

         nTotalTicket      += nTotLTpv( dbfTmp, nDouDiv, nDorDiv )

      next





      WinGather( aTmp, nil, dbfTikT, nil, 1, nil, .F. )





      if !Empty( oBtn ) .AND. dbAppe( dbfTikP )
         ( dbfTikP )->cSerTik    := cSerieTicket
         ( dbfTikP )->cNumTik    := nNumeroTicket
         ( dbfTikP )->cSufTik    := cSufijoTicket
         ( dbfTikP )->nImpTik    := nTotalTicket
         ( dbfTikP )->cTurPgo    := cCurSesion()
         ( dbfTikP )->dPgoTik    := GetSysDate()
         ( dbfTikP )->cTimTik    := SubStr( Time(), 1, 5 )
         ( dbfTikP )->cCodCaj    := oUser():cCaja()
         ( dbfTikP )->cFpgPgo    := oBtn:Cargo
         ( dbfTikP )->cDivPgo    := cDivEmp()
         ( dbfTikP )->nVdvPgo    := nValDiv( cDivEmp(), dbfDiv )
      end





      nRec                       := ( dbfTikT )->( RecNo() )

      if dbSeekInOrd( cNumeroTicket, "cTikVal", dbfTikT )

         if dbLock( dbfTikT )
            ( dbfTikT )->lLiqTik := .T.
            ( dbfTikT )->lLiqDev := .T.

            ( dbfTikT )->( dbUnLock() )
         endif

      end





      nOrd                       := ( dbfTikT )->( OrdSetFocus( "cNumTik" ) )

      if ( dbfTikT )->( dbSeek( cSerieTicket + nNumeroTicket + cSufijoTicket ) )

         aTotalTicket            := aTotTik( cSerieTicket + nNumeroTicket + cSufijoTicket, dbfTikT, dbfTikL, dbfDiv, nil, nil, .F. )

         if dbLock( dbfTikT )

            ( dbfTikT )->nTotNet := aTotalTicket[ 1 ]
            ( dbfTikT )->nTotIva := aTotalTicket[ 2 ]
            ( dbfTikT )->nTotTik := aTotalTicket[ 3 ]

            ( dbfTikT )->( dbUnLock() )

         endif

      end

      ( dbfTikT )->( OrdSetFocus( nOrd ) )
      ( dbfTikT )->( dbGoTo( nRec ) )





      oUser():OpenCajon()





      ImpTiket( .F. )





      nTotalDevolucion  := nTotalDevoluciones( Padr( cNumeroTicket, 13 ), dbfTikT, dbfTikL )






      if dbSeekInOrd( cNumeroTicket, "cNumTik", dbfTikT ) .AND. dbSeekInOrd( cNumeroTicket, "cNumTil", dbfTikL )

         nTotTicketOriginal      := nTotTik()
         nTotTicketResultado     := nTotTicketOriginal - nTotalDevolucion





         nPorcentajeFidelizacion := oFideliza:nPorcentajePrograma( nTotTicketResultado  )





         lValePromocion          := ( !Retfld( ( dbfTikT )->cCliTik, dbfClient, "lExcFid" ) .AND. ( nPorcentajeFidelizacion <> 0 ) )
         if lValePromocion
            nValePromocion       := nTotTicketResultado * nPorcentajeFidelizacion / 100
         end

      end





      if ( lValePromocion ) .AND. ( nValePromocion > 0 )

         if !Empty( oMetMsg )
            oMetMsg:cText        := "Generando vales"
            oMetMsg:Refresh()
         end





         aBlankT                 := dbScatter( dbfTikT )

         aBlankT[ 2 ]     := Str( nNewDoc( aTmp[ 1 ], dbfTikT, "nTikCli", 10, dbfCount ), 10 )
         aBlankT[ 3 ]     := RetSufEmp()
         aBlankT[ 7 ]     := Substr( Time(), 1, 5 )
         aBlankT[ 40 ]     := Date()
         aBlankT[ 41 ]     := SubStr( Time(), 1, 5 )
         aBlankT[ 4 ]     := "6"
         aBlankT[ 61 ]     := cNumeroTicket
         aBlankT[ 26 ]     := .F.
         aBlankT[ 64 ]     := nValePromocion
         aBlankT[ 66 ]     := nValePromocion

         dbGather( aBlankT, dbfTikT, .T. )





         aBlankL                 := dbBlankRec( dbfTmpL )

         aBlankL[ 1 ]     := aBlankT[ 1 ]
         aBlankL[ 2 ]     := aBlankT[ 2 ]
         aBlankL[ 3 ]     := aBlankT[ 3 ]
         aBlankL[ 4 ]     := "6"
         aBlankL[ 8 ]     := 1
         aBlankL[ 31 ]     := 1
         aBlankL[ 6 ]     := "Vale por promoción"
         aBlankL[ 7 ]     := nValePromocion

         dbGather( aBlankL, dbfTikL, .T. )

         ImpTiket( .F. )

      end





      oDlg:Enable()

      CursorWE()

      oDlg:End( 1 )

   end

Return ( .T. )



static function nTotalDevoluciones( cNumeroTicket, cTikT, cTikL )

   local i
   local nRecT          := ( cTikT )->( Recno() )
   local nRecL          := ( cTikL )->( Recno() )
   local nOrdT          := ( cTikT )->( OrdSetFocus( "cNumTik" ) )
   local nOrdL          := ( cTikL )->( OrdSetFocus( "cDevTik" ) )
   local cValAnt        := ""
   local aDevoluciones  := {}
   local nTotal         := 0

   if ( cTikL )->( dbSeek( cNumeroTicket ) )

      while ( cTikL )->cNumDev == cNumeroTicket .AND. !( cTikL )->( Eof() )

         if aScan( aDevoluciones, ( cTikL )->cSerTil + ( cTikL )->cNumTil + ( cTikL )->cSufTil ) == 0
            aAdd( aDevoluciones, ( cTikL )->cSerTil + ( cTikL )->cNumTil + ( cTikL )->cSufTil )
         end

         ( cTikL )->( dbSkip() )

      end

   end

   if Len( aDevoluciones ) <> 0

      for i := 1 to Len( aDevoluciones )

         if ( cTikT )->( dbSeek( aDevoluciones[i] ) )
            nTotal      += nTotTik()
         end

      next

   end

   ( cTikT )->( OrdSetFocus( nOrdT ) )
   ( cTikL )->( OrdSetFocus( nOrdL ) )
   ( cTikT )->( dbGoTo( nRecT ) )
   ( cTikL )->( dbGoTo( nRecT ) )

return ( nTotal )



Static Function nDevNTpv( cNumero, dbfTikL )

   local nRec
   local nOrd
   local nDev
   local cNum

   nDev           := 0
   nRec           := ( dbfTikL )->( Recno() )
   nOrd           := ( dbfTikL )->( OrdSetFocus( "cNumDev" ) )
   cNum           := Str( ( dbfTikL )->nNumLin )

   if ( dbfTikL )->( dbSeek( cNumero + cNum ) )
      while ( dbfTikL )->cNumDev == cNumero .AND. Str( ( dbfTikL )->nNumLin ) == cNum .AND. !( dbfTikL )->( eof() )
         nDev     += nTotNTpv( dbfTikL )
         ( dbfTikL )->( dbSkip() )
      end
   end

   ( dbfTikL )->( dbGoto( nRec ) )
   ( dbfTikL )->( OrdSetFocus( nOrd ) )

Return ( nDev )



Static Function cInformeDevolucionTpv( dbfTmp )

   local cNum
   local nRec
   local nOrd
   local aInf
   local oBrw
   local oDlg
   local oBmp

   if Empty( ( dbfTmp )->cSerTil )
      Return ( nil )
   end

   cNum           := ""
   nRec           := ( dbfTikL )->( Recno() )
   nOrd           := ( dbfTikL )->( OrdSetFocus( "cNumDev" ) )
   aInf           := {}

   if ( dbfTikL )->( dbSeek( ( dbfTmp )->cSerTil + ( dbfTmp )->cNumTil + ( dbfTmp )->cSufTil + Str( ( dbfTmp )->nNumLin ) ) )
      aAdd( aInf, { "Número",       ( dbfTikL )->cSerTil + "/" + Alltrim( ( dbfTikL )->cNumTil ) + "/" + Alltrim( ( dbfTikL )->cSufTil ) } )
      aAdd( aInf, { "Fecha",        Dtoc( RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,   "dFecTik" ) ) } )
      aAdd( aInf, { "Hora",         RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cHorTik" ) } )
      aAdd( aInf, { "Usuario",      RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cCcjTik" ) } )
      aAdd( aInf, { "Caja",         RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cNcjTik" ) } )
      aAdd( aInf, { "Almacen",      RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cAlmTik" ) } )
      aAdd( aInf, { "Sesión",       Alltrim( RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,"cTurTik" ) ) } )
      aAdd( aInf, { "Cliente",      RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cNomTik" ) } )
      aAdd( aInf, { "Dirección",    RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cDirCli" ) } )
      aAdd( aInf, { "Cod. postal",  RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cPosCli" ) } )
      aAdd( aInf, { "Población",    RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cPobCli" ) } )
      aAdd( aInf, { "Provincia",    RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cPrvCli" ) } )
      aAdd( aInf, { "Teléfono",     RetFld( ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil, dbfTikT,         "cTlfCli" ) } )
      aAdd( aInf, { "Unidades",     AllTrim( nTotNTpv( dbfTikL, cPicUnd ) ) } )
      aAdd( aInf, { "Importe",      AllTrim( Trans( nTotLTpv( dbfTikL, nDouDiv, nDorDiv ), cPorDiv ) ) } )
   end

   ( dbfTikL )->( dbGoto( nRec ) )
   ( dbfTikL )->( OrdSetFocus( nOrd ) )

   if !Empty( aInf )

      oDlg = TDialog():New(,,,,, "TICKETINFO",, .F.,,,,,, .F.,,,,,, .F., )





      oBmp := TBitmap():ReDefine( 500, "Cashier_delete_48_alpha",, oDlg,,, .F., .F.,,, .F.,,, .T. )

      oBrw                       := TXBrowse():New( oDlg )

      oBrw:bClrSel               := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus          := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:SetArray( aInf, , , .F. )

      oBrw:nMarqueeStyle         := 5
      oBrw:lRecordSelector       := .F.
      oBrw:lHScroll              := .F.

      oBrw:CreateFromResource( 100 )

      with object ( oBrw:AddCol() )
         :cHeader                := "Info"
         :bStrData               := {|| aInf[ oBrw:nArrayAt, 1 ] }
         :nWidth                 := 80
      end

      with object ( oBrw:AddCol() )
         :cHeader                := "Valor"
         :bStrData               := {|| aInf[ oBrw:nArrayAt, 2 ] }
         :nWidth                 := 300
      end




      TButton():ReDefine( 1, {||( oDlg:End() )}, oDlg,,, .F.,,,, .F. )

      oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

      oBmp:End()

   else

      MsgStop( "No se ha podido recopilar información." )

   end

Return ( nil )




Static Function dFecMaxVale( cNumTik, cTikT  )

   local dFecMaxVale    := Ctod( "" )
   local nRec
   local nOrdAnt

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;





   nRec                 := ( cTikT )->( Recno() )
   nOrdAnt              := ( cTikT )->( OrdSetFocus( "CDOCVAL" ) )

   if ( cTikT )->( dbSeek( cNumTik ) )

      while ( cTikT )->cValDoc == cNumTik .AND. !( cTikT )->( Eof() )

         if ( cTikT )->dFecTik > dFecMaxVale
            dFecMaxVale := ( cTikT )->dFecTik
         end

      ( cTikT )->( dbSkip() )

      end

   end





   ( cTikT )->( OrdSetFocus( nOrdAnt ) )
   ( cTikT )->( dbGoTo( nRec ) )

   if Empty( DtoC( dFecMaxVale ) )
      dFecMaxVale       := Date()
   end

return ( dFecMaxVale )



Static Function BrwTikCli( oGet )

   local oDlg
    local oBrw
   local oGet1
    local cGet1
   local nOrd           := GetBrwOpt( "BrwTikCli" )
   local oCbxOrd
   local cCbxOrd
   local aCbxOrd        := { "Número", "Fecha", "Código cliente", "Nombre cliente" }
   local nRecAnt        := ( dbfTikT )->( RecNo() )
   local nOrdAnt        := ( dbfTikT )->( OrdSetFocus( "cNumTik" ) )
   local cText          := ""

   nOrd                 := Min( Max( nOrd, 1 ), len( aCbxOrd ) )
   cCbxOrd              := aCbxOrd[ nOrd ]

   nOrd                 := ( dbfTikT )->( OrdSetFocus( nOrd ) )





   ( dbfTikT )->( dbSetFilter( {|| Field->cTipTik == "1" }, "Field->cTipTik == '1'" ) )

   ( dbfTikT )->( dbGoTop() )

   oDlg = TDialog():New(,,,, "Seleccionar tickets", "HelpEntry",, .F.,,,,,, .F.,,,,,, .F., )





      oGet1 := TGetHlp():ReDefine( 104, { | u | If( PCount()==0, cGet1, cGet1:= u ) }, oDlg,,,,,,,,, .F.,, {|nKey,nFlags,Self| AutoSeek( nKey, nFlags, Self, oBrw, dbfTikT ) }, .F., .F.,,,,,, nil, "FIND",, )






        oCbxOrd := TComboBox():ReDefine( 102, { | u | If( PCount()==0, cCbxOrd, cCbxOrd:= u ) }, aCbxOrd, oDlg,,, {|Self|( ( dbfTikT )->( OrdSetFocus( oCbxOrd:nAt ) ), oBrw:Refresh(), oGet1:SetFocus() )},,,, .F.,,,,,, )

      oBrw                    := IXBrowse():New( oDlg )

      oBrw:bClrSel            := {|| { 0, ( 229 + ( 229 * 256 ) + ( 229 * 65536 ) ) } }
      oBrw:bClrSelFocus       := {|| { 0, ( 167 + ( 205 * 256 ) + ( 240 * 65536 ) ) } }

      oBrw:cAlias             := dbfTikT
      oBrw:cName              := "Ticket cliente"
      oBrw:bLDblClick         := {|| oDlg:End( 1 ) }

      oBrw:nMarqueeStyle      := 5

      with object ( oBrw:AddCol() )
         :cHeader             := "Número"
         :cSortOrder          := "cNumTik"
         :bEditValue          := {|| ( dbfTikT )->cSerTik + "/" + AllTrim( ( dbfTikT )->cNumTik ) + "/" + ( dbfTikT )->cSufTik }
         :nWidth              := 70
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Fecha"
         :cSortOrder          := "dFecTik"
         :bEditValue          := {|| Dtoc( ( dbfTikT )->dFecTik ) }
         :nWidth              := 70
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Código cliente"
         :bEditValue          := {|| Rtrim( ( dbfTikT )->cCliTik ) }
         :cSortOrder          := "cCliTik"
         :nWidth              := 75
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Nombre cliente"
         :bEditValue          := {|| AllTrim( ( dbfTikT )->cNomTik ) }
         :cSortOrder          := "cNomTik"
         :nWidth              := 150
         :bLClickHeader       := {| nMRow, nMCol, nFlags, oCol | oCbxOrd:Set( oCol:cHeader ) }
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Importe "
         :bEditValue          := {|| nTotalizer( ( dbfTikT)->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik, dbfTikT, dbfTikL, dbfTikP, dbfAlbCliT, dbfAlbCliL, dbfFacCliT, dbfFacCliL, dbfFacCliP, dbfIva, dbfDiv, cDivEmp(), .T. ) }
         :nWidth              := 85
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Div."
         :bEditValue          := {|| cSimDiv( ( dbfTikT )->cDivTik, dbfDiv ) }
         :nWidth              := 30
         :nDataStrAlign       := 1
         :nHeadStrAlign       := 1
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Sesión"
         :bEditValue          := {|| ( dbfTikT )->cTurTik + "/" + ( dbfTikT )->cSufTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Hora"
         :bEditValue          := {|| ( dbfTikT )->cHorTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Caja"
         :bEditValue          := {|| ( dbfTikT )->cNcjTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Cajero"
         :bEditValue          := {|| ( dbfTikT )->cCcjTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      with object ( oBrw:AddCol() )
         :cHeader             := "Almacén"
         :bEditValue          := {|| ( dbfTikT )->cAlmTik }
         :nWidth              := 80
         :lHide               := .T.
      end

      oBrw:CreateFromResource( 105 )




        TButton():ReDefine( 1, {||( oDlg:end( 1 ) )}, oDlg,,, .F.,,,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )

   oDlg:bStart                := {|| oBrw:Load() }

   oDlg:AddFastKey( 116,    {|| oDlg:end( 1 ) } )
   oDlg:AddFastKey( 13,{|| oDlg:end( 1 ) } )

   oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )





   if oDlg:nResult == 1

      if !Empty( oGet )
         oGet:cText( ( dbfTikT )->cSerTik + ( dbfTikT )->cNumTik + ( dbfTikT )->cSufTik )
      end

   end

   SetBrwOpt( "BrwTikCli", ( dbfTikT )->( OrdNumber() ) )

   ( dbfTikT )->( OrdSetFocus( nOrd ) )

   ( dbfTikT )->( dbClearFilter() )

   CursorWE()

   oGet:SetFocus()





   ( dbfTikT )->( OrdSetFocus( nOrdAnt ) )
   ( dbfTikT )->( dbGoTo( nRecAnt ) )

RETURN ( oDlg:nResult == 1 )



Function nTotalEntregado( cNumDoc, cTikT, cAlbCliP, cDiv )

   IIF( cTikT == nil, cTikT := dbfTikT, ) ;
   IIF( cDiv == nil, cDiv := dbfDiv, ) ;
   IIF( cAlbCliP == nil, cAlbCliP := dbfAlbCliP, ) ;
   IIF( cNumDoc == nil, cNumDoc := ( cTikT )->cNumDoc, ) ;

Return nPagAlbCli( cNumDoc, cAlbCliP, cDiv )





Function ArticuloServido( oBrwLin, dbfTmpL )

   if ( dbfTmpL )->lArtServ

      ( dbfTmpL )->lArtServ := .F.
   else

      ( dbfTmpL )->lArtServ := .T.

   end

   oBrwLin:Refresh()

Return nil





_HB_CLASS TFormatosImpresion ; UTILITY FUNCTION TFormatosImpresion(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TFormatosImpresion" , { HBObject():Classh } ) ) ;

   _HB_MEMBER { cCodCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cCodCaj" }, .F., .F. ), )

   _HB_MEMBER { oFormatoTiket} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFormatoTiket" }, .F., .F. ), )
   _HB_MEMBER { cFormatoTiket} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFormatoTiket" }, .F., .F. ), )

   _HB_MEMBER { oSayFmtTik} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayFmtTik" }, .F., .F. ), )
   _HB_MEMBER { cSayFmtTik} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayFmtTik" }, .F., .F. ), )

   _HB_MEMBER { oPrinterTik} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrinterTik" }, .F., .F. ), )
   _HB_MEMBER { cPrinterTik} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterTik" }, .F., .F. ), )

   _HB_MEMBER { oFmtVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFmtVal" }, .F., .F. ), )
   _HB_MEMBER { cFmtVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtVal" }, .F., .F. ), )
   _HB_MEMBER { oSayFmtVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayFmtVal" }, .F., .F. ), )
   _HB_MEMBER { cSayFmtVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayFmtVal" }, .F., .F. ), )
   _HB_MEMBER { oPrinterVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrinterVal" }, .F., .F. ), )
   _HB_MEMBER { cPrinterVal} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterVal" }, .F., .F. ), )

   _HB_MEMBER { oFmtAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFmtAlb" }, .F., .F. ), )
   _HB_MEMBER { cFmtAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtAlb" }, .F., .F. ), )
   _HB_MEMBER { oSayFmtAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayFmtAlb" }, .F., .F. ), )
   _HB_MEMBER { cSayFmtAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayFmtAlb" }, .F., .F. ), )
   _HB_MEMBER { oPrinterAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrinterAlb" }, .F., .F. ), )
   _HB_MEMBER { cPrinterAlb} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterAlb" }, .F., .F. ), )

   _HB_MEMBER { oFmtFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFmtFac" }, .F., .F. ), )
   _HB_MEMBER { cFmtFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtFac" }, .F., .F. ), )
   _HB_MEMBER { oSayFmtFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oSayFmtFac" }, .F., .F. ), )
   _HB_MEMBER { cSayFmtFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cSayFmtFac" }, .F., .F. ), )
   _HB_MEMBER { oPrinterFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oPrinterFac" }, .F., .F. ), )
   _HB_MEMBER { cPrinterFac} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterFac" }, .F., .F. ), )

   _HB_MEMBER { cFormatoRegalo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFormatoRegalo" }, .F., .F. ), )
   _HB_MEMBER { cPrinterRegalo} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterRegalo" }, .F., .F. ), )

   _HB_MEMBER { cFmtTikChk} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtTikChk" }, .F., .F. ), )
   _HB_MEMBER { cPrinterTikChk} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterTikChk" }, .F., .F. ), )

   _HB_MEMBER { cFormatoEntrega} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFormatoEntrega" }, .F., .F. ), )
   _HB_MEMBER { cPrinterEntrega} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterEntrega" }, .F., .F. ), )

   _HB_MEMBER { cFmtTikDev} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtTikDev" }, .F., .F. ), )
   _HB_MEMBER { cPrinterDev} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterDev" }, .F., .F. ), )

   _HB_MEMBER { cFmtAlbCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtAlbCaj" }, .F., .F. ), )
   _HB_MEMBER { cPrinterAlbCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterAlbCaj" }, .F., .F. ), )

   _HB_MEMBER { cFmtFacCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtFacCaj" }, .F., .F. ), )
   _HB_MEMBER { cPrinterFacCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterFacCaj" }, .F., .F. ), )

   _HB_MEMBER { cFmtEntCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtEntCaj" }, .F., .F. ), )
   _HB_MEMBER { cPrinterEntCaj} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterEntCaj" }, .F., .F. ), )

   _HB_MEMBER { cFmtApt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cFmtApt" }, .F., .F. ), )
   _HB_MEMBER { cPrinterApt} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "cPrinterApt" }, .F., .F. ), )

   _HB_MEMBER Load( dbfCajT); IIF( .F., s_oClass:ModMethod( "Load", @TFormatosImpresion_Load(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Load", @TFormatosImpresion_Load(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TFormatosImpresion ;



UTILITY STATIC function TFormatosImpresion_Load( dbfCajT) ; local Self AS CLASS TFormatosImpresion := QSelf() AS CLASS TFormatosImpresion

   ::cCodCaj         := oUser():cCaja()

   ::cFormatoTiket   := cFormatoTicketEnCaja(   ::cCodCaj, dbfCajT )
   ::cFmtVal         := cFormatoValeEnCaja(     ::cCodCaj, dbfCajT )
   ::cFmtAlb         := cFormatoAlbaranEnCaja(  ::cCodCaj, dbfCajT )
   ::cFmtFac         := cFormatoFacturaEnCaja(  ::cCodCaj, dbfCajT )

   ::cSayFmtTik      := cNombreDoc( ::cFormatoTiket )
   ::cSayFmtVal      := cNombreDoc( ::cFmtVal )
   ::cSayFmtAlb      := cNombreDoc( ::cFmtAlb )
   ::cSayFmtFac      := cNombreDoc( ::cFmtFac )

   ::cPrinterTik     := cPrinterTiket(    ::cCodCaj, dbfCajT )
   ::cPrinterVal     := cPrinterVale(     ::cCodCaj, dbfCajT )
   ::cPrinterAlb     := cPrinterAlbaran(  ::cCodCaj, dbfCajT )
   ::cPrinterFac     := cPrinterFactura(  ::cCodCaj, dbfCajT )

   ::cFormatoRegalo  := cFormatoTicketRegaloEnCaja(   ::cCodCaj, dbfCajT )
   ::cPrinterRegalo  := cPrinterRegalo(               ::cCodCaj, dbfCajT )

   ::cFmtTikChk      := cFormatoChequeRegaloEnCaja(   ::cCodCaj, dbfCajT )
   ::cPrinterTikChk  := cPrinterChequeRegalo(         ::cCodCaj, dbfCajT )

   ::cFormatoEntrega := cFormatoEntregaEnCaja(     ::cCodCaj, dbfCajT )
   ::cPrinterEntrega := cPrinterEntrega(           ::cCodCaj, dbfCajT )
   ::cFmtTikDev      := cFormatoDevolucionEnCaja(  ::cCodCaj, dbfCajT )
   ::cPrinterDev     := cPrinterDevolucion(        ::cCodCaj, dbfCajT )
   ::cFmtAlbCaj      := cFormatoAlbaranEnCaja(     ::cCodCaj, dbfCajT )
   ::cPrinterAlbCaj  := cWindowsPrinterEnCaja(     ::cCodCaj, dbfCajT )

   ::cFmtFacCaj      := cFormatoFacturaEnCaja(  ::cCodCaj, dbfCajT )
   ::cPrinterFacCaj  := cWindowsPrinterEnCaja(  ::cCodCaj, dbfCajT )

   ::cFmtEntCaj      := cFormatoEntregaEnCaja(  ::cCodCaj, dbfCajT )
   ::cPrinterEntCaj  := cPrinterEntrega(        ::cCodCaj, dbfCajT )

   ::cFmtApt         := cFormatoApartadosEnCaja(   ::cCodCaj, dbfCajT )
   ::cPrinterApt     := cPrinterApartados(         ::cCodCaj, dbfCajT )




















return self





Function ImpresionAnulaciones( cNumTik )

   local cPrinter          := ""
   local cFormato          := ""
   local aImp              := {}
   local nPos
   local lCreateTemporal   := .F.
   local cWav              := ""

   CursorWait()

   if Empty( dbfTmpN )

      cNewFilN             := cGetNewFileName( cPatTmp() + "TikAnu" )

      dbCreate( cNewFilN, aSqlStruct( aColTik() ), cLocalDriver() )
      dbUseArea( .T., cLocalDriver(), cNewFilN, cCheckArea( "TikAnu", @dbfTmpN ), .F. )
      if !NetErr()
         ( dbfTmpN )->( OrdCondSet( "!Deleted()", {||!Deleted() } ) )
         ( dbfTmpN )->( OrdCreate( cNewFilN, "cNumTil", "cSerTil + cNumTil + cSufTil", {|| Field->cSerTil + Field->cNumTil + Field->cSufTil } ) )
      end

      lCreateTemporal      := .T.

   else

      ( dbfTmpN )->( __dbZap() )

   end

   if dbSeekInOrd( cNumTik, "cNumTiL", dbfTikL )

      while ( dbfTikL )->cSerTil + ( dbfTikL )->cNumTil + ( dbfTikL )->cSufTil == cNumTik .AND. !( dbfTikL )->( Eof() )

         if ( dbfTikL )->lAnulado

            dbPass( dbfTikL, dbfTmpN, .T. )





            if dbLock( dbfTikL )
               ( dbfTikL )->lAnulado    := .F.
               ( dbfTikL )->( dbUnLock() )
            end





            if !Empty( ( dbfTikL )->cImpCom1 ) .AND. AllTrim( ( dbfTikL )->cImpCom1 )  <> "No imprimir"

               if aScan( aImp, ( dbfTikL )->cImpCom1 ) == 0
                  aAdd( aImp, ( dbfTikL )->cImpCom1 )
               end

            end





            if !Empty( ( dbfTikL )->cImpCom2 ) .AND. AllTrim( ( dbfTikL )->cImpCom2 ) <> "No imprimir"

               if aScan( aImp, ( dbfTikL )->cImpCom2 ) == 0
                  aAdd( aImp, ( dbfTikL )->cImpCom2 )
               end

            end

         end

      ( dbfTikL )->( dbSkip() )

      end

   end





   for nPos := 1 to len( aImp )





      ( dbfTmpN )->( dbSetFilter( {|| ( Field->cImpCom1 == aImp[ nPos ] .OR. Field->cImpCom2 == aImp[ nPos ] ) }, "( Field->cImpCom1 == aImp[ nPos ] .or. Field->cImpCom2 == aImp[ nPos ] )" ) )





      if dbSeekInOrd( cNumTik, "cNumTik", dbfTikT )

         cPrinter := cNombreImpresoraComanda( oUser():cCaja(), aImp[ nPos ], dbfCajL )
         cFormato := cFormatoAnulacionEnCaja( oUser():cCaja(), aImp[ nPos ], dbfCajT, dbfCajL )

         if !Empty( cPrinter )
            GenTikCli( 1, "Imprimiendo anulacion", cFormato, AllTrim( cPrinter ), .F., .T., aImp[ nPos ] )
         end

      end





      ( dbfTmpN )->( dbClearFilter() )





      cWav        := AllTrim( cWavImpresoraComanda( oUser():cCaja(), aImp[ nPos ], dbfCajL ) )

      if !Empty( cWav ) .AND. File( cWav )

         SndPlaySound( cWav )

      end

   next





   if lCreateTemporal

      if !Empty( dbfTmpN ) .AND. ( dbfTmpN )->( Used() )
         ( dbfTmpN )->( dbCloseArea() )
      end

      dbfErase( cNewFilN )

      dbfTmpN  := nil

   end

   CursorWE()

return ( .T. )



static function lBuscaOferta( cCodArt, aGet, aTmp, aTmpTik, dbfOferta, dbfArticulo, dbfDiv, dbfKit, dbfIva  )

   local sOfeArt
   local nTotalLinea    := 0


   if ( dbfArticulo )->Codigo == cCodArt .OR. ( dbfArticulo )->( dbSeek( cCodArt ) )





      nTotalLinea := lCalcDeta( aTmp, nil, .T. )

      sOfeArt     := sOfertaArticulo( cCodArt, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmp[ 8 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], .T., aTmp[19], aTmp[20], aTmp[21], aTmp[22], aTmp[ 24 ], dbfArticulo, dbfDiv, dbfKit, dbfIva, 1, nTotalLinea )

      if !Empty( sOfeArt ) .AND. sOfeArt:nPrecio <> 0
         aGet[ 7 ]:cText( sOfeArt:nPrecio )
         aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
         aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
         aTmp[ 67 ]  := .T.
         if !Empty( aGet[ 67 ] )
            aGet[ 67 ]:Show()
         end
      end

      if !aTmp[ 67 ]





         sOfeArt     := sOfertaFamilia( ( dbfArticulo )->Familia, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], dbfArticulo, aTmp[ 8 ], 1, nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 67 ]  := .T.
            if !Empty( aGet[ 67 ] )
               aGet[ 67 ]:Show()
            end
         end

      end

      if !aTmp[ 67 ]





         sOfeArt     := sOfertaTipoArticulo( ( dbfArticulo )->cCodTip, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], dbfArticulo, aTmp[ 8 ], 1, nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 67 ]  := .T.
            if !Empty( aGet[ 67 ] )
               aGet[ 67 ]:Show()
            end
         end

      end

      if !aTmp[ 67 ]





         sOfeArt     := sOfertaCategoria( ( dbfArticulo )->cCodCate, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], dbfArticulo, aTmp[ 8 ], 1, nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 67 ]  := .T.
            if !Empty( aGet[ 67 ] )
               aGet[ 67 ]:Show()
            end
         end

      end

      if !aTmp[ 67 ]





         sOfeArt     := sOfertaTemporada( ( dbfArticulo )->cCodTemp, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], dbfArticulo, aTmp[ 8 ], 1, nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 67 ]  := .T.
            if !Empty( aGet[ 67 ] )
               aGet[ 67 ]:Show()
            end
         end

      end

      if !aTmp[ 67 ]





         sOfeArt     := sOfertaFabricante( ( dbfArticulo )->cCodFab, aTmpTik[ 11 ], aTmpTik[ 47 ], aTmpTik[ 6 ], dbfOferta, aTmpTik[ 12 ], dbfArticulo, aTmp[ 8 ], 1, nTotalLinea )

         if !Empty( sOfeArt ) .AND. ( sOfeArt:nDtoPorcentual <> 0 .OR. sOfeArt:nDtoLineal <> 0 )
            aGet[ 18 ]:cText( sOfeArt:nDtoPorcentual )
            aGet[ 24 ]:cText( sOfeArt:nDtoLineal )
            aTmp[ 67 ]  := .T.
            if !Empty( aGet[ 67 ] )
               aGet[ 67 ]:Show()
            end
         end

      end

   end

return .T.



Function lLockMesa( cSala, cPunto, cTikM )

   local lClose      := .F.
   local lReturn     := .F.

   IIF( cTikM == nil, cTikM := dbfTikM, ) ;
   IIF( cSala == nil, cSala := "", ) ;
   IIF( cPunto == nil, cPunto := "", ) ;

   if Empty( cTikM )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEM.DBF" ), ( cCheckArea( "TIKEM", @cTikM ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      lClose         := .T.

   end

   if !( cTikM )->( dbSeek( cSala + cPunto ) )

      ( cTikM )->( dbAppend() )
      ( cTikM )->cCodSala   := cSala
      ( cTikM )->cPntVenta  := cPunto
      ( cTikM )->( dbUnLock() )

   end





   if !dbDialogLock( cTikM )
      lReturn        := .T.
   end





   if lClose
      ( cTikM )->( dbCloseArea() )
   end

return lReturn



function lFreeMesa( cSala, cPunto, cTikM )

   local lClose      := .F.

   IIF( cTikM == nil, cTikM := dbfTikM, ) ;
   IIF( cSala == nil, cSala := "", ) ;
   IIF( cPunto == nil, cPunto := "", ) ;

   if Empty( cTikM )

      dbUseArea( .T., ( cDriver() ), ( cPatEmp() + "TIKEM.DBF" ), ( cCheckArea( "TIKEM", @cTikM ) ), if(.T. .OR. .F., !.F., NIL), .F.,, )
      if !lAIS() ; ordListAdd( ( cPatEmp() + "TIKEM.CDX" ) ) ; else ; ordSetFocus( 1 ) ; end

      lClose         := .T.

   end

   if ( cTikM )->( dbSeek( cSala + cPunto ) )





      dbSafeUnLock( cTikM )





      if dbLock( cTikM )
         ( cTikM )->( dbDelete() )
         ( cTikM )->( dbUnLock() )
      end

   end





   if lClose
      ( cTikM )->( dbCloseArea() )
   end

return .F.



Static Function EditarNumeroSerie( aTmp, oStock, nMode )

   local oNumerosSeries

   with object ( TNumerosSerie() )

      :lTicket          := .T.

      :nMode            := nMode

      :cCodArt          := aTmp[ 5 ]
      :cCodAlm          := aTmp[ 27 ]
      :nNumLin          := aTmp[ 31 ]

      :nTotalUnidades   := nTotNTpv( aTmp )

      :oStock           := oStock

      :uTmpSer          := dbfTmpS

      :Resource()

   end

Return ( nil )



Static Function lAddCobro( aTmp, oTotDiv, oBrwPgo )

   CursorWait()

   if aTmp[ 22 ] <> 0

      if dbAppe( dbfTmpP )
         ( dbfTmpP )->cCtaRec    := cCtaCob()
         ( dbfTmpP )->cTurPgo    := cCurSesion()
         ( dbfTmpP )->dPgoTik    := GetSysDate()
         ( dbfTmpP )->cTimTik    := SubStr( Time(), 1, 5 )
         ( dbfTmpP )->cCodCaj    := oUser():cCaja()
         ( dbfTmpP )->nImpTik    := oTotDiv:nCobrado
         ( dbfTmpP )->cFpgPgo    := aTmp[ 21 ]
         ( dbfTmpP )->cSerTik    := aTmp[ 1 ]
         ( dbfTmpP )->cNumTik    := aTmp[ 2 ]
         ( dbfTmpP )->cSufTik    := aTmp[ 3 ]
         ( dbfTmpP )->cDivPgo    := aTmp[ 24 ]
         ( dbfTmpP )->nVdvPgo    := aTmp[ 25 ]
         ( dbfTmpP )->nDevTik    := Max( aTmp[ 23 ], 0 )
      else
         MsgStop( "No se ha podido añadir el registro de pago" )
      end

   end

   CalImpCob( aTmp )

   oBrwPgo:Refresh()

   CursorWE()

Return ( nil )

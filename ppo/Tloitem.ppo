#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 19 ".\Prg\Tloitem.prg"
_HB_CLASS TLOItem ; UTILITY FUNCTION TLOItem(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "TLOItem" , { HBObject():Classh } ) ) ;

      _HB_MEMBER { oLabel} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oLabel" }, .F., .F. ), )
      _HB_MEMBER { aData, aPicture} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "aData" , "aPicture" }, .F., .F. ), )
      _HB_MEMBER { oFont} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oFont" }, .F., .F. ), )
      _HB_MEMBER { nColor} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nColor" }, .F., .F. ), )
      _HB_MEMBER { nWidth, nDataHeight, nCol, nSize, nPad, nPen} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "nWidth" , "nDataHeight" , "nCol" , "nSize" , "nPad" , "nPen" }, .F., .F. ), )
      _HB_MEMBER { lShadow, lGrid} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lShadow" , "lGrid" }, .F., .F. ), )
      _HB_MEMBER { lEan13, lHorz, lBanner} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "lEan13" , "lHorz" , "lBanner" }, .F., .F. ), )


      _HB_MEMBER New( nCol, aData, nSize, aPicture, oFont, cFmt, lShadow, lGrid, lEan13, lHorz, lBanner, nColor, oLabel) AS CLASS TLOItem; IIF( .F., s_oClass:ModMethod( "New", @TLOItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @TLOItem_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

     _HB_MEMBER Stabilize(); IIF( .F., s_oClass:ModMethod( "Stabilize", @TLOItem_Stabilize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Stabilize", @TLOItem_Stabilize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

      _HB_MEMBER SayData( nRow, nCol, nLine); IIF( .F., s_oClass:ModMethod( "SayData", @TLOItem_SayData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "SayData", @TLOItem_SayData(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS TLOItem ;




UTILITY STATIC function TLOItem_New( nCol,    aData, nSize, aPicture,    oFont, nPen, cFmt, lShadow, lGrid, lEan13, lHorz, lBanner, nColor, oLabel) ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem














      IIF( aData == nil, aData := {{|| ""} }, ) ; IIF( nSize == nil, nSize := 0, ); IIF( aPicture == nil, aPicture := {""}, ); IIF( nCol == nil, nCol := 0, ); IIF( oFont == nil, oFont := TFont():New( "Ms Sans Serif", 6, 12, .F. ), ); IIF( nPen == nil, nPen := 1, ); IIF( lShadow == nil, lShadow := .F., ); IIF( lGrid == nil, lGrid := .F., ); IIF( nColor == nil, nColor := 0, ); IIF( lEan13 == nil, lEan13 := .F., ); IIF( lHorz == nil, lHorz := .T., ); IIF( lBanner == nil, lBanner := .T., ); IIF( cFmt == nil, cFmt := iif(Valtype(Eval(aData[1]))=="N", "RIGHT", "LEFT"), );

     ::aData      = aData
     ::nSize      = nSize
      ::aPicture   = aPicture
      ::oFont         = oFont
     ::lShadow    = lShadow
     ::lGrid      = lGrid
     ::nPen       = nPen
      ::oLabel     = oLabel
      ::nCol       = nCol
      ::nWidth     = 0
      ::lEan13     = lEan13
      ::lHorz      = lHorz
      ::lBanner    = lBanner
      ::nColor     = nColor

      IF cFmt == "LEFT"
             ::nPad = 1
      ELSEIF cFmt == "RIGHT"
             ::nPad = 2
      ELSEIF cFmt == "CENTER" .OR. cFmt == "CENTERED"
             ::nPad = 3
      ELSE
             ::nPad = 1
      ENDIF

     while len(::aPicture) < len(::aData)
             Aadd(::aPicture, "" )
     ENDDO

RETURN Self



UTILITY STATIC function TLOItem_Stabilize() ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem

      ::nDataHeight  := ::oLabel:oDevice:GetTextHeight("B", ::oFont )






      IF ::nDataHeight > ::oLabel:nLblHeight
             ::nDataHeight := ::oLabel:nLblHeight
      end






















          ::nWidth := ::oLabel:nLblWidth



RETURN Self





































UTILITY STATIC function TLOItem_SayData( nRow, nCol, nLine) ; local Self AS CLASS TLOItem := QSelf() AS CLASS TLOItem

     LOCAL cText
     LOCAL nWidth
     LOCAL cLine
     LOCAL nPos      := 0



     IIF( nRow == nil, nRow := 0, ) ; IIF( nCol == nil, nCol := 0, ); IIF( nLine == nil, nLine := 1, );

     IF nLine > len(::aData)
          RETU NIL
      ENDIF

      IF ::nCol <> 0
             nCol += ::nCol
      end

     cText  := Transform(eval(::aData[nLine]),::aPicture[nLine])

     while len( cText ) <> 0

         nWidth         := ::oLabel:oDevice:GetTextWidth(cText,::oFont)
         cLine          := cText

         while nWidth > ::nWidth
            nPos        := Rat( " ", cLine )
            if nPos <> 0
               cLine    := SubStr( cLine, 1, nPos - 1 )
               nWidth   := ::oLabel:oDevice:GetTextWidth( cLine, ::oFont )
            else
               exit
            end
         end

         if nPos <> 0
            ::oLabel:oDevice:Say( nRow, nCol, cLine, ::oFont, ::nWidth, ::nColor, , ::nPad - 1 )
            ::oLabel:NewLine()
            cText       := SubStr( cText, nPos + 1 )
            nRow        += ::nDataHeight
            nPos        := 0
         else
            ::oLabel:oDevice:Say( nRow, nCol, cText, ::oFont, ::nWidth, ::nColor, , ::nPad - 1 )
            cText       := ""
         end

     end

RETURN NIL

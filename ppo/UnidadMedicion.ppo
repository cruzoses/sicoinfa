#line 112 "hbclass.ch"
   DYNAMIC DivertConstructorCall
















DECLARE HBClass  New( cName AS String, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS Object  Instance() AS Object  AddClsMethod( cName AS String, @MethodName(), nScope AS Numeric, n2 AS Numeric, n3 AS Numeric )  AddDelegate( cName AS String, cDelegate AS String, cObject AS String, nScope AS Numeric, lPersistent AS LOGICAL )  AddMultiClsData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String )  AddMultiData( cType AS String, uVal, nScope AS Numeric, aDatas AS Array OF String, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  AddInLine( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  AddVirtual( cName AS String )  ModMethod( cName AS String, @MethodName(), nScope AS Numeric, lPersistent AS LOGICAL )  ModClsMethod( cName AS String, @MethodName(), nScope AS Numeric )  ModInline( cName AS String, bBlock AS CodeBlock, nScope AS Numeric, lPersistent AS LOGICAL )  SetOnError( @MethodName() )
#line 85 "\Fwh1204\Include\FiveWin.Ch"
   EXTERNAL GetProcAdd
   EXTERNAL TActiveX




extern errorsys
#line 14 ".\Prg\UnidadMedicion.prg"
_HB_CLASS UniMedicion ; UTILITY FUNCTION UniMedicion(...); static s_oClass ; local oClassInstance ; local nScope ; nScope := 1 ; if s_oClass == NIL ; s_oClass := IIF(.F.,, HBClass():New( "UniMedicion" , {TMant():classh} ) ) ; ;

   _HB_MEMBER { cMru} ; IIF( !.F., s_oClass:AddMultiData(, "Worker_Folder_Blue_16", nScope + IIF( .F., 32, 0 ), { "cMru" }, .F., .F. ), )

   _HB_MEMBER { oGetDimension} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetDimension" }, .F., .F. ), )

   _HB_MEMBER { oGetTextoDimension1} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetTextoDimension1" }, .F., .F. ), )
   _HB_MEMBER { oGetTextoDimension2} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetTextoDimension2" }, .F., .F. ), )
   _HB_MEMBER { oGetTextoDimension3} ; IIF( !.F., s_oClass:AddMultiData(,, nScope + IIF( .F., 32, 0 ), { "oGetTextoDimension3" }, .F., .F. ), )

   _HB_MEMBER Create( cPath) AS CLASS UniMedicion; IIF( .F., s_oClass:ModMethod( "Create", @UniMedicion_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Create", @UniMedicion_Create(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER New( cPath, oWndParent, oMenuItem) AS CLASS UniMedicion; IIF( .F., s_oClass:ModMethod( "New", @UniMedicion_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "New", @UniMedicion_New(), nScope + IIF( .T., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenFiles( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenFiles", @UniMedicion_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenFiles", @UniMedicion_OpenFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER OpenService( lExclusive); IIF( .F., s_oClass:ModMethod( "OpenService", @UniMedicion_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "OpenService", @UniMedicion_OpenService(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER DefineFiles(); IIF( .F., s_oClass:ModMethod( "DefineFiles", @UniMedicion_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "DefineFiles", @UniMedicion_DefineFiles(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Resource( nMode); IIF( .F., s_oClass:ModMethod( "Resource", @UniMedicion_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Resource", @UniMedicion_Resource(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER lPreSave( nMode); IIF( .F., s_oClass:ModMethod( "lPreSave", @UniMedicion_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "lPreSave", @UniMedicion_lPreSave(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER ChangeDimension(); IIF( .F., s_oClass:ModMethod( "ChangeDimension", @UniMedicion_ChangeDimension(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "ChangeDimension", @UniMedicion_ChangeDimension(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

   _HB_MEMBER Syncronize(); IIF( .F., s_oClass:ModMethod( "Syncronize", @UniMedicion_Syncronize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ), s_oClass:AddMethod( "Syncronize", @UniMedicion_Syncronize(), nScope + IIF( .F., 16, 0 ) + IIF( .F., 1024, 0 ), .F. ));

; IF .F. ; __clsActive(s_oClass:hClass) ; s_oClass:Refresh() ; ELSE ; s_oClass:Create() ; END ; oClassInstance := __clsInst( s_oClass:hClass ) ; IF __ObjHasMsg( oClassInstance, "InitClass" ); oClassInstance:InitClass( hb_aParams() ) ; END ; ELSE ; oClassInstance := __clsInst( s_oClass:hClass ) ; END ; IF PCount() > 0 ; DIVERT TO (@DivertConstructorCall()) OF s_oClass ; END ; RETURN oClassInstance AS CLASS UniMedicion ;



UTILITY STATIC function UniMedicion_Create( cPath) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   IIF( cPath == nil, cPath := cPatGrp(), ) ;

   ::cPath              := cPath
   ::oDbf               := nil

RETURN ( Self )



UTILITY STATIC function UniMedicion_New( cPath, oWndParent, oMenuItem) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   IIF( cPath == nil, cPath := cPatGrp(), ) ;
   IIF( oWndParent == nil, oWndParent := oWnd(), ) ;

   if oMenuItem <> nil
      ::nLevel          := nLevelUsr( oMenuItem )
   end

   ::cPath              := cPath
   ::oWndParent         := oWndParent
   ::oDbf               := nil

   ::cBitmap            := ( 104 + ( 0 * 256 ) + ( 63 * 65536 ) )

   ::lAutoButtons       := .T.
   ::lCreateShell       := .F.

   ::cPicUnd            := MasUnd()

RETURN ( Self )



UTILITY STATIC function UniMedicion_OpenService( lExclusive) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   local lOpen          := .T.
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

   if Empty( ::oDbf )
      ::DefineFiles()
   end

   ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER

      msgStop( "Imposible abrir todas las bases de datos" )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function UniMedicion_OpenFiles( lExclusive) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   local lOpen          := .T.
   local oError
   local oBlock         := ErrorBlock( {| oError | ApoloBreak( oError ) } )

   IIF( lExclusive == nil, lExclusive := .F., ) ;

   BEGIN SEQUENCE

      if Empty( ::oDbf )
         ::DefineFiles()
      end

      ::oDbf:Activate( .F., !( lExclusive ) )

   RECOVER USING oError

      msgStop( "Imposible abrir todas las bases de datos" + Chr(13)+Chr(10) + ErrorMessage( oError )  )

      ::CloseFiles()

      lOpen             := .F.

   end

   ErrorBlock( oBlock )

RETURN ( lOpen )



UTILITY STATIC function UniMedicion_DefineFiles( cPath, cDriver) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   IIF( cPath == nil, cPath := ::cPath, ) ;
   IIF( cDriver == nil, cDriver := cDriver(), ) ;

   ::oDbf := DbfServer( "UndMed.Dbf", "TUniMed" ):New( "UndMed.Dbf", "UndMed", ( cDriver ), "Unidades de medición", ( cPath ) )

      ::oDbf:AddField( "cCodMed", "C", 2, 0,,,,, "Código", .F., 50, .F., {} )
      ::oDbf:AddField( "cNombre", "C", 100, 0,,,,, "Nombre", .F., 200, .F., {} )
      ::oDbf:AddField( "nDimension", "N", 1, 0,,,,, "", .F.,, .T., {} )
      ::oDbf:AddField( "cAcronimo", "C", 6, 0,,,,, "Acronimo", .F., 60, .F., {} )
      ::oDbf:AddField( "cTextoDim1", "C", 25, 0,,,,, "Dimensión 1", .F., 200, .F., {} )
      ::oDbf:AddField( "cTextoDim2", "C", 25, 0,,,,, "Dimensión 2", .F., 200, .F., {} )
      ::oDbf:AddField( "cTextoDim3", "C", 25, 0,,,,, "Dimensión 3", .F., 200, .F., {} )

      ::oDbf:AddIndex( "cCodMed", "UndMed.Cdx", "cCodMed",,, .F., .F., "Código",,, .T., .F. )
      ::oDbf:AddIndex( "cNombre", "UndMed.Cdx", "cNombre",,, .F., .F., "Nombre",,, .T., .F. )



RETURN ( ::oDbf )



UTILITY STATIC function UniMedicion_Resource( nMode) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   local oDlg
   local oGet

   if nMode == 1
      ::oDbf:nDimension := 0
   end

   oDlg = TDialog():New(,,,, LblTitle( nMode ) + "unidades de medición", "UND_MEDICION",, .F.,,,,,, .F.,,,,,, .F., )






      oGet := TGetHlp():ReDefine( 110, { | u | If( PCount()==0, ::oDbf:cCodMed, ::oDbf:cCodMed:= u ) }, oDlg,, "@!", {||    NotValid( oGet, ::oDbf:cAlias )},,,,,, .F., {||     ( nMode == 1 )},, .F., .F.,,,,,, nil,,, )




      TGetHlp():ReDefine( 120, { | u | If( PCount()==0, ::oDbf:cNombre, ::oDbf:cNombre:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )









      ::oGetDimension := TGetHlp():ReDefine( 130, { | u | If( PCount()==0, ::oDbf:nDimension, ::oDbf:nDimension:= u ) }, oDlg,, "9", {||    ( ::oDbf:nDimension >= 0 .AND. ::oDbf:nDimension <= 3 )},,,,,, .F., {||     ( nMode <> 3 )},, .F., .T.,,, {||      0}, {||      3},, nil,,, )

      ::oGetDimension:bChange := {|| ::ChangeDimension() }





      TGetHlp():ReDefine( 140, { | u | If( PCount()==0, ::oDbf:cAcronimo, ::oDbf:cAcronimo:= u ) }, oDlg,, "@!",,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,,, )





      ::oGetTextoDimension1 := TGetHlp():ReDefine( 150, { | u | If( PCount()==0, ::oDbf:cTextoDim1, ::oDbf:cTextoDim1:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 )},, .F., .F.,,,,,, nil,, 151, )





      ::oGetTextoDimension2 := TGetHlp():ReDefine( 160, { | u | If( PCount()==0, ::oDbf:cTextoDim2, ::oDbf:cTextoDim2:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ::oDbf:nDimension >= 2 )},, .F., .F.,,,,,, nil,, 161, )





      ::oGetTextoDimension3 := TGetHlp():ReDefine( 170, { | u | If( PCount()==0, ::oDbf:cTextoDim3, ::oDbf:cTextoDim3:= u ) }, oDlg,,,,,,,,, .F., {||     ( nMode <> 3 .AND. ::oDbf:nDimension == 3 )},, .F., .F.,,,,,, nil,, 171, )





      TButton():ReDefine( 1, {||( if( ::lPreSave( nMode ), oDlg:end( 1 ), ) )}, oDlg,,, .F., {||         ( nMode <> 3 )},,, .F. )





        TButton():ReDefine( 2, {||( oDlg:end() )}, oDlg,,, .F.,,,, .T. )





      TButton():ReDefine( 559, {||( MsgInfo( "Ayuda no definida" ) )}, oDlg,,, .F.,,,, .T. )

   if nMode <> 3
      oDlg:AddFastKey( 116, {|| if( ::lPreSave( nMode ), oDlg:end( 1 ), ) } )
   end

   oDlg:bStart    := {|| ::ChangeDimension(), oGet:SetFocus() }

    oDlg:Activate( oDlg:bLClicked, oDlg:bMoved, oDlg:bPainted, .T.,,,, oDlg:bRClicked,,, )

RETURN ( oDlg:nResult == 1 )



UTILITY STATIC function UniMedicion_lPreSave( nMode) ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   if nMode == 1 .OR. nMode == 4

      if ::oDbf:SeekInOrd( ::oDbf:cCodMed, "CCODMED" )
         MsgStop( "Código ya existe " + Rtrim( ::oDbf:cCodMed ) )
         return .F.
      end

   end

   if Empty( ::oDbf:cNombre )
      MsgStop( "El campo nombre de medición no puede estar vacio." )
      Return .F.
   end

   if ::oDbf:nDimension > 0 .AND. Empty( ::oDbf:cTextoDim1)
      MsgStop( "El campo dimensión 1 no puede estar vacio." )
      return .F.
   end

   if ::oDbf:nDimension > 1 .AND. Empty( ::oDbf:cTextoDim2 )
      MsgStop( "El campo dimensión 2 no puede estar vacio." )
      return .F.
   end

   if ::oDbf:nDimension > 2 .AND. Empty( ::oDbf:cTextoDim3 )
      MsgStop( "El campo dimensión 3 no puede estar vacio." )
      return .F.
   end

   if ::oDbf:nDimension < 1
      ::oDbf:cTextoDim1 := Space( 25 )
   end

   if ::oDbf:nDimension < 2
      ::oDbf:cTextoDim2 := Space( 25 )
   end

   if ::oDbf:nDimension < 3
      ::oDbf:cTextoDim3 := Space( 25 )
   end

RETURN .T.



UTILITY STATIC function UniMedicion_ChangeDimension() ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   local nDimension  := ::oGetDimension:VarGet()

   do case
      case nDimension == 0
         ::oGetTextoDimension1:Hide()
         ::oGetTextoDimension2:Hide()
         ::oGetTextoDimension3:Hide()

      case nDimension == 1
         ::oGetTextoDimension1:Show()
         ::oGetTextoDimension2:Hide()
         ::oGetTextoDimension3:Hide()

      case nDimension == 2
         ::oGetTextoDimension1:Show()
         ::oGetTextoDimension2:Show()
         ::oGetTextoDimension3:Hide()

      case nDimension == 3
         ::oGetTextoDimension1:Show()
         ::oGetTextoDimension2:Show()
         ::oGetTextoDimension3:Show()

   end

Return .T.



UTILITY STATIC function UniMedicion_Syncronize() ; local Self AS CLASS UniMedicion := QSelf() AS CLASS UniMedicion

   if ::OpenService( .T. )

      if !::oDbf:Seek( "UD" )

         ::oDbf:Append()
         ::oDbf:cCodMed    := "UD"
         ::oDbf:cNombre    := "Unidades"
         ::oDbf:cAcronimo  := "UD"
         ::oDbf:Save()

      end

      ::CloseService()

   end

Return .T.
